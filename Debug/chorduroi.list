
chorduroi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007784  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  08007918  08007918  00017918  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007980  08007980  000204e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007980  08007980  00017980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007988  08007988  000204e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007988  08007988  00017988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800798c  0800798c  0001798c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004e4  20000000  08007990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000c58  200004e4  08007e74  000204e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000113c  08007e74  0002113c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fe2a  00000000  00000000  00020514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c57  00000000  00000000  0003033e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00032f98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b20  00000000  00000000  00033c18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019ac1  00000000  00000000  00034738  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001074c  00000000  00000000  0004e1f9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009338d  00000000  00000000  0005e945  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1cd2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000031d4  00000000  00000000  000f1d24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200004e4 	.word	0x200004e4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007900 	.word	0x08007900

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200004e8 	.word	0x200004e8
 80001d0:	08007900 	.word	0x08007900

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <checkKeyPins>:
#include "keyb_util.h"



//Init the pin array
void checkKeyPins(uint8_t* keyRef){
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	keyRef[4] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	1d1c      	adds	r4, r3, #4
 80004e4:	2110      	movs	r1, #16
 80004e6:	4823      	ldr	r0, [pc, #140]	; (8000574 <checkKeyPins+0x9c>)
 80004e8:	f001 fd84 	bl	8001ff4 <HAL_GPIO_ReadPin>
 80004ec:	4603      	mov	r3, r0
 80004ee:	7023      	strb	r3, [r4, #0]
	keyRef[5] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 80004f0:	687b      	ldr	r3, [r7, #4]
 80004f2:	1d5c      	adds	r4, r3, #5
 80004f4:	2120      	movs	r1, #32
 80004f6:	481f      	ldr	r0, [pc, #124]	; (8000574 <checkKeyPins+0x9c>)
 80004f8:	f001 fd7c 	bl	8001ff4 <HAL_GPIO_ReadPin>
 80004fc:	4603      	mov	r3, r0
 80004fe:	7023      	strb	r3, [r4, #0]
	keyRef[6] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8000500:	687b      	ldr	r3, [r7, #4]
 8000502:	1d9c      	adds	r4, r3, #6
 8000504:	2140      	movs	r1, #64	; 0x40
 8000506:	481b      	ldr	r0, [pc, #108]	; (8000574 <checkKeyPins+0x9c>)
 8000508:	f001 fd74 	bl	8001ff4 <HAL_GPIO_ReadPin>
 800050c:	4603      	mov	r3, r0
 800050e:	7023      	strb	r3, [r4, #0]
	keyRef[7] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 8000510:	687b      	ldr	r3, [r7, #4]
 8000512:	1ddc      	adds	r4, r3, #7
 8000514:	2180      	movs	r1, #128	; 0x80
 8000516:	4817      	ldr	r0, [pc, #92]	; (8000574 <checkKeyPins+0x9c>)
 8000518:	f001 fd6c 	bl	8001ff4 <HAL_GPIO_ReadPin>
 800051c:	4603      	mov	r3, r0
 800051e:	7023      	strb	r3, [r4, #0]
	keyRef[12] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	f103 040c 	add.w	r4, r3, #12
 8000526:	2101      	movs	r1, #1
 8000528:	4813      	ldr	r0, [pc, #76]	; (8000578 <checkKeyPins+0xa0>)
 800052a:	f001 fd63 	bl	8001ff4 <HAL_GPIO_ReadPin>
 800052e:	4603      	mov	r3, r0
 8000530:	7023      	strb	r3, [r4, #0]
	keyRef[13] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 8000532:	687b      	ldr	r3, [r7, #4]
 8000534:	f103 040d 	add.w	r4, r3, #13
 8000538:	2102      	movs	r1, #2
 800053a:	480f      	ldr	r0, [pc, #60]	; (8000578 <checkKeyPins+0xa0>)
 800053c:	f001 fd5a 	bl	8001ff4 <HAL_GPIO_ReadPin>
 8000540:	4603      	mov	r3, r0
 8000542:	7023      	strb	r3, [r4, #0]
	keyRef[14] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
 8000544:	687b      	ldr	r3, [r7, #4]
 8000546:	f103 040e 	add.w	r4, r3, #14
 800054a:	2104      	movs	r1, #4
 800054c:	480a      	ldr	r0, [pc, #40]	; (8000578 <checkKeyPins+0xa0>)
 800054e:	f001 fd51 	bl	8001ff4 <HAL_GPIO_ReadPin>
 8000552:	4603      	mov	r3, r0
 8000554:	7023      	strb	r3, [r4, #0]
	keyRef[15] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 8000556:	687b      	ldr	r3, [r7, #4]
 8000558:	f103 040f 	add.w	r4, r3, #15
 800055c:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000560:	4805      	ldr	r0, [pc, #20]	; (8000578 <checkKeyPins+0xa0>)
 8000562:	f001 fd47 	bl	8001ff4 <HAL_GPIO_ReadPin>
 8000566:	4603      	mov	r3, r0
 8000568:	7023      	strb	r3, [r4, #0]
	//keyRef[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
	//keyRef[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
	//keyRef[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
	//keyRef[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);

}
 800056a:	bf00      	nop
 800056c:	370c      	adds	r7, #12
 800056e:	46bd      	mov	sp, r7
 8000570:	bd90      	pop	{r4, r7, pc}
 8000572:	bf00      	nop
 8000574:	40020000 	.word	0x40020000
 8000578:	40020400 	.word	0x40020400

0800057c <setModByte>:


void setModByte(uint8_t* code, keyboardHIDReport report){
 800057c:	b480      	push	{r7}
 800057e:	b085      	sub	sp, #20
 8000580:	af00      	add	r7, sp, #0
 8000582:	60f8      	str	r0, [r7, #12]
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	e883 0006 	stmia.w	r3, {r1, r2}
	report.MOD = report.MOD | *code;
 800058a:	793a      	ldrb	r2, [r7, #4]
 800058c:	68fb      	ldr	r3, [r7, #12]
 800058e:	781b      	ldrb	r3, [r3, #0]
 8000590:	4313      	orrs	r3, r2
 8000592:	b2db      	uxtb	r3, r3
 8000594:	713b      	strb	r3, [r7, #4]
}
 8000596:	bf00      	nop
 8000598:	3714      	adds	r7, #20
 800059a:	46bd      	mov	sp, r7
 800059c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005a0:	4770      	bx	lr

080005a2 <setKeyBytes>:

void setKeyBytes(uint8_t* code, keyboardHIDReport keyboardReport){
 80005a2:	b480      	push	{r7}
 80005a4:	b085      	sub	sp, #20
 80005a6:	af00      	add	r7, sp, #0
 80005a8:	60f8      	str	r0, [r7, #12]
 80005aa:	1d3b      	adds	r3, r7, #4
 80005ac:	e883 0006 	stmia.w	r3, {r1, r2}
	if(keyboardReport.K1 == 0){
 80005b0:	79bb      	ldrb	r3, [r7, #6]
 80005b2:	2b00      	cmp	r3, #0
 80005b4:	d103      	bne.n	80005be <setKeyBytes+0x1c>
		keyboardReport.K1 = *code;
 80005b6:	68fb      	ldr	r3, [r7, #12]
 80005b8:	781b      	ldrb	r3, [r3, #0]
 80005ba:	71bb      	strb	r3, [r7, #6]
	} else if(keyboardReport.K5 == 0){
		keyboardReport.K5 = *code;
	} else if(keyboardReport.K6 == 0){
		keyboardReport.K6 = *code;
	}
}
 80005bc:	e021      	b.n	8000602 <setKeyBytes+0x60>
	} else if(keyboardReport.K2 == 0){
 80005be:	79fb      	ldrb	r3, [r7, #7]
 80005c0:	2b00      	cmp	r3, #0
 80005c2:	d103      	bne.n	80005cc <setKeyBytes+0x2a>
		keyboardReport.K2 = *code;
 80005c4:	68fb      	ldr	r3, [r7, #12]
 80005c6:	781b      	ldrb	r3, [r3, #0]
 80005c8:	71fb      	strb	r3, [r7, #7]
}
 80005ca:	e01a      	b.n	8000602 <setKeyBytes+0x60>
	} else if(keyboardReport.K3 == 0){
 80005cc:	7a3b      	ldrb	r3, [r7, #8]
 80005ce:	2b00      	cmp	r3, #0
 80005d0:	d103      	bne.n	80005da <setKeyBytes+0x38>
		keyboardReport.K3 = *code;
 80005d2:	68fb      	ldr	r3, [r7, #12]
 80005d4:	781b      	ldrb	r3, [r3, #0]
 80005d6:	723b      	strb	r3, [r7, #8]
}
 80005d8:	e013      	b.n	8000602 <setKeyBytes+0x60>
	} else if(keyboardReport.K4 == 0){
 80005da:	7a7b      	ldrb	r3, [r7, #9]
 80005dc:	2b00      	cmp	r3, #0
 80005de:	d103      	bne.n	80005e8 <setKeyBytes+0x46>
		keyboardReport.K4 = *code;
 80005e0:	68fb      	ldr	r3, [r7, #12]
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	727b      	strb	r3, [r7, #9]
}
 80005e6:	e00c      	b.n	8000602 <setKeyBytes+0x60>
	} else if(keyboardReport.K5 == 0){
 80005e8:	7abb      	ldrb	r3, [r7, #10]
 80005ea:	2b00      	cmp	r3, #0
 80005ec:	d103      	bne.n	80005f6 <setKeyBytes+0x54>
		keyboardReport.K5 = *code;
 80005ee:	68fb      	ldr	r3, [r7, #12]
 80005f0:	781b      	ldrb	r3, [r3, #0]
 80005f2:	72bb      	strb	r3, [r7, #10]
}
 80005f4:	e005      	b.n	8000602 <setKeyBytes+0x60>
	} else if(keyboardReport.K6 == 0){
 80005f6:	7afb      	ldrb	r3, [r7, #11]
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d102      	bne.n	8000602 <setKeyBytes+0x60>
		keyboardReport.K6 = *code;
 80005fc:	68fb      	ldr	r3, [r7, #12]
 80005fe:	781b      	ldrb	r3, [r3, #0]
 8000600:	72fb      	strb	r3, [r7, #11]
}
 8000602:	bf00      	nop
 8000604:	3714      	adds	r7, #20
 8000606:	46bd      	mov	sp, r7
 8000608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800060c:	4770      	bx	lr

0800060e <setReport>:

//TODO physical vs imp priority could be configurable
void setReport(int keypress, Layer* layer, keyboardHIDReport keyboardReport){
 800060e:	b580      	push	{r7, lr}
 8000610:	b086      	sub	sp, #24
 8000612:	af00      	add	r7, sp, #0
 8000614:	60f8      	str	r0, [r7, #12]
 8000616:	60b9      	str	r1, [r7, #8]
 8000618:	4639      	mov	r1, r7
 800061a:	e881 000c 	stmia.w	r1, {r2, r3}
	// Imp key
	uint8_t * modcode = layer->impMod;
 800061e:	68bb      	ldr	r3, [r7, #8]
 8000620:	681b      	ldr	r3, [r3, #0]
 8000622:	617b      	str	r3, [r7, #20]
	uint8_t * keycode = layer->impKey;
 8000624:	68bb      	ldr	r3, [r7, #8]
 8000626:	685b      	ldr	r3, [r3, #4]
 8000628:	613b      	str	r3, [r7, #16]

	setKeyBytes(keycode, keyboardReport);
 800062a:	463b      	mov	r3, r7
 800062c:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000630:	6938      	ldr	r0, [r7, #16]
 8000632:	f7ff ffb6 	bl	80005a2 <setKeyBytes>
	setModByte(modcode, keyboardReport);
 8000636:	463b      	mov	r3, r7
 8000638:	e893 0006 	ldmia.w	r3, {r1, r2}
 800063c:	6978      	ldr	r0, [r7, #20]
 800063e:	f7ff ff9d 	bl	800057c <setModByte>

	// Physical key
	modcode = layer->pModLayer + keypress; // TODO implications of pModLayer[keypress] auto dereference rather than using a pointer?
 8000642:	68bb      	ldr	r3, [r7, #8]
 8000644:	689a      	ldr	r2, [r3, #8]
 8000646:	68fb      	ldr	r3, [r7, #12]
 8000648:	4413      	add	r3, r2
 800064a:	617b      	str	r3, [r7, #20]
	keycode = layer->pKeyLayer + keypress;
 800064c:	68bb      	ldr	r3, [r7, #8]
 800064e:	68da      	ldr	r2, [r3, #12]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	4413      	add	r3, r2
 8000654:	613b      	str	r3, [r7, #16]

	setKeyBytes(keycode, keyboardReport);
 8000656:	463b      	mov	r3, r7
 8000658:	e893 0006 	ldmia.w	r3, {r1, r2}
 800065c:	6938      	ldr	r0, [r7, #16]
 800065e:	f7ff ffa0 	bl	80005a2 <setKeyBytes>
	setModByte(modcode, keyboardReport);
 8000662:	463b      	mov	r3, r7
 8000664:	e893 0006 	ldmia.w	r3, {r1, r2}
 8000668:	6978      	ldr	r0, [r7, #20]
 800066a:	f7ff ff87 	bl	800057c <setModByte>

}
 800066e:	bf00      	nop
 8000670:	3718      	adds	r7, #24
 8000672:	46bd      	mov	sp, r7
 8000674:	bd80      	pop	{r7, pc}

08000676 <setHeld>:
	setKeyBytes(keycode);
	setModByte(modcode);
}
 * */

void setHeld(int keypress, int layerNumber, int* heldRef){
 8000676:	b480      	push	{r7}
 8000678:	b085      	sub	sp, #20
 800067a:	af00      	add	r7, sp, #0
 800067c:	60f8      	str	r0, [r7, #12]
 800067e:	60b9      	str	r1, [r7, #8]
 8000680:	607a      	str	r2, [r7, #4]
	heldRef[keypress] = layerNumber;
 8000682:	68fb      	ldr	r3, [r7, #12]
 8000684:	009b      	lsls	r3, r3, #2
 8000686:	687a      	ldr	r2, [r7, #4]
 8000688:	4413      	add	r3, r2
 800068a:	68ba      	ldr	r2, [r7, #8]
 800068c:	601a      	str	r2, [r3, #0]
}
 800068e:	bf00      	nop
 8000690:	3714      	adds	r7, #20
 8000692:	46bd      	mov	sp, r7
 8000694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000698:	4770      	bx	lr

0800069a <setHeldReport>:

void setHeldReport(int keypress, Layer* keymap, int* heldRef, keyboardHIDReport keyboardReport){
 800069a:	b082      	sub	sp, #8
 800069c:	b580      	push	{r7, lr}
 800069e:	b086      	sub	sp, #24
 80006a0:	af00      	add	r7, sp, #0
 80006a2:	60f8      	str	r0, [r7, #12]
 80006a4:	60b9      	str	r1, [r7, #8]
 80006a6:	607a      	str	r2, [r7, #4]
 80006a8:	627b      	str	r3, [r7, #36]	; 0x24
	Layer* heldKeyLayer = &keymap[heldRef[keypress]];
 80006aa:	68fb      	ldr	r3, [r7, #12]
 80006ac:	009b      	lsls	r3, r3, #2
 80006ae:	687a      	ldr	r2, [r7, #4]
 80006b0:	4413      	add	r3, r2
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	461a      	mov	r2, r3
 80006b6:	4613      	mov	r3, r2
 80006b8:	009b      	lsls	r3, r3, #2
 80006ba:	4413      	add	r3, r2
 80006bc:	009b      	lsls	r3, r3, #2
 80006be:	461a      	mov	r2, r3
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	4413      	add	r3, r2
 80006c4:	617b      	str	r3, [r7, #20]
	//if isHold[0] then the key is not held, else it's the numebr of the layer it was pressed down in

	setReport(keypress, heldKeyLayer, keyboardReport);
 80006c6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80006ca:	cb0c      	ldmia	r3, {r2, r3}
 80006cc:	6979      	ldr	r1, [r7, #20]
 80006ce:	68f8      	ldr	r0, [r7, #12]
 80006d0:	f7ff ff9d 	bl	800060e <setReport>

}
 80006d4:	bf00      	nop
 80006d6:	3718      	adds	r7, #24
 80006d8:	46bd      	mov	sp, r7
 80006da:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80006de:	b002      	add	sp, #8
 80006e0:	4770      	bx	lr

080006e2 <scanKeys>:
	setReport(keypress, relMods, relKeys);

}
 * */

void scanKeys(Layer* keymap, Layer* layerRef, int* heldRef, uint8_t* keyRef, keyboardHIDReport report){
 80006e2:	b580      	push	{r7, lr}
 80006e4:	b088      	sub	sp, #32
 80006e6:	af02      	add	r7, sp, #8
 80006e8:	60f8      	str	r0, [r7, #12]
 80006ea:	60b9      	str	r1, [r7, #8]
 80006ec:	607a      	str	r2, [r7, #4]
 80006ee:	603b      	str	r3, [r7, #0]
	int i;
	for(i = 0; i < NUMBER_OF_KEYS; i++){
 80006f0:	2300      	movs	r3, #0
 80006f2:	617b      	str	r3, [r7, #20]
 80006f4:	e02c      	b.n	8000750 <scanKeys+0x6e>
		//Original if condition was: GPIO_PIN_RESET == HAL_GPIO_ReadPin(keyPorts[i]/, keyPins[i])
		if(keyRef[i] == 0){
 80006f6:	697b      	ldr	r3, [r7, #20]
 80006f8:	683a      	ldr	r2, [r7, #0]
 80006fa:	4413      	add	r3, r2
 80006fc:	781b      	ldrb	r3, [r3, #0]
 80006fe:	2b00      	cmp	r3, #0
 8000700:	d11e      	bne.n	8000740 <scanKeys+0x5e>
			switch(heldRef[i]){
 8000702:	697b      	ldr	r3, [r7, #20]
 8000704:	009b      	lsls	r3, r3, #2
 8000706:	687a      	ldr	r2, [r7, #4]
 8000708:	4413      	add	r3, r2
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	2b00      	cmp	r3, #0
 800070e:	d10e      	bne.n	800072e <scanKeys+0x4c>
			case 0: setReport(i, layerRef, report);
 8000710:	f107 0320 	add.w	r3, r7, #32
 8000714:	cb0c      	ldmia	r3, {r2, r3}
 8000716:	68b9      	ldr	r1, [r7, #8]
 8000718:	6978      	ldr	r0, [r7, #20]
 800071a:	f7ff ff78 	bl	800060e <setReport>
					setHeld(i, layerRef->layerNum, heldRef);
 800071e:	68bb      	ldr	r3, [r7, #8]
 8000720:	691b      	ldr	r3, [r3, #16]
 8000722:	687a      	ldr	r2, [r7, #4]
 8000724:	4619      	mov	r1, r3
 8000726:	6978      	ldr	r0, [r7, #20]
 8000728:	f7ff ffa5 	bl	8000676 <setHeld>
				break;
 800072c:	e00d      	b.n	800074a <scanKeys+0x68>
			default: setHeldReport(i, keymap, heldRef, report);
 800072e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000730:	9300      	str	r3, [sp, #0]
 8000732:	6a3b      	ldr	r3, [r7, #32]
 8000734:	687a      	ldr	r2, [r7, #4]
 8000736:	68f9      	ldr	r1, [r7, #12]
 8000738:	6978      	ldr	r0, [r7, #20]
 800073a:	f7ff ffae 	bl	800069a <setHeldReport>
				break;
 800073e:	e004      	b.n	800074a <scanKeys+0x68>
			}

		} else {// add a check? : else if (isHold[1] != 0) {} ?? not sure what's best practice
			setHeld(i, 0, heldRef);
 8000740:	687a      	ldr	r2, [r7, #4]
 8000742:	2100      	movs	r1, #0
 8000744:	6978      	ldr	r0, [r7, #20]
 8000746:	f7ff ff96 	bl	8000676 <setHeld>
	for(i = 0; i < NUMBER_OF_KEYS; i++){
 800074a:	697b      	ldr	r3, [r7, #20]
 800074c:	3301      	adds	r3, #1
 800074e:	617b      	str	r3, [r7, #20]
 8000750:	697b      	ldr	r3, [r7, #20]
 8000752:	2b0f      	cmp	r3, #15
 8000754:	ddcf      	ble.n	80006f6 <scanKeys+0x14>
		}
	}
}
 8000756:	bf00      	nop
 8000758:	bf00      	nop
 800075a:	3718      	adds	r7, #24
 800075c:	46bd      	mov	sp, r7
 800075e:	bd80      	pop	{r7, pc}

08000760 <clearReport>:

// scan function for keyboard settings i.e. swtichingmouse mode

// scan for thumb-stick keys, so scans held, but sets the report to a prebuilt report mapped tot hat layer... technically with that the layer could still function normally... for mod keys... probbaly a more elegant solution for most cases... but I do like the manual mod map

void clearReport(keyboardHIDReport keyboardReport){
 8000760:	b480      	push	{r7}
 8000762:	b083      	sub	sp, #12
 8000764:	af00      	add	r7, sp, #0
 8000766:	463b      	mov	r3, r7
 8000768:	e883 0003 	stmia.w	r3, {r0, r1}
	keyboardReport.MOD = 0;
 800076c:	2300      	movs	r3, #0
 800076e:	703b      	strb	r3, [r7, #0]
	keyboardReport.K1 = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	70bb      	strb	r3, [r7, #2]
	keyboardReport.K2 = 0;
 8000774:	2300      	movs	r3, #0
 8000776:	70fb      	strb	r3, [r7, #3]
	keyboardReport.K3 = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	713b      	strb	r3, [r7, #4]
	keyboardReport.K4 = 0;
 800077c:	2300      	movs	r3, #0
 800077e:	717b      	strb	r3, [r7, #5]
	keyboardReport.K5 = 0;
 8000780:	2300      	movs	r3, #0
 8000782:	71bb      	strb	r3, [r7, #6]
	keyboardReport.K6 = 0;
 8000784:	2300      	movs	r3, #0
 8000786:	71fb      	strb	r3, [r7, #7]
}
 8000788:	bf00      	nop
 800078a:	370c      	adds	r7, #12
 800078c:	46bd      	mov	sp, r7
 800078e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000792:	4770      	bx	lr

08000794 <readStick>:

//void initStick(uint32_t* DMA_buff, uint16_t restHandle, uint){

//}

void readStick(joystick* stick, void (*xChan)(void), void (*yChan)(void)){
 8000794:	b580      	push	{r7, lr}
 8000796:	b086      	sub	sp, #24
 8000798:	af00      	add	r7, sp, #0
 800079a:	60f8      	str	r0, [r7, #12]
 800079c:	60b9      	str	r1, [r7, #8]
 800079e:	607a      	str	r2, [r7, #4]
	uint16_t currentX;
	uint16_t currentY;

	 (*xChan);
	 HAL_ADC_Start(&hadc1);
 80007a0:	4814      	ldr	r0, [pc, #80]	; (80007f4 <readStick+0x60>)
 80007a2:	f000 fdf3 	bl	800138c <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, 1000);
 80007a6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007aa:	4812      	ldr	r0, [pc, #72]	; (80007f4 <readStick+0x60>)
 80007ac:	f000 fed5 	bl	800155a <HAL_ADC_PollForConversion>
     currentX = HAL_ADC_GetValue(&hadc1);
 80007b0:	4810      	ldr	r0, [pc, #64]	; (80007f4 <readStick+0x60>)
 80007b2:	f000 ff5d 	bl	8001670 <HAL_ADC_GetValue>
 80007b6:	4603      	mov	r3, r0
 80007b8:	82fb      	strh	r3, [r7, #22]
	 HAL_ADC_Stop(&hadc1);
 80007ba:	480e      	ldr	r0, [pc, #56]	; (80007f4 <readStick+0x60>)
 80007bc:	f000 fe9a 	bl	80014f4 <HAL_ADC_Stop>

	 (*yChan);
	 HAL_ADC_Start(&hadc1);
 80007c0:	480c      	ldr	r0, [pc, #48]	; (80007f4 <readStick+0x60>)
 80007c2:	f000 fde3 	bl	800138c <HAL_ADC_Start>
	 HAL_ADC_PollForConversion(&hadc1, 1000);
 80007c6:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 80007ca:	480a      	ldr	r0, [pc, #40]	; (80007f4 <readStick+0x60>)
 80007cc:	f000 fec5 	bl	800155a <HAL_ADC_PollForConversion>
     currentY = HAL_ADC_GetValue(&hadc1);
 80007d0:	4808      	ldr	r0, [pc, #32]	; (80007f4 <readStick+0x60>)
 80007d2:	f000 ff4d 	bl	8001670 <HAL_ADC_GetValue>
 80007d6:	4603      	mov	r3, r0
 80007d8:	82bb      	strh	r3, [r7, #20]
	 HAL_ADC_Stop(&hadc1);
 80007da:	4806      	ldr	r0, [pc, #24]	; (80007f4 <readStick+0x60>)
 80007dc:	f000 fe8a 	bl	80014f4 <HAL_ADC_Stop>

	stick->xAxis = currentX;
 80007e0:	68fb      	ldr	r3, [r7, #12]
 80007e2:	8afa      	ldrh	r2, [r7, #22]
 80007e4:	805a      	strh	r2, [r3, #2]
	stick->yAxis = currentY;
 80007e6:	68fb      	ldr	r3, [r7, #12]
 80007e8:	8aba      	ldrh	r2, [r7, #20]
 80007ea:	801a      	strh	r2, [r3, #0]

}
 80007ec:	bf00      	nop
 80007ee:	3718      	adds	r7, #24
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}
 80007f4:	200006f0 	.word	0x200006f0

080007f8 <categorizeJoy>:


enum joydir categorizeJoy(joystick* stick, uint16_t tresh){
 80007f8:	b480      	push	{r7}
 80007fa:	b087      	sub	sp, #28
 80007fc:	af00      	add	r7, sp, #0
 80007fe:	6078      	str	r0, [r7, #4]
 8000800:	460b      	mov	r3, r1
 8000802:	807b      	strh	r3, [r7, #2]

	int16_t xDif;
	int16_t yDif;

	// Substract the neutral and position for the sign to match cartesian convention
	if(stick->xPolarity == 0) {
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	7a1b      	ldrb	r3, [r3, #8]
 8000808:	2b00      	cmp	r3, #0
 800080a:	d107      	bne.n	800081c <categorizeJoy+0x24>
		xDif = (int16_t)stick->xAxis - stick->xNeutral;
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	885a      	ldrh	r2, [r3, #2]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	889b      	ldrh	r3, [r3, #4]
 8000814:	1ad3      	subs	r3, r2, r3
 8000816:	b29b      	uxth	r3, r3
 8000818:	82fb      	strh	r3, [r7, #22]
 800081a:	e006      	b.n	800082a <categorizeJoy+0x32>
	} else {
		xDif = (int16_t)stick->xNeutral - stick->xAxis;
 800081c:	687b      	ldr	r3, [r7, #4]
 800081e:	889a      	ldrh	r2, [r3, #4]
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	885b      	ldrh	r3, [r3, #2]
 8000824:	1ad3      	subs	r3, r2, r3
 8000826:	b29b      	uxth	r3, r3
 8000828:	82fb      	strh	r3, [r7, #22]
	}

	if(stick->yPolarity == 0) {
 800082a:	687b      	ldr	r3, [r7, #4]
 800082c:	7a5b      	ldrb	r3, [r3, #9]
 800082e:	2b00      	cmp	r3, #0
 8000830:	d107      	bne.n	8000842 <categorizeJoy+0x4a>
	    yDif = (int16_t)stick->yAxis - stick->yNeutral;
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	881a      	ldrh	r2, [r3, #0]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	88db      	ldrh	r3, [r3, #6]
 800083a:	1ad3      	subs	r3, r2, r3
 800083c:	b29b      	uxth	r3, r3
 800083e:	82bb      	strh	r3, [r7, #20]
 8000840:	e006      	b.n	8000850 <categorizeJoy+0x58>
	} else {
		yDif = (int16_t)stick->xNeutral - stick->xAxis;
 8000842:	687b      	ldr	r3, [r7, #4]
 8000844:	889a      	ldrh	r2, [r3, #4]
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	885b      	ldrh	r3, [r3, #2]
 800084a:	1ad3      	subs	r3, r2, r3
 800084c:	b29b      	uxth	r3, r3
 800084e:	82bb      	strh	r3, [r7, #20]
	}


	int xMag = abs(xDif);
 8000850:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000854:	2b00      	cmp	r3, #0
 8000856:	bfb8      	it	lt
 8000858:	425b      	neglt	r3, r3
 800085a:	b29b      	uxth	r3, r3
 800085c:	613b      	str	r3, [r7, #16]
	int yMag = abs(yDif);
 800085e:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 8000862:	2b00      	cmp	r3, #0
 8000864:	bfb8      	it	lt
 8000866:	425b      	neglt	r3, r3
 8000868:	b29b      	uxth	r3, r3
 800086a:	60fb      	str	r3, [r7, #12]

	if(xMag <= tresh || yMag <= tresh){
 800086c:	887b      	ldrh	r3, [r7, #2]
 800086e:	693a      	ldr	r2, [r7, #16]
 8000870:	429a      	cmp	r2, r3
 8000872:	dd03      	ble.n	800087c <categorizeJoy+0x84>
 8000874:	887b      	ldrh	r3, [r7, #2]
 8000876:	68fa      	ldr	r2, [r7, #12]
 8000878:	429a      	cmp	r2, r3
 800087a:	dc04      	bgt.n	8000886 <categorizeJoy+0x8e>
		stick->position = CENTERWISE;
 800087c:	687b      	ldr	r3, [r7, #4]
 800087e:	2200      	movs	r2, #0
 8000880:	729a      	strb	r2, [r3, #10]
		return CENTERWISE; //Stick not directed
 8000882:	2300      	movs	r3, #0
 8000884:	e01e      	b.n	80008c4 <categorizeJoy+0xcc>
	}

	if(xMag > yMag) {// HORIZONTAL MOTION
 8000886:	693a      	ldr	r2, [r7, #16]
 8000888:	68fb      	ldr	r3, [r7, #12]
 800088a:	429a      	cmp	r2, r3
 800088c:	dd0d      	ble.n	80008aa <categorizeJoy+0xb2>
		if(xDif > 0) {
 800088e:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8000892:	2b00      	cmp	r3, #0
 8000894:	dd04      	ble.n	80008a0 <categorizeJoy+0xa8>
			stick->position = EASTWISE;
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	2201      	movs	r2, #1
 800089a:	729a      	strb	r2, [r3, #10]
			return EASTWISE;
 800089c:	2301      	movs	r3, #1
 800089e:	e011      	b.n	80008c4 <categorizeJoy+0xcc>
		} else {
			stick->position = WESTWISE;
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	2204      	movs	r2, #4
 80008a4:	729a      	strb	r2, [r3, #10]
			return WESTWISE;
 80008a6:	2304      	movs	r3, #4
 80008a8:	e00c      	b.n	80008c4 <categorizeJoy+0xcc>
		}

	} else { // VERTICAL MOTION
		if(yDif > 0) {
 80008aa:	f9b7 3014 	ldrsh.w	r3, [r7, #20]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	dd04      	ble.n	80008bc <categorizeJoy+0xc4>
			stick->position = NORTHWISE;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2203      	movs	r2, #3
 80008b6:	729a      	strb	r2, [r3, #10]
			return NORTHWISE;
 80008b8:	2303      	movs	r3, #3
 80008ba:	e003      	b.n	80008c4 <categorizeJoy+0xcc>
		} else {
			stick->position = SOUTHWISE;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2202      	movs	r2, #2
 80008c0:	729a      	strb	r2, [r3, #10]
			return SOUTHWISE;
 80008c2:	2302      	movs	r3, #2
		}
	}
 stick->position = CENTERWISE;
 return CENTERWISE; // If they're equal in magnitude they cancel out... Very Unlikely
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	371c      	adds	r7, #28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <bitmaskToLayer>:
	LEFT_JOY
};

// switch case with 25 cases

int bitmaskToLayer(uint8_t bitmask){
 80008d0:	b480      	push	{r7}
 80008d2:	b083      	sub	sp, #12
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	4603      	mov	r3, r0
 80008d8:	71fb      	strb	r3, [r7, #7]
	switch (bitmask) {
 80008da:	79fb      	ldrb	r3, [r7, #7]
 80008dc:	2b88      	cmp	r3, #136	; 0x88
 80008de:	f200 8147 	bhi.w	8000b70 <bitmaskToLayer+0x2a0>
 80008e2:	a201      	add	r2, pc, #4	; (adr r2, 80008e8 <bitmaskToLayer+0x18>)
 80008e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008e8:	08000b0d 	.word	0x08000b0d
 80008ec:	08000b11 	.word	0x08000b11
 80008f0:	08000b15 	.word	0x08000b15
 80008f4:	08000b71 	.word	0x08000b71
 80008f8:	08000b19 	.word	0x08000b19
 80008fc:	08000b71 	.word	0x08000b71
 8000900:	08000b71 	.word	0x08000b71
 8000904:	08000b71 	.word	0x08000b71
 8000908:	08000b1d 	.word	0x08000b1d
 800090c:	08000b71 	.word	0x08000b71
 8000910:	08000b71 	.word	0x08000b71
 8000914:	08000b71 	.word	0x08000b71
 8000918:	08000b71 	.word	0x08000b71
 800091c:	08000b71 	.word	0x08000b71
 8000920:	08000b71 	.word	0x08000b71
 8000924:	08000b71 	.word	0x08000b71
 8000928:	08000b21 	.word	0x08000b21
 800092c:	08000b25 	.word	0x08000b25
 8000930:	08000b29 	.word	0x08000b29
 8000934:	08000b71 	.word	0x08000b71
 8000938:	08000b2d 	.word	0x08000b2d
 800093c:	08000b71 	.word	0x08000b71
 8000940:	08000b71 	.word	0x08000b71
 8000944:	08000b71 	.word	0x08000b71
 8000948:	08000b31 	.word	0x08000b31
 800094c:	08000b71 	.word	0x08000b71
 8000950:	08000b71 	.word	0x08000b71
 8000954:	08000b71 	.word	0x08000b71
 8000958:	08000b71 	.word	0x08000b71
 800095c:	08000b71 	.word	0x08000b71
 8000960:	08000b71 	.word	0x08000b71
 8000964:	08000b71 	.word	0x08000b71
 8000968:	08000b35 	.word	0x08000b35
 800096c:	08000b39 	.word	0x08000b39
 8000970:	08000b3d 	.word	0x08000b3d
 8000974:	08000b71 	.word	0x08000b71
 8000978:	08000b41 	.word	0x08000b41
 800097c:	08000b71 	.word	0x08000b71
 8000980:	08000b71 	.word	0x08000b71
 8000984:	08000b71 	.word	0x08000b71
 8000988:	08000b45 	.word	0x08000b45
 800098c:	08000b71 	.word	0x08000b71
 8000990:	08000b71 	.word	0x08000b71
 8000994:	08000b71 	.word	0x08000b71
 8000998:	08000b71 	.word	0x08000b71
 800099c:	08000b71 	.word	0x08000b71
 80009a0:	08000b71 	.word	0x08000b71
 80009a4:	08000b71 	.word	0x08000b71
 80009a8:	08000b71 	.word	0x08000b71
 80009ac:	08000b71 	.word	0x08000b71
 80009b0:	08000b71 	.word	0x08000b71
 80009b4:	08000b71 	.word	0x08000b71
 80009b8:	08000b71 	.word	0x08000b71
 80009bc:	08000b71 	.word	0x08000b71
 80009c0:	08000b71 	.word	0x08000b71
 80009c4:	08000b71 	.word	0x08000b71
 80009c8:	08000b71 	.word	0x08000b71
 80009cc:	08000b71 	.word	0x08000b71
 80009d0:	08000b71 	.word	0x08000b71
 80009d4:	08000b71 	.word	0x08000b71
 80009d8:	08000b71 	.word	0x08000b71
 80009dc:	08000b71 	.word	0x08000b71
 80009e0:	08000b71 	.word	0x08000b71
 80009e4:	08000b71 	.word	0x08000b71
 80009e8:	08000b49 	.word	0x08000b49
 80009ec:	08000b4d 	.word	0x08000b4d
 80009f0:	08000b51 	.word	0x08000b51
 80009f4:	08000b71 	.word	0x08000b71
 80009f8:	08000b55 	.word	0x08000b55
 80009fc:	08000b71 	.word	0x08000b71
 8000a00:	08000b71 	.word	0x08000b71
 8000a04:	08000b71 	.word	0x08000b71
 8000a08:	08000b59 	.word	0x08000b59
 8000a0c:	08000b71 	.word	0x08000b71
 8000a10:	08000b71 	.word	0x08000b71
 8000a14:	08000b71 	.word	0x08000b71
 8000a18:	08000b71 	.word	0x08000b71
 8000a1c:	08000b71 	.word	0x08000b71
 8000a20:	08000b71 	.word	0x08000b71
 8000a24:	08000b71 	.word	0x08000b71
 8000a28:	08000b71 	.word	0x08000b71
 8000a2c:	08000b71 	.word	0x08000b71
 8000a30:	08000b71 	.word	0x08000b71
 8000a34:	08000b71 	.word	0x08000b71
 8000a38:	08000b71 	.word	0x08000b71
 8000a3c:	08000b71 	.word	0x08000b71
 8000a40:	08000b71 	.word	0x08000b71
 8000a44:	08000b71 	.word	0x08000b71
 8000a48:	08000b71 	.word	0x08000b71
 8000a4c:	08000b71 	.word	0x08000b71
 8000a50:	08000b71 	.word	0x08000b71
 8000a54:	08000b71 	.word	0x08000b71
 8000a58:	08000b71 	.word	0x08000b71
 8000a5c:	08000b71 	.word	0x08000b71
 8000a60:	08000b71 	.word	0x08000b71
 8000a64:	08000b71 	.word	0x08000b71
 8000a68:	08000b71 	.word	0x08000b71
 8000a6c:	08000b71 	.word	0x08000b71
 8000a70:	08000b71 	.word	0x08000b71
 8000a74:	08000b71 	.word	0x08000b71
 8000a78:	08000b71 	.word	0x08000b71
 8000a7c:	08000b71 	.word	0x08000b71
 8000a80:	08000b71 	.word	0x08000b71
 8000a84:	08000b71 	.word	0x08000b71
 8000a88:	08000b71 	.word	0x08000b71
 8000a8c:	08000b71 	.word	0x08000b71
 8000a90:	08000b71 	.word	0x08000b71
 8000a94:	08000b71 	.word	0x08000b71
 8000a98:	08000b71 	.word	0x08000b71
 8000a9c:	08000b71 	.word	0x08000b71
 8000aa0:	08000b71 	.word	0x08000b71
 8000aa4:	08000b71 	.word	0x08000b71
 8000aa8:	08000b71 	.word	0x08000b71
 8000aac:	08000b71 	.word	0x08000b71
 8000ab0:	08000b71 	.word	0x08000b71
 8000ab4:	08000b71 	.word	0x08000b71
 8000ab8:	08000b71 	.word	0x08000b71
 8000abc:	08000b71 	.word	0x08000b71
 8000ac0:	08000b71 	.word	0x08000b71
 8000ac4:	08000b71 	.word	0x08000b71
 8000ac8:	08000b71 	.word	0x08000b71
 8000acc:	08000b71 	.word	0x08000b71
 8000ad0:	08000b71 	.word	0x08000b71
 8000ad4:	08000b71 	.word	0x08000b71
 8000ad8:	08000b71 	.word	0x08000b71
 8000adc:	08000b71 	.word	0x08000b71
 8000ae0:	08000b71 	.word	0x08000b71
 8000ae4:	08000b71 	.word	0x08000b71
 8000ae8:	08000b5d 	.word	0x08000b5d
 8000aec:	08000b61 	.word	0x08000b61
 8000af0:	08000b65 	.word	0x08000b65
 8000af4:	08000b71 	.word	0x08000b71
 8000af8:	08000b69 	.word	0x08000b69
 8000afc:	08000b71 	.word	0x08000b71
 8000b00:	08000b71 	.word	0x08000b71
 8000b04:	08000b71 	.word	0x08000b71
 8000b08:	08000b6d 	.word	0x08000b6d
		case LAYER_1_ID :
			return 1;
 8000b0c:	2301      	movs	r3, #1
 8000b0e:	e02f      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_2_ID :
			return 2;
 8000b10:	2302      	movs	r3, #2
 8000b12:	e02d      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_3_ID :
			return 3;
 8000b14:	2303      	movs	r3, #3
 8000b16:	e02b      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_4_ID :
			return 4;
 8000b18:	2304      	movs	r3, #4
 8000b1a:	e029      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_5_ID :
			return 5;
 8000b1c:	2305      	movs	r3, #5
 8000b1e:	e027      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_6_ID :
			return 6;
 8000b20:	2306      	movs	r3, #6
 8000b22:	e025      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_7_ID :
			return 7;
 8000b24:	2307      	movs	r3, #7
 8000b26:	e023      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_8_ID :
			return 8;
 8000b28:	2308      	movs	r3, #8
 8000b2a:	e021      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_9_ID :
			return 9;
 8000b2c:	2309      	movs	r3, #9
 8000b2e:	e01f      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_10_ID:
			return 10;
 8000b30:	230a      	movs	r3, #10
 8000b32:	e01d      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_11_ID:
			return 11;
 8000b34:	230b      	movs	r3, #11
 8000b36:	e01b      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_12_ID:
			return 12;
 8000b38:	230c      	movs	r3, #12
 8000b3a:	e019      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_13_ID:
			return 13;
 8000b3c:	230d      	movs	r3, #13
 8000b3e:	e017      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_14_ID:
			return 14;
 8000b40:	230e      	movs	r3, #14
 8000b42:	e015      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_15_ID:
			return 15;
 8000b44:	230f      	movs	r3, #15
 8000b46:	e013      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_16_ID:
			return 16;
 8000b48:	2310      	movs	r3, #16
 8000b4a:	e011      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_17_ID:
			return 17;
 8000b4c:	2311      	movs	r3, #17
 8000b4e:	e00f      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_18_ID:
			return 18;
 8000b50:	2312      	movs	r3, #18
 8000b52:	e00d      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_19_ID:
			return 19;
 8000b54:	2313      	movs	r3, #19
 8000b56:	e00b      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_20_ID:
			return 20;
 8000b58:	2314      	movs	r3, #20
 8000b5a:	e009      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_21_ID:
			return 21;
 8000b5c:	2315      	movs	r3, #21
 8000b5e:	e007      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_22_ID:
			return 22;
 8000b60:	2316      	movs	r3, #22
 8000b62:	e005      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_23_ID:
			return 23;
 8000b64:	2317      	movs	r3, #23
 8000b66:	e003      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_24_ID:
			return 24;
 8000b68:	2318      	movs	r3, #24
 8000b6a:	e001      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
		case LAYER_25_ID:
			return 25;
 8000b6c:	2319      	movs	r3, #25
 8000b6e:	e7ff      	b.n	8000b70 <bitmaskToLayer+0x2a0>
			break;
	}
}
 8000b70:	4618      	mov	r0, r3
 8000b72:	370c      	adds	r7, #12
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr

08000b7c <layerNumToRef>:

// Set's layer
void layerNumToRef(Layer* layerHandle, Layer* keymap, int layerNum){
 8000b7c:	b480      	push	{r7}
 8000b7e:	b085      	sub	sp, #20
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	60f8      	str	r0, [r7, #12]
 8000b84:	60b9      	str	r1, [r7, #8]
 8000b86:	607a      	str	r2, [r7, #4]
	layerHandle = &keymap[layerNum];
 8000b88:	687a      	ldr	r2, [r7, #4]
 8000b8a:	4613      	mov	r3, r2
 8000b8c:	009b      	lsls	r3, r3, #2
 8000b8e:	4413      	add	r3, r2
 8000b90:	009b      	lsls	r3, r3, #2
 8000b92:	461a      	mov	r2, r3
 8000b94:	68bb      	ldr	r3, [r7, #8]
 8000b96:	4413      	add	r3, r2
 8000b98:	60fb      	str	r3, [r7, #12]
}
 8000b9a:	bf00      	nop
 8000b9c:	3714      	adds	r7, #20
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba4:	4770      	bx	lr
	...

08000ba8 <setJoystate>:

// Set byte

joystate* setJoystate(joystick* left, joystick* right, joystate* handle, uint32_t tresh){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	60f8      	str	r0, [r7, #12]
 8000bb0:	60b9      	str	r1, [r7, #8]
 8000bb2:	607a      	str	r2, [r7, #4]
 8000bb4:	603b      	str	r3, [r7, #0]
	*handle = 0; // Reset the bits of the state mask.
 8000bb6:	687b      	ldr	r3, [r7, #4]
 8000bb8:	2200      	movs	r2, #0
 8000bba:	701a      	strb	r2, [r3, #0]

	//TODO Redundant. Can use the joystick struct position.
	enum joydir leftDir = categorizeJoy(left, tresh);
 8000bbc:	683b      	ldr	r3, [r7, #0]
 8000bbe:	b29b      	uxth	r3, r3
 8000bc0:	4619      	mov	r1, r3
 8000bc2:	68f8      	ldr	r0, [r7, #12]
 8000bc4:	f7ff fe18 	bl	80007f8 <categorizeJoy>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	75fb      	strb	r3, [r7, #23]
	enum joydir rightDir = categorizeJoy(right, tresh);
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	b29b      	uxth	r3, r3
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	68b8      	ldr	r0, [r7, #8]
 8000bd4:	f7ff fe10 	bl	80007f8 <categorizeJoy>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	75bb      	strb	r3, [r7, #22]



	switch(leftDir){
 8000bdc:	7dfb      	ldrb	r3, [r7, #23]
 8000bde:	3b01      	subs	r3, #1
 8000be0:	2b03      	cmp	r3, #3
 8000be2:	d82b      	bhi.n	8000c3c <setJoystate+0x94>
 8000be4:	a201      	add	r2, pc, #4	; (adr r2, 8000bec <setJoystate+0x44>)
 8000be6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bea:	bf00      	nop
 8000bec:	08000c0d 	.word	0x08000c0d
 8000bf0:	08000c1d 	.word	0x08000c1d
 8000bf4:	08000bfd 	.word	0x08000bfd
 8000bf8:	08000c2d 	.word	0x08000c2d
		case NORTHWISE:
			*handle = *handle | LEFT_JOY_UP;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	781b      	ldrb	r3, [r3, #0]
 8000c00:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	701a      	strb	r2, [r3, #0]
			break;
 8000c0a:	e017      	b.n	8000c3c <setJoystate+0x94>
		case EASTWISE:
			*handle = *handle | LEFT_JOY_RIGHT;
 8000c0c:	687b      	ldr	r3, [r7, #4]
 8000c0e:	781b      	ldrb	r3, [r3, #0]
 8000c10:	f043 0320 	orr.w	r3, r3, #32
 8000c14:	b2da      	uxtb	r2, r3
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	701a      	strb	r2, [r3, #0]
			break;
 8000c1a:	e00f      	b.n	8000c3c <setJoystate+0x94>
		case SOUTHWISE:
			*handle = *handle | LEFT_JOY_DOWN;
 8000c1c:	687b      	ldr	r3, [r7, #4]
 8000c1e:	781b      	ldrb	r3, [r3, #0]
 8000c20:	f043 0310 	orr.w	r3, r3, #16
 8000c24:	b2da      	uxtb	r2, r3
 8000c26:	687b      	ldr	r3, [r7, #4]
 8000c28:	701a      	strb	r2, [r3, #0]
			break;
 8000c2a:	e007      	b.n	8000c3c <setJoystate+0x94>
		case WESTWISE:
			*handle = *handle | LEFT_JOY_LEFT;
 8000c2c:	687b      	ldr	r3, [r7, #4]
 8000c2e:	781b      	ldrb	r3, [r3, #0]
 8000c30:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c34:	b2da      	uxtb	r2, r3
 8000c36:	687b      	ldr	r3, [r7, #4]
 8000c38:	701a      	strb	r2, [r3, #0]
			break;
 8000c3a:	bf00      	nop
	}

	switch(rightDir){
 8000c3c:	7dbb      	ldrb	r3, [r7, #22]
 8000c3e:	3b01      	subs	r3, #1
 8000c40:	2b03      	cmp	r3, #3
 8000c42:	d82b      	bhi.n	8000c9c <setJoystate+0xf4>
 8000c44:	a201      	add	r2, pc, #4	; (adr r2, 8000c4c <setJoystate+0xa4>)
 8000c46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4a:	bf00      	nop
 8000c4c:	08000c6d 	.word	0x08000c6d
 8000c50:	08000c7d 	.word	0x08000c7d
 8000c54:	08000c5d 	.word	0x08000c5d
 8000c58:	08000c8d 	.word	0x08000c8d
		case NORTHWISE:
			*handle = *handle | RIGHT_JOY_UP;
 8000c5c:	687b      	ldr	r3, [r7, #4]
 8000c5e:	781b      	ldrb	r3, [r3, #0]
 8000c60:	f043 0304 	orr.w	r3, r3, #4
 8000c64:	b2da      	uxtb	r2, r3
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	701a      	strb	r2, [r3, #0]
			break;
 8000c6a:	e017      	b.n	8000c9c <setJoystate+0xf4>
		case EASTWISE:
			*handle = *handle | RIGHT_JOY_RIGHT;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	781b      	ldrb	r3, [r3, #0]
 8000c70:	f043 0302 	orr.w	r3, r3, #2
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	701a      	strb	r2, [r3, #0]
			break;
 8000c7a:	e00f      	b.n	8000c9c <setJoystate+0xf4>
		case SOUTHWISE:
			*handle = *handle | RIGHT_JOY_DOWN;
 8000c7c:	687b      	ldr	r3, [r7, #4]
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	f043 0301 	orr.w	r3, r3, #1
 8000c84:	b2da      	uxtb	r2, r3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	701a      	strb	r2, [r3, #0]
			break;
 8000c8a:	e007      	b.n	8000c9c <setJoystate+0xf4>
		case WESTWISE:
			*handle = *handle | RIGHT_JOY_LEFT;
 8000c8c:	687b      	ldr	r3, [r7, #4]
 8000c8e:	781b      	ldrb	r3, [r3, #0]
 8000c90:	f043 0308 	orr.w	r3, r3, #8
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	701a      	strb	r2, [r3, #0]
			break;
 8000c9a:	bf00      	nop
		}

	return handle;
 8000c9c:	687b      	ldr	r3, [r7, #4]

}
 8000c9e:	4618      	mov	r0, r3
 8000ca0:	3718      	adds	r7, #24
 8000ca2:	46bd      	mov	sp, r7
 8000ca4:	bd80      	pop	{r7, pc}
 8000ca6:	bf00      	nop

08000ca8 <ADC_Select_CH1>:
	    Error_Handler();
	  }
}

void ADC_Select_CH1 (void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b084      	sub	sp, #16
 8000cac:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000cae:	463b      	mov	r3, r7
 8000cb0:	2200      	movs	r2, #0
 8000cb2:	601a      	str	r2, [r3, #0]
 8000cb4:	605a      	str	r2, [r3, #4]
 8000cb6:	609a      	str	r2, [r3, #8]
 8000cb8:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 8000cba:	2300      	movs	r3, #0
 8000cbc:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 2;
 8000cbe:	2302      	movs	r3, #2
 8000cc0:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cc6:	463b      	mov	r3, r7
 8000cc8:	4619      	mov	r1, r3
 8000cca:	4806      	ldr	r0, [pc, #24]	; (8000ce4 <ADC_Select_CH1+0x3c>)
 8000ccc:	f000 fcde 	bl	800168c <HAL_ADC_ConfigChannel>
 8000cd0:	4603      	mov	r3, r0
 8000cd2:	2b00      	cmp	r3, #0
 8000cd4:	d001      	beq.n	8000cda <ADC_Select_CH1+0x32>
	  {
	    Error_Handler();
 8000cd6:	f000 f99d 	bl	8001014 <Error_Handler>
	  }
}
 8000cda:	bf00      	nop
 8000cdc:	3710      	adds	r7, #16
 8000cde:	46bd      	mov	sp, r7
 8000ce0:	bd80      	pop	{r7, pc}
 8000ce2:	bf00      	nop
 8000ce4:	200006f0 	.word	0x200006f0

08000ce8 <ADC_Select_CH3>:
	    Error_Handler();
	  }
}

void ADC_Select_CH3 (void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
	ADC_ChannelConfTypeDef sConfig = {0};
 8000cee:	463b      	mov	r3, r7
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	601a      	str	r2, [r3, #0]
 8000cf4:	605a      	str	r2, [r3, #4]
 8000cf6:	609a      	str	r2, [r3, #8]
 8000cf8:	60da      	str	r2, [r3, #12]
	  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
	  */
	  sConfig.Channel = ADC_CHANNEL_0;
 8000cfa:	2300      	movs	r3, #0
 8000cfc:	603b      	str	r3, [r7, #0]
	  sConfig.Rank = 4;
 8000cfe:	2304      	movs	r3, #4
 8000d00:	607b      	str	r3, [r7, #4]
	  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000d02:	2300      	movs	r3, #0
 8000d04:	60bb      	str	r3, [r7, #8]
	  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d06:	463b      	mov	r3, r7
 8000d08:	4619      	mov	r1, r3
 8000d0a:	4806      	ldr	r0, [pc, #24]	; (8000d24 <ADC_Select_CH3+0x3c>)
 8000d0c:	f000 fcbe 	bl	800168c <HAL_ADC_ConfigChannel>
 8000d10:	4603      	mov	r3, r0
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	d001      	beq.n	8000d1a <ADC_Select_CH3+0x32>
	  {
	    Error_Handler();
 8000d16:	f000 f97d 	bl	8001014 <Error_Handler>
	  }
}
 8000d1a:	bf00      	nop
 8000d1c:	3710      	adds	r7, #16
 8000d1e:	46bd      	mov	sp, r7
 8000d20:	bd80      	pop	{r7, pc}
 8000d22:	bf00      	nop
 8000d24:	200006f0 	.word	0x200006f0

08000d28 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d28:	b5b0      	push	{r4, r5, r7, lr}
 8000d2a:	b0a2      	sub	sp, #136	; 0x88
 8000d2c:	af02      	add	r7, sp, #8
  /* USER CODE BEGIN 1 */
	joystick rightStick;
	joystick leftStick;
	int isHold[] = {0, 0, 0, 0,     0, 0, 0, 0,
 8000d2e:	f107 0320 	add.w	r3, r7, #32
 8000d32:	2240      	movs	r2, #64	; 0x40
 8000d34:	2100      	movs	r1, #0
 8000d36:	4618      	mov	r0, r3
 8000d38:	f006 fdda 	bl	80078f0 <memset>
			        0, 0, 0, 0,     0, 0, 0, 0};
	keyboardHIDReport kReport = {0, 0, 0, 0, 0, 0, 0, 0};
 8000d3c:	f107 0318 	add.w	r3, r7, #24
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]

	joystate layerMask = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
	Layer* layerHandle;

	//Array of key pin states
	uint8_t pinStates[NUMBER_OF_KEYS] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <main+0xd0>)
 8000d4e:	f107 0408 	add.w	r4, r7, #8
 8000d52:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d54:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d58:	f000 fa3e 	bl	80011d8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d5c:	f000 f856 	bl	8000e0c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d60:	f000 f900 	bl	8000f64 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000d64:	f000 f8bc 	bl	8000ee0 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000d68:	f006 f970 	bl	800704c <MX_USB_DEVICE_Init>
  /* USER CODE BEGIN 2 */
  uint16_t tresh = 600;
 8000d6c:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000d70:	80fb      	strh	r3, [r7, #6]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  // check the layer
	  readStick(&rightStick, ADC_Select_CH1, ADC_Select_CH3);
 8000d72:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8000d76:	4a21      	ldr	r2, [pc, #132]	; (8000dfc <main+0xd4>)
 8000d78:	4921      	ldr	r1, [pc, #132]	; (8000e00 <main+0xd8>)
 8000d7a:	4618      	mov	r0, r3
 8000d7c:	f7ff fd0a 	bl	8000794 <readStick>
	  //readStick(&leftStick, ADC_Select_CH0, ADC_Select_CH2);
	  setJoystate(&leftStick, &rightStick, layerMask, &tresh);
 8000d80:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000d84:	461a      	mov	r2, r3
 8000d86:	1dbb      	adds	r3, r7, #6
 8000d88:	f107 016c 	add.w	r1, r7, #108	; 0x6c
 8000d8c:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000d90:	f7ff ff0a 	bl	8000ba8 <setJoystate>
	  layerNumToRef(layerHandle, &keymap[0], bitmaskToLayer(layerMask));
 8000d94:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
 8000d98:	4618      	mov	r0, r3
 8000d9a:	f7ff fd99 	bl	80008d0 <bitmaskToLayer>
 8000d9e:	4603      	mov	r3, r0
 8000da0:	461a      	mov	r2, r3
 8000da2:	4918      	ldr	r1, [pc, #96]	; (8000e04 <main+0xdc>)
 8000da4:	6fb8      	ldr	r0, [r7, #120]	; 0x78
 8000da6:	f7ff fee9 	bl	8000b7c <layerNumToRef>

	  // check pressed keys
	  checkKeyPins(&pinStates[0]);
 8000daa:	f107 0308 	add.w	r3, r7, #8
 8000dae:	4618      	mov	r0, r3
 8000db0:	f7ff fb92 	bl	80004d8 <checkKeyPins>

	  // check and set all keyboard related reports
	  scanKeys(&keymap[0], layerHandle, isHold, pinStates, kReport);
 8000db4:	f107 0408 	add.w	r4, r7, #8
 8000db8:	f107 0220 	add.w	r2, r7, #32
 8000dbc:	466d      	mov	r5, sp
 8000dbe:	f107 0318 	add.w	r3, r7, #24
 8000dc2:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000dc6:	e885 0003 	stmia.w	r5, {r0, r1}
 8000dca:	4623      	mov	r3, r4
 8000dcc:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8000dce:	480d      	ldr	r0, [pc, #52]	; (8000e04 <main+0xdc>)
 8000dd0:	f7ff fc87 	bl	80006e2 <scanKeys>

	  // send report
	  USBD_HID_SendReport(&hUsbDeviceFS, &kReport, sizeof(kReport));
 8000dd4:	f107 0318 	add.w	r3, r7, #24
 8000dd8:	2208      	movs	r2, #8
 8000dda:	4619      	mov	r1, r3
 8000ddc:	480a      	ldr	r0, [pc, #40]	; (8000e08 <main+0xe0>)
 8000dde:	f004 fdbb 	bl	8005958 <USBD_HID_SendReport>

	  // clear report
	  clearReport(kReport);
 8000de2:	f107 0318 	add.w	r3, r7, #24
 8000de6:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000dea:	f7ff fcb9 	bl	8000760 <clearReport>

	  // wait?
  	  HAL_Delay(50);
 8000dee:	2032      	movs	r0, #50	; 0x32
 8000df0:	f000 fa64 	bl	80012bc <HAL_Delay>
	  readStick(&rightStick, ADC_Select_CH1, ADC_Select_CH3);
 8000df4:	e7bd      	b.n	8000d72 <main+0x4a>
 8000df6:	bf00      	nop
 8000df8:	08007918 	.word	0x08007918
 8000dfc:	08000ce9 	.word	0x08000ce9
 8000e00:	08000ca9 	.word	0x08000ca9
 8000e04:	2000036c 	.word	0x2000036c
 8000e08:	20000740 	.word	0x20000740

08000e0c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e0c:	b580      	push	{r7, lr}
 8000e0e:	b094      	sub	sp, #80	; 0x50
 8000e10:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e12:	f107 0320 	add.w	r3, r7, #32
 8000e16:	2230      	movs	r2, #48	; 0x30
 8000e18:	2100      	movs	r1, #0
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	f006 fd68 	bl	80078f0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e20:	f107 030c 	add.w	r3, r7, #12
 8000e24:	2200      	movs	r2, #0
 8000e26:	601a      	str	r2, [r3, #0]
 8000e28:	605a      	str	r2, [r3, #4]
 8000e2a:	609a      	str	r2, [r3, #8]
 8000e2c:	60da      	str	r2, [r3, #12]
 8000e2e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e30:	2300      	movs	r3, #0
 8000e32:	60bb      	str	r3, [r7, #8]
 8000e34:	4b28      	ldr	r3, [pc, #160]	; (8000ed8 <SystemClock_Config+0xcc>)
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	4a27      	ldr	r2, [pc, #156]	; (8000ed8 <SystemClock_Config+0xcc>)
 8000e3a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3e:	6413      	str	r3, [r2, #64]	; 0x40
 8000e40:	4b25      	ldr	r3, [pc, #148]	; (8000ed8 <SystemClock_Config+0xcc>)
 8000e42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e44:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e48:	60bb      	str	r3, [r7, #8]
 8000e4a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e4c:	2300      	movs	r3, #0
 8000e4e:	607b      	str	r3, [r7, #4]
 8000e50:	4b22      	ldr	r3, [pc, #136]	; (8000edc <SystemClock_Config+0xd0>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e58:	4a20      	ldr	r2, [pc, #128]	; (8000edc <SystemClock_Config+0xd0>)
 8000e5a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e5e:	6013      	str	r3, [r2, #0]
 8000e60:	4b1e      	ldr	r3, [pc, #120]	; (8000edc <SystemClock_Config+0xd0>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e68:	607b      	str	r3, [r7, #4]
 8000e6a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e6c:	2301      	movs	r3, #1
 8000e6e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e70:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e74:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e76:	2302      	movs	r3, #2
 8000e78:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e7a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e7e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000e80:	230f      	movs	r3, #15
 8000e82:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000e84:	2390      	movs	r3, #144	; 0x90
 8000e86:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e88:	2302      	movs	r3, #2
 8000e8a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000e8c:	2305      	movs	r3, #5
 8000e8e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e90:	f107 0320 	add.w	r3, r7, #32
 8000e94:	4618      	mov	r0, r3
 8000e96:	f002 fb2b 	bl	80034f0 <HAL_RCC_OscConfig>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000ea0:	f000 f8b8 	bl	8001014 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea4:	230f      	movs	r3, #15
 8000ea6:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb4:	2300      	movs	r3, #0
 8000eb6:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eb8:	f107 030c 	add.w	r3, r7, #12
 8000ebc:	2100      	movs	r1, #0
 8000ebe:	4618      	mov	r0, r3
 8000ec0:	f002 fd8e 	bl	80039e0 <HAL_RCC_ClockConfig>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000eca:	f000 f8a3 	bl	8001014 <Error_Handler>
  }
}
 8000ece:	bf00      	nop
 8000ed0:	3750      	adds	r7, #80	; 0x50
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	40023800 	.word	0x40023800
 8000edc:	40007000 	.word	0x40007000

08000ee0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee6:	463b      	mov	r3, r7
 8000ee8:	2200      	movs	r2, #0
 8000eea:	601a      	str	r2, [r3, #0]
 8000eec:	605a      	str	r2, [r3, #4]
 8000eee:	609a      	str	r2, [r3, #8]
 8000ef0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ef2:	4b19      	ldr	r3, [pc, #100]	; (8000f58 <MX_ADC1_Init+0x78>)
 8000ef4:	4a19      	ldr	r2, [pc, #100]	; (8000f5c <MX_ADC1_Init+0x7c>)
 8000ef6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000ef8:	4b17      	ldr	r3, [pc, #92]	; (8000f58 <MX_ADC1_Init+0x78>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000efe:	4b16      	ldr	r3, [pc, #88]	; (8000f58 <MX_ADC1_Init+0x78>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f04:	4b14      	ldr	r3, [pc, #80]	; (8000f58 <MX_ADC1_Init+0x78>)
 8000f06:	2201      	movs	r2, #1
 8000f08:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f0a:	4b13      	ldr	r3, [pc, #76]	; (8000f58 <MX_ADC1_Init+0x78>)
 8000f0c:	2201      	movs	r2, #1
 8000f0e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f10:	4b11      	ldr	r3, [pc, #68]	; (8000f58 <MX_ADC1_Init+0x78>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f18:	4b0f      	ldr	r3, [pc, #60]	; (8000f58 <MX_ADC1_Init+0x78>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f1e:	4b0e      	ldr	r3, [pc, #56]	; (8000f58 <MX_ADC1_Init+0x78>)
 8000f20:	4a0f      	ldr	r2, [pc, #60]	; (8000f60 <MX_ADC1_Init+0x80>)
 8000f22:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_LEFT;
 8000f24:	4b0c      	ldr	r3, [pc, #48]	; (8000f58 <MX_ADC1_Init+0x78>)
 8000f26:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000f2a:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000f2c:	4b0a      	ldr	r3, [pc, #40]	; (8000f58 <MX_ADC1_Init+0x78>)
 8000f2e:	2204      	movs	r2, #4
 8000f30:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f32:	4b09      	ldr	r3, [pc, #36]	; (8000f58 <MX_ADC1_Init+0x78>)
 8000f34:	2200      	movs	r2, #0
 8000f36:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	; (8000f58 <MX_ADC1_Init+0x78>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f40:	4805      	ldr	r0, [pc, #20]	; (8000f58 <MX_ADC1_Init+0x78>)
 8000f42:	f000 f9df 	bl	8001304 <HAL_ADC_Init>
 8000f46:	4603      	mov	r3, r0
 8000f48:	2b00      	cmp	r3, #0
 8000f4a:	d001      	beq.n	8000f50 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f4c:	f000 f862 	bl	8001014 <Error_Handler>

  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	200006f0 	.word	0x200006f0
 8000f5c:	40012000 	.word	0x40012000
 8000f60:	0f000001 	.word	0x0f000001

08000f64 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f64:	b580      	push	{r7, lr}
 8000f66:	b088      	sub	sp, #32
 8000f68:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f6a:	f107 030c 	add.w	r3, r7, #12
 8000f6e:	2200      	movs	r2, #0
 8000f70:	601a      	str	r2, [r3, #0]
 8000f72:	605a      	str	r2, [r3, #4]
 8000f74:	609a      	str	r2, [r3, #8]
 8000f76:	60da      	str	r2, [r3, #12]
 8000f78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	60bb      	str	r3, [r7, #8]
 8000f7e:	4b22      	ldr	r3, [pc, #136]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f82:	4a21      	ldr	r2, [pc, #132]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000f84:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000f88:	6313      	str	r3, [r2, #48]	; 0x30
 8000f8a:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000f8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000f92:	60bb      	str	r3, [r7, #8]
 8000f94:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f96:	2300      	movs	r3, #0
 8000f98:	607b      	str	r3, [r7, #4]
 8000f9a:	4b1b      	ldr	r3, [pc, #108]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f9e:	4a1a      	ldr	r2, [pc, #104]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6313      	str	r3, [r2, #48]	; 0x30
 8000fa6:	4b18      	ldr	r3, [pc, #96]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000fa8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	603b      	str	r3, [r7, #0]
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fba:	4a13      	ldr	r2, [pc, #76]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000fbc:	f043 0302 	orr.w	r3, r3, #2
 8000fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fc2:	4b11      	ldr	r3, [pc, #68]	; (8001008 <MX_GPIO_Init+0xa4>)
 8000fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fc6:	f003 0302 	and.w	r3, r3, #2
 8000fca:	603b      	str	r3, [r7, #0]
 8000fcc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000fce:	23f0      	movs	r3, #240	; 0xf0
 8000fd0:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fda:	f107 030c 	add.w	r3, r7, #12
 8000fde:	4619      	mov	r1, r3
 8000fe0:	480a      	ldr	r0, [pc, #40]	; (800100c <MX_GPIO_Init+0xa8>)
 8000fe2:	f000 fe83 	bl	8001cec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB13 PB15 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000fe6:	f24a 73f7 	movw	r3, #42999	; 0xa7f7
 8000fea:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fec:	2300      	movs	r3, #0
 8000fee:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ff4:	f107 030c 	add.w	r3, r7, #12
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	4805      	ldr	r0, [pc, #20]	; (8001010 <MX_GPIO_Init+0xac>)
 8000ffc:	f000 fe76 	bl	8001cec <HAL_GPIO_Init>

}
 8001000:	bf00      	nop
 8001002:	3720      	adds	r7, #32
 8001004:	46bd      	mov	sp, r7
 8001006:	bd80      	pop	{r7, pc}
 8001008:	40023800 	.word	0x40023800
 800100c:	40020000 	.word	0x40020000
 8001010:	40020400 	.word	0x40020400

08001014 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001014:	b480      	push	{r7}
 8001016:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001018:	b672      	cpsid	i
}
 800101a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800101c:	e7fe      	b.n	800101c <Error_Handler+0x8>
	...

08001020 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001020:	b480      	push	{r7}
 8001022:	b083      	sub	sp, #12
 8001024:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001026:	2300      	movs	r3, #0
 8001028:	607b      	str	r3, [r7, #4]
 800102a:	4b10      	ldr	r3, [pc, #64]	; (800106c <HAL_MspInit+0x4c>)
 800102c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800102e:	4a0f      	ldr	r2, [pc, #60]	; (800106c <HAL_MspInit+0x4c>)
 8001030:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001034:	6453      	str	r3, [r2, #68]	; 0x44
 8001036:	4b0d      	ldr	r3, [pc, #52]	; (800106c <HAL_MspInit+0x4c>)
 8001038:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800103a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800103e:	607b      	str	r3, [r7, #4]
 8001040:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001042:	2300      	movs	r3, #0
 8001044:	603b      	str	r3, [r7, #0]
 8001046:	4b09      	ldr	r3, [pc, #36]	; (800106c <HAL_MspInit+0x4c>)
 8001048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800104a:	4a08      	ldr	r2, [pc, #32]	; (800106c <HAL_MspInit+0x4c>)
 800104c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001050:	6413      	str	r3, [r2, #64]	; 0x40
 8001052:	4b06      	ldr	r3, [pc, #24]	; (800106c <HAL_MspInit+0x4c>)
 8001054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001056:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800105a:	603b      	str	r3, [r7, #0]
 800105c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800105e:	bf00      	nop
 8001060:	370c      	adds	r7, #12
 8001062:	46bd      	mov	sp, r7
 8001064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001068:	4770      	bx	lr
 800106a:	bf00      	nop
 800106c:	40023800 	.word	0x40023800

08001070 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b08a      	sub	sp, #40	; 0x28
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001078:	f107 0314 	add.w	r3, r7, #20
 800107c:	2200      	movs	r2, #0
 800107e:	601a      	str	r2, [r3, #0]
 8001080:	605a      	str	r2, [r3, #4]
 8001082:	609a      	str	r2, [r3, #8]
 8001084:	60da      	str	r2, [r3, #12]
 8001086:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	4a17      	ldr	r2, [pc, #92]	; (80010ec <HAL_ADC_MspInit+0x7c>)
 800108e:	4293      	cmp	r3, r2
 8001090:	d127      	bne.n	80010e2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	613b      	str	r3, [r7, #16]
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <HAL_ADC_MspInit+0x80>)
 8001098:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800109a:	4a15      	ldr	r2, [pc, #84]	; (80010f0 <HAL_ADC_MspInit+0x80>)
 800109c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010a0:	6453      	str	r3, [r2, #68]	; 0x44
 80010a2:	4b13      	ldr	r3, [pc, #76]	; (80010f0 <HAL_ADC_MspInit+0x80>)
 80010a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80010aa:	613b      	str	r3, [r7, #16]
 80010ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	60fb      	str	r3, [r7, #12]
 80010b2:	4b0f      	ldr	r3, [pc, #60]	; (80010f0 <HAL_ADC_MspInit+0x80>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a0e      	ldr	r2, [pc, #56]	; (80010f0 <HAL_ADC_MspInit+0x80>)
 80010b8:	f043 0301 	orr.w	r3, r3, #1
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b0c      	ldr	r3, [pc, #48]	; (80010f0 <HAL_ADC_MspInit+0x80>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0301 	and.w	r3, r3, #1
 80010c6:	60fb      	str	r3, [r7, #12]
 80010c8:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 80010ca:	230f      	movs	r3, #15
 80010cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80010ce:	2303      	movs	r3, #3
 80010d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010d2:	2300      	movs	r3, #0
 80010d4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80010d6:	f107 0314 	add.w	r3, r7, #20
 80010da:	4619      	mov	r1, r3
 80010dc:	4805      	ldr	r0, [pc, #20]	; (80010f4 <HAL_ADC_MspInit+0x84>)
 80010de:	f000 fe05 	bl	8001cec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80010e2:	bf00      	nop
 80010e4:	3728      	adds	r7, #40	; 0x28
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}
 80010ea:	bf00      	nop
 80010ec:	40012000 	.word	0x40012000
 80010f0:	40023800 	.word	0x40023800
 80010f4:	40020000 	.word	0x40020000

080010f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80010f8:	b480      	push	{r7}
 80010fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80010fc:	e7fe      	b.n	80010fc <NMI_Handler+0x4>

080010fe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80010fe:	b480      	push	{r7}
 8001100:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001102:	e7fe      	b.n	8001102 <HardFault_Handler+0x4>

08001104 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001104:	b480      	push	{r7}
 8001106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001108:	e7fe      	b.n	8001108 <MemManage_Handler+0x4>

0800110a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800110a:	b480      	push	{r7}
 800110c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800110e:	e7fe      	b.n	800110e <BusFault_Handler+0x4>

08001110 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001110:	b480      	push	{r7}
 8001112:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001114:	e7fe      	b.n	8001114 <UsageFault_Handler+0x4>

08001116 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001116:	b480      	push	{r7}
 8001118:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800111a:	bf00      	nop
 800111c:	46bd      	mov	sp, r7
 800111e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001122:	4770      	bx	lr

08001124 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001124:	b480      	push	{r7}
 8001126:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001128:	bf00      	nop
 800112a:	46bd      	mov	sp, r7
 800112c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001130:	4770      	bx	lr

08001132 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001132:	b480      	push	{r7}
 8001134:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001136:	bf00      	nop
 8001138:	46bd      	mov	sp, r7
 800113a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113e:	4770      	bx	lr

08001140 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001140:	b580      	push	{r7, lr}
 8001142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001144:	f000 f89a 	bl	800127c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001148:	bf00      	nop
 800114a:	bd80      	pop	{r7, pc}

0800114c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 800114c:	b580      	push	{r7, lr}
 800114e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001150:	4802      	ldr	r0, [pc, #8]	; (800115c <OTG_FS_IRQHandler+0x10>)
 8001152:	f001 f8b7 	bl	80022c4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001156:	bf00      	nop
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	20000c1c 	.word	0x20000c1c

08001160 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001160:	b480      	push	{r7}
 8001162:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001164:	4b06      	ldr	r3, [pc, #24]	; (8001180 <SystemInit+0x20>)
 8001166:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800116a:	4a05      	ldr	r2, [pc, #20]	; (8001180 <SystemInit+0x20>)
 800116c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001170:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001174:	bf00      	nop
 8001176:	46bd      	mov	sp, r7
 8001178:	f85d 7b04 	ldr.w	r7, [sp], #4
 800117c:	4770      	bx	lr
 800117e:	bf00      	nop
 8001180:	e000ed00 	.word	0xe000ed00

08001184 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001184:	f8df d034 	ldr.w	sp, [pc, #52]	; 80011bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001188:	480d      	ldr	r0, [pc, #52]	; (80011c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800118a:	490e      	ldr	r1, [pc, #56]	; (80011c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800118c:	4a0e      	ldr	r2, [pc, #56]	; (80011c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800118e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001190:	e002      	b.n	8001198 <LoopCopyDataInit>

08001192 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001192:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001194:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001196:	3304      	adds	r3, #4

08001198 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001198:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800119a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800119c:	d3f9      	bcc.n	8001192 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800119e:	4a0b      	ldr	r2, [pc, #44]	; (80011cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80011a0:	4c0b      	ldr	r4, [pc, #44]	; (80011d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80011a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80011a4:	e001      	b.n	80011aa <LoopFillZerobss>

080011a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80011a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80011a8:	3204      	adds	r2, #4

080011aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80011aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80011ac:	d3fb      	bcc.n	80011a6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80011ae:	f7ff ffd7 	bl	8001160 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80011b2:	f006 fb79 	bl	80078a8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80011b6:	f7ff fdb7 	bl	8000d28 <main>
  bx  lr    
 80011ba:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80011bc:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80011c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80011c4:	200004e4 	.word	0x200004e4
  ldr r2, =_sidata
 80011c8:	08007990 	.word	0x08007990
  ldr r2, =_sbss
 80011cc:	200004e4 	.word	0x200004e4
  ldr r4, =_ebss
 80011d0:	2000113c 	.word	0x2000113c

080011d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80011d4:	e7fe      	b.n	80011d4 <ADC_IRQHandler>
	...

080011d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80011d8:	b580      	push	{r7, lr}
 80011da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80011dc:	4b0e      	ldr	r3, [pc, #56]	; (8001218 <HAL_Init+0x40>)
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	4a0d      	ldr	r2, [pc, #52]	; (8001218 <HAL_Init+0x40>)
 80011e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80011e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80011e8:	4b0b      	ldr	r3, [pc, #44]	; (8001218 <HAL_Init+0x40>)
 80011ea:	681b      	ldr	r3, [r3, #0]
 80011ec:	4a0a      	ldr	r2, [pc, #40]	; (8001218 <HAL_Init+0x40>)
 80011ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80011f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80011f4:	4b08      	ldr	r3, [pc, #32]	; (8001218 <HAL_Init+0x40>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	4a07      	ldr	r2, [pc, #28]	; (8001218 <HAL_Init+0x40>)
 80011fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80011fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001200:	2003      	movs	r0, #3
 8001202:	f000 fd31 	bl	8001c68 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001206:	200f      	movs	r0, #15
 8001208:	f000 f808 	bl	800121c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800120c:	f7ff ff08 	bl	8001020 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001210:	2300      	movs	r3, #0
}
 8001212:	4618      	mov	r0, r3
 8001214:	bd80      	pop	{r7, pc}
 8001216:	bf00      	nop
 8001218:	40023c00 	.word	0x40023c00

0800121c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001224:	4b12      	ldr	r3, [pc, #72]	; (8001270 <HAL_InitTick+0x54>)
 8001226:	681a      	ldr	r2, [r3, #0]
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <HAL_InitTick+0x58>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	4619      	mov	r1, r3
 800122e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001232:	fbb3 f3f1 	udiv	r3, r3, r1
 8001236:	fbb2 f3f3 	udiv	r3, r2, r3
 800123a:	4618      	mov	r0, r3
 800123c:	f000 fd49 	bl	8001cd2 <HAL_SYSTICK_Config>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001246:	2301      	movs	r3, #1
 8001248:	e00e      	b.n	8001268 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800124a:	687b      	ldr	r3, [r7, #4]
 800124c:	2b0f      	cmp	r3, #15
 800124e:	d80a      	bhi.n	8001266 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001250:	2200      	movs	r2, #0
 8001252:	6879      	ldr	r1, [r7, #4]
 8001254:	f04f 30ff 	mov.w	r0, #4294967295
 8001258:	f000 fd11 	bl	8001c7e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800125c:	4a06      	ldr	r2, [pc, #24]	; (8001278 <HAL_InitTick+0x5c>)
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001262:	2300      	movs	r3, #0
 8001264:	e000      	b.n	8001268 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001266:	2301      	movs	r3, #1
}
 8001268:	4618      	mov	r0, r3
 800126a:	3708      	adds	r7, #8
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	200003d4 	.word	0x200003d4
 8001274:	200003dc 	.word	0x200003dc
 8001278:	200003d8 	.word	0x200003d8

0800127c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800127c:	b480      	push	{r7}
 800127e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001280:	4b06      	ldr	r3, [pc, #24]	; (800129c <HAL_IncTick+0x20>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	461a      	mov	r2, r3
 8001286:	4b06      	ldr	r3, [pc, #24]	; (80012a0 <HAL_IncTick+0x24>)
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	4413      	add	r3, r2
 800128c:	4a04      	ldr	r2, [pc, #16]	; (80012a0 <HAL_IncTick+0x24>)
 800128e:	6013      	str	r3, [r2, #0]
}
 8001290:	bf00      	nop
 8001292:	46bd      	mov	sp, r7
 8001294:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001298:	4770      	bx	lr
 800129a:	bf00      	nop
 800129c:	200003dc 	.word	0x200003dc
 80012a0:	20000738 	.word	0x20000738

080012a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80012a4:	b480      	push	{r7}
 80012a6:	af00      	add	r7, sp, #0
  return uwTick;
 80012a8:	4b03      	ldr	r3, [pc, #12]	; (80012b8 <HAL_GetTick+0x14>)
 80012aa:	681b      	ldr	r3, [r3, #0]
}
 80012ac:	4618      	mov	r0, r3
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	20000738 	.word	0x20000738

080012bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b084      	sub	sp, #16
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80012c4:	f7ff ffee 	bl	80012a4 <HAL_GetTick>
 80012c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80012ce:	68fb      	ldr	r3, [r7, #12]
 80012d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012d4:	d005      	beq.n	80012e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80012d6:	4b0a      	ldr	r3, [pc, #40]	; (8001300 <HAL_Delay+0x44>)
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	461a      	mov	r2, r3
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	4413      	add	r3, r2
 80012e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80012e2:	bf00      	nop
 80012e4:	f7ff ffde 	bl	80012a4 <HAL_GetTick>
 80012e8:	4602      	mov	r2, r0
 80012ea:	68bb      	ldr	r3, [r7, #8]
 80012ec:	1ad3      	subs	r3, r2, r3
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	429a      	cmp	r2, r3
 80012f2:	d8f7      	bhi.n	80012e4 <HAL_Delay+0x28>
  {
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3710      	adds	r7, #16
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200003dc 	.word	0x200003dc

08001304 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	b084      	sub	sp, #16
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800130c:	2300      	movs	r3, #0
 800130e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d101      	bne.n	800131a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001316:	2301      	movs	r3, #1
 8001318:	e033      	b.n	8001382 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800131e:	2b00      	cmp	r3, #0
 8001320:	d109      	bne.n	8001336 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001322:	6878      	ldr	r0, [r7, #4]
 8001324:	f7ff fea4 	bl	8001070 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	2200      	movs	r2, #0
 800132c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	2200      	movs	r2, #0
 8001332:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800133a:	f003 0310 	and.w	r3, r3, #16
 800133e:	2b00      	cmp	r3, #0
 8001340:	d118      	bne.n	8001374 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001346:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800134a:	f023 0302 	bic.w	r3, r3, #2
 800134e:	f043 0202 	orr.w	r2, r3, #2
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001356:	6878      	ldr	r0, [r7, #4]
 8001358:	f000 faba 	bl	80018d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	2200      	movs	r2, #0
 8001360:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001366:	f023 0303 	bic.w	r3, r3, #3
 800136a:	f043 0201 	orr.w	r2, r3, #1
 800136e:	687b      	ldr	r3, [r7, #4]
 8001370:	641a      	str	r2, [r3, #64]	; 0x40
 8001372:	e001      	b.n	8001378 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001374:	2301      	movs	r3, #1
 8001376:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	2200      	movs	r2, #0
 800137c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001380:	7bfb      	ldrb	r3, [r7, #15]
}
 8001382:	4618      	mov	r0, r3
 8001384:	3710      	adds	r7, #16
 8001386:	46bd      	mov	sp, r7
 8001388:	bd80      	pop	{r7, pc}
	...

0800138c <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8001394:	2300      	movs	r3, #0
 8001396:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800139e:	2b01      	cmp	r3, #1
 80013a0:	d101      	bne.n	80013a6 <HAL_ADC_Start+0x1a>
 80013a2:	2302      	movs	r3, #2
 80013a4:	e097      	b.n	80014d6 <HAL_ADC_Start+0x14a>
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	2201      	movs	r2, #1
 80013aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80013ae:	687b      	ldr	r3, [r7, #4]
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	689b      	ldr	r3, [r3, #8]
 80013b4:	f003 0301 	and.w	r3, r3, #1
 80013b8:	2b01      	cmp	r3, #1
 80013ba:	d018      	beq.n	80013ee <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80013bc:	687b      	ldr	r3, [r7, #4]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	689a      	ldr	r2, [r3, #8]
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	f042 0201 	orr.w	r2, r2, #1
 80013ca:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80013cc:	4b45      	ldr	r3, [pc, #276]	; (80014e4 <HAL_ADC_Start+0x158>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	4a45      	ldr	r2, [pc, #276]	; (80014e8 <HAL_ADC_Start+0x15c>)
 80013d2:	fba2 2303 	umull	r2, r3, r2, r3
 80013d6:	0c9a      	lsrs	r2, r3, #18
 80013d8:	4613      	mov	r3, r2
 80013da:	005b      	lsls	r3, r3, #1
 80013dc:	4413      	add	r3, r2
 80013de:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013e0:	e002      	b.n	80013e8 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80013e2:	68bb      	ldr	r3, [r7, #8]
 80013e4:	3b01      	subs	r3, #1
 80013e6:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80013e8:	68bb      	ldr	r3, [r7, #8]
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d1f9      	bne.n	80013e2 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	689b      	ldr	r3, [r3, #8]
 80013f4:	f003 0301 	and.w	r3, r3, #1
 80013f8:	2b01      	cmp	r3, #1
 80013fa:	d15f      	bne.n	80014bc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001400:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001404:	f023 0301 	bic.w	r3, r3, #1
 8001408:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	685b      	ldr	r3, [r3, #4]
 8001416:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800141a:	2b00      	cmp	r3, #0
 800141c:	d007      	beq.n	800142e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001422:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001426:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001436:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800143a:	d106      	bne.n	800144a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001440:	f023 0206 	bic.w	r2, r3, #6
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	645a      	str	r2, [r3, #68]	; 0x44
 8001448:	e002      	b.n	8001450 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	2200      	movs	r2, #0
 800144e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	2200      	movs	r2, #0
 8001454:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <HAL_ADC_Start+0x160>)
 800145a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001464:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001466:	68fb      	ldr	r3, [r7, #12]
 8001468:	685b      	ldr	r3, [r3, #4]
 800146a:	f003 031f 	and.w	r3, r3, #31
 800146e:	2b00      	cmp	r3, #0
 8001470:	d10f      	bne.n	8001492 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	689b      	ldr	r3, [r3, #8]
 8001478:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800147c:	2b00      	cmp	r3, #0
 800147e:	d129      	bne.n	80014d4 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	689a      	ldr	r2, [r3, #8]
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800148e:	609a      	str	r2, [r3, #8]
 8001490:	e020      	b.n	80014d4 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4a16      	ldr	r2, [pc, #88]	; (80014f0 <HAL_ADC_Start+0x164>)
 8001498:	4293      	cmp	r3, r2
 800149a:	d11b      	bne.n	80014d4 <HAL_ADC_Start+0x148>
 800149c:	687b      	ldr	r3, [r7, #4]
 800149e:	681b      	ldr	r3, [r3, #0]
 80014a0:	689b      	ldr	r3, [r3, #8]
 80014a2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d114      	bne.n	80014d4 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80014b8:	609a      	str	r2, [r3, #8]
 80014ba:	e00b      	b.n	80014d4 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014c0:	f043 0210 	orr.w	r2, r3, #16
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80014cc:	f043 0201 	orr.w	r2, r3, #1
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80014d4:	2300      	movs	r3, #0
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3714      	adds	r7, #20
 80014da:	46bd      	mov	sp, r7
 80014dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e0:	4770      	bx	lr
 80014e2:	bf00      	nop
 80014e4:	200003d4 	.word	0x200003d4
 80014e8:	431bde83 	.word	0x431bde83
 80014ec:	40012300 	.word	0x40012300
 80014f0:	40012000 	.word	0x40012000

080014f4 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 80014f4:	b480      	push	{r7}
 80014f6:	b083      	sub	sp, #12
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001502:	2b01      	cmp	r3, #1
 8001504:	d101      	bne.n	800150a <HAL_ADC_Stop+0x16>
 8001506:	2302      	movs	r3, #2
 8001508:	e021      	b.n	800154e <HAL_ADC_Stop+0x5a>
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	2201      	movs	r2, #1
 800150e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	689a      	ldr	r2, [r3, #8]
 8001518:	687b      	ldr	r3, [r7, #4]
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	f022 0201 	bic.w	r2, r2, #1
 8001520:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	689b      	ldr	r3, [r3, #8]
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	2b00      	cmp	r3, #0
 800152e:	d109      	bne.n	8001544 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001538:	f023 0301 	bic.w	r3, r3, #1
 800153c:	f043 0201 	orr.w	r2, r3, #1
 8001540:	687b      	ldr	r3, [r7, #4]
 8001542:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001544:	687b      	ldr	r3, [r7, #4]
 8001546:	2200      	movs	r2, #0
 8001548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800154c:	2300      	movs	r3, #0
}
 800154e:	4618      	mov	r0, r3
 8001550:	370c      	adds	r7, #12
 8001552:	46bd      	mov	sp, r7
 8001554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001558:	4770      	bx	lr

0800155a <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800155a:	b580      	push	{r7, lr}
 800155c:	b084      	sub	sp, #16
 800155e:	af00      	add	r7, sp, #0
 8001560:	6078      	str	r0, [r7, #4]
 8001562:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001564:	2300      	movs	r3, #0
 8001566:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	689b      	ldr	r3, [r3, #8]
 800156e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001572:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001576:	d113      	bne.n	80015a0 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001578:	687b      	ldr	r3, [r7, #4]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	689b      	ldr	r3, [r3, #8]
 800157e:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001582:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001586:	d10b      	bne.n	80015a0 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800158c:	f043 0220 	orr.w	r2, r3, #32
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	2200      	movs	r2, #0
 8001598:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800159c:	2301      	movs	r3, #1
 800159e:	e063      	b.n	8001668 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80015a0:	f7ff fe80 	bl	80012a4 <HAL_GetTick>
 80015a4:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015a6:	e021      	b.n	80015ec <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80015a8:	683b      	ldr	r3, [r7, #0]
 80015aa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80015ae:	d01d      	beq.n	80015ec <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d007      	beq.n	80015c6 <HAL_ADC_PollForConversion+0x6c>
 80015b6:	f7ff fe75 	bl	80012a4 <HAL_GetTick>
 80015ba:	4602      	mov	r2, r0
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	683a      	ldr	r2, [r7, #0]
 80015c2:	429a      	cmp	r2, r3
 80015c4:	d212      	bcs.n	80015ec <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	f003 0302 	and.w	r3, r3, #2
 80015d0:	2b02      	cmp	r3, #2
 80015d2:	d00b      	beq.n	80015ec <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015d8:	f043 0204 	orr.w	r2, r3, #4
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	2200      	movs	r2, #0
 80015e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80015e8:	2303      	movs	r3, #3
 80015ea:	e03d      	b.n	8001668 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f003 0302 	and.w	r3, r3, #2
 80015f6:	2b02      	cmp	r3, #2
 80015f8:	d1d6      	bne.n	80015a8 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80015fa:	687b      	ldr	r3, [r7, #4]
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	f06f 0212 	mvn.w	r2, #18
 8001602:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001608:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d123      	bne.n	8001666 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001622:	2b00      	cmp	r3, #0
 8001624:	d11f      	bne.n	8001666 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800162c:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001630:	2b00      	cmp	r3, #0
 8001632:	d006      	beq.n	8001642 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	689b      	ldr	r3, [r3, #8]
 800163a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800163e:	2b00      	cmp	r3, #0
 8001640:	d111      	bne.n	8001666 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800164a:	687b      	ldr	r3, [r7, #4]
 800164c:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001656:	2b00      	cmp	r3, #0
 8001658:	d105      	bne.n	8001666 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f043 0201 	orr.w	r2, r3, #1
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001666:	2300      	movs	r3, #0
}
 8001668:	4618      	mov	r0, r3
 800166a:	3710      	adds	r7, #16
 800166c:	46bd      	mov	sp, r7
 800166e:	bd80      	pop	{r7, pc}

08001670 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8001670:	b480      	push	{r7}
 8001672:	b083      	sub	sp, #12
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800167e:	4618      	mov	r0, r3
 8001680:	370c      	adds	r7, #12
 8001682:	46bd      	mov	sp, r7
 8001684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001688:	4770      	bx	lr
	...

0800168c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800168c:	b480      	push	{r7}
 800168e:	b085      	sub	sp, #20
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001696:	2300      	movs	r3, #0
 8001698:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016a0:	2b01      	cmp	r3, #1
 80016a2:	d101      	bne.n	80016a8 <HAL_ADC_ConfigChannel+0x1c>
 80016a4:	2302      	movs	r3, #2
 80016a6:	e105      	b.n	80018b4 <HAL_ADC_ConfigChannel+0x228>
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	2201      	movs	r2, #1
 80016ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	2b09      	cmp	r3, #9
 80016b6:	d925      	bls.n	8001704 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	68d9      	ldr	r1, [r3, #12]
 80016be:	683b      	ldr	r3, [r7, #0]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	b29b      	uxth	r3, r3
 80016c4:	461a      	mov	r2, r3
 80016c6:	4613      	mov	r3, r2
 80016c8:	005b      	lsls	r3, r3, #1
 80016ca:	4413      	add	r3, r2
 80016cc:	3b1e      	subs	r3, #30
 80016ce:	2207      	movs	r2, #7
 80016d0:	fa02 f303 	lsl.w	r3, r2, r3
 80016d4:	43da      	mvns	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	400a      	ands	r2, r1
 80016dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	68d9      	ldr	r1, [r3, #12]
 80016e4:	683b      	ldr	r3, [r7, #0]
 80016e6:	689a      	ldr	r2, [r3, #8]
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	681b      	ldr	r3, [r3, #0]
 80016ec:	b29b      	uxth	r3, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	4603      	mov	r3, r0
 80016f2:	005b      	lsls	r3, r3, #1
 80016f4:	4403      	add	r3, r0
 80016f6:	3b1e      	subs	r3, #30
 80016f8:	409a      	lsls	r2, r3
 80016fa:	687b      	ldr	r3, [r7, #4]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	430a      	orrs	r2, r1
 8001700:	60da      	str	r2, [r3, #12]
 8001702:	e022      	b.n	800174a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001704:	687b      	ldr	r3, [r7, #4]
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	6919      	ldr	r1, [r3, #16]
 800170a:	683b      	ldr	r3, [r7, #0]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	b29b      	uxth	r3, r3
 8001710:	461a      	mov	r2, r3
 8001712:	4613      	mov	r3, r2
 8001714:	005b      	lsls	r3, r3, #1
 8001716:	4413      	add	r3, r2
 8001718:	2207      	movs	r2, #7
 800171a:	fa02 f303 	lsl.w	r3, r2, r3
 800171e:	43da      	mvns	r2, r3
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	681b      	ldr	r3, [r3, #0]
 8001724:	400a      	ands	r2, r1
 8001726:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6919      	ldr	r1, [r3, #16]
 800172e:	683b      	ldr	r3, [r7, #0]
 8001730:	689a      	ldr	r2, [r3, #8]
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	b29b      	uxth	r3, r3
 8001738:	4618      	mov	r0, r3
 800173a:	4603      	mov	r3, r0
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	4403      	add	r3, r0
 8001740:	409a      	lsls	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	685b      	ldr	r3, [r3, #4]
 800174e:	2b06      	cmp	r3, #6
 8001750:	d824      	bhi.n	800179c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001758:	683b      	ldr	r3, [r7, #0]
 800175a:	685a      	ldr	r2, [r3, #4]
 800175c:	4613      	mov	r3, r2
 800175e:	009b      	lsls	r3, r3, #2
 8001760:	4413      	add	r3, r2
 8001762:	3b05      	subs	r3, #5
 8001764:	221f      	movs	r2, #31
 8001766:	fa02 f303 	lsl.w	r3, r2, r3
 800176a:	43da      	mvns	r2, r3
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	400a      	ands	r2, r1
 8001772:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	b29b      	uxth	r3, r3
 8001780:	4618      	mov	r0, r3
 8001782:	683b      	ldr	r3, [r7, #0]
 8001784:	685a      	ldr	r2, [r3, #4]
 8001786:	4613      	mov	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4413      	add	r3, r2
 800178c:	3b05      	subs	r3, #5
 800178e:	fa00 f203 	lsl.w	r2, r0, r3
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	635a      	str	r2, [r3, #52]	; 0x34
 800179a:	e04c      	b.n	8001836 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	685b      	ldr	r3, [r3, #4]
 80017a0:	2b0c      	cmp	r3, #12
 80017a2:	d824      	bhi.n	80017ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017aa:	683b      	ldr	r3, [r7, #0]
 80017ac:	685a      	ldr	r2, [r3, #4]
 80017ae:	4613      	mov	r3, r2
 80017b0:	009b      	lsls	r3, r3, #2
 80017b2:	4413      	add	r3, r2
 80017b4:	3b23      	subs	r3, #35	; 0x23
 80017b6:	221f      	movs	r2, #31
 80017b8:	fa02 f303 	lsl.w	r3, r2, r3
 80017bc:	43da      	mvns	r2, r3
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	400a      	ands	r2, r1
 80017c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	681b      	ldr	r3, [r3, #0]
 80017ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017cc:	683b      	ldr	r3, [r7, #0]
 80017ce:	681b      	ldr	r3, [r3, #0]
 80017d0:	b29b      	uxth	r3, r3
 80017d2:	4618      	mov	r0, r3
 80017d4:	683b      	ldr	r3, [r7, #0]
 80017d6:	685a      	ldr	r2, [r3, #4]
 80017d8:	4613      	mov	r3, r2
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	4413      	add	r3, r2
 80017de:	3b23      	subs	r3, #35	; 0x23
 80017e0:	fa00 f203 	lsl.w	r2, r0, r3
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	681b      	ldr	r3, [r3, #0]
 80017e8:	430a      	orrs	r2, r1
 80017ea:	631a      	str	r2, [r3, #48]	; 0x30
 80017ec:	e023      	b.n	8001836 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685a      	ldr	r2, [r3, #4]
 80017f8:	4613      	mov	r3, r2
 80017fa:	009b      	lsls	r3, r3, #2
 80017fc:	4413      	add	r3, r2
 80017fe:	3b41      	subs	r3, #65	; 0x41
 8001800:	221f      	movs	r2, #31
 8001802:	fa02 f303 	lsl.w	r3, r2, r3
 8001806:	43da      	mvns	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	400a      	ands	r2, r1
 800180e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001816:	683b      	ldr	r3, [r7, #0]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	b29b      	uxth	r3, r3
 800181c:	4618      	mov	r0, r3
 800181e:	683b      	ldr	r3, [r7, #0]
 8001820:	685a      	ldr	r2, [r3, #4]
 8001822:	4613      	mov	r3, r2
 8001824:	009b      	lsls	r3, r3, #2
 8001826:	4413      	add	r3, r2
 8001828:	3b41      	subs	r3, #65	; 0x41
 800182a:	fa00 f203 	lsl.w	r2, r0, r3
 800182e:	687b      	ldr	r3, [r7, #4]
 8001830:	681b      	ldr	r3, [r3, #0]
 8001832:	430a      	orrs	r2, r1
 8001834:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001836:	4b22      	ldr	r3, [pc, #136]	; (80018c0 <HAL_ADC_ConfigChannel+0x234>)
 8001838:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4a21      	ldr	r2, [pc, #132]	; (80018c4 <HAL_ADC_ConfigChannel+0x238>)
 8001840:	4293      	cmp	r3, r2
 8001842:	d109      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x1cc>
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	2b12      	cmp	r3, #18
 800184a:	d105      	bne.n	8001858 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800184c:	68fb      	ldr	r3, [r7, #12]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	4a19      	ldr	r2, [pc, #100]	; (80018c4 <HAL_ADC_ConfigChannel+0x238>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d123      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x21e>
 8001862:	683b      	ldr	r3, [r7, #0]
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	2b10      	cmp	r3, #16
 8001868:	d003      	beq.n	8001872 <HAL_ADC_ConfigChannel+0x1e6>
 800186a:	683b      	ldr	r3, [r7, #0]
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	2b11      	cmp	r3, #17
 8001870:	d11b      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001872:	68fb      	ldr	r3, [r7, #12]
 8001874:	685b      	ldr	r3, [r3, #4]
 8001876:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800187a:	68fb      	ldr	r3, [r7, #12]
 800187c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800187e:	683b      	ldr	r3, [r7, #0]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	2b10      	cmp	r3, #16
 8001884:	d111      	bne.n	80018aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001886:	4b10      	ldr	r3, [pc, #64]	; (80018c8 <HAL_ADC_ConfigChannel+0x23c>)
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	4a10      	ldr	r2, [pc, #64]	; (80018cc <HAL_ADC_ConfigChannel+0x240>)
 800188c:	fba2 2303 	umull	r2, r3, r2, r3
 8001890:	0c9a      	lsrs	r2, r3, #18
 8001892:	4613      	mov	r3, r2
 8001894:	009b      	lsls	r3, r3, #2
 8001896:	4413      	add	r3, r2
 8001898:	005b      	lsls	r3, r3, #1
 800189a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800189c:	e002      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	3b01      	subs	r3, #1
 80018a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018a4:	68bb      	ldr	r3, [r7, #8]
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d1f9      	bne.n	800189e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	2200      	movs	r2, #0
 80018ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018b2:	2300      	movs	r3, #0
}
 80018b4:	4618      	mov	r0, r3
 80018b6:	3714      	adds	r7, #20
 80018b8:	46bd      	mov	sp, r7
 80018ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018be:	4770      	bx	lr
 80018c0:	40012300 	.word	0x40012300
 80018c4:	40012000 	.word	0x40012000
 80018c8:	200003d4 	.word	0x200003d4
 80018cc:	431bde83 	.word	0x431bde83

080018d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b085      	sub	sp, #20
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018d8:	4b79      	ldr	r3, [pc, #484]	; (8001ac0 <ADC_Init+0x1f0>)
 80018da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018e4:	68fb      	ldr	r3, [r7, #12]
 80018e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018e8:	68fb      	ldr	r3, [r7, #12]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	685b      	ldr	r3, [r3, #4]
 80018f0:	431a      	orrs	r2, r3
 80018f2:	68fb      	ldr	r3, [r7, #12]
 80018f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	685a      	ldr	r2, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001904:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	6859      	ldr	r1, [r3, #4]
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	691b      	ldr	r3, [r3, #16]
 8001910:	021a      	lsls	r2, r3, #8
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	430a      	orrs	r2, r1
 8001918:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	685a      	ldr	r2, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	681b      	ldr	r3, [r3, #0]
 8001924:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001928:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800192a:	687b      	ldr	r3, [r7, #4]
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	6859      	ldr	r1, [r3, #4]
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	689a      	ldr	r2, [r3, #8]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	681b      	ldr	r3, [r3, #0]
 8001938:	430a      	orrs	r2, r1
 800193a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	689a      	ldr	r2, [r3, #8]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800194a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	6899      	ldr	r1, [r3, #8]
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	68da      	ldr	r2, [r3, #12]
 8001956:	687b      	ldr	r3, [r7, #4]
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	430a      	orrs	r2, r1
 800195c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001962:	4a58      	ldr	r2, [pc, #352]	; (8001ac4 <ADC_Init+0x1f4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d022      	beq.n	80019ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	689a      	ldr	r2, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001976:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	681b      	ldr	r3, [r3, #0]
 800197c:	6899      	ldr	r1, [r3, #8]
 800197e:	687b      	ldr	r3, [r7, #4]
 8001980:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	430a      	orrs	r2, r1
 8001988:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	689a      	ldr	r2, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001998:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	6899      	ldr	r1, [r3, #8]
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	430a      	orrs	r2, r1
 80019aa:	609a      	str	r2, [r3, #8]
 80019ac:	e00f      	b.n	80019ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	689a      	ldr	r2, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f022 0202 	bic.w	r2, r2, #2
 80019dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	6899      	ldr	r1, [r3, #8]
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	7e1b      	ldrb	r3, [r3, #24]
 80019e8:	005a      	lsls	r2, r3, #1
 80019ea:	687b      	ldr	r3, [r7, #4]
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	430a      	orrs	r2, r1
 80019f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019f8:	2b00      	cmp	r3, #0
 80019fa:	d01b      	beq.n	8001a34 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a0a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	685a      	ldr	r2, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a1a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6859      	ldr	r1, [r3, #4]
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a26:	3b01      	subs	r3, #1
 8001a28:	035a      	lsls	r2, r3, #13
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	430a      	orrs	r2, r1
 8001a30:	605a      	str	r2, [r3, #4]
 8001a32:	e007      	b.n	8001a44 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	685a      	ldr	r2, [r3, #4]
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a42:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a52:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	69db      	ldr	r3, [r3, #28]
 8001a5e:	3b01      	subs	r3, #1
 8001a60:	051a      	lsls	r2, r3, #20
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	681b      	ldr	r3, [r3, #0]
 8001a66:	430a      	orrs	r2, r1
 8001a68:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	689a      	ldr	r2, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a78:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	6899      	ldr	r1, [r3, #8]
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a86:	025a      	lsls	r2, r3, #9
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	430a      	orrs	r2, r1
 8001a8e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	689a      	ldr	r2, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a9e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	6899      	ldr	r1, [r3, #8]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	695b      	ldr	r3, [r3, #20]
 8001aaa:	029a      	lsls	r2, r3, #10
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	430a      	orrs	r2, r1
 8001ab2:	609a      	str	r2, [r3, #8]
}
 8001ab4:	bf00      	nop
 8001ab6:	3714      	adds	r7, #20
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abe:	4770      	bx	lr
 8001ac0:	40012300 	.word	0x40012300
 8001ac4:	0f000001 	.word	0x0f000001

08001ac8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac8:	b480      	push	{r7}
 8001aca:	b085      	sub	sp, #20
 8001acc:	af00      	add	r7, sp, #0
 8001ace:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	f003 0307 	and.w	r3, r3, #7
 8001ad6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ad8:	4b0c      	ldr	r3, [pc, #48]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ade:	68ba      	ldr	r2, [r7, #8]
 8001ae0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001aec:	68bb      	ldr	r3, [r7, #8]
 8001aee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001af0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001af4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001af8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001afa:	4a04      	ldr	r2, [pc, #16]	; (8001b0c <__NVIC_SetPriorityGrouping+0x44>)
 8001afc:	68bb      	ldr	r3, [r7, #8]
 8001afe:	60d3      	str	r3, [r2, #12]
}
 8001b00:	bf00      	nop
 8001b02:	3714      	adds	r7, #20
 8001b04:	46bd      	mov	sp, r7
 8001b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b0a:	4770      	bx	lr
 8001b0c:	e000ed00 	.word	0xe000ed00

08001b10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001b14:	4b04      	ldr	r3, [pc, #16]	; (8001b28 <__NVIC_GetPriorityGrouping+0x18>)
 8001b16:	68db      	ldr	r3, [r3, #12]
 8001b18:	0a1b      	lsrs	r3, r3, #8
 8001b1a:	f003 0307 	and.w	r3, r3, #7
}
 8001b1e:	4618      	mov	r0, r3
 8001b20:	46bd      	mov	sp, r7
 8001b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b26:	4770      	bx	lr
 8001b28:	e000ed00 	.word	0xe000ed00

08001b2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	4603      	mov	r3, r0
 8001b34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b3a:	2b00      	cmp	r3, #0
 8001b3c:	db0b      	blt.n	8001b56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b3e:	79fb      	ldrb	r3, [r7, #7]
 8001b40:	f003 021f 	and.w	r2, r3, #31
 8001b44:	4907      	ldr	r1, [pc, #28]	; (8001b64 <__NVIC_EnableIRQ+0x38>)
 8001b46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b4a:	095b      	lsrs	r3, r3, #5
 8001b4c:	2001      	movs	r0, #1
 8001b4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b56:	bf00      	nop
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr
 8001b62:	bf00      	nop
 8001b64:	e000e100 	.word	0xe000e100

08001b68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b083      	sub	sp, #12
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	4603      	mov	r3, r0
 8001b70:	6039      	str	r1, [r7, #0]
 8001b72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	db0a      	blt.n	8001b92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	b2da      	uxtb	r2, r3
 8001b80:	490c      	ldr	r1, [pc, #48]	; (8001bb4 <__NVIC_SetPriority+0x4c>)
 8001b82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b86:	0112      	lsls	r2, r2, #4
 8001b88:	b2d2      	uxtb	r2, r2
 8001b8a:	440b      	add	r3, r1
 8001b8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b90:	e00a      	b.n	8001ba8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b92:	683b      	ldr	r3, [r7, #0]
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4908      	ldr	r1, [pc, #32]	; (8001bb8 <__NVIC_SetPriority+0x50>)
 8001b98:	79fb      	ldrb	r3, [r7, #7]
 8001b9a:	f003 030f 	and.w	r3, r3, #15
 8001b9e:	3b04      	subs	r3, #4
 8001ba0:	0112      	lsls	r2, r2, #4
 8001ba2:	b2d2      	uxtb	r2, r2
 8001ba4:	440b      	add	r3, r1
 8001ba6:	761a      	strb	r2, [r3, #24]
}
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	e000e100 	.word	0xe000e100
 8001bb8:	e000ed00 	.word	0xe000ed00

08001bbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b089      	sub	sp, #36	; 0x24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	60f8      	str	r0, [r7, #12]
 8001bc4:	60b9      	str	r1, [r7, #8]
 8001bc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	f003 0307 	and.w	r3, r3, #7
 8001bce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001bd0:	69fb      	ldr	r3, [r7, #28]
 8001bd2:	f1c3 0307 	rsb	r3, r3, #7
 8001bd6:	2b04      	cmp	r3, #4
 8001bd8:	bf28      	it	cs
 8001bda:	2304      	movcs	r3, #4
 8001bdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001bde:	69fb      	ldr	r3, [r7, #28]
 8001be0:	3304      	adds	r3, #4
 8001be2:	2b06      	cmp	r3, #6
 8001be4:	d902      	bls.n	8001bec <NVIC_EncodePriority+0x30>
 8001be6:	69fb      	ldr	r3, [r7, #28]
 8001be8:	3b03      	subs	r3, #3
 8001bea:	e000      	b.n	8001bee <NVIC_EncodePriority+0x32>
 8001bec:	2300      	movs	r3, #0
 8001bee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bf0:	f04f 32ff 	mov.w	r2, #4294967295
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	fa02 f303 	lsl.w	r3, r2, r3
 8001bfa:	43da      	mvns	r2, r3
 8001bfc:	68bb      	ldr	r3, [r7, #8]
 8001bfe:	401a      	ands	r2, r3
 8001c00:	697b      	ldr	r3, [r7, #20]
 8001c02:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001c04:	f04f 31ff 	mov.w	r1, #4294967295
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	fa01 f303 	lsl.w	r3, r1, r3
 8001c0e:	43d9      	mvns	r1, r3
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001c14:	4313      	orrs	r3, r2
         );
}
 8001c16:	4618      	mov	r0, r3
 8001c18:	3724      	adds	r7, #36	; 0x24
 8001c1a:	46bd      	mov	sp, r7
 8001c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c20:	4770      	bx	lr
	...

08001c24 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001c24:	b580      	push	{r7, lr}
 8001c26:	b082      	sub	sp, #8
 8001c28:	af00      	add	r7, sp, #0
 8001c2a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	3b01      	subs	r3, #1
 8001c30:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001c34:	d301      	bcc.n	8001c3a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001c36:	2301      	movs	r3, #1
 8001c38:	e00f      	b.n	8001c5a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c3a:	4a0a      	ldr	r2, [pc, #40]	; (8001c64 <SysTick_Config+0x40>)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	3b01      	subs	r3, #1
 8001c40:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c42:	210f      	movs	r1, #15
 8001c44:	f04f 30ff 	mov.w	r0, #4294967295
 8001c48:	f7ff ff8e 	bl	8001b68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c4c:	4b05      	ldr	r3, [pc, #20]	; (8001c64 <SysTick_Config+0x40>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c52:	4b04      	ldr	r3, [pc, #16]	; (8001c64 <SysTick_Config+0x40>)
 8001c54:	2207      	movs	r2, #7
 8001c56:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c58:	2300      	movs	r3, #0
}
 8001c5a:	4618      	mov	r0, r3
 8001c5c:	3708      	adds	r7, #8
 8001c5e:	46bd      	mov	sp, r7
 8001c60:	bd80      	pop	{r7, pc}
 8001c62:	bf00      	nop
 8001c64:	e000e010 	.word	0xe000e010

08001c68 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c68:	b580      	push	{r7, lr}
 8001c6a:	b082      	sub	sp, #8
 8001c6c:	af00      	add	r7, sp, #0
 8001c6e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c70:	6878      	ldr	r0, [r7, #4]
 8001c72:	f7ff ff29 	bl	8001ac8 <__NVIC_SetPriorityGrouping>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b086      	sub	sp, #24
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	60b9      	str	r1, [r7, #8]
 8001c88:	607a      	str	r2, [r7, #4]
 8001c8a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c8c:	2300      	movs	r3, #0
 8001c8e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c90:	f7ff ff3e 	bl	8001b10 <__NVIC_GetPriorityGrouping>
 8001c94:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	6978      	ldr	r0, [r7, #20]
 8001c9c:	f7ff ff8e 	bl	8001bbc <NVIC_EncodePriority>
 8001ca0:	4602      	mov	r2, r0
 8001ca2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ca6:	4611      	mov	r1, r2
 8001ca8:	4618      	mov	r0, r3
 8001caa:	f7ff ff5d 	bl	8001b68 <__NVIC_SetPriority>
}
 8001cae:	bf00      	nop
 8001cb0:	3718      	adds	r7, #24
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}

08001cb6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001cb6:	b580      	push	{r7, lr}
 8001cb8:	b082      	sub	sp, #8
 8001cba:	af00      	add	r7, sp, #0
 8001cbc:	4603      	mov	r3, r0
 8001cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	4618      	mov	r0, r3
 8001cc6:	f7ff ff31 	bl	8001b2c <__NVIC_EnableIRQ>
}
 8001cca:	bf00      	nop
 8001ccc:	3708      	adds	r7, #8
 8001cce:	46bd      	mov	sp, r7
 8001cd0:	bd80      	pop	{r7, pc}

08001cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001cd2:	b580      	push	{r7, lr}
 8001cd4:	b082      	sub	sp, #8
 8001cd6:	af00      	add	r7, sp, #0
 8001cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001cda:	6878      	ldr	r0, [r7, #4]
 8001cdc:	f7ff ffa2 	bl	8001c24 <SysTick_Config>
 8001ce0:	4603      	mov	r3, r0
}
 8001ce2:	4618      	mov	r0, r3
 8001ce4:	3708      	adds	r7, #8
 8001ce6:	46bd      	mov	sp, r7
 8001ce8:	bd80      	pop	{r7, pc}
	...

08001cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b089      	sub	sp, #36	; 0x24
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
 8001cf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001cf6:	2300      	movs	r3, #0
 8001cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001cfa:	2300      	movs	r3, #0
 8001cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001cfe:	2300      	movs	r3, #0
 8001d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001d02:	2300      	movs	r3, #0
 8001d04:	61fb      	str	r3, [r7, #28]
 8001d06:	e159      	b.n	8001fbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001d08:	2201      	movs	r2, #1
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001d12:	683b      	ldr	r3, [r7, #0]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	697a      	ldr	r2, [r7, #20]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001d1c:	693a      	ldr	r2, [r7, #16]
 8001d1e:	697b      	ldr	r3, [r7, #20]
 8001d20:	429a      	cmp	r2, r3
 8001d22:	f040 8148 	bne.w	8001fb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d26:	683b      	ldr	r3, [r7, #0]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	f003 0303 	and.w	r3, r3, #3
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d005      	beq.n	8001d3e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001d32:	683b      	ldr	r3, [r7, #0]
 8001d34:	685b      	ldr	r3, [r3, #4]
 8001d36:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001d3a:	2b02      	cmp	r3, #2
 8001d3c:	d130      	bne.n	8001da0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	689b      	ldr	r3, [r3, #8]
 8001d42:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001d44:	69fb      	ldr	r3, [r7, #28]
 8001d46:	005b      	lsls	r3, r3, #1
 8001d48:	2203      	movs	r2, #3
 8001d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d4e:	43db      	mvns	r3, r3
 8001d50:	69ba      	ldr	r2, [r7, #24]
 8001d52:	4013      	ands	r3, r2
 8001d54:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001d56:	683b      	ldr	r3, [r7, #0]
 8001d58:	68da      	ldr	r2, [r3, #12]
 8001d5a:	69fb      	ldr	r3, [r7, #28]
 8001d5c:	005b      	lsls	r3, r3, #1
 8001d5e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d62:	69ba      	ldr	r2, [r7, #24]
 8001d64:	4313      	orrs	r3, r2
 8001d66:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	69ba      	ldr	r2, [r7, #24]
 8001d6c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	685b      	ldr	r3, [r3, #4]
 8001d72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001d74:	2201      	movs	r2, #1
 8001d76:	69fb      	ldr	r3, [r7, #28]
 8001d78:	fa02 f303 	lsl.w	r3, r2, r3
 8001d7c:	43db      	mvns	r3, r3
 8001d7e:	69ba      	ldr	r2, [r7, #24]
 8001d80:	4013      	ands	r3, r2
 8001d82:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	091b      	lsrs	r3, r3, #4
 8001d8a:	f003 0201 	and.w	r2, r3, #1
 8001d8e:	69fb      	ldr	r3, [r7, #28]
 8001d90:	fa02 f303 	lsl.w	r3, r2, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4313      	orrs	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	69ba      	ldr	r2, [r7, #24]
 8001d9e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	685b      	ldr	r3, [r3, #4]
 8001da4:	f003 0303 	and.w	r3, r3, #3
 8001da8:	2b03      	cmp	r3, #3
 8001daa:	d017      	beq.n	8001ddc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	68db      	ldr	r3, [r3, #12]
 8001db0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001db2:	69fb      	ldr	r3, [r7, #28]
 8001db4:	005b      	lsls	r3, r3, #1
 8001db6:	2203      	movs	r2, #3
 8001db8:	fa02 f303 	lsl.w	r3, r2, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	69ba      	ldr	r2, [r7, #24]
 8001dc0:	4013      	ands	r3, r2
 8001dc2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001dc4:	683b      	ldr	r3, [r7, #0]
 8001dc6:	689a      	ldr	r2, [r3, #8]
 8001dc8:	69fb      	ldr	r3, [r7, #28]
 8001dca:	005b      	lsls	r3, r3, #1
 8001dcc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd0:	69ba      	ldr	r2, [r7, #24]
 8001dd2:	4313      	orrs	r3, r2
 8001dd4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 0303 	and.w	r3, r3, #3
 8001de4:	2b02      	cmp	r3, #2
 8001de6:	d123      	bne.n	8001e30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	08da      	lsrs	r2, r3, #3
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	3208      	adds	r2, #8
 8001df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001df6:	69fb      	ldr	r3, [r7, #28]
 8001df8:	f003 0307 	and.w	r3, r3, #7
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	220f      	movs	r2, #15
 8001e00:	fa02 f303 	lsl.w	r3, r2, r3
 8001e04:	43db      	mvns	r3, r3
 8001e06:	69ba      	ldr	r2, [r7, #24]
 8001e08:	4013      	ands	r3, r2
 8001e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001e0c:	683b      	ldr	r3, [r7, #0]
 8001e0e:	691a      	ldr	r2, [r3, #16]
 8001e10:	69fb      	ldr	r3, [r7, #28]
 8001e12:	f003 0307 	and.w	r3, r3, #7
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1c:	69ba      	ldr	r2, [r7, #24]
 8001e1e:	4313      	orrs	r3, r2
 8001e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001e22:	69fb      	ldr	r3, [r7, #28]
 8001e24:	08da      	lsrs	r2, r3, #3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	3208      	adds	r2, #8
 8001e2a:	69b9      	ldr	r1, [r7, #24]
 8001e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	681b      	ldr	r3, [r3, #0]
 8001e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	005b      	lsls	r3, r3, #1
 8001e3a:	2203      	movs	r2, #3
 8001e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e40:	43db      	mvns	r3, r3
 8001e42:	69ba      	ldr	r2, [r7, #24]
 8001e44:	4013      	ands	r3, r2
 8001e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001e48:	683b      	ldr	r3, [r7, #0]
 8001e4a:	685b      	ldr	r3, [r3, #4]
 8001e4c:	f003 0203 	and.w	r2, r3, #3
 8001e50:	69fb      	ldr	r3, [r7, #28]
 8001e52:	005b      	lsls	r3, r3, #1
 8001e54:	fa02 f303 	lsl.w	r3, r2, r3
 8001e58:	69ba      	ldr	r2, [r7, #24]
 8001e5a:	4313      	orrs	r3, r2
 8001e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	69ba      	ldr	r2, [r7, #24]
 8001e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	685b      	ldr	r3, [r3, #4]
 8001e68:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	f000 80a2 	beq.w	8001fb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e72:	2300      	movs	r3, #0
 8001e74:	60fb      	str	r3, [r7, #12]
 8001e76:	4b57      	ldr	r3, [pc, #348]	; (8001fd4 <HAL_GPIO_Init+0x2e8>)
 8001e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e7a:	4a56      	ldr	r2, [pc, #344]	; (8001fd4 <HAL_GPIO_Init+0x2e8>)
 8001e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e80:	6453      	str	r3, [r2, #68]	; 0x44
 8001e82:	4b54      	ldr	r3, [pc, #336]	; (8001fd4 <HAL_GPIO_Init+0x2e8>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e8a:	60fb      	str	r3, [r7, #12]
 8001e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001e8e:	4a52      	ldr	r2, [pc, #328]	; (8001fd8 <HAL_GPIO_Init+0x2ec>)
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	089b      	lsrs	r3, r3, #2
 8001e94:	3302      	adds	r3, #2
 8001e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	f003 0303 	and.w	r3, r3, #3
 8001ea2:	009b      	lsls	r3, r3, #2
 8001ea4:	220f      	movs	r2, #15
 8001ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8001eaa:	43db      	mvns	r3, r3
 8001eac:	69ba      	ldr	r2, [r7, #24]
 8001eae:	4013      	ands	r3, r2
 8001eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	4a49      	ldr	r2, [pc, #292]	; (8001fdc <HAL_GPIO_Init+0x2f0>)
 8001eb6:	4293      	cmp	r3, r2
 8001eb8:	d019      	beq.n	8001eee <HAL_GPIO_Init+0x202>
 8001eba:	687b      	ldr	r3, [r7, #4]
 8001ebc:	4a48      	ldr	r2, [pc, #288]	; (8001fe0 <HAL_GPIO_Init+0x2f4>)
 8001ebe:	4293      	cmp	r3, r2
 8001ec0:	d013      	beq.n	8001eea <HAL_GPIO_Init+0x1fe>
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	4a47      	ldr	r2, [pc, #284]	; (8001fe4 <HAL_GPIO_Init+0x2f8>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d00d      	beq.n	8001ee6 <HAL_GPIO_Init+0x1fa>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	4a46      	ldr	r2, [pc, #280]	; (8001fe8 <HAL_GPIO_Init+0x2fc>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d007      	beq.n	8001ee2 <HAL_GPIO_Init+0x1f6>
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	4a45      	ldr	r2, [pc, #276]	; (8001fec <HAL_GPIO_Init+0x300>)
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	d101      	bne.n	8001ede <HAL_GPIO_Init+0x1f2>
 8001eda:	2304      	movs	r3, #4
 8001edc:	e008      	b.n	8001ef0 <HAL_GPIO_Init+0x204>
 8001ede:	2307      	movs	r3, #7
 8001ee0:	e006      	b.n	8001ef0 <HAL_GPIO_Init+0x204>
 8001ee2:	2303      	movs	r3, #3
 8001ee4:	e004      	b.n	8001ef0 <HAL_GPIO_Init+0x204>
 8001ee6:	2302      	movs	r3, #2
 8001ee8:	e002      	b.n	8001ef0 <HAL_GPIO_Init+0x204>
 8001eea:	2301      	movs	r3, #1
 8001eec:	e000      	b.n	8001ef0 <HAL_GPIO_Init+0x204>
 8001eee:	2300      	movs	r3, #0
 8001ef0:	69fa      	ldr	r2, [r7, #28]
 8001ef2:	f002 0203 	and.w	r2, r2, #3
 8001ef6:	0092      	lsls	r2, r2, #2
 8001ef8:	4093      	lsls	r3, r2
 8001efa:	69ba      	ldr	r2, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001f00:	4935      	ldr	r1, [pc, #212]	; (8001fd8 <HAL_GPIO_Init+0x2ec>)
 8001f02:	69fb      	ldr	r3, [r7, #28]
 8001f04:	089b      	lsrs	r3, r3, #2
 8001f06:	3302      	adds	r3, #2
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001f0e:	4b38      	ldr	r3, [pc, #224]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001f10:	689b      	ldr	r3, [r3, #8]
 8001f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f14:	693b      	ldr	r3, [r7, #16]
 8001f16:	43db      	mvns	r3, r3
 8001f18:	69ba      	ldr	r2, [r7, #24]
 8001f1a:	4013      	ands	r3, r2
 8001f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001f1e:	683b      	ldr	r3, [r7, #0]
 8001f20:	685b      	ldr	r3, [r3, #4]
 8001f22:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d003      	beq.n	8001f32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001f2a:	69ba      	ldr	r2, [r7, #24]
 8001f2c:	693b      	ldr	r3, [r7, #16]
 8001f2e:	4313      	orrs	r3, r2
 8001f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001f32:	4a2f      	ldr	r2, [pc, #188]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001f34:	69bb      	ldr	r3, [r7, #24]
 8001f36:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001f38:	4b2d      	ldr	r3, [pc, #180]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001f3a:	68db      	ldr	r3, [r3, #12]
 8001f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f3e:	693b      	ldr	r3, [r7, #16]
 8001f40:	43db      	mvns	r3, r3
 8001f42:	69ba      	ldr	r2, [r7, #24]
 8001f44:	4013      	ands	r3, r2
 8001f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001f48:	683b      	ldr	r3, [r7, #0]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d003      	beq.n	8001f5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001f54:	69ba      	ldr	r2, [r7, #24]
 8001f56:	693b      	ldr	r3, [r7, #16]
 8001f58:	4313      	orrs	r3, r2
 8001f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001f5c:	4a24      	ldr	r2, [pc, #144]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001f5e:	69bb      	ldr	r3, [r7, #24]
 8001f60:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001f62:	4b23      	ldr	r3, [pc, #140]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001f64:	685b      	ldr	r3, [r3, #4]
 8001f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	43db      	mvns	r3, r3
 8001f6c:	69ba      	ldr	r2, [r7, #24]
 8001f6e:	4013      	ands	r3, r2
 8001f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	685b      	ldr	r3, [r3, #4]
 8001f76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d003      	beq.n	8001f86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001f7e:	69ba      	ldr	r2, [r7, #24]
 8001f80:	693b      	ldr	r3, [r7, #16]
 8001f82:	4313      	orrs	r3, r2
 8001f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001f86:	4a1a      	ldr	r2, [pc, #104]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001f88:	69bb      	ldr	r3, [r7, #24]
 8001f8a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001f8c:	4b18      	ldr	r3, [pc, #96]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001f92:	693b      	ldr	r3, [r7, #16]
 8001f94:	43db      	mvns	r3, r3
 8001f96:	69ba      	ldr	r2, [r7, #24]
 8001f98:	4013      	ands	r3, r2
 8001f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	685b      	ldr	r3, [r3, #4]
 8001fa0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d003      	beq.n	8001fb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001fa8:	69ba      	ldr	r2, [r7, #24]
 8001faa:	693b      	ldr	r3, [r7, #16]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001fb0:	4a0f      	ldr	r2, [pc, #60]	; (8001ff0 <HAL_GPIO_Init+0x304>)
 8001fb2:	69bb      	ldr	r3, [r7, #24]
 8001fb4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001fb6:	69fb      	ldr	r3, [r7, #28]
 8001fb8:	3301      	adds	r3, #1
 8001fba:	61fb      	str	r3, [r7, #28]
 8001fbc:	69fb      	ldr	r3, [r7, #28]
 8001fbe:	2b0f      	cmp	r3, #15
 8001fc0:	f67f aea2 	bls.w	8001d08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001fc4:	bf00      	nop
 8001fc6:	bf00      	nop
 8001fc8:	3724      	adds	r7, #36	; 0x24
 8001fca:	46bd      	mov	sp, r7
 8001fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fd0:	4770      	bx	lr
 8001fd2:	bf00      	nop
 8001fd4:	40023800 	.word	0x40023800
 8001fd8:	40013800 	.word	0x40013800
 8001fdc:	40020000 	.word	0x40020000
 8001fe0:	40020400 	.word	0x40020400
 8001fe4:	40020800 	.word	0x40020800
 8001fe8:	40020c00 	.word	0x40020c00
 8001fec:	40021000 	.word	0x40021000
 8001ff0:	40013c00 	.word	0x40013c00

08001ff4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	b085      	sub	sp, #20
 8001ff8:	af00      	add	r7, sp, #0
 8001ffa:	6078      	str	r0, [r7, #4]
 8001ffc:	460b      	mov	r3, r1
 8001ffe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	691a      	ldr	r2, [r3, #16]
 8002004:	887b      	ldrh	r3, [r7, #2]
 8002006:	4013      	ands	r3, r2
 8002008:	2b00      	cmp	r3, #0
 800200a:	d002      	beq.n	8002012 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800200c:	2301      	movs	r3, #1
 800200e:	73fb      	strb	r3, [r7, #15]
 8002010:	e001      	b.n	8002016 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002012:	2300      	movs	r3, #0
 8002014:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002016:	7bfb      	ldrb	r3, [r7, #15]
}
 8002018:	4618      	mov	r0, r3
 800201a:	3714      	adds	r7, #20
 800201c:	46bd      	mov	sp, r7
 800201e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002022:	4770      	bx	lr

08002024 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002024:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002026:	b08f      	sub	sp, #60	; 0x3c
 8002028:	af0a      	add	r7, sp, #40	; 0x28
 800202a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d101      	bne.n	8002036 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002032:	2301      	movs	r3, #1
 8002034:	e10f      	b.n	8002256 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002042:	b2db      	uxtb	r3, r3
 8002044:	2b00      	cmp	r3, #0
 8002046:	d106      	bne.n	8002056 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2200      	movs	r2, #0
 800204c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f005 f931 	bl	80072b8 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2203      	movs	r2, #3
 800205a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800205e:	68bb      	ldr	r3, [r7, #8]
 8002060:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002062:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002066:	2b00      	cmp	r3, #0
 8002068:	d102      	bne.n	8002070 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	2200      	movs	r2, #0
 800206e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002070:	687b      	ldr	r3, [r7, #4]
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	4618      	mov	r0, r3
 8002076:	f001 ff80 	bl	8003f7a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	603b      	str	r3, [r7, #0]
 8002080:	687e      	ldr	r6, [r7, #4]
 8002082:	466d      	mov	r5, sp
 8002084:	f106 0410 	add.w	r4, r6, #16
 8002088:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800208a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800208c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800208e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002090:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002094:	e885 0003 	stmia.w	r5, {r0, r1}
 8002098:	1d33      	adds	r3, r6, #4
 800209a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800209c:	6838      	ldr	r0, [r7, #0]
 800209e:	f001 fe57 	bl	8003d50 <USB_CoreInit>
 80020a2:	4603      	mov	r3, r0
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d005      	beq.n	80020b4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2202      	movs	r2, #2
 80020ac:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80020b0:	2301      	movs	r3, #1
 80020b2:	e0d0      	b.n	8002256 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	2100      	movs	r1, #0
 80020ba:	4618      	mov	r0, r3
 80020bc:	f001 ff6e 	bl	8003f9c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	73fb      	strb	r3, [r7, #15]
 80020c4:	e04a      	b.n	800215c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80020c6:	7bfa      	ldrb	r2, [r7, #15]
 80020c8:	6879      	ldr	r1, [r7, #4]
 80020ca:	4613      	mov	r3, r2
 80020cc:	00db      	lsls	r3, r3, #3
 80020ce:	4413      	add	r3, r2
 80020d0:	009b      	lsls	r3, r3, #2
 80020d2:	440b      	add	r3, r1
 80020d4:	333d      	adds	r3, #61	; 0x3d
 80020d6:	2201      	movs	r2, #1
 80020d8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80020da:	7bfa      	ldrb	r2, [r7, #15]
 80020dc:	6879      	ldr	r1, [r7, #4]
 80020de:	4613      	mov	r3, r2
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4413      	add	r3, r2
 80020e4:	009b      	lsls	r3, r3, #2
 80020e6:	440b      	add	r3, r1
 80020e8:	333c      	adds	r3, #60	; 0x3c
 80020ea:	7bfa      	ldrb	r2, [r7, #15]
 80020ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80020ee:	7bfa      	ldrb	r2, [r7, #15]
 80020f0:	7bfb      	ldrb	r3, [r7, #15]
 80020f2:	b298      	uxth	r0, r3
 80020f4:	6879      	ldr	r1, [r7, #4]
 80020f6:	4613      	mov	r3, r2
 80020f8:	00db      	lsls	r3, r3, #3
 80020fa:	4413      	add	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	440b      	add	r3, r1
 8002100:	3344      	adds	r3, #68	; 0x44
 8002102:	4602      	mov	r2, r0
 8002104:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002106:	7bfa      	ldrb	r2, [r7, #15]
 8002108:	6879      	ldr	r1, [r7, #4]
 800210a:	4613      	mov	r3, r2
 800210c:	00db      	lsls	r3, r3, #3
 800210e:	4413      	add	r3, r2
 8002110:	009b      	lsls	r3, r3, #2
 8002112:	440b      	add	r3, r1
 8002114:	3340      	adds	r3, #64	; 0x40
 8002116:	2200      	movs	r2, #0
 8002118:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800211a:	7bfa      	ldrb	r2, [r7, #15]
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	4613      	mov	r3, r2
 8002120:	00db      	lsls	r3, r3, #3
 8002122:	4413      	add	r3, r2
 8002124:	009b      	lsls	r3, r3, #2
 8002126:	440b      	add	r3, r1
 8002128:	3348      	adds	r3, #72	; 0x48
 800212a:	2200      	movs	r2, #0
 800212c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800212e:	7bfa      	ldrb	r2, [r7, #15]
 8002130:	6879      	ldr	r1, [r7, #4]
 8002132:	4613      	mov	r3, r2
 8002134:	00db      	lsls	r3, r3, #3
 8002136:	4413      	add	r3, r2
 8002138:	009b      	lsls	r3, r3, #2
 800213a:	440b      	add	r3, r1
 800213c:	334c      	adds	r3, #76	; 0x4c
 800213e:	2200      	movs	r2, #0
 8002140:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002142:	7bfa      	ldrb	r2, [r7, #15]
 8002144:	6879      	ldr	r1, [r7, #4]
 8002146:	4613      	mov	r3, r2
 8002148:	00db      	lsls	r3, r3, #3
 800214a:	4413      	add	r3, r2
 800214c:	009b      	lsls	r3, r3, #2
 800214e:	440b      	add	r3, r1
 8002150:	3354      	adds	r3, #84	; 0x54
 8002152:	2200      	movs	r2, #0
 8002154:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002156:	7bfb      	ldrb	r3, [r7, #15]
 8002158:	3301      	adds	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
 800215c:	7bfa      	ldrb	r2, [r7, #15]
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	685b      	ldr	r3, [r3, #4]
 8002162:	429a      	cmp	r2, r3
 8002164:	d3af      	bcc.n	80020c6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002166:	2300      	movs	r3, #0
 8002168:	73fb      	strb	r3, [r7, #15]
 800216a:	e044      	b.n	80021f6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800216c:	7bfa      	ldrb	r2, [r7, #15]
 800216e:	6879      	ldr	r1, [r7, #4]
 8002170:	4613      	mov	r3, r2
 8002172:	00db      	lsls	r3, r3, #3
 8002174:	4413      	add	r3, r2
 8002176:	009b      	lsls	r3, r3, #2
 8002178:	440b      	add	r3, r1
 800217a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800217e:	2200      	movs	r2, #0
 8002180:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002182:	7bfa      	ldrb	r2, [r7, #15]
 8002184:	6879      	ldr	r1, [r7, #4]
 8002186:	4613      	mov	r3, r2
 8002188:	00db      	lsls	r3, r3, #3
 800218a:	4413      	add	r3, r2
 800218c:	009b      	lsls	r3, r3, #2
 800218e:	440b      	add	r3, r1
 8002190:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002194:	7bfa      	ldrb	r2, [r7, #15]
 8002196:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002198:	7bfa      	ldrb	r2, [r7, #15]
 800219a:	6879      	ldr	r1, [r7, #4]
 800219c:	4613      	mov	r3, r2
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4413      	add	r3, r2
 80021a2:	009b      	lsls	r3, r3, #2
 80021a4:	440b      	add	r3, r1
 80021a6:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80021aa:	2200      	movs	r2, #0
 80021ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80021ae:	7bfa      	ldrb	r2, [r7, #15]
 80021b0:	6879      	ldr	r1, [r7, #4]
 80021b2:	4613      	mov	r3, r2
 80021b4:	00db      	lsls	r3, r3, #3
 80021b6:	4413      	add	r3, r2
 80021b8:	009b      	lsls	r3, r3, #2
 80021ba:	440b      	add	r3, r1
 80021bc:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80021c0:	2200      	movs	r2, #0
 80021c2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80021c4:	7bfa      	ldrb	r2, [r7, #15]
 80021c6:	6879      	ldr	r1, [r7, #4]
 80021c8:	4613      	mov	r3, r2
 80021ca:	00db      	lsls	r3, r3, #3
 80021cc:	4413      	add	r3, r2
 80021ce:	009b      	lsls	r3, r3, #2
 80021d0:	440b      	add	r3, r1
 80021d2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80021d6:	2200      	movs	r2, #0
 80021d8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80021da:	7bfa      	ldrb	r2, [r7, #15]
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	4613      	mov	r3, r2
 80021e0:	00db      	lsls	r3, r3, #3
 80021e2:	4413      	add	r3, r2
 80021e4:	009b      	lsls	r3, r3, #2
 80021e6:	440b      	add	r3, r1
 80021e8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80021ec:	2200      	movs	r2, #0
 80021ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80021f0:	7bfb      	ldrb	r3, [r7, #15]
 80021f2:	3301      	adds	r3, #1
 80021f4:	73fb      	strb	r3, [r7, #15]
 80021f6:	7bfa      	ldrb	r2, [r7, #15]
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d3b5      	bcc.n	800216c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	603b      	str	r3, [r7, #0]
 8002206:	687e      	ldr	r6, [r7, #4]
 8002208:	466d      	mov	r5, sp
 800220a:	f106 0410 	add.w	r4, r6, #16
 800220e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002210:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002212:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002214:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002216:	e894 0003 	ldmia.w	r4, {r0, r1}
 800221a:	e885 0003 	stmia.w	r5, {r0, r1}
 800221e:	1d33      	adds	r3, r6, #4
 8002220:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002222:	6838      	ldr	r0, [r7, #0]
 8002224:	f001 ff06 	bl	8004034 <USB_DevInit>
 8002228:	4603      	mov	r3, r0
 800222a:	2b00      	cmp	r3, #0
 800222c:	d005      	beq.n	800223a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	2202      	movs	r2, #2
 8002232:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002236:	2301      	movs	r3, #1
 8002238:	e00d      	b.n	8002256 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2200      	movs	r2, #0
 800223e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2201      	movs	r2, #1
 8002246:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4618      	mov	r0, r3
 8002250:	f003 f855 	bl	80052fe <USB_DevDisconnect>

  return HAL_OK;
 8002254:	2300      	movs	r3, #0
}
 8002256:	4618      	mov	r0, r3
 8002258:	3714      	adds	r7, #20
 800225a:	46bd      	mov	sp, r7
 800225c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800225e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800225e:	b580      	push	{r7, lr}
 8002260:	b084      	sub	sp, #16
 8002262:	af00      	add	r7, sp, #0
 8002264:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002272:	2b01      	cmp	r3, #1
 8002274:	d101      	bne.n	800227a <HAL_PCD_Start+0x1c>
 8002276:	2302      	movs	r3, #2
 8002278:	e020      	b.n	80022bc <HAL_PCD_Start+0x5e>
 800227a:	687b      	ldr	r3, [r7, #4]
 800227c:	2201      	movs	r2, #1
 800227e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002282:	687b      	ldr	r3, [r7, #4]
 8002284:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002286:	2b01      	cmp	r3, #1
 8002288:	d109      	bne.n	800229e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800228e:	2b01      	cmp	r3, #1
 8002290:	d005      	beq.n	800229e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002296:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	4618      	mov	r0, r3
 80022a4:	f001 fe58 	bl	8003f58 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	4618      	mov	r0, r3
 80022ae:	f003 f805 	bl	80052bc <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	2200      	movs	r2, #0
 80022b6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80022ba:	2300      	movs	r3, #0
}
 80022bc:	4618      	mov	r0, r3
 80022be:	3710      	adds	r7, #16
 80022c0:	46bd      	mov	sp, r7
 80022c2:	bd80      	pop	{r7, pc}

080022c4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80022c4:	b590      	push	{r4, r7, lr}
 80022c6:	b08d      	sub	sp, #52	; 0x34
 80022c8:	af00      	add	r7, sp, #0
 80022ca:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80022d2:	6a3b      	ldr	r3, [r7, #32]
 80022d4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 f8c3 	bl	8005466 <USB_GetMode>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	f040 848a 	bne.w	8002bfc <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4618      	mov	r0, r3
 80022ee:	f003 f827 	bl	8005340 <USB_ReadInterrupts>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	f000 8480 	beq.w	8002bfa <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80022fa:	69fb      	ldr	r3, [r7, #28]
 80022fc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002300:	689b      	ldr	r3, [r3, #8]
 8002302:	0a1b      	lsrs	r3, r3, #8
 8002304:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 800230e:	687b      	ldr	r3, [r7, #4]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	4618      	mov	r0, r3
 8002314:	f003 f814 	bl	8005340 <USB_ReadInterrupts>
 8002318:	4603      	mov	r3, r0
 800231a:	f003 0302 	and.w	r3, r3, #2
 800231e:	2b02      	cmp	r3, #2
 8002320:	d107      	bne.n	8002332 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	695a      	ldr	r2, [r3, #20]
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f002 0202 	and.w	r2, r2, #2
 8002330:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4618      	mov	r0, r3
 8002338:	f003 f802 	bl	8005340 <USB_ReadInterrupts>
 800233c:	4603      	mov	r3, r0
 800233e:	f003 0310 	and.w	r3, r3, #16
 8002342:	2b10      	cmp	r3, #16
 8002344:	d161      	bne.n	800240a <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	699a      	ldr	r2, [r3, #24]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0210 	bic.w	r2, r2, #16
 8002354:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002356:	6a3b      	ldr	r3, [r7, #32]
 8002358:	6a1b      	ldr	r3, [r3, #32]
 800235a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800235c:	69bb      	ldr	r3, [r7, #24]
 800235e:	f003 020f 	and.w	r2, r3, #15
 8002362:	4613      	mov	r3, r2
 8002364:	00db      	lsls	r3, r3, #3
 8002366:	4413      	add	r3, r2
 8002368:	009b      	lsls	r3, r3, #2
 800236a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800236e:	687a      	ldr	r2, [r7, #4]
 8002370:	4413      	add	r3, r2
 8002372:	3304      	adds	r3, #4
 8002374:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	0c5b      	lsrs	r3, r3, #17
 800237a:	f003 030f 	and.w	r3, r3, #15
 800237e:	2b02      	cmp	r3, #2
 8002380:	d124      	bne.n	80023cc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002388:	4013      	ands	r3, r2
 800238a:	2b00      	cmp	r3, #0
 800238c:	d035      	beq.n	80023fa <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800238e:	697b      	ldr	r3, [r7, #20]
 8002390:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002392:	69bb      	ldr	r3, [r7, #24]
 8002394:	091b      	lsrs	r3, r3, #4
 8002396:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002398:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800239c:	b29b      	uxth	r3, r3
 800239e:	461a      	mov	r2, r3
 80023a0:	6a38      	ldr	r0, [r7, #32]
 80023a2:	f002 fe39 	bl	8005018 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023a6:	697b      	ldr	r3, [r7, #20]
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	69bb      	ldr	r3, [r7, #24]
 80023ac:	091b      	lsrs	r3, r3, #4
 80023ae:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023b2:	441a      	add	r2, r3
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023b8:	697b      	ldr	r3, [r7, #20]
 80023ba:	6a1a      	ldr	r2, [r3, #32]
 80023bc:	69bb      	ldr	r3, [r7, #24]
 80023be:	091b      	lsrs	r3, r3, #4
 80023c0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023c4:	441a      	add	r2, r3
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	621a      	str	r2, [r3, #32]
 80023ca:	e016      	b.n	80023fa <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80023cc:	69bb      	ldr	r3, [r7, #24]
 80023ce:	0c5b      	lsrs	r3, r3, #17
 80023d0:	f003 030f 	and.w	r3, r3, #15
 80023d4:	2b06      	cmp	r3, #6
 80023d6:	d110      	bne.n	80023fa <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80023de:	2208      	movs	r2, #8
 80023e0:	4619      	mov	r1, r3
 80023e2:	6a38      	ldr	r0, [r7, #32]
 80023e4:	f002 fe18 	bl	8005018 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80023e8:	697b      	ldr	r3, [r7, #20]
 80023ea:	6a1a      	ldr	r2, [r3, #32]
 80023ec:	69bb      	ldr	r3, [r7, #24]
 80023ee:	091b      	lsrs	r3, r3, #4
 80023f0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80023f4:	441a      	add	r2, r3
 80023f6:	697b      	ldr	r3, [r7, #20]
 80023f8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	699a      	ldr	r2, [r3, #24]
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	f042 0210 	orr.w	r2, r2, #16
 8002408:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	4618      	mov	r0, r3
 8002410:	f002 ff96 	bl	8005340 <USB_ReadInterrupts>
 8002414:	4603      	mov	r3, r0
 8002416:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800241a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800241e:	f040 80a7 	bne.w	8002570 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002422:	2300      	movs	r3, #0
 8002424:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	4618      	mov	r0, r3
 800242c:	f002 ff9b 	bl	8005366 <USB_ReadDevAllOutEpInterrupt>
 8002430:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002432:	e099      	b.n	8002568 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002434:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002436:	f003 0301 	and.w	r3, r3, #1
 800243a:	2b00      	cmp	r3, #0
 800243c:	f000 808e 	beq.w	800255c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002440:	687b      	ldr	r3, [r7, #4]
 8002442:	681b      	ldr	r3, [r3, #0]
 8002444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002446:	b2d2      	uxtb	r2, r2
 8002448:	4611      	mov	r1, r2
 800244a:	4618      	mov	r0, r3
 800244c:	f002 ffbf 	bl	80053ce <USB_ReadDevOutEPInterrupt>
 8002450:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002452:	693b      	ldr	r3, [r7, #16]
 8002454:	f003 0301 	and.w	r3, r3, #1
 8002458:	2b00      	cmp	r3, #0
 800245a:	d00c      	beq.n	8002476 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800245c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	4413      	add	r3, r2
 8002464:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002468:	461a      	mov	r2, r3
 800246a:	2301      	movs	r3, #1
 800246c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800246e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	f000 feab 	bl	80031cc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	f003 0308 	and.w	r3, r3, #8
 800247c:	2b00      	cmp	r3, #0
 800247e:	d00c      	beq.n	800249a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002480:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002482:	015a      	lsls	r2, r3, #5
 8002484:	69fb      	ldr	r3, [r7, #28]
 8002486:	4413      	add	r3, r2
 8002488:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800248c:	461a      	mov	r2, r3
 800248e:	2308      	movs	r3, #8
 8002490:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002492:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002494:	6878      	ldr	r0, [r7, #4]
 8002496:	f000 ff81 	bl	800339c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	f003 0310 	and.w	r3, r3, #16
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d008      	beq.n	80024b6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 80024a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024a6:	015a      	lsls	r2, r3, #5
 80024a8:	69fb      	ldr	r3, [r7, #28]
 80024aa:	4413      	add	r3, r2
 80024ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80024b0:	461a      	mov	r2, r3
 80024b2:	2310      	movs	r3, #16
 80024b4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f003 0302 	and.w	r3, r3, #2
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d030      	beq.n	8002522 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80024c0:	6a3b      	ldr	r3, [r7, #32]
 80024c2:	695b      	ldr	r3, [r3, #20]
 80024c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80024c8:	2b80      	cmp	r3, #128	; 0x80
 80024ca:	d109      	bne.n	80024e0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80024cc:	69fb      	ldr	r3, [r7, #28]
 80024ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80024d2:	685b      	ldr	r3, [r3, #4]
 80024d4:	69fa      	ldr	r2, [r7, #28]
 80024d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80024da:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80024de:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80024e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024e2:	4613      	mov	r3, r2
 80024e4:	00db      	lsls	r3, r3, #3
 80024e6:	4413      	add	r3, r2
 80024e8:	009b      	lsls	r3, r3, #2
 80024ea:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024ee:	687a      	ldr	r2, [r7, #4]
 80024f0:	4413      	add	r3, r2
 80024f2:	3304      	adds	r3, #4
 80024f4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80024f6:	697b      	ldr	r3, [r7, #20]
 80024f8:	78db      	ldrb	r3, [r3, #3]
 80024fa:	2b01      	cmp	r3, #1
 80024fc:	d108      	bne.n	8002510 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80024fe:	697b      	ldr	r3, [r7, #20]
 8002500:	2200      	movs	r2, #0
 8002502:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002506:	b2db      	uxtb	r3, r3
 8002508:	4619      	mov	r1, r3
 800250a:	6878      	ldr	r0, [r7, #4]
 800250c:	f004 ffd0 	bl	80074b0 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002512:	015a      	lsls	r2, r3, #5
 8002514:	69fb      	ldr	r3, [r7, #28]
 8002516:	4413      	add	r3, r2
 8002518:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800251c:	461a      	mov	r2, r3
 800251e:	2302      	movs	r3, #2
 8002520:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002522:	693b      	ldr	r3, [r7, #16]
 8002524:	f003 0320 	and.w	r3, r3, #32
 8002528:	2b00      	cmp	r3, #0
 800252a:	d008      	beq.n	800253e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800252c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252e:	015a      	lsls	r2, r3, #5
 8002530:	69fb      	ldr	r3, [r7, #28]
 8002532:	4413      	add	r3, r2
 8002534:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002538:	461a      	mov	r2, r3
 800253a:	2320      	movs	r3, #32
 800253c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 800253e:	693b      	ldr	r3, [r7, #16]
 8002540:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d009      	beq.n	800255c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002548:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800254a:	015a      	lsls	r2, r3, #5
 800254c:	69fb      	ldr	r3, [r7, #28]
 800254e:	4413      	add	r3, r2
 8002550:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002554:	461a      	mov	r2, r3
 8002556:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800255a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800255c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800255e:	3301      	adds	r3, #1
 8002560:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002564:	085b      	lsrs	r3, r3, #1
 8002566:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800256a:	2b00      	cmp	r3, #0
 800256c:	f47f af62 	bne.w	8002434 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4618      	mov	r0, r3
 8002576:	f002 fee3 	bl	8005340 <USB_ReadInterrupts>
 800257a:	4603      	mov	r3, r0
 800257c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002580:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002584:	f040 80db 	bne.w	800273e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	4618      	mov	r0, r3
 800258e:	f002 ff04 	bl	800539a <USB_ReadDevAllInEpInterrupt>
 8002592:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002594:	2300      	movs	r3, #0
 8002596:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002598:	e0cd      	b.n	8002736 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800259a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800259c:	f003 0301 	and.w	r3, r3, #1
 80025a0:	2b00      	cmp	r3, #0
 80025a2:	f000 80c2 	beq.w	800272a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025ac:	b2d2      	uxtb	r2, r2
 80025ae:	4611      	mov	r1, r2
 80025b0:	4618      	mov	r0, r3
 80025b2:	f002 ff2a 	bl	800540a <USB_ReadDevInEPInterrupt>
 80025b6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	f003 0301 	and.w	r3, r3, #1
 80025be:	2b00      	cmp	r3, #0
 80025c0:	d057      	beq.n	8002672 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	f003 030f 	and.w	r3, r3, #15
 80025c8:	2201      	movs	r2, #1
 80025ca:	fa02 f303 	lsl.w	r3, r2, r3
 80025ce:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80025d0:	69fb      	ldr	r3, [r7, #28]
 80025d2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025d6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	43db      	mvns	r3, r3
 80025dc:	69f9      	ldr	r1, [r7, #28]
 80025de:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80025e2:	4013      	ands	r3, r2
 80025e4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 80025e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e8:	015a      	lsls	r2, r3, #5
 80025ea:	69fb      	ldr	r3, [r7, #28]
 80025ec:	4413      	add	r3, r2
 80025ee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80025f2:	461a      	mov	r2, r3
 80025f4:	2301      	movs	r3, #1
 80025f6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	691b      	ldr	r3, [r3, #16]
 80025fc:	2b01      	cmp	r3, #1
 80025fe:	d132      	bne.n	8002666 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002604:	4613      	mov	r3, r2
 8002606:	00db      	lsls	r3, r3, #3
 8002608:	4413      	add	r3, r2
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	440b      	add	r3, r1
 800260e:	334c      	adds	r3, #76	; 0x4c
 8002610:	6819      	ldr	r1, [r3, #0]
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	4403      	add	r3, r0
 8002620:	3348      	adds	r3, #72	; 0x48
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4419      	add	r1, r3
 8002626:	6878      	ldr	r0, [r7, #4]
 8002628:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	4403      	add	r3, r0
 8002634:	334c      	adds	r3, #76	; 0x4c
 8002636:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800263a:	2b00      	cmp	r3, #0
 800263c:	d113      	bne.n	8002666 <HAL_PCD_IRQHandler+0x3a2>
 800263e:	6879      	ldr	r1, [r7, #4]
 8002640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002642:	4613      	mov	r3, r2
 8002644:	00db      	lsls	r3, r3, #3
 8002646:	4413      	add	r3, r2
 8002648:	009b      	lsls	r3, r3, #2
 800264a:	440b      	add	r3, r1
 800264c:	3354      	adds	r3, #84	; 0x54
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	2b00      	cmp	r3, #0
 8002652:	d108      	bne.n	8002666 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	6818      	ldr	r0, [r3, #0]
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800265e:	461a      	mov	r2, r3
 8002660:	2101      	movs	r1, #1
 8002662:	f002 ff31 	bl	80054c8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	b2db      	uxtb	r3, r3
 800266a:	4619      	mov	r1, r3
 800266c:	6878      	ldr	r0, [r7, #4]
 800266e:	f004 fea4 	bl	80073ba <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002672:	693b      	ldr	r3, [r7, #16]
 8002674:	f003 0308 	and.w	r3, r3, #8
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800267c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800267e:	015a      	lsls	r2, r3, #5
 8002680:	69fb      	ldr	r3, [r7, #28]
 8002682:	4413      	add	r3, r2
 8002684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002688:	461a      	mov	r2, r3
 800268a:	2308      	movs	r3, #8
 800268c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 800268e:	693b      	ldr	r3, [r7, #16]
 8002690:	f003 0310 	and.w	r3, r3, #16
 8002694:	2b00      	cmp	r3, #0
 8002696:	d008      	beq.n	80026aa <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a4:	461a      	mov	r2, r3
 80026a6:	2310      	movs	r3, #16
 80026a8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80026aa:	693b      	ldr	r3, [r7, #16]
 80026ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80026b0:	2b00      	cmp	r3, #0
 80026b2:	d008      	beq.n	80026c6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80026b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b6:	015a      	lsls	r2, r3, #5
 80026b8:	69fb      	ldr	r3, [r7, #28]
 80026ba:	4413      	add	r3, r2
 80026bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026c0:	461a      	mov	r2, r3
 80026c2:	2340      	movs	r3, #64	; 0x40
 80026c4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 80026c6:	693b      	ldr	r3, [r7, #16]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d023      	beq.n	8002718 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 80026d0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80026d2:	6a38      	ldr	r0, [r7, #32]
 80026d4:	f001 fe12 	bl	80042fc <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 80026d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026da:	4613      	mov	r3, r2
 80026dc:	00db      	lsls	r3, r3, #3
 80026de:	4413      	add	r3, r2
 80026e0:	009b      	lsls	r3, r3, #2
 80026e2:	3338      	adds	r3, #56	; 0x38
 80026e4:	687a      	ldr	r2, [r7, #4]
 80026e6:	4413      	add	r3, r2
 80026e8:	3304      	adds	r3, #4
 80026ea:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80026ec:	697b      	ldr	r3, [r7, #20]
 80026ee:	78db      	ldrb	r3, [r3, #3]
 80026f0:	2b01      	cmp	r3, #1
 80026f2:	d108      	bne.n	8002706 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	2200      	movs	r2, #0
 80026f8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80026fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026fc:	b2db      	uxtb	r3, r3
 80026fe:	4619      	mov	r1, r3
 8002700:	6878      	ldr	r0, [r7, #4]
 8002702:	f004 fee7 	bl	80074d4 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002706:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002708:	015a      	lsls	r2, r3, #5
 800270a:	69fb      	ldr	r3, [r7, #28]
 800270c:	4413      	add	r3, r2
 800270e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002712:	461a      	mov	r2, r3
 8002714:	2302      	movs	r3, #2
 8002716:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002718:	693b      	ldr	r3, [r7, #16]
 800271a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800271e:	2b00      	cmp	r3, #0
 8002720:	d003      	beq.n	800272a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002722:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002724:	6878      	ldr	r0, [r7, #4]
 8002726:	f000 fcc3 	bl	80030b0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 800272a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272c:	3301      	adds	r3, #1
 800272e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002730:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002732:	085b      	lsrs	r3, r3, #1
 8002734:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002736:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002738:	2b00      	cmp	r3, #0
 800273a:	f47f af2e 	bne.w	800259a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	681b      	ldr	r3, [r3, #0]
 8002742:	4618      	mov	r0, r3
 8002744:	f002 fdfc 	bl	8005340 <USB_ReadInterrupts>
 8002748:	4603      	mov	r3, r0
 800274a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800274e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002752:	d122      	bne.n	800279a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002754:	69fb      	ldr	r3, [r7, #28]
 8002756:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800275a:	685b      	ldr	r3, [r3, #4]
 800275c:	69fa      	ldr	r2, [r7, #28]
 800275e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002762:	f023 0301 	bic.w	r3, r3, #1
 8002766:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 800276e:	2b01      	cmp	r3, #1
 8002770:	d108      	bne.n	8002784 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	2200      	movs	r2, #0
 8002776:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800277a:	2100      	movs	r1, #0
 800277c:	6878      	ldr	r0, [r7, #4]
 800277e:	f000 feab 	bl	80034d8 <HAL_PCDEx_LPM_Callback>
 8002782:	e002      	b.n	800278a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002784:	6878      	ldr	r0, [r7, #4]
 8002786:	f004 fe85 	bl	8007494 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	695a      	ldr	r2, [r3, #20]
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002798:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f002 fdce 	bl	8005340 <USB_ReadInterrupts>
 80027a4:	4603      	mov	r3, r0
 80027a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80027aa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80027ae:	d112      	bne.n	80027d6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80027b0:	69fb      	ldr	r3, [r7, #28]
 80027b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027b6:	689b      	ldr	r3, [r3, #8]
 80027b8:	f003 0301 	and.w	r3, r3, #1
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d102      	bne.n	80027c6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80027c0:	6878      	ldr	r0, [r7, #4]
 80027c2:	f004 fe41 	bl	8007448 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	695a      	ldr	r2, [r3, #20]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 80027d4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	4618      	mov	r0, r3
 80027dc:	f002 fdb0 	bl	8005340 <USB_ReadInterrupts>
 80027e0:	4603      	mov	r3, r0
 80027e2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ea:	f040 80b7 	bne.w	800295c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80027ee:	69fb      	ldr	r3, [r7, #28]
 80027f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	69fa      	ldr	r2, [r7, #28]
 80027f8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80027fc:	f023 0301 	bic.w	r3, r3, #1
 8002800:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	2110      	movs	r1, #16
 8002808:	4618      	mov	r0, r3
 800280a:	f001 fd77 	bl	80042fc <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800280e:	2300      	movs	r3, #0
 8002810:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002812:	e046      	b.n	80028a2 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002814:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002816:	015a      	lsls	r2, r3, #5
 8002818:	69fb      	ldr	r3, [r7, #28]
 800281a:	4413      	add	r3, r2
 800281c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002820:	461a      	mov	r2, r3
 8002822:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002826:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002828:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800282a:	015a      	lsls	r2, r3, #5
 800282c:	69fb      	ldr	r3, [r7, #28]
 800282e:	4413      	add	r3, r2
 8002830:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002838:	0151      	lsls	r1, r2, #5
 800283a:	69fa      	ldr	r2, [r7, #28]
 800283c:	440a      	add	r2, r1
 800283e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002842:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002846:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800284a:	015a      	lsls	r2, r3, #5
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	4413      	add	r3, r2
 8002850:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002854:	461a      	mov	r2, r3
 8002856:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800285a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800285c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800285e:	015a      	lsls	r2, r3, #5
 8002860:	69fb      	ldr	r3, [r7, #28]
 8002862:	4413      	add	r3, r2
 8002864:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800286c:	0151      	lsls	r1, r2, #5
 800286e:	69fa      	ldr	r2, [r7, #28]
 8002870:	440a      	add	r2, r1
 8002872:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002876:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800287a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800287c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800287e:	015a      	lsls	r2, r3, #5
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	4413      	add	r3, r2
 8002884:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800288c:	0151      	lsls	r1, r2, #5
 800288e:	69fa      	ldr	r2, [r7, #28]
 8002890:	440a      	add	r2, r1
 8002892:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002896:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800289a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800289c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800289e:	3301      	adds	r3, #1
 80028a0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	685b      	ldr	r3, [r3, #4]
 80028a6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d3b3      	bcc.n	8002814 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80028ac:	69fb      	ldr	r3, [r7, #28]
 80028ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028b2:	69db      	ldr	r3, [r3, #28]
 80028b4:	69fa      	ldr	r2, [r7, #28]
 80028b6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ba:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80028be:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d016      	beq.n	80028f6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80028c8:	69fb      	ldr	r3, [r7, #28]
 80028ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80028d2:	69fa      	ldr	r2, [r7, #28]
 80028d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028d8:	f043 030b 	orr.w	r3, r3, #11
 80028dc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80028e8:	69fa      	ldr	r2, [r7, #28]
 80028ea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ee:	f043 030b 	orr.w	r3, r3, #11
 80028f2:	6453      	str	r3, [r2, #68]	; 0x44
 80028f4:	e015      	b.n	8002922 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80028f6:	69fb      	ldr	r3, [r7, #28]
 80028f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028fc:	695b      	ldr	r3, [r3, #20]
 80028fe:	69fa      	ldr	r2, [r7, #28]
 8002900:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002904:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002908:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 800290c:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800290e:	69fb      	ldr	r3, [r7, #28]
 8002910:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002914:	691b      	ldr	r3, [r3, #16]
 8002916:	69fa      	ldr	r2, [r7, #28]
 8002918:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800291c:	f043 030b 	orr.w	r3, r3, #11
 8002920:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002922:	69fb      	ldr	r3, [r7, #28]
 8002924:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	69fa      	ldr	r2, [r7, #28]
 800292c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002930:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002934:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6818      	ldr	r0, [r3, #0]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	691b      	ldr	r3, [r3, #16]
 800293e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002946:	461a      	mov	r2, r3
 8002948:	f002 fdbe 	bl	80054c8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	681b      	ldr	r3, [r3, #0]
 8002950:	695a      	ldr	r2, [r3, #20]
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	681b      	ldr	r3, [r3, #0]
 8002956:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800295a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4618      	mov	r0, r3
 8002962:	f002 fced 	bl	8005340 <USB_ReadInterrupts>
 8002966:	4603      	mov	r3, r0
 8002968:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800296c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002970:	d124      	bne.n	80029bc <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	4618      	mov	r0, r3
 8002978:	f002 fd83 	bl	8005482 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4618      	mov	r0, r3
 8002982:	f001 fd38 	bl	80043f6 <USB_GetDevSpeed>
 8002986:	4603      	mov	r3, r0
 8002988:	461a      	mov	r2, r3
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681c      	ldr	r4, [r3, #0]
 8002992:	f001 f9d1 	bl	8003d38 <HAL_RCC_GetHCLKFreq>
 8002996:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 800299c:	b2db      	uxtb	r3, r3
 800299e:	461a      	mov	r2, r3
 80029a0:	4620      	mov	r0, r4
 80029a2:	f001 fa37 	bl	8003e14 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80029a6:	6878      	ldr	r0, [r7, #4]
 80029a8:	f004 fd2f 	bl	800740a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	695a      	ldr	r2, [r3, #20]
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80029ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4618      	mov	r0, r3
 80029c2:	f002 fcbd 	bl	8005340 <USB_ReadInterrupts>
 80029c6:	4603      	mov	r3, r0
 80029c8:	f003 0308 	and.w	r3, r3, #8
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	d10a      	bne.n	80029e6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80029d0:	6878      	ldr	r0, [r7, #4]
 80029d2:	f004 fd0c 	bl	80073ee <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	695a      	ldr	r2, [r3, #20]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f002 0208 	and.w	r2, r2, #8
 80029e4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	4618      	mov	r0, r3
 80029ec:	f002 fca8 	bl	8005340 <USB_ReadInterrupts>
 80029f0:	4603      	mov	r3, r0
 80029f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029f6:	2b80      	cmp	r3, #128	; 0x80
 80029f8:	d122      	bne.n	8002a40 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80029fa:	6a3b      	ldr	r3, [r7, #32]
 80029fc:	699b      	ldr	r3, [r3, #24]
 80029fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002a02:	6a3b      	ldr	r3, [r7, #32]
 8002a04:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a06:	2301      	movs	r3, #1
 8002a08:	627b      	str	r3, [r7, #36]	; 0x24
 8002a0a:	e014      	b.n	8002a36 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002a0c:	6879      	ldr	r1, [r7, #4]
 8002a0e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a10:	4613      	mov	r3, r2
 8002a12:	00db      	lsls	r3, r3, #3
 8002a14:	4413      	add	r3, r2
 8002a16:	009b      	lsls	r3, r3, #2
 8002a18:	440b      	add	r3, r1
 8002a1a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002a1e:	781b      	ldrb	r3, [r3, #0]
 8002a20:	2b01      	cmp	r3, #1
 8002a22:	d105      	bne.n	8002a30 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a26:	b2db      	uxtb	r3, r3
 8002a28:	4619      	mov	r1, r3
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 fb0f 	bl	800304e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a32:	3301      	adds	r3, #1
 8002a34:	627b      	str	r3, [r7, #36]	; 0x24
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	685b      	ldr	r3, [r3, #4]
 8002a3a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a3c:	429a      	cmp	r2, r3
 8002a3e:	d3e5      	bcc.n	8002a0c <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4618      	mov	r0, r3
 8002a46:	f002 fc7b 	bl	8005340 <USB_ReadInterrupts>
 8002a4a:	4603      	mov	r3, r0
 8002a4c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002a50:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002a54:	d13b      	bne.n	8002ace <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002a56:	2301      	movs	r3, #1
 8002a58:	627b      	str	r3, [r7, #36]	; 0x24
 8002a5a:	e02b      	b.n	8002ab4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002a5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a5e:	015a      	lsls	r2, r3, #5
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	4413      	add	r3, r2
 8002a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a6c:	6879      	ldr	r1, [r7, #4]
 8002a6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	4413      	add	r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	3340      	adds	r3, #64	; 0x40
 8002a7c:	781b      	ldrb	r3, [r3, #0]
 8002a7e:	2b01      	cmp	r3, #1
 8002a80:	d115      	bne.n	8002aae <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002a82:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	da12      	bge.n	8002aae <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002a88:	6879      	ldr	r1, [r7, #4]
 8002a8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a8c:	4613      	mov	r3, r2
 8002a8e:	00db      	lsls	r3, r3, #3
 8002a90:	4413      	add	r3, r2
 8002a92:	009b      	lsls	r3, r3, #2
 8002a94:	440b      	add	r3, r1
 8002a96:	333f      	adds	r3, #63	; 0x3f
 8002a98:	2201      	movs	r2, #1
 8002a9a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002a9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a9e:	b2db      	uxtb	r3, r3
 8002aa0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002aa4:	b2db      	uxtb	r3, r3
 8002aa6:	4619      	mov	r1, r3
 8002aa8:	6878      	ldr	r0, [r7, #4]
 8002aaa:	f000 fad0 	bl	800304e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002aae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab0:	3301      	adds	r3, #1
 8002ab2:	627b      	str	r3, [r7, #36]	; 0x24
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	685b      	ldr	r3, [r3, #4]
 8002ab8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aba:	429a      	cmp	r2, r3
 8002abc:	d3ce      	bcc.n	8002a5c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	695a      	ldr	r2, [r3, #20]
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002acc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	f002 fc34 	bl	8005340 <USB_ReadInterrupts>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ade:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002ae2:	d155      	bne.n	8002b90 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae8:	e045      	b.n	8002b76 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002aea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aec:	015a      	lsls	r2, r3, #5
 8002aee:	69fb      	ldr	r3, [r7, #28]
 8002af0:	4413      	add	r3, r2
 8002af2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002afa:	6879      	ldr	r1, [r7, #4]
 8002afc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afe:	4613      	mov	r3, r2
 8002b00:	00db      	lsls	r3, r3, #3
 8002b02:	4413      	add	r3, r2
 8002b04:	009b      	lsls	r3, r3, #2
 8002b06:	440b      	add	r3, r1
 8002b08:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002b0c:	781b      	ldrb	r3, [r3, #0]
 8002b0e:	2b01      	cmp	r3, #1
 8002b10:	d12e      	bne.n	8002b70 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b12:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	da2b      	bge.n	8002b70 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002b18:	69bb      	ldr	r3, [r7, #24]
 8002b1a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002b24:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d121      	bne.n	8002b70 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002b2c:	6879      	ldr	r1, [r7, #4]
 8002b2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b30:	4613      	mov	r3, r2
 8002b32:	00db      	lsls	r3, r3, #3
 8002b34:	4413      	add	r3, r2
 8002b36:	009b      	lsls	r3, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002b3e:	2201      	movs	r2, #1
 8002b40:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002b42:	6a3b      	ldr	r3, [r7, #32]
 8002b44:	699b      	ldr	r3, [r3, #24]
 8002b46:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002b4a:	6a3b      	ldr	r3, [r7, #32]
 8002b4c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002b4e:	6a3b      	ldr	r3, [r7, #32]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d10a      	bne.n	8002b70 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002b5a:	69fb      	ldr	r3, [r7, #28]
 8002b5c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b60:	685b      	ldr	r3, [r3, #4]
 8002b62:	69fa      	ldr	r2, [r7, #28]
 8002b64:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002b68:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b6c:	6053      	str	r3, [r2, #4]
            break;
 8002b6e:	e007      	b.n	8002b80 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b72:	3301      	adds	r3, #1
 8002b74:	627b      	str	r3, [r7, #36]	; 0x24
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	685b      	ldr	r3, [r3, #4]
 8002b7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b7c:	429a      	cmp	r2, r3
 8002b7e:	d3b4      	bcc.n	8002aea <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	695a      	ldr	r2, [r3, #20]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002b8e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4618      	mov	r0, r3
 8002b96:	f002 fbd3 	bl	8005340 <USB_ReadInterrupts>
 8002b9a:	4603      	mov	r3, r0
 8002b9c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ba4:	d10a      	bne.n	8002bbc <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002ba6:	6878      	ldr	r0, [r7, #4]
 8002ba8:	f004 fca6 	bl	80074f8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	681b      	ldr	r3, [r3, #0]
 8002bb0:	695a      	ldr	r2, [r3, #20]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002bba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4618      	mov	r0, r3
 8002bc2:	f002 fbbd 	bl	8005340 <USB_ReadInterrupts>
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	f003 0304 	and.w	r3, r3, #4
 8002bcc:	2b04      	cmp	r3, #4
 8002bce:	d115      	bne.n	8002bfc <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	f003 0304 	and.w	r3, r3, #4
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d002      	beq.n	8002be8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002be2:	6878      	ldr	r0, [r7, #4]
 8002be4:	f004 fc96 	bl	8007514 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	6859      	ldr	r1, [r3, #4]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	69ba      	ldr	r2, [r7, #24]
 8002bf4:	430a      	orrs	r2, r1
 8002bf6:	605a      	str	r2, [r3, #4]
 8002bf8:	e000      	b.n	8002bfc <HAL_PCD_IRQHandler+0x938>
      return;
 8002bfa:	bf00      	nop
    }
  }
}
 8002bfc:	3734      	adds	r7, #52	; 0x34
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd90      	pop	{r4, r7, pc}

08002c02 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	6078      	str	r0, [r7, #4]
 8002c0a:	460b      	mov	r3, r1
 8002c0c:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002c14:	2b01      	cmp	r3, #1
 8002c16:	d101      	bne.n	8002c1c <HAL_PCD_SetAddress+0x1a>
 8002c18:	2302      	movs	r3, #2
 8002c1a:	e013      	b.n	8002c44 <HAL_PCD_SetAddress+0x42>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2201      	movs	r2, #1
 8002c20:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	78fa      	ldrb	r2, [r7, #3]
 8002c28:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	78fa      	ldrb	r2, [r7, #3]
 8002c32:	4611      	mov	r1, r2
 8002c34:	4618      	mov	r0, r3
 8002c36:	f002 fb1b 	bl	8005270 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002c42:	2300      	movs	r3, #0
}
 8002c44:	4618      	mov	r0, r3
 8002c46:	3708      	adds	r7, #8
 8002c48:	46bd      	mov	sp, r7
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b084      	sub	sp, #16
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
 8002c54:	4608      	mov	r0, r1
 8002c56:	4611      	mov	r1, r2
 8002c58:	461a      	mov	r2, r3
 8002c5a:	4603      	mov	r3, r0
 8002c5c:	70fb      	strb	r3, [r7, #3]
 8002c5e:	460b      	mov	r3, r1
 8002c60:	803b      	strh	r3, [r7, #0]
 8002c62:	4613      	mov	r3, r2
 8002c64:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002c66:	2300      	movs	r3, #0
 8002c68:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002c6a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002c6e:	2b00      	cmp	r3, #0
 8002c70:	da0f      	bge.n	8002c92 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002c72:	78fb      	ldrb	r3, [r7, #3]
 8002c74:	f003 020f 	and.w	r2, r3, #15
 8002c78:	4613      	mov	r3, r2
 8002c7a:	00db      	lsls	r3, r3, #3
 8002c7c:	4413      	add	r3, r2
 8002c7e:	009b      	lsls	r3, r3, #2
 8002c80:	3338      	adds	r3, #56	; 0x38
 8002c82:	687a      	ldr	r2, [r7, #4]
 8002c84:	4413      	add	r3, r2
 8002c86:	3304      	adds	r3, #4
 8002c88:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	2201      	movs	r2, #1
 8002c8e:	705a      	strb	r2, [r3, #1]
 8002c90:	e00f      	b.n	8002cb2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002c92:	78fb      	ldrb	r3, [r7, #3]
 8002c94:	f003 020f 	and.w	r2, r3, #15
 8002c98:	4613      	mov	r3, r2
 8002c9a:	00db      	lsls	r3, r3, #3
 8002c9c:	4413      	add	r3, r2
 8002c9e:	009b      	lsls	r3, r3, #2
 8002ca0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ca4:	687a      	ldr	r2, [r7, #4]
 8002ca6:	4413      	add	r3, r2
 8002ca8:	3304      	adds	r3, #4
 8002caa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002cac:	68fb      	ldr	r3, [r7, #12]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002cb2:	78fb      	ldrb	r3, [r7, #3]
 8002cb4:	f003 030f 	and.w	r3, r3, #15
 8002cb8:	b2da      	uxtb	r2, r3
 8002cba:	68fb      	ldr	r3, [r7, #12]
 8002cbc:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002cbe:	883a      	ldrh	r2, [r7, #0]
 8002cc0:	68fb      	ldr	r3, [r7, #12]
 8002cc2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	78ba      	ldrb	r2, [r7, #2]
 8002cc8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	785b      	ldrb	r3, [r3, #1]
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d004      	beq.n	8002cdc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	781b      	ldrb	r3, [r3, #0]
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002cdc:	78bb      	ldrb	r3, [r7, #2]
 8002cde:	2b02      	cmp	r3, #2
 8002ce0:	d102      	bne.n	8002ce8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cee:	2b01      	cmp	r3, #1
 8002cf0:	d101      	bne.n	8002cf6 <HAL_PCD_EP_Open+0xaa>
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	e00e      	b.n	8002d14 <HAL_PCD_EP_Open+0xc8>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2201      	movs	r2, #1
 8002cfa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	68f9      	ldr	r1, [r7, #12]
 8002d04:	4618      	mov	r0, r3
 8002d06:	f001 fb9b 	bl	8004440 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002d12:	7afb      	ldrb	r3, [r7, #11]
}
 8002d14:	4618      	mov	r0, r3
 8002d16:	3710      	adds	r7, #16
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002d1c:	b580      	push	{r7, lr}
 8002d1e:	b084      	sub	sp, #16
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
 8002d24:	460b      	mov	r3, r1
 8002d26:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d28:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	da0f      	bge.n	8002d50 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d30:	78fb      	ldrb	r3, [r7, #3]
 8002d32:	f003 020f 	and.w	r2, r3, #15
 8002d36:	4613      	mov	r3, r2
 8002d38:	00db      	lsls	r3, r3, #3
 8002d3a:	4413      	add	r3, r2
 8002d3c:	009b      	lsls	r3, r3, #2
 8002d3e:	3338      	adds	r3, #56	; 0x38
 8002d40:	687a      	ldr	r2, [r7, #4]
 8002d42:	4413      	add	r3, r2
 8002d44:	3304      	adds	r3, #4
 8002d46:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	705a      	strb	r2, [r3, #1]
 8002d4e:	e00f      	b.n	8002d70 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d50:	78fb      	ldrb	r3, [r7, #3]
 8002d52:	f003 020f 	and.w	r2, r3, #15
 8002d56:	4613      	mov	r3, r2
 8002d58:	00db      	lsls	r3, r3, #3
 8002d5a:	4413      	add	r3, r2
 8002d5c:	009b      	lsls	r3, r3, #2
 8002d5e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d62:	687a      	ldr	r2, [r7, #4]
 8002d64:	4413      	add	r3, r2
 8002d66:	3304      	adds	r3, #4
 8002d68:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d6a:	68fb      	ldr	r3, [r7, #12]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002d70:	78fb      	ldrb	r3, [r7, #3]
 8002d72:	f003 030f 	and.w	r3, r3, #15
 8002d76:	b2da      	uxtb	r2, r3
 8002d78:	68fb      	ldr	r3, [r7, #12]
 8002d7a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002d82:	2b01      	cmp	r3, #1
 8002d84:	d101      	bne.n	8002d8a <HAL_PCD_EP_Close+0x6e>
 8002d86:	2302      	movs	r3, #2
 8002d88:	e00e      	b.n	8002da8 <HAL_PCD_EP_Close+0x8c>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	2201      	movs	r2, #1
 8002d8e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	68f9      	ldr	r1, [r7, #12]
 8002d98:	4618      	mov	r0, r3
 8002d9a:	f001 fbd9 	bl	8004550 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	2200      	movs	r2, #0
 8002da2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002da6:	2300      	movs	r3, #0
}
 8002da8:	4618      	mov	r0, r3
 8002daa:	3710      	adds	r7, #16
 8002dac:	46bd      	mov	sp, r7
 8002dae:	bd80      	pop	{r7, pc}

08002db0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002db0:	b580      	push	{r7, lr}
 8002db2:	b086      	sub	sp, #24
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	60f8      	str	r0, [r7, #12]
 8002db8:	607a      	str	r2, [r7, #4]
 8002dba:	603b      	str	r3, [r7, #0]
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002dc0:	7afb      	ldrb	r3, [r7, #11]
 8002dc2:	f003 020f 	and.w	r2, r3, #15
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	00db      	lsls	r3, r3, #3
 8002dca:	4413      	add	r3, r2
 8002dcc:	009b      	lsls	r3, r3, #2
 8002dce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002dd2:	68fa      	ldr	r2, [r7, #12]
 8002dd4:	4413      	add	r3, r2
 8002dd6:	3304      	adds	r3, #4
 8002dd8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002dda:	697b      	ldr	r3, [r7, #20]
 8002ddc:	687a      	ldr	r2, [r7, #4]
 8002dde:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002de0:	697b      	ldr	r3, [r7, #20]
 8002de2:	683a      	ldr	r2, [r7, #0]
 8002de4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002de6:	697b      	ldr	r3, [r7, #20]
 8002de8:	2200      	movs	r2, #0
 8002dea:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	2200      	movs	r2, #0
 8002df0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002df2:	7afb      	ldrb	r3, [r7, #11]
 8002df4:	f003 030f 	and.w	r3, r3, #15
 8002df8:	b2da      	uxtb	r2, r3
 8002dfa:	697b      	ldr	r3, [r7, #20]
 8002dfc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002dfe:	68fb      	ldr	r3, [r7, #12]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	2b01      	cmp	r3, #1
 8002e04:	d102      	bne.n	8002e0c <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e06:	687a      	ldr	r2, [r7, #4]
 8002e08:	697b      	ldr	r3, [r7, #20]
 8002e0a:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002e0c:	7afb      	ldrb	r3, [r7, #11]
 8002e0e:	f003 030f 	and.w	r3, r3, #15
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d109      	bne.n	8002e2a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	6818      	ldr	r0, [r3, #0]
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	691b      	ldr	r3, [r3, #16]
 8002e1e:	b2db      	uxtb	r3, r3
 8002e20:	461a      	mov	r2, r3
 8002e22:	6979      	ldr	r1, [r7, #20]
 8002e24:	f001 feb8 	bl	8004b98 <USB_EP0StartXfer>
 8002e28:	e008      	b.n	8002e3c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	6818      	ldr	r0, [r3, #0]
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	691b      	ldr	r3, [r3, #16]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	6979      	ldr	r1, [r7, #20]
 8002e38:	f001 fc66 	bl	8004708 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3718      	adds	r7, #24
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}

08002e46 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e46:	b580      	push	{r7, lr}
 8002e48:	b086      	sub	sp, #24
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	60f8      	str	r0, [r7, #12]
 8002e4e:	607a      	str	r2, [r7, #4]
 8002e50:	603b      	str	r3, [r7, #0]
 8002e52:	460b      	mov	r3, r1
 8002e54:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002e56:	7afb      	ldrb	r3, [r7, #11]
 8002e58:	f003 020f 	and.w	r2, r3, #15
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	00db      	lsls	r3, r3, #3
 8002e60:	4413      	add	r3, r2
 8002e62:	009b      	lsls	r3, r3, #2
 8002e64:	3338      	adds	r3, #56	; 0x38
 8002e66:	68fa      	ldr	r2, [r7, #12]
 8002e68:	4413      	add	r3, r2
 8002e6a:	3304      	adds	r3, #4
 8002e6c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e6e:	697b      	ldr	r3, [r7, #20]
 8002e70:	687a      	ldr	r2, [r7, #4]
 8002e72:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	683a      	ldr	r2, [r7, #0]
 8002e78:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e7a:	697b      	ldr	r3, [r7, #20]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	2201      	movs	r2, #1
 8002e84:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002e86:	7afb      	ldrb	r3, [r7, #11]
 8002e88:	f003 030f 	and.w	r3, r3, #15
 8002e8c:	b2da      	uxtb	r2, r3
 8002e8e:	697b      	ldr	r3, [r7, #20]
 8002e90:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	691b      	ldr	r3, [r3, #16]
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d102      	bne.n	8002ea0 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002e9a:	687a      	ldr	r2, [r7, #4]
 8002e9c:	697b      	ldr	r3, [r7, #20]
 8002e9e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ea0:	7afb      	ldrb	r3, [r7, #11]
 8002ea2:	f003 030f 	and.w	r3, r3, #15
 8002ea6:	2b00      	cmp	r3, #0
 8002ea8:	d109      	bne.n	8002ebe <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	6818      	ldr	r0, [r3, #0]
 8002eae:	68fb      	ldr	r3, [r7, #12]
 8002eb0:	691b      	ldr	r3, [r3, #16]
 8002eb2:	b2db      	uxtb	r3, r3
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	6979      	ldr	r1, [r7, #20]
 8002eb8:	f001 fe6e 	bl	8004b98 <USB_EP0StartXfer>
 8002ebc:	e008      	b.n	8002ed0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ebe:	68fb      	ldr	r3, [r7, #12]
 8002ec0:	6818      	ldr	r0, [r3, #0]
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	691b      	ldr	r3, [r3, #16]
 8002ec6:	b2db      	uxtb	r3, r3
 8002ec8:	461a      	mov	r2, r3
 8002eca:	6979      	ldr	r1, [r7, #20]
 8002ecc:	f001 fc1c 	bl	8004708 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002ed0:	2300      	movs	r3, #0
}
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	3718      	adds	r7, #24
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bd80      	pop	{r7, pc}

08002eda <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002eda:	b580      	push	{r7, lr}
 8002edc:	b084      	sub	sp, #16
 8002ede:	af00      	add	r7, sp, #0
 8002ee0:	6078      	str	r0, [r7, #4]
 8002ee2:	460b      	mov	r3, r1
 8002ee4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002ee6:	78fb      	ldrb	r3, [r7, #3]
 8002ee8:	f003 020f 	and.w	r2, r3, #15
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	429a      	cmp	r2, r3
 8002ef2:	d901      	bls.n	8002ef8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002ef4:	2301      	movs	r3, #1
 8002ef6:	e050      	b.n	8002f9a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002ef8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	da0f      	bge.n	8002f20 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f00:	78fb      	ldrb	r3, [r7, #3]
 8002f02:	f003 020f 	and.w	r2, r3, #15
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	3338      	adds	r3, #56	; 0x38
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4413      	add	r3, r2
 8002f14:	3304      	adds	r3, #4
 8002f16:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002f18:	68fb      	ldr	r3, [r7, #12]
 8002f1a:	2201      	movs	r2, #1
 8002f1c:	705a      	strb	r2, [r3, #1]
 8002f1e:	e00d      	b.n	8002f3c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002f20:	78fa      	ldrb	r2, [r7, #3]
 8002f22:	4613      	mov	r3, r2
 8002f24:	00db      	lsls	r3, r3, #3
 8002f26:	4413      	add	r3, r2
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002f2e:	687a      	ldr	r2, [r7, #4]
 8002f30:	4413      	add	r3, r2
 8002f32:	3304      	adds	r3, #4
 8002f34:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002f36:	68fb      	ldr	r3, [r7, #12]
 8002f38:	2200      	movs	r2, #0
 8002f3a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002f3c:	68fb      	ldr	r3, [r7, #12]
 8002f3e:	2201      	movs	r2, #1
 8002f40:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f42:	78fb      	ldrb	r3, [r7, #3]
 8002f44:	f003 030f 	and.w	r3, r3, #15
 8002f48:	b2da      	uxtb	r2, r3
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002f54:	2b01      	cmp	r3, #1
 8002f56:	d101      	bne.n	8002f5c <HAL_PCD_EP_SetStall+0x82>
 8002f58:	2302      	movs	r3, #2
 8002f5a:	e01e      	b.n	8002f9a <HAL_PCD_EP_SetStall+0xc0>
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2201      	movs	r2, #1
 8002f60:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	68f9      	ldr	r1, [r7, #12]
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f002 f8ac 	bl	80050c8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f70:	78fb      	ldrb	r3, [r7, #3]
 8002f72:	f003 030f 	and.w	r3, r3, #15
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d10a      	bne.n	8002f90 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	691b      	ldr	r3, [r3, #16]
 8002f82:	b2d9      	uxtb	r1, r3
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002f8a:	461a      	mov	r2, r3
 8002f8c:	f002 fa9c 	bl	80054c8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002f98:	2300      	movs	r3, #0
}
 8002f9a:	4618      	mov	r0, r3
 8002f9c:	3710      	adds	r7, #16
 8002f9e:	46bd      	mov	sp, r7
 8002fa0:	bd80      	pop	{r7, pc}

08002fa2 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002fa2:	b580      	push	{r7, lr}
 8002fa4:	b084      	sub	sp, #16
 8002fa6:	af00      	add	r7, sp, #0
 8002fa8:	6078      	str	r0, [r7, #4]
 8002faa:	460b      	mov	r3, r1
 8002fac:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002fae:	78fb      	ldrb	r3, [r7, #3]
 8002fb0:	f003 020f 	and.w	r2, r3, #15
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	429a      	cmp	r2, r3
 8002fba:	d901      	bls.n	8002fc0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002fbc:	2301      	movs	r3, #1
 8002fbe:	e042      	b.n	8003046 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002fc0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	da0f      	bge.n	8002fe8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fc8:	78fb      	ldrb	r3, [r7, #3]
 8002fca:	f003 020f 	and.w	r2, r3, #15
 8002fce:	4613      	mov	r3, r2
 8002fd0:	00db      	lsls	r3, r3, #3
 8002fd2:	4413      	add	r3, r2
 8002fd4:	009b      	lsls	r3, r3, #2
 8002fd6:	3338      	adds	r3, #56	; 0x38
 8002fd8:	687a      	ldr	r2, [r7, #4]
 8002fda:	4413      	add	r3, r2
 8002fdc:	3304      	adds	r3, #4
 8002fde:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	2201      	movs	r2, #1
 8002fe4:	705a      	strb	r2, [r3, #1]
 8002fe6:	e00f      	b.n	8003008 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002fe8:	78fb      	ldrb	r3, [r7, #3]
 8002fea:	f003 020f 	and.w	r2, r3, #15
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ffa:	687a      	ldr	r2, [r7, #4]
 8002ffc:	4413      	add	r3, r2
 8002ffe:	3304      	adds	r3, #4
 8003000:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003002:	68fb      	ldr	r3, [r7, #12]
 8003004:	2200      	movs	r2, #0
 8003006:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	2200      	movs	r2, #0
 800300c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800300e:	78fb      	ldrb	r3, [r7, #3]
 8003010:	f003 030f 	and.w	r3, r3, #15
 8003014:	b2da      	uxtb	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003020:	2b01      	cmp	r3, #1
 8003022:	d101      	bne.n	8003028 <HAL_PCD_EP_ClrStall+0x86>
 8003024:	2302      	movs	r3, #2
 8003026:	e00e      	b.n	8003046 <HAL_PCD_EP_ClrStall+0xa4>
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	2201      	movs	r2, #1
 800302c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	68f9      	ldr	r1, [r7, #12]
 8003036:	4618      	mov	r0, r3
 8003038:	f002 f8b4 	bl	80051a4 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003044:	2300      	movs	r3, #0
}
 8003046:	4618      	mov	r0, r3
 8003048:	3710      	adds	r7, #16
 800304a:	46bd      	mov	sp, r7
 800304c:	bd80      	pop	{r7, pc}

0800304e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800304e:	b580      	push	{r7, lr}
 8003050:	b084      	sub	sp, #16
 8003052:	af00      	add	r7, sp, #0
 8003054:	6078      	str	r0, [r7, #4]
 8003056:	460b      	mov	r3, r1
 8003058:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800305a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800305e:	2b00      	cmp	r3, #0
 8003060:	da0c      	bge.n	800307c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003062:	78fb      	ldrb	r3, [r7, #3]
 8003064:	f003 020f 	and.w	r2, r3, #15
 8003068:	4613      	mov	r3, r2
 800306a:	00db      	lsls	r3, r3, #3
 800306c:	4413      	add	r3, r2
 800306e:	009b      	lsls	r3, r3, #2
 8003070:	3338      	adds	r3, #56	; 0x38
 8003072:	687a      	ldr	r2, [r7, #4]
 8003074:	4413      	add	r3, r2
 8003076:	3304      	adds	r3, #4
 8003078:	60fb      	str	r3, [r7, #12]
 800307a:	e00c      	b.n	8003096 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800307c:	78fb      	ldrb	r3, [r7, #3]
 800307e:	f003 020f 	and.w	r2, r3, #15
 8003082:	4613      	mov	r3, r2
 8003084:	00db      	lsls	r3, r3, #3
 8003086:	4413      	add	r3, r2
 8003088:	009b      	lsls	r3, r3, #2
 800308a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800308e:	687a      	ldr	r2, [r7, #4]
 8003090:	4413      	add	r3, r2
 8003092:	3304      	adds	r3, #4
 8003094:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	68f9      	ldr	r1, [r7, #12]
 800309c:	4618      	mov	r0, r3
 800309e:	f001 fed3 	bl	8004e48 <USB_EPStopXfer>
 80030a2:	4603      	mov	r3, r0
 80030a4:	72fb      	strb	r3, [r7, #11]

  return ret;
 80030a6:	7afb      	ldrb	r3, [r7, #11]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	3710      	adds	r7, #16
 80030ac:	46bd      	mov	sp, r7
 80030ae:	bd80      	pop	{r7, pc}

080030b0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80030b0:	b580      	push	{r7, lr}
 80030b2:	b08a      	sub	sp, #40	; 0x28
 80030b4:	af02      	add	r7, sp, #8
 80030b6:	6078      	str	r0, [r7, #4]
 80030b8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80030c0:	697b      	ldr	r3, [r7, #20]
 80030c2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80030c4:	683a      	ldr	r2, [r7, #0]
 80030c6:	4613      	mov	r3, r2
 80030c8:	00db      	lsls	r3, r3, #3
 80030ca:	4413      	add	r3, r2
 80030cc:	009b      	lsls	r3, r3, #2
 80030ce:	3338      	adds	r3, #56	; 0x38
 80030d0:	687a      	ldr	r2, [r7, #4]
 80030d2:	4413      	add	r3, r2
 80030d4:	3304      	adds	r3, #4
 80030d6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	6a1a      	ldr	r2, [r3, #32]
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	699b      	ldr	r3, [r3, #24]
 80030e0:	429a      	cmp	r2, r3
 80030e2:	d901      	bls.n	80030e8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80030e4:	2301      	movs	r3, #1
 80030e6:	e06c      	b.n	80031c2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	699a      	ldr	r2, [r3, #24]
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	6a1b      	ldr	r3, [r3, #32]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	69fa      	ldr	r2, [r7, #28]
 80030fa:	429a      	cmp	r2, r3
 80030fc:	d902      	bls.n	8003104 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	68db      	ldr	r3, [r3, #12]
 8003102:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003104:	69fb      	ldr	r3, [r7, #28]
 8003106:	3303      	adds	r3, #3
 8003108:	089b      	lsrs	r3, r3, #2
 800310a:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800310c:	e02b      	b.n	8003166 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	699a      	ldr	r2, [r3, #24]
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	6a1b      	ldr	r3, [r3, #32]
 8003116:	1ad3      	subs	r3, r2, r3
 8003118:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	68db      	ldr	r3, [r3, #12]
 800311e:	69fa      	ldr	r2, [r7, #28]
 8003120:	429a      	cmp	r2, r3
 8003122:	d902      	bls.n	800312a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	68db      	ldr	r3, [r3, #12]
 8003128:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800312a:	69fb      	ldr	r3, [r7, #28]
 800312c:	3303      	adds	r3, #3
 800312e:	089b      	lsrs	r3, r3, #2
 8003130:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003132:	68fb      	ldr	r3, [r7, #12]
 8003134:	6919      	ldr	r1, [r3, #16]
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	b2da      	uxtb	r2, r3
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003142:	b2db      	uxtb	r3, r3
 8003144:	9300      	str	r3, [sp, #0]
 8003146:	4603      	mov	r3, r0
 8003148:	6978      	ldr	r0, [r7, #20]
 800314a:	f001 ff27 	bl	8004f9c <USB_WritePacket>

    ep->xfer_buff  += len;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	691a      	ldr	r2, [r3, #16]
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	441a      	add	r2, r3
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	6a1a      	ldr	r2, [r3, #32]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	441a      	add	r2, r3
 8003162:	68fb      	ldr	r3, [r7, #12]
 8003164:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003166:	683b      	ldr	r3, [r7, #0]
 8003168:	015a      	lsls	r2, r3, #5
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	4413      	add	r3, r2
 800316e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003172:	699b      	ldr	r3, [r3, #24]
 8003174:	b29b      	uxth	r3, r3
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	429a      	cmp	r2, r3
 800317a:	d809      	bhi.n	8003190 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6a1a      	ldr	r2, [r3, #32]
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003184:	429a      	cmp	r2, r3
 8003186:	d203      	bcs.n	8003190 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	699b      	ldr	r3, [r3, #24]
 800318c:	2b00      	cmp	r3, #0
 800318e:	d1be      	bne.n	800310e <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	699a      	ldr	r2, [r3, #24]
 8003194:	68fb      	ldr	r3, [r7, #12]
 8003196:	6a1b      	ldr	r3, [r3, #32]
 8003198:	429a      	cmp	r2, r3
 800319a:	d811      	bhi.n	80031c0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	f003 030f 	and.w	r3, r3, #15
 80031a2:	2201      	movs	r2, #1
 80031a4:	fa02 f303 	lsl.w	r3, r2, r3
 80031a8:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80031aa:	693b      	ldr	r3, [r7, #16]
 80031ac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80031b0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	43db      	mvns	r3, r3
 80031b6:	6939      	ldr	r1, [r7, #16]
 80031b8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80031bc:	4013      	ands	r3, r2
 80031be:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80031c0:	2300      	movs	r3, #0
}
 80031c2:	4618      	mov	r0, r3
 80031c4:	3720      	adds	r7, #32
 80031c6:	46bd      	mov	sp, r7
 80031c8:	bd80      	pop	{r7, pc}
	...

080031cc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80031cc:	b580      	push	{r7, lr}
 80031ce:	b088      	sub	sp, #32
 80031d0:	af00      	add	r7, sp, #0
 80031d2:	6078      	str	r0, [r7, #4]
 80031d4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	681b      	ldr	r3, [r3, #0]
 80031da:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80031e0:	69fb      	ldr	r3, [r7, #28]
 80031e2:	333c      	adds	r3, #60	; 0x3c
 80031e4:	3304      	adds	r3, #4
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80031ea:	683b      	ldr	r3, [r7, #0]
 80031ec:	015a      	lsls	r2, r3, #5
 80031ee:	69bb      	ldr	r3, [r7, #24]
 80031f0:	4413      	add	r3, r2
 80031f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80031f6:	689b      	ldr	r3, [r3, #8]
 80031f8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	2b01      	cmp	r3, #1
 8003200:	d17b      	bne.n	80032fa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003202:	693b      	ldr	r3, [r7, #16]
 8003204:	f003 0308 	and.w	r3, r3, #8
 8003208:	2b00      	cmp	r3, #0
 800320a:	d015      	beq.n	8003238 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800320c:	697b      	ldr	r3, [r7, #20]
 800320e:	4a61      	ldr	r2, [pc, #388]	; (8003394 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003210:	4293      	cmp	r3, r2
 8003212:	f240 80b9 	bls.w	8003388 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003216:	693b      	ldr	r3, [r7, #16]
 8003218:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800321c:	2b00      	cmp	r3, #0
 800321e:	f000 80b3 	beq.w	8003388 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	015a      	lsls	r2, r3, #5
 8003226:	69bb      	ldr	r3, [r7, #24]
 8003228:	4413      	add	r3, r2
 800322a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800322e:	461a      	mov	r2, r3
 8003230:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003234:	6093      	str	r3, [r2, #8]
 8003236:	e0a7      	b.n	8003388 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003238:	693b      	ldr	r3, [r7, #16]
 800323a:	f003 0320 	and.w	r3, r3, #32
 800323e:	2b00      	cmp	r3, #0
 8003240:	d009      	beq.n	8003256 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003242:	683b      	ldr	r3, [r7, #0]
 8003244:	015a      	lsls	r2, r3, #5
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	4413      	add	r3, r2
 800324a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800324e:	461a      	mov	r2, r3
 8003250:	2320      	movs	r3, #32
 8003252:	6093      	str	r3, [r2, #8]
 8003254:	e098      	b.n	8003388 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003256:	693b      	ldr	r3, [r7, #16]
 8003258:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800325c:	2b00      	cmp	r3, #0
 800325e:	f040 8093 	bne.w	8003388 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003262:	697b      	ldr	r3, [r7, #20]
 8003264:	4a4b      	ldr	r2, [pc, #300]	; (8003394 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003266:	4293      	cmp	r3, r2
 8003268:	d90f      	bls.n	800328a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003270:	2b00      	cmp	r3, #0
 8003272:	d00a      	beq.n	800328a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003274:	683b      	ldr	r3, [r7, #0]
 8003276:	015a      	lsls	r2, r3, #5
 8003278:	69bb      	ldr	r3, [r7, #24]
 800327a:	4413      	add	r3, r2
 800327c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003280:	461a      	mov	r2, r3
 8003282:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003286:	6093      	str	r3, [r2, #8]
 8003288:	e07e      	b.n	8003388 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800328a:	683a      	ldr	r2, [r7, #0]
 800328c:	4613      	mov	r3, r2
 800328e:	00db      	lsls	r3, r3, #3
 8003290:	4413      	add	r3, r2
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003298:	687a      	ldr	r2, [r7, #4]
 800329a:	4413      	add	r3, r2
 800329c:	3304      	adds	r3, #4
 800329e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	69da      	ldr	r2, [r3, #28]
 80032a4:	683b      	ldr	r3, [r7, #0]
 80032a6:	0159      	lsls	r1, r3, #5
 80032a8:	69bb      	ldr	r3, [r7, #24]
 80032aa:	440b      	add	r3, r1
 80032ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032b0:	691b      	ldr	r3, [r3, #16]
 80032b2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032b6:	1ad2      	subs	r2, r2, r3
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d114      	bne.n	80032ec <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d109      	bne.n	80032de <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	6818      	ldr	r0, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80032d4:	461a      	mov	r2, r3
 80032d6:	2101      	movs	r1, #1
 80032d8:	f002 f8f6 	bl	80054c8 <USB_EP0_OutStart>
 80032dc:	e006      	b.n	80032ec <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	691a      	ldr	r2, [r3, #16]
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	6a1b      	ldr	r3, [r3, #32]
 80032e6:	441a      	add	r2, r3
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80032ec:	683b      	ldr	r3, [r7, #0]
 80032ee:	b2db      	uxtb	r3, r3
 80032f0:	4619      	mov	r1, r3
 80032f2:	6878      	ldr	r0, [r7, #4]
 80032f4:	f004 f846 	bl	8007384 <HAL_PCD_DataOutStageCallback>
 80032f8:	e046      	b.n	8003388 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80032fa:	697b      	ldr	r3, [r7, #20]
 80032fc:	4a26      	ldr	r2, [pc, #152]	; (8003398 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80032fe:	4293      	cmp	r3, r2
 8003300:	d124      	bne.n	800334c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003302:	693b      	ldr	r3, [r7, #16]
 8003304:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003308:	2b00      	cmp	r3, #0
 800330a:	d00a      	beq.n	8003322 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	015a      	lsls	r2, r3, #5
 8003310:	69bb      	ldr	r3, [r7, #24]
 8003312:	4413      	add	r3, r2
 8003314:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003318:	461a      	mov	r2, r3
 800331a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800331e:	6093      	str	r3, [r2, #8]
 8003320:	e032      	b.n	8003388 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	f003 0320 	and.w	r3, r3, #32
 8003328:	2b00      	cmp	r3, #0
 800332a:	d008      	beq.n	800333e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800332c:	683b      	ldr	r3, [r7, #0]
 800332e:	015a      	lsls	r2, r3, #5
 8003330:	69bb      	ldr	r3, [r7, #24]
 8003332:	4413      	add	r3, r2
 8003334:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003338:	461a      	mov	r2, r3
 800333a:	2320      	movs	r3, #32
 800333c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	b2db      	uxtb	r3, r3
 8003342:	4619      	mov	r1, r3
 8003344:	6878      	ldr	r0, [r7, #4]
 8003346:	f004 f81d 	bl	8007384 <HAL_PCD_DataOutStageCallback>
 800334a:	e01d      	b.n	8003388 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	2b00      	cmp	r3, #0
 8003350:	d114      	bne.n	800337c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003352:	6879      	ldr	r1, [r7, #4]
 8003354:	683a      	ldr	r2, [r7, #0]
 8003356:	4613      	mov	r3, r2
 8003358:	00db      	lsls	r3, r3, #3
 800335a:	4413      	add	r3, r2
 800335c:	009b      	lsls	r3, r3, #2
 800335e:	440b      	add	r3, r1
 8003360:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b00      	cmp	r3, #0
 8003368:	d108      	bne.n	800337c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6818      	ldr	r0, [r3, #0]
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003374:	461a      	mov	r2, r3
 8003376:	2100      	movs	r1, #0
 8003378:	f002 f8a6 	bl	80054c8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	b2db      	uxtb	r3, r3
 8003380:	4619      	mov	r1, r3
 8003382:	6878      	ldr	r0, [r7, #4]
 8003384:	f003 fffe 	bl	8007384 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003388:	2300      	movs	r3, #0
}
 800338a:	4618      	mov	r0, r3
 800338c:	3720      	adds	r7, #32
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}
 8003392:	bf00      	nop
 8003394:	4f54300a 	.word	0x4f54300a
 8003398:	4f54310a 	.word	0x4f54310a

0800339c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800339c:	b580      	push	{r7, lr}
 800339e:	b086      	sub	sp, #24
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	6078      	str	r0, [r7, #4]
 80033a4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80033ac:	697b      	ldr	r3, [r7, #20]
 80033ae:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80033b0:	697b      	ldr	r3, [r7, #20]
 80033b2:	333c      	adds	r3, #60	; 0x3c
 80033b4:	3304      	adds	r3, #4
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80033ba:	683b      	ldr	r3, [r7, #0]
 80033bc:	015a      	lsls	r2, r3, #5
 80033be:	693b      	ldr	r3, [r7, #16]
 80033c0:	4413      	add	r3, r2
 80033c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	4a15      	ldr	r2, [pc, #84]	; (8003424 <PCD_EP_OutSetupPacket_int+0x88>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d90e      	bls.n	80033f0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80033d2:	68bb      	ldr	r3, [r7, #8]
 80033d4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d009      	beq.n	80033f0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	693b      	ldr	r3, [r7, #16]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e8:	461a      	mov	r2, r3
 80033ea:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ee:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80033f0:	6878      	ldr	r0, [r7, #4]
 80033f2:	f003 ffb5 	bl	8007360 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	4a0a      	ldr	r2, [pc, #40]	; (8003424 <PCD_EP_OutSetupPacket_int+0x88>)
 80033fa:	4293      	cmp	r3, r2
 80033fc:	d90c      	bls.n	8003418 <PCD_EP_OutSetupPacket_int+0x7c>
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	691b      	ldr	r3, [r3, #16]
 8003402:	2b01      	cmp	r3, #1
 8003404:	d108      	bne.n	8003418 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	6818      	ldr	r0, [r3, #0]
 800340a:	687b      	ldr	r3, [r7, #4]
 800340c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003410:	461a      	mov	r2, r3
 8003412:	2101      	movs	r1, #1
 8003414:	f002 f858 	bl	80054c8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003418:	2300      	movs	r3, #0
}
 800341a:	4618      	mov	r0, r3
 800341c:	3718      	adds	r7, #24
 800341e:	46bd      	mov	sp, r7
 8003420:	bd80      	pop	{r7, pc}
 8003422:	bf00      	nop
 8003424:	4f54300a 	.word	0x4f54300a

08003428 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003428:	b480      	push	{r7}
 800342a:	b085      	sub	sp, #20
 800342c:	af00      	add	r7, sp, #0
 800342e:	6078      	str	r0, [r7, #4]
 8003430:	460b      	mov	r3, r1
 8003432:	70fb      	strb	r3, [r7, #3]
 8003434:	4613      	mov	r3, r2
 8003436:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800343e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003440:	78fb      	ldrb	r3, [r7, #3]
 8003442:	2b00      	cmp	r3, #0
 8003444:	d107      	bne.n	8003456 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003446:	883b      	ldrh	r3, [r7, #0]
 8003448:	0419      	lsls	r1, r3, #16
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	68ba      	ldr	r2, [r7, #8]
 8003450:	430a      	orrs	r2, r1
 8003452:	629a      	str	r2, [r3, #40]	; 0x28
 8003454:	e028      	b.n	80034a8 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800345c:	0c1b      	lsrs	r3, r3, #16
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	4413      	add	r3, r2
 8003462:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003464:	2300      	movs	r3, #0
 8003466:	73fb      	strb	r3, [r7, #15]
 8003468:	e00d      	b.n	8003486 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	681a      	ldr	r2, [r3, #0]
 800346e:	7bfb      	ldrb	r3, [r7, #15]
 8003470:	3340      	adds	r3, #64	; 0x40
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	4413      	add	r3, r2
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	0c1b      	lsrs	r3, r3, #16
 800347a:	68ba      	ldr	r2, [r7, #8]
 800347c:	4413      	add	r3, r2
 800347e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003480:	7bfb      	ldrb	r3, [r7, #15]
 8003482:	3301      	adds	r3, #1
 8003484:	73fb      	strb	r3, [r7, #15]
 8003486:	7bfa      	ldrb	r2, [r7, #15]
 8003488:	78fb      	ldrb	r3, [r7, #3]
 800348a:	3b01      	subs	r3, #1
 800348c:	429a      	cmp	r2, r3
 800348e:	d3ec      	bcc.n	800346a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003490:	883b      	ldrh	r3, [r7, #0]
 8003492:	0418      	lsls	r0, r3, #16
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6819      	ldr	r1, [r3, #0]
 8003498:	78fb      	ldrb	r3, [r7, #3]
 800349a:	3b01      	subs	r3, #1
 800349c:	68ba      	ldr	r2, [r7, #8]
 800349e:	4302      	orrs	r2, r0
 80034a0:	3340      	adds	r3, #64	; 0x40
 80034a2:	009b      	lsls	r3, r3, #2
 80034a4:	440b      	add	r3, r1
 80034a6:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 80034a8:	2300      	movs	r3, #0
}
 80034aa:	4618      	mov	r0, r3
 80034ac:	3714      	adds	r7, #20
 80034ae:	46bd      	mov	sp, r7
 80034b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034b4:	4770      	bx	lr

080034b6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b083      	sub	sp, #12
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	460b      	mov	r3, r1
 80034c0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	887a      	ldrh	r2, [r7, #2]
 80034c8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80034ca:	2300      	movs	r3, #0
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	370c      	adds	r7, #12
 80034d0:	46bd      	mov	sp, r7
 80034d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034d6:	4770      	bx	lr

080034d8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80034d8:	b480      	push	{r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80034e4:	bf00      	nop
 80034e6:	370c      	adds	r7, #12
 80034e8:	46bd      	mov	sp, r7
 80034ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ee:	4770      	bx	lr

080034f0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b086      	sub	sp, #24
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d101      	bne.n	8003502 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80034fe:	2301      	movs	r3, #1
 8003500:	e267      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f003 0301 	and.w	r3, r3, #1
 800350a:	2b00      	cmp	r3, #0
 800350c:	d075      	beq.n	80035fa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800350e:	4b88      	ldr	r3, [pc, #544]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f003 030c 	and.w	r3, r3, #12
 8003516:	2b04      	cmp	r3, #4
 8003518:	d00c      	beq.n	8003534 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800351a:	4b85      	ldr	r3, [pc, #532]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800351c:	689b      	ldr	r3, [r3, #8]
 800351e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003522:	2b08      	cmp	r3, #8
 8003524:	d112      	bne.n	800354c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003526:	4b82      	ldr	r3, [pc, #520]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800352e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003532:	d10b      	bne.n	800354c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003534:	4b7e      	ldr	r3, [pc, #504]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800353c:	2b00      	cmp	r3, #0
 800353e:	d05b      	beq.n	80035f8 <HAL_RCC_OscConfig+0x108>
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d157      	bne.n	80035f8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e242      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	685b      	ldr	r3, [r3, #4]
 8003550:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003554:	d106      	bne.n	8003564 <HAL_RCC_OscConfig+0x74>
 8003556:	4b76      	ldr	r3, [pc, #472]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	4a75      	ldr	r2, [pc, #468]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800355c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003560:	6013      	str	r3, [r2, #0]
 8003562:	e01d      	b.n	80035a0 <HAL_RCC_OscConfig+0xb0>
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800356c:	d10c      	bne.n	8003588 <HAL_RCC_OscConfig+0x98>
 800356e:	4b70      	ldr	r3, [pc, #448]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	4a6f      	ldr	r2, [pc, #444]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003574:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003578:	6013      	str	r3, [r2, #0]
 800357a:	4b6d      	ldr	r3, [pc, #436]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	4a6c      	ldr	r2, [pc, #432]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003580:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003584:	6013      	str	r3, [r2, #0]
 8003586:	e00b      	b.n	80035a0 <HAL_RCC_OscConfig+0xb0>
 8003588:	4b69      	ldr	r3, [pc, #420]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4a68      	ldr	r2, [pc, #416]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800358e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003592:	6013      	str	r3, [r2, #0]
 8003594:	4b66      	ldr	r3, [pc, #408]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003596:	681b      	ldr	r3, [r3, #0]
 8003598:	4a65      	ldr	r2, [pc, #404]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800359a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800359e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	685b      	ldr	r3, [r3, #4]
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d013      	beq.n	80035d0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035a8:	f7fd fe7c 	bl	80012a4 <HAL_GetTick>
 80035ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035ae:	e008      	b.n	80035c2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035b0:	f7fd fe78 	bl	80012a4 <HAL_GetTick>
 80035b4:	4602      	mov	r2, r0
 80035b6:	693b      	ldr	r3, [r7, #16]
 80035b8:	1ad3      	subs	r3, r2, r3
 80035ba:	2b64      	cmp	r3, #100	; 0x64
 80035bc:	d901      	bls.n	80035c2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80035be:	2303      	movs	r3, #3
 80035c0:	e207      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035c2:	4b5b      	ldr	r3, [pc, #364]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0f0      	beq.n	80035b0 <HAL_RCC_OscConfig+0xc0>
 80035ce:	e014      	b.n	80035fa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035d0:	f7fd fe68 	bl	80012a4 <HAL_GetTick>
 80035d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035d6:	e008      	b.n	80035ea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80035d8:	f7fd fe64 	bl	80012a4 <HAL_GetTick>
 80035dc:	4602      	mov	r2, r0
 80035de:	693b      	ldr	r3, [r7, #16]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	2b64      	cmp	r3, #100	; 0x64
 80035e4:	d901      	bls.n	80035ea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80035e6:	2303      	movs	r3, #3
 80035e8:	e1f3      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80035ea:	4b51      	ldr	r3, [pc, #324]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	d1f0      	bne.n	80035d8 <HAL_RCC_OscConfig+0xe8>
 80035f6:	e000      	b.n	80035fa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035f8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	f003 0302 	and.w	r3, r3, #2
 8003602:	2b00      	cmp	r3, #0
 8003604:	d063      	beq.n	80036ce <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003606:	4b4a      	ldr	r3, [pc, #296]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003608:	689b      	ldr	r3, [r3, #8]
 800360a:	f003 030c 	and.w	r3, r3, #12
 800360e:	2b00      	cmp	r3, #0
 8003610:	d00b      	beq.n	800362a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003612:	4b47      	ldr	r3, [pc, #284]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003614:	689b      	ldr	r3, [r3, #8]
 8003616:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800361a:	2b08      	cmp	r3, #8
 800361c:	d11c      	bne.n	8003658 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800361e:	4b44      	ldr	r3, [pc, #272]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d116      	bne.n	8003658 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800362a:	4b41      	ldr	r3, [pc, #260]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 0302 	and.w	r3, r3, #2
 8003632:	2b00      	cmp	r3, #0
 8003634:	d005      	beq.n	8003642 <HAL_RCC_OscConfig+0x152>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	68db      	ldr	r3, [r3, #12]
 800363a:	2b01      	cmp	r3, #1
 800363c:	d001      	beq.n	8003642 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800363e:	2301      	movs	r3, #1
 8003640:	e1c7      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003642:	4b3b      	ldr	r3, [pc, #236]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	691b      	ldr	r3, [r3, #16]
 800364e:	00db      	lsls	r3, r3, #3
 8003650:	4937      	ldr	r1, [pc, #220]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003652:	4313      	orrs	r3, r2
 8003654:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003656:	e03a      	b.n	80036ce <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	68db      	ldr	r3, [r3, #12]
 800365c:	2b00      	cmp	r3, #0
 800365e:	d020      	beq.n	80036a2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003660:	4b34      	ldr	r3, [pc, #208]	; (8003734 <HAL_RCC_OscConfig+0x244>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003666:	f7fd fe1d 	bl	80012a4 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800366e:	f7fd fe19 	bl	80012a4 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e1a8      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003680:	4b2b      	ldr	r3, [pc, #172]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0302 	and.w	r3, r3, #2
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800368c:	4b28      	ldr	r3, [pc, #160]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	00db      	lsls	r3, r3, #3
 800369a:	4925      	ldr	r1, [pc, #148]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 800369c:	4313      	orrs	r3, r2
 800369e:	600b      	str	r3, [r1, #0]
 80036a0:	e015      	b.n	80036ce <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80036a2:	4b24      	ldr	r3, [pc, #144]	; (8003734 <HAL_RCC_OscConfig+0x244>)
 80036a4:	2200      	movs	r2, #0
 80036a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036a8:	f7fd fdfc 	bl	80012a4 <HAL_GetTick>
 80036ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036ae:	e008      	b.n	80036c2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80036b0:	f7fd fdf8 	bl	80012a4 <HAL_GetTick>
 80036b4:	4602      	mov	r2, r0
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	1ad3      	subs	r3, r2, r3
 80036ba:	2b02      	cmp	r3, #2
 80036bc:	d901      	bls.n	80036c2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80036be:	2303      	movs	r3, #3
 80036c0:	e187      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80036c2:	4b1b      	ldr	r3, [pc, #108]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0302 	and.w	r3, r3, #2
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d1f0      	bne.n	80036b0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	f003 0308 	and.w	r3, r3, #8
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d036      	beq.n	8003748 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	695b      	ldr	r3, [r3, #20]
 80036de:	2b00      	cmp	r3, #0
 80036e0:	d016      	beq.n	8003710 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80036e2:	4b15      	ldr	r3, [pc, #84]	; (8003738 <HAL_RCC_OscConfig+0x248>)
 80036e4:	2201      	movs	r2, #1
 80036e6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80036e8:	f7fd fddc 	bl	80012a4 <HAL_GetTick>
 80036ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80036ee:	e008      	b.n	8003702 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80036f0:	f7fd fdd8 	bl	80012a4 <HAL_GetTick>
 80036f4:	4602      	mov	r2, r0
 80036f6:	693b      	ldr	r3, [r7, #16]
 80036f8:	1ad3      	subs	r3, r2, r3
 80036fa:	2b02      	cmp	r3, #2
 80036fc:	d901      	bls.n	8003702 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80036fe:	2303      	movs	r3, #3
 8003700:	e167      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003702:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <HAL_RCC_OscConfig+0x240>)
 8003704:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003706:	f003 0302 	and.w	r3, r3, #2
 800370a:	2b00      	cmp	r3, #0
 800370c:	d0f0      	beq.n	80036f0 <HAL_RCC_OscConfig+0x200>
 800370e:	e01b      	b.n	8003748 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003710:	4b09      	ldr	r3, [pc, #36]	; (8003738 <HAL_RCC_OscConfig+0x248>)
 8003712:	2200      	movs	r2, #0
 8003714:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003716:	f7fd fdc5 	bl	80012a4 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800371c:	e00e      	b.n	800373c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800371e:	f7fd fdc1 	bl	80012a4 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d907      	bls.n	800373c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e150      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
 8003730:	40023800 	.word	0x40023800
 8003734:	42470000 	.word	0x42470000
 8003738:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800373c:	4b88      	ldr	r3, [pc, #544]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800373e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003740:	f003 0302 	and.w	r3, r3, #2
 8003744:	2b00      	cmp	r3, #0
 8003746:	d1ea      	bne.n	800371e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	f003 0304 	and.w	r3, r3, #4
 8003750:	2b00      	cmp	r3, #0
 8003752:	f000 8097 	beq.w	8003884 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003756:	2300      	movs	r3, #0
 8003758:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800375a:	4b81      	ldr	r3, [pc, #516]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800375c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800375e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003762:	2b00      	cmp	r3, #0
 8003764:	d10f      	bne.n	8003786 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003766:	2300      	movs	r3, #0
 8003768:	60bb      	str	r3, [r7, #8]
 800376a:	4b7d      	ldr	r3, [pc, #500]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800376c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800376e:	4a7c      	ldr	r2, [pc, #496]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 8003770:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003774:	6413      	str	r3, [r2, #64]	; 0x40
 8003776:	4b7a      	ldr	r3, [pc, #488]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 8003778:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800377a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800377e:	60bb      	str	r3, [r7, #8]
 8003780:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003782:	2301      	movs	r3, #1
 8003784:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003786:	4b77      	ldr	r3, [pc, #476]	; (8003964 <HAL_RCC_OscConfig+0x474>)
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800378e:	2b00      	cmp	r3, #0
 8003790:	d118      	bne.n	80037c4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003792:	4b74      	ldr	r3, [pc, #464]	; (8003964 <HAL_RCC_OscConfig+0x474>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	4a73      	ldr	r2, [pc, #460]	; (8003964 <HAL_RCC_OscConfig+0x474>)
 8003798:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800379c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800379e:	f7fd fd81 	bl	80012a4 <HAL_GetTick>
 80037a2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037a4:	e008      	b.n	80037b8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80037a6:	f7fd fd7d 	bl	80012a4 <HAL_GetTick>
 80037aa:	4602      	mov	r2, r0
 80037ac:	693b      	ldr	r3, [r7, #16]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	2b02      	cmp	r3, #2
 80037b2:	d901      	bls.n	80037b8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80037b4:	2303      	movs	r3, #3
 80037b6:	e10c      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80037b8:	4b6a      	ldr	r3, [pc, #424]	; (8003964 <HAL_RCC_OscConfig+0x474>)
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80037c0:	2b00      	cmp	r3, #0
 80037c2:	d0f0      	beq.n	80037a6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	689b      	ldr	r3, [r3, #8]
 80037c8:	2b01      	cmp	r3, #1
 80037ca:	d106      	bne.n	80037da <HAL_RCC_OscConfig+0x2ea>
 80037cc:	4b64      	ldr	r3, [pc, #400]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037d0:	4a63      	ldr	r2, [pc, #396]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037d2:	f043 0301 	orr.w	r3, r3, #1
 80037d6:	6713      	str	r3, [r2, #112]	; 0x70
 80037d8:	e01c      	b.n	8003814 <HAL_RCC_OscConfig+0x324>
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	689b      	ldr	r3, [r3, #8]
 80037de:	2b05      	cmp	r3, #5
 80037e0:	d10c      	bne.n	80037fc <HAL_RCC_OscConfig+0x30c>
 80037e2:	4b5f      	ldr	r3, [pc, #380]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037e4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037e6:	4a5e      	ldr	r2, [pc, #376]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037e8:	f043 0304 	orr.w	r3, r3, #4
 80037ec:	6713      	str	r3, [r2, #112]	; 0x70
 80037ee:	4b5c      	ldr	r3, [pc, #368]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037f2:	4a5b      	ldr	r2, [pc, #364]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037f4:	f043 0301 	orr.w	r3, r3, #1
 80037f8:	6713      	str	r3, [r2, #112]	; 0x70
 80037fa:	e00b      	b.n	8003814 <HAL_RCC_OscConfig+0x324>
 80037fc:	4b58      	ldr	r3, [pc, #352]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80037fe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003800:	4a57      	ldr	r2, [pc, #348]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 8003802:	f023 0301 	bic.w	r3, r3, #1
 8003806:	6713      	str	r3, [r2, #112]	; 0x70
 8003808:	4b55      	ldr	r3, [pc, #340]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800380a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800380c:	4a54      	ldr	r2, [pc, #336]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800380e:	f023 0304 	bic.w	r3, r3, #4
 8003812:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	689b      	ldr	r3, [r3, #8]
 8003818:	2b00      	cmp	r3, #0
 800381a:	d015      	beq.n	8003848 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800381c:	f7fd fd42 	bl	80012a4 <HAL_GetTick>
 8003820:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003822:	e00a      	b.n	800383a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003824:	f7fd fd3e 	bl	80012a4 <HAL_GetTick>
 8003828:	4602      	mov	r2, r0
 800382a:	693b      	ldr	r3, [r7, #16]
 800382c:	1ad3      	subs	r3, r2, r3
 800382e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003832:	4293      	cmp	r3, r2
 8003834:	d901      	bls.n	800383a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003836:	2303      	movs	r3, #3
 8003838:	e0cb      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800383a:	4b49      	ldr	r3, [pc, #292]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800383c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800383e:	f003 0302 	and.w	r3, r3, #2
 8003842:	2b00      	cmp	r3, #0
 8003844:	d0ee      	beq.n	8003824 <HAL_RCC_OscConfig+0x334>
 8003846:	e014      	b.n	8003872 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003848:	f7fd fd2c 	bl	80012a4 <HAL_GetTick>
 800384c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800384e:	e00a      	b.n	8003866 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003850:	f7fd fd28 	bl	80012a4 <HAL_GetTick>
 8003854:	4602      	mov	r2, r0
 8003856:	693b      	ldr	r3, [r7, #16]
 8003858:	1ad3      	subs	r3, r2, r3
 800385a:	f241 3288 	movw	r2, #5000	; 0x1388
 800385e:	4293      	cmp	r3, r2
 8003860:	d901      	bls.n	8003866 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e0b5      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003866:	4b3e      	ldr	r3, [pc, #248]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 8003868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800386a:	f003 0302 	and.w	r3, r3, #2
 800386e:	2b00      	cmp	r3, #0
 8003870:	d1ee      	bne.n	8003850 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003872:	7dfb      	ldrb	r3, [r7, #23]
 8003874:	2b01      	cmp	r3, #1
 8003876:	d105      	bne.n	8003884 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003878:	4b39      	ldr	r3, [pc, #228]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	4a38      	ldr	r2, [pc, #224]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800387e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003882:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	2b00      	cmp	r3, #0
 800388a:	f000 80a1 	beq.w	80039d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800388e:	4b34      	ldr	r3, [pc, #208]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 8003890:	689b      	ldr	r3, [r3, #8]
 8003892:	f003 030c 	and.w	r3, r3, #12
 8003896:	2b08      	cmp	r3, #8
 8003898:	d05c      	beq.n	8003954 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	699b      	ldr	r3, [r3, #24]
 800389e:	2b02      	cmp	r3, #2
 80038a0:	d141      	bne.n	8003926 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038a2:	4b31      	ldr	r3, [pc, #196]	; (8003968 <HAL_RCC_OscConfig+0x478>)
 80038a4:	2200      	movs	r2, #0
 80038a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038a8:	f7fd fcfc 	bl	80012a4 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fd fcf8 	bl	80012a4 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e087      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80038c2:	4b27      	ldr	r3, [pc, #156]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d1f0      	bne.n	80038b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69da      	ldr	r2, [r3, #28]
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6a1b      	ldr	r3, [r3, #32]
 80038d6:	431a      	orrs	r2, r3
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80038dc:	019b      	lsls	r3, r3, #6
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80038e4:	085b      	lsrs	r3, r3, #1
 80038e6:	3b01      	subs	r3, #1
 80038e8:	041b      	lsls	r3, r3, #16
 80038ea:	431a      	orrs	r2, r3
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038f0:	061b      	lsls	r3, r3, #24
 80038f2:	491b      	ldr	r1, [pc, #108]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 80038f4:	4313      	orrs	r3, r2
 80038f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038f8:	4b1b      	ldr	r3, [pc, #108]	; (8003968 <HAL_RCC_OscConfig+0x478>)
 80038fa:	2201      	movs	r2, #1
 80038fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80038fe:	f7fd fcd1 	bl	80012a4 <HAL_GetTick>
 8003902:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003904:	e008      	b.n	8003918 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003906:	f7fd fccd 	bl	80012a4 <HAL_GetTick>
 800390a:	4602      	mov	r2, r0
 800390c:	693b      	ldr	r3, [r7, #16]
 800390e:	1ad3      	subs	r3, r2, r3
 8003910:	2b02      	cmp	r3, #2
 8003912:	d901      	bls.n	8003918 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003914:	2303      	movs	r3, #3
 8003916:	e05c      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003918:	4b11      	ldr	r3, [pc, #68]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003920:	2b00      	cmp	r3, #0
 8003922:	d0f0      	beq.n	8003906 <HAL_RCC_OscConfig+0x416>
 8003924:	e054      	b.n	80039d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003926:	4b10      	ldr	r3, [pc, #64]	; (8003968 <HAL_RCC_OscConfig+0x478>)
 8003928:	2200      	movs	r2, #0
 800392a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800392c:	f7fd fcba 	bl	80012a4 <HAL_GetTick>
 8003930:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003932:	e008      	b.n	8003946 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003934:	f7fd fcb6 	bl	80012a4 <HAL_GetTick>
 8003938:	4602      	mov	r2, r0
 800393a:	693b      	ldr	r3, [r7, #16]
 800393c:	1ad3      	subs	r3, r2, r3
 800393e:	2b02      	cmp	r3, #2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e045      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003946:	4b06      	ldr	r3, [pc, #24]	; (8003960 <HAL_RCC_OscConfig+0x470>)
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1f0      	bne.n	8003934 <HAL_RCC_OscConfig+0x444>
 8003952:	e03d      	b.n	80039d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	699b      	ldr	r3, [r3, #24]
 8003958:	2b01      	cmp	r3, #1
 800395a:	d107      	bne.n	800396c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800395c:	2301      	movs	r3, #1
 800395e:	e038      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
 8003960:	40023800 	.word	0x40023800
 8003964:	40007000 	.word	0x40007000
 8003968:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800396c:	4b1b      	ldr	r3, [pc, #108]	; (80039dc <HAL_RCC_OscConfig+0x4ec>)
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	699b      	ldr	r3, [r3, #24]
 8003976:	2b01      	cmp	r3, #1
 8003978:	d028      	beq.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003984:	429a      	cmp	r2, r3
 8003986:	d121      	bne.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	429a      	cmp	r2, r3
 8003994:	d11a      	bne.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003996:	68fa      	ldr	r2, [r7, #12]
 8003998:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800399c:	4013      	ands	r3, r2
 800399e:	687a      	ldr	r2, [r7, #4]
 80039a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80039a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80039a4:	4293      	cmp	r3, r2
 80039a6:	d111      	bne.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039b2:	085b      	lsrs	r3, r3, #1
 80039b4:	3b01      	subs	r3, #1
 80039b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80039b8:	429a      	cmp	r2, r3
 80039ba:	d107      	bne.n	80039cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80039c8:	429a      	cmp	r2, r3
 80039ca:	d001      	beq.n	80039d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80039cc:	2301      	movs	r3, #1
 80039ce:	e000      	b.n	80039d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3718      	adds	r7, #24
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40023800 	.word	0x40023800

080039e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b084      	sub	sp, #16
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
 80039e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	d101      	bne.n	80039f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80039f0:	2301      	movs	r3, #1
 80039f2:	e0cc      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80039f4:	4b68      	ldr	r3, [pc, #416]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	f003 0307 	and.w	r3, r3, #7
 80039fc:	683a      	ldr	r2, [r7, #0]
 80039fe:	429a      	cmp	r2, r3
 8003a00:	d90c      	bls.n	8003a1c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a02:	4b65      	ldr	r3, [pc, #404]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a04:	683a      	ldr	r2, [r7, #0]
 8003a06:	b2d2      	uxtb	r2, r2
 8003a08:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a0a:	4b63      	ldr	r3, [pc, #396]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	f003 0307 	and.w	r3, r3, #7
 8003a12:	683a      	ldr	r2, [r7, #0]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d001      	beq.n	8003a1c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0b8      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f003 0302 	and.w	r3, r3, #2
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d020      	beq.n	8003a6a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	f003 0304 	and.w	r3, r3, #4
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d005      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003a34:	4b59      	ldr	r3, [pc, #356]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a36:	689b      	ldr	r3, [r3, #8]
 8003a38:	4a58      	ldr	r2, [pc, #352]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a3a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003a3e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0308 	and.w	r3, r3, #8
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003a4c:	4b53      	ldr	r3, [pc, #332]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a4e:	689b      	ldr	r3, [r3, #8]
 8003a50:	4a52      	ldr	r2, [pc, #328]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003a56:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003a58:	4b50      	ldr	r3, [pc, #320]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	494d      	ldr	r1, [pc, #308]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a66:	4313      	orrs	r3, r2
 8003a68:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f003 0301 	and.w	r3, r3, #1
 8003a72:	2b00      	cmp	r3, #0
 8003a74:	d044      	beq.n	8003b00 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	685b      	ldr	r3, [r3, #4]
 8003a7a:	2b01      	cmp	r3, #1
 8003a7c:	d107      	bne.n	8003a8e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a7e:	4b47      	ldr	r3, [pc, #284]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d119      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	e07f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	2b02      	cmp	r3, #2
 8003a94:	d003      	beq.n	8003a9e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003a9a:	2b03      	cmp	r3, #3
 8003a9c:	d107      	bne.n	8003aae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003a9e:	4b3f      	ldr	r3, [pc, #252]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d109      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aaa:	2301      	movs	r3, #1
 8003aac:	e06f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003aae:	4b3b      	ldr	r3, [pc, #236]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	f003 0302 	and.w	r3, r3, #2
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d101      	bne.n	8003abe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e067      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003abe:	4b37      	ldr	r3, [pc, #220]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	f023 0203 	bic.w	r2, r3, #3
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	685b      	ldr	r3, [r3, #4]
 8003aca:	4934      	ldr	r1, [pc, #208]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003acc:	4313      	orrs	r3, r2
 8003ace:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003ad0:	f7fd fbe8 	bl	80012a4 <HAL_GetTick>
 8003ad4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ad6:	e00a      	b.n	8003aee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ad8:	f7fd fbe4 	bl	80012a4 <HAL_GetTick>
 8003adc:	4602      	mov	r2, r0
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	1ad3      	subs	r3, r2, r3
 8003ae2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ae6:	4293      	cmp	r3, r2
 8003ae8:	d901      	bls.n	8003aee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003aea:	2303      	movs	r3, #3
 8003aec:	e04f      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003aee:	4b2b      	ldr	r3, [pc, #172]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003af0:	689b      	ldr	r3, [r3, #8]
 8003af2:	f003 020c 	and.w	r2, r3, #12
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	685b      	ldr	r3, [r3, #4]
 8003afa:	009b      	lsls	r3, r3, #2
 8003afc:	429a      	cmp	r2, r3
 8003afe:	d1eb      	bne.n	8003ad8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003b00:	4b25      	ldr	r3, [pc, #148]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f003 0307 	and.w	r3, r3, #7
 8003b08:	683a      	ldr	r2, [r7, #0]
 8003b0a:	429a      	cmp	r2, r3
 8003b0c:	d20c      	bcs.n	8003b28 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b0e:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b10:	683a      	ldr	r2, [r7, #0]
 8003b12:	b2d2      	uxtb	r2, r2
 8003b14:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b16:	4b20      	ldr	r3, [pc, #128]	; (8003b98 <HAL_RCC_ClockConfig+0x1b8>)
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0307 	and.w	r3, r3, #7
 8003b1e:	683a      	ldr	r2, [r7, #0]
 8003b20:	429a      	cmp	r2, r3
 8003b22:	d001      	beq.n	8003b28 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003b24:	2301      	movs	r3, #1
 8003b26:	e032      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	f003 0304 	and.w	r3, r3, #4
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d008      	beq.n	8003b46 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003b34:	4b19      	ldr	r3, [pc, #100]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	4916      	ldr	r1, [pc, #88]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d009      	beq.n	8003b66 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003b52:	4b12      	ldr	r3, [pc, #72]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b54:	689b      	ldr	r3, [r3, #8]
 8003b56:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	691b      	ldr	r3, [r3, #16]
 8003b5e:	00db      	lsls	r3, r3, #3
 8003b60:	490e      	ldr	r1, [pc, #56]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b62:	4313      	orrs	r3, r2
 8003b64:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003b66:	f000 f821 	bl	8003bac <HAL_RCC_GetSysClockFreq>
 8003b6a:	4602      	mov	r2, r0
 8003b6c:	4b0b      	ldr	r3, [pc, #44]	; (8003b9c <HAL_RCC_ClockConfig+0x1bc>)
 8003b6e:	689b      	ldr	r3, [r3, #8]
 8003b70:	091b      	lsrs	r3, r3, #4
 8003b72:	f003 030f 	and.w	r3, r3, #15
 8003b76:	490a      	ldr	r1, [pc, #40]	; (8003ba0 <HAL_RCC_ClockConfig+0x1c0>)
 8003b78:	5ccb      	ldrb	r3, [r1, r3]
 8003b7a:	fa22 f303 	lsr.w	r3, r2, r3
 8003b7e:	4a09      	ldr	r2, [pc, #36]	; (8003ba4 <HAL_RCC_ClockConfig+0x1c4>)
 8003b80:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003b82:	4b09      	ldr	r3, [pc, #36]	; (8003ba8 <HAL_RCC_ClockConfig+0x1c8>)
 8003b84:	681b      	ldr	r3, [r3, #0]
 8003b86:	4618      	mov	r0, r3
 8003b88:	f7fd fb48 	bl	800121c <HAL_InitTick>

  return HAL_OK;
 8003b8c:	2300      	movs	r3, #0
}
 8003b8e:	4618      	mov	r0, r3
 8003b90:	3710      	adds	r7, #16
 8003b92:	46bd      	mov	sp, r7
 8003b94:	bd80      	pop	{r7, pc}
 8003b96:	bf00      	nop
 8003b98:	40023c00 	.word	0x40023c00
 8003b9c:	40023800 	.word	0x40023800
 8003ba0:	08007970 	.word	0x08007970
 8003ba4:	200003d4 	.word	0x200003d4
 8003ba8:	200003d8 	.word	0x200003d8

08003bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003bac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003bb0:	b090      	sub	sp, #64	; 0x40
 8003bb2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003bb4:	2300      	movs	r3, #0
 8003bb6:	637b      	str	r3, [r7, #52]	; 0x34
 8003bb8:	2300      	movs	r3, #0
 8003bba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003bc4:	4b59      	ldr	r3, [pc, #356]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bc6:	689b      	ldr	r3, [r3, #8]
 8003bc8:	f003 030c 	and.w	r3, r3, #12
 8003bcc:	2b08      	cmp	r3, #8
 8003bce:	d00d      	beq.n	8003bec <HAL_RCC_GetSysClockFreq+0x40>
 8003bd0:	2b08      	cmp	r3, #8
 8003bd2:	f200 80a1 	bhi.w	8003d18 <HAL_RCC_GetSysClockFreq+0x16c>
 8003bd6:	2b00      	cmp	r3, #0
 8003bd8:	d002      	beq.n	8003be0 <HAL_RCC_GetSysClockFreq+0x34>
 8003bda:	2b04      	cmp	r3, #4
 8003bdc:	d003      	beq.n	8003be6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003bde:	e09b      	b.n	8003d18 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003be0:	4b53      	ldr	r3, [pc, #332]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x184>)
 8003be2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003be4:	e09b      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003be6:	4b53      	ldr	r3, [pc, #332]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003be8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003bea:	e098      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003bec:	4b4f      	ldr	r3, [pc, #316]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bee:	685b      	ldr	r3, [r3, #4]
 8003bf0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003bf4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003bf6:	4b4d      	ldr	r3, [pc, #308]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003bf8:	685b      	ldr	r3, [r3, #4]
 8003bfa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d028      	beq.n	8003c54 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c02:	4b4a      	ldr	r3, [pc, #296]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c04:	685b      	ldr	r3, [r3, #4]
 8003c06:	099b      	lsrs	r3, r3, #6
 8003c08:	2200      	movs	r2, #0
 8003c0a:	623b      	str	r3, [r7, #32]
 8003c0c:	627a      	str	r2, [r7, #36]	; 0x24
 8003c0e:	6a3b      	ldr	r3, [r7, #32]
 8003c10:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003c14:	2100      	movs	r1, #0
 8003c16:	4b47      	ldr	r3, [pc, #284]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c18:	fb03 f201 	mul.w	r2, r3, r1
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	fb00 f303 	mul.w	r3, r0, r3
 8003c22:	4413      	add	r3, r2
 8003c24:	4a43      	ldr	r2, [pc, #268]	; (8003d34 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c26:	fba0 1202 	umull	r1, r2, r0, r2
 8003c2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003c2c:	460a      	mov	r2, r1
 8003c2e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003c32:	4413      	add	r3, r2
 8003c34:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003c38:	2200      	movs	r2, #0
 8003c3a:	61bb      	str	r3, [r7, #24]
 8003c3c:	61fa      	str	r2, [r7, #28]
 8003c3e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c42:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003c46:	f7fc fac5 	bl	80001d4 <__aeabi_uldivmod>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4613      	mov	r3, r2
 8003c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c52:	e053      	b.n	8003cfc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c54:	4b35      	ldr	r3, [pc, #212]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003c56:	685b      	ldr	r3, [r3, #4]
 8003c58:	099b      	lsrs	r3, r3, #6
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	613b      	str	r3, [r7, #16]
 8003c5e:	617a      	str	r2, [r7, #20]
 8003c60:	693b      	ldr	r3, [r7, #16]
 8003c62:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003c66:	f04f 0b00 	mov.w	fp, #0
 8003c6a:	4652      	mov	r2, sl
 8003c6c:	465b      	mov	r3, fp
 8003c6e:	f04f 0000 	mov.w	r0, #0
 8003c72:	f04f 0100 	mov.w	r1, #0
 8003c76:	0159      	lsls	r1, r3, #5
 8003c78:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c7c:	0150      	lsls	r0, r2, #5
 8003c7e:	4602      	mov	r2, r0
 8003c80:	460b      	mov	r3, r1
 8003c82:	ebb2 080a 	subs.w	r8, r2, sl
 8003c86:	eb63 090b 	sbc.w	r9, r3, fp
 8003c8a:	f04f 0200 	mov.w	r2, #0
 8003c8e:	f04f 0300 	mov.w	r3, #0
 8003c92:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003c96:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003c9a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003c9e:	ebb2 0408 	subs.w	r4, r2, r8
 8003ca2:	eb63 0509 	sbc.w	r5, r3, r9
 8003ca6:	f04f 0200 	mov.w	r2, #0
 8003caa:	f04f 0300 	mov.w	r3, #0
 8003cae:	00eb      	lsls	r3, r5, #3
 8003cb0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003cb4:	00e2      	lsls	r2, r4, #3
 8003cb6:	4614      	mov	r4, r2
 8003cb8:	461d      	mov	r5, r3
 8003cba:	eb14 030a 	adds.w	r3, r4, sl
 8003cbe:	603b      	str	r3, [r7, #0]
 8003cc0:	eb45 030b 	adc.w	r3, r5, fp
 8003cc4:	607b      	str	r3, [r7, #4]
 8003cc6:	f04f 0200 	mov.w	r2, #0
 8003cca:	f04f 0300 	mov.w	r3, #0
 8003cce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	028b      	lsls	r3, r1, #10
 8003cd6:	4621      	mov	r1, r4
 8003cd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003cdc:	4621      	mov	r1, r4
 8003cde:	028a      	lsls	r2, r1, #10
 8003ce0:	4610      	mov	r0, r2
 8003ce2:	4619      	mov	r1, r3
 8003ce4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	60bb      	str	r3, [r7, #8]
 8003cea:	60fa      	str	r2, [r7, #12]
 8003cec:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003cf0:	f7fc fa70 	bl	80001d4 <__aeabi_uldivmod>
 8003cf4:	4602      	mov	r2, r0
 8003cf6:	460b      	mov	r3, r1
 8003cf8:	4613      	mov	r3, r2
 8003cfa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003cfc:	4b0b      	ldr	r3, [pc, #44]	; (8003d2c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cfe:	685b      	ldr	r3, [r3, #4]
 8003d00:	0c1b      	lsrs	r3, r3, #16
 8003d02:	f003 0303 	and.w	r3, r3, #3
 8003d06:	3301      	adds	r3, #1
 8003d08:	005b      	lsls	r3, r3, #1
 8003d0a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003d0c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003d0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003d14:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d16:	e002      	b.n	8003d1e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003d18:	4b05      	ldr	r3, [pc, #20]	; (8003d30 <HAL_RCC_GetSysClockFreq+0x184>)
 8003d1a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003d1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003d20:	4618      	mov	r0, r3
 8003d22:	3740      	adds	r7, #64	; 0x40
 8003d24:	46bd      	mov	sp, r7
 8003d26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003d2a:	bf00      	nop
 8003d2c:	40023800 	.word	0x40023800
 8003d30:	00f42400 	.word	0x00f42400
 8003d34:	017d7840 	.word	0x017d7840

08003d38 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003d38:	b480      	push	{r7}
 8003d3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003d3c:	4b03      	ldr	r3, [pc, #12]	; (8003d4c <HAL_RCC_GetHCLKFreq+0x14>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
}
 8003d40:	4618      	mov	r0, r3
 8003d42:	46bd      	mov	sp, r7
 8003d44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d48:	4770      	bx	lr
 8003d4a:	bf00      	nop
 8003d4c:	200003d4 	.word	0x200003d4

08003d50 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003d50:	b084      	sub	sp, #16
 8003d52:	b580      	push	{r7, lr}
 8003d54:	b084      	sub	sp, #16
 8003d56:	af00      	add	r7, sp, #0
 8003d58:	6078      	str	r0, [r7, #4]
 8003d5a:	f107 001c 	add.w	r0, r7, #28
 8003d5e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d122      	bne.n	8003dae <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003d6c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003d7c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003d80:	687a      	ldr	r2, [r7, #4]
 8003d82:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	68db      	ldr	r3, [r3, #12]
 8003d88:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003d90:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d105      	bne.n	8003da2 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	68db      	ldr	r3, [r3, #12]
 8003d9a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003da2:	6878      	ldr	r0, [r7, #4]
 8003da4:	f001 fbee 	bl	8005584 <USB_CoreReset>
 8003da8:	4603      	mov	r3, r0
 8003daa:	73fb      	strb	r3, [r7, #15]
 8003dac:	e01a      	b.n	8003de4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	68db      	ldr	r3, [r3, #12]
 8003db2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003dba:	6878      	ldr	r0, [r7, #4]
 8003dbc:	f001 fbe2 	bl	8005584 <USB_CoreReset>
 8003dc0:	4603      	mov	r3, r0
 8003dc2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003dc4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d106      	bne.n	8003dd8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003dce:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	639a      	str	r2, [r3, #56]	; 0x38
 8003dd6:	e005      	b.n	8003de4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ddc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003de4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003de6:	2b01      	cmp	r3, #1
 8003de8:	d10b      	bne.n	8003e02 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	f043 0206 	orr.w	r2, r3, #6
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	689b      	ldr	r3, [r3, #8]
 8003dfa:	f043 0220 	orr.w	r2, r3, #32
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003e02:	7bfb      	ldrb	r3, [r7, #15]
}
 8003e04:	4618      	mov	r0, r3
 8003e06:	3710      	adds	r7, #16
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003e0e:	b004      	add	sp, #16
 8003e10:	4770      	bx	lr
	...

08003e14 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003e14:	b480      	push	{r7}
 8003e16:	b087      	sub	sp, #28
 8003e18:	af00      	add	r7, sp, #0
 8003e1a:	60f8      	str	r0, [r7, #12]
 8003e1c:	60b9      	str	r1, [r7, #8]
 8003e1e:	4613      	mov	r3, r2
 8003e20:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003e22:	79fb      	ldrb	r3, [r7, #7]
 8003e24:	2b02      	cmp	r3, #2
 8003e26:	d165      	bne.n	8003ef4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	4a41      	ldr	r2, [pc, #260]	; (8003f30 <USB_SetTurnaroundTime+0x11c>)
 8003e2c:	4293      	cmp	r3, r2
 8003e2e:	d906      	bls.n	8003e3e <USB_SetTurnaroundTime+0x2a>
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	4a40      	ldr	r2, [pc, #256]	; (8003f34 <USB_SetTurnaroundTime+0x120>)
 8003e34:	4293      	cmp	r3, r2
 8003e36:	d202      	bcs.n	8003e3e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003e38:	230f      	movs	r3, #15
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	e062      	b.n	8003f04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003e3e:	68bb      	ldr	r3, [r7, #8]
 8003e40:	4a3c      	ldr	r2, [pc, #240]	; (8003f34 <USB_SetTurnaroundTime+0x120>)
 8003e42:	4293      	cmp	r3, r2
 8003e44:	d306      	bcc.n	8003e54 <USB_SetTurnaroundTime+0x40>
 8003e46:	68bb      	ldr	r3, [r7, #8]
 8003e48:	4a3b      	ldr	r2, [pc, #236]	; (8003f38 <USB_SetTurnaroundTime+0x124>)
 8003e4a:	4293      	cmp	r3, r2
 8003e4c:	d202      	bcs.n	8003e54 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003e4e:	230e      	movs	r3, #14
 8003e50:	617b      	str	r3, [r7, #20]
 8003e52:	e057      	b.n	8003f04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003e54:	68bb      	ldr	r3, [r7, #8]
 8003e56:	4a38      	ldr	r2, [pc, #224]	; (8003f38 <USB_SetTurnaroundTime+0x124>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d306      	bcc.n	8003e6a <USB_SetTurnaroundTime+0x56>
 8003e5c:	68bb      	ldr	r3, [r7, #8]
 8003e5e:	4a37      	ldr	r2, [pc, #220]	; (8003f3c <USB_SetTurnaroundTime+0x128>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d202      	bcs.n	8003e6a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003e64:	230d      	movs	r3, #13
 8003e66:	617b      	str	r3, [r7, #20]
 8003e68:	e04c      	b.n	8003f04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	4a33      	ldr	r2, [pc, #204]	; (8003f3c <USB_SetTurnaroundTime+0x128>)
 8003e6e:	4293      	cmp	r3, r2
 8003e70:	d306      	bcc.n	8003e80 <USB_SetTurnaroundTime+0x6c>
 8003e72:	68bb      	ldr	r3, [r7, #8]
 8003e74:	4a32      	ldr	r2, [pc, #200]	; (8003f40 <USB_SetTurnaroundTime+0x12c>)
 8003e76:	4293      	cmp	r3, r2
 8003e78:	d802      	bhi.n	8003e80 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003e7a:	230c      	movs	r3, #12
 8003e7c:	617b      	str	r3, [r7, #20]
 8003e7e:	e041      	b.n	8003f04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003e80:	68bb      	ldr	r3, [r7, #8]
 8003e82:	4a2f      	ldr	r2, [pc, #188]	; (8003f40 <USB_SetTurnaroundTime+0x12c>)
 8003e84:	4293      	cmp	r3, r2
 8003e86:	d906      	bls.n	8003e96 <USB_SetTurnaroundTime+0x82>
 8003e88:	68bb      	ldr	r3, [r7, #8]
 8003e8a:	4a2e      	ldr	r2, [pc, #184]	; (8003f44 <USB_SetTurnaroundTime+0x130>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d802      	bhi.n	8003e96 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003e90:	230b      	movs	r3, #11
 8003e92:	617b      	str	r3, [r7, #20]
 8003e94:	e036      	b.n	8003f04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	4a2a      	ldr	r2, [pc, #168]	; (8003f44 <USB_SetTurnaroundTime+0x130>)
 8003e9a:	4293      	cmp	r3, r2
 8003e9c:	d906      	bls.n	8003eac <USB_SetTurnaroundTime+0x98>
 8003e9e:	68bb      	ldr	r3, [r7, #8]
 8003ea0:	4a29      	ldr	r2, [pc, #164]	; (8003f48 <USB_SetTurnaroundTime+0x134>)
 8003ea2:	4293      	cmp	r3, r2
 8003ea4:	d802      	bhi.n	8003eac <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003ea6:	230a      	movs	r3, #10
 8003ea8:	617b      	str	r3, [r7, #20]
 8003eaa:	e02b      	b.n	8003f04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	4a26      	ldr	r2, [pc, #152]	; (8003f48 <USB_SetTurnaroundTime+0x134>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d906      	bls.n	8003ec2 <USB_SetTurnaroundTime+0xae>
 8003eb4:	68bb      	ldr	r3, [r7, #8]
 8003eb6:	4a25      	ldr	r2, [pc, #148]	; (8003f4c <USB_SetTurnaroundTime+0x138>)
 8003eb8:	4293      	cmp	r3, r2
 8003eba:	d202      	bcs.n	8003ec2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003ebc:	2309      	movs	r3, #9
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	e020      	b.n	8003f04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	4a21      	ldr	r2, [pc, #132]	; (8003f4c <USB_SetTurnaroundTime+0x138>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d306      	bcc.n	8003ed8 <USB_SetTurnaroundTime+0xc4>
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	4a20      	ldr	r2, [pc, #128]	; (8003f50 <USB_SetTurnaroundTime+0x13c>)
 8003ece:	4293      	cmp	r3, r2
 8003ed0:	d802      	bhi.n	8003ed8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003ed2:	2308      	movs	r3, #8
 8003ed4:	617b      	str	r3, [r7, #20]
 8003ed6:	e015      	b.n	8003f04 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4a1d      	ldr	r2, [pc, #116]	; (8003f50 <USB_SetTurnaroundTime+0x13c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d906      	bls.n	8003eee <USB_SetTurnaroundTime+0xda>
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4a1c      	ldr	r2, [pc, #112]	; (8003f54 <USB_SetTurnaroundTime+0x140>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d202      	bcs.n	8003eee <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003ee8:	2307      	movs	r3, #7
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	e00a      	b.n	8003f04 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003eee:	2306      	movs	r3, #6
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	e007      	b.n	8003f04 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003ef4:	79fb      	ldrb	r3, [r7, #7]
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d102      	bne.n	8003f00 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003efa:	2309      	movs	r3, #9
 8003efc:	617b      	str	r3, [r7, #20]
 8003efe:	e001      	b.n	8003f04 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003f00:	2309      	movs	r3, #9
 8003f02:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	68db      	ldr	r3, [r3, #12]
 8003f08:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003f0c:	68fb      	ldr	r3, [r7, #12]
 8003f0e:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	68da      	ldr	r2, [r3, #12]
 8003f14:	697b      	ldr	r3, [r7, #20]
 8003f16:	029b      	lsls	r3, r3, #10
 8003f18:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003f1c:	431a      	orrs	r2, r3
 8003f1e:	68fb      	ldr	r3, [r7, #12]
 8003f20:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003f22:	2300      	movs	r3, #0
}
 8003f24:	4618      	mov	r0, r3
 8003f26:	371c      	adds	r7, #28
 8003f28:	46bd      	mov	sp, r7
 8003f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f2e:	4770      	bx	lr
 8003f30:	00d8acbf 	.word	0x00d8acbf
 8003f34:	00e4e1c0 	.word	0x00e4e1c0
 8003f38:	00f42400 	.word	0x00f42400
 8003f3c:	01067380 	.word	0x01067380
 8003f40:	011a499f 	.word	0x011a499f
 8003f44:	01312cff 	.word	0x01312cff
 8003f48:	014ca43f 	.word	0x014ca43f
 8003f4c:	016e3600 	.word	0x016e3600
 8003f50:	01a6ab1f 	.word	0x01a6ab1f
 8003f54:	01e84800 	.word	0x01e84800

08003f58 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f58:	b480      	push	{r7}
 8003f5a:	b083      	sub	sp, #12
 8003f5c:	af00      	add	r7, sp, #0
 8003f5e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	689b      	ldr	r3, [r3, #8]
 8003f64:	f043 0201 	orr.w	r2, r3, #1
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f6c:	2300      	movs	r3, #0
}
 8003f6e:	4618      	mov	r0, r3
 8003f70:	370c      	adds	r7, #12
 8003f72:	46bd      	mov	sp, r7
 8003f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f78:	4770      	bx	lr

08003f7a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003f7a:	b480      	push	{r7}
 8003f7c:	b083      	sub	sp, #12
 8003f7e:	af00      	add	r7, sp, #0
 8003f80:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	689b      	ldr	r3, [r3, #8]
 8003f86:	f023 0201 	bic.w	r2, r3, #1
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003f8e:	2300      	movs	r3, #0
}
 8003f90:	4618      	mov	r0, r3
 8003f92:	370c      	adds	r7, #12
 8003f94:	46bd      	mov	sp, r7
 8003f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9a:	4770      	bx	lr

08003f9c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b084      	sub	sp, #16
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
 8003fa4:	460b      	mov	r3, r1
 8003fa6:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003fa8:	2300      	movs	r3, #0
 8003faa:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	68db      	ldr	r3, [r3, #12]
 8003fb0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003fb8:	78fb      	ldrb	r3, [r7, #3]
 8003fba:	2b01      	cmp	r3, #1
 8003fbc:	d115      	bne.n	8003fea <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68db      	ldr	r3, [r3, #12]
 8003fc2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003fca:	2001      	movs	r0, #1
 8003fcc:	f7fd f976 	bl	80012bc <HAL_Delay>
      ms++;
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	3301      	adds	r3, #1
 8003fd4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003fd6:	6878      	ldr	r0, [r7, #4]
 8003fd8:	f001 fa45 	bl	8005466 <USB_GetMode>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	2b01      	cmp	r3, #1
 8003fe0:	d01e      	beq.n	8004020 <USB_SetCurrentMode+0x84>
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	2b31      	cmp	r3, #49	; 0x31
 8003fe6:	d9f0      	bls.n	8003fca <USB_SetCurrentMode+0x2e>
 8003fe8:	e01a      	b.n	8004020 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003fea:	78fb      	ldrb	r3, [r7, #3]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d115      	bne.n	800401c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	68db      	ldr	r3, [r3, #12]
 8003ff4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003ffc:	2001      	movs	r0, #1
 8003ffe:	f7fd f95d 	bl	80012bc <HAL_Delay>
      ms++;
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	3301      	adds	r3, #1
 8004006:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f001 fa2c 	bl	8005466 <USB_GetMode>
 800400e:	4603      	mov	r3, r0
 8004010:	2b00      	cmp	r3, #0
 8004012:	d005      	beq.n	8004020 <USB_SetCurrentMode+0x84>
 8004014:	68fb      	ldr	r3, [r7, #12]
 8004016:	2b31      	cmp	r3, #49	; 0x31
 8004018:	d9f0      	bls.n	8003ffc <USB_SetCurrentMode+0x60>
 800401a:	e001      	b.n	8004020 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800401c:	2301      	movs	r3, #1
 800401e:	e005      	b.n	800402c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	2b32      	cmp	r3, #50	; 0x32
 8004024:	d101      	bne.n	800402a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e000      	b.n	800402c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	3710      	adds	r7, #16
 8004030:	46bd      	mov	sp, r7
 8004032:	bd80      	pop	{r7, pc}

08004034 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004034:	b084      	sub	sp, #16
 8004036:	b580      	push	{r7, lr}
 8004038:	b086      	sub	sp, #24
 800403a:	af00      	add	r7, sp, #0
 800403c:	6078      	str	r0, [r7, #4]
 800403e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004042:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004046:	2300      	movs	r3, #0
 8004048:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800404e:	2300      	movs	r3, #0
 8004050:	613b      	str	r3, [r7, #16]
 8004052:	e009      	b.n	8004068 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004054:	687a      	ldr	r2, [r7, #4]
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	3340      	adds	r3, #64	; 0x40
 800405a:	009b      	lsls	r3, r3, #2
 800405c:	4413      	add	r3, r2
 800405e:	2200      	movs	r2, #0
 8004060:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004062:	693b      	ldr	r3, [r7, #16]
 8004064:	3301      	adds	r3, #1
 8004066:	613b      	str	r3, [r7, #16]
 8004068:	693b      	ldr	r3, [r7, #16]
 800406a:	2b0e      	cmp	r3, #14
 800406c:	d9f2      	bls.n	8004054 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800406e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004070:	2b00      	cmp	r3, #0
 8004072:	d11c      	bne.n	80040ae <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	68fa      	ldr	r2, [r7, #12]
 800407e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004082:	f043 0302 	orr.w	r3, r3, #2
 8004086:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800408c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004098:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040a4:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	639a      	str	r2, [r3, #56]	; 0x38
 80040ac:	e00b      	b.n	80040c6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040b2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80040be:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80040cc:	461a      	mov	r2, r3
 80040ce:	2300      	movs	r3, #0
 80040d0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040d8:	4619      	mov	r1, r3
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040e0:	461a      	mov	r2, r3
 80040e2:	680b      	ldr	r3, [r1, #0]
 80040e4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80040e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80040e8:	2b01      	cmp	r3, #1
 80040ea:	d10c      	bne.n	8004106 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80040ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d104      	bne.n	80040fc <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80040f2:	2100      	movs	r1, #0
 80040f4:	6878      	ldr	r0, [r7, #4]
 80040f6:	f000 f965 	bl	80043c4 <USB_SetDevSpeed>
 80040fa:	e008      	b.n	800410e <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80040fc:	2101      	movs	r1, #1
 80040fe:	6878      	ldr	r0, [r7, #4]
 8004100:	f000 f960 	bl	80043c4 <USB_SetDevSpeed>
 8004104:	e003      	b.n	800410e <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004106:	2103      	movs	r1, #3
 8004108:	6878      	ldr	r0, [r7, #4]
 800410a:	f000 f95b 	bl	80043c4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800410e:	2110      	movs	r1, #16
 8004110:	6878      	ldr	r0, [r7, #4]
 8004112:	f000 f8f3 	bl	80042fc <USB_FlushTxFifo>
 8004116:	4603      	mov	r3, r0
 8004118:	2b00      	cmp	r3, #0
 800411a:	d001      	beq.n	8004120 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800411c:	2301      	movs	r3, #1
 800411e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004120:	6878      	ldr	r0, [r7, #4]
 8004122:	f000 f91f 	bl	8004364 <USB_FlushRxFifo>
 8004126:	4603      	mov	r3, r0
 8004128:	2b00      	cmp	r3, #0
 800412a:	d001      	beq.n	8004130 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800412c:	2301      	movs	r3, #1
 800412e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004136:	461a      	mov	r2, r3
 8004138:	2300      	movs	r3, #0
 800413a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004142:	461a      	mov	r2, r3
 8004144:	2300      	movs	r3, #0
 8004146:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800414e:	461a      	mov	r2, r3
 8004150:	2300      	movs	r3, #0
 8004152:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004154:	2300      	movs	r3, #0
 8004156:	613b      	str	r3, [r7, #16]
 8004158:	e043      	b.n	80041e2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800415a:	693b      	ldr	r3, [r7, #16]
 800415c:	015a      	lsls	r2, r3, #5
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	4413      	add	r3, r2
 8004162:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800416c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004170:	d118      	bne.n	80041a4 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004172:	693b      	ldr	r3, [r7, #16]
 8004174:	2b00      	cmp	r3, #0
 8004176:	d10a      	bne.n	800418e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004178:	693b      	ldr	r3, [r7, #16]
 800417a:	015a      	lsls	r2, r3, #5
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	4413      	add	r3, r2
 8004180:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004184:	461a      	mov	r2, r3
 8004186:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800418a:	6013      	str	r3, [r2, #0]
 800418c:	e013      	b.n	80041b6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419a:	461a      	mov	r2, r3
 800419c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80041a0:	6013      	str	r3, [r2, #0]
 80041a2:	e008      	b.n	80041b6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80041a4:	693b      	ldr	r3, [r7, #16]
 80041a6:	015a      	lsls	r2, r3, #5
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	4413      	add	r3, r2
 80041ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041b0:	461a      	mov	r2, r3
 80041b2:	2300      	movs	r3, #0
 80041b4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	015a      	lsls	r2, r3, #5
 80041ba:	68fb      	ldr	r3, [r7, #12]
 80041bc:	4413      	add	r3, r2
 80041be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041c2:	461a      	mov	r2, r3
 80041c4:	2300      	movs	r3, #0
 80041c6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80041c8:	693b      	ldr	r3, [r7, #16]
 80041ca:	015a      	lsls	r2, r3, #5
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	4413      	add	r3, r2
 80041d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041d4:	461a      	mov	r2, r3
 80041d6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80041da:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	3301      	adds	r3, #1
 80041e0:	613b      	str	r3, [r7, #16]
 80041e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80041e4:	693a      	ldr	r2, [r7, #16]
 80041e6:	429a      	cmp	r2, r3
 80041e8:	d3b7      	bcc.n	800415a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80041ea:	2300      	movs	r3, #0
 80041ec:	613b      	str	r3, [r7, #16]
 80041ee:	e043      	b.n	8004278 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041fc:	681b      	ldr	r3, [r3, #0]
 80041fe:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004202:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004206:	d118      	bne.n	800423a <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	2b00      	cmp	r3, #0
 800420c:	d10a      	bne.n	8004224 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800420e:	693b      	ldr	r3, [r7, #16]
 8004210:	015a      	lsls	r2, r3, #5
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	4413      	add	r3, r2
 8004216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800421a:	461a      	mov	r2, r3
 800421c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004220:	6013      	str	r3, [r2, #0]
 8004222:	e013      	b.n	800424c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004224:	693b      	ldr	r3, [r7, #16]
 8004226:	015a      	lsls	r2, r3, #5
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	4413      	add	r3, r2
 800422c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004230:	461a      	mov	r2, r3
 8004232:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004236:	6013      	str	r3, [r2, #0]
 8004238:	e008      	b.n	800424c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	015a      	lsls	r2, r3, #5
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	4413      	add	r3, r2
 8004242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004246:	461a      	mov	r2, r3
 8004248:	2300      	movs	r3, #0
 800424a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004258:	461a      	mov	r2, r3
 800425a:	2300      	movs	r3, #0
 800425c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800425e:	693b      	ldr	r3, [r7, #16]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426a:	461a      	mov	r2, r3
 800426c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004270:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004272:	693b      	ldr	r3, [r7, #16]
 8004274:	3301      	adds	r3, #1
 8004276:	613b      	str	r3, [r7, #16]
 8004278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800427a:	693a      	ldr	r2, [r7, #16]
 800427c:	429a      	cmp	r2, r3
 800427e:	d3b7      	bcc.n	80041f0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	68fa      	ldr	r2, [r7, #12]
 800428a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800428e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004292:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	2200      	movs	r2, #0
 8004298:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 80042a0:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 80042a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d105      	bne.n	80042b4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	699b      	ldr	r3, [r3, #24]
 80042ac:	f043 0210 	orr.w	r2, r3, #16
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	699a      	ldr	r2, [r3, #24]
 80042b8:	4b0f      	ldr	r3, [pc, #60]	; (80042f8 <USB_DevInit+0x2c4>)
 80042ba:	4313      	orrs	r3, r2
 80042bc:	687a      	ldr	r2, [r7, #4]
 80042be:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80042c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d005      	beq.n	80042d2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	699b      	ldr	r3, [r3, #24]
 80042ca:	f043 0208 	orr.w	r2, r3, #8
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80042d2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d107      	bne.n	80042e8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	699b      	ldr	r3, [r3, #24]
 80042dc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80042e0:	f043 0304 	orr.w	r3, r3, #4
 80042e4:	687a      	ldr	r2, [r7, #4]
 80042e6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80042e8:	7dfb      	ldrb	r3, [r7, #23]
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3718      	adds	r7, #24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042f4:	b004      	add	sp, #16
 80042f6:	4770      	bx	lr
 80042f8:	803c3800 	.word	0x803c3800

080042fc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80042fc:	b480      	push	{r7}
 80042fe:	b085      	sub	sp, #20
 8004300:	af00      	add	r7, sp, #0
 8004302:	6078      	str	r0, [r7, #4]
 8004304:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004306:	2300      	movs	r3, #0
 8004308:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	3301      	adds	r3, #1
 800430e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004310:	68fb      	ldr	r3, [r7, #12]
 8004312:	4a13      	ldr	r2, [pc, #76]	; (8004360 <USB_FlushTxFifo+0x64>)
 8004314:	4293      	cmp	r3, r2
 8004316:	d901      	bls.n	800431c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004318:	2303      	movs	r3, #3
 800431a:	e01b      	b.n	8004354 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	2b00      	cmp	r3, #0
 8004322:	daf2      	bge.n	800430a <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004324:	2300      	movs	r3, #0
 8004326:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	019b      	lsls	r3, r3, #6
 800432c:	f043 0220 	orr.w	r2, r3, #32
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004334:	68fb      	ldr	r3, [r7, #12]
 8004336:	3301      	adds	r3, #1
 8004338:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	4a08      	ldr	r2, [pc, #32]	; (8004360 <USB_FlushTxFifo+0x64>)
 800433e:	4293      	cmp	r3, r2
 8004340:	d901      	bls.n	8004346 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004342:	2303      	movs	r3, #3
 8004344:	e006      	b.n	8004354 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	691b      	ldr	r3, [r3, #16]
 800434a:	f003 0320 	and.w	r3, r3, #32
 800434e:	2b20      	cmp	r3, #32
 8004350:	d0f0      	beq.n	8004334 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004352:	2300      	movs	r3, #0
}
 8004354:	4618      	mov	r0, r3
 8004356:	3714      	adds	r7, #20
 8004358:	46bd      	mov	sp, r7
 800435a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800435e:	4770      	bx	lr
 8004360:	00030d40 	.word	0x00030d40

08004364 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004364:	b480      	push	{r7}
 8004366:	b085      	sub	sp, #20
 8004368:	af00      	add	r7, sp, #0
 800436a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800436c:	2300      	movs	r3, #0
 800436e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004370:	68fb      	ldr	r3, [r7, #12]
 8004372:	3301      	adds	r3, #1
 8004374:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	4a11      	ldr	r2, [pc, #68]	; (80043c0 <USB_FlushRxFifo+0x5c>)
 800437a:	4293      	cmp	r3, r2
 800437c:	d901      	bls.n	8004382 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800437e:	2303      	movs	r3, #3
 8004380:	e018      	b.n	80043b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	691b      	ldr	r3, [r3, #16]
 8004386:	2b00      	cmp	r3, #0
 8004388:	daf2      	bge.n	8004370 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800438a:	2300      	movs	r3, #0
 800438c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	2210      	movs	r2, #16
 8004392:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	3301      	adds	r3, #1
 8004398:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	4a08      	ldr	r2, [pc, #32]	; (80043c0 <USB_FlushRxFifo+0x5c>)
 800439e:	4293      	cmp	r3, r2
 80043a0:	d901      	bls.n	80043a6 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 80043a2:	2303      	movs	r3, #3
 80043a4:	e006      	b.n	80043b4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	691b      	ldr	r3, [r3, #16]
 80043aa:	f003 0310 	and.w	r3, r3, #16
 80043ae:	2b10      	cmp	r3, #16
 80043b0:	d0f0      	beq.n	8004394 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	4618      	mov	r0, r3
 80043b6:	3714      	adds	r7, #20
 80043b8:	46bd      	mov	sp, r7
 80043ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043be:	4770      	bx	lr
 80043c0:	00030d40 	.word	0x00030d40

080043c4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	6078      	str	r0, [r7, #4]
 80043cc:	460b      	mov	r3, r1
 80043ce:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043da:	681a      	ldr	r2, [r3, #0]
 80043dc:	78fb      	ldrb	r3, [r7, #3]
 80043de:	68f9      	ldr	r1, [r7, #12]
 80043e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043e4:	4313      	orrs	r3, r2
 80043e6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80043e8:	2300      	movs	r3, #0
}
 80043ea:	4618      	mov	r0, r3
 80043ec:	3714      	adds	r7, #20
 80043ee:	46bd      	mov	sp, r7
 80043f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f4:	4770      	bx	lr

080043f6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80043f6:	b480      	push	{r7}
 80043f8:	b087      	sub	sp, #28
 80043fa:	af00      	add	r7, sp, #0
 80043fc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004402:	693b      	ldr	r3, [r7, #16]
 8004404:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004408:	689b      	ldr	r3, [r3, #8]
 800440a:	f003 0306 	and.w	r3, r3, #6
 800440e:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d102      	bne.n	800441c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004416:	2300      	movs	r3, #0
 8004418:	75fb      	strb	r3, [r7, #23]
 800441a:	e00a      	b.n	8004432 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800441c:	68fb      	ldr	r3, [r7, #12]
 800441e:	2b02      	cmp	r3, #2
 8004420:	d002      	beq.n	8004428 <USB_GetDevSpeed+0x32>
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	2b06      	cmp	r3, #6
 8004426:	d102      	bne.n	800442e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004428:	2302      	movs	r3, #2
 800442a:	75fb      	strb	r3, [r7, #23]
 800442c:	e001      	b.n	8004432 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800442e:	230f      	movs	r3, #15
 8004430:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004432:	7dfb      	ldrb	r3, [r7, #23]
}
 8004434:	4618      	mov	r0, r3
 8004436:	371c      	adds	r7, #28
 8004438:	46bd      	mov	sp, r7
 800443a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800443e:	4770      	bx	lr

08004440 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004440:	b480      	push	{r7}
 8004442:	b085      	sub	sp, #20
 8004444:	af00      	add	r7, sp, #0
 8004446:	6078      	str	r0, [r7, #4]
 8004448:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800444e:	683b      	ldr	r3, [r7, #0]
 8004450:	781b      	ldrb	r3, [r3, #0]
 8004452:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004454:	683b      	ldr	r3, [r7, #0]
 8004456:	785b      	ldrb	r3, [r3, #1]
 8004458:	2b01      	cmp	r3, #1
 800445a:	d13a      	bne.n	80044d2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004462:	69da      	ldr	r2, [r3, #28]
 8004464:	683b      	ldr	r3, [r7, #0]
 8004466:	781b      	ldrb	r3, [r3, #0]
 8004468:	f003 030f 	and.w	r3, r3, #15
 800446c:	2101      	movs	r1, #1
 800446e:	fa01 f303 	lsl.w	r3, r1, r3
 8004472:	b29b      	uxth	r3, r3
 8004474:	68f9      	ldr	r1, [r7, #12]
 8004476:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800447a:	4313      	orrs	r3, r2
 800447c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800447e:	68bb      	ldr	r3, [r7, #8]
 8004480:	015a      	lsls	r2, r3, #5
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	4413      	add	r3, r2
 8004486:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004490:	2b00      	cmp	r3, #0
 8004492:	d155      	bne.n	8004540 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004494:	68bb      	ldr	r3, [r7, #8]
 8004496:	015a      	lsls	r2, r3, #5
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	4413      	add	r3, r2
 800449c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044a0:	681a      	ldr	r2, [r3, #0]
 80044a2:	683b      	ldr	r3, [r7, #0]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80044aa:	683b      	ldr	r3, [r7, #0]
 80044ac:	791b      	ldrb	r3, [r3, #4]
 80044ae:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044b0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	059b      	lsls	r3, r3, #22
 80044b6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80044b8:	4313      	orrs	r3, r2
 80044ba:	68ba      	ldr	r2, [r7, #8]
 80044bc:	0151      	lsls	r1, r2, #5
 80044be:	68fa      	ldr	r2, [r7, #12]
 80044c0:	440a      	add	r2, r1
 80044c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044c6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044ca:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80044ce:	6013      	str	r3, [r2, #0]
 80044d0:	e036      	b.n	8004540 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d8:	69da      	ldr	r2, [r3, #28]
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	781b      	ldrb	r3, [r3, #0]
 80044de:	f003 030f 	and.w	r3, r3, #15
 80044e2:	2101      	movs	r1, #1
 80044e4:	fa01 f303 	lsl.w	r3, r1, r3
 80044e8:	041b      	lsls	r3, r3, #16
 80044ea:	68f9      	ldr	r1, [r7, #12]
 80044ec:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044f0:	4313      	orrs	r3, r2
 80044f2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80044f4:	68bb      	ldr	r3, [r7, #8]
 80044f6:	015a      	lsls	r2, r3, #5
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	4413      	add	r3, r2
 80044fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004506:	2b00      	cmp	r3, #0
 8004508:	d11a      	bne.n	8004540 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	015a      	lsls	r2, r3, #5
 800450e:	68fb      	ldr	r3, [r7, #12]
 8004510:	4413      	add	r3, r2
 8004512:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	68db      	ldr	r3, [r3, #12]
 800451c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	791b      	ldrb	r3, [r3, #4]
 8004524:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004526:	430b      	orrs	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	68ba      	ldr	r2, [r7, #8]
 800452c:	0151      	lsls	r1, r2, #5
 800452e:	68fa      	ldr	r2, [r7, #12]
 8004530:	440a      	add	r2, r1
 8004532:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004536:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800453a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800453e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3714      	adds	r7, #20
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr
	...

08004550 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	6078      	str	r0, [r7, #4]
 8004558:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800455e:	683b      	ldr	r3, [r7, #0]
 8004560:	781b      	ldrb	r3, [r3, #0]
 8004562:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	785b      	ldrb	r3, [r3, #1]
 8004568:	2b01      	cmp	r3, #1
 800456a:	d161      	bne.n	8004630 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800456c:	68bb      	ldr	r3, [r7, #8]
 800456e:	015a      	lsls	r2, r3, #5
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	4413      	add	r3, r2
 8004574:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800457e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004582:	d11f      	bne.n	80045c4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	015a      	lsls	r2, r3, #5
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	4413      	add	r3, r2
 800458c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	68ba      	ldr	r2, [r7, #8]
 8004594:	0151      	lsls	r1, r2, #5
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	440a      	add	r2, r1
 800459a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800459e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80045a2:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68ba      	ldr	r2, [r7, #8]
 80045b4:	0151      	lsls	r1, r2, #5
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	440a      	add	r2, r1
 80045ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80045be:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80045c2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ca:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	781b      	ldrb	r3, [r3, #0]
 80045d0:	f003 030f 	and.w	r3, r3, #15
 80045d4:	2101      	movs	r1, #1
 80045d6:	fa01 f303 	lsl.w	r3, r1, r3
 80045da:	b29b      	uxth	r3, r3
 80045dc:	43db      	mvns	r3, r3
 80045de:	68f9      	ldr	r1, [r7, #12]
 80045e0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045e4:	4013      	ands	r3, r2
 80045e6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 80045e8:	68fb      	ldr	r3, [r7, #12]
 80045ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045ee:	69da      	ldr	r2, [r3, #28]
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	781b      	ldrb	r3, [r3, #0]
 80045f4:	f003 030f 	and.w	r3, r3, #15
 80045f8:	2101      	movs	r1, #1
 80045fa:	fa01 f303 	lsl.w	r3, r1, r3
 80045fe:	b29b      	uxth	r3, r3
 8004600:	43db      	mvns	r3, r3
 8004602:	68f9      	ldr	r1, [r7, #12]
 8004604:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004608:	4013      	ands	r3, r2
 800460a:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	015a      	lsls	r2, r3, #5
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	4413      	add	r3, r2
 8004614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004618:	681a      	ldr	r2, [r3, #0]
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	0159      	lsls	r1, r3, #5
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	440b      	add	r3, r1
 8004622:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004626:	4619      	mov	r1, r3
 8004628:	4b35      	ldr	r3, [pc, #212]	; (8004700 <USB_DeactivateEndpoint+0x1b0>)
 800462a:	4013      	ands	r3, r2
 800462c:	600b      	str	r3, [r1, #0]
 800462e:	e060      	b.n	80046f2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	015a      	lsls	r2, r3, #5
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	4413      	add	r3, r2
 8004638:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004642:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004646:	d11f      	bne.n	8004688 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004648:	68bb      	ldr	r3, [r7, #8]
 800464a:	015a      	lsls	r2, r3, #5
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	4413      	add	r3, r2
 8004650:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	68ba      	ldr	r2, [r7, #8]
 8004658:	0151      	lsls	r1, r2, #5
 800465a:	68fa      	ldr	r2, [r7, #12]
 800465c:	440a      	add	r2, r1
 800465e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004662:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004666:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	68ba      	ldr	r2, [r7, #8]
 8004678:	0151      	lsls	r1, r2, #5
 800467a:	68fa      	ldr	r2, [r7, #12]
 800467c:	440a      	add	r2, r1
 800467e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004682:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004686:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800468e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	781b      	ldrb	r3, [r3, #0]
 8004694:	f003 030f 	and.w	r3, r3, #15
 8004698:	2101      	movs	r1, #1
 800469a:	fa01 f303 	lsl.w	r3, r1, r3
 800469e:	041b      	lsls	r3, r3, #16
 80046a0:	43db      	mvns	r3, r3
 80046a2:	68f9      	ldr	r1, [r7, #12]
 80046a4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046a8:	4013      	ands	r3, r2
 80046aa:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b2:	69da      	ldr	r2, [r3, #28]
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	781b      	ldrb	r3, [r3, #0]
 80046b8:	f003 030f 	and.w	r3, r3, #15
 80046bc:	2101      	movs	r1, #1
 80046be:	fa01 f303 	lsl.w	r3, r1, r3
 80046c2:	041b      	lsls	r3, r3, #16
 80046c4:	43db      	mvns	r3, r3
 80046c6:	68f9      	ldr	r1, [r7, #12]
 80046c8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046cc:	4013      	ands	r3, r2
 80046ce:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 80046d0:	68bb      	ldr	r3, [r7, #8]
 80046d2:	015a      	lsls	r2, r3, #5
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	4413      	add	r3, r2
 80046d8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	68bb      	ldr	r3, [r7, #8]
 80046e0:	0159      	lsls	r1, r3, #5
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	440b      	add	r3, r1
 80046e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ea:	4619      	mov	r1, r3
 80046ec:	4b05      	ldr	r3, [pc, #20]	; (8004704 <USB_DeactivateEndpoint+0x1b4>)
 80046ee:	4013      	ands	r3, r2
 80046f0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80046f2:	2300      	movs	r3, #0
}
 80046f4:	4618      	mov	r0, r3
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr
 8004700:	ec337800 	.word	0xec337800
 8004704:	eff37800 	.word	0xeff37800

08004708 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004708:	b580      	push	{r7, lr}
 800470a:	b08a      	sub	sp, #40	; 0x28
 800470c:	af02      	add	r7, sp, #8
 800470e:	60f8      	str	r0, [r7, #12]
 8004710:	60b9      	str	r1, [r7, #8]
 8004712:	4613      	mov	r3, r2
 8004714:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	781b      	ldrb	r3, [r3, #0]
 800471e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004720:	68bb      	ldr	r3, [r7, #8]
 8004722:	785b      	ldrb	r3, [r3, #1]
 8004724:	2b01      	cmp	r3, #1
 8004726:	f040 815c 	bne.w	80049e2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800472a:	68bb      	ldr	r3, [r7, #8]
 800472c:	699b      	ldr	r3, [r3, #24]
 800472e:	2b00      	cmp	r3, #0
 8004730:	d132      	bne.n	8004798 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004732:	69bb      	ldr	r3, [r7, #24]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	69fb      	ldr	r3, [r7, #28]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473e:	691b      	ldr	r3, [r3, #16]
 8004740:	69ba      	ldr	r2, [r7, #24]
 8004742:	0151      	lsls	r1, r2, #5
 8004744:	69fa      	ldr	r2, [r7, #28]
 8004746:	440a      	add	r2, r1
 8004748:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800474c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004750:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004754:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004756:	69bb      	ldr	r3, [r7, #24]
 8004758:	015a      	lsls	r2, r3, #5
 800475a:	69fb      	ldr	r3, [r7, #28]
 800475c:	4413      	add	r3, r2
 800475e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004762:	691b      	ldr	r3, [r3, #16]
 8004764:	69ba      	ldr	r2, [r7, #24]
 8004766:	0151      	lsls	r1, r2, #5
 8004768:	69fa      	ldr	r2, [r7, #28]
 800476a:	440a      	add	r2, r1
 800476c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004770:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004774:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004776:	69bb      	ldr	r3, [r7, #24]
 8004778:	015a      	lsls	r2, r3, #5
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	4413      	add	r3, r2
 800477e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	69ba      	ldr	r2, [r7, #24]
 8004786:	0151      	lsls	r1, r2, #5
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	440a      	add	r2, r1
 800478c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004790:	0cdb      	lsrs	r3, r3, #19
 8004792:	04db      	lsls	r3, r3, #19
 8004794:	6113      	str	r3, [r2, #16]
 8004796:	e074      	b.n	8004882 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004798:	69bb      	ldr	r3, [r7, #24]
 800479a:	015a      	lsls	r2, r3, #5
 800479c:	69fb      	ldr	r3, [r7, #28]
 800479e:	4413      	add	r3, r2
 80047a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	69ba      	ldr	r2, [r7, #24]
 80047a8:	0151      	lsls	r1, r2, #5
 80047aa:	69fa      	ldr	r2, [r7, #28]
 80047ac:	440a      	add	r2, r1
 80047ae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047b2:	0cdb      	lsrs	r3, r3, #19
 80047b4:	04db      	lsls	r3, r3, #19
 80047b6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047b8:	69bb      	ldr	r3, [r7, #24]
 80047ba:	015a      	lsls	r2, r3, #5
 80047bc:	69fb      	ldr	r3, [r7, #28]
 80047be:	4413      	add	r3, r2
 80047c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047c4:	691b      	ldr	r3, [r3, #16]
 80047c6:	69ba      	ldr	r2, [r7, #24]
 80047c8:	0151      	lsls	r1, r2, #5
 80047ca:	69fa      	ldr	r2, [r7, #28]
 80047cc:	440a      	add	r2, r1
 80047ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047d2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047d6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047da:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	015a      	lsls	r2, r3, #5
 80047e0:	69fb      	ldr	r3, [r7, #28]
 80047e2:	4413      	add	r3, r2
 80047e4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047e8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 80047ea:	68bb      	ldr	r3, [r7, #8]
 80047ec:	6999      	ldr	r1, [r3, #24]
 80047ee:	68bb      	ldr	r3, [r7, #8]
 80047f0:	68db      	ldr	r3, [r3, #12]
 80047f2:	440b      	add	r3, r1
 80047f4:	1e59      	subs	r1, r3, #1
 80047f6:	68bb      	ldr	r3, [r7, #8]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80047fe:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004800:	4b9d      	ldr	r3, [pc, #628]	; (8004a78 <USB_EPStartXfer+0x370>)
 8004802:	400b      	ands	r3, r1
 8004804:	69b9      	ldr	r1, [r7, #24]
 8004806:	0148      	lsls	r0, r1, #5
 8004808:	69f9      	ldr	r1, [r7, #28]
 800480a:	4401      	add	r1, r0
 800480c:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004810:	4313      	orrs	r3, r2
 8004812:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004814:	69bb      	ldr	r3, [r7, #24]
 8004816:	015a      	lsls	r2, r3, #5
 8004818:	69fb      	ldr	r3, [r7, #28]
 800481a:	4413      	add	r3, r2
 800481c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004820:	691a      	ldr	r2, [r3, #16]
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	699b      	ldr	r3, [r3, #24]
 8004826:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800482a:	69b9      	ldr	r1, [r7, #24]
 800482c:	0148      	lsls	r0, r1, #5
 800482e:	69f9      	ldr	r1, [r7, #28]
 8004830:	4401      	add	r1, r0
 8004832:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004836:	4313      	orrs	r3, r2
 8004838:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	791b      	ldrb	r3, [r3, #4]
 800483e:	2b01      	cmp	r3, #1
 8004840:	d11f      	bne.n	8004882 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004842:	69bb      	ldr	r3, [r7, #24]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	69fb      	ldr	r3, [r7, #28]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800484e:	691b      	ldr	r3, [r3, #16]
 8004850:	69ba      	ldr	r2, [r7, #24]
 8004852:	0151      	lsls	r1, r2, #5
 8004854:	69fa      	ldr	r2, [r7, #28]
 8004856:	440a      	add	r2, r1
 8004858:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800485c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004860:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004862:	69bb      	ldr	r3, [r7, #24]
 8004864:	015a      	lsls	r2, r3, #5
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	4413      	add	r3, r2
 800486a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800486e:	691b      	ldr	r3, [r3, #16]
 8004870:	69ba      	ldr	r2, [r7, #24]
 8004872:	0151      	lsls	r1, r2, #5
 8004874:	69fa      	ldr	r2, [r7, #28]
 8004876:	440a      	add	r2, r1
 8004878:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800487c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004880:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004882:	79fb      	ldrb	r3, [r7, #7]
 8004884:	2b01      	cmp	r3, #1
 8004886:	d14b      	bne.n	8004920 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004888:	68bb      	ldr	r3, [r7, #8]
 800488a:	695b      	ldr	r3, [r3, #20]
 800488c:	2b00      	cmp	r3, #0
 800488e:	d009      	beq.n	80048a4 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004890:	69bb      	ldr	r3, [r7, #24]
 8004892:	015a      	lsls	r2, r3, #5
 8004894:	69fb      	ldr	r3, [r7, #28]
 8004896:	4413      	add	r3, r2
 8004898:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800489c:	461a      	mov	r2, r3
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	695b      	ldr	r3, [r3, #20]
 80048a2:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	791b      	ldrb	r3, [r3, #4]
 80048a8:	2b01      	cmp	r3, #1
 80048aa:	d128      	bne.n	80048fe <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80048ac:	69fb      	ldr	r3, [r7, #28]
 80048ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b2:	689b      	ldr	r3, [r3, #8]
 80048b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d110      	bne.n	80048de <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80048bc:	69bb      	ldr	r3, [r7, #24]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	69ba      	ldr	r2, [r7, #24]
 80048cc:	0151      	lsls	r1, r2, #5
 80048ce:	69fa      	ldr	r2, [r7, #28]
 80048d0:	440a      	add	r2, r1
 80048d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80048da:	6013      	str	r3, [r2, #0]
 80048dc:	e00f      	b.n	80048fe <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80048de:	69bb      	ldr	r3, [r7, #24]
 80048e0:	015a      	lsls	r2, r3, #5
 80048e2:	69fb      	ldr	r3, [r7, #28]
 80048e4:	4413      	add	r3, r2
 80048e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	69ba      	ldr	r2, [r7, #24]
 80048ee:	0151      	lsls	r1, r2, #5
 80048f0:	69fa      	ldr	r2, [r7, #28]
 80048f2:	440a      	add	r2, r1
 80048f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80048fc:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80048fe:	69bb      	ldr	r3, [r7, #24]
 8004900:	015a      	lsls	r2, r3, #5
 8004902:	69fb      	ldr	r3, [r7, #28]
 8004904:	4413      	add	r3, r2
 8004906:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800490a:	681b      	ldr	r3, [r3, #0]
 800490c:	69ba      	ldr	r2, [r7, #24]
 800490e:	0151      	lsls	r1, r2, #5
 8004910:	69fa      	ldr	r2, [r7, #28]
 8004912:	440a      	add	r2, r1
 8004914:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004918:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800491c:	6013      	str	r3, [r2, #0]
 800491e:	e133      	b.n	8004b88 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004920:	69bb      	ldr	r3, [r7, #24]
 8004922:	015a      	lsls	r2, r3, #5
 8004924:	69fb      	ldr	r3, [r7, #28]
 8004926:	4413      	add	r3, r2
 8004928:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	0151      	lsls	r1, r2, #5
 8004932:	69fa      	ldr	r2, [r7, #28]
 8004934:	440a      	add	r2, r1
 8004936:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800493a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800493e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004940:	68bb      	ldr	r3, [r7, #8]
 8004942:	791b      	ldrb	r3, [r3, #4]
 8004944:	2b01      	cmp	r3, #1
 8004946:	d015      	beq.n	8004974 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004948:	68bb      	ldr	r3, [r7, #8]
 800494a:	699b      	ldr	r3, [r3, #24]
 800494c:	2b00      	cmp	r3, #0
 800494e:	f000 811b 	beq.w	8004b88 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004952:	69fb      	ldr	r3, [r7, #28]
 8004954:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004958:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800495a:	68bb      	ldr	r3, [r7, #8]
 800495c:	781b      	ldrb	r3, [r3, #0]
 800495e:	f003 030f 	and.w	r3, r3, #15
 8004962:	2101      	movs	r1, #1
 8004964:	fa01 f303 	lsl.w	r3, r1, r3
 8004968:	69f9      	ldr	r1, [r7, #28]
 800496a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800496e:	4313      	orrs	r3, r2
 8004970:	634b      	str	r3, [r1, #52]	; 0x34
 8004972:	e109      	b.n	8004b88 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004974:	69fb      	ldr	r3, [r7, #28]
 8004976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004980:	2b00      	cmp	r3, #0
 8004982:	d110      	bne.n	80049a6 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004984:	69bb      	ldr	r3, [r7, #24]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	69fb      	ldr	r3, [r7, #28]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004990:	681b      	ldr	r3, [r3, #0]
 8004992:	69ba      	ldr	r2, [r7, #24]
 8004994:	0151      	lsls	r1, r2, #5
 8004996:	69fa      	ldr	r2, [r7, #28]
 8004998:	440a      	add	r2, r1
 800499a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800499e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80049a2:	6013      	str	r3, [r2, #0]
 80049a4:	e00f      	b.n	80049c6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80049a6:	69bb      	ldr	r3, [r7, #24]
 80049a8:	015a      	lsls	r2, r3, #5
 80049aa:	69fb      	ldr	r3, [r7, #28]
 80049ac:	4413      	add	r3, r2
 80049ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	69ba      	ldr	r2, [r7, #24]
 80049b6:	0151      	lsls	r1, r2, #5
 80049b8:	69fa      	ldr	r2, [r7, #28]
 80049ba:	440a      	add	r2, r1
 80049bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049c4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80049c6:	68bb      	ldr	r3, [r7, #8]
 80049c8:	6919      	ldr	r1, [r3, #16]
 80049ca:	68bb      	ldr	r3, [r7, #8]
 80049cc:	781a      	ldrb	r2, [r3, #0]
 80049ce:	68bb      	ldr	r3, [r7, #8]
 80049d0:	699b      	ldr	r3, [r3, #24]
 80049d2:	b298      	uxth	r0, r3
 80049d4:	79fb      	ldrb	r3, [r7, #7]
 80049d6:	9300      	str	r3, [sp, #0]
 80049d8:	4603      	mov	r3, r0
 80049da:	68f8      	ldr	r0, [r7, #12]
 80049dc:	f000 fade 	bl	8004f9c <USB_WritePacket>
 80049e0:	e0d2      	b.n	8004b88 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80049e2:	69bb      	ldr	r3, [r7, #24]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ee:	691b      	ldr	r3, [r3, #16]
 80049f0:	69ba      	ldr	r2, [r7, #24]
 80049f2:	0151      	lsls	r1, r2, #5
 80049f4:	69fa      	ldr	r2, [r7, #28]
 80049f6:	440a      	add	r2, r1
 80049f8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049fc:	0cdb      	lsrs	r3, r3, #19
 80049fe:	04db      	lsls	r3, r3, #19
 8004a00:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004a02:	69bb      	ldr	r3, [r7, #24]
 8004a04:	015a      	lsls	r2, r3, #5
 8004a06:	69fb      	ldr	r3, [r7, #28]
 8004a08:	4413      	add	r3, r2
 8004a0a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a0e:	691b      	ldr	r3, [r3, #16]
 8004a10:	69ba      	ldr	r2, [r7, #24]
 8004a12:	0151      	lsls	r1, r2, #5
 8004a14:	69fa      	ldr	r2, [r7, #28]
 8004a16:	440a      	add	r2, r1
 8004a18:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a1c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004a20:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004a24:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004a26:	68bb      	ldr	r3, [r7, #8]
 8004a28:	699b      	ldr	r3, [r3, #24]
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d126      	bne.n	8004a7c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004a2e:	69bb      	ldr	r3, [r7, #24]
 8004a30:	015a      	lsls	r2, r3, #5
 8004a32:	69fb      	ldr	r3, [r7, #28]
 8004a34:	4413      	add	r3, r2
 8004a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3a:	691a      	ldr	r2, [r3, #16]
 8004a3c:	68bb      	ldr	r3, [r7, #8]
 8004a3e:	68db      	ldr	r3, [r3, #12]
 8004a40:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004a44:	69b9      	ldr	r1, [r7, #24]
 8004a46:	0148      	lsls	r0, r1, #5
 8004a48:	69f9      	ldr	r1, [r7, #28]
 8004a4a:	4401      	add	r1, r0
 8004a4c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004a50:	4313      	orrs	r3, r2
 8004a52:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004a54:	69bb      	ldr	r3, [r7, #24]
 8004a56:	015a      	lsls	r2, r3, #5
 8004a58:	69fb      	ldr	r3, [r7, #28]
 8004a5a:	4413      	add	r3, r2
 8004a5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a60:	691b      	ldr	r3, [r3, #16]
 8004a62:	69ba      	ldr	r2, [r7, #24]
 8004a64:	0151      	lsls	r1, r2, #5
 8004a66:	69fa      	ldr	r2, [r7, #28]
 8004a68:	440a      	add	r2, r1
 8004a6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a6e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004a72:	6113      	str	r3, [r2, #16]
 8004a74:	e03a      	b.n	8004aec <USB_EPStartXfer+0x3e4>
 8004a76:	bf00      	nop
 8004a78:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004a7c:	68bb      	ldr	r3, [r7, #8]
 8004a7e:	699a      	ldr	r2, [r3, #24]
 8004a80:	68bb      	ldr	r3, [r7, #8]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	4413      	add	r3, r2
 8004a86:	1e5a      	subs	r2, r3, #1
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	68db      	ldr	r3, [r3, #12]
 8004a8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a90:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004a92:	68bb      	ldr	r3, [r7, #8]
 8004a94:	68db      	ldr	r3, [r3, #12]
 8004a96:	8afa      	ldrh	r2, [r7, #22]
 8004a98:	fb03 f202 	mul.w	r2, r3, r2
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004aa0:	69bb      	ldr	r3, [r7, #24]
 8004aa2:	015a      	lsls	r2, r3, #5
 8004aa4:	69fb      	ldr	r3, [r7, #28]
 8004aa6:	4413      	add	r3, r2
 8004aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aac:	691a      	ldr	r2, [r3, #16]
 8004aae:	8afb      	ldrh	r3, [r7, #22]
 8004ab0:	04d9      	lsls	r1, r3, #19
 8004ab2:	4b38      	ldr	r3, [pc, #224]	; (8004b94 <USB_EPStartXfer+0x48c>)
 8004ab4:	400b      	ands	r3, r1
 8004ab6:	69b9      	ldr	r1, [r7, #24]
 8004ab8:	0148      	lsls	r0, r1, #5
 8004aba:	69f9      	ldr	r1, [r7, #28]
 8004abc:	4401      	add	r1, r0
 8004abe:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ac2:	4313      	orrs	r3, r2
 8004ac4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004ac6:	69bb      	ldr	r3, [r7, #24]
 8004ac8:	015a      	lsls	r2, r3, #5
 8004aca:	69fb      	ldr	r3, [r7, #28]
 8004acc:	4413      	add	r3, r2
 8004ace:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ad2:	691a      	ldr	r2, [r3, #16]
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	69db      	ldr	r3, [r3, #28]
 8004ad8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004adc:	69b9      	ldr	r1, [r7, #24]
 8004ade:	0148      	lsls	r0, r1, #5
 8004ae0:	69f9      	ldr	r1, [r7, #28]
 8004ae2:	4401      	add	r1, r0
 8004ae4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ae8:	4313      	orrs	r3, r2
 8004aea:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004aec:	79fb      	ldrb	r3, [r7, #7]
 8004aee:	2b01      	cmp	r3, #1
 8004af0:	d10d      	bne.n	8004b0e <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004af2:	68bb      	ldr	r3, [r7, #8]
 8004af4:	691b      	ldr	r3, [r3, #16]
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d009      	beq.n	8004b0e <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004afa:	68bb      	ldr	r3, [r7, #8]
 8004afc:	6919      	ldr	r1, [r3, #16]
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	015a      	lsls	r2, r3, #5
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	4413      	add	r3, r2
 8004b06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b0a:	460a      	mov	r2, r1
 8004b0c:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004b0e:	68bb      	ldr	r3, [r7, #8]
 8004b10:	791b      	ldrb	r3, [r3, #4]
 8004b12:	2b01      	cmp	r3, #1
 8004b14:	d128      	bne.n	8004b68 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004b16:	69fb      	ldr	r3, [r7, #28]
 8004b18:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1c:	689b      	ldr	r3, [r3, #8]
 8004b1e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d110      	bne.n	8004b48 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004b26:	69bb      	ldr	r3, [r7, #24]
 8004b28:	015a      	lsls	r2, r3, #5
 8004b2a:	69fb      	ldr	r3, [r7, #28]
 8004b2c:	4413      	add	r3, r2
 8004b2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b32:	681b      	ldr	r3, [r3, #0]
 8004b34:	69ba      	ldr	r2, [r7, #24]
 8004b36:	0151      	lsls	r1, r2, #5
 8004b38:	69fa      	ldr	r2, [r7, #28]
 8004b3a:	440a      	add	r2, r1
 8004b3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b40:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004b44:	6013      	str	r3, [r2, #0]
 8004b46:	e00f      	b.n	8004b68 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004b48:	69bb      	ldr	r3, [r7, #24]
 8004b4a:	015a      	lsls	r2, r3, #5
 8004b4c:	69fb      	ldr	r3, [r7, #28]
 8004b4e:	4413      	add	r3, r2
 8004b50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	0151      	lsls	r1, r2, #5
 8004b5a:	69fa      	ldr	r2, [r7, #28]
 8004b5c:	440a      	add	r2, r1
 8004b5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004b66:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004b68:	69bb      	ldr	r3, [r7, #24]
 8004b6a:	015a      	lsls	r2, r3, #5
 8004b6c:	69fb      	ldr	r3, [r7, #28]
 8004b6e:	4413      	add	r3, r2
 8004b70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	69ba      	ldr	r2, [r7, #24]
 8004b78:	0151      	lsls	r1, r2, #5
 8004b7a:	69fa      	ldr	r2, [r7, #28]
 8004b7c:	440a      	add	r2, r1
 8004b7e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b82:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004b86:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004b88:	2300      	movs	r3, #0
}
 8004b8a:	4618      	mov	r0, r3
 8004b8c:	3720      	adds	r7, #32
 8004b8e:	46bd      	mov	sp, r7
 8004b90:	bd80      	pop	{r7, pc}
 8004b92:	bf00      	nop
 8004b94:	1ff80000 	.word	0x1ff80000

08004b98 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b087      	sub	sp, #28
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	60f8      	str	r0, [r7, #12]
 8004ba0:	60b9      	str	r1, [r7, #8]
 8004ba2:	4613      	mov	r3, r2
 8004ba4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	781b      	ldrb	r3, [r3, #0]
 8004bae:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004bb0:	68bb      	ldr	r3, [r7, #8]
 8004bb2:	785b      	ldrb	r3, [r3, #1]
 8004bb4:	2b01      	cmp	r3, #1
 8004bb6:	f040 80ce 	bne.w	8004d56 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004bba:	68bb      	ldr	r3, [r7, #8]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d132      	bne.n	8004c28 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004bc2:	693b      	ldr	r3, [r7, #16]
 8004bc4:	015a      	lsls	r2, r3, #5
 8004bc6:	697b      	ldr	r3, [r7, #20]
 8004bc8:	4413      	add	r3, r2
 8004bca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bce:	691b      	ldr	r3, [r3, #16]
 8004bd0:	693a      	ldr	r2, [r7, #16]
 8004bd2:	0151      	lsls	r1, r2, #5
 8004bd4:	697a      	ldr	r2, [r7, #20]
 8004bd6:	440a      	add	r2, r1
 8004bd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004bdc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004be0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004be4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004be6:	693b      	ldr	r3, [r7, #16]
 8004be8:	015a      	lsls	r2, r3, #5
 8004bea:	697b      	ldr	r3, [r7, #20]
 8004bec:	4413      	add	r3, r2
 8004bee:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004bf2:	691b      	ldr	r3, [r3, #16]
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	0151      	lsls	r1, r2, #5
 8004bf8:	697a      	ldr	r2, [r7, #20]
 8004bfa:	440a      	add	r2, r1
 8004bfc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c04:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c06:	693b      	ldr	r3, [r7, #16]
 8004c08:	015a      	lsls	r2, r3, #5
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	4413      	add	r3, r2
 8004c0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c12:	691b      	ldr	r3, [r3, #16]
 8004c14:	693a      	ldr	r2, [r7, #16]
 8004c16:	0151      	lsls	r1, r2, #5
 8004c18:	697a      	ldr	r2, [r7, #20]
 8004c1a:	440a      	add	r2, r1
 8004c1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c20:	0cdb      	lsrs	r3, r3, #19
 8004c22:	04db      	lsls	r3, r3, #19
 8004c24:	6113      	str	r3, [r2, #16]
 8004c26:	e04e      	b.n	8004cc6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	697b      	ldr	r3, [r7, #20]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	0151      	lsls	r1, r2, #5
 8004c3a:	697a      	ldr	r2, [r7, #20]
 8004c3c:	440a      	add	r2, r1
 8004c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c42:	0cdb      	lsrs	r3, r3, #19
 8004c44:	04db      	lsls	r3, r3, #19
 8004c46:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c48:	693b      	ldr	r3, [r7, #16]
 8004c4a:	015a      	lsls	r2, r3, #5
 8004c4c:	697b      	ldr	r3, [r7, #20]
 8004c4e:	4413      	add	r3, r2
 8004c50:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c54:	691b      	ldr	r3, [r3, #16]
 8004c56:	693a      	ldr	r2, [r7, #16]
 8004c58:	0151      	lsls	r1, r2, #5
 8004c5a:	697a      	ldr	r2, [r7, #20]
 8004c5c:	440a      	add	r2, r1
 8004c5e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c62:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c66:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c6a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004c6c:	68bb      	ldr	r3, [r7, #8]
 8004c6e:	699a      	ldr	r2, [r3, #24]
 8004c70:	68bb      	ldr	r3, [r7, #8]
 8004c72:	68db      	ldr	r3, [r3, #12]
 8004c74:	429a      	cmp	r2, r3
 8004c76:	d903      	bls.n	8004c80 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004c78:	68bb      	ldr	r3, [r7, #8]
 8004c7a:	68da      	ldr	r2, [r3, #12]
 8004c7c:	68bb      	ldr	r3, [r7, #8]
 8004c7e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c80:	693b      	ldr	r3, [r7, #16]
 8004c82:	015a      	lsls	r2, r3, #5
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	4413      	add	r3, r2
 8004c88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c8c:	691b      	ldr	r3, [r3, #16]
 8004c8e:	693a      	ldr	r2, [r7, #16]
 8004c90:	0151      	lsls	r1, r2, #5
 8004c92:	697a      	ldr	r2, [r7, #20]
 8004c94:	440a      	add	r2, r1
 8004c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c9e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004ca0:	693b      	ldr	r3, [r7, #16]
 8004ca2:	015a      	lsls	r2, r3, #5
 8004ca4:	697b      	ldr	r3, [r7, #20]
 8004ca6:	4413      	add	r3, r2
 8004ca8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cac:	691a      	ldr	r2, [r3, #16]
 8004cae:	68bb      	ldr	r3, [r7, #8]
 8004cb0:	699b      	ldr	r3, [r3, #24]
 8004cb2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004cb6:	6939      	ldr	r1, [r7, #16]
 8004cb8:	0148      	lsls	r0, r1, #5
 8004cba:	6979      	ldr	r1, [r7, #20]
 8004cbc:	4401      	add	r1, r0
 8004cbe:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004cc2:	4313      	orrs	r3, r2
 8004cc4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004cc6:	79fb      	ldrb	r3, [r7, #7]
 8004cc8:	2b01      	cmp	r3, #1
 8004cca:	d11e      	bne.n	8004d0a <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004ccc:	68bb      	ldr	r3, [r7, #8]
 8004cce:	695b      	ldr	r3, [r3, #20]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d009      	beq.n	8004ce8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	015a      	lsls	r2, r3, #5
 8004cd8:	697b      	ldr	r3, [r7, #20]
 8004cda:	4413      	add	r3, r2
 8004cdc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce0:	461a      	mov	r2, r3
 8004ce2:	68bb      	ldr	r3, [r7, #8]
 8004ce4:	695b      	ldr	r3, [r3, #20]
 8004ce6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004ce8:	693b      	ldr	r3, [r7, #16]
 8004cea:	015a      	lsls	r2, r3, #5
 8004cec:	697b      	ldr	r3, [r7, #20]
 8004cee:	4413      	add	r3, r2
 8004cf0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	693a      	ldr	r2, [r7, #16]
 8004cf8:	0151      	lsls	r1, r2, #5
 8004cfa:	697a      	ldr	r2, [r7, #20]
 8004cfc:	440a      	add	r2, r1
 8004cfe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d02:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d06:	6013      	str	r3, [r2, #0]
 8004d08:	e097      	b.n	8004e3a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	015a      	lsls	r2, r3, #5
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	4413      	add	r3, r2
 8004d12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	693a      	ldr	r2, [r7, #16]
 8004d1a:	0151      	lsls	r1, r2, #5
 8004d1c:	697a      	ldr	r2, [r7, #20]
 8004d1e:	440a      	add	r2, r1
 8004d20:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d24:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004d28:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	699b      	ldr	r3, [r3, #24]
 8004d2e:	2b00      	cmp	r3, #0
 8004d30:	f000 8083 	beq.w	8004e3a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004d3c:	68bb      	ldr	r3, [r7, #8]
 8004d3e:	781b      	ldrb	r3, [r3, #0]
 8004d40:	f003 030f 	and.w	r3, r3, #15
 8004d44:	2101      	movs	r1, #1
 8004d46:	fa01 f303 	lsl.w	r3, r1, r3
 8004d4a:	6979      	ldr	r1, [r7, #20]
 8004d4c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d50:	4313      	orrs	r3, r2
 8004d52:	634b      	str	r3, [r1, #52]	; 0x34
 8004d54:	e071      	b.n	8004e3a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	015a      	lsls	r2, r3, #5
 8004d5a:	697b      	ldr	r3, [r7, #20]
 8004d5c:	4413      	add	r3, r2
 8004d5e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d62:	691b      	ldr	r3, [r3, #16]
 8004d64:	693a      	ldr	r2, [r7, #16]
 8004d66:	0151      	lsls	r1, r2, #5
 8004d68:	697a      	ldr	r2, [r7, #20]
 8004d6a:	440a      	add	r2, r1
 8004d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d70:	0cdb      	lsrs	r3, r3, #19
 8004d72:	04db      	lsls	r3, r3, #19
 8004d74:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004d76:	693b      	ldr	r3, [r7, #16]
 8004d78:	015a      	lsls	r2, r3, #5
 8004d7a:	697b      	ldr	r3, [r7, #20]
 8004d7c:	4413      	add	r3, r2
 8004d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d82:	691b      	ldr	r3, [r3, #16]
 8004d84:	693a      	ldr	r2, [r7, #16]
 8004d86:	0151      	lsls	r1, r2, #5
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	440a      	add	r2, r1
 8004d8c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d90:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d94:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d98:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004d9a:	68bb      	ldr	r3, [r7, #8]
 8004d9c:	699b      	ldr	r3, [r3, #24]
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d003      	beq.n	8004daa <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004da2:	68bb      	ldr	r3, [r7, #8]
 8004da4:	68da      	ldr	r2, [r3, #12]
 8004da6:	68bb      	ldr	r3, [r7, #8]
 8004da8:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004daa:	68bb      	ldr	r3, [r7, #8]
 8004dac:	68da      	ldr	r2, [r3, #12]
 8004dae:	68bb      	ldr	r3, [r7, #8]
 8004db0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004db2:	693b      	ldr	r3, [r7, #16]
 8004db4:	015a      	lsls	r2, r3, #5
 8004db6:	697b      	ldr	r3, [r7, #20]
 8004db8:	4413      	add	r3, r2
 8004dba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	693a      	ldr	r2, [r7, #16]
 8004dc2:	0151      	lsls	r1, r2, #5
 8004dc4:	697a      	ldr	r2, [r7, #20]
 8004dc6:	440a      	add	r2, r1
 8004dc8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004dcc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004dd0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004dd2:	693b      	ldr	r3, [r7, #16]
 8004dd4:	015a      	lsls	r2, r3, #5
 8004dd6:	697b      	ldr	r3, [r7, #20]
 8004dd8:	4413      	add	r3, r2
 8004dda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004dde:	691a      	ldr	r2, [r3, #16]
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	69db      	ldr	r3, [r3, #28]
 8004de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004de8:	6939      	ldr	r1, [r7, #16]
 8004dea:	0148      	lsls	r0, r1, #5
 8004dec:	6979      	ldr	r1, [r7, #20]
 8004dee:	4401      	add	r1, r0
 8004df0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004df4:	4313      	orrs	r3, r2
 8004df6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004df8:	79fb      	ldrb	r3, [r7, #7]
 8004dfa:	2b01      	cmp	r3, #1
 8004dfc:	d10d      	bne.n	8004e1a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	691b      	ldr	r3, [r3, #16]
 8004e02:	2b00      	cmp	r3, #0
 8004e04:	d009      	beq.n	8004e1a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	6919      	ldr	r1, [r3, #16]
 8004e0a:	693b      	ldr	r3, [r7, #16]
 8004e0c:	015a      	lsls	r2, r3, #5
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	4413      	add	r3, r2
 8004e12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e16:	460a      	mov	r2, r1
 8004e18:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004e1a:	693b      	ldr	r3, [r7, #16]
 8004e1c:	015a      	lsls	r2, r3, #5
 8004e1e:	697b      	ldr	r3, [r7, #20]
 8004e20:	4413      	add	r3, r2
 8004e22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	693a      	ldr	r2, [r7, #16]
 8004e2a:	0151      	lsls	r1, r2, #5
 8004e2c:	697a      	ldr	r2, [r7, #20]
 8004e2e:	440a      	add	r2, r1
 8004e30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e34:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e38:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004e3a:	2300      	movs	r3, #0
}
 8004e3c:	4618      	mov	r0, r3
 8004e3e:	371c      	adds	r7, #28
 8004e40:	46bd      	mov	sp, r7
 8004e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e46:	4770      	bx	lr

08004e48 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004e48:	b480      	push	{r7}
 8004e4a:	b087      	sub	sp, #28
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
 8004e50:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004e52:	2300      	movs	r3, #0
 8004e54:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004e56:	2300      	movs	r3, #0
 8004e58:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	785b      	ldrb	r3, [r3, #1]
 8004e62:	2b01      	cmp	r3, #1
 8004e64:	d14a      	bne.n	8004efc <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004e66:	683b      	ldr	r3, [r7, #0]
 8004e68:	781b      	ldrb	r3, [r3, #0]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	693b      	ldr	r3, [r7, #16]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e7e:	f040 8086 	bne.w	8004f8e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004e82:	683b      	ldr	r3, [r7, #0]
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	015a      	lsls	r2, r3, #5
 8004e88:	693b      	ldr	r3, [r7, #16]
 8004e8a:	4413      	add	r3, r2
 8004e8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e90:	681b      	ldr	r3, [r3, #0]
 8004e92:	683a      	ldr	r2, [r7, #0]
 8004e94:	7812      	ldrb	r2, [r2, #0]
 8004e96:	0151      	lsls	r1, r2, #5
 8004e98:	693a      	ldr	r2, [r7, #16]
 8004e9a:	440a      	add	r2, r1
 8004e9c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004ea4:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	781b      	ldrb	r3, [r3, #0]
 8004eaa:	015a      	lsls	r2, r3, #5
 8004eac:	693b      	ldr	r3, [r7, #16]
 8004eae:	4413      	add	r3, r2
 8004eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	683a      	ldr	r2, [r7, #0]
 8004eb8:	7812      	ldrb	r2, [r2, #0]
 8004eba:	0151      	lsls	r1, r2, #5
 8004ebc:	693a      	ldr	r2, [r7, #16]
 8004ebe:	440a      	add	r2, r1
 8004ec0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ec4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ec8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	3301      	adds	r3, #1
 8004ece:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	f242 7210 	movw	r2, #10000	; 0x2710
 8004ed6:	4293      	cmp	r3, r2
 8004ed8:	d902      	bls.n	8004ee0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004eda:	2301      	movs	r3, #1
 8004edc:	75fb      	strb	r3, [r7, #23]
          break;
 8004ede:	e056      	b.n	8004f8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	015a      	lsls	r2, r3, #5
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	4413      	add	r3, r2
 8004eea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ef4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ef8:	d0e7      	beq.n	8004eca <USB_EPStopXfer+0x82>
 8004efa:	e048      	b.n	8004f8e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004efc:	683b      	ldr	r3, [r7, #0]
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	015a      	lsls	r2, r3, #5
 8004f02:	693b      	ldr	r3, [r7, #16]
 8004f04:	4413      	add	r3, r2
 8004f06:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f0a:	681b      	ldr	r3, [r3, #0]
 8004f0c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f10:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f14:	d13b      	bne.n	8004f8e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	683a      	ldr	r2, [r7, #0]
 8004f28:	7812      	ldrb	r2, [r2, #0]
 8004f2a:	0151      	lsls	r1, r2, #5
 8004f2c:	693a      	ldr	r2, [r7, #16]
 8004f2e:	440a      	add	r2, r1
 8004f30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f34:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f38:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	781b      	ldrb	r3, [r3, #0]
 8004f3e:	015a      	lsls	r2, r3, #5
 8004f40:	693b      	ldr	r3, [r7, #16]
 8004f42:	4413      	add	r3, r2
 8004f44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	683a      	ldr	r2, [r7, #0]
 8004f4c:	7812      	ldrb	r2, [r2, #0]
 8004f4e:	0151      	lsls	r1, r2, #5
 8004f50:	693a      	ldr	r2, [r7, #16]
 8004f52:	440a      	add	r2, r1
 8004f54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f58:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f5c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	3301      	adds	r3, #1
 8004f62:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d902      	bls.n	8004f74 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004f6e:	2301      	movs	r3, #1
 8004f70:	75fb      	strb	r3, [r7, #23]
          break;
 8004f72:	e00c      	b.n	8004f8e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	015a      	lsls	r2, r3, #5
 8004f7a:	693b      	ldr	r3, [r7, #16]
 8004f7c:	4413      	add	r3, r2
 8004f7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f88:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f8c:	d0e7      	beq.n	8004f5e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004f8e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	371c      	adds	r7, #28
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b089      	sub	sp, #36	; 0x24
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	60f8      	str	r0, [r7, #12]
 8004fa4:	60b9      	str	r1, [r7, #8]
 8004fa6:	4611      	mov	r1, r2
 8004fa8:	461a      	mov	r2, r3
 8004faa:	460b      	mov	r3, r1
 8004fac:	71fb      	strb	r3, [r7, #7]
 8004fae:	4613      	mov	r3, r2
 8004fb0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004fb2:	68fb      	ldr	r3, [r7, #12]
 8004fb4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8004fb6:	68bb      	ldr	r3, [r7, #8]
 8004fb8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004fba:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d123      	bne.n	800500a <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8004fc2:	88bb      	ldrh	r3, [r7, #4]
 8004fc4:	3303      	adds	r3, #3
 8004fc6:	089b      	lsrs	r3, r3, #2
 8004fc8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61bb      	str	r3, [r7, #24]
 8004fce:	e018      	b.n	8005002 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	031a      	lsls	r2, r3, #12
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	4413      	add	r3, r2
 8004fd8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fdc:	461a      	mov	r2, r3
 8004fde:	69fb      	ldr	r3, [r7, #28]
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004fe4:	69fb      	ldr	r3, [r7, #28]
 8004fe6:	3301      	adds	r3, #1
 8004fe8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004fea:	69fb      	ldr	r3, [r7, #28]
 8004fec:	3301      	adds	r3, #1
 8004fee:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ff0:	69fb      	ldr	r3, [r7, #28]
 8004ff2:	3301      	adds	r3, #1
 8004ff4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004ff6:	69fb      	ldr	r3, [r7, #28]
 8004ff8:	3301      	adds	r3, #1
 8004ffa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004ffc:	69bb      	ldr	r3, [r7, #24]
 8004ffe:	3301      	adds	r3, #1
 8005000:	61bb      	str	r3, [r7, #24]
 8005002:	69ba      	ldr	r2, [r7, #24]
 8005004:	693b      	ldr	r3, [r7, #16]
 8005006:	429a      	cmp	r2, r3
 8005008:	d3e2      	bcc.n	8004fd0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 800500a:	2300      	movs	r3, #0
}
 800500c:	4618      	mov	r0, r3
 800500e:	3724      	adds	r7, #36	; 0x24
 8005010:	46bd      	mov	sp, r7
 8005012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005016:	4770      	bx	lr

08005018 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005018:	b480      	push	{r7}
 800501a:	b08b      	sub	sp, #44	; 0x2c
 800501c:	af00      	add	r7, sp, #0
 800501e:	60f8      	str	r0, [r7, #12]
 8005020:	60b9      	str	r1, [r7, #8]
 8005022:	4613      	mov	r3, r2
 8005024:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800502a:	68bb      	ldr	r3, [r7, #8]
 800502c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800502e:	88fb      	ldrh	r3, [r7, #6]
 8005030:	089b      	lsrs	r3, r3, #2
 8005032:	b29b      	uxth	r3, r3
 8005034:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005036:	88fb      	ldrh	r3, [r7, #6]
 8005038:	f003 0303 	and.w	r3, r3, #3
 800503c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800503e:	2300      	movs	r3, #0
 8005040:	623b      	str	r3, [r7, #32]
 8005042:	e014      	b.n	800506e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005044:	69bb      	ldr	r3, [r7, #24]
 8005046:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800504e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005052:	3301      	adds	r3, #1
 8005054:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005058:	3301      	adds	r3, #1
 800505a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800505c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800505e:	3301      	adds	r3, #1
 8005060:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005064:	3301      	adds	r3, #1
 8005066:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005068:	6a3b      	ldr	r3, [r7, #32]
 800506a:	3301      	adds	r3, #1
 800506c:	623b      	str	r3, [r7, #32]
 800506e:	6a3a      	ldr	r2, [r7, #32]
 8005070:	697b      	ldr	r3, [r7, #20]
 8005072:	429a      	cmp	r2, r3
 8005074:	d3e6      	bcc.n	8005044 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005076:	8bfb      	ldrh	r3, [r7, #30]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d01e      	beq.n	80050ba <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005080:	69bb      	ldr	r3, [r7, #24]
 8005082:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005086:	461a      	mov	r2, r3
 8005088:	f107 0310 	add.w	r3, r7, #16
 800508c:	6812      	ldr	r2, [r2, #0]
 800508e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005090:	693a      	ldr	r2, [r7, #16]
 8005092:	6a3b      	ldr	r3, [r7, #32]
 8005094:	b2db      	uxtb	r3, r3
 8005096:	00db      	lsls	r3, r3, #3
 8005098:	fa22 f303 	lsr.w	r3, r2, r3
 800509c:	b2da      	uxtb	r2, r3
 800509e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050a0:	701a      	strb	r2, [r3, #0]
      i++;
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	3301      	adds	r3, #1
 80050a6:	623b      	str	r3, [r7, #32]
      pDest++;
 80050a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050aa:	3301      	adds	r3, #1
 80050ac:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80050ae:	8bfb      	ldrh	r3, [r7, #30]
 80050b0:	3b01      	subs	r3, #1
 80050b2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80050b4:	8bfb      	ldrh	r3, [r7, #30]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d1ea      	bne.n	8005090 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80050ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80050bc:	4618      	mov	r0, r3
 80050be:	372c      	adds	r7, #44	; 0x2c
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b085      	sub	sp, #20
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
 80050d0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80050d6:	683b      	ldr	r3, [r7, #0]
 80050d8:	781b      	ldrb	r3, [r3, #0]
 80050da:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80050dc:	683b      	ldr	r3, [r7, #0]
 80050de:	785b      	ldrb	r3, [r3, #1]
 80050e0:	2b01      	cmp	r3, #1
 80050e2:	d12c      	bne.n	800513e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80050e4:	68bb      	ldr	r3, [r7, #8]
 80050e6:	015a      	lsls	r2, r3, #5
 80050e8:	68fb      	ldr	r3, [r7, #12]
 80050ea:	4413      	add	r3, r2
 80050ec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	2b00      	cmp	r3, #0
 80050f4:	db12      	blt.n	800511c <USB_EPSetStall+0x54>
 80050f6:	68bb      	ldr	r3, [r7, #8]
 80050f8:	2b00      	cmp	r3, #0
 80050fa:	d00f      	beq.n	800511c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80050fc:	68bb      	ldr	r3, [r7, #8]
 80050fe:	015a      	lsls	r2, r3, #5
 8005100:	68fb      	ldr	r3, [r7, #12]
 8005102:	4413      	add	r3, r2
 8005104:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	68ba      	ldr	r2, [r7, #8]
 800510c:	0151      	lsls	r1, r2, #5
 800510e:	68fa      	ldr	r2, [r7, #12]
 8005110:	440a      	add	r2, r1
 8005112:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005116:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800511a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	015a      	lsls	r2, r3, #5
 8005120:	68fb      	ldr	r3, [r7, #12]
 8005122:	4413      	add	r3, r2
 8005124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	68ba      	ldr	r2, [r7, #8]
 800512c:	0151      	lsls	r1, r2, #5
 800512e:	68fa      	ldr	r2, [r7, #12]
 8005130:	440a      	add	r2, r1
 8005132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005136:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800513a:	6013      	str	r3, [r2, #0]
 800513c:	e02b      	b.n	8005196 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800513e:	68bb      	ldr	r3, [r7, #8]
 8005140:	015a      	lsls	r2, r3, #5
 8005142:	68fb      	ldr	r3, [r7, #12]
 8005144:	4413      	add	r3, r2
 8005146:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	2b00      	cmp	r3, #0
 800514e:	db12      	blt.n	8005176 <USB_EPSetStall+0xae>
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d00f      	beq.n	8005176 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005156:	68bb      	ldr	r3, [r7, #8]
 8005158:	015a      	lsls	r2, r3, #5
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	4413      	add	r3, r2
 800515e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	68ba      	ldr	r2, [r7, #8]
 8005166:	0151      	lsls	r1, r2, #5
 8005168:	68fa      	ldr	r2, [r7, #12]
 800516a:	440a      	add	r2, r1
 800516c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005170:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005174:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	015a      	lsls	r2, r3, #5
 800517a:	68fb      	ldr	r3, [r7, #12]
 800517c:	4413      	add	r3, r2
 800517e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005182:	681b      	ldr	r3, [r3, #0]
 8005184:	68ba      	ldr	r2, [r7, #8]
 8005186:	0151      	lsls	r1, r2, #5
 8005188:	68fa      	ldr	r2, [r7, #12]
 800518a:	440a      	add	r2, r1
 800518c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005190:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005194:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005196:	2300      	movs	r3, #0
}
 8005198:	4618      	mov	r0, r3
 800519a:	3714      	adds	r7, #20
 800519c:	46bd      	mov	sp, r7
 800519e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051a2:	4770      	bx	lr

080051a4 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80051a4:	b480      	push	{r7}
 80051a6:	b085      	sub	sp, #20
 80051a8:	af00      	add	r7, sp, #0
 80051aa:	6078      	str	r0, [r7, #4]
 80051ac:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80051b2:	683b      	ldr	r3, [r7, #0]
 80051b4:	781b      	ldrb	r3, [r3, #0]
 80051b6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80051b8:	683b      	ldr	r3, [r7, #0]
 80051ba:	785b      	ldrb	r3, [r3, #1]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d128      	bne.n	8005212 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80051c0:	68bb      	ldr	r3, [r7, #8]
 80051c2:	015a      	lsls	r2, r3, #5
 80051c4:	68fb      	ldr	r3, [r7, #12]
 80051c6:	4413      	add	r3, r2
 80051c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051cc:	681b      	ldr	r3, [r3, #0]
 80051ce:	68ba      	ldr	r2, [r7, #8]
 80051d0:	0151      	lsls	r1, r2, #5
 80051d2:	68fa      	ldr	r2, [r7, #12]
 80051d4:	440a      	add	r2, r1
 80051d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051da:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80051de:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80051e0:	683b      	ldr	r3, [r7, #0]
 80051e2:	791b      	ldrb	r3, [r3, #4]
 80051e4:	2b03      	cmp	r3, #3
 80051e6:	d003      	beq.n	80051f0 <USB_EPClearStall+0x4c>
 80051e8:	683b      	ldr	r3, [r7, #0]
 80051ea:	791b      	ldrb	r3, [r3, #4]
 80051ec:	2b02      	cmp	r3, #2
 80051ee:	d138      	bne.n	8005262 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	015a      	lsls	r2, r3, #5
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	4413      	add	r3, r2
 80051f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	68ba      	ldr	r2, [r7, #8]
 8005200:	0151      	lsls	r1, r2, #5
 8005202:	68fa      	ldr	r2, [r7, #12]
 8005204:	440a      	add	r2, r1
 8005206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800520a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800520e:	6013      	str	r3, [r2, #0]
 8005210:	e027      	b.n	8005262 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005212:	68bb      	ldr	r3, [r7, #8]
 8005214:	015a      	lsls	r2, r3, #5
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	4413      	add	r3, r2
 800521a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521e:	681b      	ldr	r3, [r3, #0]
 8005220:	68ba      	ldr	r2, [r7, #8]
 8005222:	0151      	lsls	r1, r2, #5
 8005224:	68fa      	ldr	r2, [r7, #12]
 8005226:	440a      	add	r2, r1
 8005228:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800522c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005230:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005232:	683b      	ldr	r3, [r7, #0]
 8005234:	791b      	ldrb	r3, [r3, #4]
 8005236:	2b03      	cmp	r3, #3
 8005238:	d003      	beq.n	8005242 <USB_EPClearStall+0x9e>
 800523a:	683b      	ldr	r3, [r7, #0]
 800523c:	791b      	ldrb	r3, [r3, #4]
 800523e:	2b02      	cmp	r3, #2
 8005240:	d10f      	bne.n	8005262 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005242:	68bb      	ldr	r3, [r7, #8]
 8005244:	015a      	lsls	r2, r3, #5
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	4413      	add	r3, r2
 800524a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800524e:	681b      	ldr	r3, [r3, #0]
 8005250:	68ba      	ldr	r2, [r7, #8]
 8005252:	0151      	lsls	r1, r2, #5
 8005254:	68fa      	ldr	r2, [r7, #12]
 8005256:	440a      	add	r2, r1
 8005258:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800525c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005260:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005262:	2300      	movs	r3, #0
}
 8005264:	4618      	mov	r0, r3
 8005266:	3714      	adds	r7, #20
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005270:	b480      	push	{r7}
 8005272:	b085      	sub	sp, #20
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
 8005278:	460b      	mov	r3, r1
 800527a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005280:	68fb      	ldr	r3, [r7, #12]
 8005282:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68fa      	ldr	r2, [r7, #12]
 800528a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800528e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005292:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005294:	68fb      	ldr	r3, [r7, #12]
 8005296:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800529a:	681a      	ldr	r2, [r3, #0]
 800529c:	78fb      	ldrb	r3, [r7, #3]
 800529e:	011b      	lsls	r3, r3, #4
 80052a0:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 80052a4:	68f9      	ldr	r1, [r7, #12]
 80052a6:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80052aa:	4313      	orrs	r3, r2
 80052ac:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 80052ae:	2300      	movs	r3, #0
}
 80052b0:	4618      	mov	r0, r3
 80052b2:	3714      	adds	r7, #20
 80052b4:	46bd      	mov	sp, r7
 80052b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ba:	4770      	bx	lr

080052bc <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052bc:	b480      	push	{r7}
 80052be:	b085      	sub	sp, #20
 80052c0:	af00      	add	r7, sp, #0
 80052c2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80052c8:	68fb      	ldr	r3, [r7, #12]
 80052ca:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68fa      	ldr	r2, [r7, #12]
 80052d2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80052d6:	f023 0303 	bic.w	r3, r3, #3
 80052da:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80052dc:	68fb      	ldr	r3, [r7, #12]
 80052de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	68fa      	ldr	r2, [r7, #12]
 80052e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80052ea:	f023 0302 	bic.w	r3, r3, #2
 80052ee:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80052f0:	2300      	movs	r3, #0
}
 80052f2:	4618      	mov	r0, r3
 80052f4:	3714      	adds	r7, #20
 80052f6:	46bd      	mov	sp, r7
 80052f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052fc:	4770      	bx	lr

080052fe <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80052fe:	b480      	push	{r7}
 8005300:	b085      	sub	sp, #20
 8005302:	af00      	add	r7, sp, #0
 8005304:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800530a:	68fb      	ldr	r3, [r7, #12]
 800530c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005310:	681b      	ldr	r3, [r3, #0]
 8005312:	68fa      	ldr	r2, [r7, #12]
 8005314:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005318:	f023 0303 	bic.w	r3, r3, #3
 800531c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	68fa      	ldr	r2, [r7, #12]
 8005328:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800532c:	f043 0302 	orr.w	r3, r3, #2
 8005330:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005332:	2300      	movs	r3, #0
}
 8005334:	4618      	mov	r0, r3
 8005336:	3714      	adds	r7, #20
 8005338:	46bd      	mov	sp, r7
 800533a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800533e:	4770      	bx	lr

08005340 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005340:	b480      	push	{r7}
 8005342:	b085      	sub	sp, #20
 8005344:	af00      	add	r7, sp, #0
 8005346:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	695b      	ldr	r3, [r3, #20]
 800534c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	699b      	ldr	r3, [r3, #24]
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4013      	ands	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005358:	68fb      	ldr	r3, [r7, #12]
}
 800535a:	4618      	mov	r0, r3
 800535c:	3714      	adds	r7, #20
 800535e:	46bd      	mov	sp, r7
 8005360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005364:	4770      	bx	lr

08005366 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005366:	b480      	push	{r7}
 8005368:	b085      	sub	sp, #20
 800536a:	af00      	add	r7, sp, #0
 800536c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005378:	699b      	ldr	r3, [r3, #24]
 800537a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800537c:	68fb      	ldr	r3, [r7, #12]
 800537e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005382:	69db      	ldr	r3, [r3, #28]
 8005384:	68ba      	ldr	r2, [r7, #8]
 8005386:	4013      	ands	r3, r2
 8005388:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800538a:	68bb      	ldr	r3, [r7, #8]
 800538c:	0c1b      	lsrs	r3, r3, #16
}
 800538e:	4618      	mov	r0, r3
 8005390:	3714      	adds	r7, #20
 8005392:	46bd      	mov	sp, r7
 8005394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005398:	4770      	bx	lr

0800539a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800539a:	b480      	push	{r7}
 800539c:	b085      	sub	sp, #20
 800539e:	af00      	add	r7, sp, #0
 80053a0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053ac:	699b      	ldr	r3, [r3, #24]
 80053ae:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053b6:	69db      	ldr	r3, [r3, #28]
 80053b8:	68ba      	ldr	r2, [r7, #8]
 80053ba:	4013      	ands	r3, r2
 80053bc:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80053be:	68bb      	ldr	r3, [r7, #8]
 80053c0:	b29b      	uxth	r3, r3
}
 80053c2:	4618      	mov	r0, r3
 80053c4:	3714      	adds	r7, #20
 80053c6:	46bd      	mov	sp, r7
 80053c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053cc:	4770      	bx	lr

080053ce <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80053ce:	b480      	push	{r7}
 80053d0:	b085      	sub	sp, #20
 80053d2:	af00      	add	r7, sp, #0
 80053d4:	6078      	str	r0, [r7, #4]
 80053d6:	460b      	mov	r3, r1
 80053d8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80053de:	78fb      	ldrb	r3, [r7, #3]
 80053e0:	015a      	lsls	r2, r3, #5
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	4413      	add	r3, r2
 80053e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ea:	689b      	ldr	r3, [r3, #8]
 80053ec:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80053ee:	68fb      	ldr	r3, [r7, #12]
 80053f0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053f4:	695b      	ldr	r3, [r3, #20]
 80053f6:	68ba      	ldr	r2, [r7, #8]
 80053f8:	4013      	ands	r3, r2
 80053fa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80053fc:	68bb      	ldr	r3, [r7, #8]
}
 80053fe:	4618      	mov	r0, r3
 8005400:	3714      	adds	r7, #20
 8005402:	46bd      	mov	sp, r7
 8005404:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005408:	4770      	bx	lr

0800540a <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800540a:	b480      	push	{r7}
 800540c:	b087      	sub	sp, #28
 800540e:	af00      	add	r7, sp, #0
 8005410:	6078      	str	r0, [r7, #4]
 8005412:	460b      	mov	r3, r1
 8005414:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800541a:	697b      	ldr	r3, [r7, #20]
 800541c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005420:	691b      	ldr	r3, [r3, #16]
 8005422:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005424:	697b      	ldr	r3, [r7, #20]
 8005426:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800542a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800542c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800542e:	78fb      	ldrb	r3, [r7, #3]
 8005430:	f003 030f 	and.w	r3, r3, #15
 8005434:	68fa      	ldr	r2, [r7, #12]
 8005436:	fa22 f303 	lsr.w	r3, r2, r3
 800543a:	01db      	lsls	r3, r3, #7
 800543c:	b2db      	uxtb	r3, r3
 800543e:	693a      	ldr	r2, [r7, #16]
 8005440:	4313      	orrs	r3, r2
 8005442:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005444:	78fb      	ldrb	r3, [r7, #3]
 8005446:	015a      	lsls	r2, r3, #5
 8005448:	697b      	ldr	r3, [r7, #20]
 800544a:	4413      	add	r3, r2
 800544c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005450:	689b      	ldr	r3, [r3, #8]
 8005452:	693a      	ldr	r2, [r7, #16]
 8005454:	4013      	ands	r3, r2
 8005456:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005458:	68bb      	ldr	r3, [r7, #8]
}
 800545a:	4618      	mov	r0, r3
 800545c:	371c      	adds	r7, #28
 800545e:	46bd      	mov	sp, r7
 8005460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005464:	4770      	bx	lr

08005466 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005466:	b480      	push	{r7}
 8005468:	b083      	sub	sp, #12
 800546a:	af00      	add	r7, sp, #0
 800546c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	f003 0301 	and.w	r3, r3, #1
}
 8005476:	4618      	mov	r0, r3
 8005478:	370c      	adds	r7, #12
 800547a:	46bd      	mov	sp, r7
 800547c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005480:	4770      	bx	lr

08005482 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005482:	b480      	push	{r7}
 8005484:	b085      	sub	sp, #20
 8005486:	af00      	add	r7, sp, #0
 8005488:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800548e:	68fb      	ldr	r3, [r7, #12]
 8005490:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	68fa      	ldr	r2, [r7, #12]
 8005498:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800549c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 80054a0:	f023 0307 	bic.w	r3, r3, #7
 80054a4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054ac:	685b      	ldr	r3, [r3, #4]
 80054ae:	68fa      	ldr	r2, [r7, #12]
 80054b0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80054b4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054b8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80054ba:	2300      	movs	r3, #0
}
 80054bc:	4618      	mov	r0, r3
 80054be:	3714      	adds	r7, #20
 80054c0:	46bd      	mov	sp, r7
 80054c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054c6:	4770      	bx	lr

080054c8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80054c8:	b480      	push	{r7}
 80054ca:	b087      	sub	sp, #28
 80054cc:	af00      	add	r7, sp, #0
 80054ce:	60f8      	str	r0, [r7, #12]
 80054d0:	460b      	mov	r3, r1
 80054d2:	607a      	str	r2, [r7, #4]
 80054d4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054d6:	68fb      	ldr	r3, [r7, #12]
 80054d8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	333c      	adds	r3, #60	; 0x3c
 80054de:	3304      	adds	r3, #4
 80054e0:	681b      	ldr	r3, [r3, #0]
 80054e2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80054e4:	693b      	ldr	r3, [r7, #16]
 80054e6:	4a26      	ldr	r2, [pc, #152]	; (8005580 <USB_EP0_OutStart+0xb8>)
 80054e8:	4293      	cmp	r3, r2
 80054ea:	d90a      	bls.n	8005502 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80054ec:	697b      	ldr	r3, [r7, #20]
 80054ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80054f8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80054fc:	d101      	bne.n	8005502 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80054fe:	2300      	movs	r3, #0
 8005500:	e037      	b.n	8005572 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005502:	697b      	ldr	r3, [r7, #20]
 8005504:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005508:	461a      	mov	r2, r3
 800550a:	2300      	movs	r3, #0
 800550c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	697a      	ldr	r2, [r7, #20]
 8005518:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800551c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005520:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005522:	697b      	ldr	r3, [r7, #20]
 8005524:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005528:	691b      	ldr	r3, [r3, #16]
 800552a:	697a      	ldr	r2, [r7, #20]
 800552c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005530:	f043 0318 	orr.w	r3, r3, #24
 8005534:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005536:	697b      	ldr	r3, [r7, #20]
 8005538:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800553c:	691b      	ldr	r3, [r3, #16]
 800553e:	697a      	ldr	r2, [r7, #20]
 8005540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005544:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005548:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 800554a:	7afb      	ldrb	r3, [r7, #11]
 800554c:	2b01      	cmp	r3, #1
 800554e:	d10f      	bne.n	8005570 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005550:	697b      	ldr	r3, [r7, #20]
 8005552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005556:	461a      	mov	r2, r3
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800555c:	697b      	ldr	r3, [r7, #20]
 800555e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	697a      	ldr	r2, [r7, #20]
 8005566:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800556a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800556e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005570:	2300      	movs	r3, #0
}
 8005572:	4618      	mov	r0, r3
 8005574:	371c      	adds	r7, #28
 8005576:	46bd      	mov	sp, r7
 8005578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800557c:	4770      	bx	lr
 800557e:	bf00      	nop
 8005580:	4f54300a 	.word	0x4f54300a

08005584 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005584:	b480      	push	{r7}
 8005586:	b085      	sub	sp, #20
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800558c:	2300      	movs	r3, #0
 800558e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	3301      	adds	r3, #1
 8005594:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005596:	68fb      	ldr	r3, [r7, #12]
 8005598:	4a13      	ldr	r2, [pc, #76]	; (80055e8 <USB_CoreReset+0x64>)
 800559a:	4293      	cmp	r3, r2
 800559c:	d901      	bls.n	80055a2 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e01b      	b.n	80055da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	691b      	ldr	r3, [r3, #16]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	daf2      	bge.n	8005590 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80055aa:	2300      	movs	r3, #0
 80055ac:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	691b      	ldr	r3, [r3, #16]
 80055b2:	f043 0201 	orr.w	r2, r3, #1
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80055ba:	68fb      	ldr	r3, [r7, #12]
 80055bc:	3301      	adds	r3, #1
 80055be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80055c0:	68fb      	ldr	r3, [r7, #12]
 80055c2:	4a09      	ldr	r2, [pc, #36]	; (80055e8 <USB_CoreReset+0x64>)
 80055c4:	4293      	cmp	r3, r2
 80055c6:	d901      	bls.n	80055cc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80055c8:	2303      	movs	r3, #3
 80055ca:	e006      	b.n	80055da <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	691b      	ldr	r3, [r3, #16]
 80055d0:	f003 0301 	and.w	r3, r3, #1
 80055d4:	2b01      	cmp	r3, #1
 80055d6:	d0f0      	beq.n	80055ba <USB_CoreReset+0x36>

  return HAL_OK;
 80055d8:	2300      	movs	r3, #0
}
 80055da:	4618      	mov	r0, r3
 80055dc:	3714      	adds	r7, #20
 80055de:	46bd      	mov	sp, r7
 80055e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e4:	4770      	bx	lr
 80055e6:	bf00      	nop
 80055e8:	00030d40 	.word	0x00030d40

080055ec <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055ec:	b580      	push	{r7, lr}
 80055ee:	b084      	sub	sp, #16
 80055f0:	af00      	add	r7, sp, #0
 80055f2:	6078      	str	r0, [r7, #4]
 80055f4:	460b      	mov	r3, r1
 80055f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80055f8:	2010      	movs	r0, #16
 80055fa:	f002 f911 	bl	8007820 <USBD_static_malloc>
 80055fe:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005600:	68fb      	ldr	r3, [r7, #12]
 8005602:	2b00      	cmp	r3, #0
 8005604:	d109      	bne.n	800561a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	32b0      	adds	r2, #176	; 0xb0
 8005610:	2100      	movs	r1, #0
 8005612:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005616:	2302      	movs	r3, #2
 8005618:	e048      	b.n	80056ac <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	32b0      	adds	r2, #176	; 0xb0
 8005624:	68f9      	ldr	r1, [r7, #12]
 8005626:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	32b0      	adds	r2, #176	; 0xb0
 8005634:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	7c1b      	ldrb	r3, [r3, #16]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d10d      	bne.n	8005662 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005646:	4b1b      	ldr	r3, [pc, #108]	; (80056b4 <USBD_HID_Init+0xc8>)
 8005648:	781b      	ldrb	r3, [r3, #0]
 800564a:	f003 020f 	and.w	r2, r3, #15
 800564e:	6879      	ldr	r1, [r7, #4]
 8005650:	4613      	mov	r3, r2
 8005652:	009b      	lsls	r3, r3, #2
 8005654:	4413      	add	r3, r2
 8005656:	009b      	lsls	r3, r3, #2
 8005658:	440b      	add	r3, r1
 800565a:	3326      	adds	r3, #38	; 0x26
 800565c:	2207      	movs	r2, #7
 800565e:	801a      	strh	r2, [r3, #0]
 8005660:	e00c      	b.n	800567c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005662:	4b14      	ldr	r3, [pc, #80]	; (80056b4 <USBD_HID_Init+0xc8>)
 8005664:	781b      	ldrb	r3, [r3, #0]
 8005666:	f003 020f 	and.w	r2, r3, #15
 800566a:	6879      	ldr	r1, [r7, #4]
 800566c:	4613      	mov	r3, r2
 800566e:	009b      	lsls	r3, r3, #2
 8005670:	4413      	add	r3, r2
 8005672:	009b      	lsls	r3, r3, #2
 8005674:	440b      	add	r3, r1
 8005676:	3326      	adds	r3, #38	; 0x26
 8005678:	220a      	movs	r2, #10
 800567a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800567c:	4b0d      	ldr	r3, [pc, #52]	; (80056b4 <USBD_HID_Init+0xc8>)
 800567e:	7819      	ldrb	r1, [r3, #0]
 8005680:	2304      	movs	r3, #4
 8005682:	2203      	movs	r2, #3
 8005684:	6878      	ldr	r0, [r7, #4]
 8005686:	f001 ffba 	bl	80075fe <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800568a:	4b0a      	ldr	r3, [pc, #40]	; (80056b4 <USBD_HID_Init+0xc8>)
 800568c:	781b      	ldrb	r3, [r3, #0]
 800568e:	f003 020f 	and.w	r2, r3, #15
 8005692:	6879      	ldr	r1, [r7, #4]
 8005694:	4613      	mov	r3, r2
 8005696:	009b      	lsls	r3, r3, #2
 8005698:	4413      	add	r3, r2
 800569a:	009b      	lsls	r3, r3, #2
 800569c:	440b      	add	r3, r1
 800569e:	3324      	adds	r3, #36	; 0x24
 80056a0:	2201      	movs	r2, #1
 80056a2:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	2200      	movs	r2, #0
 80056a8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80056aa:	2300      	movs	r3, #0
}
 80056ac:	4618      	mov	r0, r3
 80056ae:	3710      	adds	r7, #16
 80056b0:	46bd      	mov	sp, r7
 80056b2:	bd80      	pop	{r7, pc}
 80056b4:	20000493 	.word	0x20000493

080056b8 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80056b8:	b580      	push	{r7, lr}
 80056ba:	b082      	sub	sp, #8
 80056bc:	af00      	add	r7, sp, #0
 80056be:	6078      	str	r0, [r7, #4]
 80056c0:	460b      	mov	r3, r1
 80056c2:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80056c4:	4b1f      	ldr	r3, [pc, #124]	; (8005744 <USBD_HID_DeInit+0x8c>)
 80056c6:	781b      	ldrb	r3, [r3, #0]
 80056c8:	4619      	mov	r1, r3
 80056ca:	6878      	ldr	r0, [r7, #4]
 80056cc:	f001 ffbd 	bl	800764a <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 80056d0:	4b1c      	ldr	r3, [pc, #112]	; (8005744 <USBD_HID_DeInit+0x8c>)
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	f003 020f 	and.w	r2, r3, #15
 80056d8:	6879      	ldr	r1, [r7, #4]
 80056da:	4613      	mov	r3, r2
 80056dc:	009b      	lsls	r3, r3, #2
 80056de:	4413      	add	r3, r2
 80056e0:	009b      	lsls	r3, r3, #2
 80056e2:	440b      	add	r3, r1
 80056e4:	3324      	adds	r3, #36	; 0x24
 80056e6:	2200      	movs	r2, #0
 80056e8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 80056ea:	4b16      	ldr	r3, [pc, #88]	; (8005744 <USBD_HID_DeInit+0x8c>)
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	f003 020f 	and.w	r2, r3, #15
 80056f2:	6879      	ldr	r1, [r7, #4]
 80056f4:	4613      	mov	r3, r2
 80056f6:	009b      	lsls	r3, r3, #2
 80056f8:	4413      	add	r3, r2
 80056fa:	009b      	lsls	r3, r3, #2
 80056fc:	440b      	add	r3, r1
 80056fe:	3326      	adds	r3, #38	; 0x26
 8005700:	2200      	movs	r2, #0
 8005702:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	32b0      	adds	r2, #176	; 0xb0
 800570e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005712:	2b00      	cmp	r3, #0
 8005714:	d011      	beq.n	800573a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	32b0      	adds	r2, #176	; 0xb0
 8005720:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005724:	4618      	mov	r0, r3
 8005726:	f002 f889 	bl	800783c <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	32b0      	adds	r2, #176	; 0xb0
 8005734:	2100      	movs	r1, #0
 8005736:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 800573a:	2300      	movs	r3, #0
}
 800573c:	4618      	mov	r0, r3
 800573e:	3708      	adds	r7, #8
 8005740:	46bd      	mov	sp, r7
 8005742:	bd80      	pop	{r7, pc}
 8005744:	20000493 	.word	0x20000493

08005748 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005748:	b580      	push	{r7, lr}
 800574a:	b086      	sub	sp, #24
 800574c:	af00      	add	r7, sp, #0
 800574e:	6078      	str	r0, [r7, #4]
 8005750:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	32b0      	adds	r2, #176	; 0xb0
 800575c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005760:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005762:	2300      	movs	r3, #0
 8005764:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005766:	2300      	movs	r3, #0
 8005768:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	2b00      	cmp	r3, #0
 800576e:	d101      	bne.n	8005774 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005770:	2303      	movs	r3, #3
 8005772:	e0e8      	b.n	8005946 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005774:	683b      	ldr	r3, [r7, #0]
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800577c:	2b00      	cmp	r3, #0
 800577e:	d046      	beq.n	800580e <USBD_HID_Setup+0xc6>
 8005780:	2b20      	cmp	r3, #32
 8005782:	f040 80d8 	bne.w	8005936 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	785b      	ldrb	r3, [r3, #1]
 800578a:	3b02      	subs	r3, #2
 800578c:	2b09      	cmp	r3, #9
 800578e:	d836      	bhi.n	80057fe <USBD_HID_Setup+0xb6>
 8005790:	a201      	add	r2, pc, #4	; (adr r2, 8005798 <USBD_HID_Setup+0x50>)
 8005792:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005796:	bf00      	nop
 8005798:	080057ef 	.word	0x080057ef
 800579c:	080057cf 	.word	0x080057cf
 80057a0:	080057ff 	.word	0x080057ff
 80057a4:	080057ff 	.word	0x080057ff
 80057a8:	080057ff 	.word	0x080057ff
 80057ac:	080057ff 	.word	0x080057ff
 80057b0:	080057ff 	.word	0x080057ff
 80057b4:	080057ff 	.word	0x080057ff
 80057b8:	080057dd 	.word	0x080057dd
 80057bc:	080057c1 	.word	0x080057c1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80057c0:	683b      	ldr	r3, [r7, #0]
 80057c2:	885b      	ldrh	r3, [r3, #2]
 80057c4:	b2db      	uxtb	r3, r3
 80057c6:	461a      	mov	r2, r3
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	601a      	str	r2, [r3, #0]
          break;
 80057cc:	e01e      	b.n	800580c <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	2201      	movs	r2, #1
 80057d2:	4619      	mov	r1, r3
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f001 fbd5 	bl	8006f84 <USBD_CtlSendData>
          break;
 80057da:	e017      	b.n	800580c <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 80057dc:	683b      	ldr	r3, [r7, #0]
 80057de:	885b      	ldrh	r3, [r3, #2]
 80057e0:	0a1b      	lsrs	r3, r3, #8
 80057e2:	b29b      	uxth	r3, r3
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	461a      	mov	r2, r3
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	605a      	str	r2, [r3, #4]
          break;
 80057ec:	e00e      	b.n	800580c <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3304      	adds	r3, #4
 80057f2:	2201      	movs	r2, #1
 80057f4:	4619      	mov	r1, r3
 80057f6:	6878      	ldr	r0, [r7, #4]
 80057f8:	f001 fbc4 	bl	8006f84 <USBD_CtlSendData>
          break;
 80057fc:	e006      	b.n	800580c <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80057fe:	6839      	ldr	r1, [r7, #0]
 8005800:	6878      	ldr	r0, [r7, #4]
 8005802:	f001 fb4e 	bl	8006ea2 <USBD_CtlError>
          ret = USBD_FAIL;
 8005806:	2303      	movs	r3, #3
 8005808:	75fb      	strb	r3, [r7, #23]
          break;
 800580a:	bf00      	nop
      }
      break;
 800580c:	e09a      	b.n	8005944 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800580e:	683b      	ldr	r3, [r7, #0]
 8005810:	785b      	ldrb	r3, [r3, #1]
 8005812:	2b0b      	cmp	r3, #11
 8005814:	f200 8086 	bhi.w	8005924 <USBD_HID_Setup+0x1dc>
 8005818:	a201      	add	r2, pc, #4	; (adr r2, 8005820 <USBD_HID_Setup+0xd8>)
 800581a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800581e:	bf00      	nop
 8005820:	08005851 	.word	0x08005851
 8005824:	08005933 	.word	0x08005933
 8005828:	08005925 	.word	0x08005925
 800582c:	08005925 	.word	0x08005925
 8005830:	08005925 	.word	0x08005925
 8005834:	08005925 	.word	0x08005925
 8005838:	0800587b 	.word	0x0800587b
 800583c:	08005925 	.word	0x08005925
 8005840:	08005925 	.word	0x08005925
 8005844:	08005925 	.word	0x08005925
 8005848:	080058d3 	.word	0x080058d3
 800584c:	080058fd 	.word	0x080058fd
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005856:	b2db      	uxtb	r3, r3
 8005858:	2b03      	cmp	r3, #3
 800585a:	d107      	bne.n	800586c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800585c:	f107 030a 	add.w	r3, r7, #10
 8005860:	2202      	movs	r2, #2
 8005862:	4619      	mov	r1, r3
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	f001 fb8d 	bl	8006f84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800586a:	e063      	b.n	8005934 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800586c:	6839      	ldr	r1, [r7, #0]
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f001 fb17 	bl	8006ea2 <USBD_CtlError>
            ret = USBD_FAIL;
 8005874:	2303      	movs	r3, #3
 8005876:	75fb      	strb	r3, [r7, #23]
          break;
 8005878:	e05c      	b.n	8005934 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800587a:	683b      	ldr	r3, [r7, #0]
 800587c:	885b      	ldrh	r3, [r3, #2]
 800587e:	0a1b      	lsrs	r3, r3, #8
 8005880:	b29b      	uxth	r3, r3
 8005882:	2b22      	cmp	r3, #34	; 0x22
 8005884:	d108      	bne.n	8005898 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005886:	683b      	ldr	r3, [r7, #0]
 8005888:	88db      	ldrh	r3, [r3, #6]
 800588a:	2b3f      	cmp	r3, #63	; 0x3f
 800588c:	bf28      	it	cs
 800588e:	233f      	movcs	r3, #63	; 0x3f
 8005890:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005892:	4b2f      	ldr	r3, [pc, #188]	; (8005950 <USBD_HID_Setup+0x208>)
 8005894:	613b      	str	r3, [r7, #16]
 8005896:	e015      	b.n	80058c4 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005898:	683b      	ldr	r3, [r7, #0]
 800589a:	885b      	ldrh	r3, [r3, #2]
 800589c:	0a1b      	lsrs	r3, r3, #8
 800589e:	b29b      	uxth	r3, r3
 80058a0:	2b21      	cmp	r3, #33	; 0x21
 80058a2:	d108      	bne.n	80058b6 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80058a4:	4b2b      	ldr	r3, [pc, #172]	; (8005954 <USBD_HID_Setup+0x20c>)
 80058a6:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80058a8:	683b      	ldr	r3, [r7, #0]
 80058aa:	88db      	ldrh	r3, [r3, #6]
 80058ac:	2b09      	cmp	r3, #9
 80058ae:	bf28      	it	cs
 80058b0:	2309      	movcs	r3, #9
 80058b2:	82bb      	strh	r3, [r7, #20]
 80058b4:	e006      	b.n	80058c4 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80058b6:	6839      	ldr	r1, [r7, #0]
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f001 faf2 	bl	8006ea2 <USBD_CtlError>
            ret = USBD_FAIL;
 80058be:	2303      	movs	r3, #3
 80058c0:	75fb      	strb	r3, [r7, #23]
            break;
 80058c2:	e037      	b.n	8005934 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80058c4:	8abb      	ldrh	r3, [r7, #20]
 80058c6:	461a      	mov	r2, r3
 80058c8:	6939      	ldr	r1, [r7, #16]
 80058ca:	6878      	ldr	r0, [r7, #4]
 80058cc:	f001 fb5a 	bl	8006f84 <USBD_CtlSendData>
          break;
 80058d0:	e030      	b.n	8005934 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	2b03      	cmp	r3, #3
 80058dc:	d107      	bne.n	80058ee <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	3308      	adds	r3, #8
 80058e2:	2201      	movs	r2, #1
 80058e4:	4619      	mov	r1, r3
 80058e6:	6878      	ldr	r0, [r7, #4]
 80058e8:	f001 fb4c 	bl	8006f84 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80058ec:	e022      	b.n	8005934 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80058ee:	6839      	ldr	r1, [r7, #0]
 80058f0:	6878      	ldr	r0, [r7, #4]
 80058f2:	f001 fad6 	bl	8006ea2 <USBD_CtlError>
            ret = USBD_FAIL;
 80058f6:	2303      	movs	r3, #3
 80058f8:	75fb      	strb	r3, [r7, #23]
          break;
 80058fa:	e01b      	b.n	8005934 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005902:	b2db      	uxtb	r3, r3
 8005904:	2b03      	cmp	r3, #3
 8005906:	d106      	bne.n	8005916 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	885b      	ldrh	r3, [r3, #2]
 800590c:	b2db      	uxtb	r3, r3
 800590e:	461a      	mov	r2, r3
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005914:	e00e      	b.n	8005934 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005916:	6839      	ldr	r1, [r7, #0]
 8005918:	6878      	ldr	r0, [r7, #4]
 800591a:	f001 fac2 	bl	8006ea2 <USBD_CtlError>
            ret = USBD_FAIL;
 800591e:	2303      	movs	r3, #3
 8005920:	75fb      	strb	r3, [r7, #23]
          break;
 8005922:	e007      	b.n	8005934 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005924:	6839      	ldr	r1, [r7, #0]
 8005926:	6878      	ldr	r0, [r7, #4]
 8005928:	f001 fabb 	bl	8006ea2 <USBD_CtlError>
          ret = USBD_FAIL;
 800592c:	2303      	movs	r3, #3
 800592e:	75fb      	strb	r3, [r7, #23]
          break;
 8005930:	e000      	b.n	8005934 <USBD_HID_Setup+0x1ec>
          break;
 8005932:	bf00      	nop
      }
      break;
 8005934:	e006      	b.n	8005944 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005936:	6839      	ldr	r1, [r7, #0]
 8005938:	6878      	ldr	r0, [r7, #4]
 800593a:	f001 fab2 	bl	8006ea2 <USBD_CtlError>
      ret = USBD_FAIL;
 800593e:	2303      	movs	r3, #3
 8005940:	75fb      	strb	r3, [r7, #23]
      break;
 8005942:	bf00      	nop
  }

  return (uint8_t)ret;
 8005944:	7dfb      	ldrb	r3, [r7, #23]
}
 8005946:	4618      	mov	r0, r3
 8005948:	3718      	adds	r7, #24
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	20000454 	.word	0x20000454
 8005954:	2000043c 	.word	0x2000043c

08005958 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005958:	b580      	push	{r7, lr}
 800595a:	b086      	sub	sp, #24
 800595c:	af00      	add	r7, sp, #0
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	4613      	mov	r3, r2
 8005964:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	32b0      	adds	r2, #176	; 0xb0
 8005970:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005974:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8005976:	697b      	ldr	r3, [r7, #20]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d101      	bne.n	8005980 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 800597c:	2303      	movs	r3, #3
 800597e:	e014      	b.n	80059aa <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005986:	b2db      	uxtb	r3, r3
 8005988:	2b03      	cmp	r3, #3
 800598a:	d10d      	bne.n	80059a8 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 800598c:	697b      	ldr	r3, [r7, #20]
 800598e:	7b1b      	ldrb	r3, [r3, #12]
 8005990:	2b00      	cmp	r3, #0
 8005992:	d109      	bne.n	80059a8 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8005994:	697b      	ldr	r3, [r7, #20]
 8005996:	2201      	movs	r2, #1
 8005998:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800599a:	4b06      	ldr	r3, [pc, #24]	; (80059b4 <USBD_HID_SendReport+0x5c>)
 800599c:	7819      	ldrb	r1, [r3, #0]
 800599e:	88fb      	ldrh	r3, [r7, #6]
 80059a0:	68ba      	ldr	r2, [r7, #8]
 80059a2:	68f8      	ldr	r0, [r7, #12]
 80059a4:	f001 fef9 	bl	800779a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}
 80059b2:	bf00      	nop
 80059b4:	20000493 	.word	0x20000493

080059b8 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80059b8:	b580      	push	{r7, lr}
 80059ba:	b084      	sub	sp, #16
 80059bc:	af00      	add	r7, sp, #0
 80059be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80059c0:	2181      	movs	r1, #129	; 0x81
 80059c2:	4809      	ldr	r0, [pc, #36]	; (80059e8 <USBD_HID_GetFSCfgDesc+0x30>)
 80059c4:	f000 fc35 	bl	8006232 <USBD_GetEpDesc>
 80059c8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d002      	beq.n	80059d6 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	220a      	movs	r2, #10
 80059d4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	2222      	movs	r2, #34	; 0x22
 80059da:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80059dc:	4b02      	ldr	r3, [pc, #8]	; (80059e8 <USBD_HID_GetFSCfgDesc+0x30>)
}
 80059de:	4618      	mov	r0, r3
 80059e0:	3710      	adds	r7, #16
 80059e2:	46bd      	mov	sp, r7
 80059e4:	bd80      	pop	{r7, pc}
 80059e6:	bf00      	nop
 80059e8:	20000418 	.word	0x20000418

080059ec <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80059ec:	b580      	push	{r7, lr}
 80059ee:	b084      	sub	sp, #16
 80059f0:	af00      	add	r7, sp, #0
 80059f2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80059f4:	2181      	movs	r1, #129	; 0x81
 80059f6:	4809      	ldr	r0, [pc, #36]	; (8005a1c <USBD_HID_GetHSCfgDesc+0x30>)
 80059f8:	f000 fc1b 	bl	8006232 <USBD_GetEpDesc>
 80059fc:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d002      	beq.n	8005a0a <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	2207      	movs	r2, #7
 8005a08:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	2222      	movs	r2, #34	; 0x22
 8005a0e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005a10:	4b02      	ldr	r3, [pc, #8]	; (8005a1c <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005a12:	4618      	mov	r0, r3
 8005a14:	3710      	adds	r7, #16
 8005a16:	46bd      	mov	sp, r7
 8005a18:	bd80      	pop	{r7, pc}
 8005a1a:	bf00      	nop
 8005a1c:	20000418 	.word	0x20000418

08005a20 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005a20:	b580      	push	{r7, lr}
 8005a22:	b084      	sub	sp, #16
 8005a24:	af00      	add	r7, sp, #0
 8005a26:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005a28:	2181      	movs	r1, #129	; 0x81
 8005a2a:	4809      	ldr	r0, [pc, #36]	; (8005a50 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005a2c:	f000 fc01 	bl	8006232 <USBD_GetEpDesc>
 8005a30:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005a32:	68fb      	ldr	r3, [r7, #12]
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d002      	beq.n	8005a3e <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	220a      	movs	r2, #10
 8005a3c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2222      	movs	r2, #34	; 0x22
 8005a42:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005a44:	4b02      	ldr	r3, [pc, #8]	; (8005a50 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005a46:	4618      	mov	r0, r3
 8005a48:	3710      	adds	r7, #16
 8005a4a:	46bd      	mov	sp, r7
 8005a4c:	bd80      	pop	{r7, pc}
 8005a4e:	bf00      	nop
 8005a50:	20000418 	.word	0x20000418

08005a54 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005a54:	b480      	push	{r7}
 8005a56:	b083      	sub	sp, #12
 8005a58:	af00      	add	r7, sp, #0
 8005a5a:	6078      	str	r0, [r7, #4]
 8005a5c:	460b      	mov	r3, r1
 8005a5e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	32b0      	adds	r2, #176	; 0xb0
 8005a6a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a6e:	2200      	movs	r2, #0
 8005a70:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005a72:	2300      	movs	r3, #0
}
 8005a74:	4618      	mov	r0, r3
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	220a      	movs	r2, #10
 8005a8c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005a8e:	4b03      	ldr	r3, [pc, #12]	; (8005a9c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	370c      	adds	r7, #12
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr
 8005a9c:	20000448 	.word	0x20000448

08005aa0 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005aa0:	b580      	push	{r7, lr}
 8005aa2:	b086      	sub	sp, #24
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	60f8      	str	r0, [r7, #12]
 8005aa8:	60b9      	str	r1, [r7, #8]
 8005aaa:	4613      	mov	r3, r2
 8005aac:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d101      	bne.n	8005ab8 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005ab4:	2303      	movs	r3, #3
 8005ab6:	e01f      	b.n	8005af8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2200      	movs	r2, #0
 8005abc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	2200      	movs	r2, #0
 8005acc:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005ad0:	68bb      	ldr	r3, [r7, #8]
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d003      	beq.n	8005ade <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	68ba      	ldr	r2, [r7, #8]
 8005ada:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	79fa      	ldrb	r2, [r7, #7]
 8005aea:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005aec:	68f8      	ldr	r0, [r7, #12]
 8005aee:	f001 fd1f 	bl	8007530 <USBD_LL_Init>
 8005af2:	4603      	mov	r3, r0
 8005af4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005af6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005af8:	4618      	mov	r0, r3
 8005afa:	3718      	adds	r7, #24
 8005afc:	46bd      	mov	sp, r7
 8005afe:	bd80      	pop	{r7, pc}

08005b00 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005b00:	b580      	push	{r7, lr}
 8005b02:	b084      	sub	sp, #16
 8005b04:	af00      	add	r7, sp, #0
 8005b06:	6078      	str	r0, [r7, #4]
 8005b08:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005b0e:	683b      	ldr	r3, [r7, #0]
 8005b10:	2b00      	cmp	r3, #0
 8005b12:	d101      	bne.n	8005b18 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b14:	2303      	movs	r3, #3
 8005b16:	e025      	b.n	8005b64 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	683a      	ldr	r2, [r7, #0]
 8005b1c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	32ae      	adds	r2, #174	; 0xae
 8005b2a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b30:	2b00      	cmp	r3, #0
 8005b32:	d00f      	beq.n	8005b54 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	32ae      	adds	r2, #174	; 0xae
 8005b3e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b44:	f107 020e 	add.w	r2, r7, #14
 8005b48:	4610      	mov	r0, r2
 8005b4a:	4798      	blx	r3
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005b5a:	1c5a      	adds	r2, r3, #1
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005b62:	2300      	movs	r3, #0
}
 8005b64:	4618      	mov	r0, r3
 8005b66:	3710      	adds	r7, #16
 8005b68:	46bd      	mov	sp, r7
 8005b6a:	bd80      	pop	{r7, pc}

08005b6c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005b6c:	b580      	push	{r7, lr}
 8005b6e:	b082      	sub	sp, #8
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f001 fd27 	bl	80075c8 <USBD_LL_Start>
 8005b7a:	4603      	mov	r3, r0
}
 8005b7c:	4618      	mov	r0, r3
 8005b7e:	3708      	adds	r7, #8
 8005b80:	46bd      	mov	sp, r7
 8005b82:	bd80      	pop	{r7, pc}

08005b84 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005b84:	b480      	push	{r7}
 8005b86:	b083      	sub	sp, #12
 8005b88:	af00      	add	r7, sp, #0
 8005b8a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005b8c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	370c      	adds	r7, #12
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr

08005b9a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b9a:	b580      	push	{r7, lr}
 8005b9c:	b084      	sub	sp, #16
 8005b9e:	af00      	add	r7, sp, #0
 8005ba0:	6078      	str	r0, [r7, #4]
 8005ba2:	460b      	mov	r3, r1
 8005ba4:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d009      	beq.n	8005bc8 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	78fa      	ldrb	r2, [r7, #3]
 8005bbe:	4611      	mov	r1, r2
 8005bc0:	6878      	ldr	r0, [r7, #4]
 8005bc2:	4798      	blx	r3
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bca:	4618      	mov	r0, r3
 8005bcc:	3710      	adds	r7, #16
 8005bce:	46bd      	mov	sp, r7
 8005bd0:	bd80      	pop	{r7, pc}

08005bd2 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005bd2:	b580      	push	{r7, lr}
 8005bd4:	b084      	sub	sp, #16
 8005bd6:	af00      	add	r7, sp, #0
 8005bd8:	6078      	str	r0, [r7, #4]
 8005bda:	460b      	mov	r3, r1
 8005bdc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005bde:	2300      	movs	r3, #0
 8005be0:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005be8:	685b      	ldr	r3, [r3, #4]
 8005bea:	78fa      	ldrb	r2, [r7, #3]
 8005bec:	4611      	mov	r1, r2
 8005bee:	6878      	ldr	r0, [r7, #4]
 8005bf0:	4798      	blx	r3
 8005bf2:	4603      	mov	r3, r0
 8005bf4:	2b00      	cmp	r3, #0
 8005bf6:	d001      	beq.n	8005bfc <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005bf8:	2303      	movs	r3, #3
 8005bfa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005bfc:	7bfb      	ldrb	r3, [r7, #15]
}
 8005bfe:	4618      	mov	r0, r3
 8005c00:	3710      	adds	r7, #16
 8005c02:	46bd      	mov	sp, r7
 8005c04:	bd80      	pop	{r7, pc}

08005c06 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b084      	sub	sp, #16
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
 8005c0e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c16:	6839      	ldr	r1, [r7, #0]
 8005c18:	4618      	mov	r0, r3
 8005c1a:	f001 f908 	bl	8006e2e <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2201      	movs	r2, #1
 8005c22:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005c2c:	461a      	mov	r2, r3
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c3a:	f003 031f 	and.w	r3, r3, #31
 8005c3e:	2b02      	cmp	r3, #2
 8005c40:	d01a      	beq.n	8005c78 <USBD_LL_SetupStage+0x72>
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d822      	bhi.n	8005c8c <USBD_LL_SetupStage+0x86>
 8005c46:	2b00      	cmp	r3, #0
 8005c48:	d002      	beq.n	8005c50 <USBD_LL_SetupStage+0x4a>
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d00a      	beq.n	8005c64 <USBD_LL_SetupStage+0x5e>
 8005c4e:	e01d      	b.n	8005c8c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c56:	4619      	mov	r1, r3
 8005c58:	6878      	ldr	r0, [r7, #4]
 8005c5a:	f000 fb5f 	bl	800631c <USBD_StdDevReq>
 8005c5e:	4603      	mov	r3, r0
 8005c60:	73fb      	strb	r3, [r7, #15]
      break;
 8005c62:	e020      	b.n	8005ca6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	6878      	ldr	r0, [r7, #4]
 8005c6e:	f000 fbc7 	bl	8006400 <USBD_StdItfReq>
 8005c72:	4603      	mov	r3, r0
 8005c74:	73fb      	strb	r3, [r7, #15]
      break;
 8005c76:	e016      	b.n	8005ca6 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005c7e:	4619      	mov	r1, r3
 8005c80:	6878      	ldr	r0, [r7, #4]
 8005c82:	f000 fc29 	bl	80064d8 <USBD_StdEPReq>
 8005c86:	4603      	mov	r3, r0
 8005c88:	73fb      	strb	r3, [r7, #15]
      break;
 8005c8a:	e00c      	b.n	8005ca6 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005c92:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005c96:	b2db      	uxtb	r3, r3
 8005c98:	4619      	mov	r1, r3
 8005c9a:	6878      	ldr	r0, [r7, #4]
 8005c9c:	f001 fcf4 	bl	8007688 <USBD_LL_StallEP>
 8005ca0:	4603      	mov	r3, r0
 8005ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8005ca4:	bf00      	nop
  }

  return ret;
 8005ca6:	7bfb      	ldrb	r3, [r7, #15]
}
 8005ca8:	4618      	mov	r0, r3
 8005caa:	3710      	adds	r7, #16
 8005cac:	46bd      	mov	sp, r7
 8005cae:	bd80      	pop	{r7, pc}

08005cb0 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	60f8      	str	r0, [r7, #12]
 8005cb8:	460b      	mov	r3, r1
 8005cba:	607a      	str	r2, [r7, #4]
 8005cbc:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005cbe:	2300      	movs	r3, #0
 8005cc0:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005cc2:	7afb      	ldrb	r3, [r7, #11]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d16e      	bne.n	8005da6 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005cce:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005cd6:	2b03      	cmp	r3, #3
 8005cd8:	f040 8098 	bne.w	8005e0c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005cdc:	693b      	ldr	r3, [r7, #16]
 8005cde:	689a      	ldr	r2, [r3, #8]
 8005ce0:	693b      	ldr	r3, [r7, #16]
 8005ce2:	68db      	ldr	r3, [r3, #12]
 8005ce4:	429a      	cmp	r2, r3
 8005ce6:	d913      	bls.n	8005d10 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005ce8:	693b      	ldr	r3, [r7, #16]
 8005cea:	689a      	ldr	r2, [r3, #8]
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	1ad2      	subs	r2, r2, r3
 8005cf2:	693b      	ldr	r3, [r7, #16]
 8005cf4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005cf6:	693b      	ldr	r3, [r7, #16]
 8005cf8:	68da      	ldr	r2, [r3, #12]
 8005cfa:	693b      	ldr	r3, [r7, #16]
 8005cfc:	689b      	ldr	r3, [r3, #8]
 8005cfe:	4293      	cmp	r3, r2
 8005d00:	bf28      	it	cs
 8005d02:	4613      	movcs	r3, r2
 8005d04:	461a      	mov	r2, r3
 8005d06:	6879      	ldr	r1, [r7, #4]
 8005d08:	68f8      	ldr	r0, [r7, #12]
 8005d0a:	f001 f967 	bl	8006fdc <USBD_CtlContinueRx>
 8005d0e:	e07d      	b.n	8005e0c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d16:	f003 031f 	and.w	r3, r3, #31
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d014      	beq.n	8005d48 <USBD_LL_DataOutStage+0x98>
 8005d1e:	2b02      	cmp	r3, #2
 8005d20:	d81d      	bhi.n	8005d5e <USBD_LL_DataOutStage+0xae>
 8005d22:	2b00      	cmp	r3, #0
 8005d24:	d002      	beq.n	8005d2c <USBD_LL_DataOutStage+0x7c>
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d003      	beq.n	8005d32 <USBD_LL_DataOutStage+0x82>
 8005d2a:	e018      	b.n	8005d5e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005d2c:	2300      	movs	r3, #0
 8005d2e:	75bb      	strb	r3, [r7, #22]
            break;
 8005d30:	e018      	b.n	8005d64 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005d38:	b2db      	uxtb	r3, r3
 8005d3a:	4619      	mov	r1, r3
 8005d3c:	68f8      	ldr	r0, [r7, #12]
 8005d3e:	f000 fa5e 	bl	80061fe <USBD_CoreFindIF>
 8005d42:	4603      	mov	r3, r0
 8005d44:	75bb      	strb	r3, [r7, #22]
            break;
 8005d46:	e00d      	b.n	8005d64 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005d4e:	b2db      	uxtb	r3, r3
 8005d50:	4619      	mov	r1, r3
 8005d52:	68f8      	ldr	r0, [r7, #12]
 8005d54:	f000 fa60 	bl	8006218 <USBD_CoreFindEP>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	75bb      	strb	r3, [r7, #22]
            break;
 8005d5c:	e002      	b.n	8005d64 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	75bb      	strb	r3, [r7, #22]
            break;
 8005d62:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005d64:	7dbb      	ldrb	r3, [r7, #22]
 8005d66:	2b00      	cmp	r3, #0
 8005d68:	d119      	bne.n	8005d9e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d70:	b2db      	uxtb	r3, r3
 8005d72:	2b03      	cmp	r3, #3
 8005d74:	d113      	bne.n	8005d9e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005d76:	7dba      	ldrb	r2, [r7, #22]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	32ae      	adds	r2, #174	; 0xae
 8005d7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d80:	691b      	ldr	r3, [r3, #16]
 8005d82:	2b00      	cmp	r3, #0
 8005d84:	d00b      	beq.n	8005d9e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005d86:	7dba      	ldrb	r2, [r7, #22]
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005d8e:	7dba      	ldrb	r2, [r7, #22]
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	32ae      	adds	r2, #174	; 0xae
 8005d94:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d98:	691b      	ldr	r3, [r3, #16]
 8005d9a:	68f8      	ldr	r0, [r7, #12]
 8005d9c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005d9e:	68f8      	ldr	r0, [r7, #12]
 8005da0:	f001 f92d 	bl	8006ffe <USBD_CtlSendStatus>
 8005da4:	e032      	b.n	8005e0c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005da6:	7afb      	ldrb	r3, [r7, #11]
 8005da8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dac:	b2db      	uxtb	r3, r3
 8005dae:	4619      	mov	r1, r3
 8005db0:	68f8      	ldr	r0, [r7, #12]
 8005db2:	f000 fa31 	bl	8006218 <USBD_CoreFindEP>
 8005db6:	4603      	mov	r3, r0
 8005db8:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005dba:	7dbb      	ldrb	r3, [r7, #22]
 8005dbc:	2bff      	cmp	r3, #255	; 0xff
 8005dbe:	d025      	beq.n	8005e0c <USBD_LL_DataOutStage+0x15c>
 8005dc0:	7dbb      	ldrb	r3, [r7, #22]
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d122      	bne.n	8005e0c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dc6:	68fb      	ldr	r3, [r7, #12]
 8005dc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dcc:	b2db      	uxtb	r3, r3
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	d117      	bne.n	8005e02 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005dd2:	7dba      	ldrb	r2, [r7, #22]
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	32ae      	adds	r2, #174	; 0xae
 8005dd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ddc:	699b      	ldr	r3, [r3, #24]
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d00f      	beq.n	8005e02 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005de2:	7dba      	ldrb	r2, [r7, #22]
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005dea:	7dba      	ldrb	r2, [r7, #22]
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	32ae      	adds	r2, #174	; 0xae
 8005df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005df4:	699b      	ldr	r3, [r3, #24]
 8005df6:	7afa      	ldrb	r2, [r7, #11]
 8005df8:	4611      	mov	r1, r2
 8005dfa:	68f8      	ldr	r0, [r7, #12]
 8005dfc:	4798      	blx	r3
 8005dfe:	4603      	mov	r3, r0
 8005e00:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005e02:	7dfb      	ldrb	r3, [r7, #23]
 8005e04:	2b00      	cmp	r3, #0
 8005e06:	d001      	beq.n	8005e0c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005e08:	7dfb      	ldrb	r3, [r7, #23]
 8005e0a:	e000      	b.n	8005e0e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005e0c:	2300      	movs	r3, #0
}
 8005e0e:	4618      	mov	r0, r3
 8005e10:	3718      	adds	r7, #24
 8005e12:	46bd      	mov	sp, r7
 8005e14:	bd80      	pop	{r7, pc}

08005e16 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005e16:	b580      	push	{r7, lr}
 8005e18:	b086      	sub	sp, #24
 8005e1a:	af00      	add	r7, sp, #0
 8005e1c:	60f8      	str	r0, [r7, #12]
 8005e1e:	460b      	mov	r3, r1
 8005e20:	607a      	str	r2, [r7, #4]
 8005e22:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005e24:	7afb      	ldrb	r3, [r7, #11]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d16f      	bne.n	8005f0a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005e2a:	68fb      	ldr	r3, [r7, #12]
 8005e2c:	3314      	adds	r3, #20
 8005e2e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005e36:	2b02      	cmp	r3, #2
 8005e38:	d15a      	bne.n	8005ef0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005e3a:	693b      	ldr	r3, [r7, #16]
 8005e3c:	689a      	ldr	r2, [r3, #8]
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	68db      	ldr	r3, [r3, #12]
 8005e42:	429a      	cmp	r2, r3
 8005e44:	d914      	bls.n	8005e70 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005e46:	693b      	ldr	r3, [r7, #16]
 8005e48:	689a      	ldr	r2, [r3, #8]
 8005e4a:	693b      	ldr	r3, [r7, #16]
 8005e4c:	68db      	ldr	r3, [r3, #12]
 8005e4e:	1ad2      	subs	r2, r2, r3
 8005e50:	693b      	ldr	r3, [r7, #16]
 8005e52:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005e54:	693b      	ldr	r3, [r7, #16]
 8005e56:	689b      	ldr	r3, [r3, #8]
 8005e58:	461a      	mov	r2, r3
 8005e5a:	6879      	ldr	r1, [r7, #4]
 8005e5c:	68f8      	ldr	r0, [r7, #12]
 8005e5e:	f001 f8ac 	bl	8006fba <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005e62:	2300      	movs	r3, #0
 8005e64:	2200      	movs	r2, #0
 8005e66:	2100      	movs	r1, #0
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f001 fcb7 	bl	80077dc <USBD_LL_PrepareReceive>
 8005e6e:	e03f      	b.n	8005ef0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005e70:	693b      	ldr	r3, [r7, #16]
 8005e72:	68da      	ldr	r2, [r3, #12]
 8005e74:	693b      	ldr	r3, [r7, #16]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	429a      	cmp	r2, r3
 8005e7a:	d11c      	bne.n	8005eb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005e7c:	693b      	ldr	r3, [r7, #16]
 8005e7e:	685a      	ldr	r2, [r3, #4]
 8005e80:	693b      	ldr	r3, [r7, #16]
 8005e82:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005e84:	429a      	cmp	r2, r3
 8005e86:	d316      	bcc.n	8005eb6 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005e88:	693b      	ldr	r3, [r7, #16]
 8005e8a:	685a      	ldr	r2, [r3, #4]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
 8005e8e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005e92:	429a      	cmp	r2, r3
 8005e94:	d20f      	bcs.n	8005eb6 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005e96:	2200      	movs	r2, #0
 8005e98:	2100      	movs	r1, #0
 8005e9a:	68f8      	ldr	r0, [r7, #12]
 8005e9c:	f001 f88d 	bl	8006fba <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	2200      	movs	r2, #0
 8005eac:	2100      	movs	r1, #0
 8005eae:	68f8      	ldr	r0, [r7, #12]
 8005eb0:	f001 fc94 	bl	80077dc <USBD_LL_PrepareReceive>
 8005eb4:	e01c      	b.n	8005ef0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ebc:	b2db      	uxtb	r3, r3
 8005ebe:	2b03      	cmp	r3, #3
 8005ec0:	d10f      	bne.n	8005ee2 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005ec8:	68db      	ldr	r3, [r3, #12]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d009      	beq.n	8005ee2 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005edc:	68db      	ldr	r3, [r3, #12]
 8005ede:	68f8      	ldr	r0, [r7, #12]
 8005ee0:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005ee2:	2180      	movs	r1, #128	; 0x80
 8005ee4:	68f8      	ldr	r0, [r7, #12]
 8005ee6:	f001 fbcf 	bl	8007688 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005eea:	68f8      	ldr	r0, [r7, #12]
 8005eec:	f001 f89a 	bl	8007024 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005ef0:	68fb      	ldr	r3, [r7, #12]
 8005ef2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	d03a      	beq.n	8005f70 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005efa:	68f8      	ldr	r0, [r7, #12]
 8005efc:	f7ff fe42 	bl	8005b84 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005f00:	68fb      	ldr	r3, [r7, #12]
 8005f02:	2200      	movs	r2, #0
 8005f04:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005f08:	e032      	b.n	8005f70 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005f0a:	7afb      	ldrb	r3, [r7, #11]
 8005f0c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005f10:	b2db      	uxtb	r3, r3
 8005f12:	4619      	mov	r1, r3
 8005f14:	68f8      	ldr	r0, [r7, #12]
 8005f16:	f000 f97f 	bl	8006218 <USBD_CoreFindEP>
 8005f1a:	4603      	mov	r3, r0
 8005f1c:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f1e:	7dfb      	ldrb	r3, [r7, #23]
 8005f20:	2bff      	cmp	r3, #255	; 0xff
 8005f22:	d025      	beq.n	8005f70 <USBD_LL_DataInStage+0x15a>
 8005f24:	7dfb      	ldrb	r3, [r7, #23]
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d122      	bne.n	8005f70 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b03      	cmp	r3, #3
 8005f34:	d11c      	bne.n	8005f70 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005f36:	7dfa      	ldrb	r2, [r7, #23]
 8005f38:	68fb      	ldr	r3, [r7, #12]
 8005f3a:	32ae      	adds	r2, #174	; 0xae
 8005f3c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f40:	695b      	ldr	r3, [r3, #20]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d014      	beq.n	8005f70 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005f46:	7dfa      	ldrb	r2, [r7, #23]
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005f4e:	7dfa      	ldrb	r2, [r7, #23]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	32ae      	adds	r2, #174	; 0xae
 8005f54:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f58:	695b      	ldr	r3, [r3, #20]
 8005f5a:	7afa      	ldrb	r2, [r7, #11]
 8005f5c:	4611      	mov	r1, r2
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	4798      	blx	r3
 8005f62:	4603      	mov	r3, r0
 8005f64:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8005f66:	7dbb      	ldrb	r3, [r7, #22]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005f6c:	7dbb      	ldrb	r3, [r7, #22]
 8005f6e:	e000      	b.n	8005f72 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005f70:	2300      	movs	r3, #0
}
 8005f72:	4618      	mov	r0, r3
 8005f74:	3718      	adds	r7, #24
 8005f76:	46bd      	mov	sp, r7
 8005f78:	bd80      	pop	{r7, pc}

08005f7a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005f7a:	b580      	push	{r7, lr}
 8005f7c:	b084      	sub	sp, #16
 8005f7e:	af00      	add	r7, sp, #0
 8005f80:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f82:	2300      	movs	r3, #0
 8005f84:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f86:	687b      	ldr	r3, [r7, #4]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	2200      	movs	r2, #0
 8005f9a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	2200      	movs	r2, #0
 8005fa0:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d014      	beq.n	8005fe0 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fbc:	685b      	ldr	r3, [r3, #4]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00e      	beq.n	8005fe0 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005fc8:	685b      	ldr	r3, [r3, #4]
 8005fca:	687a      	ldr	r2, [r7, #4]
 8005fcc:	6852      	ldr	r2, [r2, #4]
 8005fce:	b2d2      	uxtb	r2, r2
 8005fd0:	4611      	mov	r1, r2
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	4798      	blx	r3
 8005fd6:	4603      	mov	r3, r0
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d001      	beq.n	8005fe0 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005fdc:	2303      	movs	r3, #3
 8005fde:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005fe0:	2340      	movs	r3, #64	; 0x40
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	2100      	movs	r1, #0
 8005fe6:	6878      	ldr	r0, [r7, #4]
 8005fe8:	f001 fb09 	bl	80075fe <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2201      	movs	r2, #1
 8005ff0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2240      	movs	r2, #64	; 0x40
 8005ff8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005ffc:	2340      	movs	r3, #64	; 0x40
 8005ffe:	2200      	movs	r2, #0
 8006000:	2180      	movs	r1, #128	; 0x80
 8006002:	6878      	ldr	r0, [r7, #4]
 8006004:	f001 fafb 	bl	80075fe <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	2240      	movs	r2, #64	; 0x40
 8006012:	621a      	str	r2, [r3, #32]

  return ret;
 8006014:	7bfb      	ldrb	r3, [r7, #15]
}
 8006016:	4618      	mov	r0, r3
 8006018:	3710      	adds	r7, #16
 800601a:	46bd      	mov	sp, r7
 800601c:	bd80      	pop	{r7, pc}

0800601e <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800601e:	b480      	push	{r7}
 8006020:	b083      	sub	sp, #12
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	460b      	mov	r3, r1
 8006028:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	78fa      	ldrb	r2, [r7, #3]
 800602e:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	370c      	adds	r7, #12
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr

0800603e <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800603e:	b480      	push	{r7}
 8006040:	b083      	sub	sp, #12
 8006042:	af00      	add	r7, sp, #0
 8006044:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800604c:	b2da      	uxtb	r2, r3
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2204      	movs	r2, #4
 8006058:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800605c:	2300      	movs	r3, #0
}
 800605e:	4618      	mov	r0, r3
 8006060:	370c      	adds	r7, #12
 8006062:	46bd      	mov	sp, r7
 8006064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006068:	4770      	bx	lr

0800606a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800606a:	b480      	push	{r7}
 800606c:	b083      	sub	sp, #12
 800606e:	af00      	add	r7, sp, #0
 8006070:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006078:	b2db      	uxtb	r3, r3
 800607a:	2b04      	cmp	r3, #4
 800607c:	d106      	bne.n	800608c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006084:	b2da      	uxtb	r2, r3
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800608c:	2300      	movs	r3, #0
}
 800608e:	4618      	mov	r0, r3
 8006090:	370c      	adds	r7, #12
 8006092:	46bd      	mov	sp, r7
 8006094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006098:	4770      	bx	lr

0800609a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800609a:	b580      	push	{r7, lr}
 800609c:	b082      	sub	sp, #8
 800609e:	af00      	add	r7, sp, #0
 80060a0:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060a8:	b2db      	uxtb	r3, r3
 80060aa:	2b03      	cmp	r3, #3
 80060ac:	d110      	bne.n	80060d0 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00b      	beq.n	80060d0 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060be:	69db      	ldr	r3, [r3, #28]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d005      	beq.n	80060d0 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80060ca:	69db      	ldr	r3, [r3, #28]
 80060cc:	6878      	ldr	r0, [r7, #4]
 80060ce:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80060d0:	2300      	movs	r3, #0
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3708      	adds	r7, #8
 80060d6:	46bd      	mov	sp, r7
 80060d8:	bd80      	pop	{r7, pc}

080060da <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80060da:	b580      	push	{r7, lr}
 80060dc:	b082      	sub	sp, #8
 80060de:	af00      	add	r7, sp, #0
 80060e0:	6078      	str	r0, [r7, #4]
 80060e2:	460b      	mov	r3, r1
 80060e4:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80060e6:	687b      	ldr	r3, [r7, #4]
 80060e8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	32ae      	adds	r2, #174	; 0xae
 80060f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060f4:	2b00      	cmp	r3, #0
 80060f6:	d101      	bne.n	80060fc <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80060f8:	2303      	movs	r3, #3
 80060fa:	e01c      	b.n	8006136 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006102:	b2db      	uxtb	r3, r3
 8006104:	2b03      	cmp	r3, #3
 8006106:	d115      	bne.n	8006134 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	32ae      	adds	r2, #174	; 0xae
 8006112:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006116:	6a1b      	ldr	r3, [r3, #32]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d00b      	beq.n	8006134 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	32ae      	adds	r2, #174	; 0xae
 8006126:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800612a:	6a1b      	ldr	r3, [r3, #32]
 800612c:	78fa      	ldrb	r2, [r7, #3]
 800612e:	4611      	mov	r1, r2
 8006130:	6878      	ldr	r0, [r7, #4]
 8006132:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006134:	2300      	movs	r3, #0
}
 8006136:	4618      	mov	r0, r3
 8006138:	3708      	adds	r7, #8
 800613a:	46bd      	mov	sp, r7
 800613c:	bd80      	pop	{r7, pc}

0800613e <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800613e:	b580      	push	{r7, lr}
 8006140:	b082      	sub	sp, #8
 8006142:	af00      	add	r7, sp, #0
 8006144:	6078      	str	r0, [r7, #4]
 8006146:	460b      	mov	r3, r1
 8006148:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	32ae      	adds	r2, #174	; 0xae
 8006154:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006158:	2b00      	cmp	r3, #0
 800615a:	d101      	bne.n	8006160 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800615c:	2303      	movs	r3, #3
 800615e:	e01c      	b.n	800619a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006166:	b2db      	uxtb	r3, r3
 8006168:	2b03      	cmp	r3, #3
 800616a:	d115      	bne.n	8006198 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	32ae      	adds	r2, #174	; 0xae
 8006176:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800617a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800617c:	2b00      	cmp	r3, #0
 800617e:	d00b      	beq.n	8006198 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	32ae      	adds	r2, #174	; 0xae
 800618a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800618e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006190:	78fa      	ldrb	r2, [r7, #3]
 8006192:	4611      	mov	r1, r2
 8006194:	6878      	ldr	r0, [r7, #4]
 8006196:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006198:	2300      	movs	r3, #0
}
 800619a:	4618      	mov	r0, r3
 800619c:	3708      	adds	r7, #8
 800619e:	46bd      	mov	sp, r7
 80061a0:	bd80      	pop	{r7, pc}

080061a2 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80061a2:	b480      	push	{r7}
 80061a4:	b083      	sub	sp, #12
 80061a6:	af00      	add	r7, sp, #0
 80061a8:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80061aa:	2300      	movs	r3, #0
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	370c      	adds	r7, #12
 80061b0:	46bd      	mov	sp, r7
 80061b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061b6:	4770      	bx	lr

080061b8 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80061b8:	b580      	push	{r7, lr}
 80061ba:	b084      	sub	sp, #16
 80061bc:	af00      	add	r7, sp, #0
 80061be:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80061c0:	2300      	movs	r3, #0
 80061c2:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	2201      	movs	r2, #1
 80061c8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d00e      	beq.n	80061f4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80061d6:	687b      	ldr	r3, [r7, #4]
 80061d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061dc:	685b      	ldr	r3, [r3, #4]
 80061de:	687a      	ldr	r2, [r7, #4]
 80061e0:	6852      	ldr	r2, [r2, #4]
 80061e2:	b2d2      	uxtb	r2, r2
 80061e4:	4611      	mov	r1, r2
 80061e6:	6878      	ldr	r0, [r7, #4]
 80061e8:	4798      	blx	r3
 80061ea:	4603      	mov	r3, r0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d001      	beq.n	80061f4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80061f0:	2303      	movs	r3, #3
 80061f2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80061f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3710      	adds	r7, #16
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80061fe:	b480      	push	{r7}
 8006200:	b083      	sub	sp, #12
 8006202:	af00      	add	r7, sp, #0
 8006204:	6078      	str	r0, [r7, #4]
 8006206:	460b      	mov	r3, r1
 8006208:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800620a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800620c:	4618      	mov	r0, r3
 800620e:	370c      	adds	r7, #12
 8006210:	46bd      	mov	sp, r7
 8006212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006216:	4770      	bx	lr

08006218 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
 8006220:	460b      	mov	r3, r1
 8006222:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006224:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006232:	b580      	push	{r7, lr}
 8006234:	b086      	sub	sp, #24
 8006236:	af00      	add	r7, sp, #0
 8006238:	6078      	str	r0, [r7, #4]
 800623a:	460b      	mov	r3, r1
 800623c:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006246:	2300      	movs	r3, #0
 8006248:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	885b      	ldrh	r3, [r3, #2]
 800624e:	b29a      	uxth	r2, r3
 8006250:	68fb      	ldr	r3, [r7, #12]
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	b29b      	uxth	r3, r3
 8006256:	429a      	cmp	r2, r3
 8006258:	d920      	bls.n	800629c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	781b      	ldrb	r3, [r3, #0]
 800625e:	b29b      	uxth	r3, r3
 8006260:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006262:	e013      	b.n	800628c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006264:	f107 030a 	add.w	r3, r7, #10
 8006268:	4619      	mov	r1, r3
 800626a:	6978      	ldr	r0, [r7, #20]
 800626c:	f000 f81b 	bl	80062a6 <USBD_GetNextDesc>
 8006270:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	785b      	ldrb	r3, [r3, #1]
 8006276:	2b05      	cmp	r3, #5
 8006278:	d108      	bne.n	800628c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800627a:	697b      	ldr	r3, [r7, #20]
 800627c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	789b      	ldrb	r3, [r3, #2]
 8006282:	78fa      	ldrb	r2, [r7, #3]
 8006284:	429a      	cmp	r2, r3
 8006286:	d008      	beq.n	800629a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006288:	2300      	movs	r3, #0
 800628a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	885b      	ldrh	r3, [r3, #2]
 8006290:	b29a      	uxth	r2, r3
 8006292:	897b      	ldrh	r3, [r7, #10]
 8006294:	429a      	cmp	r2, r3
 8006296:	d8e5      	bhi.n	8006264 <USBD_GetEpDesc+0x32>
 8006298:	e000      	b.n	800629c <USBD_GetEpDesc+0x6a>
          break;
 800629a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800629c:	693b      	ldr	r3, [r7, #16]
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 80062a6:	b480      	push	{r7}
 80062a8:	b085      	sub	sp, #20
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	6078      	str	r0, [r7, #4]
 80062ae:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 80062b4:	683b      	ldr	r3, [r7, #0]
 80062b6:	881a      	ldrh	r2, [r3, #0]
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	b29b      	uxth	r3, r3
 80062be:	4413      	add	r3, r2
 80062c0:	b29a      	uxth	r2, r3
 80062c2:	683b      	ldr	r3, [r7, #0]
 80062c4:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	781b      	ldrb	r3, [r3, #0]
 80062ca:	461a      	mov	r2, r3
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	4413      	add	r3, r2
 80062d0:	60fb      	str	r3, [r7, #12]

  return (pnext);
 80062d2:	68fb      	ldr	r3, [r7, #12]
}
 80062d4:	4618      	mov	r0, r3
 80062d6:	3714      	adds	r7, #20
 80062d8:	46bd      	mov	sp, r7
 80062da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062de:	4770      	bx	lr

080062e0 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 80062e0:	b480      	push	{r7}
 80062e2:	b087      	sub	sp, #28
 80062e4:	af00      	add	r7, sp, #0
 80062e6:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	781b      	ldrb	r3, [r3, #0]
 80062f0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80062f2:	697b      	ldr	r3, [r7, #20]
 80062f4:	3301      	adds	r3, #1
 80062f6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80062f8:	697b      	ldr	r3, [r7, #20]
 80062fa:	781b      	ldrb	r3, [r3, #0]
 80062fc:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80062fe:	8a3b      	ldrh	r3, [r7, #16]
 8006300:	021b      	lsls	r3, r3, #8
 8006302:	b21a      	sxth	r2, r3
 8006304:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006308:	4313      	orrs	r3, r2
 800630a:	b21b      	sxth	r3, r3
 800630c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800630e:	89fb      	ldrh	r3, [r7, #14]
}
 8006310:	4618      	mov	r0, r3
 8006312:	371c      	adds	r7, #28
 8006314:	46bd      	mov	sp, r7
 8006316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631a:	4770      	bx	lr

0800631c <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800631c:	b580      	push	{r7, lr}
 800631e:	b084      	sub	sp, #16
 8006320:	af00      	add	r7, sp, #0
 8006322:	6078      	str	r0, [r7, #4]
 8006324:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	781b      	ldrb	r3, [r3, #0]
 800632e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006332:	2b40      	cmp	r3, #64	; 0x40
 8006334:	d005      	beq.n	8006342 <USBD_StdDevReq+0x26>
 8006336:	2b40      	cmp	r3, #64	; 0x40
 8006338:	d857      	bhi.n	80063ea <USBD_StdDevReq+0xce>
 800633a:	2b00      	cmp	r3, #0
 800633c:	d00f      	beq.n	800635e <USBD_StdDevReq+0x42>
 800633e:	2b20      	cmp	r3, #32
 8006340:	d153      	bne.n	80063ea <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	32ae      	adds	r2, #174	; 0xae
 800634c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006350:	689b      	ldr	r3, [r3, #8]
 8006352:	6839      	ldr	r1, [r7, #0]
 8006354:	6878      	ldr	r0, [r7, #4]
 8006356:	4798      	blx	r3
 8006358:	4603      	mov	r3, r0
 800635a:	73fb      	strb	r3, [r7, #15]
      break;
 800635c:	e04a      	b.n	80063f4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	785b      	ldrb	r3, [r3, #1]
 8006362:	2b09      	cmp	r3, #9
 8006364:	d83b      	bhi.n	80063de <USBD_StdDevReq+0xc2>
 8006366:	a201      	add	r2, pc, #4	; (adr r2, 800636c <USBD_StdDevReq+0x50>)
 8006368:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800636c:	080063c1 	.word	0x080063c1
 8006370:	080063d5 	.word	0x080063d5
 8006374:	080063df 	.word	0x080063df
 8006378:	080063cb 	.word	0x080063cb
 800637c:	080063df 	.word	0x080063df
 8006380:	0800639f 	.word	0x0800639f
 8006384:	08006395 	.word	0x08006395
 8006388:	080063df 	.word	0x080063df
 800638c:	080063b7 	.word	0x080063b7
 8006390:	080063a9 	.word	0x080063a9
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006394:	6839      	ldr	r1, [r7, #0]
 8006396:	6878      	ldr	r0, [r7, #4]
 8006398:	f000 fa3c 	bl	8006814 <USBD_GetDescriptor>
          break;
 800639c:	e024      	b.n	80063e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800639e:	6839      	ldr	r1, [r7, #0]
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f000 fba1 	bl	8006ae8 <USBD_SetAddress>
          break;
 80063a6:	e01f      	b.n	80063e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 80063a8:	6839      	ldr	r1, [r7, #0]
 80063aa:	6878      	ldr	r0, [r7, #4]
 80063ac:	f000 fbe0 	bl	8006b70 <USBD_SetConfig>
 80063b0:	4603      	mov	r3, r0
 80063b2:	73fb      	strb	r3, [r7, #15]
          break;
 80063b4:	e018      	b.n	80063e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 80063b6:	6839      	ldr	r1, [r7, #0]
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f000 fc83 	bl	8006cc4 <USBD_GetConfig>
          break;
 80063be:	e013      	b.n	80063e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 80063c0:	6839      	ldr	r1, [r7, #0]
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	f000 fcb4 	bl	8006d30 <USBD_GetStatus>
          break;
 80063c8:	e00e      	b.n	80063e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 80063ca:	6839      	ldr	r1, [r7, #0]
 80063cc:	6878      	ldr	r0, [r7, #4]
 80063ce:	f000 fce3 	bl	8006d98 <USBD_SetFeature>
          break;
 80063d2:	e009      	b.n	80063e8 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	6878      	ldr	r0, [r7, #4]
 80063d8:	f000 fd07 	bl	8006dea <USBD_ClrFeature>
          break;
 80063dc:	e004      	b.n	80063e8 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 80063de:	6839      	ldr	r1, [r7, #0]
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 fd5e 	bl	8006ea2 <USBD_CtlError>
          break;
 80063e6:	bf00      	nop
      }
      break;
 80063e8:	e004      	b.n	80063f4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	f000 fd58 	bl	8006ea2 <USBD_CtlError>
      break;
 80063f2:	bf00      	nop
  }

  return ret;
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}
 80063fe:	bf00      	nop

08006400 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006400:	b580      	push	{r7, lr}
 8006402:	b084      	sub	sp, #16
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	781b      	ldrb	r3, [r3, #0]
 8006412:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006416:	2b40      	cmp	r3, #64	; 0x40
 8006418:	d005      	beq.n	8006426 <USBD_StdItfReq+0x26>
 800641a:	2b40      	cmp	r3, #64	; 0x40
 800641c:	d852      	bhi.n	80064c4 <USBD_StdItfReq+0xc4>
 800641e:	2b00      	cmp	r3, #0
 8006420:	d001      	beq.n	8006426 <USBD_StdItfReq+0x26>
 8006422:	2b20      	cmp	r3, #32
 8006424:	d14e      	bne.n	80064c4 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800642c:	b2db      	uxtb	r3, r3
 800642e:	3b01      	subs	r3, #1
 8006430:	2b02      	cmp	r3, #2
 8006432:	d840      	bhi.n	80064b6 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	889b      	ldrh	r3, [r3, #4]
 8006438:	b2db      	uxtb	r3, r3
 800643a:	2b01      	cmp	r3, #1
 800643c:	d836      	bhi.n	80064ac <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 800643e:	683b      	ldr	r3, [r7, #0]
 8006440:	889b      	ldrh	r3, [r3, #4]
 8006442:	b2db      	uxtb	r3, r3
 8006444:	4619      	mov	r1, r3
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f7ff fed9 	bl	80061fe <USBD_CoreFindIF>
 800644c:	4603      	mov	r3, r0
 800644e:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006450:	7bbb      	ldrb	r3, [r7, #14]
 8006452:	2bff      	cmp	r3, #255	; 0xff
 8006454:	d01d      	beq.n	8006492 <USBD_StdItfReq+0x92>
 8006456:	7bbb      	ldrb	r3, [r7, #14]
 8006458:	2b00      	cmp	r3, #0
 800645a:	d11a      	bne.n	8006492 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800645c:	7bba      	ldrb	r2, [r7, #14]
 800645e:	687b      	ldr	r3, [r7, #4]
 8006460:	32ae      	adds	r2, #174	; 0xae
 8006462:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006466:	689b      	ldr	r3, [r3, #8]
 8006468:	2b00      	cmp	r3, #0
 800646a:	d00f      	beq.n	800648c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800646c:	7bba      	ldrb	r2, [r7, #14]
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006474:	7bba      	ldrb	r2, [r7, #14]
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	32ae      	adds	r2, #174	; 0xae
 800647a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800647e:	689b      	ldr	r3, [r3, #8]
 8006480:	6839      	ldr	r1, [r7, #0]
 8006482:	6878      	ldr	r0, [r7, #4]
 8006484:	4798      	blx	r3
 8006486:	4603      	mov	r3, r0
 8006488:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800648a:	e004      	b.n	8006496 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800648c:	2303      	movs	r3, #3
 800648e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006490:	e001      	b.n	8006496 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006492:	2303      	movs	r3, #3
 8006494:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	88db      	ldrh	r3, [r3, #6]
 800649a:	2b00      	cmp	r3, #0
 800649c:	d110      	bne.n	80064c0 <USBD_StdItfReq+0xc0>
 800649e:	7bfb      	ldrb	r3, [r7, #15]
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d10d      	bne.n	80064c0 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 80064a4:	6878      	ldr	r0, [r7, #4]
 80064a6:	f000 fdaa 	bl	8006ffe <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80064aa:	e009      	b.n	80064c0 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 80064ac:	6839      	ldr	r1, [r7, #0]
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 fcf7 	bl	8006ea2 <USBD_CtlError>
          break;
 80064b4:	e004      	b.n	80064c0 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 fcf2 	bl	8006ea2 <USBD_CtlError>
          break;
 80064be:	e000      	b.n	80064c2 <USBD_StdItfReq+0xc2>
          break;
 80064c0:	bf00      	nop
      }
      break;
 80064c2:	e004      	b.n	80064ce <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 80064c4:	6839      	ldr	r1, [r7, #0]
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f000 fceb 	bl	8006ea2 <USBD_CtlError>
      break;
 80064cc:	bf00      	nop
  }

  return ret;
 80064ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d0:	4618      	mov	r0, r3
 80064d2:	3710      	adds	r7, #16
 80064d4:	46bd      	mov	sp, r7
 80064d6:	bd80      	pop	{r7, pc}

080064d8 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064d8:	b580      	push	{r7, lr}
 80064da:	b084      	sub	sp, #16
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 80064e2:	2300      	movs	r3, #0
 80064e4:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	889b      	ldrh	r3, [r3, #4]
 80064ea:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064ec:	683b      	ldr	r3, [r7, #0]
 80064ee:	781b      	ldrb	r3, [r3, #0]
 80064f0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d007      	beq.n	8006508 <USBD_StdEPReq+0x30>
 80064f8:	2b40      	cmp	r3, #64	; 0x40
 80064fa:	f200 817f 	bhi.w	80067fc <USBD_StdEPReq+0x324>
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d02a      	beq.n	8006558 <USBD_StdEPReq+0x80>
 8006502:	2b20      	cmp	r3, #32
 8006504:	f040 817a 	bne.w	80067fc <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006508:	7bbb      	ldrb	r3, [r7, #14]
 800650a:	4619      	mov	r1, r3
 800650c:	6878      	ldr	r0, [r7, #4]
 800650e:	f7ff fe83 	bl	8006218 <USBD_CoreFindEP>
 8006512:	4603      	mov	r3, r0
 8006514:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006516:	7b7b      	ldrb	r3, [r7, #13]
 8006518:	2bff      	cmp	r3, #255	; 0xff
 800651a:	f000 8174 	beq.w	8006806 <USBD_StdEPReq+0x32e>
 800651e:	7b7b      	ldrb	r3, [r7, #13]
 8006520:	2b00      	cmp	r3, #0
 8006522:	f040 8170 	bne.w	8006806 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006526:	7b7a      	ldrb	r2, [r7, #13]
 8006528:	687b      	ldr	r3, [r7, #4]
 800652a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 800652e:	7b7a      	ldrb	r2, [r7, #13]
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	32ae      	adds	r2, #174	; 0xae
 8006534:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006538:	689b      	ldr	r3, [r3, #8]
 800653a:	2b00      	cmp	r3, #0
 800653c:	f000 8163 	beq.w	8006806 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006540:	7b7a      	ldrb	r2, [r7, #13]
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	32ae      	adds	r2, #174	; 0xae
 8006546:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800654a:	689b      	ldr	r3, [r3, #8]
 800654c:	6839      	ldr	r1, [r7, #0]
 800654e:	6878      	ldr	r0, [r7, #4]
 8006550:	4798      	blx	r3
 8006552:	4603      	mov	r3, r0
 8006554:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006556:	e156      	b.n	8006806 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006558:	683b      	ldr	r3, [r7, #0]
 800655a:	785b      	ldrb	r3, [r3, #1]
 800655c:	2b03      	cmp	r3, #3
 800655e:	d008      	beq.n	8006572 <USBD_StdEPReq+0x9a>
 8006560:	2b03      	cmp	r3, #3
 8006562:	f300 8145 	bgt.w	80067f0 <USBD_StdEPReq+0x318>
 8006566:	2b00      	cmp	r3, #0
 8006568:	f000 809b 	beq.w	80066a2 <USBD_StdEPReq+0x1ca>
 800656c:	2b01      	cmp	r3, #1
 800656e:	d03c      	beq.n	80065ea <USBD_StdEPReq+0x112>
 8006570:	e13e      	b.n	80067f0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006578:	b2db      	uxtb	r3, r3
 800657a:	2b02      	cmp	r3, #2
 800657c:	d002      	beq.n	8006584 <USBD_StdEPReq+0xac>
 800657e:	2b03      	cmp	r3, #3
 8006580:	d016      	beq.n	80065b0 <USBD_StdEPReq+0xd8>
 8006582:	e02c      	b.n	80065de <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	2b00      	cmp	r3, #0
 8006588:	d00d      	beq.n	80065a6 <USBD_StdEPReq+0xce>
 800658a:	7bbb      	ldrb	r3, [r7, #14]
 800658c:	2b80      	cmp	r3, #128	; 0x80
 800658e:	d00a      	beq.n	80065a6 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006590:	7bbb      	ldrb	r3, [r7, #14]
 8006592:	4619      	mov	r1, r3
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f001 f877 	bl	8007688 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800659a:	2180      	movs	r1, #128	; 0x80
 800659c:	6878      	ldr	r0, [r7, #4]
 800659e:	f001 f873 	bl	8007688 <USBD_LL_StallEP>
 80065a2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80065a4:	e020      	b.n	80065e8 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 80065a6:	6839      	ldr	r1, [r7, #0]
 80065a8:	6878      	ldr	r0, [r7, #4]
 80065aa:	f000 fc7a 	bl	8006ea2 <USBD_CtlError>
              break;
 80065ae:	e01b      	b.n	80065e8 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	885b      	ldrh	r3, [r3, #2]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d10e      	bne.n	80065d6 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 80065b8:	7bbb      	ldrb	r3, [r7, #14]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d00b      	beq.n	80065d6 <USBD_StdEPReq+0xfe>
 80065be:	7bbb      	ldrb	r3, [r7, #14]
 80065c0:	2b80      	cmp	r3, #128	; 0x80
 80065c2:	d008      	beq.n	80065d6 <USBD_StdEPReq+0xfe>
 80065c4:	683b      	ldr	r3, [r7, #0]
 80065c6:	88db      	ldrh	r3, [r3, #6]
 80065c8:	2b00      	cmp	r3, #0
 80065ca:	d104      	bne.n	80065d6 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 80065cc:	7bbb      	ldrb	r3, [r7, #14]
 80065ce:	4619      	mov	r1, r3
 80065d0:	6878      	ldr	r0, [r7, #4]
 80065d2:	f001 f859 	bl	8007688 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 80065d6:	6878      	ldr	r0, [r7, #4]
 80065d8:	f000 fd11 	bl	8006ffe <USBD_CtlSendStatus>

              break;
 80065dc:	e004      	b.n	80065e8 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 80065de:	6839      	ldr	r1, [r7, #0]
 80065e0:	6878      	ldr	r0, [r7, #4]
 80065e2:	f000 fc5e 	bl	8006ea2 <USBD_CtlError>
              break;
 80065e6:	bf00      	nop
          }
          break;
 80065e8:	e107      	b.n	80067fa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f0:	b2db      	uxtb	r3, r3
 80065f2:	2b02      	cmp	r3, #2
 80065f4:	d002      	beq.n	80065fc <USBD_StdEPReq+0x124>
 80065f6:	2b03      	cmp	r3, #3
 80065f8:	d016      	beq.n	8006628 <USBD_StdEPReq+0x150>
 80065fa:	e04b      	b.n	8006694 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80065fc:	7bbb      	ldrb	r3, [r7, #14]
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d00d      	beq.n	800661e <USBD_StdEPReq+0x146>
 8006602:	7bbb      	ldrb	r3, [r7, #14]
 8006604:	2b80      	cmp	r3, #128	; 0x80
 8006606:	d00a      	beq.n	800661e <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006608:	7bbb      	ldrb	r3, [r7, #14]
 800660a:	4619      	mov	r1, r3
 800660c:	6878      	ldr	r0, [r7, #4]
 800660e:	f001 f83b 	bl	8007688 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006612:	2180      	movs	r1, #128	; 0x80
 8006614:	6878      	ldr	r0, [r7, #4]
 8006616:	f001 f837 	bl	8007688 <USBD_LL_StallEP>
 800661a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 800661c:	e040      	b.n	80066a0 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 800661e:	6839      	ldr	r1, [r7, #0]
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fc3e 	bl	8006ea2 <USBD_CtlError>
              break;
 8006626:	e03b      	b.n	80066a0 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006628:	683b      	ldr	r3, [r7, #0]
 800662a:	885b      	ldrh	r3, [r3, #2]
 800662c:	2b00      	cmp	r3, #0
 800662e:	d136      	bne.n	800669e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006630:	7bbb      	ldrb	r3, [r7, #14]
 8006632:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006636:	2b00      	cmp	r3, #0
 8006638:	d004      	beq.n	8006644 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	4619      	mov	r1, r3
 800663e:	6878      	ldr	r0, [r7, #4]
 8006640:	f001 f841 	bl	80076c6 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f000 fcda 	bl	8006ffe <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 800664a:	7bbb      	ldrb	r3, [r7, #14]
 800664c:	4619      	mov	r1, r3
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f7ff fde2 	bl	8006218 <USBD_CoreFindEP>
 8006654:	4603      	mov	r3, r0
 8006656:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006658:	7b7b      	ldrb	r3, [r7, #13]
 800665a:	2bff      	cmp	r3, #255	; 0xff
 800665c:	d01f      	beq.n	800669e <USBD_StdEPReq+0x1c6>
 800665e:	7b7b      	ldrb	r3, [r7, #13]
 8006660:	2b00      	cmp	r3, #0
 8006662:	d11c      	bne.n	800669e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006664:	7b7a      	ldrb	r2, [r7, #13]
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800666c:	7b7a      	ldrb	r2, [r7, #13]
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	32ae      	adds	r2, #174	; 0xae
 8006672:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006676:	689b      	ldr	r3, [r3, #8]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d010      	beq.n	800669e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800667c:	7b7a      	ldrb	r2, [r7, #13]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	32ae      	adds	r2, #174	; 0xae
 8006682:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006686:	689b      	ldr	r3, [r3, #8]
 8006688:	6839      	ldr	r1, [r7, #0]
 800668a:	6878      	ldr	r0, [r7, #4]
 800668c:	4798      	blx	r3
 800668e:	4603      	mov	r3, r0
 8006690:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006692:	e004      	b.n	800669e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006694:	6839      	ldr	r1, [r7, #0]
 8006696:	6878      	ldr	r0, [r7, #4]
 8006698:	f000 fc03 	bl	8006ea2 <USBD_CtlError>
              break;
 800669c:	e000      	b.n	80066a0 <USBD_StdEPReq+0x1c8>
              break;
 800669e:	bf00      	nop
          }
          break;
 80066a0:	e0ab      	b.n	80067fa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a8:	b2db      	uxtb	r3, r3
 80066aa:	2b02      	cmp	r3, #2
 80066ac:	d002      	beq.n	80066b4 <USBD_StdEPReq+0x1dc>
 80066ae:	2b03      	cmp	r3, #3
 80066b0:	d032      	beq.n	8006718 <USBD_StdEPReq+0x240>
 80066b2:	e097      	b.n	80067e4 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066b4:	7bbb      	ldrb	r3, [r7, #14]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d007      	beq.n	80066ca <USBD_StdEPReq+0x1f2>
 80066ba:	7bbb      	ldrb	r3, [r7, #14]
 80066bc:	2b80      	cmp	r3, #128	; 0x80
 80066be:	d004      	beq.n	80066ca <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80066c0:	6839      	ldr	r1, [r7, #0]
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 fbed 	bl	8006ea2 <USBD_CtlError>
                break;
 80066c8:	e091      	b.n	80067ee <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066ca:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	da0b      	bge.n	80066ea <USBD_StdEPReq+0x212>
 80066d2:	7bbb      	ldrb	r3, [r7, #14]
 80066d4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80066d8:	4613      	mov	r3, r2
 80066da:	009b      	lsls	r3, r3, #2
 80066dc:	4413      	add	r3, r2
 80066de:	009b      	lsls	r3, r3, #2
 80066e0:	3310      	adds	r3, #16
 80066e2:	687a      	ldr	r2, [r7, #4]
 80066e4:	4413      	add	r3, r2
 80066e6:	3304      	adds	r3, #4
 80066e8:	e00b      	b.n	8006702 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80066f0:	4613      	mov	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80066fc:	687a      	ldr	r2, [r7, #4]
 80066fe:	4413      	add	r3, r2
 8006700:	3304      	adds	r3, #4
 8006702:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006704:	68bb      	ldr	r3, [r7, #8]
 8006706:	2200      	movs	r2, #0
 8006708:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800670a:	68bb      	ldr	r3, [r7, #8]
 800670c:	2202      	movs	r2, #2
 800670e:	4619      	mov	r1, r3
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 fc37 	bl	8006f84 <USBD_CtlSendData>
              break;
 8006716:	e06a      	b.n	80067ee <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006718:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800671c:	2b00      	cmp	r3, #0
 800671e:	da11      	bge.n	8006744 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006720:	7bbb      	ldrb	r3, [r7, #14]
 8006722:	f003 020f 	and.w	r2, r3, #15
 8006726:	6879      	ldr	r1, [r7, #4]
 8006728:	4613      	mov	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4413      	add	r3, r2
 800672e:	009b      	lsls	r3, r3, #2
 8006730:	440b      	add	r3, r1
 8006732:	3324      	adds	r3, #36	; 0x24
 8006734:	881b      	ldrh	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d117      	bne.n	800676a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 800673a:	6839      	ldr	r1, [r7, #0]
 800673c:	6878      	ldr	r0, [r7, #4]
 800673e:	f000 fbb0 	bl	8006ea2 <USBD_CtlError>
                  break;
 8006742:	e054      	b.n	80067ee <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006744:	7bbb      	ldrb	r3, [r7, #14]
 8006746:	f003 020f 	and.w	r2, r3, #15
 800674a:	6879      	ldr	r1, [r7, #4]
 800674c:	4613      	mov	r3, r2
 800674e:	009b      	lsls	r3, r3, #2
 8006750:	4413      	add	r3, r2
 8006752:	009b      	lsls	r3, r3, #2
 8006754:	440b      	add	r3, r1
 8006756:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800675a:	881b      	ldrh	r3, [r3, #0]
 800675c:	2b00      	cmp	r3, #0
 800675e:	d104      	bne.n	800676a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006760:	6839      	ldr	r1, [r7, #0]
 8006762:	6878      	ldr	r0, [r7, #4]
 8006764:	f000 fb9d 	bl	8006ea2 <USBD_CtlError>
                  break;
 8006768:	e041      	b.n	80067ee <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800676a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800676e:	2b00      	cmp	r3, #0
 8006770:	da0b      	bge.n	800678a <USBD_StdEPReq+0x2b2>
 8006772:	7bbb      	ldrb	r3, [r7, #14]
 8006774:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	3310      	adds	r3, #16
 8006782:	687a      	ldr	r2, [r7, #4]
 8006784:	4413      	add	r3, r2
 8006786:	3304      	adds	r3, #4
 8006788:	e00b      	b.n	80067a2 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800678a:	7bbb      	ldrb	r3, [r7, #14]
 800678c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006790:	4613      	mov	r3, r2
 8006792:	009b      	lsls	r3, r3, #2
 8006794:	4413      	add	r3, r2
 8006796:	009b      	lsls	r3, r3, #2
 8006798:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800679c:	687a      	ldr	r2, [r7, #4]
 800679e:	4413      	add	r3, r2
 80067a0:	3304      	adds	r3, #4
 80067a2:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80067a4:	7bbb      	ldrb	r3, [r7, #14]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d002      	beq.n	80067b0 <USBD_StdEPReq+0x2d8>
 80067aa:	7bbb      	ldrb	r3, [r7, #14]
 80067ac:	2b80      	cmp	r3, #128	; 0x80
 80067ae:	d103      	bne.n	80067b8 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80067b0:	68bb      	ldr	r3, [r7, #8]
 80067b2:	2200      	movs	r2, #0
 80067b4:	601a      	str	r2, [r3, #0]
 80067b6:	e00e      	b.n	80067d6 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80067b8:	7bbb      	ldrb	r3, [r7, #14]
 80067ba:	4619      	mov	r1, r3
 80067bc:	6878      	ldr	r0, [r7, #4]
 80067be:	f000 ffa1 	bl	8007704 <USBD_LL_IsStallEP>
 80067c2:	4603      	mov	r3, r0
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d003      	beq.n	80067d0 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 80067c8:	68bb      	ldr	r3, [r7, #8]
 80067ca:	2201      	movs	r2, #1
 80067cc:	601a      	str	r2, [r3, #0]
 80067ce:	e002      	b.n	80067d6 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 80067d0:	68bb      	ldr	r3, [r7, #8]
 80067d2:	2200      	movs	r2, #0
 80067d4:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067d6:	68bb      	ldr	r3, [r7, #8]
 80067d8:	2202      	movs	r2, #2
 80067da:	4619      	mov	r1, r3
 80067dc:	6878      	ldr	r0, [r7, #4]
 80067de:	f000 fbd1 	bl	8006f84 <USBD_CtlSendData>
              break;
 80067e2:	e004      	b.n	80067ee <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 80067e4:	6839      	ldr	r1, [r7, #0]
 80067e6:	6878      	ldr	r0, [r7, #4]
 80067e8:	f000 fb5b 	bl	8006ea2 <USBD_CtlError>
              break;
 80067ec:	bf00      	nop
          }
          break;
 80067ee:	e004      	b.n	80067fa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80067f0:	6839      	ldr	r1, [r7, #0]
 80067f2:	6878      	ldr	r0, [r7, #4]
 80067f4:	f000 fb55 	bl	8006ea2 <USBD_CtlError>
          break;
 80067f8:	bf00      	nop
      }
      break;
 80067fa:	e005      	b.n	8006808 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80067fc:	6839      	ldr	r1, [r7, #0]
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	f000 fb4f 	bl	8006ea2 <USBD_CtlError>
      break;
 8006804:	e000      	b.n	8006808 <USBD_StdEPReq+0x330>
      break;
 8006806:	bf00      	nop
  }

  return ret;
 8006808:	7bfb      	ldrb	r3, [r7, #15]
}
 800680a:	4618      	mov	r0, r3
 800680c:	3710      	adds	r7, #16
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
	...

08006814 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006814:	b580      	push	{r7, lr}
 8006816:	b084      	sub	sp, #16
 8006818:	af00      	add	r7, sp, #0
 800681a:	6078      	str	r0, [r7, #4]
 800681c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800681e:	2300      	movs	r3, #0
 8006820:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006822:	2300      	movs	r3, #0
 8006824:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006826:	2300      	movs	r3, #0
 8006828:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	885b      	ldrh	r3, [r3, #2]
 800682e:	0a1b      	lsrs	r3, r3, #8
 8006830:	b29b      	uxth	r3, r3
 8006832:	3b01      	subs	r3, #1
 8006834:	2b06      	cmp	r3, #6
 8006836:	f200 8128 	bhi.w	8006a8a <USBD_GetDescriptor+0x276>
 800683a:	a201      	add	r2, pc, #4	; (adr r2, 8006840 <USBD_GetDescriptor+0x2c>)
 800683c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006840:	0800685d 	.word	0x0800685d
 8006844:	08006875 	.word	0x08006875
 8006848:	080068b5 	.word	0x080068b5
 800684c:	08006a8b 	.word	0x08006a8b
 8006850:	08006a8b 	.word	0x08006a8b
 8006854:	08006a2b 	.word	0x08006a2b
 8006858:	08006a57 	.word	0x08006a57
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	7c12      	ldrb	r2, [r2, #16]
 8006868:	f107 0108 	add.w	r1, r7, #8
 800686c:	4610      	mov	r0, r2
 800686e:	4798      	blx	r3
 8006870:	60f8      	str	r0, [r7, #12]
      break;
 8006872:	e112      	b.n	8006a9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	7c1b      	ldrb	r3, [r3, #16]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d10d      	bne.n	8006898 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006882:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006884:	f107 0208 	add.w	r2, r7, #8
 8006888:	4610      	mov	r0, r2
 800688a:	4798      	blx	r3
 800688c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	3301      	adds	r3, #1
 8006892:	2202      	movs	r2, #2
 8006894:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006896:	e100      	b.n	8006a9a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a0:	f107 0208 	add.w	r2, r7, #8
 80068a4:	4610      	mov	r0, r2
 80068a6:	4798      	blx	r3
 80068a8:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	3301      	adds	r3, #1
 80068ae:	2202      	movs	r2, #2
 80068b0:	701a      	strb	r2, [r3, #0]
      break;
 80068b2:	e0f2      	b.n	8006a9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	885b      	ldrh	r3, [r3, #2]
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	2b05      	cmp	r3, #5
 80068bc:	f200 80ac 	bhi.w	8006a18 <USBD_GetDescriptor+0x204>
 80068c0:	a201      	add	r2, pc, #4	; (adr r2, 80068c8 <USBD_GetDescriptor+0xb4>)
 80068c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068c6:	bf00      	nop
 80068c8:	080068e1 	.word	0x080068e1
 80068cc:	08006915 	.word	0x08006915
 80068d0:	08006949 	.word	0x08006949
 80068d4:	0800697d 	.word	0x0800697d
 80068d8:	080069b1 	.word	0x080069b1
 80068dc:	080069e5 	.word	0x080069e5
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80068e0:	687b      	ldr	r3, [r7, #4]
 80068e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068e6:	685b      	ldr	r3, [r3, #4]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d00b      	beq.n	8006904 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80068f2:	685b      	ldr	r3, [r3, #4]
 80068f4:	687a      	ldr	r2, [r7, #4]
 80068f6:	7c12      	ldrb	r2, [r2, #16]
 80068f8:	f107 0108 	add.w	r1, r7, #8
 80068fc:	4610      	mov	r0, r2
 80068fe:	4798      	blx	r3
 8006900:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006902:	e091      	b.n	8006a28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	f000 facb 	bl	8006ea2 <USBD_CtlError>
            err++;
 800690c:	7afb      	ldrb	r3, [r7, #11]
 800690e:	3301      	adds	r3, #1
 8006910:	72fb      	strb	r3, [r7, #11]
          break;
 8006912:	e089      	b.n	8006a28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006914:	687b      	ldr	r3, [r7, #4]
 8006916:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800691a:	689b      	ldr	r3, [r3, #8]
 800691c:	2b00      	cmp	r3, #0
 800691e:	d00b      	beq.n	8006938 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006926:	689b      	ldr	r3, [r3, #8]
 8006928:	687a      	ldr	r2, [r7, #4]
 800692a:	7c12      	ldrb	r2, [r2, #16]
 800692c:	f107 0108 	add.w	r1, r7, #8
 8006930:	4610      	mov	r0, r2
 8006932:	4798      	blx	r3
 8006934:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006936:	e077      	b.n	8006a28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006938:	6839      	ldr	r1, [r7, #0]
 800693a:	6878      	ldr	r0, [r7, #4]
 800693c:	f000 fab1 	bl	8006ea2 <USBD_CtlError>
            err++;
 8006940:	7afb      	ldrb	r3, [r7, #11]
 8006942:	3301      	adds	r3, #1
 8006944:	72fb      	strb	r3, [r7, #11]
          break;
 8006946:	e06f      	b.n	8006a28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800694e:	68db      	ldr	r3, [r3, #12]
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00b      	beq.n	800696c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800695a:	68db      	ldr	r3, [r3, #12]
 800695c:	687a      	ldr	r2, [r7, #4]
 800695e:	7c12      	ldrb	r2, [r2, #16]
 8006960:	f107 0108 	add.w	r1, r7, #8
 8006964:	4610      	mov	r0, r2
 8006966:	4798      	blx	r3
 8006968:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800696a:	e05d      	b.n	8006a28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800696c:	6839      	ldr	r1, [r7, #0]
 800696e:	6878      	ldr	r0, [r7, #4]
 8006970:	f000 fa97 	bl	8006ea2 <USBD_CtlError>
            err++;
 8006974:	7afb      	ldrb	r3, [r7, #11]
 8006976:	3301      	adds	r3, #1
 8006978:	72fb      	strb	r3, [r7, #11]
          break;
 800697a:	e055      	b.n	8006a28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d00b      	beq.n	80069a0 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800698e:	691b      	ldr	r3, [r3, #16]
 8006990:	687a      	ldr	r2, [r7, #4]
 8006992:	7c12      	ldrb	r2, [r2, #16]
 8006994:	f107 0108 	add.w	r1, r7, #8
 8006998:	4610      	mov	r0, r2
 800699a:	4798      	blx	r3
 800699c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800699e:	e043      	b.n	8006a28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069a0:	6839      	ldr	r1, [r7, #0]
 80069a2:	6878      	ldr	r0, [r7, #4]
 80069a4:	f000 fa7d 	bl	8006ea2 <USBD_CtlError>
            err++;
 80069a8:	7afb      	ldrb	r3, [r7, #11]
 80069aa:	3301      	adds	r3, #1
 80069ac:	72fb      	strb	r3, [r7, #11]
          break;
 80069ae:	e03b      	b.n	8006a28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80069b0:	687b      	ldr	r3, [r7, #4]
 80069b2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069b6:	695b      	ldr	r3, [r3, #20]
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d00b      	beq.n	80069d4 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069c2:	695b      	ldr	r3, [r3, #20]
 80069c4:	687a      	ldr	r2, [r7, #4]
 80069c6:	7c12      	ldrb	r2, [r2, #16]
 80069c8:	f107 0108 	add.w	r1, r7, #8
 80069cc:	4610      	mov	r0, r2
 80069ce:	4798      	blx	r3
 80069d0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069d2:	e029      	b.n	8006a28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069d4:	6839      	ldr	r1, [r7, #0]
 80069d6:	6878      	ldr	r0, [r7, #4]
 80069d8:	f000 fa63 	bl	8006ea2 <USBD_CtlError>
            err++;
 80069dc:	7afb      	ldrb	r3, [r7, #11]
 80069de:	3301      	adds	r3, #1
 80069e0:	72fb      	strb	r3, [r7, #11]
          break;
 80069e2:	e021      	b.n	8006a28 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ea:	699b      	ldr	r3, [r3, #24]
 80069ec:	2b00      	cmp	r3, #0
 80069ee:	d00b      	beq.n	8006a08 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069f6:	699b      	ldr	r3, [r3, #24]
 80069f8:	687a      	ldr	r2, [r7, #4]
 80069fa:	7c12      	ldrb	r2, [r2, #16]
 80069fc:	f107 0108 	add.w	r1, r7, #8
 8006a00:	4610      	mov	r0, r2
 8006a02:	4798      	blx	r3
 8006a04:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a06:	e00f      	b.n	8006a28 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a08:	6839      	ldr	r1, [r7, #0]
 8006a0a:	6878      	ldr	r0, [r7, #4]
 8006a0c:	f000 fa49 	bl	8006ea2 <USBD_CtlError>
            err++;
 8006a10:	7afb      	ldrb	r3, [r7, #11]
 8006a12:	3301      	adds	r3, #1
 8006a14:	72fb      	strb	r3, [r7, #11]
          break;
 8006a16:	e007      	b.n	8006a28 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	6878      	ldr	r0, [r7, #4]
 8006a1c:	f000 fa41 	bl	8006ea2 <USBD_CtlError>
          err++;
 8006a20:	7afb      	ldrb	r3, [r7, #11]
 8006a22:	3301      	adds	r3, #1
 8006a24:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006a26:	bf00      	nop
      }
      break;
 8006a28:	e037      	b.n	8006a9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	7c1b      	ldrb	r3, [r3, #16]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d109      	bne.n	8006a46 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a3a:	f107 0208 	add.w	r2, r7, #8
 8006a3e:	4610      	mov	r0, r2
 8006a40:	4798      	blx	r3
 8006a42:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a44:	e029      	b.n	8006a9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a46:	6839      	ldr	r1, [r7, #0]
 8006a48:	6878      	ldr	r0, [r7, #4]
 8006a4a:	f000 fa2a 	bl	8006ea2 <USBD_CtlError>
        err++;
 8006a4e:	7afb      	ldrb	r3, [r7, #11]
 8006a50:	3301      	adds	r3, #1
 8006a52:	72fb      	strb	r3, [r7, #11]
      break;
 8006a54:	e021      	b.n	8006a9a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	7c1b      	ldrb	r3, [r3, #16]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	d10d      	bne.n	8006a7a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a66:	f107 0208 	add.w	r2, r7, #8
 8006a6a:	4610      	mov	r0, r2
 8006a6c:	4798      	blx	r3
 8006a6e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006a70:	68fb      	ldr	r3, [r7, #12]
 8006a72:	3301      	adds	r3, #1
 8006a74:	2207      	movs	r2, #7
 8006a76:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006a78:	e00f      	b.n	8006a9a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006a7a:	6839      	ldr	r1, [r7, #0]
 8006a7c:	6878      	ldr	r0, [r7, #4]
 8006a7e:	f000 fa10 	bl	8006ea2 <USBD_CtlError>
        err++;
 8006a82:	7afb      	ldrb	r3, [r7, #11]
 8006a84:	3301      	adds	r3, #1
 8006a86:	72fb      	strb	r3, [r7, #11]
      break;
 8006a88:	e007      	b.n	8006a9a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006a8a:	6839      	ldr	r1, [r7, #0]
 8006a8c:	6878      	ldr	r0, [r7, #4]
 8006a8e:	f000 fa08 	bl	8006ea2 <USBD_CtlError>
      err++;
 8006a92:	7afb      	ldrb	r3, [r7, #11]
 8006a94:	3301      	adds	r3, #1
 8006a96:	72fb      	strb	r3, [r7, #11]
      break;
 8006a98:	bf00      	nop
  }

  if (err != 0U)
 8006a9a:	7afb      	ldrb	r3, [r7, #11]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d11e      	bne.n	8006ade <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006aa0:	683b      	ldr	r3, [r7, #0]
 8006aa2:	88db      	ldrh	r3, [r3, #6]
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	d016      	beq.n	8006ad6 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006aa8:	893b      	ldrh	r3, [r7, #8]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d00e      	beq.n	8006acc <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006aae:	683b      	ldr	r3, [r7, #0]
 8006ab0:	88da      	ldrh	r2, [r3, #6]
 8006ab2:	893b      	ldrh	r3, [r7, #8]
 8006ab4:	4293      	cmp	r3, r2
 8006ab6:	bf28      	it	cs
 8006ab8:	4613      	movcs	r3, r2
 8006aba:	b29b      	uxth	r3, r3
 8006abc:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006abe:	893b      	ldrh	r3, [r7, #8]
 8006ac0:	461a      	mov	r2, r3
 8006ac2:	68f9      	ldr	r1, [r7, #12]
 8006ac4:	6878      	ldr	r0, [r7, #4]
 8006ac6:	f000 fa5d 	bl	8006f84 <USBD_CtlSendData>
 8006aca:	e009      	b.n	8006ae0 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006acc:	6839      	ldr	r1, [r7, #0]
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 f9e7 	bl	8006ea2 <USBD_CtlError>
 8006ad4:	e004      	b.n	8006ae0 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fa91 	bl	8006ffe <USBD_CtlSendStatus>
 8006adc:	e000      	b.n	8006ae0 <USBD_GetDescriptor+0x2cc>
    return;
 8006ade:	bf00      	nop
  }
}
 8006ae0:	3710      	adds	r7, #16
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	bd80      	pop	{r7, pc}
 8006ae6:	bf00      	nop

08006ae8 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b084      	sub	sp, #16
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
 8006af0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006af2:	683b      	ldr	r3, [r7, #0]
 8006af4:	889b      	ldrh	r3, [r3, #4]
 8006af6:	2b00      	cmp	r3, #0
 8006af8:	d131      	bne.n	8006b5e <USBD_SetAddress+0x76>
 8006afa:	683b      	ldr	r3, [r7, #0]
 8006afc:	88db      	ldrh	r3, [r3, #6]
 8006afe:	2b00      	cmp	r3, #0
 8006b00:	d12d      	bne.n	8006b5e <USBD_SetAddress+0x76>
 8006b02:	683b      	ldr	r3, [r7, #0]
 8006b04:	885b      	ldrh	r3, [r3, #2]
 8006b06:	2b7f      	cmp	r3, #127	; 0x7f
 8006b08:	d829      	bhi.n	8006b5e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006b0a:	683b      	ldr	r3, [r7, #0]
 8006b0c:	885b      	ldrh	r3, [r3, #2]
 8006b0e:	b2db      	uxtb	r3, r3
 8006b10:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006b14:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b1c:	b2db      	uxtb	r3, r3
 8006b1e:	2b03      	cmp	r3, #3
 8006b20:	d104      	bne.n	8006b2c <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006b22:	6839      	ldr	r1, [r7, #0]
 8006b24:	6878      	ldr	r0, [r7, #4]
 8006b26:	f000 f9bc 	bl	8006ea2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b2a:	e01d      	b.n	8006b68 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	7bfa      	ldrb	r2, [r7, #15]
 8006b30:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	4619      	mov	r1, r3
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fe0f 	bl	800775c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006b3e:	6878      	ldr	r0, [r7, #4]
 8006b40:	f000 fa5d 	bl	8006ffe <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006b44:	7bfb      	ldrb	r3, [r7, #15]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d004      	beq.n	8006b54 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	2202      	movs	r2, #2
 8006b4e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b52:	e009      	b.n	8006b68 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	2201      	movs	r2, #1
 8006b58:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006b5c:	e004      	b.n	8006b68 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006b5e:	6839      	ldr	r1, [r7, #0]
 8006b60:	6878      	ldr	r0, [r7, #4]
 8006b62:	f000 f99e 	bl	8006ea2 <USBD_CtlError>
  }
}
 8006b66:	bf00      	nop
 8006b68:	bf00      	nop
 8006b6a:	3710      	adds	r7, #16
 8006b6c:	46bd      	mov	sp, r7
 8006b6e:	bd80      	pop	{r7, pc}

08006b70 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b70:	b580      	push	{r7, lr}
 8006b72:	b084      	sub	sp, #16
 8006b74:	af00      	add	r7, sp, #0
 8006b76:	6078      	str	r0, [r7, #4]
 8006b78:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b7a:	2300      	movs	r3, #0
 8006b7c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006b7e:	683b      	ldr	r3, [r7, #0]
 8006b80:	885b      	ldrh	r3, [r3, #2]
 8006b82:	b2da      	uxtb	r2, r3
 8006b84:	4b4e      	ldr	r3, [pc, #312]	; (8006cc0 <USBD_SetConfig+0x150>)
 8006b86:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006b88:	4b4d      	ldr	r3, [pc, #308]	; (8006cc0 <USBD_SetConfig+0x150>)
 8006b8a:	781b      	ldrb	r3, [r3, #0]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d905      	bls.n	8006b9c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006b90:	6839      	ldr	r1, [r7, #0]
 8006b92:	6878      	ldr	r0, [r7, #4]
 8006b94:	f000 f985 	bl	8006ea2 <USBD_CtlError>
    return USBD_FAIL;
 8006b98:	2303      	movs	r3, #3
 8006b9a:	e08c      	b.n	8006cb6 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ba2:	b2db      	uxtb	r3, r3
 8006ba4:	2b02      	cmp	r3, #2
 8006ba6:	d002      	beq.n	8006bae <USBD_SetConfig+0x3e>
 8006ba8:	2b03      	cmp	r3, #3
 8006baa:	d029      	beq.n	8006c00 <USBD_SetConfig+0x90>
 8006bac:	e075      	b.n	8006c9a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006bae:	4b44      	ldr	r3, [pc, #272]	; (8006cc0 <USBD_SetConfig+0x150>)
 8006bb0:	781b      	ldrb	r3, [r3, #0]
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d020      	beq.n	8006bf8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006bb6:	4b42      	ldr	r3, [pc, #264]	; (8006cc0 <USBD_SetConfig+0x150>)
 8006bb8:	781b      	ldrb	r3, [r3, #0]
 8006bba:	461a      	mov	r2, r3
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006bc0:	4b3f      	ldr	r3, [pc, #252]	; (8006cc0 <USBD_SetConfig+0x150>)
 8006bc2:	781b      	ldrb	r3, [r3, #0]
 8006bc4:	4619      	mov	r1, r3
 8006bc6:	6878      	ldr	r0, [r7, #4]
 8006bc8:	f7fe ffe7 	bl	8005b9a <USBD_SetClassConfig>
 8006bcc:	4603      	mov	r3, r0
 8006bce:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006bd0:	7bfb      	ldrb	r3, [r7, #15]
 8006bd2:	2b00      	cmp	r3, #0
 8006bd4:	d008      	beq.n	8006be8 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006bd6:	6839      	ldr	r1, [r7, #0]
 8006bd8:	6878      	ldr	r0, [r7, #4]
 8006bda:	f000 f962 	bl	8006ea2 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2202      	movs	r2, #2
 8006be2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006be6:	e065      	b.n	8006cb4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fa08 	bl	8006ffe <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	2203      	movs	r2, #3
 8006bf2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006bf6:	e05d      	b.n	8006cb4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fa00 	bl	8006ffe <USBD_CtlSendStatus>
      break;
 8006bfe:	e059      	b.n	8006cb4 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006c00:	4b2f      	ldr	r3, [pc, #188]	; (8006cc0 <USBD_SetConfig+0x150>)
 8006c02:	781b      	ldrb	r3, [r3, #0]
 8006c04:	2b00      	cmp	r3, #0
 8006c06:	d112      	bne.n	8006c2e <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	2202      	movs	r2, #2
 8006c0c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006c10:	4b2b      	ldr	r3, [pc, #172]	; (8006cc0 <USBD_SetConfig+0x150>)
 8006c12:	781b      	ldrb	r3, [r3, #0]
 8006c14:	461a      	mov	r2, r3
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006c1a:	4b29      	ldr	r3, [pc, #164]	; (8006cc0 <USBD_SetConfig+0x150>)
 8006c1c:	781b      	ldrb	r3, [r3, #0]
 8006c1e:	4619      	mov	r1, r3
 8006c20:	6878      	ldr	r0, [r7, #4]
 8006c22:	f7fe ffd6 	bl	8005bd2 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006c26:	6878      	ldr	r0, [r7, #4]
 8006c28:	f000 f9e9 	bl	8006ffe <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c2c:	e042      	b.n	8006cb4 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006c2e:	4b24      	ldr	r3, [pc, #144]	; (8006cc0 <USBD_SetConfig+0x150>)
 8006c30:	781b      	ldrb	r3, [r3, #0]
 8006c32:	461a      	mov	r2, r3
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	685b      	ldr	r3, [r3, #4]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d02a      	beq.n	8006c92 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	685b      	ldr	r3, [r3, #4]
 8006c40:	b2db      	uxtb	r3, r3
 8006c42:	4619      	mov	r1, r3
 8006c44:	6878      	ldr	r0, [r7, #4]
 8006c46:	f7fe ffc4 	bl	8005bd2 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006c4a:	4b1d      	ldr	r3, [pc, #116]	; (8006cc0 <USBD_SetConfig+0x150>)
 8006c4c:	781b      	ldrb	r3, [r3, #0]
 8006c4e:	461a      	mov	r2, r3
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c54:	4b1a      	ldr	r3, [pc, #104]	; (8006cc0 <USBD_SetConfig+0x150>)
 8006c56:	781b      	ldrb	r3, [r3, #0]
 8006c58:	4619      	mov	r1, r3
 8006c5a:	6878      	ldr	r0, [r7, #4]
 8006c5c:	f7fe ff9d 	bl	8005b9a <USBD_SetClassConfig>
 8006c60:	4603      	mov	r3, r0
 8006c62:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006c64:	7bfb      	ldrb	r3, [r7, #15]
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d00f      	beq.n	8006c8a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006c6a:	6839      	ldr	r1, [r7, #0]
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 f918 	bl	8006ea2 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	685b      	ldr	r3, [r3, #4]
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	4619      	mov	r1, r3
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7fe ffa9 	bl	8005bd2 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	2202      	movs	r2, #2
 8006c84:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006c88:	e014      	b.n	8006cb4 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f9b7 	bl	8006ffe <USBD_CtlSendStatus>
      break;
 8006c90:	e010      	b.n	8006cb4 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006c92:	6878      	ldr	r0, [r7, #4]
 8006c94:	f000 f9b3 	bl	8006ffe <USBD_CtlSendStatus>
      break;
 8006c98:	e00c      	b.n	8006cb4 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006c9a:	6839      	ldr	r1, [r7, #0]
 8006c9c:	6878      	ldr	r0, [r7, #4]
 8006c9e:	f000 f900 	bl	8006ea2 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006ca2:	4b07      	ldr	r3, [pc, #28]	; (8006cc0 <USBD_SetConfig+0x150>)
 8006ca4:	781b      	ldrb	r3, [r3, #0]
 8006ca6:	4619      	mov	r1, r3
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f7fe ff92 	bl	8005bd2 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006cae:	2303      	movs	r3, #3
 8006cb0:	73fb      	strb	r3, [r7, #15]
      break;
 8006cb2:	bf00      	nop
  }

  return ret;
 8006cb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cb6:	4618      	mov	r0, r3
 8006cb8:	3710      	adds	r7, #16
 8006cba:	46bd      	mov	sp, r7
 8006cbc:	bd80      	pop	{r7, pc}
 8006cbe:	bf00      	nop
 8006cc0:	2000073c 	.word	0x2000073c

08006cc4 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cc4:	b580      	push	{r7, lr}
 8006cc6:	b082      	sub	sp, #8
 8006cc8:	af00      	add	r7, sp, #0
 8006cca:	6078      	str	r0, [r7, #4]
 8006ccc:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	88db      	ldrh	r3, [r3, #6]
 8006cd2:	2b01      	cmp	r3, #1
 8006cd4:	d004      	beq.n	8006ce0 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006cd6:	6839      	ldr	r1, [r7, #0]
 8006cd8:	6878      	ldr	r0, [r7, #4]
 8006cda:	f000 f8e2 	bl	8006ea2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006cde:	e023      	b.n	8006d28 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ce6:	b2db      	uxtb	r3, r3
 8006ce8:	2b02      	cmp	r3, #2
 8006cea:	dc02      	bgt.n	8006cf2 <USBD_GetConfig+0x2e>
 8006cec:	2b00      	cmp	r3, #0
 8006cee:	dc03      	bgt.n	8006cf8 <USBD_GetConfig+0x34>
 8006cf0:	e015      	b.n	8006d1e <USBD_GetConfig+0x5a>
 8006cf2:	2b03      	cmp	r3, #3
 8006cf4:	d00b      	beq.n	8006d0e <USBD_GetConfig+0x4a>
 8006cf6:	e012      	b.n	8006d1e <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	2200      	movs	r2, #0
 8006cfc:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	3308      	adds	r3, #8
 8006d02:	2201      	movs	r2, #1
 8006d04:	4619      	mov	r1, r3
 8006d06:	6878      	ldr	r0, [r7, #4]
 8006d08:	f000 f93c 	bl	8006f84 <USBD_CtlSendData>
        break;
 8006d0c:	e00c      	b.n	8006d28 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006d0e:	687b      	ldr	r3, [r7, #4]
 8006d10:	3304      	adds	r3, #4
 8006d12:	2201      	movs	r2, #1
 8006d14:	4619      	mov	r1, r3
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 f934 	bl	8006f84 <USBD_CtlSendData>
        break;
 8006d1c:	e004      	b.n	8006d28 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006d1e:	6839      	ldr	r1, [r7, #0]
 8006d20:	6878      	ldr	r0, [r7, #4]
 8006d22:	f000 f8be 	bl	8006ea2 <USBD_CtlError>
        break;
 8006d26:	bf00      	nop
}
 8006d28:	bf00      	nop
 8006d2a:	3708      	adds	r7, #8
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b082      	sub	sp, #8
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	6078      	str	r0, [r7, #4]
 8006d38:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006d3a:	687b      	ldr	r3, [r7, #4]
 8006d3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d40:	b2db      	uxtb	r3, r3
 8006d42:	3b01      	subs	r3, #1
 8006d44:	2b02      	cmp	r3, #2
 8006d46:	d81e      	bhi.n	8006d86 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006d48:	683b      	ldr	r3, [r7, #0]
 8006d4a:	88db      	ldrh	r3, [r3, #6]
 8006d4c:	2b02      	cmp	r3, #2
 8006d4e:	d004      	beq.n	8006d5a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006d50:	6839      	ldr	r1, [r7, #0]
 8006d52:	6878      	ldr	r0, [r7, #4]
 8006d54:	f000 f8a5 	bl	8006ea2 <USBD_CtlError>
        break;
 8006d58:	e01a      	b.n	8006d90 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2201      	movs	r2, #1
 8006d5e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d005      	beq.n	8006d76 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	68db      	ldr	r3, [r3, #12]
 8006d6e:	f043 0202 	orr.w	r2, r3, #2
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	330c      	adds	r3, #12
 8006d7a:	2202      	movs	r2, #2
 8006d7c:	4619      	mov	r1, r3
 8006d7e:	6878      	ldr	r0, [r7, #4]
 8006d80:	f000 f900 	bl	8006f84 <USBD_CtlSendData>
      break;
 8006d84:	e004      	b.n	8006d90 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f88a 	bl	8006ea2 <USBD_CtlError>
      break;
 8006d8e:	bf00      	nop
  }
}
 8006d90:	bf00      	nop
 8006d92:	3708      	adds	r7, #8
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
 8006da0:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006da2:	683b      	ldr	r3, [r7, #0]
 8006da4:	885b      	ldrh	r3, [r3, #2]
 8006da6:	2b01      	cmp	r3, #1
 8006da8:	d107      	bne.n	8006dba <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2201      	movs	r2, #1
 8006dae:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006db2:	6878      	ldr	r0, [r7, #4]
 8006db4:	f000 f923 	bl	8006ffe <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006db8:	e013      	b.n	8006de2 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	885b      	ldrh	r3, [r3, #2]
 8006dbe:	2b02      	cmp	r3, #2
 8006dc0:	d10b      	bne.n	8006dda <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006dc2:	683b      	ldr	r3, [r7, #0]
 8006dc4:	889b      	ldrh	r3, [r3, #4]
 8006dc6:	0a1b      	lsrs	r3, r3, #8
 8006dc8:	b29b      	uxth	r3, r3
 8006dca:	b2da      	uxtb	r2, r3
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006dd2:	6878      	ldr	r0, [r7, #4]
 8006dd4:	f000 f913 	bl	8006ffe <USBD_CtlSendStatus>
}
 8006dd8:	e003      	b.n	8006de2 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006dda:	6839      	ldr	r1, [r7, #0]
 8006ddc:	6878      	ldr	r0, [r7, #4]
 8006dde:	f000 f860 	bl	8006ea2 <USBD_CtlError>
}
 8006de2:	bf00      	nop
 8006de4:	3708      	adds	r7, #8
 8006de6:	46bd      	mov	sp, r7
 8006de8:	bd80      	pop	{r7, pc}

08006dea <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006dea:	b580      	push	{r7, lr}
 8006dec:	b082      	sub	sp, #8
 8006dee:	af00      	add	r7, sp, #0
 8006df0:	6078      	str	r0, [r7, #4]
 8006df2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dfa:	b2db      	uxtb	r3, r3
 8006dfc:	3b01      	subs	r3, #1
 8006dfe:	2b02      	cmp	r3, #2
 8006e00:	d80b      	bhi.n	8006e1a <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	885b      	ldrh	r3, [r3, #2]
 8006e06:	2b01      	cmp	r3, #1
 8006e08:	d10c      	bne.n	8006e24 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2200      	movs	r2, #0
 8006e0e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f000 f8f3 	bl	8006ffe <USBD_CtlSendStatus>
      }
      break;
 8006e18:	e004      	b.n	8006e24 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006e1a:	6839      	ldr	r1, [r7, #0]
 8006e1c:	6878      	ldr	r0, [r7, #4]
 8006e1e:	f000 f840 	bl	8006ea2 <USBD_CtlError>
      break;
 8006e22:	e000      	b.n	8006e26 <USBD_ClrFeature+0x3c>
      break;
 8006e24:	bf00      	nop
  }
}
 8006e26:	bf00      	nop
 8006e28:	3708      	adds	r7, #8
 8006e2a:	46bd      	mov	sp, r7
 8006e2c:	bd80      	pop	{r7, pc}

08006e2e <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006e2e:	b580      	push	{r7, lr}
 8006e30:	b084      	sub	sp, #16
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	6078      	str	r0, [r7, #4]
 8006e36:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006e38:	683b      	ldr	r3, [r7, #0]
 8006e3a:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	781a      	ldrb	r2, [r3, #0]
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006e44:	68fb      	ldr	r3, [r7, #12]
 8006e46:	3301      	adds	r3, #1
 8006e48:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	781a      	ldrb	r2, [r3, #0]
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	3301      	adds	r3, #1
 8006e56:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006e58:	68f8      	ldr	r0, [r7, #12]
 8006e5a:	f7ff fa41 	bl	80062e0 <SWAPBYTE>
 8006e5e:	4603      	mov	r3, r0
 8006e60:	461a      	mov	r2, r3
 8006e62:	687b      	ldr	r3, [r7, #4]
 8006e64:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006e66:	68fb      	ldr	r3, [r7, #12]
 8006e68:	3301      	adds	r3, #1
 8006e6a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006e72:	68f8      	ldr	r0, [r7, #12]
 8006e74:	f7ff fa34 	bl	80062e0 <SWAPBYTE>
 8006e78:	4603      	mov	r3, r0
 8006e7a:	461a      	mov	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	3301      	adds	r3, #1
 8006e84:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006e86:	68fb      	ldr	r3, [r7, #12]
 8006e88:	3301      	adds	r3, #1
 8006e8a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006e8c:	68f8      	ldr	r0, [r7, #12]
 8006e8e:	f7ff fa27 	bl	80062e0 <SWAPBYTE>
 8006e92:	4603      	mov	r3, r0
 8006e94:	461a      	mov	r2, r3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	80da      	strh	r2, [r3, #6]
}
 8006e9a:	bf00      	nop
 8006e9c:	3710      	adds	r7, #16
 8006e9e:	46bd      	mov	sp, r7
 8006ea0:	bd80      	pop	{r7, pc}

08006ea2 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ea2:	b580      	push	{r7, lr}
 8006ea4:	b082      	sub	sp, #8
 8006ea6:	af00      	add	r7, sp, #0
 8006ea8:	6078      	str	r0, [r7, #4]
 8006eaa:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006eac:	2180      	movs	r1, #128	; 0x80
 8006eae:	6878      	ldr	r0, [r7, #4]
 8006eb0:	f000 fbea 	bl	8007688 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006eb4:	2100      	movs	r1, #0
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	f000 fbe6 	bl	8007688 <USBD_LL_StallEP>
}
 8006ebc:	bf00      	nop
 8006ebe:	3708      	adds	r7, #8
 8006ec0:	46bd      	mov	sp, r7
 8006ec2:	bd80      	pop	{r7, pc}

08006ec4 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006ec4:	b580      	push	{r7, lr}
 8006ec6:	b086      	sub	sp, #24
 8006ec8:	af00      	add	r7, sp, #0
 8006eca:	60f8      	str	r0, [r7, #12]
 8006ecc:	60b9      	str	r1, [r7, #8]
 8006ece:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	2b00      	cmp	r3, #0
 8006ed8:	d036      	beq.n	8006f48 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006eda:	68fb      	ldr	r3, [r7, #12]
 8006edc:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006ede:	6938      	ldr	r0, [r7, #16]
 8006ee0:	f000 f836 	bl	8006f50 <USBD_GetLen>
 8006ee4:	4603      	mov	r3, r0
 8006ee6:	3301      	adds	r3, #1
 8006ee8:	b29b      	uxth	r3, r3
 8006eea:	005b      	lsls	r3, r3, #1
 8006eec:	b29a      	uxth	r2, r3
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006ef2:	7dfb      	ldrb	r3, [r7, #23]
 8006ef4:	68ba      	ldr	r2, [r7, #8]
 8006ef6:	4413      	add	r3, r2
 8006ef8:	687a      	ldr	r2, [r7, #4]
 8006efa:	7812      	ldrb	r2, [r2, #0]
 8006efc:	701a      	strb	r2, [r3, #0]
  idx++;
 8006efe:	7dfb      	ldrb	r3, [r7, #23]
 8006f00:	3301      	adds	r3, #1
 8006f02:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006f04:	7dfb      	ldrb	r3, [r7, #23]
 8006f06:	68ba      	ldr	r2, [r7, #8]
 8006f08:	4413      	add	r3, r2
 8006f0a:	2203      	movs	r2, #3
 8006f0c:	701a      	strb	r2, [r3, #0]
  idx++;
 8006f0e:	7dfb      	ldrb	r3, [r7, #23]
 8006f10:	3301      	adds	r3, #1
 8006f12:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006f14:	e013      	b.n	8006f3e <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006f16:	7dfb      	ldrb	r3, [r7, #23]
 8006f18:	68ba      	ldr	r2, [r7, #8]
 8006f1a:	4413      	add	r3, r2
 8006f1c:	693a      	ldr	r2, [r7, #16]
 8006f1e:	7812      	ldrb	r2, [r2, #0]
 8006f20:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006f22:	693b      	ldr	r3, [r7, #16]
 8006f24:	3301      	adds	r3, #1
 8006f26:	613b      	str	r3, [r7, #16]
    idx++;
 8006f28:	7dfb      	ldrb	r3, [r7, #23]
 8006f2a:	3301      	adds	r3, #1
 8006f2c:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006f2e:	7dfb      	ldrb	r3, [r7, #23]
 8006f30:	68ba      	ldr	r2, [r7, #8]
 8006f32:	4413      	add	r3, r2
 8006f34:	2200      	movs	r2, #0
 8006f36:	701a      	strb	r2, [r3, #0]
    idx++;
 8006f38:	7dfb      	ldrb	r3, [r7, #23]
 8006f3a:	3301      	adds	r3, #1
 8006f3c:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	781b      	ldrb	r3, [r3, #0]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d1e7      	bne.n	8006f16 <USBD_GetString+0x52>
 8006f46:	e000      	b.n	8006f4a <USBD_GetString+0x86>
    return;
 8006f48:	bf00      	nop
  }
}
 8006f4a:	3718      	adds	r7, #24
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	bd80      	pop	{r7, pc}

08006f50 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006f58:	2300      	movs	r3, #0
 8006f5a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006f60:	e005      	b.n	8006f6e <USBD_GetLen+0x1e>
  {
    len++;
 8006f62:	7bfb      	ldrb	r3, [r7, #15]
 8006f64:	3301      	adds	r3, #1
 8006f66:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006f68:	68bb      	ldr	r3, [r7, #8]
 8006f6a:	3301      	adds	r3, #1
 8006f6c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006f6e:	68bb      	ldr	r3, [r7, #8]
 8006f70:	781b      	ldrb	r3, [r3, #0]
 8006f72:	2b00      	cmp	r3, #0
 8006f74:	d1f5      	bne.n	8006f62 <USBD_GetLen+0x12>
  }

  return len;
 8006f76:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f78:	4618      	mov	r0, r3
 8006f7a:	3714      	adds	r7, #20
 8006f7c:	46bd      	mov	sp, r7
 8006f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f82:	4770      	bx	lr

08006f84 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8006f84:	b580      	push	{r7, lr}
 8006f86:	b084      	sub	sp, #16
 8006f88:	af00      	add	r7, sp, #0
 8006f8a:	60f8      	str	r0, [r7, #12]
 8006f8c:	60b9      	str	r1, [r7, #8]
 8006f8e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006f90:	68fb      	ldr	r3, [r7, #12]
 8006f92:	2202      	movs	r2, #2
 8006f94:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006f98:	68fb      	ldr	r3, [r7, #12]
 8006f9a:	687a      	ldr	r2, [r7, #4]
 8006f9c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	687a      	ldr	r2, [r7, #4]
 8006fa2:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	68ba      	ldr	r2, [r7, #8]
 8006fa8:	2100      	movs	r1, #0
 8006faa:	68f8      	ldr	r0, [r7, #12]
 8006fac:	f000 fbf5 	bl	800779a <USBD_LL_Transmit>

  return USBD_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3710      	adds	r7, #16
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b084      	sub	sp, #16
 8006fbe:	af00      	add	r7, sp, #0
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	2100      	movs	r1, #0
 8006fcc:	68f8      	ldr	r0, [r7, #12]
 8006fce:	f000 fbe4 	bl	800779a <USBD_LL_Transmit>

  return USBD_OK;
 8006fd2:	2300      	movs	r3, #0
}
 8006fd4:	4618      	mov	r0, r3
 8006fd6:	3710      	adds	r7, #16
 8006fd8:	46bd      	mov	sp, r7
 8006fda:	bd80      	pop	{r7, pc}

08006fdc <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006fdc:	b580      	push	{r7, lr}
 8006fde:	b084      	sub	sp, #16
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	60b9      	str	r1, [r7, #8]
 8006fe6:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	68ba      	ldr	r2, [r7, #8]
 8006fec:	2100      	movs	r1, #0
 8006fee:	68f8      	ldr	r0, [r7, #12]
 8006ff0:	f000 fbf4 	bl	80077dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006ff4:	2300      	movs	r3, #0
}
 8006ff6:	4618      	mov	r0, r3
 8006ff8:	3710      	adds	r7, #16
 8006ffa:	46bd      	mov	sp, r7
 8006ffc:	bd80      	pop	{r7, pc}

08006ffe <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006ffe:	b580      	push	{r7, lr}
 8007000:	b082      	sub	sp, #8
 8007002:	af00      	add	r7, sp, #0
 8007004:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	2204      	movs	r2, #4
 800700a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800700e:	2300      	movs	r3, #0
 8007010:	2200      	movs	r2, #0
 8007012:	2100      	movs	r1, #0
 8007014:	6878      	ldr	r0, [r7, #4]
 8007016:	f000 fbc0 	bl	800779a <USBD_LL_Transmit>

  return USBD_OK;
 800701a:	2300      	movs	r3, #0
}
 800701c:	4618      	mov	r0, r3
 800701e:	3708      	adds	r7, #8
 8007020:	46bd      	mov	sp, r7
 8007022:	bd80      	pop	{r7, pc}

08007024 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	b082      	sub	sp, #8
 8007028:	af00      	add	r7, sp, #0
 800702a:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	2205      	movs	r2, #5
 8007030:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007034:	2300      	movs	r3, #0
 8007036:	2200      	movs	r2, #0
 8007038:	2100      	movs	r1, #0
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 fbce 	bl	80077dc <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007040:	2300      	movs	r3, #0
}
 8007042:	4618      	mov	r0, r3
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
	...

0800704c <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007050:	2200      	movs	r2, #0
 8007052:	490e      	ldr	r1, [pc, #56]	; (800708c <MX_USB_DEVICE_Init+0x40>)
 8007054:	480e      	ldr	r0, [pc, #56]	; (8007090 <MX_USB_DEVICE_Init+0x44>)
 8007056:	f7fe fd23 	bl	8005aa0 <USBD_Init>
 800705a:	4603      	mov	r3, r0
 800705c:	2b00      	cmp	r3, #0
 800705e:	d001      	beq.n	8007064 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007060:	f7f9 ffd8 	bl	8001014 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007064:	490b      	ldr	r1, [pc, #44]	; (8007094 <MX_USB_DEVICE_Init+0x48>)
 8007066:	480a      	ldr	r0, [pc, #40]	; (8007090 <MX_USB_DEVICE_Init+0x44>)
 8007068:	f7fe fd4a 	bl	8005b00 <USBD_RegisterClass>
 800706c:	4603      	mov	r3, r0
 800706e:	2b00      	cmp	r3, #0
 8007070:	d001      	beq.n	8007076 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007072:	f7f9 ffcf 	bl	8001014 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007076:	4806      	ldr	r0, [pc, #24]	; (8007090 <MX_USB_DEVICE_Init+0x44>)
 8007078:	f7fe fd78 	bl	8005b6c <USBD_Start>
 800707c:	4603      	mov	r3, r0
 800707e:	2b00      	cmp	r3, #0
 8007080:	d001      	beq.n	8007086 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007082:	f7f9 ffc7 	bl	8001014 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007086:	bf00      	nop
 8007088:	bd80      	pop	{r7, pc}
 800708a:	bf00      	nop
 800708c:	20000494 	.word	0x20000494
 8007090:	20000740 	.word	0x20000740
 8007094:	200003e0 	.word	0x200003e0

08007098 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007098:	b480      	push	{r7}
 800709a:	b083      	sub	sp, #12
 800709c:	af00      	add	r7, sp, #0
 800709e:	4603      	mov	r3, r0
 80070a0:	6039      	str	r1, [r7, #0]
 80070a2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80070a4:	683b      	ldr	r3, [r7, #0]
 80070a6:	2212      	movs	r2, #18
 80070a8:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80070aa:	4b03      	ldr	r3, [pc, #12]	; (80070b8 <USBD_FS_DeviceDescriptor+0x20>)
}
 80070ac:	4618      	mov	r0, r3
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	200004b0 	.word	0x200004b0

080070bc <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070bc:	b480      	push	{r7}
 80070be:	b083      	sub	sp, #12
 80070c0:	af00      	add	r7, sp, #0
 80070c2:	4603      	mov	r3, r0
 80070c4:	6039      	str	r1, [r7, #0]
 80070c6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80070c8:	683b      	ldr	r3, [r7, #0]
 80070ca:	2204      	movs	r2, #4
 80070cc:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80070ce:	4b03      	ldr	r3, [pc, #12]	; (80070dc <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80070d0:	4618      	mov	r0, r3
 80070d2:	370c      	adds	r7, #12
 80070d4:	46bd      	mov	sp, r7
 80070d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070da:	4770      	bx	lr
 80070dc:	200004c4 	.word	0x200004c4

080070e0 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80070e0:	b580      	push	{r7, lr}
 80070e2:	b082      	sub	sp, #8
 80070e4:	af00      	add	r7, sp, #0
 80070e6:	4603      	mov	r3, r0
 80070e8:	6039      	str	r1, [r7, #0]
 80070ea:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80070ec:	79fb      	ldrb	r3, [r7, #7]
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d105      	bne.n	80070fe <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070f2:	683a      	ldr	r2, [r7, #0]
 80070f4:	4907      	ldr	r1, [pc, #28]	; (8007114 <USBD_FS_ProductStrDescriptor+0x34>)
 80070f6:	4808      	ldr	r0, [pc, #32]	; (8007118 <USBD_FS_ProductStrDescriptor+0x38>)
 80070f8:	f7ff fee4 	bl	8006ec4 <USBD_GetString>
 80070fc:	e004      	b.n	8007108 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80070fe:	683a      	ldr	r2, [r7, #0]
 8007100:	4904      	ldr	r1, [pc, #16]	; (8007114 <USBD_FS_ProductStrDescriptor+0x34>)
 8007102:	4805      	ldr	r0, [pc, #20]	; (8007118 <USBD_FS_ProductStrDescriptor+0x38>)
 8007104:	f7ff fede 	bl	8006ec4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007108:	4b02      	ldr	r3, [pc, #8]	; (8007114 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800710a:	4618      	mov	r0, r3
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
 8007112:	bf00      	nop
 8007114:	20000a1c 	.word	0x20000a1c
 8007118:	08007928 	.word	0x08007928

0800711c <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800711c:	b580      	push	{r7, lr}
 800711e:	b082      	sub	sp, #8
 8007120:	af00      	add	r7, sp, #0
 8007122:	4603      	mov	r3, r0
 8007124:	6039      	str	r1, [r7, #0]
 8007126:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007128:	683a      	ldr	r2, [r7, #0]
 800712a:	4904      	ldr	r1, [pc, #16]	; (800713c <USBD_FS_ManufacturerStrDescriptor+0x20>)
 800712c:	4804      	ldr	r0, [pc, #16]	; (8007140 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800712e:	f7ff fec9 	bl	8006ec4 <USBD_GetString>
  return USBD_StrDesc;
 8007132:	4b02      	ldr	r3, [pc, #8]	; (800713c <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007134:	4618      	mov	r0, r3
 8007136:	3708      	adds	r7, #8
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}
 800713c:	20000a1c 	.word	0x20000a1c
 8007140:	08007940 	.word	0x08007940

08007144 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007144:	b580      	push	{r7, lr}
 8007146:	b082      	sub	sp, #8
 8007148:	af00      	add	r7, sp, #0
 800714a:	4603      	mov	r3, r0
 800714c:	6039      	str	r1, [r7, #0]
 800714e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007150:	683b      	ldr	r3, [r7, #0]
 8007152:	221a      	movs	r2, #26
 8007154:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007156:	f000 f843 	bl	80071e0 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800715a:	4b02      	ldr	r3, [pc, #8]	; (8007164 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800715c:	4618      	mov	r0, r3
 800715e:	3708      	adds	r7, #8
 8007160:	46bd      	mov	sp, r7
 8007162:	bd80      	pop	{r7, pc}
 8007164:	200004c8 	.word	0x200004c8

08007168 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007168:	b580      	push	{r7, lr}
 800716a:	b082      	sub	sp, #8
 800716c:	af00      	add	r7, sp, #0
 800716e:	4603      	mov	r3, r0
 8007170:	6039      	str	r1, [r7, #0]
 8007172:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007174:	79fb      	ldrb	r3, [r7, #7]
 8007176:	2b00      	cmp	r3, #0
 8007178:	d105      	bne.n	8007186 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800717a:	683a      	ldr	r2, [r7, #0]
 800717c:	4907      	ldr	r1, [pc, #28]	; (800719c <USBD_FS_ConfigStrDescriptor+0x34>)
 800717e:	4808      	ldr	r0, [pc, #32]	; (80071a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007180:	f7ff fea0 	bl	8006ec4 <USBD_GetString>
 8007184:	e004      	b.n	8007190 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007186:	683a      	ldr	r2, [r7, #0]
 8007188:	4904      	ldr	r1, [pc, #16]	; (800719c <USBD_FS_ConfigStrDescriptor+0x34>)
 800718a:	4805      	ldr	r0, [pc, #20]	; (80071a0 <USBD_FS_ConfigStrDescriptor+0x38>)
 800718c:	f7ff fe9a 	bl	8006ec4 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007190:	4b02      	ldr	r3, [pc, #8]	; (800719c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007192:	4618      	mov	r0, r3
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20000a1c 	.word	0x20000a1c
 80071a0:	08007954 	.word	0x08007954

080071a4 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071a4:	b580      	push	{r7, lr}
 80071a6:	b082      	sub	sp, #8
 80071a8:	af00      	add	r7, sp, #0
 80071aa:	4603      	mov	r3, r0
 80071ac:	6039      	str	r1, [r7, #0]
 80071ae:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80071b0:	79fb      	ldrb	r3, [r7, #7]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d105      	bne.n	80071c2 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071b6:	683a      	ldr	r2, [r7, #0]
 80071b8:	4907      	ldr	r1, [pc, #28]	; (80071d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071ba:	4808      	ldr	r0, [pc, #32]	; (80071dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071bc:	f7ff fe82 	bl	8006ec4 <USBD_GetString>
 80071c0:	e004      	b.n	80071cc <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80071c2:	683a      	ldr	r2, [r7, #0]
 80071c4:	4904      	ldr	r1, [pc, #16]	; (80071d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80071c6:	4805      	ldr	r0, [pc, #20]	; (80071dc <USBD_FS_InterfaceStrDescriptor+0x38>)
 80071c8:	f7ff fe7c 	bl	8006ec4 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071cc:	4b02      	ldr	r3, [pc, #8]	; (80071d8 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80071ce:	4618      	mov	r0, r3
 80071d0:	3708      	adds	r7, #8
 80071d2:	46bd      	mov	sp, r7
 80071d4:	bd80      	pop	{r7, pc}
 80071d6:	bf00      	nop
 80071d8:	20000a1c 	.word	0x20000a1c
 80071dc:	08007960 	.word	0x08007960

080071e0 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80071e0:	b580      	push	{r7, lr}
 80071e2:	b084      	sub	sp, #16
 80071e4:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80071e6:	4b0f      	ldr	r3, [pc, #60]	; (8007224 <Get_SerialNum+0x44>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80071ec:	4b0e      	ldr	r3, [pc, #56]	; (8007228 <Get_SerialNum+0x48>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80071f2:	4b0e      	ldr	r3, [pc, #56]	; (800722c <Get_SerialNum+0x4c>)
 80071f4:	681b      	ldr	r3, [r3, #0]
 80071f6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80071f8:	68fa      	ldr	r2, [r7, #12]
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4413      	add	r3, r2
 80071fe:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d009      	beq.n	800721a <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007206:	2208      	movs	r2, #8
 8007208:	4909      	ldr	r1, [pc, #36]	; (8007230 <Get_SerialNum+0x50>)
 800720a:	68f8      	ldr	r0, [r7, #12]
 800720c:	f000 f814 	bl	8007238 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007210:	2204      	movs	r2, #4
 8007212:	4908      	ldr	r1, [pc, #32]	; (8007234 <Get_SerialNum+0x54>)
 8007214:	68b8      	ldr	r0, [r7, #8]
 8007216:	f000 f80f 	bl	8007238 <IntToUnicode>
  }
}
 800721a:	bf00      	nop
 800721c:	3710      	adds	r7, #16
 800721e:	46bd      	mov	sp, r7
 8007220:	bd80      	pop	{r7, pc}
 8007222:	bf00      	nop
 8007224:	1fff7a10 	.word	0x1fff7a10
 8007228:	1fff7a14 	.word	0x1fff7a14
 800722c:	1fff7a18 	.word	0x1fff7a18
 8007230:	200004ca 	.word	0x200004ca
 8007234:	200004da 	.word	0x200004da

08007238 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007238:	b480      	push	{r7}
 800723a:	b087      	sub	sp, #28
 800723c:	af00      	add	r7, sp, #0
 800723e:	60f8      	str	r0, [r7, #12]
 8007240:	60b9      	str	r1, [r7, #8]
 8007242:	4613      	mov	r3, r2
 8007244:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007246:	2300      	movs	r3, #0
 8007248:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 800724a:	2300      	movs	r3, #0
 800724c:	75fb      	strb	r3, [r7, #23]
 800724e:	e027      	b.n	80072a0 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007250:	68fb      	ldr	r3, [r7, #12]
 8007252:	0f1b      	lsrs	r3, r3, #28
 8007254:	2b09      	cmp	r3, #9
 8007256:	d80b      	bhi.n	8007270 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	0f1b      	lsrs	r3, r3, #28
 800725c:	b2da      	uxtb	r2, r3
 800725e:	7dfb      	ldrb	r3, [r7, #23]
 8007260:	005b      	lsls	r3, r3, #1
 8007262:	4619      	mov	r1, r3
 8007264:	68bb      	ldr	r3, [r7, #8]
 8007266:	440b      	add	r3, r1
 8007268:	3230      	adds	r2, #48	; 0x30
 800726a:	b2d2      	uxtb	r2, r2
 800726c:	701a      	strb	r2, [r3, #0]
 800726e:	e00a      	b.n	8007286 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007270:	68fb      	ldr	r3, [r7, #12]
 8007272:	0f1b      	lsrs	r3, r3, #28
 8007274:	b2da      	uxtb	r2, r3
 8007276:	7dfb      	ldrb	r3, [r7, #23]
 8007278:	005b      	lsls	r3, r3, #1
 800727a:	4619      	mov	r1, r3
 800727c:	68bb      	ldr	r3, [r7, #8]
 800727e:	440b      	add	r3, r1
 8007280:	3237      	adds	r2, #55	; 0x37
 8007282:	b2d2      	uxtb	r2, r2
 8007284:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	011b      	lsls	r3, r3, #4
 800728a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800728c:	7dfb      	ldrb	r3, [r7, #23]
 800728e:	005b      	lsls	r3, r3, #1
 8007290:	3301      	adds	r3, #1
 8007292:	68ba      	ldr	r2, [r7, #8]
 8007294:	4413      	add	r3, r2
 8007296:	2200      	movs	r2, #0
 8007298:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800729a:	7dfb      	ldrb	r3, [r7, #23]
 800729c:	3301      	adds	r3, #1
 800729e:	75fb      	strb	r3, [r7, #23]
 80072a0:	7dfa      	ldrb	r2, [r7, #23]
 80072a2:	79fb      	ldrb	r3, [r7, #7]
 80072a4:	429a      	cmp	r2, r3
 80072a6:	d3d3      	bcc.n	8007250 <IntToUnicode+0x18>
  }
}
 80072a8:	bf00      	nop
 80072aa:	bf00      	nop
 80072ac:	371c      	adds	r7, #28
 80072ae:	46bd      	mov	sp, r7
 80072b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b4:	4770      	bx	lr
	...

080072b8 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 80072b8:	b580      	push	{r7, lr}
 80072ba:	b08a      	sub	sp, #40	; 0x28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072c0:	f107 0314 	add.w	r3, r7, #20
 80072c4:	2200      	movs	r2, #0
 80072c6:	601a      	str	r2, [r3, #0]
 80072c8:	605a      	str	r2, [r3, #4]
 80072ca:	609a      	str	r2, [r3, #8]
 80072cc:	60da      	str	r2, [r3, #12]
 80072ce:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80072d8:	d13a      	bne.n	8007350 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072da:	2300      	movs	r3, #0
 80072dc:	613b      	str	r3, [r7, #16]
 80072de:	4b1e      	ldr	r3, [pc, #120]	; (8007358 <HAL_PCD_MspInit+0xa0>)
 80072e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072e2:	4a1d      	ldr	r2, [pc, #116]	; (8007358 <HAL_PCD_MspInit+0xa0>)
 80072e4:	f043 0301 	orr.w	r3, r3, #1
 80072e8:	6313      	str	r3, [r2, #48]	; 0x30
 80072ea:	4b1b      	ldr	r3, [pc, #108]	; (8007358 <HAL_PCD_MspInit+0xa0>)
 80072ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072ee:	f003 0301 	and.w	r3, r3, #1
 80072f2:	613b      	str	r3, [r7, #16]
 80072f4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80072f6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80072fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072fc:	2302      	movs	r3, #2
 80072fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007300:	2300      	movs	r3, #0
 8007302:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007304:	2303      	movs	r3, #3
 8007306:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007308:	230a      	movs	r3, #10
 800730a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800730c:	f107 0314 	add.w	r3, r7, #20
 8007310:	4619      	mov	r1, r3
 8007312:	4812      	ldr	r0, [pc, #72]	; (800735c <HAL_PCD_MspInit+0xa4>)
 8007314:	f7fa fcea 	bl	8001cec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007318:	4b0f      	ldr	r3, [pc, #60]	; (8007358 <HAL_PCD_MspInit+0xa0>)
 800731a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800731c:	4a0e      	ldr	r2, [pc, #56]	; (8007358 <HAL_PCD_MspInit+0xa0>)
 800731e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007322:	6353      	str	r3, [r2, #52]	; 0x34
 8007324:	2300      	movs	r3, #0
 8007326:	60fb      	str	r3, [r7, #12]
 8007328:	4b0b      	ldr	r3, [pc, #44]	; (8007358 <HAL_PCD_MspInit+0xa0>)
 800732a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800732c:	4a0a      	ldr	r2, [pc, #40]	; (8007358 <HAL_PCD_MspInit+0xa0>)
 800732e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007332:	6453      	str	r3, [r2, #68]	; 0x44
 8007334:	4b08      	ldr	r3, [pc, #32]	; (8007358 <HAL_PCD_MspInit+0xa0>)
 8007336:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007338:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800733c:	60fb      	str	r3, [r7, #12]
 800733e:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007340:	2200      	movs	r2, #0
 8007342:	2100      	movs	r1, #0
 8007344:	2043      	movs	r0, #67	; 0x43
 8007346:	f7fa fc9a 	bl	8001c7e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 800734a:	2043      	movs	r0, #67	; 0x43
 800734c:	f7fa fcb3 	bl	8001cb6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007350:	bf00      	nop
 8007352:	3728      	adds	r7, #40	; 0x28
 8007354:	46bd      	mov	sp, r7
 8007356:	bd80      	pop	{r7, pc}
 8007358:	40023800 	.word	0x40023800
 800735c:	40020000 	.word	0x40020000

08007360 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007360:	b580      	push	{r7, lr}
 8007362:	b082      	sub	sp, #8
 8007364:	af00      	add	r7, sp, #0
 8007366:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007374:	4619      	mov	r1, r3
 8007376:	4610      	mov	r0, r2
 8007378:	f7fe fc45 	bl	8005c06 <USBD_LL_SetupStage>
}
 800737c:	bf00      	nop
 800737e:	3708      	adds	r7, #8
 8007380:	46bd      	mov	sp, r7
 8007382:	bd80      	pop	{r7, pc}

08007384 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007384:	b580      	push	{r7, lr}
 8007386:	b082      	sub	sp, #8
 8007388:	af00      	add	r7, sp, #0
 800738a:	6078      	str	r0, [r7, #4]
 800738c:	460b      	mov	r3, r1
 800738e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007396:	78fa      	ldrb	r2, [r7, #3]
 8007398:	6879      	ldr	r1, [r7, #4]
 800739a:	4613      	mov	r3, r2
 800739c:	00db      	lsls	r3, r3, #3
 800739e:	4413      	add	r3, r2
 80073a0:	009b      	lsls	r3, r3, #2
 80073a2:	440b      	add	r3, r1
 80073a4:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80073a8:	681a      	ldr	r2, [r3, #0]
 80073aa:	78fb      	ldrb	r3, [r7, #3]
 80073ac:	4619      	mov	r1, r3
 80073ae:	f7fe fc7f 	bl	8005cb0 <USBD_LL_DataOutStage>
}
 80073b2:	bf00      	nop
 80073b4:	3708      	adds	r7, #8
 80073b6:	46bd      	mov	sp, r7
 80073b8:	bd80      	pop	{r7, pc}

080073ba <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073ba:	b580      	push	{r7, lr}
 80073bc:	b082      	sub	sp, #8
 80073be:	af00      	add	r7, sp, #0
 80073c0:	6078      	str	r0, [r7, #4]
 80073c2:	460b      	mov	r3, r1
 80073c4:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 80073cc:	78fa      	ldrb	r2, [r7, #3]
 80073ce:	6879      	ldr	r1, [r7, #4]
 80073d0:	4613      	mov	r3, r2
 80073d2:	00db      	lsls	r3, r3, #3
 80073d4:	4413      	add	r3, r2
 80073d6:	009b      	lsls	r3, r3, #2
 80073d8:	440b      	add	r3, r1
 80073da:	334c      	adds	r3, #76	; 0x4c
 80073dc:	681a      	ldr	r2, [r3, #0]
 80073de:	78fb      	ldrb	r3, [r7, #3]
 80073e0:	4619      	mov	r1, r3
 80073e2:	f7fe fd18 	bl	8005e16 <USBD_LL_DataInStage>
}
 80073e6:	bf00      	nop
 80073e8:	3708      	adds	r7, #8
 80073ea:	46bd      	mov	sp, r7
 80073ec:	bd80      	pop	{r7, pc}

080073ee <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80073ee:	b580      	push	{r7, lr}
 80073f0:	b082      	sub	sp, #8
 80073f2:	af00      	add	r7, sp, #0
 80073f4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80073fc:	4618      	mov	r0, r3
 80073fe:	f7fe fe4c 	bl	800609a <USBD_LL_SOF>
}
 8007402:	bf00      	nop
 8007404:	3708      	adds	r7, #8
 8007406:	46bd      	mov	sp, r7
 8007408:	bd80      	pop	{r7, pc}

0800740a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800740a:	b580      	push	{r7, lr}
 800740c:	b084      	sub	sp, #16
 800740e:	af00      	add	r7, sp, #0
 8007410:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007412:	2301      	movs	r3, #1
 8007414:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	68db      	ldr	r3, [r3, #12]
 800741a:	2b02      	cmp	r3, #2
 800741c:	d001      	beq.n	8007422 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 800741e:	f7f9 fdf9 	bl	8001014 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007428:	7bfa      	ldrb	r2, [r7, #15]
 800742a:	4611      	mov	r1, r2
 800742c:	4618      	mov	r0, r3
 800742e:	f7fe fdf6 	bl	800601e <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007438:	4618      	mov	r0, r3
 800743a:	f7fe fd9e 	bl	8005f7a <USBD_LL_Reset>
}
 800743e:	bf00      	nop
 8007440:	3710      	adds	r7, #16
 8007442:	46bd      	mov	sp, r7
 8007444:	bd80      	pop	{r7, pc}
	...

08007448 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007448:	b580      	push	{r7, lr}
 800744a:	b082      	sub	sp, #8
 800744c:	af00      	add	r7, sp, #0
 800744e:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007456:	4618      	mov	r0, r3
 8007458:	f7fe fdf1 	bl	800603e <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	681b      	ldr	r3, [r3, #0]
 8007460:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	687a      	ldr	r2, [r7, #4]
 8007468:	6812      	ldr	r2, [r2, #0]
 800746a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800746e:	f043 0301 	orr.w	r3, r3, #1
 8007472:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	6a1b      	ldr	r3, [r3, #32]
 8007478:	2b00      	cmp	r3, #0
 800747a:	d005      	beq.n	8007488 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800747c:	4b04      	ldr	r3, [pc, #16]	; (8007490 <HAL_PCD_SuspendCallback+0x48>)
 800747e:	691b      	ldr	r3, [r3, #16]
 8007480:	4a03      	ldr	r2, [pc, #12]	; (8007490 <HAL_PCD_SuspendCallback+0x48>)
 8007482:	f043 0306 	orr.w	r3, r3, #6
 8007486:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007488:	bf00      	nop
 800748a:	3708      	adds	r7, #8
 800748c:	46bd      	mov	sp, r7
 800748e:	bd80      	pop	{r7, pc}
 8007490:	e000ed00 	.word	0xe000ed00

08007494 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007494:	b580      	push	{r7, lr}
 8007496:	b082      	sub	sp, #8
 8007498:	af00      	add	r7, sp, #0
 800749a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800749c:	687b      	ldr	r3, [r7, #4]
 800749e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074a2:	4618      	mov	r0, r3
 80074a4:	f7fe fde1 	bl	800606a <USBD_LL_Resume>
}
 80074a8:	bf00      	nop
 80074aa:	3708      	adds	r7, #8
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}

080074b0 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074b0:	b580      	push	{r7, lr}
 80074b2:	b082      	sub	sp, #8
 80074b4:	af00      	add	r7, sp, #0
 80074b6:	6078      	str	r0, [r7, #4]
 80074b8:	460b      	mov	r3, r1
 80074ba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074c2:	78fa      	ldrb	r2, [r7, #3]
 80074c4:	4611      	mov	r1, r2
 80074c6:	4618      	mov	r0, r3
 80074c8:	f7fe fe39 	bl	800613e <USBD_LL_IsoOUTIncomplete>
}
 80074cc:	bf00      	nop
 80074ce:	3708      	adds	r7, #8
 80074d0:	46bd      	mov	sp, r7
 80074d2:	bd80      	pop	{r7, pc}

080074d4 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	b082      	sub	sp, #8
 80074d8:	af00      	add	r7, sp, #0
 80074da:	6078      	str	r0, [r7, #4]
 80074dc:	460b      	mov	r3, r1
 80074de:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 80074e0:	687b      	ldr	r3, [r7, #4]
 80074e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074e6:	78fa      	ldrb	r2, [r7, #3]
 80074e8:	4611      	mov	r1, r2
 80074ea:	4618      	mov	r0, r3
 80074ec:	f7fe fdf5 	bl	80060da <USBD_LL_IsoINIncomplete>
}
 80074f0:	bf00      	nop
 80074f2:	3708      	adds	r7, #8
 80074f4:	46bd      	mov	sp, r7
 80074f6:	bd80      	pop	{r7, pc}

080074f8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007506:	4618      	mov	r0, r3
 8007508:	f7fe fe4b 	bl	80061a2 <USBD_LL_DevConnected>
}
 800750c:	bf00      	nop
 800750e:	3708      	adds	r7, #8
 8007510:	46bd      	mov	sp, r7
 8007512:	bd80      	pop	{r7, pc}

08007514 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007514:	b580      	push	{r7, lr}
 8007516:	b082      	sub	sp, #8
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 800751c:	687b      	ldr	r3, [r7, #4]
 800751e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007522:	4618      	mov	r0, r3
 8007524:	f7fe fe48 	bl	80061b8 <USBD_LL_DevDisconnected>
}
 8007528:	bf00      	nop
 800752a:	3708      	adds	r7, #8
 800752c:	46bd      	mov	sp, r7
 800752e:	bd80      	pop	{r7, pc}

08007530 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b082      	sub	sp, #8
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	781b      	ldrb	r3, [r3, #0]
 800753c:	2b00      	cmp	r3, #0
 800753e:	d13c      	bne.n	80075ba <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007540:	4a20      	ldr	r2, [pc, #128]	; (80075c4 <USBD_LL_Init+0x94>)
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	4a1e      	ldr	r2, [pc, #120]	; (80075c4 <USBD_LL_Init+0x94>)
 800754c:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007550:	4b1c      	ldr	r3, [pc, #112]	; (80075c4 <USBD_LL_Init+0x94>)
 8007552:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007556:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007558:	4b1a      	ldr	r3, [pc, #104]	; (80075c4 <USBD_LL_Init+0x94>)
 800755a:	2204      	movs	r2, #4
 800755c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800755e:	4b19      	ldr	r3, [pc, #100]	; (80075c4 <USBD_LL_Init+0x94>)
 8007560:	2202      	movs	r2, #2
 8007562:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007564:	4b17      	ldr	r3, [pc, #92]	; (80075c4 <USBD_LL_Init+0x94>)
 8007566:	2200      	movs	r2, #0
 8007568:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800756a:	4b16      	ldr	r3, [pc, #88]	; (80075c4 <USBD_LL_Init+0x94>)
 800756c:	2202      	movs	r2, #2
 800756e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007570:	4b14      	ldr	r3, [pc, #80]	; (80075c4 <USBD_LL_Init+0x94>)
 8007572:	2200      	movs	r2, #0
 8007574:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007576:	4b13      	ldr	r3, [pc, #76]	; (80075c4 <USBD_LL_Init+0x94>)
 8007578:	2200      	movs	r2, #0
 800757a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800757c:	4b11      	ldr	r3, [pc, #68]	; (80075c4 <USBD_LL_Init+0x94>)
 800757e:	2200      	movs	r2, #0
 8007580:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007582:	4b10      	ldr	r3, [pc, #64]	; (80075c4 <USBD_LL_Init+0x94>)
 8007584:	2200      	movs	r2, #0
 8007586:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007588:	4b0e      	ldr	r3, [pc, #56]	; (80075c4 <USBD_LL_Init+0x94>)
 800758a:	2200      	movs	r2, #0
 800758c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800758e:	480d      	ldr	r0, [pc, #52]	; (80075c4 <USBD_LL_Init+0x94>)
 8007590:	f7fa fd48 	bl	8002024 <HAL_PCD_Init>
 8007594:	4603      	mov	r3, r0
 8007596:	2b00      	cmp	r3, #0
 8007598:	d001      	beq.n	800759e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800759a:	f7f9 fd3b 	bl	8001014 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800759e:	2180      	movs	r1, #128	; 0x80
 80075a0:	4808      	ldr	r0, [pc, #32]	; (80075c4 <USBD_LL_Init+0x94>)
 80075a2:	f7fb ff88 	bl	80034b6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 80075a6:	2240      	movs	r2, #64	; 0x40
 80075a8:	2100      	movs	r1, #0
 80075aa:	4806      	ldr	r0, [pc, #24]	; (80075c4 <USBD_LL_Init+0x94>)
 80075ac:	f7fb ff3c 	bl	8003428 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 80075b0:	2280      	movs	r2, #128	; 0x80
 80075b2:	2101      	movs	r1, #1
 80075b4:	4803      	ldr	r0, [pc, #12]	; (80075c4 <USBD_LL_Init+0x94>)
 80075b6:	f7fb ff37 	bl	8003428 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 80075ba:	2300      	movs	r3, #0
}
 80075bc:	4618      	mov	r0, r3
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}
 80075c4:	20000c1c 	.word	0x20000c1c

080075c8 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b084      	sub	sp, #16
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80075d0:	2300      	movs	r3, #0
 80075d2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80075d4:	2300      	movs	r3, #0
 80075d6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 80075d8:	687b      	ldr	r3, [r7, #4]
 80075da:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80075de:	4618      	mov	r0, r3
 80075e0:	f7fa fe3d 	bl	800225e <HAL_PCD_Start>
 80075e4:	4603      	mov	r3, r0
 80075e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80075e8:	7bfb      	ldrb	r3, [r7, #15]
 80075ea:	4618      	mov	r0, r3
 80075ec:	f000 f930 	bl	8007850 <USBD_Get_USB_Status>
 80075f0:	4603      	mov	r3, r0
 80075f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80075f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80075f6:	4618      	mov	r0, r3
 80075f8:	3710      	adds	r7, #16
 80075fa:	46bd      	mov	sp, r7
 80075fc:	bd80      	pop	{r7, pc}

080075fe <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80075fe:	b580      	push	{r7, lr}
 8007600:	b084      	sub	sp, #16
 8007602:	af00      	add	r7, sp, #0
 8007604:	6078      	str	r0, [r7, #4]
 8007606:	4608      	mov	r0, r1
 8007608:	4611      	mov	r1, r2
 800760a:	461a      	mov	r2, r3
 800760c:	4603      	mov	r3, r0
 800760e:	70fb      	strb	r3, [r7, #3]
 8007610:	460b      	mov	r3, r1
 8007612:	70bb      	strb	r3, [r7, #2]
 8007614:	4613      	mov	r3, r2
 8007616:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007618:	2300      	movs	r3, #0
 800761a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800761c:	2300      	movs	r3, #0
 800761e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007626:	78bb      	ldrb	r3, [r7, #2]
 8007628:	883a      	ldrh	r2, [r7, #0]
 800762a:	78f9      	ldrb	r1, [r7, #3]
 800762c:	f7fb fb0e 	bl	8002c4c <HAL_PCD_EP_Open>
 8007630:	4603      	mov	r3, r0
 8007632:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007634:	7bfb      	ldrb	r3, [r7, #15]
 8007636:	4618      	mov	r0, r3
 8007638:	f000 f90a 	bl	8007850 <USBD_Get_USB_Status>
 800763c:	4603      	mov	r3, r0
 800763e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007640:	7bbb      	ldrb	r3, [r7, #14]
}
 8007642:	4618      	mov	r0, r3
 8007644:	3710      	adds	r7, #16
 8007646:	46bd      	mov	sp, r7
 8007648:	bd80      	pop	{r7, pc}

0800764a <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800764a:	b580      	push	{r7, lr}
 800764c:	b084      	sub	sp, #16
 800764e:	af00      	add	r7, sp, #0
 8007650:	6078      	str	r0, [r7, #4]
 8007652:	460b      	mov	r3, r1
 8007654:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007656:	2300      	movs	r3, #0
 8007658:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800765a:	2300      	movs	r3, #0
 800765c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007664:	78fa      	ldrb	r2, [r7, #3]
 8007666:	4611      	mov	r1, r2
 8007668:	4618      	mov	r0, r3
 800766a:	f7fb fb57 	bl	8002d1c <HAL_PCD_EP_Close>
 800766e:	4603      	mov	r3, r0
 8007670:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007672:	7bfb      	ldrb	r3, [r7, #15]
 8007674:	4618      	mov	r0, r3
 8007676:	f000 f8eb 	bl	8007850 <USBD_Get_USB_Status>
 800767a:	4603      	mov	r3, r0
 800767c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800767e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007680:	4618      	mov	r0, r3
 8007682:	3710      	adds	r7, #16
 8007684:	46bd      	mov	sp, r7
 8007686:	bd80      	pop	{r7, pc}

08007688 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007688:	b580      	push	{r7, lr}
 800768a:	b084      	sub	sp, #16
 800768c:	af00      	add	r7, sp, #0
 800768e:	6078      	str	r0, [r7, #4]
 8007690:	460b      	mov	r3, r1
 8007692:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007694:	2300      	movs	r3, #0
 8007696:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007698:	2300      	movs	r3, #0
 800769a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076a2:	78fa      	ldrb	r2, [r7, #3]
 80076a4:	4611      	mov	r1, r2
 80076a6:	4618      	mov	r0, r3
 80076a8:	f7fb fc17 	bl	8002eda <HAL_PCD_EP_SetStall>
 80076ac:	4603      	mov	r3, r0
 80076ae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076b0:	7bfb      	ldrb	r3, [r7, #15]
 80076b2:	4618      	mov	r0, r3
 80076b4:	f000 f8cc 	bl	8007850 <USBD_Get_USB_Status>
 80076b8:	4603      	mov	r3, r0
 80076ba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076bc:	7bbb      	ldrb	r3, [r7, #14]
}
 80076be:	4618      	mov	r0, r3
 80076c0:	3710      	adds	r7, #16
 80076c2:	46bd      	mov	sp, r7
 80076c4:	bd80      	pop	{r7, pc}

080076c6 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076c6:	b580      	push	{r7, lr}
 80076c8:	b084      	sub	sp, #16
 80076ca:	af00      	add	r7, sp, #0
 80076cc:	6078      	str	r0, [r7, #4]
 80076ce:	460b      	mov	r3, r1
 80076d0:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076d2:	2300      	movs	r3, #0
 80076d4:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076d6:	2300      	movs	r3, #0
 80076d8:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80076e0:	78fa      	ldrb	r2, [r7, #3]
 80076e2:	4611      	mov	r1, r2
 80076e4:	4618      	mov	r0, r3
 80076e6:	f7fb fc5c 	bl	8002fa2 <HAL_PCD_EP_ClrStall>
 80076ea:	4603      	mov	r3, r0
 80076ec:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076ee:	7bfb      	ldrb	r3, [r7, #15]
 80076f0:	4618      	mov	r0, r3
 80076f2:	f000 f8ad 	bl	8007850 <USBD_Get_USB_Status>
 80076f6:	4603      	mov	r3, r0
 80076f8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076fa:	7bbb      	ldrb	r3, [r7, #14]
}
 80076fc:	4618      	mov	r0, r3
 80076fe:	3710      	adds	r7, #16
 8007700:	46bd      	mov	sp, r7
 8007702:	bd80      	pop	{r7, pc}

08007704 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007704:	b480      	push	{r7}
 8007706:	b085      	sub	sp, #20
 8007708:	af00      	add	r7, sp, #0
 800770a:	6078      	str	r0, [r7, #4]
 800770c:	460b      	mov	r3, r1
 800770e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007716:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007718:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800771c:	2b00      	cmp	r3, #0
 800771e:	da0b      	bge.n	8007738 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007720:	78fb      	ldrb	r3, [r7, #3]
 8007722:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007726:	68f9      	ldr	r1, [r7, #12]
 8007728:	4613      	mov	r3, r2
 800772a:	00db      	lsls	r3, r3, #3
 800772c:	4413      	add	r3, r2
 800772e:	009b      	lsls	r3, r3, #2
 8007730:	440b      	add	r3, r1
 8007732:	333e      	adds	r3, #62	; 0x3e
 8007734:	781b      	ldrb	r3, [r3, #0]
 8007736:	e00b      	b.n	8007750 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007738:	78fb      	ldrb	r3, [r7, #3]
 800773a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800773e:	68f9      	ldr	r1, [r7, #12]
 8007740:	4613      	mov	r3, r2
 8007742:	00db      	lsls	r3, r3, #3
 8007744:	4413      	add	r3, r2
 8007746:	009b      	lsls	r3, r3, #2
 8007748:	440b      	add	r3, r1
 800774a:	f203 237e 	addw	r3, r3, #638	; 0x27e
 800774e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007750:	4618      	mov	r0, r3
 8007752:	3714      	adds	r7, #20
 8007754:	46bd      	mov	sp, r7
 8007756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800775a:	4770      	bx	lr

0800775c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	b084      	sub	sp, #16
 8007760:	af00      	add	r7, sp, #0
 8007762:	6078      	str	r0, [r7, #4]
 8007764:	460b      	mov	r3, r1
 8007766:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007768:	2300      	movs	r3, #0
 800776a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800776c:	2300      	movs	r3, #0
 800776e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007776:	78fa      	ldrb	r2, [r7, #3]
 8007778:	4611      	mov	r1, r2
 800777a:	4618      	mov	r0, r3
 800777c:	f7fb fa41 	bl	8002c02 <HAL_PCD_SetAddress>
 8007780:	4603      	mov	r3, r0
 8007782:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007784:	7bfb      	ldrb	r3, [r7, #15]
 8007786:	4618      	mov	r0, r3
 8007788:	f000 f862 	bl	8007850 <USBD_Get_USB_Status>
 800778c:	4603      	mov	r3, r0
 800778e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007790:	7bbb      	ldrb	r3, [r7, #14]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}

0800779a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800779a:	b580      	push	{r7, lr}
 800779c:	b086      	sub	sp, #24
 800779e:	af00      	add	r7, sp, #0
 80077a0:	60f8      	str	r0, [r7, #12]
 80077a2:	607a      	str	r2, [r7, #4]
 80077a4:	603b      	str	r3, [r7, #0]
 80077a6:	460b      	mov	r3, r1
 80077a8:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077aa:	2300      	movs	r3, #0
 80077ac:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077ae:	2300      	movs	r3, #0
 80077b0:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80077b8:	7af9      	ldrb	r1, [r7, #11]
 80077ba:	683b      	ldr	r3, [r7, #0]
 80077bc:	687a      	ldr	r2, [r7, #4]
 80077be:	f7fb fb42 	bl	8002e46 <HAL_PCD_EP_Transmit>
 80077c2:	4603      	mov	r3, r0
 80077c4:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80077c6:	7dfb      	ldrb	r3, [r7, #23]
 80077c8:	4618      	mov	r0, r3
 80077ca:	f000 f841 	bl	8007850 <USBD_Get_USB_Status>
 80077ce:	4603      	mov	r3, r0
 80077d0:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80077d2:	7dbb      	ldrb	r3, [r7, #22]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	3718      	adds	r7, #24
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}

080077dc <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80077dc:	b580      	push	{r7, lr}
 80077de:	b086      	sub	sp, #24
 80077e0:	af00      	add	r7, sp, #0
 80077e2:	60f8      	str	r0, [r7, #12]
 80077e4:	607a      	str	r2, [r7, #4]
 80077e6:	603b      	str	r3, [r7, #0]
 80077e8:	460b      	mov	r3, r1
 80077ea:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80077ec:	2300      	movs	r3, #0
 80077ee:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80077f0:	2300      	movs	r3, #0
 80077f2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80077fa:	7af9      	ldrb	r1, [r7, #11]
 80077fc:	683b      	ldr	r3, [r7, #0]
 80077fe:	687a      	ldr	r2, [r7, #4]
 8007800:	f7fb fad6 	bl	8002db0 <HAL_PCD_EP_Receive>
 8007804:	4603      	mov	r3, r0
 8007806:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007808:	7dfb      	ldrb	r3, [r7, #23]
 800780a:	4618      	mov	r0, r3
 800780c:	f000 f820 	bl	8007850 <USBD_Get_USB_Status>
 8007810:	4603      	mov	r3, r0
 8007812:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007814:	7dbb      	ldrb	r3, [r7, #22]
}
 8007816:	4618      	mov	r0, r3
 8007818:	3718      	adds	r7, #24
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007820:	b480      	push	{r7}
 8007822:	b083      	sub	sp, #12
 8007824:	af00      	add	r7, sp, #0
 8007826:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007828:	4b03      	ldr	r3, [pc, #12]	; (8007838 <USBD_static_malloc+0x18>)
}
 800782a:	4618      	mov	r0, r3
 800782c:	370c      	adds	r7, #12
 800782e:	46bd      	mov	sp, r7
 8007830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007834:	4770      	bx	lr
 8007836:	bf00      	nop
 8007838:	20001128 	.word	0x20001128

0800783c <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 800783c:	b480      	push	{r7}
 800783e:	b083      	sub	sp, #12
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]

}
 8007844:	bf00      	nop
 8007846:	370c      	adds	r7, #12
 8007848:	46bd      	mov	sp, r7
 800784a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800784e:	4770      	bx	lr

08007850 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007850:	b480      	push	{r7}
 8007852:	b085      	sub	sp, #20
 8007854:	af00      	add	r7, sp, #0
 8007856:	4603      	mov	r3, r0
 8007858:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800785e:	79fb      	ldrb	r3, [r7, #7]
 8007860:	2b03      	cmp	r3, #3
 8007862:	d817      	bhi.n	8007894 <USBD_Get_USB_Status+0x44>
 8007864:	a201      	add	r2, pc, #4	; (adr r2, 800786c <USBD_Get_USB_Status+0x1c>)
 8007866:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800786a:	bf00      	nop
 800786c:	0800787d 	.word	0x0800787d
 8007870:	08007883 	.word	0x08007883
 8007874:	08007889 	.word	0x08007889
 8007878:	0800788f 	.word	0x0800788f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800787c:	2300      	movs	r3, #0
 800787e:	73fb      	strb	r3, [r7, #15]
    break;
 8007880:	e00b      	b.n	800789a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007882:	2303      	movs	r3, #3
 8007884:	73fb      	strb	r3, [r7, #15]
    break;
 8007886:	e008      	b.n	800789a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007888:	2301      	movs	r3, #1
 800788a:	73fb      	strb	r3, [r7, #15]
    break;
 800788c:	e005      	b.n	800789a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800788e:	2303      	movs	r3, #3
 8007890:	73fb      	strb	r3, [r7, #15]
    break;
 8007892:	e002      	b.n	800789a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007894:	2303      	movs	r3, #3
 8007896:	73fb      	strb	r3, [r7, #15]
    break;
 8007898:	bf00      	nop
  }
  return usb_status;
 800789a:	7bfb      	ldrb	r3, [r7, #15]
}
 800789c:	4618      	mov	r0, r3
 800789e:	3714      	adds	r7, #20
 80078a0:	46bd      	mov	sp, r7
 80078a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078a6:	4770      	bx	lr

080078a8 <__libc_init_array>:
 80078a8:	b570      	push	{r4, r5, r6, lr}
 80078aa:	4d0d      	ldr	r5, [pc, #52]	; (80078e0 <__libc_init_array+0x38>)
 80078ac:	4c0d      	ldr	r4, [pc, #52]	; (80078e4 <__libc_init_array+0x3c>)
 80078ae:	1b64      	subs	r4, r4, r5
 80078b0:	10a4      	asrs	r4, r4, #2
 80078b2:	2600      	movs	r6, #0
 80078b4:	42a6      	cmp	r6, r4
 80078b6:	d109      	bne.n	80078cc <__libc_init_array+0x24>
 80078b8:	4d0b      	ldr	r5, [pc, #44]	; (80078e8 <__libc_init_array+0x40>)
 80078ba:	4c0c      	ldr	r4, [pc, #48]	; (80078ec <__libc_init_array+0x44>)
 80078bc:	f000 f820 	bl	8007900 <_init>
 80078c0:	1b64      	subs	r4, r4, r5
 80078c2:	10a4      	asrs	r4, r4, #2
 80078c4:	2600      	movs	r6, #0
 80078c6:	42a6      	cmp	r6, r4
 80078c8:	d105      	bne.n	80078d6 <__libc_init_array+0x2e>
 80078ca:	bd70      	pop	{r4, r5, r6, pc}
 80078cc:	f855 3b04 	ldr.w	r3, [r5], #4
 80078d0:	4798      	blx	r3
 80078d2:	3601      	adds	r6, #1
 80078d4:	e7ee      	b.n	80078b4 <__libc_init_array+0xc>
 80078d6:	f855 3b04 	ldr.w	r3, [r5], #4
 80078da:	4798      	blx	r3
 80078dc:	3601      	adds	r6, #1
 80078de:	e7f2      	b.n	80078c6 <__libc_init_array+0x1e>
 80078e0:	08007988 	.word	0x08007988
 80078e4:	08007988 	.word	0x08007988
 80078e8:	08007988 	.word	0x08007988
 80078ec:	0800798c 	.word	0x0800798c

080078f0 <memset>:
 80078f0:	4402      	add	r2, r0
 80078f2:	4603      	mov	r3, r0
 80078f4:	4293      	cmp	r3, r2
 80078f6:	d100      	bne.n	80078fa <memset+0xa>
 80078f8:	4770      	bx	lr
 80078fa:	f803 1b01 	strb.w	r1, [r3], #1
 80078fe:	e7f9      	b.n	80078f4 <memset+0x4>

08007900 <_init>:
 8007900:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007902:	bf00      	nop
 8007904:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007906:	bc08      	pop	{r3}
 8007908:	469e      	mov	lr, r3
 800790a:	4770      	bx	lr

0800790c <_fini>:
 800790c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800790e:	bf00      	nop
 8007910:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007912:	bc08      	pop	{r3}
 8007914:	469e      	mov	lr, r3
 8007916:	4770      	bx	lr
