
chorduroi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007f58  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  080080ec  080080ec  000180ec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800815c  0800815c  000204f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800815c  0800815c  0001815c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008164  08008164  000204f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008164  08008164  00018164  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008168  08008168  00018168  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004f0  20000000  0800816c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cb8  200004f0  0800865c  000204f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200011a8  0800865c  000211a8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010b55  00000000  00000000  00020520  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002efa  00000000  00000000  00031075  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cf8  00000000  00000000  00033f70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b88  00000000  00000000  00034c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cc3  00000000  00000000  000357f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011698  00000000  00000000  0004f4b3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093654  00000000  00000000  00060b4b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f419f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033b0  00000000  00000000  000f41f0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200004f0 	.word	0x200004f0
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080080d4 	.word	0x080080d4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200004f4 	.word	0x200004f4
 80001d0:	080080d4 	.word	0x080080d4

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <checkKeyPins>:



// Update the key-press array.
// This is where the keys "index" is determined.
void checkKeyPins(uint8_t* keyRef){
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	keyRef[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80004e0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004e4:	4842      	ldr	r0, [pc, #264]	; (80005f0 <checkKeyPins+0x118>)
 80004e6:	f002 f96f 	bl	80027c8 <HAL_GPIO_ReadPin>
 80004ea:	4603      	mov	r3, r0
 80004ec:	461a      	mov	r2, r3
 80004ee:	687b      	ldr	r3, [r7, #4]
 80004f0:	701a      	strb	r2, [r3, #0]
	keyRef[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 80004f2:	687b      	ldr	r3, [r7, #4]
 80004f4:	1c5c      	adds	r4, r3, #1
 80004f6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80004fa:	483d      	ldr	r0, [pc, #244]	; (80005f0 <checkKeyPins+0x118>)
 80004fc:	f002 f964 	bl	80027c8 <HAL_GPIO_ReadPin>
 8000500:	4603      	mov	r3, r0
 8000502:	7023      	strb	r3, [r4, #0]
	keyRef[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	1c9c      	adds	r4, r3, #2
 8000508:	2110      	movs	r1, #16
 800050a:	4839      	ldr	r0, [pc, #228]	; (80005f0 <checkKeyPins+0x118>)
 800050c:	f002 f95c 	bl	80027c8 <HAL_GPIO_ReadPin>
 8000510:	4603      	mov	r3, r0
 8000512:	7023      	strb	r3, [r4, #0]
	keyRef[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	1cdc      	adds	r4, r3, #3
 8000518:	2120      	movs	r1, #32
 800051a:	4835      	ldr	r0, [pc, #212]	; (80005f0 <checkKeyPins+0x118>)
 800051c:	f002 f954 	bl	80027c8 <HAL_GPIO_ReadPin>
 8000520:	4603      	mov	r3, r0
 8000522:	7023      	strb	r3, [r4, #0]
	keyRef[8] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	f103 0408 	add.w	r4, r3, #8
 800052a:	2140      	movs	r1, #64	; 0x40
 800052c:	4830      	ldr	r0, [pc, #192]	; (80005f0 <checkKeyPins+0x118>)
 800052e:	f002 f94b 	bl	80027c8 <HAL_GPIO_ReadPin>
 8000532:	4603      	mov	r3, r0
 8000534:	7023      	strb	r3, [r4, #0]
	keyRef[9] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8000536:	687b      	ldr	r3, [r7, #4]
 8000538:	f103 0409 	add.w	r4, r3, #9
 800053c:	2180      	movs	r1, #128	; 0x80
 800053e:	482c      	ldr	r0, [pc, #176]	; (80005f0 <checkKeyPins+0x118>)
 8000540:	f002 f942 	bl	80027c8 <HAL_GPIO_ReadPin>
 8000544:	4603      	mov	r3, r0
 8000546:	7023      	strb	r3, [r4, #0]
	keyRef[10] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 8000548:	687b      	ldr	r3, [r7, #4]
 800054a:	f103 040a 	add.w	r4, r3, #10
 800054e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000552:	4827      	ldr	r0, [pc, #156]	; (80005f0 <checkKeyPins+0x118>)
 8000554:	f002 f938 	bl	80027c8 <HAL_GPIO_ReadPin>
 8000558:	4603      	mov	r3, r0
 800055a:	7023      	strb	r3, [r4, #0]
	keyRef[11] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 800055c:	687b      	ldr	r3, [r7, #4]
 800055e:	f103 040b 	add.w	r4, r3, #11
 8000562:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000566:	4822      	ldr	r0, [pc, #136]	; (80005f0 <checkKeyPins+0x118>)
 8000568:	f002 f92e 	bl	80027c8 <HAL_GPIO_ReadPin>
 800056c:	4603      	mov	r3, r0
 800056e:	7023      	strb	r3, [r4, #0]
	keyRef[4] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 8000570:	687b      	ldr	r3, [r7, #4]
 8000572:	1d1c      	adds	r4, r3, #4
 8000574:	2110      	movs	r1, #16
 8000576:	481f      	ldr	r0, [pc, #124]	; (80005f4 <checkKeyPins+0x11c>)
 8000578:	f002 f926 	bl	80027c8 <HAL_GPIO_ReadPin>
 800057c:	4603      	mov	r3, r0
 800057e:	7023      	strb	r3, [r4, #0]
	keyRef[5] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	1d5c      	adds	r4, r3, #5
 8000584:	2120      	movs	r1, #32
 8000586:	481b      	ldr	r0, [pc, #108]	; (80005f4 <checkKeyPins+0x11c>)
 8000588:	f002 f91e 	bl	80027c8 <HAL_GPIO_ReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	7023      	strb	r3, [r4, #0]
	keyRef[6] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	1d9c      	adds	r4, r3, #6
 8000594:	2140      	movs	r1, #64	; 0x40
 8000596:	4817      	ldr	r0, [pc, #92]	; (80005f4 <checkKeyPins+0x11c>)
 8000598:	f002 f916 	bl	80027c8 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	7023      	strb	r3, [r4, #0]
	keyRef[7] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	1ddc      	adds	r4, r3, #7
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	4813      	ldr	r0, [pc, #76]	; (80005f4 <checkKeyPins+0x11c>)
 80005a8:	f002 f90e 	bl	80027c8 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	7023      	strb	r3, [r4, #0]
	keyRef[12] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f103 040c 	add.w	r4, r3, #12
 80005b6:	2101      	movs	r1, #1
 80005b8:	480d      	ldr	r0, [pc, #52]	; (80005f0 <checkKeyPins+0x118>)
 80005ba:	f002 f905 	bl	80027c8 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	7023      	strb	r3, [r4, #0]
	keyRef[13] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f103 040d 	add.w	r4, r3, #13
 80005c8:	2102      	movs	r1, #2
 80005ca:	4809      	ldr	r0, [pc, #36]	; (80005f0 <checkKeyPins+0x118>)
 80005cc:	f002 f8fc 	bl	80027c8 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	7023      	strb	r3, [r4, #0]
	//keyRef[14] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2);
	keyRef[15] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f103 040f 	add.w	r4, r3, #15
 80005da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005de:	4804      	ldr	r0, [pc, #16]	; (80005f0 <checkKeyPins+0x118>)
 80005e0:	f002 f8f2 	bl	80027c8 <HAL_GPIO_ReadPin>
 80005e4:	4603      	mov	r3, r0
 80005e6:	7023      	strb	r3, [r4, #0]

}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd90      	pop	{r4, r7, pc}
 80005f0:	40020400 	.word	0x40020400
 80005f4:	40020000 	.word	0x40020000

080005f8 <setModByte>:


void setModByte(uint8_t* code, keyboardHIDReport report){
 80005f8:	b480      	push	{r7}
 80005fa:	b085      	sub	sp, #20
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	60f8      	str	r0, [r7, #12]
 8000600:	1d3b      	adds	r3, r7, #4
 8000602:	e883 0006 	stmia.w	r3, {r1, r2}
	report.MOD = report.MOD | *code;
 8000606:	793a      	ldrb	r2, [r7, #4]
 8000608:	68fb      	ldr	r3, [r7, #12]
 800060a:	781b      	ldrb	r3, [r3, #0]
 800060c:	4313      	orrs	r3, r2
 800060e:	b2db      	uxtb	r3, r3
 8000610:	713b      	strb	r3, [r7, #4]
}
 8000612:	bf00      	nop
 8000614:	3714      	adds	r7, #20
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <setKeyBytes>:

void setKeyBytes(uint8_t* code, keyboardHIDReport keyboardReport){
 800061e:	b480      	push	{r7}
 8000620:	b085      	sub	sp, #20
 8000622:	af00      	add	r7, sp, #0
 8000624:	60f8      	str	r0, [r7, #12]
 8000626:	1d3b      	adds	r3, r7, #4
 8000628:	e883 0006 	stmia.w	r3, {r1, r2}
	if(keyboardReport.K1 == 0){
 800062c:	79bb      	ldrb	r3, [r7, #6]
 800062e:	2b00      	cmp	r3, #0
 8000630:	d103      	bne.n	800063a <setKeyBytes+0x1c>
		keyboardReport.K1 = *code;
 8000632:	68fb      	ldr	r3, [r7, #12]
 8000634:	781b      	ldrb	r3, [r3, #0]
 8000636:	71bb      	strb	r3, [r7, #6]
	} else if(keyboardReport.K5 == 0){
		keyboardReport.K5 = *code;
	} else if(keyboardReport.K6 == 0){
		keyboardReport.K6 = *code;
	}
}
 8000638:	e021      	b.n	800067e <setKeyBytes+0x60>
	} else if(keyboardReport.K2 == 0){
 800063a:	79fb      	ldrb	r3, [r7, #7]
 800063c:	2b00      	cmp	r3, #0
 800063e:	d103      	bne.n	8000648 <setKeyBytes+0x2a>
		keyboardReport.K2 = *code;
 8000640:	68fb      	ldr	r3, [r7, #12]
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	71fb      	strb	r3, [r7, #7]
}
 8000646:	e01a      	b.n	800067e <setKeyBytes+0x60>
	} else if(keyboardReport.K3 == 0){
 8000648:	7a3b      	ldrb	r3, [r7, #8]
 800064a:	2b00      	cmp	r3, #0
 800064c:	d103      	bne.n	8000656 <setKeyBytes+0x38>
		keyboardReport.K3 = *code;
 800064e:	68fb      	ldr	r3, [r7, #12]
 8000650:	781b      	ldrb	r3, [r3, #0]
 8000652:	723b      	strb	r3, [r7, #8]
}
 8000654:	e013      	b.n	800067e <setKeyBytes+0x60>
	} else if(keyboardReport.K4 == 0){
 8000656:	7a7b      	ldrb	r3, [r7, #9]
 8000658:	2b00      	cmp	r3, #0
 800065a:	d103      	bne.n	8000664 <setKeyBytes+0x46>
		keyboardReport.K4 = *code;
 800065c:	68fb      	ldr	r3, [r7, #12]
 800065e:	781b      	ldrb	r3, [r3, #0]
 8000660:	727b      	strb	r3, [r7, #9]
}
 8000662:	e00c      	b.n	800067e <setKeyBytes+0x60>
	} else if(keyboardReport.K5 == 0){
 8000664:	7abb      	ldrb	r3, [r7, #10]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d103      	bne.n	8000672 <setKeyBytes+0x54>
		keyboardReport.K5 = *code;
 800066a:	68fb      	ldr	r3, [r7, #12]
 800066c:	781b      	ldrb	r3, [r3, #0]
 800066e:	72bb      	strb	r3, [r7, #10]
}
 8000670:	e005      	b.n	800067e <setKeyBytes+0x60>
	} else if(keyboardReport.K6 == 0){
 8000672:	7afb      	ldrb	r3, [r7, #11]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d102      	bne.n	800067e <setKeyBytes+0x60>
		keyboardReport.K6 = *code;
 8000678:	68fb      	ldr	r3, [r7, #12]
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	72fb      	strb	r3, [r7, #11]
}
 800067e:	bf00      	nop
 8000680:	3714      	adds	r7, #20
 8000682:	46bd      	mov	sp, r7
 8000684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000688:	4770      	bx	lr

0800068a <setReport>:

//TODO physical vs imp priority could be configurable
void setReport(int keypress, Layer* layer, keyboardHIDReport keyboardReport){
 800068a:	b580      	push	{r7, lr}
 800068c:	b086      	sub	sp, #24
 800068e:	af00      	add	r7, sp, #0
 8000690:	60f8      	str	r0, [r7, #12]
 8000692:	60b9      	str	r1, [r7, #8]
 8000694:	4639      	mov	r1, r7
 8000696:	e881 000c 	stmia.w	r1, {r2, r3}
	// Imp key
	uint8_t * modcode = layer->impMod;
 800069a:	68bb      	ldr	r3, [r7, #8]
 800069c:	681b      	ldr	r3, [r3, #0]
 800069e:	617b      	str	r3, [r7, #20]
	uint8_t * keycode = layer->impKey;
 80006a0:	68bb      	ldr	r3, [r7, #8]
 80006a2:	685b      	ldr	r3, [r3, #4]
 80006a4:	613b      	str	r3, [r7, #16]

	setKeyBytes(keycode, keyboardReport);
 80006a6:	463b      	mov	r3, r7
 80006a8:	e893 0006 	ldmia.w	r3, {r1, r2}
 80006ac:	6938      	ldr	r0, [r7, #16]
 80006ae:	f7ff ffb6 	bl	800061e <setKeyBytes>
	setModByte(modcode, keyboardReport);
 80006b2:	463b      	mov	r3, r7
 80006b4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80006b8:	6978      	ldr	r0, [r7, #20]
 80006ba:	f7ff ff9d 	bl	80005f8 <setModByte>

	// Physical key
	modcode = layer->pModLayer + keypress; // TODO implications of pModLayer[keypress] auto dereference rather than using a pointer?
 80006be:	68bb      	ldr	r3, [r7, #8]
 80006c0:	689a      	ldr	r2, [r3, #8]
 80006c2:	68fb      	ldr	r3, [r7, #12]
 80006c4:	4413      	add	r3, r2
 80006c6:	617b      	str	r3, [r7, #20]
	keycode = layer->pKeyLayer + keypress;
 80006c8:	68bb      	ldr	r3, [r7, #8]
 80006ca:	68da      	ldr	r2, [r3, #12]
 80006cc:	68fb      	ldr	r3, [r7, #12]
 80006ce:	4413      	add	r3, r2
 80006d0:	613b      	str	r3, [r7, #16]

	setKeyBytes(keycode, keyboardReport);
 80006d2:	463b      	mov	r3, r7
 80006d4:	e893 0006 	ldmia.w	r3, {r1, r2}
 80006d8:	6938      	ldr	r0, [r7, #16]
 80006da:	f7ff ffa0 	bl	800061e <setKeyBytes>
	setModByte(modcode, keyboardReport);
 80006de:	463b      	mov	r3, r7
 80006e0:	e893 0006 	ldmia.w	r3, {r1, r2}
 80006e4:	6978      	ldr	r0, [r7, #20]
 80006e6:	f7ff ff87 	bl	80005f8 <setModByte>

}
 80006ea:	bf00      	nop
 80006ec:	3718      	adds	r7, #24
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <setHeld>:
	setKeyBytes(keycode);
	setModByte(modcode);
}
 * */

void setHeld(int keypress, int layerNumber, int* heldRef){
 80006f2:	b480      	push	{r7}
 80006f4:	b085      	sub	sp, #20
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	60f8      	str	r0, [r7, #12]
 80006fa:	60b9      	str	r1, [r7, #8]
 80006fc:	607a      	str	r2, [r7, #4]
	heldRef[keypress] = layerNumber;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	601a      	str	r2, [r3, #0]
}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <setHeldReport>:

void setHeldReport(int keypress, Layer* keymap, int* heldRef, keyboardHIDReport keyboardReport){
 8000716:	b082      	sub	sp, #8
 8000718:	b580      	push	{r7, lr}
 800071a:	b086      	sub	sp, #24
 800071c:	af00      	add	r7, sp, #0
 800071e:	60f8      	str	r0, [r7, #12]
 8000720:	60b9      	str	r1, [r7, #8]
 8000722:	607a      	str	r2, [r7, #4]
 8000724:	627b      	str	r3, [r7, #36]	; 0x24
	Layer* heldKeyLayer = &keymap[heldRef[keypress]];
 8000726:	68fb      	ldr	r3, [r7, #12]
 8000728:	009b      	lsls	r3, r3, #2
 800072a:	687a      	ldr	r2, [r7, #4]
 800072c:	4413      	add	r3, r2
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	461a      	mov	r2, r3
 8000732:	4613      	mov	r3, r2
 8000734:	009b      	lsls	r3, r3, #2
 8000736:	4413      	add	r3, r2
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	461a      	mov	r2, r3
 800073c:	68bb      	ldr	r3, [r7, #8]
 800073e:	4413      	add	r3, r2
 8000740:	617b      	str	r3, [r7, #20]
	//if isHold[0] then the key is not held, else it's the numebr of the layer it was pressed down in

	setReport(keypress, heldKeyLayer, keyboardReport);
 8000742:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000746:	cb0c      	ldmia	r3, {r2, r3}
 8000748:	6979      	ldr	r1, [r7, #20]
 800074a:	68f8      	ldr	r0, [r7, #12]
 800074c:	f7ff ff9d 	bl	800068a <setReport>

}
 8000750:	bf00      	nop
 8000752:	3718      	adds	r7, #24
 8000754:	46bd      	mov	sp, r7
 8000756:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800075a:	b002      	add	sp, #8
 800075c:	4770      	bx	lr

0800075e <scanKeys>:
	setReport(keypress, relMods, relKeys);

}
 * */

void scanKeys(Layer* keymap, Layer* layerRef, int* heldRef, uint8_t* keyRef, keyboardHIDReport report){
 800075e:	b580      	push	{r7, lr}
 8000760:	b088      	sub	sp, #32
 8000762:	af02      	add	r7, sp, #8
 8000764:	60f8      	str	r0, [r7, #12]
 8000766:	60b9      	str	r1, [r7, #8]
 8000768:	607a      	str	r2, [r7, #4]
 800076a:	603b      	str	r3, [r7, #0]
	int i;
	for(i = 0; i < NUMBER_OF_KEYS; i++){
 800076c:	2300      	movs	r3, #0
 800076e:	617b      	str	r3, [r7, #20]
 8000770:	e02c      	b.n	80007cc <scanKeys+0x6e>
		//Original if condition was: GPIO_PIN_RESET == HAL_GPIO_ReadPin(keyPorts[i]/, keyPins[i])
		if(keyRef[i] == 0){
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	683a      	ldr	r2, [r7, #0]
 8000776:	4413      	add	r3, r2
 8000778:	781b      	ldrb	r3, [r3, #0]
 800077a:	2b00      	cmp	r3, #0
 800077c:	d11e      	bne.n	80007bc <scanKeys+0x5e>
			switch(heldRef[i]){
 800077e:	697b      	ldr	r3, [r7, #20]
 8000780:	009b      	lsls	r3, r3, #2
 8000782:	687a      	ldr	r2, [r7, #4]
 8000784:	4413      	add	r3, r2
 8000786:	681b      	ldr	r3, [r3, #0]
 8000788:	2b00      	cmp	r3, #0
 800078a:	d10e      	bne.n	80007aa <scanKeys+0x4c>
			case 0: setReport(i, layerRef, report);
 800078c:	f107 0320 	add.w	r3, r7, #32
 8000790:	cb0c      	ldmia	r3, {r2, r3}
 8000792:	68b9      	ldr	r1, [r7, #8]
 8000794:	6978      	ldr	r0, [r7, #20]
 8000796:	f7ff ff78 	bl	800068a <setReport>
					setHeld(i, layerRef->layerNum, heldRef);
 800079a:	68bb      	ldr	r3, [r7, #8]
 800079c:	691b      	ldr	r3, [r3, #16]
 800079e:	687a      	ldr	r2, [r7, #4]
 80007a0:	4619      	mov	r1, r3
 80007a2:	6978      	ldr	r0, [r7, #20]
 80007a4:	f7ff ffa5 	bl	80006f2 <setHeld>
				break;
 80007a8:	e00d      	b.n	80007c6 <scanKeys+0x68>
			default: setHeldReport(i, keymap, heldRef, report);
 80007aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80007ac:	9300      	str	r3, [sp, #0]
 80007ae:	6a3b      	ldr	r3, [r7, #32]
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	68f9      	ldr	r1, [r7, #12]
 80007b4:	6978      	ldr	r0, [r7, #20]
 80007b6:	f7ff ffae 	bl	8000716 <setHeldReport>
				break;
 80007ba:	e004      	b.n	80007c6 <scanKeys+0x68>
			}

		} else {// add a check? : else if (isHold[1] != 0) {} ?? not sure what's best practice
			setHeld(i, 0, heldRef);
 80007bc:	687a      	ldr	r2, [r7, #4]
 80007be:	2100      	movs	r1, #0
 80007c0:	6978      	ldr	r0, [r7, #20]
 80007c2:	f7ff ff96 	bl	80006f2 <setHeld>
	for(i = 0; i < NUMBER_OF_KEYS; i++){
 80007c6:	697b      	ldr	r3, [r7, #20]
 80007c8:	3301      	adds	r3, #1
 80007ca:	617b      	str	r3, [r7, #20]
 80007cc:	697b      	ldr	r3, [r7, #20]
 80007ce:	2b0f      	cmp	r3, #15
 80007d0:	ddcf      	ble.n	8000772 <scanKeys+0x14>
		}
	}
}
 80007d2:	bf00      	nop
 80007d4:	bf00      	nop
 80007d6:	3718      	adds	r7, #24
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}

080007dc <clearReport>:

// scan function for keyboard settings i.e. swtichingmouse mode

// scan for thumb-stick keys, so scans held, but sets the report to a prebuilt report mapped tot hat layer... technically with that the layer could still function normally... for mod keys... probbaly a more elegant solution for most cases... but I do like the manual mod map

void clearReport(keyboardHIDReport keyboardReport){
 80007dc:	b480      	push	{r7}
 80007de:	b083      	sub	sp, #12
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	463b      	mov	r3, r7
 80007e4:	e883 0003 	stmia.w	r3, {r0, r1}
	keyboardReport.MOD = 0;
 80007e8:	2300      	movs	r3, #0
 80007ea:	703b      	strb	r3, [r7, #0]
	keyboardReport.K1 = 0;
 80007ec:	2300      	movs	r3, #0
 80007ee:	70bb      	strb	r3, [r7, #2]
	keyboardReport.K2 = 0;
 80007f0:	2300      	movs	r3, #0
 80007f2:	70fb      	strb	r3, [r7, #3]
	keyboardReport.K3 = 0;
 80007f4:	2300      	movs	r3, #0
 80007f6:	713b      	strb	r3, [r7, #4]
	keyboardReport.K4 = 0;
 80007f8:	2300      	movs	r3, #0
 80007fa:	717b      	strb	r3, [r7, #5]
	keyboardReport.K5 = 0;
 80007fc:	2300      	movs	r3, #0
 80007fe:	71bb      	strb	r3, [r7, #6]
	keyboardReport.K6 = 0;
 8000800:	2300      	movs	r3, #0
 8000802:	71fb      	strb	r3, [r7, #7]
}
 8000804:	bf00      	nop
 8000806:	370c      	adds	r7, #12
 8000808:	46bd      	mov	sp, r7
 800080a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800080e:	4770      	bx	lr

08000810 <categorizeJoy>:
//void initStick(uint32_t* DMA_buff, uint16_t restHandle, uint){

//}


enum joydir categorizeJoy(joystick* stick, uint32_t tresh){
 8000810:	b480      	push	{r7}
 8000812:	b087      	sub	sp, #28
 8000814:	af00      	add	r7, sp, #0
 8000816:	6078      	str	r0, [r7, #4]
 8000818:	6039      	str	r1, [r7, #0]

	int32_t xDif;
	int32_t yDif;

	// Substract the neutral and position for the sign to match cartesian convention
	if(stick->xPolarity == 0) {
 800081a:	687b      	ldr	r3, [r7, #4]
 800081c:	7c1b      	ldrb	r3, [r3, #16]
 800081e:	2b00      	cmp	r3, #0
 8000820:	d107      	bne.n	8000832 <categorizeJoy+0x22>
		xDif = *(stick->xAxis) - stick->xNeutral;
 8000822:	687b      	ldr	r3, [r7, #4]
 8000824:	685b      	ldr	r3, [r3, #4]
 8000826:	681a      	ldr	r2, [r3, #0]
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689b      	ldr	r3, [r3, #8]
 800082c:	1ad3      	subs	r3, r2, r3
 800082e:	617b      	str	r3, [r7, #20]
 8000830:	e006      	b.n	8000840 <categorizeJoy+0x30>
	} else {
		xDif = stick->xNeutral - *(stick->xAxis);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	689a      	ldr	r2, [r3, #8]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	685b      	ldr	r3, [r3, #4]
 800083a:	681b      	ldr	r3, [r3, #0]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	617b      	str	r3, [r7, #20]
	}

	if(stick->yPolarity == 0) {
 8000840:	687b      	ldr	r3, [r7, #4]
 8000842:	7c5b      	ldrb	r3, [r3, #17]
 8000844:	2b00      	cmp	r3, #0
 8000846:	d107      	bne.n	8000858 <categorizeJoy+0x48>
	    yDif = *(stick->yAxis) - stick->yNeutral;
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	613b      	str	r3, [r7, #16]
 8000856:	e006      	b.n	8000866 <categorizeJoy+0x56>
	} else {
		yDif = stick->xNeutral - *(stick->xAxis);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	689a      	ldr	r2, [r3, #8]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	685b      	ldr	r3, [r3, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	1ad3      	subs	r3, r2, r3
 8000864:	613b      	str	r3, [r7, #16]
	}


	int xMag = abs(xDif);
 8000866:	697b      	ldr	r3, [r7, #20]
 8000868:	2b00      	cmp	r3, #0
 800086a:	bfb8      	it	lt
 800086c:	425b      	neglt	r3, r3
 800086e:	60fb      	str	r3, [r7, #12]
	int yMag = abs(yDif);
 8000870:	693b      	ldr	r3, [r7, #16]
 8000872:	2b00      	cmp	r3, #0
 8000874:	bfb8      	it	lt
 8000876:	425b      	neglt	r3, r3
 8000878:	60bb      	str	r3, [r7, #8]

	if(xMag <= tresh || yMag <= tresh){
 800087a:	68fb      	ldr	r3, [r7, #12]
 800087c:	683a      	ldr	r2, [r7, #0]
 800087e:	429a      	cmp	r2, r3
 8000880:	d203      	bcs.n	800088a <categorizeJoy+0x7a>
 8000882:	68bb      	ldr	r3, [r7, #8]
 8000884:	683a      	ldr	r2, [r7, #0]
 8000886:	429a      	cmp	r2, r3
 8000888:	d304      	bcc.n	8000894 <categorizeJoy+0x84>
		stick->position = CENTERWISE;
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	2200      	movs	r2, #0
 800088e:	749a      	strb	r2, [r3, #18]
		return CENTERWISE; //Stick not directed
 8000890:	2300      	movs	r3, #0
 8000892:	e01c      	b.n	80008ce <categorizeJoy+0xbe>
	}

	if(xMag > yMag) {// HORIZONTAL MOTION
 8000894:	68fa      	ldr	r2, [r7, #12]
 8000896:	68bb      	ldr	r3, [r7, #8]
 8000898:	429a      	cmp	r2, r3
 800089a:	dd0c      	ble.n	80008b6 <categorizeJoy+0xa6>
		if(xDif > 0) {
 800089c:	697b      	ldr	r3, [r7, #20]
 800089e:	2b00      	cmp	r3, #0
 80008a0:	dd04      	ble.n	80008ac <categorizeJoy+0x9c>
			stick->position = EASTWISE;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2201      	movs	r2, #1
 80008a6:	749a      	strb	r2, [r3, #18]
			return EASTWISE;
 80008a8:	2301      	movs	r3, #1
 80008aa:	e010      	b.n	80008ce <categorizeJoy+0xbe>
		} else {
			stick->position = WESTWISE;
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	2204      	movs	r2, #4
 80008b0:	749a      	strb	r2, [r3, #18]
			return WESTWISE;
 80008b2:	2304      	movs	r3, #4
 80008b4:	e00b      	b.n	80008ce <categorizeJoy+0xbe>
		}

	} else { // VERTICAL MOTION
		if(yDif > 0) {
 80008b6:	693b      	ldr	r3, [r7, #16]
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	dd04      	ble.n	80008c6 <categorizeJoy+0xb6>
			stick->position = NORTHWISE;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2203      	movs	r2, #3
 80008c0:	749a      	strb	r2, [r3, #18]
			return NORTHWISE;
 80008c2:	2303      	movs	r3, #3
 80008c4:	e003      	b.n	80008ce <categorizeJoy+0xbe>
		} else {
			stick->position = SOUTHWISE;
 80008c6:	687b      	ldr	r3, [r7, #4]
 80008c8:	2202      	movs	r2, #2
 80008ca:	749a      	strb	r2, [r3, #18]
			return SOUTHWISE;
 80008cc:	2302      	movs	r3, #2
		}
	}
 stick->position = CENTERWISE;
 return CENTERWISE; // If they're equal in magnitude they cancel out... Very Unlikely
}
 80008ce:	4618      	mov	r0, r3
 80008d0:	371c      	adds	r7, #28
 80008d2:	46bd      	mov	sp, r7
 80008d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d8:	4770      	bx	lr
	...

080008dc <bitmaskToLayer>:
	LEFT_JOY
};

// switch case with 25 cases

int bitmaskToLayer(uint8_t bitmask){
 80008dc:	b480      	push	{r7}
 80008de:	b083      	sub	sp, #12
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	4603      	mov	r3, r0
 80008e4:	71fb      	strb	r3, [r7, #7]
	switch (bitmask) {
 80008e6:	79fb      	ldrb	r3, [r7, #7]
 80008e8:	2b88      	cmp	r3, #136	; 0x88
 80008ea:	f200 8147 	bhi.w	8000b7c <bitmaskToLayer+0x2a0>
 80008ee:	a201      	add	r2, pc, #4	; (adr r2, 80008f4 <bitmaskToLayer+0x18>)
 80008f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f4:	08000b19 	.word	0x08000b19
 80008f8:	08000b1d 	.word	0x08000b1d
 80008fc:	08000b21 	.word	0x08000b21
 8000900:	08000b7d 	.word	0x08000b7d
 8000904:	08000b25 	.word	0x08000b25
 8000908:	08000b7d 	.word	0x08000b7d
 800090c:	08000b7d 	.word	0x08000b7d
 8000910:	08000b7d 	.word	0x08000b7d
 8000914:	08000b29 	.word	0x08000b29
 8000918:	08000b7d 	.word	0x08000b7d
 800091c:	08000b7d 	.word	0x08000b7d
 8000920:	08000b7d 	.word	0x08000b7d
 8000924:	08000b7d 	.word	0x08000b7d
 8000928:	08000b7d 	.word	0x08000b7d
 800092c:	08000b7d 	.word	0x08000b7d
 8000930:	08000b7d 	.word	0x08000b7d
 8000934:	08000b2d 	.word	0x08000b2d
 8000938:	08000b31 	.word	0x08000b31
 800093c:	08000b35 	.word	0x08000b35
 8000940:	08000b7d 	.word	0x08000b7d
 8000944:	08000b39 	.word	0x08000b39
 8000948:	08000b7d 	.word	0x08000b7d
 800094c:	08000b7d 	.word	0x08000b7d
 8000950:	08000b7d 	.word	0x08000b7d
 8000954:	08000b3d 	.word	0x08000b3d
 8000958:	08000b7d 	.word	0x08000b7d
 800095c:	08000b7d 	.word	0x08000b7d
 8000960:	08000b7d 	.word	0x08000b7d
 8000964:	08000b7d 	.word	0x08000b7d
 8000968:	08000b7d 	.word	0x08000b7d
 800096c:	08000b7d 	.word	0x08000b7d
 8000970:	08000b7d 	.word	0x08000b7d
 8000974:	08000b41 	.word	0x08000b41
 8000978:	08000b45 	.word	0x08000b45
 800097c:	08000b49 	.word	0x08000b49
 8000980:	08000b7d 	.word	0x08000b7d
 8000984:	08000b4d 	.word	0x08000b4d
 8000988:	08000b7d 	.word	0x08000b7d
 800098c:	08000b7d 	.word	0x08000b7d
 8000990:	08000b7d 	.word	0x08000b7d
 8000994:	08000b51 	.word	0x08000b51
 8000998:	08000b7d 	.word	0x08000b7d
 800099c:	08000b7d 	.word	0x08000b7d
 80009a0:	08000b7d 	.word	0x08000b7d
 80009a4:	08000b7d 	.word	0x08000b7d
 80009a8:	08000b7d 	.word	0x08000b7d
 80009ac:	08000b7d 	.word	0x08000b7d
 80009b0:	08000b7d 	.word	0x08000b7d
 80009b4:	08000b7d 	.word	0x08000b7d
 80009b8:	08000b7d 	.word	0x08000b7d
 80009bc:	08000b7d 	.word	0x08000b7d
 80009c0:	08000b7d 	.word	0x08000b7d
 80009c4:	08000b7d 	.word	0x08000b7d
 80009c8:	08000b7d 	.word	0x08000b7d
 80009cc:	08000b7d 	.word	0x08000b7d
 80009d0:	08000b7d 	.word	0x08000b7d
 80009d4:	08000b7d 	.word	0x08000b7d
 80009d8:	08000b7d 	.word	0x08000b7d
 80009dc:	08000b7d 	.word	0x08000b7d
 80009e0:	08000b7d 	.word	0x08000b7d
 80009e4:	08000b7d 	.word	0x08000b7d
 80009e8:	08000b7d 	.word	0x08000b7d
 80009ec:	08000b7d 	.word	0x08000b7d
 80009f0:	08000b7d 	.word	0x08000b7d
 80009f4:	08000b55 	.word	0x08000b55
 80009f8:	08000b59 	.word	0x08000b59
 80009fc:	08000b5d 	.word	0x08000b5d
 8000a00:	08000b7d 	.word	0x08000b7d
 8000a04:	08000b61 	.word	0x08000b61
 8000a08:	08000b7d 	.word	0x08000b7d
 8000a0c:	08000b7d 	.word	0x08000b7d
 8000a10:	08000b7d 	.word	0x08000b7d
 8000a14:	08000b65 	.word	0x08000b65
 8000a18:	08000b7d 	.word	0x08000b7d
 8000a1c:	08000b7d 	.word	0x08000b7d
 8000a20:	08000b7d 	.word	0x08000b7d
 8000a24:	08000b7d 	.word	0x08000b7d
 8000a28:	08000b7d 	.word	0x08000b7d
 8000a2c:	08000b7d 	.word	0x08000b7d
 8000a30:	08000b7d 	.word	0x08000b7d
 8000a34:	08000b7d 	.word	0x08000b7d
 8000a38:	08000b7d 	.word	0x08000b7d
 8000a3c:	08000b7d 	.word	0x08000b7d
 8000a40:	08000b7d 	.word	0x08000b7d
 8000a44:	08000b7d 	.word	0x08000b7d
 8000a48:	08000b7d 	.word	0x08000b7d
 8000a4c:	08000b7d 	.word	0x08000b7d
 8000a50:	08000b7d 	.word	0x08000b7d
 8000a54:	08000b7d 	.word	0x08000b7d
 8000a58:	08000b7d 	.word	0x08000b7d
 8000a5c:	08000b7d 	.word	0x08000b7d
 8000a60:	08000b7d 	.word	0x08000b7d
 8000a64:	08000b7d 	.word	0x08000b7d
 8000a68:	08000b7d 	.word	0x08000b7d
 8000a6c:	08000b7d 	.word	0x08000b7d
 8000a70:	08000b7d 	.word	0x08000b7d
 8000a74:	08000b7d 	.word	0x08000b7d
 8000a78:	08000b7d 	.word	0x08000b7d
 8000a7c:	08000b7d 	.word	0x08000b7d
 8000a80:	08000b7d 	.word	0x08000b7d
 8000a84:	08000b7d 	.word	0x08000b7d
 8000a88:	08000b7d 	.word	0x08000b7d
 8000a8c:	08000b7d 	.word	0x08000b7d
 8000a90:	08000b7d 	.word	0x08000b7d
 8000a94:	08000b7d 	.word	0x08000b7d
 8000a98:	08000b7d 	.word	0x08000b7d
 8000a9c:	08000b7d 	.word	0x08000b7d
 8000aa0:	08000b7d 	.word	0x08000b7d
 8000aa4:	08000b7d 	.word	0x08000b7d
 8000aa8:	08000b7d 	.word	0x08000b7d
 8000aac:	08000b7d 	.word	0x08000b7d
 8000ab0:	08000b7d 	.word	0x08000b7d
 8000ab4:	08000b7d 	.word	0x08000b7d
 8000ab8:	08000b7d 	.word	0x08000b7d
 8000abc:	08000b7d 	.word	0x08000b7d
 8000ac0:	08000b7d 	.word	0x08000b7d
 8000ac4:	08000b7d 	.word	0x08000b7d
 8000ac8:	08000b7d 	.word	0x08000b7d
 8000acc:	08000b7d 	.word	0x08000b7d
 8000ad0:	08000b7d 	.word	0x08000b7d
 8000ad4:	08000b7d 	.word	0x08000b7d
 8000ad8:	08000b7d 	.word	0x08000b7d
 8000adc:	08000b7d 	.word	0x08000b7d
 8000ae0:	08000b7d 	.word	0x08000b7d
 8000ae4:	08000b7d 	.word	0x08000b7d
 8000ae8:	08000b7d 	.word	0x08000b7d
 8000aec:	08000b7d 	.word	0x08000b7d
 8000af0:	08000b7d 	.word	0x08000b7d
 8000af4:	08000b69 	.word	0x08000b69
 8000af8:	08000b6d 	.word	0x08000b6d
 8000afc:	08000b71 	.word	0x08000b71
 8000b00:	08000b7d 	.word	0x08000b7d
 8000b04:	08000b75 	.word	0x08000b75
 8000b08:	08000b7d 	.word	0x08000b7d
 8000b0c:	08000b7d 	.word	0x08000b7d
 8000b10:	08000b7d 	.word	0x08000b7d
 8000b14:	08000b79 	.word	0x08000b79
		case LAYER_1_ID :
			return 1;
 8000b18:	2301      	movs	r3, #1
 8000b1a:	e02f      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_2_ID :
			return 2;
 8000b1c:	2302      	movs	r3, #2
 8000b1e:	e02d      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_3_ID :
			return 3;
 8000b20:	2303      	movs	r3, #3
 8000b22:	e02b      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_4_ID :
			return 4;
 8000b24:	2304      	movs	r3, #4
 8000b26:	e029      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_5_ID :
			return 5;
 8000b28:	2305      	movs	r3, #5
 8000b2a:	e027      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_6_ID :
			return 6;
 8000b2c:	2306      	movs	r3, #6
 8000b2e:	e025      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_7_ID :
			return 7;
 8000b30:	2307      	movs	r3, #7
 8000b32:	e023      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_8_ID :
			return 8;
 8000b34:	2308      	movs	r3, #8
 8000b36:	e021      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_9_ID :
			return 9;
 8000b38:	2309      	movs	r3, #9
 8000b3a:	e01f      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_10_ID:
			return 10;
 8000b3c:	230a      	movs	r3, #10
 8000b3e:	e01d      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_11_ID:
			return 11;
 8000b40:	230b      	movs	r3, #11
 8000b42:	e01b      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_12_ID:
			return 12;
 8000b44:	230c      	movs	r3, #12
 8000b46:	e019      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_13_ID:
			return 13;
 8000b48:	230d      	movs	r3, #13
 8000b4a:	e017      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_14_ID:
			return 14;
 8000b4c:	230e      	movs	r3, #14
 8000b4e:	e015      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_15_ID:
			return 15;
 8000b50:	230f      	movs	r3, #15
 8000b52:	e013      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_16_ID:
			return 16;
 8000b54:	2310      	movs	r3, #16
 8000b56:	e011      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_17_ID:
			return 17;
 8000b58:	2311      	movs	r3, #17
 8000b5a:	e00f      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_18_ID:
			return 18;
 8000b5c:	2312      	movs	r3, #18
 8000b5e:	e00d      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_19_ID:
			return 19;
 8000b60:	2313      	movs	r3, #19
 8000b62:	e00b      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_20_ID:
			return 20;
 8000b64:	2314      	movs	r3, #20
 8000b66:	e009      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_21_ID:
			return 21;
 8000b68:	2315      	movs	r3, #21
 8000b6a:	e007      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_22_ID:
			return 22;
 8000b6c:	2316      	movs	r3, #22
 8000b6e:	e005      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_23_ID:
			return 23;
 8000b70:	2317      	movs	r3, #23
 8000b72:	e003      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_24_ID:
			return 24;
 8000b74:	2318      	movs	r3, #24
 8000b76:	e001      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
		case LAYER_25_ID:
			return 25;
 8000b78:	2319      	movs	r3, #25
 8000b7a:	e7ff      	b.n	8000b7c <bitmaskToLayer+0x2a0>
			break;
	}
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <layerNumToRef>:

// Set's layer
void layerNumToRef(Layer* layerHandle, Layer* keymap, int layerNum){
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
	layerHandle = &keymap[layerNum];
 8000b94:	687a      	ldr	r2, [r7, #4]
 8000b96:	4613      	mov	r3, r2
 8000b98:	009b      	lsls	r3, r3, #2
 8000b9a:	4413      	add	r3, r2
 8000b9c:	009b      	lsls	r3, r3, #2
 8000b9e:	461a      	mov	r2, r3
 8000ba0:	68bb      	ldr	r3, [r7, #8]
 8000ba2:	4413      	add	r3, r2
 8000ba4:	60fb      	str	r3, [r7, #12]
}
 8000ba6:	bf00      	nop
 8000ba8:	3714      	adds	r7, #20
 8000baa:	46bd      	mov	sp, r7
 8000bac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb0:	4770      	bx	lr
	...

08000bb4 <setJoystate>:

// Set byte

joystate* setJoystate(joystick* left, joystick* right, joystate* handle, uint32_t tresh){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b086      	sub	sp, #24
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	60f8      	str	r0, [r7, #12]
 8000bbc:	60b9      	str	r1, [r7, #8]
 8000bbe:	607a      	str	r2, [r7, #4]
 8000bc0:	603b      	str	r3, [r7, #0]
	*handle = 0; // Reset the bits of the state mask.
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	2200      	movs	r2, #0
 8000bc6:	701a      	strb	r2, [r3, #0]

	//TODO Redundant. Can use the joystick struct position.
	enum joydir leftDir = categorizeJoy(left, tresh);
 8000bc8:	6839      	ldr	r1, [r7, #0]
 8000bca:	68f8      	ldr	r0, [r7, #12]
 8000bcc:	f7ff fe20 	bl	8000810 <categorizeJoy>
 8000bd0:	4603      	mov	r3, r0
 8000bd2:	75fb      	strb	r3, [r7, #23]
	enum joydir rightDir = categorizeJoy(right, tresh);
 8000bd4:	6839      	ldr	r1, [r7, #0]
 8000bd6:	68b8      	ldr	r0, [r7, #8]
 8000bd8:	f7ff fe1a 	bl	8000810 <categorizeJoy>
 8000bdc:	4603      	mov	r3, r0
 8000bde:	75bb      	strb	r3, [r7, #22]



	switch(leftDir){
 8000be0:	7dfb      	ldrb	r3, [r7, #23]
 8000be2:	3b01      	subs	r3, #1
 8000be4:	2b03      	cmp	r3, #3
 8000be6:	d82b      	bhi.n	8000c40 <setJoystate+0x8c>
 8000be8:	a201      	add	r2, pc, #4	; (adr r2, 8000bf0 <setJoystate+0x3c>)
 8000bea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000bee:	bf00      	nop
 8000bf0:	08000c11 	.word	0x08000c11
 8000bf4:	08000c21 	.word	0x08000c21
 8000bf8:	08000c01 	.word	0x08000c01
 8000bfc:	08000c31 	.word	0x08000c31
		case NORTHWISE:
			*handle = *handle | LEFT_JOY_UP;
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	781b      	ldrb	r3, [r3, #0]
 8000c04:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c08:	b2da      	uxtb	r2, r3
 8000c0a:	687b      	ldr	r3, [r7, #4]
 8000c0c:	701a      	strb	r2, [r3, #0]
			break;
 8000c0e:	e017      	b.n	8000c40 <setJoystate+0x8c>
		case EASTWISE:
			*handle = *handle | LEFT_JOY_RIGHT;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	781b      	ldrb	r3, [r3, #0]
 8000c14:	f043 0320 	orr.w	r3, r3, #32
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	701a      	strb	r2, [r3, #0]
			break;
 8000c1e:	e00f      	b.n	8000c40 <setJoystate+0x8c>
		case SOUTHWISE:
			*handle = *handle | LEFT_JOY_DOWN;
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	781b      	ldrb	r3, [r3, #0]
 8000c24:	f043 0310 	orr.w	r3, r3, #16
 8000c28:	b2da      	uxtb	r2, r3
 8000c2a:	687b      	ldr	r3, [r7, #4]
 8000c2c:	701a      	strb	r2, [r3, #0]
			break;
 8000c2e:	e007      	b.n	8000c40 <setJoystate+0x8c>
		case WESTWISE:
			*handle = *handle | LEFT_JOY_LEFT;
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c38:	b2da      	uxtb	r2, r3
 8000c3a:	687b      	ldr	r3, [r7, #4]
 8000c3c:	701a      	strb	r2, [r3, #0]
			break;
 8000c3e:	bf00      	nop
	}

	switch(rightDir){
 8000c40:	7dbb      	ldrb	r3, [r7, #22]
 8000c42:	3b01      	subs	r3, #1
 8000c44:	2b03      	cmp	r3, #3
 8000c46:	d82b      	bhi.n	8000ca0 <setJoystate+0xec>
 8000c48:	a201      	add	r2, pc, #4	; (adr r2, 8000c50 <setJoystate+0x9c>)
 8000c4a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c4e:	bf00      	nop
 8000c50:	08000c71 	.word	0x08000c71
 8000c54:	08000c81 	.word	0x08000c81
 8000c58:	08000c61 	.word	0x08000c61
 8000c5c:	08000c91 	.word	0x08000c91
		case NORTHWISE:
			*handle = *handle | RIGHT_JOY_UP;
 8000c60:	687b      	ldr	r3, [r7, #4]
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	f043 0304 	orr.w	r3, r3, #4
 8000c68:	b2da      	uxtb	r2, r3
 8000c6a:	687b      	ldr	r3, [r7, #4]
 8000c6c:	701a      	strb	r2, [r3, #0]
			break;
 8000c6e:	e017      	b.n	8000ca0 <setJoystate+0xec>
		case EASTWISE:
			*handle = *handle | RIGHT_JOY_RIGHT;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	781b      	ldrb	r3, [r3, #0]
 8000c74:	f043 0302 	orr.w	r3, r3, #2
 8000c78:	b2da      	uxtb	r2, r3
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	701a      	strb	r2, [r3, #0]
			break;
 8000c7e:	e00f      	b.n	8000ca0 <setJoystate+0xec>
		case SOUTHWISE:
			*handle = *handle | RIGHT_JOY_DOWN;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	781b      	ldrb	r3, [r3, #0]
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	701a      	strb	r2, [r3, #0]
			break;
 8000c8e:	e007      	b.n	8000ca0 <setJoystate+0xec>
		case WESTWISE:
			*handle = *handle | RIGHT_JOY_LEFT;
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	f043 0308 	orr.w	r3, r3, #8
 8000c98:	b2da      	uxtb	r2, r3
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	701a      	strb	r2, [r3, #0]
			break;
 8000c9e:	bf00      	nop
		}

	return handle;
 8000ca0:	687b      	ldr	r3, [r7, #4]

}
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	3718      	adds	r7, #24
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop

08000cac <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cac:	b5b0      	push	{r4, r5, r7, lr}
 8000cae:	b0aa      	sub	sp, #168	; 0xa8
 8000cb0:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cb2:	f000 fafb 	bl	80012ac <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cb6:	f000 f87b 	bl	8000db0 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cba:	f000 f97f 	bl	8000fbc <MX_GPIO_Init>
  MX_DMA_Init();
 8000cbe:	f000 f95d 	bl	8000f7c <MX_DMA_Init>
  MX_ADC1_Init();
 8000cc2:	f000 f8df 	bl	8000e84 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000cc6:	f006 fdab 	bl	8007820 <MX_USB_DEVICE_Init>

	joystick rightStick;
	joystick leftStick;

	// Set the pointer to the appropriate elem of the array.
	rightStick.xAxis = &analogIn[0];
 8000cca:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000cce:	67bb      	str	r3, [r7, #120]	; 0x78
	rightStick.yAxis = &analogIn[2];
 8000cd0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000cd4:	3308      	adds	r3, #8
 8000cd6:	677b      	str	r3, [r7, #116]	; 0x74
	leftStick.xAxis = &analogIn[1];
 8000cd8:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000cdc:	3304      	adds	r3, #4
 8000cde:	667b      	str	r3, [r7, #100]	; 0x64
	leftStick.yAxis = &analogIn[3];
 8000ce0:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000ce4:	330c      	adds	r3, #12
 8000ce6:	663b      	str	r3, [r7, #96]	; 0x60


	joystate layerMask = 0;
 8000ce8:	2300      	movs	r3, #0
 8000cea:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
	Layer* layerHandle;

	//Array of key pin states
	uint8_t pinStates[NUMBER_OF_KEYS] = {1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1};
 8000cee:	4b2c      	ldr	r3, [pc, #176]	; (8000da0 <main+0xf4>)
 8000cf0:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000cf4:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cf6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	int isHold[] = {0, 0, 0, 0,     0, 0, 0, 0,
 8000cfa:	f107 0310 	add.w	r3, r7, #16
 8000cfe:	2240      	movs	r2, #64	; 0x40
 8000d00:	2100      	movs	r1, #0
 8000d02:	4618      	mov	r0, r3
 8000d04:	f007 f9de 	bl	80080c4 <memset>
			        0, 0, 0, 0,     0, 0, 0, 0};
	keyboardHIDReport kReport = {0, 0, 0, 0, 0, 0, 0, 0};
 8000d08:	f107 0308 	add.w	r3, r7, #8
 8000d0c:	2200      	movs	r2, #0
 8000d0e:	601a      	str	r2, [r3, #0]
 8000d10:	605a      	str	r2, [r3, #4]

  uint32_t tresh = 600;
 8000d12:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000d16:	607b      	str	r3, [r7, #4]
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Start the DMA (?)Not sure why it doesn't run when inited outside the while (1)
	  HAL_ADC_Start_DMA(&hadc1, analogIn, 4);
 8000d18:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000d1c:	2204      	movs	r2, #4
 8000d1e:	4619      	mov	r1, r3
 8000d20:	4820      	ldr	r0, [pc, #128]	; (8000da4 <main+0xf8>)
 8000d22:	f000 fb9d 	bl	8001460 <HAL_ADC_Start_DMA>

	  // Set the layer mask to the appropraite id
	  setJoystate(&leftStick, &rightStick, layerMask, &tresh);
 8000d26:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000d2a:	461a      	mov	r2, r3
 8000d2c:	1d3b      	adds	r3, r7, #4
 8000d2e:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000d32:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000d36:	f7ff ff3d 	bl	8000bb4 <setJoystate>

	  // Get the pointer handle updated with the current active layer
	  layerNumToRef(layerHandle, &keymap[0], bitmaskToLayer(layerMask));
 8000d3a:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8000d3e:	4618      	mov	r0, r3
 8000d40:	f7ff fdcc 	bl	80008dc <bitmaskToLayer>
 8000d44:	4603      	mov	r3, r0
 8000d46:	461a      	mov	r2, r3
 8000d48:	4917      	ldr	r1, [pc, #92]	; (8000da8 <main+0xfc>)
 8000d4a:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8000d4e:	f7ff ff1b 	bl	8000b88 <layerNumToRef>

	  // check pressed keys
	  checkKeyPins(&pinStates[0]);
 8000d52:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8000d56:	4618      	mov	r0, r3
 8000d58:	f7ff fbbe 	bl	80004d8 <checkKeyPins>

	  // check and set all keyboard related reports
	  scanKeys(&keymap[0], layerHandle, isHold, pinStates, kReport);
 8000d5c:	f107 0450 	add.w	r4, r7, #80	; 0x50
 8000d60:	f107 0210 	add.w	r2, r7, #16
 8000d64:	466d      	mov	r5, sp
 8000d66:	f107 0308 	add.w	r3, r7, #8
 8000d6a:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d6e:	e885 0003 	stmia.w	r5, {r0, r1}
 8000d72:	4623      	mov	r3, r4
 8000d74:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 8000d78:	480b      	ldr	r0, [pc, #44]	; (8000da8 <main+0xfc>)
 8000d7a:	f7ff fcf0 	bl	800075e <scanKeys>

	  // send report
	  USBD_HID_SendReport(&hUsbDeviceFS, &kReport, sizeof(kReport));
 8000d7e:	f107 0308 	add.w	r3, r7, #8
 8000d82:	2208      	movs	r2, #8
 8000d84:	4619      	mov	r1, r3
 8000d86:	4809      	ldr	r0, [pc, #36]	; (8000dac <main+0x100>)
 8000d88:	f005 f9d0 	bl	800612c <USBD_HID_SendReport>

	  // clear report
	  clearReport(kReport);
 8000d8c:	f107 0308 	add.w	r3, r7, #8
 8000d90:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000d94:	f7ff fd22 	bl	80007dc <clearReport>

	  // wait?
  	  HAL_Delay(100);
 8000d98:	2064      	movs	r0, #100	; 0x64
 8000d9a:	f000 faf9 	bl	8001390 <HAL_Delay>
	  HAL_ADC_Start_DMA(&hadc1, analogIn, 4);
 8000d9e:	e7bb      	b.n	8000d18 <main+0x6c>
 8000da0:	080080ec 	.word	0x080080ec
 8000da4:	200006fc 	.word	0x200006fc
 8000da8:	2000036c 	.word	0x2000036c
 8000dac:	200007ac 	.word	0x200007ac

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b094      	sub	sp, #80	; 0x50
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	2230      	movs	r2, #48	; 0x30
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f007 f980 	bl	80080c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <SystemClock_Config+0xcc>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	4a27      	ldr	r2, [pc, #156]	; (8000e7c <SystemClock_Config+0xcc>)
 8000dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de2:	6413      	str	r3, [r2, #64]	; 0x40
 8000de4:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <SystemClock_Config+0xcc>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000df0:	2300      	movs	r3, #0
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <SystemClock_Config+0xd0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dfc:	4a20      	ldr	r2, [pc, #128]	; (8000e80 <SystemClock_Config+0xd0>)
 8000dfe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e02:	6013      	str	r3, [r2, #0]
 8000e04:	4b1e      	ldr	r3, [pc, #120]	; (8000e80 <SystemClock_Config+0xd0>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e0c:	607b      	str	r3, [r7, #4]
 8000e0e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e10:	2301      	movs	r3, #1
 8000e12:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e14:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e18:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e1a:	2302      	movs	r3, #2
 8000e1c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e1e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e22:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000e24:	230f      	movs	r3, #15
 8000e26:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000e28:	2390      	movs	r3, #144	; 0x90
 8000e2a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e2c:	2302      	movs	r3, #2
 8000e2e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000e30:	2305      	movs	r3, #5
 8000e32:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e34:	f107 0320 	add.w	r3, r7, #32
 8000e38:	4618      	mov	r0, r3
 8000e3a:	f002 ff43 	bl	8003cc4 <HAL_RCC_OscConfig>
 8000e3e:	4603      	mov	r3, r0
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d001      	beq.n	8000e48 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e44:	f000 f912 	bl	800106c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e48:	230f      	movs	r3, #15
 8000e4a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000e4c:	2301      	movs	r3, #1
 8000e4e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e50:	2300      	movs	r3, #0
 8000e52:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000e54:	2300      	movs	r3, #0
 8000e56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f003 f9a6 	bl	80041b4 <HAL_RCC_ClockConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e6e:	f000 f8fd 	bl	800106c <Error_Handler>
  }
}
 8000e72:	bf00      	nop
 8000e74:	3750      	adds	r7, #80	; 0x50
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40007000 	.word	0x40007000

08000e84 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e8a:	463b      	mov	r3, r7
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
 8000e90:	605a      	str	r2, [r3, #4]
 8000e92:	609a      	str	r2, [r3, #8]
 8000e94:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e96:	4b36      	ldr	r3, [pc, #216]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000e98:	4a36      	ldr	r2, [pc, #216]	; (8000f74 <MX_ADC1_Init+0xf0>)
 8000e9a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000e9c:	4b34      	ldr	r3, [pc, #208]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000e9e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000ea2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000ea4:	4b32      	ldr	r3, [pc, #200]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000eaa:	4b31      	ldr	r3, [pc, #196]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000eac:	2201      	movs	r2, #1
 8000eae:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000eb0:	4b2f      	ldr	r3, [pc, #188]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000eb6:	4b2e      	ldr	r3, [pc, #184]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000eb8:	2200      	movs	r2, #0
 8000eba:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ebe:	4b2c      	ldr	r3, [pc, #176]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000ec0:	2200      	movs	r2, #0
 8000ec2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000ec4:	4b2a      	ldr	r3, [pc, #168]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000ec6:	4a2c      	ldr	r2, [pc, #176]	; (8000f78 <MX_ADC1_Init+0xf4>)
 8000ec8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000eca:	4b29      	ldr	r3, [pc, #164]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000ed0:	4b27      	ldr	r3, [pc, #156]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000ed2:	2204      	movs	r2, #4
 8000ed4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000ed6:	4b26      	ldr	r3, [pc, #152]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000ed8:	2201      	movs	r2, #1
 8000eda:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000ede:	4b24      	ldr	r3, [pc, #144]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000ee0:	2200      	movs	r2, #0
 8000ee2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ee4:	4822      	ldr	r0, [pc, #136]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000ee6:	f000 fa77 	bl	80013d8 <HAL_ADC_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ef0:	f000 f8bc 	bl	800106c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ef8:	2301      	movs	r3, #1
 8000efa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000efc:	2301      	movs	r3, #1
 8000efe:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f00:	463b      	mov	r3, r7
 8000f02:	4619      	mov	r1, r3
 8000f04:	481a      	ldr	r0, [pc, #104]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000f06:	f000 fbb9 	bl	800167c <HAL_ADC_ConfigChannel>
 8000f0a:	4603      	mov	r3, r0
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	d001      	beq.n	8000f14 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f10:	f000 f8ac 	bl	800106c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f14:	2301      	movs	r3, #1
 8000f16:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f18:	2302      	movs	r3, #2
 8000f1a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f1c:	463b      	mov	r3, r7
 8000f1e:	4619      	mov	r1, r3
 8000f20:	4813      	ldr	r0, [pc, #76]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000f22:	f000 fbab 	bl	800167c <HAL_ADC_ConfigChannel>
 8000f26:	4603      	mov	r3, r0
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	d001      	beq.n	8000f30 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f2c:	f000 f89e 	bl	800106c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f30:	2302      	movs	r3, #2
 8000f32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f34:	2303      	movs	r3, #3
 8000f36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f38:	463b      	mov	r3, r7
 8000f3a:	4619      	mov	r1, r3
 8000f3c:	480c      	ldr	r0, [pc, #48]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000f3e:	f000 fb9d 	bl	800167c <HAL_ADC_ConfigChannel>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000f48:	f000 f890 	bl	800106c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000f4c:	2303      	movs	r3, #3
 8000f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000f50:	2304      	movs	r3, #4
 8000f52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f54:	463b      	mov	r3, r7
 8000f56:	4619      	mov	r1, r3
 8000f58:	4805      	ldr	r0, [pc, #20]	; (8000f70 <MX_ADC1_Init+0xec>)
 8000f5a:	f000 fb8f 	bl	800167c <HAL_ADC_ConfigChannel>
 8000f5e:	4603      	mov	r3, r0
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d001      	beq.n	8000f68 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000f64:	f000 f882 	bl	800106c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000f68:	bf00      	nop
 8000f6a:	3710      	adds	r7, #16
 8000f6c:	46bd      	mov	sp, r7
 8000f6e:	bd80      	pop	{r7, pc}
 8000f70:	200006fc 	.word	0x200006fc
 8000f74:	40012000 	.word	0x40012000
 8000f78:	0f000001 	.word	0x0f000001

08000f7c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000f7c:	b580      	push	{r7, lr}
 8000f7e:	b082      	sub	sp, #8
 8000f80:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	607b      	str	r3, [r7, #4]
 8000f86:	4b0c      	ldr	r3, [pc, #48]	; (8000fb8 <MX_DMA_Init+0x3c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a0b      	ldr	r2, [pc, #44]	; (8000fb8 <MX_DMA_Init+0x3c>)
 8000f8c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b09      	ldr	r3, [pc, #36]	; (8000fb8 <MX_DMA_Init+0x3c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000f9a:	607b      	str	r3, [r7, #4]
 8000f9c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	2100      	movs	r1, #0
 8000fa2:	2038      	movs	r0, #56	; 0x38
 8000fa4:	f000 fee5 	bl	8001d72 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000fa8:	2038      	movs	r0, #56	; 0x38
 8000faa:	f000 fefe 	bl	8001daa <HAL_NVIC_EnableIRQ>

}
 8000fae:	bf00      	nop
 8000fb0:	3708      	adds	r7, #8
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}
 8000fb6:	bf00      	nop
 8000fb8:	40023800 	.word	0x40023800

08000fbc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b088      	sub	sp, #32
 8000fc0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	601a      	str	r2, [r3, #0]
 8000fca:	605a      	str	r2, [r3, #4]
 8000fcc:	609a      	str	r2, [r3, #8]
 8000fce:	60da      	str	r2, [r3, #12]
 8000fd0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000fd2:	2300      	movs	r3, #0
 8000fd4:	60bb      	str	r3, [r7, #8]
 8000fd6:	4b22      	ldr	r3, [pc, #136]	; (8001060 <MX_GPIO_Init+0xa4>)
 8000fd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fda:	4a21      	ldr	r2, [pc, #132]	; (8001060 <MX_GPIO_Init+0xa4>)
 8000fdc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000fe0:	6313      	str	r3, [r2, #48]	; 0x30
 8000fe2:	4b1f      	ldr	r3, [pc, #124]	; (8001060 <MX_GPIO_Init+0xa4>)
 8000fe4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000fea:	60bb      	str	r3, [r7, #8]
 8000fec:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000fee:	2300      	movs	r3, #0
 8000ff0:	607b      	str	r3, [r7, #4]
 8000ff2:	4b1b      	ldr	r3, [pc, #108]	; (8001060 <MX_GPIO_Init+0xa4>)
 8000ff4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ff6:	4a1a      	ldr	r2, [pc, #104]	; (8001060 <MX_GPIO_Init+0xa4>)
 8000ff8:	f043 0301 	orr.w	r3, r3, #1
 8000ffc:	6313      	str	r3, [r2, #48]	; 0x30
 8000ffe:	4b18      	ldr	r3, [pc, #96]	; (8001060 <MX_GPIO_Init+0xa4>)
 8001000:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001002:	f003 0301 	and.w	r3, r3, #1
 8001006:	607b      	str	r3, [r7, #4]
 8001008:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800100a:	2300      	movs	r3, #0
 800100c:	603b      	str	r3, [r7, #0]
 800100e:	4b14      	ldr	r3, [pc, #80]	; (8001060 <MX_GPIO_Init+0xa4>)
 8001010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001012:	4a13      	ldr	r2, [pc, #76]	; (8001060 <MX_GPIO_Init+0xa4>)
 8001014:	f043 0302 	orr.w	r3, r3, #2
 8001018:	6313      	str	r3, [r2, #48]	; 0x30
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <MX_GPIO_Init+0xa4>)
 800101c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101e:	f003 0302 	and.w	r3, r3, #2
 8001022:	603b      	str	r3, [r7, #0]
 8001024:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8001026:	23f0      	movs	r3, #240	; 0xf0
 8001028:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102e:	2301      	movs	r3, #1
 8001030:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001032:	f107 030c 	add.w	r3, r7, #12
 8001036:	4619      	mov	r1, r3
 8001038:	480a      	ldr	r0, [pc, #40]	; (8001064 <MX_GPIO_Init+0xa8>)
 800103a:	f001 fa41 	bl	80024c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB13 PB15 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 800103e:	f24a 73f7 	movw	r3, #42999	; 0xa7f7
 8001042:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001048:	2301      	movs	r3, #1
 800104a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4619      	mov	r1, r3
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_GPIO_Init+0xac>)
 8001054:	f001 fa34 	bl	80024c0 <HAL_GPIO_Init>

}
 8001058:	bf00      	nop
 800105a:	3720      	adds	r7, #32
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000
 8001068:	40020400 	.word	0x40020400

0800106c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001070:	b672      	cpsid	i
}
 8001072:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001074:	e7fe      	b.n	8001074 <Error_Handler+0x8>
	...

08001078 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001078:	b480      	push	{r7}
 800107a:	b083      	sub	sp, #12
 800107c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800107e:	2300      	movs	r3, #0
 8001080:	607b      	str	r3, [r7, #4]
 8001082:	4b10      	ldr	r3, [pc, #64]	; (80010c4 <HAL_MspInit+0x4c>)
 8001084:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001086:	4a0f      	ldr	r2, [pc, #60]	; (80010c4 <HAL_MspInit+0x4c>)
 8001088:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800108c:	6453      	str	r3, [r2, #68]	; 0x44
 800108e:	4b0d      	ldr	r3, [pc, #52]	; (80010c4 <HAL_MspInit+0x4c>)
 8001090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001092:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001096:	607b      	str	r3, [r7, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800109a:	2300      	movs	r3, #0
 800109c:	603b      	str	r3, [r7, #0]
 800109e:	4b09      	ldr	r3, [pc, #36]	; (80010c4 <HAL_MspInit+0x4c>)
 80010a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a2:	4a08      	ldr	r2, [pc, #32]	; (80010c4 <HAL_MspInit+0x4c>)
 80010a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010a8:	6413      	str	r3, [r2, #64]	; 0x40
 80010aa:	4b06      	ldr	r3, [pc, #24]	; (80010c4 <HAL_MspInit+0x4c>)
 80010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b2:	603b      	str	r3, [r7, #0]
 80010b4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80010b6:	bf00      	nop
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
 80010c2:	bf00      	nop
 80010c4:	40023800 	.word	0x40023800

080010c8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80010c8:	b580      	push	{r7, lr}
 80010ca:	b08a      	sub	sp, #40	; 0x28
 80010cc:	af00      	add	r7, sp, #0
 80010ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d0:	f107 0314 	add.w	r3, r7, #20
 80010d4:	2200      	movs	r2, #0
 80010d6:	601a      	str	r2, [r3, #0]
 80010d8:	605a      	str	r2, [r3, #4]
 80010da:	609a      	str	r2, [r3, #8]
 80010dc:	60da      	str	r2, [r3, #12]
 80010de:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a2f      	ldr	r2, [pc, #188]	; (80011a4 <HAL_ADC_MspInit+0xdc>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d157      	bne.n	800119a <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80010ea:	2300      	movs	r3, #0
 80010ec:	613b      	str	r3, [r7, #16]
 80010ee:	4b2e      	ldr	r3, [pc, #184]	; (80011a8 <HAL_ADC_MspInit+0xe0>)
 80010f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010f2:	4a2d      	ldr	r2, [pc, #180]	; (80011a8 <HAL_ADC_MspInit+0xe0>)
 80010f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80010f8:	6453      	str	r3, [r2, #68]	; 0x44
 80010fa:	4b2b      	ldr	r3, [pc, #172]	; (80011a8 <HAL_ADC_MspInit+0xe0>)
 80010fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010fe:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001102:	613b      	str	r3, [r7, #16]
 8001104:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001106:	2300      	movs	r3, #0
 8001108:	60fb      	str	r3, [r7, #12]
 800110a:	4b27      	ldr	r3, [pc, #156]	; (80011a8 <HAL_ADC_MspInit+0xe0>)
 800110c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110e:	4a26      	ldr	r2, [pc, #152]	; (80011a8 <HAL_ADC_MspInit+0xe0>)
 8001110:	f043 0301 	orr.w	r3, r3, #1
 8001114:	6313      	str	r3, [r2, #48]	; 0x30
 8001116:	4b24      	ldr	r3, [pc, #144]	; (80011a8 <HAL_ADC_MspInit+0xe0>)
 8001118:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800111a:	f003 0301 	and.w	r3, r3, #1
 800111e:	60fb      	str	r3, [r7, #12]
 8001120:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8001122:	230f      	movs	r3, #15
 8001124:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001126:	2303      	movs	r3, #3
 8001128:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800112a:	2300      	movs	r3, #0
 800112c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112e:	f107 0314 	add.w	r3, r7, #20
 8001132:	4619      	mov	r1, r3
 8001134:	481d      	ldr	r0, [pc, #116]	; (80011ac <HAL_ADC_MspInit+0xe4>)
 8001136:	f001 f9c3 	bl	80024c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800113a:	4b1d      	ldr	r3, [pc, #116]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 800113c:	4a1d      	ldr	r2, [pc, #116]	; (80011b4 <HAL_ADC_MspInit+0xec>)
 800113e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001140:	4b1b      	ldr	r3, [pc, #108]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001142:	2200      	movs	r2, #0
 8001144:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001146:	4b1a      	ldr	r3, [pc, #104]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001148:	2200      	movs	r2, #0
 800114a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 800114c:	4b18      	ldr	r3, [pc, #96]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 800114e:	2200      	movs	r2, #0
 8001150:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8001152:	4b17      	ldr	r3, [pc, #92]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001154:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001158:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 800115a:	4b15      	ldr	r3, [pc, #84]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 800115c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001160:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001164:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001168:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 800116c:	2200      	movs	r2, #0
 800116e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001172:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001176:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001178:	4b0d      	ldr	r3, [pc, #52]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 800117a:	2200      	movs	r2, #0
 800117c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800117e:	480c      	ldr	r0, [pc, #48]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001180:	f000 fe2e 	bl	8001de0 <HAL_DMA_Init>
 8001184:	4603      	mov	r3, r0
 8001186:	2b00      	cmp	r3, #0
 8001188:	d001      	beq.n	800118e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 800118a:	f7ff ff6f 	bl	800106c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	4a07      	ldr	r2, [pc, #28]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001192:	639a      	str	r2, [r3, #56]	; 0x38
 8001194:	4a06      	ldr	r2, [pc, #24]	; (80011b0 <HAL_ADC_MspInit+0xe8>)
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 800119a:	bf00      	nop
 800119c:	3728      	adds	r7, #40	; 0x28
 800119e:	46bd      	mov	sp, r7
 80011a0:	bd80      	pop	{r7, pc}
 80011a2:	bf00      	nop
 80011a4:	40012000 	.word	0x40012000
 80011a8:	40023800 	.word	0x40023800
 80011ac:	40020000 	.word	0x40020000
 80011b0:	20000744 	.word	0x20000744
 80011b4:	40026410 	.word	0x40026410

080011b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011b8:	b480      	push	{r7}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80011bc:	e7fe      	b.n	80011bc <NMI_Handler+0x4>

080011be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011be:	b480      	push	{r7}
 80011c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011c2:	e7fe      	b.n	80011c2 <HardFault_Handler+0x4>

080011c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011c4:	b480      	push	{r7}
 80011c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011c8:	e7fe      	b.n	80011c8 <MemManage_Handler+0x4>

080011ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ca:	b480      	push	{r7}
 80011cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011ce:	e7fe      	b.n	80011ce <BusFault_Handler+0x4>

080011d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011d0:	b480      	push	{r7}
 80011d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011d4:	e7fe      	b.n	80011d4 <UsageFault_Handler+0x4>

080011d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011d6:	b480      	push	{r7}
 80011d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011da:	bf00      	nop
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011e4:	b480      	push	{r7}
 80011e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011e8:	bf00      	nop
 80011ea:	46bd      	mov	sp, r7
 80011ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f0:	4770      	bx	lr

080011f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011f2:	b480      	push	{r7}
 80011f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011f6:	bf00      	nop
 80011f8:	46bd      	mov	sp, r7
 80011fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011fe:	4770      	bx	lr

08001200 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001200:	b580      	push	{r7, lr}
 8001202:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001204:	f000 f8a4 	bl	8001350 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001208:	bf00      	nop
 800120a:	bd80      	pop	{r7, pc}

0800120c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 800120c:	b580      	push	{r7, lr}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001210:	4802      	ldr	r0, [pc, #8]	; (800121c <DMA2_Stream0_IRQHandler+0x10>)
 8001212:	f000 feeb 	bl	8001fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001216:	bf00      	nop
 8001218:	bd80      	pop	{r7, pc}
 800121a:	bf00      	nop
 800121c:	20000744 	.word	0x20000744

08001220 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001220:	b580      	push	{r7, lr}
 8001222:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8001224:	4802      	ldr	r0, [pc, #8]	; (8001230 <OTG_FS_IRQHandler+0x10>)
 8001226:	f001 fc37 	bl	8002a98 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800122a:	bf00      	nop
 800122c:	bd80      	pop	{r7, pc}
 800122e:	bf00      	nop
 8001230:	20000c88 	.word	0x20000c88

08001234 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001234:	b480      	push	{r7}
 8001236:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001238:	4b06      	ldr	r3, [pc, #24]	; (8001254 <SystemInit+0x20>)
 800123a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800123e:	4a05      	ldr	r2, [pc, #20]	; (8001254 <SystemInit+0x20>)
 8001240:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001244:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001248:	bf00      	nop
 800124a:	46bd      	mov	sp, r7
 800124c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001250:	4770      	bx	lr
 8001252:	bf00      	nop
 8001254:	e000ed00 	.word	0xe000ed00

08001258 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001258:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001290 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800125c:	480d      	ldr	r0, [pc, #52]	; (8001294 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800125e:	490e      	ldr	r1, [pc, #56]	; (8001298 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001260:	4a0e      	ldr	r2, [pc, #56]	; (800129c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001262:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001264:	e002      	b.n	800126c <LoopCopyDataInit>

08001266 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001266:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001268:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800126a:	3304      	adds	r3, #4

0800126c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800126c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800126e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001270:	d3f9      	bcc.n	8001266 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001272:	4a0b      	ldr	r2, [pc, #44]	; (80012a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001274:	4c0b      	ldr	r4, [pc, #44]	; (80012a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001276:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001278:	e001      	b.n	800127e <LoopFillZerobss>

0800127a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800127a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800127c:	3204      	adds	r2, #4

0800127e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800127e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001280:	d3fb      	bcc.n	800127a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001282:	f7ff ffd7 	bl	8001234 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001286:	f006 fef9 	bl	800807c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800128a:	f7ff fd0f 	bl	8000cac <main>
  bx  lr    
 800128e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8001290:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8001294:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001298:	200004f0 	.word	0x200004f0
  ldr r2, =_sidata
 800129c:	0800816c 	.word	0x0800816c
  ldr r2, =_sbss
 80012a0:	200004f0 	.word	0x200004f0
  ldr r4, =_ebss
 80012a4:	200011a8 	.word	0x200011a8

080012a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80012a8:	e7fe      	b.n	80012a8 <ADC_IRQHandler>
	...

080012ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80012ac:	b580      	push	{r7, lr}
 80012ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80012b0:	4b0e      	ldr	r3, [pc, #56]	; (80012ec <HAL_Init+0x40>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	4a0d      	ldr	r2, [pc, #52]	; (80012ec <HAL_Init+0x40>)
 80012b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80012ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80012bc:	4b0b      	ldr	r3, [pc, #44]	; (80012ec <HAL_Init+0x40>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	4a0a      	ldr	r2, [pc, #40]	; (80012ec <HAL_Init+0x40>)
 80012c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80012c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80012c8:	4b08      	ldr	r3, [pc, #32]	; (80012ec <HAL_Init+0x40>)
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	4a07      	ldr	r2, [pc, #28]	; (80012ec <HAL_Init+0x40>)
 80012ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80012d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80012d4:	2003      	movs	r0, #3
 80012d6:	f000 fd41 	bl	8001d5c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80012da:	200f      	movs	r0, #15
 80012dc:	f000 f808 	bl	80012f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80012e0:	f7ff feca 	bl	8001078 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80012e4:	2300      	movs	r3, #0
}
 80012e6:	4618      	mov	r0, r3
 80012e8:	bd80      	pop	{r7, pc}
 80012ea:	bf00      	nop
 80012ec:	40023c00 	.word	0x40023c00

080012f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80012f8:	4b12      	ldr	r3, [pc, #72]	; (8001344 <HAL_InitTick+0x54>)
 80012fa:	681a      	ldr	r2, [r3, #0]
 80012fc:	4b12      	ldr	r3, [pc, #72]	; (8001348 <HAL_InitTick+0x58>)
 80012fe:	781b      	ldrb	r3, [r3, #0]
 8001300:	4619      	mov	r1, r3
 8001302:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001306:	fbb3 f3f1 	udiv	r3, r3, r1
 800130a:	fbb2 f3f3 	udiv	r3, r2, r3
 800130e:	4618      	mov	r0, r3
 8001310:	f000 fd59 	bl	8001dc6 <HAL_SYSTICK_Config>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800131a:	2301      	movs	r3, #1
 800131c:	e00e      	b.n	800133c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800131e:	687b      	ldr	r3, [r7, #4]
 8001320:	2b0f      	cmp	r3, #15
 8001322:	d80a      	bhi.n	800133a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001324:	2200      	movs	r2, #0
 8001326:	6879      	ldr	r1, [r7, #4]
 8001328:	f04f 30ff 	mov.w	r0, #4294967295
 800132c:	f000 fd21 	bl	8001d72 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001330:	4a06      	ldr	r2, [pc, #24]	; (800134c <HAL_InitTick+0x5c>)
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
 8001338:	e000      	b.n	800133c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200003d4 	.word	0x200003d4
 8001348:	200003dc 	.word	0x200003dc
 800134c:	200003d8 	.word	0x200003d8

08001350 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001350:	b480      	push	{r7}
 8001352:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001354:	4b06      	ldr	r3, [pc, #24]	; (8001370 <HAL_IncTick+0x20>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	461a      	mov	r2, r3
 800135a:	4b06      	ldr	r3, [pc, #24]	; (8001374 <HAL_IncTick+0x24>)
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	4413      	add	r3, r2
 8001360:	4a04      	ldr	r2, [pc, #16]	; (8001374 <HAL_IncTick+0x24>)
 8001362:	6013      	str	r3, [r2, #0]
}
 8001364:	bf00      	nop
 8001366:	46bd      	mov	sp, r7
 8001368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136c:	4770      	bx	lr
 800136e:	bf00      	nop
 8001370:	200003dc 	.word	0x200003dc
 8001374:	200007a4 	.word	0x200007a4

08001378 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001378:	b480      	push	{r7}
 800137a:	af00      	add	r7, sp, #0
  return uwTick;
 800137c:	4b03      	ldr	r3, [pc, #12]	; (800138c <HAL_GetTick+0x14>)
 800137e:	681b      	ldr	r3, [r3, #0]
}
 8001380:	4618      	mov	r0, r3
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
 800138a:	bf00      	nop
 800138c:	200007a4 	.word	0x200007a4

08001390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001398:	f7ff ffee 	bl	8001378 <HAL_GetTick>
 800139c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800139e:	687b      	ldr	r3, [r7, #4]
 80013a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013a2:	68fb      	ldr	r3, [r7, #12]
 80013a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80013a8:	d005      	beq.n	80013b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80013aa:	4b0a      	ldr	r3, [pc, #40]	; (80013d4 <HAL_Delay+0x44>)
 80013ac:	781b      	ldrb	r3, [r3, #0]
 80013ae:	461a      	mov	r2, r3
 80013b0:	68fb      	ldr	r3, [r7, #12]
 80013b2:	4413      	add	r3, r2
 80013b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80013b6:	bf00      	nop
 80013b8:	f7ff ffde 	bl	8001378 <HAL_GetTick>
 80013bc:	4602      	mov	r2, r0
 80013be:	68bb      	ldr	r3, [r7, #8]
 80013c0:	1ad3      	subs	r3, r2, r3
 80013c2:	68fa      	ldr	r2, [r7, #12]
 80013c4:	429a      	cmp	r2, r3
 80013c6:	d8f7      	bhi.n	80013b8 <HAL_Delay+0x28>
  {
  }
}
 80013c8:	bf00      	nop
 80013ca:	bf00      	nop
 80013cc:	3710      	adds	r7, #16
 80013ce:	46bd      	mov	sp, r7
 80013d0:	bd80      	pop	{r7, pc}
 80013d2:	bf00      	nop
 80013d4:	200003dc 	.word	0x200003dc

080013d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b084      	sub	sp, #16
 80013dc:	af00      	add	r7, sp, #0
 80013de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80013e0:	2300      	movs	r3, #0
 80013e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d101      	bne.n	80013ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80013ea:	2301      	movs	r3, #1
 80013ec:	e033      	b.n	8001456 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d109      	bne.n	800140a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80013f6:	6878      	ldr	r0, [r7, #4]
 80013f8:	f7ff fe66 	bl	80010c8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	2200      	movs	r2, #0
 8001400:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	2200      	movs	r2, #0
 8001406:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800140e:	f003 0310 	and.w	r3, r3, #16
 8001412:	2b00      	cmp	r3, #0
 8001414:	d118      	bne.n	8001448 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800141a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800141e:	f023 0302 	bic.w	r3, r3, #2
 8001422:	f043 0202 	orr.w	r2, r3, #2
 8001426:	687b      	ldr	r3, [r7, #4]
 8001428:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800142a:	6878      	ldr	r0, [r7, #4]
 800142c:	f000 fa48 	bl	80018c0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001430:	687b      	ldr	r3, [r7, #4]
 8001432:	2200      	movs	r2, #0
 8001434:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143a:	f023 0303 	bic.w	r3, r3, #3
 800143e:	f043 0201 	orr.w	r2, r3, #1
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	641a      	str	r2, [r3, #64]	; 0x40
 8001446:	e001      	b.n	800144c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001448:	2301      	movs	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800144c:	687b      	ldr	r3, [r7, #4]
 800144e:	2200      	movs	r2, #0
 8001450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001454:	7bfb      	ldrb	r3, [r7, #15]
}
 8001456:	4618      	mov	r0, r3
 8001458:	3710      	adds	r7, #16
 800145a:	46bd      	mov	sp, r7
 800145c:	bd80      	pop	{r7, pc}
	...

08001460 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001460:	b580      	push	{r7, lr}
 8001462:	b086      	sub	sp, #24
 8001464:	af00      	add	r7, sp, #0
 8001466:	60f8      	str	r0, [r7, #12]
 8001468:	60b9      	str	r1, [r7, #8]
 800146a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800146c:	2300      	movs	r3, #0
 800146e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001470:	68fb      	ldr	r3, [r7, #12]
 8001472:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001476:	2b01      	cmp	r3, #1
 8001478:	d101      	bne.n	800147e <HAL_ADC_Start_DMA+0x1e>
 800147a:	2302      	movs	r3, #2
 800147c:	e0ce      	b.n	800161c <HAL_ADC_Start_DMA+0x1bc>
 800147e:	68fb      	ldr	r3, [r7, #12]
 8001480:	2201      	movs	r2, #1
 8001482:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001486:	68fb      	ldr	r3, [r7, #12]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	689b      	ldr	r3, [r3, #8]
 800148c:	f003 0301 	and.w	r3, r3, #1
 8001490:	2b01      	cmp	r3, #1
 8001492:	d018      	beq.n	80014c6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8001494:	68fb      	ldr	r3, [r7, #12]
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	689a      	ldr	r2, [r3, #8]
 800149a:	68fb      	ldr	r3, [r7, #12]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f042 0201 	orr.w	r2, r2, #1
 80014a2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014a4:	4b5f      	ldr	r3, [pc, #380]	; (8001624 <HAL_ADC_Start_DMA+0x1c4>)
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	4a5f      	ldr	r2, [pc, #380]	; (8001628 <HAL_ADC_Start_DMA+0x1c8>)
 80014aa:	fba2 2303 	umull	r2, r3, r2, r3
 80014ae:	0c9a      	lsrs	r2, r3, #18
 80014b0:	4613      	mov	r3, r2
 80014b2:	005b      	lsls	r3, r3, #1
 80014b4:	4413      	add	r3, r2
 80014b6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80014b8:	e002      	b.n	80014c0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80014ba:	693b      	ldr	r3, [r7, #16]
 80014bc:	3b01      	subs	r3, #1
 80014be:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80014c0:	693b      	ldr	r3, [r7, #16]
 80014c2:	2b00      	cmp	r3, #0
 80014c4:	d1f9      	bne.n	80014ba <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80014c6:	68fb      	ldr	r3, [r7, #12]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	689b      	ldr	r3, [r3, #8]
 80014cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80014d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80014d4:	d107      	bne.n	80014e6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	681b      	ldr	r3, [r3, #0]
 80014da:	689a      	ldr	r2, [r3, #8]
 80014dc:	68fb      	ldr	r3, [r7, #12]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80014e4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80014e6:	68fb      	ldr	r3, [r7, #12]
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	689b      	ldr	r3, [r3, #8]
 80014ec:	f003 0301 	and.w	r3, r3, #1
 80014f0:	2b01      	cmp	r3, #1
 80014f2:	f040 8086 	bne.w	8001602 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80014f6:	68fb      	ldr	r3, [r7, #12]
 80014f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014fa:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80014fe:	f023 0301 	bic.w	r3, r3, #1
 8001502:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001506:	68fb      	ldr	r3, [r7, #12]
 8001508:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800150a:	68fb      	ldr	r3, [r7, #12]
 800150c:	681b      	ldr	r3, [r3, #0]
 800150e:	685b      	ldr	r3, [r3, #4]
 8001510:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001514:	2b00      	cmp	r3, #0
 8001516:	d007      	beq.n	8001528 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001518:	68fb      	ldr	r3, [r7, #12]
 800151a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001520:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001528:	68fb      	ldr	r3, [r7, #12]
 800152a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001530:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001534:	d106      	bne.n	8001544 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001536:	68fb      	ldr	r3, [r7, #12]
 8001538:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800153a:	f023 0206 	bic.w	r2, r3, #6
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	645a      	str	r2, [r3, #68]	; 0x44
 8001542:	e002      	b.n	800154a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001544:	68fb      	ldr	r3, [r7, #12]
 8001546:	2200      	movs	r2, #0
 8001548:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800154a:	68fb      	ldr	r3, [r7, #12]
 800154c:	2200      	movs	r2, #0
 800154e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001552:	4b36      	ldr	r3, [pc, #216]	; (800162c <HAL_ADC_Start_DMA+0x1cc>)
 8001554:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800155a:	4a35      	ldr	r2, [pc, #212]	; (8001630 <HAL_ADC_Start_DMA+0x1d0>)
 800155c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001562:	4a34      	ldr	r2, [pc, #208]	; (8001634 <HAL_ADC_Start_DMA+0x1d4>)
 8001564:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001566:	68fb      	ldr	r3, [r7, #12]
 8001568:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800156a:	4a33      	ldr	r2, [pc, #204]	; (8001638 <HAL_ADC_Start_DMA+0x1d8>)
 800156c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800156e:	68fb      	ldr	r3, [r7, #12]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001576:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	681b      	ldr	r3, [r3, #0]
 800157c:	685a      	ldr	r2, [r3, #4]
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001586:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001588:	68fb      	ldr	r3, [r7, #12]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	689a      	ldr	r2, [r3, #8]
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	681b      	ldr	r3, [r3, #0]
 8001592:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001596:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8001598:	68fb      	ldr	r3, [r7, #12]
 800159a:	6b98      	ldr	r0, [r3, #56]	; 0x38
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	334c      	adds	r3, #76	; 0x4c
 80015a2:	4619      	mov	r1, r3
 80015a4:	68ba      	ldr	r2, [r7, #8]
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	f000 fcc8 	bl	8001f3c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	685b      	ldr	r3, [r3, #4]
 80015b0:	f003 031f 	and.w	r3, r3, #31
 80015b4:	2b00      	cmp	r3, #0
 80015b6:	d10f      	bne.n	80015d8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80015b8:	68fb      	ldr	r3, [r7, #12]
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	689b      	ldr	r3, [r3, #8]
 80015be:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015c2:	2b00      	cmp	r3, #0
 80015c4:	d129      	bne.n	800161a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	689a      	ldr	r2, [r3, #8]
 80015cc:	68fb      	ldr	r3, [r7, #12]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015d4:	609a      	str	r2, [r3, #8]
 80015d6:	e020      	b.n	800161a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80015d8:	68fb      	ldr	r3, [r7, #12]
 80015da:	681b      	ldr	r3, [r3, #0]
 80015dc:	4a17      	ldr	r2, [pc, #92]	; (800163c <HAL_ADC_Start_DMA+0x1dc>)
 80015de:	4293      	cmp	r3, r2
 80015e0:	d11b      	bne.n	800161a <HAL_ADC_Start_DMA+0x1ba>
 80015e2:	68fb      	ldr	r3, [r7, #12]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	689b      	ldr	r3, [r3, #8]
 80015e8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80015ec:	2b00      	cmp	r3, #0
 80015ee:	d114      	bne.n	800161a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	681b      	ldr	r3, [r3, #0]
 80015f4:	689a      	ldr	r2, [r3, #8]
 80015f6:	68fb      	ldr	r3, [r7, #12]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80015fe:	609a      	str	r2, [r3, #8]
 8001600:	e00b      	b.n	800161a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001606:	f043 0210 	orr.w	r2, r3, #16
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800160e:	68fb      	ldr	r3, [r7, #12]
 8001610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001612:	f043 0201 	orr.w	r2, r3, #1
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800161a:	2300      	movs	r3, #0
}
 800161c:	4618      	mov	r0, r3
 800161e:	3718      	adds	r7, #24
 8001620:	46bd      	mov	sp, r7
 8001622:	bd80      	pop	{r7, pc}
 8001624:	200003d4 	.word	0x200003d4
 8001628:	431bde83 	.word	0x431bde83
 800162c:	40012300 	.word	0x40012300
 8001630:	08001ab9 	.word	0x08001ab9
 8001634:	08001b73 	.word	0x08001b73
 8001638:	08001b8f 	.word	0x08001b8f
 800163c:	40012000 	.word	0x40012000

08001640 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001640:	b480      	push	{r7}
 8001642:	b083      	sub	sp, #12
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001648:	bf00      	nop
 800164a:	370c      	adds	r7, #12
 800164c:	46bd      	mov	sp, r7
 800164e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001652:	4770      	bx	lr

08001654 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001654:	b480      	push	{r7}
 8001656:	b083      	sub	sp, #12
 8001658:	af00      	add	r7, sp, #0
 800165a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800165c:	bf00      	nop
 800165e:	370c      	adds	r7, #12
 8001660:	46bd      	mov	sp, r7
 8001662:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001666:	4770      	bx	lr

08001668 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001668:	b480      	push	{r7}
 800166a:	b083      	sub	sp, #12
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001670:	bf00      	nop
 8001672:	370c      	adds	r7, #12
 8001674:	46bd      	mov	sp, r7
 8001676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800167a:	4770      	bx	lr

0800167c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800167c:	b480      	push	{r7}
 800167e:	b085      	sub	sp, #20
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001686:	2300      	movs	r3, #0
 8001688:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001690:	2b01      	cmp	r3, #1
 8001692:	d101      	bne.n	8001698 <HAL_ADC_ConfigChannel+0x1c>
 8001694:	2302      	movs	r3, #2
 8001696:	e105      	b.n	80018a4 <HAL_ADC_ConfigChannel+0x228>
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	2201      	movs	r2, #1
 800169c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016a0:	683b      	ldr	r3, [r7, #0]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	2b09      	cmp	r3, #9
 80016a6:	d925      	bls.n	80016f4 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	681b      	ldr	r3, [r3, #0]
 80016ac:	68d9      	ldr	r1, [r3, #12]
 80016ae:	683b      	ldr	r3, [r7, #0]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	b29b      	uxth	r3, r3
 80016b4:	461a      	mov	r2, r3
 80016b6:	4613      	mov	r3, r2
 80016b8:	005b      	lsls	r3, r3, #1
 80016ba:	4413      	add	r3, r2
 80016bc:	3b1e      	subs	r3, #30
 80016be:	2207      	movs	r2, #7
 80016c0:	fa02 f303 	lsl.w	r3, r2, r3
 80016c4:	43da      	mvns	r2, r3
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	400a      	ands	r2, r1
 80016cc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	68d9      	ldr	r1, [r3, #12]
 80016d4:	683b      	ldr	r3, [r7, #0]
 80016d6:	689a      	ldr	r2, [r3, #8]
 80016d8:	683b      	ldr	r3, [r7, #0]
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	b29b      	uxth	r3, r3
 80016de:	4618      	mov	r0, r3
 80016e0:	4603      	mov	r3, r0
 80016e2:	005b      	lsls	r3, r3, #1
 80016e4:	4403      	add	r3, r0
 80016e6:	3b1e      	subs	r3, #30
 80016e8:	409a      	lsls	r2, r3
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	e022      	b.n	800173a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	6919      	ldr	r1, [r3, #16]
 80016fa:	683b      	ldr	r3, [r7, #0]
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	b29b      	uxth	r3, r3
 8001700:	461a      	mov	r2, r3
 8001702:	4613      	mov	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	4413      	add	r3, r2
 8001708:	2207      	movs	r2, #7
 800170a:	fa02 f303 	lsl.w	r3, r2, r3
 800170e:	43da      	mvns	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	400a      	ands	r2, r1
 8001716:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	6919      	ldr	r1, [r3, #16]
 800171e:	683b      	ldr	r3, [r7, #0]
 8001720:	689a      	ldr	r2, [r3, #8]
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	681b      	ldr	r3, [r3, #0]
 8001726:	b29b      	uxth	r3, r3
 8001728:	4618      	mov	r0, r3
 800172a:	4603      	mov	r3, r0
 800172c:	005b      	lsls	r3, r3, #1
 800172e:	4403      	add	r3, r0
 8001730:	409a      	lsls	r2, r3
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	430a      	orrs	r2, r1
 8001738:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800173a:	683b      	ldr	r3, [r7, #0]
 800173c:	685b      	ldr	r3, [r3, #4]
 800173e:	2b06      	cmp	r3, #6
 8001740:	d824      	bhi.n	800178c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001748:	683b      	ldr	r3, [r7, #0]
 800174a:	685a      	ldr	r2, [r3, #4]
 800174c:	4613      	mov	r3, r2
 800174e:	009b      	lsls	r3, r3, #2
 8001750:	4413      	add	r3, r2
 8001752:	3b05      	subs	r3, #5
 8001754:	221f      	movs	r2, #31
 8001756:	fa02 f303 	lsl.w	r3, r2, r3
 800175a:	43da      	mvns	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	400a      	ands	r2, r1
 8001762:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	b29b      	uxth	r3, r3
 8001770:	4618      	mov	r0, r3
 8001772:	683b      	ldr	r3, [r7, #0]
 8001774:	685a      	ldr	r2, [r3, #4]
 8001776:	4613      	mov	r3, r2
 8001778:	009b      	lsls	r3, r3, #2
 800177a:	4413      	add	r3, r2
 800177c:	3b05      	subs	r3, #5
 800177e:	fa00 f203 	lsl.w	r2, r0, r3
 8001782:	687b      	ldr	r3, [r7, #4]
 8001784:	681b      	ldr	r3, [r3, #0]
 8001786:	430a      	orrs	r2, r1
 8001788:	635a      	str	r2, [r3, #52]	; 0x34
 800178a:	e04c      	b.n	8001826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800178c:	683b      	ldr	r3, [r7, #0]
 800178e:	685b      	ldr	r3, [r3, #4]
 8001790:	2b0c      	cmp	r3, #12
 8001792:	d824      	bhi.n	80017de <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800179a:	683b      	ldr	r3, [r7, #0]
 800179c:	685a      	ldr	r2, [r3, #4]
 800179e:	4613      	mov	r3, r2
 80017a0:	009b      	lsls	r3, r3, #2
 80017a2:	4413      	add	r3, r2
 80017a4:	3b23      	subs	r3, #35	; 0x23
 80017a6:	221f      	movs	r2, #31
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	43da      	mvns	r2, r3
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	400a      	ands	r2, r1
 80017b4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	b29b      	uxth	r3, r3
 80017c2:	4618      	mov	r0, r3
 80017c4:	683b      	ldr	r3, [r7, #0]
 80017c6:	685a      	ldr	r2, [r3, #4]
 80017c8:	4613      	mov	r3, r2
 80017ca:	009b      	lsls	r3, r3, #2
 80017cc:	4413      	add	r3, r2
 80017ce:	3b23      	subs	r3, #35	; 0x23
 80017d0:	fa00 f203 	lsl.w	r2, r0, r3
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	430a      	orrs	r2, r1
 80017da:	631a      	str	r2, [r3, #48]	; 0x30
 80017dc:	e023      	b.n	8001826 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	681b      	ldr	r3, [r3, #0]
 80017e2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685a      	ldr	r2, [r3, #4]
 80017e8:	4613      	mov	r3, r2
 80017ea:	009b      	lsls	r3, r3, #2
 80017ec:	4413      	add	r3, r2
 80017ee:	3b41      	subs	r3, #65	; 0x41
 80017f0:	221f      	movs	r2, #31
 80017f2:	fa02 f303 	lsl.w	r3, r2, r3
 80017f6:	43da      	mvns	r2, r3
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	400a      	ands	r2, r1
 80017fe:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001800:	687b      	ldr	r3, [r7, #4]
 8001802:	681b      	ldr	r3, [r3, #0]
 8001804:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001806:	683b      	ldr	r3, [r7, #0]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	b29b      	uxth	r3, r3
 800180c:	4618      	mov	r0, r3
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	685a      	ldr	r2, [r3, #4]
 8001812:	4613      	mov	r3, r2
 8001814:	009b      	lsls	r3, r3, #2
 8001816:	4413      	add	r3, r2
 8001818:	3b41      	subs	r3, #65	; 0x41
 800181a:	fa00 f203 	lsl.w	r2, r0, r3
 800181e:	687b      	ldr	r3, [r7, #4]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	430a      	orrs	r2, r1
 8001824:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001826:	4b22      	ldr	r3, [pc, #136]	; (80018b0 <HAL_ADC_ConfigChannel+0x234>)
 8001828:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	4a21      	ldr	r2, [pc, #132]	; (80018b4 <HAL_ADC_ConfigChannel+0x238>)
 8001830:	4293      	cmp	r3, r2
 8001832:	d109      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x1cc>
 8001834:	683b      	ldr	r3, [r7, #0]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	2b12      	cmp	r3, #18
 800183a:	d105      	bne.n	8001848 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	685b      	ldr	r3, [r3, #4]
 8001840:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	681b      	ldr	r3, [r3, #0]
 800184c:	4a19      	ldr	r2, [pc, #100]	; (80018b4 <HAL_ADC_ConfigChannel+0x238>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d123      	bne.n	800189a <HAL_ADC_ConfigChannel+0x21e>
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	681b      	ldr	r3, [r3, #0]
 8001856:	2b10      	cmp	r3, #16
 8001858:	d003      	beq.n	8001862 <HAL_ADC_ConfigChannel+0x1e6>
 800185a:	683b      	ldr	r3, [r7, #0]
 800185c:	681b      	ldr	r3, [r3, #0]
 800185e:	2b11      	cmp	r3, #17
 8001860:	d11b      	bne.n	800189a <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	685b      	ldr	r3, [r3, #4]
 8001866:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800186e:	683b      	ldr	r3, [r7, #0]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	2b10      	cmp	r3, #16
 8001874:	d111      	bne.n	800189a <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <HAL_ADC_ConfigChannel+0x23c>)
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	4a10      	ldr	r2, [pc, #64]	; (80018bc <HAL_ADC_ConfigChannel+0x240>)
 800187c:	fba2 2303 	umull	r2, r3, r2, r3
 8001880:	0c9a      	lsrs	r2, r3, #18
 8001882:	4613      	mov	r3, r2
 8001884:	009b      	lsls	r3, r3, #2
 8001886:	4413      	add	r3, r2
 8001888:	005b      	lsls	r3, r3, #1
 800188a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800188c:	e002      	b.n	8001894 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800188e:	68bb      	ldr	r3, [r7, #8]
 8001890:	3b01      	subs	r3, #1
 8001892:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001894:	68bb      	ldr	r3, [r7, #8]
 8001896:	2b00      	cmp	r3, #0
 8001898:	d1f9      	bne.n	800188e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800189a:	687b      	ldr	r3, [r7, #4]
 800189c:	2200      	movs	r2, #0
 800189e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018a2:	2300      	movs	r3, #0
}
 80018a4:	4618      	mov	r0, r3
 80018a6:	3714      	adds	r7, #20
 80018a8:	46bd      	mov	sp, r7
 80018aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ae:	4770      	bx	lr
 80018b0:	40012300 	.word	0x40012300
 80018b4:	40012000 	.word	0x40012000
 80018b8:	200003d4 	.word	0x200003d4
 80018bc:	431bde83 	.word	0x431bde83

080018c0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80018c0:	b480      	push	{r7}
 80018c2:	b085      	sub	sp, #20
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80018c8:	4b79      	ldr	r3, [pc, #484]	; (8001ab0 <ADC_Init+0x1f0>)
 80018ca:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	685b      	ldr	r3, [r3, #4]
 80018d0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	685a      	ldr	r2, [r3, #4]
 80018dc:	687b      	ldr	r3, [r7, #4]
 80018de:	685b      	ldr	r3, [r3, #4]
 80018e0:	431a      	orrs	r2, r3
 80018e2:	68fb      	ldr	r3, [r7, #12]
 80018e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	685a      	ldr	r2, [r3, #4]
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	681b      	ldr	r3, [r3, #0]
 80018f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80018f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	681b      	ldr	r3, [r3, #0]
 80018fa:	6859      	ldr	r1, [r3, #4]
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	691b      	ldr	r3, [r3, #16]
 8001900:	021a      	lsls	r2, r3, #8
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	681b      	ldr	r3, [r3, #0]
 8001906:	430a      	orrs	r2, r1
 8001908:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	681b      	ldr	r3, [r3, #0]
 800190e:	685a      	ldr	r2, [r3, #4]
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	681b      	ldr	r3, [r3, #0]
 8001914:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001918:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	6859      	ldr	r1, [r3, #4]
 8001920:	687b      	ldr	r3, [r7, #4]
 8001922:	689a      	ldr	r2, [r3, #8]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	430a      	orrs	r2, r1
 800192a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	689a      	ldr	r2, [r3, #8]
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800193a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	6899      	ldr	r1, [r3, #8]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	68da      	ldr	r2, [r3, #12]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	430a      	orrs	r2, r1
 800194c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001952:	4a58      	ldr	r2, [pc, #352]	; (8001ab4 <ADC_Init+0x1f4>)
 8001954:	4293      	cmp	r3, r2
 8001956:	d022      	beq.n	800199e <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	689a      	ldr	r2, [r3, #8]
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001966:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	6899      	ldr	r1, [r3, #8]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	430a      	orrs	r2, r1
 8001978:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	689a      	ldr	r2, [r3, #8]
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	681b      	ldr	r3, [r3, #0]
 8001984:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001988:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	6899      	ldr	r1, [r3, #8]
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	430a      	orrs	r2, r1
 800199a:	609a      	str	r2, [r3, #8]
 800199c:	e00f      	b.n	80019be <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	689a      	ldr	r2, [r3, #8]
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	681b      	ldr	r3, [r3, #0]
 80019a8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	689a      	ldr	r2, [r3, #8]
 80019b4:	687b      	ldr	r3, [r7, #4]
 80019b6:	681b      	ldr	r3, [r3, #0]
 80019b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019bc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	689a      	ldr	r2, [r3, #8]
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	f022 0202 	bic.w	r2, r2, #2
 80019cc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	681b      	ldr	r3, [r3, #0]
 80019d2:	6899      	ldr	r1, [r3, #8]
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	7e1b      	ldrb	r3, [r3, #24]
 80019d8:	005a      	lsls	r2, r3, #1
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	430a      	orrs	r2, r1
 80019e0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d01b      	beq.n	8001a24 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	685a      	ldr	r2, [r3, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80019fa:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	685a      	ldr	r2, [r3, #4]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a0a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	6859      	ldr	r1, [r3, #4]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a16:	3b01      	subs	r3, #1
 8001a18:	035a      	lsls	r2, r3, #13
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	681b      	ldr	r3, [r3, #0]
 8001a1e:	430a      	orrs	r2, r1
 8001a20:	605a      	str	r2, [r3, #4]
 8001a22:	e007      	b.n	8001a34 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	681b      	ldr	r3, [r3, #0]
 8001a28:	685a      	ldr	r2, [r3, #4]
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a32:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a42:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	69db      	ldr	r3, [r3, #28]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	051a      	lsls	r2, r3, #20
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	430a      	orrs	r2, r1
 8001a58:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	689a      	ldr	r2, [r3, #8]
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	681b      	ldr	r3, [r3, #0]
 8001a64:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001a68:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	6899      	ldr	r1, [r3, #8]
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001a76:	025a      	lsls	r2, r3, #9
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	681b      	ldr	r3, [r3, #0]
 8001a7c:	430a      	orrs	r2, r1
 8001a7e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	689a      	ldr	r2, [r3, #8]
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001a8e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	6899      	ldr	r1, [r3, #8]
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	695b      	ldr	r3, [r3, #20]
 8001a9a:	029a      	lsls	r2, r3, #10
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	430a      	orrs	r2, r1
 8001aa2:	609a      	str	r2, [r3, #8]
}
 8001aa4:	bf00      	nop
 8001aa6:	3714      	adds	r7, #20
 8001aa8:	46bd      	mov	sp, r7
 8001aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aae:	4770      	bx	lr
 8001ab0:	40012300 	.word	0x40012300
 8001ab4:	0f000001 	.word	0x0f000001

08001ab8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001ab8:	b580      	push	{r7, lr}
 8001aba:	b084      	sub	sp, #16
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001ac4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001ac6:	68fb      	ldr	r3, [r7, #12]
 8001ac8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aca:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d13c      	bne.n	8001b4c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ad2:	68fb      	ldr	r3, [r7, #12]
 8001ad4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	689b      	ldr	r3, [r3, #8]
 8001ae4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d12b      	bne.n	8001b44 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001af0:	2b00      	cmp	r3, #0
 8001af2:	d127      	bne.n	8001b44 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001afa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d006      	beq.n	8001b10 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	681b      	ldr	r3, [r3, #0]
 8001b06:	689b      	ldr	r3, [r3, #8]
 8001b08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d119      	bne.n	8001b44 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b10:	68fb      	ldr	r3, [r7, #12]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	685a      	ldr	r2, [r3, #4]
 8001b16:	68fb      	ldr	r3, [r7, #12]
 8001b18:	681b      	ldr	r3, [r3, #0]
 8001b1a:	f022 0220 	bic.w	r2, r2, #32
 8001b1e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b24:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b28:	68fb      	ldr	r3, [r7, #12]
 8001b2a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b30:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b34:	2b00      	cmp	r3, #0
 8001b36:	d105      	bne.n	8001b44 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b38:	68fb      	ldr	r3, [r7, #12]
 8001b3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b3c:	f043 0201 	orr.w	r2, r3, #1
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b44:	68f8      	ldr	r0, [r7, #12]
 8001b46:	f7ff fd7b 	bl	8001640 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001b4a:	e00e      	b.n	8001b6a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d003      	beq.n	8001b60 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001b58:	68f8      	ldr	r0, [r7, #12]
 8001b5a:	f7ff fd85 	bl	8001668 <HAL_ADC_ErrorCallback>
}
 8001b5e:	e004      	b.n	8001b6a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001b66:	6878      	ldr	r0, [r7, #4]
 8001b68:	4798      	blx	r3
}
 8001b6a:	bf00      	nop
 8001b6c:	3710      	adds	r7, #16
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	bd80      	pop	{r7, pc}

08001b72 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b72:	b580      	push	{r7, lr}
 8001b74:	b084      	sub	sp, #16
 8001b76:	af00      	add	r7, sp, #0
 8001b78:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b7a:	687b      	ldr	r3, [r7, #4]
 8001b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b7e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001b80:	68f8      	ldr	r0, [r7, #12]
 8001b82:	f7ff fd67 	bl	8001654 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001b86:	bf00      	nop
 8001b88:	3710      	adds	r7, #16
 8001b8a:	46bd      	mov	sp, r7
 8001b8c:	bd80      	pop	{r7, pc}

08001b8e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001b8e:	b580      	push	{r7, lr}
 8001b90:	b084      	sub	sp, #16
 8001b92:	af00      	add	r7, sp, #0
 8001b94:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b9a:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001b9c:	68fb      	ldr	r3, [r7, #12]
 8001b9e:	2240      	movs	r2, #64	; 0x40
 8001ba0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001ba2:	68fb      	ldr	r3, [r7, #12]
 8001ba4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ba6:	f043 0204 	orr.w	r2, r3, #4
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001bae:	68f8      	ldr	r0, [r7, #12]
 8001bb0:	f7ff fd5a 	bl	8001668 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bb4:	bf00      	nop
 8001bb6:	3710      	adds	r7, #16
 8001bb8:	46bd      	mov	sp, r7
 8001bba:	bd80      	pop	{r7, pc}

08001bbc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001bbc:	b480      	push	{r7}
 8001bbe:	b085      	sub	sp, #20
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	f003 0307 	and.w	r3, r3, #7
 8001bca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bcc:	4b0c      	ldr	r3, [pc, #48]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bce:	68db      	ldr	r3, [r3, #12]
 8001bd0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bd2:	68ba      	ldr	r2, [r7, #8]
 8001bd4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bd8:	4013      	ands	r3, r2
 8001bda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bdc:	68fb      	ldr	r3, [r7, #12]
 8001bde:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001be4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001be8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bee:	4a04      	ldr	r2, [pc, #16]	; (8001c00 <__NVIC_SetPriorityGrouping+0x44>)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	60d3      	str	r3, [r2, #12]
}
 8001bf4:	bf00      	nop
 8001bf6:	3714      	adds	r7, #20
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfe:	4770      	bx	lr
 8001c00:	e000ed00 	.word	0xe000ed00

08001c04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c08:	4b04      	ldr	r3, [pc, #16]	; (8001c1c <__NVIC_GetPriorityGrouping+0x18>)
 8001c0a:	68db      	ldr	r3, [r3, #12]
 8001c0c:	0a1b      	lsrs	r3, r3, #8
 8001c0e:	f003 0307 	and.w	r3, r3, #7
}
 8001c12:	4618      	mov	r0, r3
 8001c14:	46bd      	mov	sp, r7
 8001c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c1a:	4770      	bx	lr
 8001c1c:	e000ed00 	.word	0xe000ed00

08001c20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c20:	b480      	push	{r7}
 8001c22:	b083      	sub	sp, #12
 8001c24:	af00      	add	r7, sp, #0
 8001c26:	4603      	mov	r3, r0
 8001c28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	db0b      	blt.n	8001c4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c32:	79fb      	ldrb	r3, [r7, #7]
 8001c34:	f003 021f 	and.w	r2, r3, #31
 8001c38:	4907      	ldr	r1, [pc, #28]	; (8001c58 <__NVIC_EnableIRQ+0x38>)
 8001c3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c3e:	095b      	lsrs	r3, r3, #5
 8001c40:	2001      	movs	r0, #1
 8001c42:	fa00 f202 	lsl.w	r2, r0, r2
 8001c46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001c4a:	bf00      	nop
 8001c4c:	370c      	adds	r7, #12
 8001c4e:	46bd      	mov	sp, r7
 8001c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c54:	4770      	bx	lr
 8001c56:	bf00      	nop
 8001c58:	e000e100 	.word	0xe000e100

08001c5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	b083      	sub	sp, #12
 8001c60:	af00      	add	r7, sp, #0
 8001c62:	4603      	mov	r3, r0
 8001c64:	6039      	str	r1, [r7, #0]
 8001c66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c6c:	2b00      	cmp	r3, #0
 8001c6e:	db0a      	blt.n	8001c86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	b2da      	uxtb	r2, r3
 8001c74:	490c      	ldr	r1, [pc, #48]	; (8001ca8 <__NVIC_SetPriority+0x4c>)
 8001c76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c7a:	0112      	lsls	r2, r2, #4
 8001c7c:	b2d2      	uxtb	r2, r2
 8001c7e:	440b      	add	r3, r1
 8001c80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c84:	e00a      	b.n	8001c9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c86:	683b      	ldr	r3, [r7, #0]
 8001c88:	b2da      	uxtb	r2, r3
 8001c8a:	4908      	ldr	r1, [pc, #32]	; (8001cac <__NVIC_SetPriority+0x50>)
 8001c8c:	79fb      	ldrb	r3, [r7, #7]
 8001c8e:	f003 030f 	and.w	r3, r3, #15
 8001c92:	3b04      	subs	r3, #4
 8001c94:	0112      	lsls	r2, r2, #4
 8001c96:	b2d2      	uxtb	r2, r2
 8001c98:	440b      	add	r3, r1
 8001c9a:	761a      	strb	r2, [r3, #24]
}
 8001c9c:	bf00      	nop
 8001c9e:	370c      	adds	r7, #12
 8001ca0:	46bd      	mov	sp, r7
 8001ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ca6:	4770      	bx	lr
 8001ca8:	e000e100 	.word	0xe000e100
 8001cac:	e000ed00 	.word	0xe000ed00

08001cb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b089      	sub	sp, #36	; 0x24
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	60f8      	str	r0, [r7, #12]
 8001cb8:	60b9      	str	r1, [r7, #8]
 8001cba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	f003 0307 	and.w	r3, r3, #7
 8001cc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cc4:	69fb      	ldr	r3, [r7, #28]
 8001cc6:	f1c3 0307 	rsb	r3, r3, #7
 8001cca:	2b04      	cmp	r3, #4
 8001ccc:	bf28      	it	cs
 8001cce:	2304      	movcs	r3, #4
 8001cd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cd2:	69fb      	ldr	r3, [r7, #28]
 8001cd4:	3304      	adds	r3, #4
 8001cd6:	2b06      	cmp	r3, #6
 8001cd8:	d902      	bls.n	8001ce0 <NVIC_EncodePriority+0x30>
 8001cda:	69fb      	ldr	r3, [r7, #28]
 8001cdc:	3b03      	subs	r3, #3
 8001cde:	e000      	b.n	8001ce2 <NVIC_EncodePriority+0x32>
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8001ce8:	69bb      	ldr	r3, [r7, #24]
 8001cea:	fa02 f303 	lsl.w	r3, r2, r3
 8001cee:	43da      	mvns	r2, r3
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	401a      	ands	r2, r3
 8001cf4:	697b      	ldr	r3, [r7, #20]
 8001cf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001cf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	fa01 f303 	lsl.w	r3, r1, r3
 8001d02:	43d9      	mvns	r1, r3
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d08:	4313      	orrs	r3, r2
         );
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3724      	adds	r7, #36	; 0x24
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d14:	4770      	bx	lr
	...

08001d18 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b082      	sub	sp, #8
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	3b01      	subs	r3, #1
 8001d24:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d28:	d301      	bcc.n	8001d2e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d2a:	2301      	movs	r3, #1
 8001d2c:	e00f      	b.n	8001d4e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d2e:	4a0a      	ldr	r2, [pc, #40]	; (8001d58 <SysTick_Config+0x40>)
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	3b01      	subs	r3, #1
 8001d34:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d36:	210f      	movs	r1, #15
 8001d38:	f04f 30ff 	mov.w	r0, #4294967295
 8001d3c:	f7ff ff8e 	bl	8001c5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d40:	4b05      	ldr	r3, [pc, #20]	; (8001d58 <SysTick_Config+0x40>)
 8001d42:	2200      	movs	r2, #0
 8001d44:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d46:	4b04      	ldr	r3, [pc, #16]	; (8001d58 <SysTick_Config+0x40>)
 8001d48:	2207      	movs	r2, #7
 8001d4a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	3708      	adds	r7, #8
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	e000e010 	.word	0xe000e010

08001d5c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d5c:	b580      	push	{r7, lr}
 8001d5e:	b082      	sub	sp, #8
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d64:	6878      	ldr	r0, [r7, #4]
 8001d66:	f7ff ff29 	bl	8001bbc <__NVIC_SetPriorityGrouping>
}
 8001d6a:	bf00      	nop
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}

08001d72 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d72:	b580      	push	{r7, lr}
 8001d74:	b086      	sub	sp, #24
 8001d76:	af00      	add	r7, sp, #0
 8001d78:	4603      	mov	r3, r0
 8001d7a:	60b9      	str	r1, [r7, #8]
 8001d7c:	607a      	str	r2, [r7, #4]
 8001d7e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d80:	2300      	movs	r3, #0
 8001d82:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d84:	f7ff ff3e 	bl	8001c04 <__NVIC_GetPriorityGrouping>
 8001d88:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d8a:	687a      	ldr	r2, [r7, #4]
 8001d8c:	68b9      	ldr	r1, [r7, #8]
 8001d8e:	6978      	ldr	r0, [r7, #20]
 8001d90:	f7ff ff8e 	bl	8001cb0 <NVIC_EncodePriority>
 8001d94:	4602      	mov	r2, r0
 8001d96:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d9a:	4611      	mov	r1, r2
 8001d9c:	4618      	mov	r0, r3
 8001d9e:	f7ff ff5d 	bl	8001c5c <__NVIC_SetPriority>
}
 8001da2:	bf00      	nop
 8001da4:	3718      	adds	r7, #24
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bd80      	pop	{r7, pc}

08001daa <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001daa:	b580      	push	{r7, lr}
 8001dac:	b082      	sub	sp, #8
 8001dae:	af00      	add	r7, sp, #0
 8001db0:	4603      	mov	r3, r0
 8001db2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001db4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db8:	4618      	mov	r0, r3
 8001dba:	f7ff ff31 	bl	8001c20 <__NVIC_EnableIRQ>
}
 8001dbe:	bf00      	nop
 8001dc0:	3708      	adds	r7, #8
 8001dc2:	46bd      	mov	sp, r7
 8001dc4:	bd80      	pop	{r7, pc}

08001dc6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001dc6:	b580      	push	{r7, lr}
 8001dc8:	b082      	sub	sp, #8
 8001dca:	af00      	add	r7, sp, #0
 8001dcc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f7ff ffa2 	bl	8001d18 <SysTick_Config>
 8001dd4:	4603      	mov	r3, r0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	3708      	adds	r7, #8
 8001dda:	46bd      	mov	sp, r7
 8001ddc:	bd80      	pop	{r7, pc}
	...

08001de0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b086      	sub	sp, #24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001de8:	2300      	movs	r3, #0
 8001dea:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001dec:	f7ff fac4 	bl	8001378 <HAL_GetTick>
 8001df0:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d101      	bne.n	8001dfc <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001df8:	2301      	movs	r3, #1
 8001dfa:	e099      	b.n	8001f30 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	2202      	movs	r2, #2
 8001e00:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	2200      	movs	r2, #0
 8001e08:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0201 	bic.w	r2, r2, #1
 8001e1a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e1c:	e00f      	b.n	8001e3e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e1e:	f7ff faab 	bl	8001378 <HAL_GetTick>
 8001e22:	4602      	mov	r2, r0
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	1ad3      	subs	r3, r2, r3
 8001e28:	2b05      	cmp	r3, #5
 8001e2a:	d908      	bls.n	8001e3e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	2220      	movs	r2, #32
 8001e30:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	2203      	movs	r2, #3
 8001e36:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	e078      	b.n	8001f30 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d1e8      	bne.n	8001e1e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001e54:	697a      	ldr	r2, [r7, #20]
 8001e56:	4b38      	ldr	r3, [pc, #224]	; (8001f38 <HAL_DMA_Init+0x158>)
 8001e58:	4013      	ands	r3, r2
 8001e5a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	685a      	ldr	r2, [r3, #4]
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	689b      	ldr	r3, [r3, #8]
 8001e64:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e6a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	691b      	ldr	r3, [r3, #16]
 8001e70:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e72:	687b      	ldr	r3, [r7, #4]
 8001e74:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e76:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	699b      	ldr	r3, [r3, #24]
 8001e7c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e82:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	6a1b      	ldr	r3, [r3, #32]
 8001e88:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e8a:	697a      	ldr	r2, [r7, #20]
 8001e8c:	4313      	orrs	r3, r2
 8001e8e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e94:	2b04      	cmp	r3, #4
 8001e96:	d107      	bne.n	8001ea8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	697a      	ldr	r2, [r7, #20]
 8001ea4:	4313      	orrs	r3, r2
 8001ea6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	681b      	ldr	r3, [r3, #0]
 8001eb4:	695b      	ldr	r3, [r3, #20]
 8001eb6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001eb8:	697b      	ldr	r3, [r7, #20]
 8001eba:	f023 0307 	bic.w	r3, r3, #7
 8001ebe:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ec4:	697a      	ldr	r2, [r7, #20]
 8001ec6:	4313      	orrs	r3, r2
 8001ec8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ece:	2b04      	cmp	r3, #4
 8001ed0:	d117      	bne.n	8001f02 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ed6:	697a      	ldr	r2, [r7, #20]
 8001ed8:	4313      	orrs	r3, r2
 8001eda:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ee0:	2b00      	cmp	r3, #0
 8001ee2:	d00e      	beq.n	8001f02 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001ee4:	6878      	ldr	r0, [r7, #4]
 8001ee6:	f000 fa6f 	bl	80023c8 <DMA_CheckFifoParam>
 8001eea:	4603      	mov	r3, r0
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d008      	beq.n	8001f02 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	2240      	movs	r2, #64	; 0x40
 8001ef4:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001efe:	2301      	movs	r3, #1
 8001f00:	e016      	b.n	8001f30 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	697a      	ldr	r2, [r7, #20]
 8001f08:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f0a:	6878      	ldr	r0, [r7, #4]
 8001f0c:	f000 fa26 	bl	800235c <DMA_CalcBaseAndBitshift>
 8001f10:	4603      	mov	r3, r0
 8001f12:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f18:	223f      	movs	r2, #63	; 0x3f
 8001f1a:	409a      	lsls	r2, r3
 8001f1c:	68fb      	ldr	r3, [r7, #12]
 8001f1e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	2200      	movs	r2, #0
 8001f24:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	f010803f 	.word	0xf010803f

08001f3c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f3c:	b580      	push	{r7, lr}
 8001f3e:	b086      	sub	sp, #24
 8001f40:	af00      	add	r7, sp, #0
 8001f42:	60f8      	str	r0, [r7, #12]
 8001f44:	60b9      	str	r1, [r7, #8]
 8001f46:	607a      	str	r2, [r7, #4]
 8001f48:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001f4e:	68fb      	ldr	r3, [r7, #12]
 8001f50:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f52:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001f54:	68fb      	ldr	r3, [r7, #12]
 8001f56:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001f5a:	2b01      	cmp	r3, #1
 8001f5c:	d101      	bne.n	8001f62 <HAL_DMA_Start_IT+0x26>
 8001f5e:	2302      	movs	r3, #2
 8001f60:	e040      	b.n	8001fe4 <HAL_DMA_Start_IT+0xa8>
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	2201      	movs	r2, #1
 8001f66:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001f6a:	68fb      	ldr	r3, [r7, #12]
 8001f6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001f70:	b2db      	uxtb	r3, r3
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d12f      	bne.n	8001fd6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2202      	movs	r2, #2
 8001f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001f84:	683b      	ldr	r3, [r7, #0]
 8001f86:	687a      	ldr	r2, [r7, #4]
 8001f88:	68b9      	ldr	r1, [r7, #8]
 8001f8a:	68f8      	ldr	r0, [r7, #12]
 8001f8c:	f000 f9b8 	bl	8002300 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f90:	68fb      	ldr	r3, [r7, #12]
 8001f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f94:	223f      	movs	r2, #63	; 0x3f
 8001f96:	409a      	lsls	r2, r3
 8001f98:	693b      	ldr	r3, [r7, #16]
 8001f9a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001f9c:	68fb      	ldr	r3, [r7, #12]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	681a      	ldr	r2, [r3, #0]
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	f042 0216 	orr.w	r2, r2, #22
 8001faa:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d007      	beq.n	8001fc4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	f042 0208 	orr.w	r2, r2, #8
 8001fc2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f042 0201 	orr.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]
 8001fd4:	e005      	b.n	8001fe2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001fde:	2302      	movs	r3, #2
 8001fe0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001fe2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fe4:	4618      	mov	r0, r3
 8001fe6:	3718      	adds	r7, #24
 8001fe8:	46bd      	mov	sp, r7
 8001fea:	bd80      	pop	{r7, pc}

08001fec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ff8:	4b8e      	ldr	r3, [pc, #568]	; (8002234 <HAL_DMA_IRQHandler+0x248>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a8e      	ldr	r2, [pc, #568]	; (8002238 <HAL_DMA_IRQHandler+0x24c>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	0a9b      	lsrs	r3, r3, #10
 8002004:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	2208      	movs	r2, #8
 8002018:	409a      	lsls	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d01a      	beq.n	8002058 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d013      	beq.n	8002058 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0204 	bic.w	r2, r2, #4
 800203e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	2208      	movs	r2, #8
 8002046:	409a      	lsls	r2, r3
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002050:	f043 0201 	orr.w	r2, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205c:	2201      	movs	r2, #1
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d012      	beq.n	800208e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	2201      	movs	r2, #1
 800207c:	409a      	lsls	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002086:	f043 0202 	orr.w	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002092:	2204      	movs	r2, #4
 8002094:	409a      	lsls	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d012      	beq.n	80020c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00b      	beq.n	80020c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b0:	2204      	movs	r2, #4
 80020b2:	409a      	lsls	r2, r3
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020bc:	f043 0204 	orr.w	r2, r3, #4
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c8:	2210      	movs	r2, #16
 80020ca:	409a      	lsls	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d043      	beq.n	800215c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d03c      	beq.n	800215c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e6:	2210      	movs	r2, #16
 80020e8:	409a      	lsls	r2, r3
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d018      	beq.n	800212e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d108      	bne.n	800211c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d024      	beq.n	800215c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	4798      	blx	r3
 800211a:	e01f      	b.n	800215c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01b      	beq.n	800215c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
 800212c:	e016      	b.n	800215c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d107      	bne.n	800214c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0208 	bic.w	r2, r2, #8
 800214a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002160:	2220      	movs	r2, #32
 8002162:	409a      	lsls	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 808f 	beq.w	800228c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 8087 	beq.w	800228c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	2220      	movs	r2, #32
 8002184:	409a      	lsls	r2, r3
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b05      	cmp	r3, #5
 8002194:	d136      	bne.n	8002204 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0216 	bic.w	r2, r2, #22
 80021a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695a      	ldr	r2, [r3, #20]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d103      	bne.n	80021c6 <HAL_DMA_IRQHandler+0x1da>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d007      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0208 	bic.w	r2, r2, #8
 80021d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	223f      	movs	r2, #63	; 0x3f
 80021dc:	409a      	lsls	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d07e      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
        }
        return;
 8002202:	e079      	b.n	80022f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d01d      	beq.n	800224e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10d      	bne.n	800223c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002224:	2b00      	cmp	r3, #0
 8002226:	d031      	beq.n	800228c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4798      	blx	r3
 8002230:	e02c      	b.n	800228c <HAL_DMA_IRQHandler+0x2a0>
 8002232:	bf00      	nop
 8002234:	200003d4 	.word	0x200003d4
 8002238:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d023      	beq.n	800228c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
 800224c:	e01e      	b.n	800228c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10f      	bne.n	800227c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0210 	bic.w	r2, r2, #16
 800226a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002290:	2b00      	cmp	r3, #0
 8002292:	d032      	beq.n	80022fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d022      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2205      	movs	r2, #5
 80022a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	3301      	adds	r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d307      	bcc.n	80022d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f2      	bne.n	80022b8 <HAL_DMA_IRQHandler+0x2cc>
 80022d2:	e000      	b.n	80022d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
 80022f6:	e000      	b.n	80022fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80022f8:	bf00      	nop
    }
  }
}
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	60f8      	str	r0, [r7, #12]
 8002308:	60b9      	str	r1, [r7, #8]
 800230a:	607a      	str	r2, [r7, #4]
 800230c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800230e:	68fb      	ldr	r3, [r7, #12]
 8002310:	681b      	ldr	r3, [r3, #0]
 8002312:	681a      	ldr	r2, [r3, #0]
 8002314:	68fb      	ldr	r3, [r7, #12]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800231c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800231e:	68fb      	ldr	r3, [r7, #12]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	683a      	ldr	r2, [r7, #0]
 8002324:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	689b      	ldr	r3, [r3, #8]
 800232a:	2b40      	cmp	r3, #64	; 0x40
 800232c:	d108      	bne.n	8002340 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	687a      	ldr	r2, [r7, #4]
 8002334:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	68ba      	ldr	r2, [r7, #8]
 800233c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800233e:	e007      	b.n	8002350 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	68ba      	ldr	r2, [r7, #8]
 8002346:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	687a      	ldr	r2, [r7, #4]
 800234e:	60da      	str	r2, [r3, #12]
}
 8002350:	bf00      	nop
 8002352:	3714      	adds	r7, #20
 8002354:	46bd      	mov	sp, r7
 8002356:	f85d 7b04 	ldr.w	r7, [sp], #4
 800235a:	4770      	bx	lr

0800235c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800235c:	b480      	push	{r7}
 800235e:	b085      	sub	sp, #20
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	b2db      	uxtb	r3, r3
 800236a:	3b10      	subs	r3, #16
 800236c:	4a14      	ldr	r2, [pc, #80]	; (80023c0 <DMA_CalcBaseAndBitshift+0x64>)
 800236e:	fba2 2303 	umull	r2, r3, r2, r3
 8002372:	091b      	lsrs	r3, r3, #4
 8002374:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002376:	4a13      	ldr	r2, [pc, #76]	; (80023c4 <DMA_CalcBaseAndBitshift+0x68>)
 8002378:	68fb      	ldr	r3, [r7, #12]
 800237a:	4413      	add	r3, r2
 800237c:	781b      	ldrb	r3, [r3, #0]
 800237e:	461a      	mov	r2, r3
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	2b03      	cmp	r3, #3
 8002388:	d909      	bls.n	800239e <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002392:	f023 0303 	bic.w	r3, r3, #3
 8002396:	1d1a      	adds	r2, r3, #4
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	659a      	str	r2, [r3, #88]	; 0x58
 800239c:	e007      	b.n	80023ae <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023a6:	f023 0303 	bic.w	r3, r3, #3
 80023aa:	687a      	ldr	r2, [r7, #4]
 80023ac:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
 80023be:	bf00      	nop
 80023c0:	aaaaaaab 	.word	0xaaaaaaab
 80023c4:	08008154 	.word	0x08008154

080023c8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80023c8:	b480      	push	{r7}
 80023ca:	b085      	sub	sp, #20
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80023d0:	2300      	movs	r3, #0
 80023d2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023d8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	699b      	ldr	r3, [r3, #24]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d11f      	bne.n	8002422 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80023e2:	68bb      	ldr	r3, [r7, #8]
 80023e4:	2b03      	cmp	r3, #3
 80023e6:	d856      	bhi.n	8002496 <DMA_CheckFifoParam+0xce>
 80023e8:	a201      	add	r2, pc, #4	; (adr r2, 80023f0 <DMA_CheckFifoParam+0x28>)
 80023ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023ee:	bf00      	nop
 80023f0:	08002401 	.word	0x08002401
 80023f4:	08002413 	.word	0x08002413
 80023f8:	08002401 	.word	0x08002401
 80023fc:	08002497 	.word	0x08002497
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002404:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002408:	2b00      	cmp	r3, #0
 800240a:	d046      	beq.n	800249a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002410:	e043      	b.n	800249a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002416:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800241a:	d140      	bne.n	800249e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800241c:	2301      	movs	r3, #1
 800241e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002420:	e03d      	b.n	800249e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	699b      	ldr	r3, [r3, #24]
 8002426:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800242a:	d121      	bne.n	8002470 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800242c:	68bb      	ldr	r3, [r7, #8]
 800242e:	2b03      	cmp	r3, #3
 8002430:	d837      	bhi.n	80024a2 <DMA_CheckFifoParam+0xda>
 8002432:	a201      	add	r2, pc, #4	; (adr r2, 8002438 <DMA_CheckFifoParam+0x70>)
 8002434:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002438:	08002449 	.word	0x08002449
 800243c:	0800244f 	.word	0x0800244f
 8002440:	08002449 	.word	0x08002449
 8002444:	08002461 	.word	0x08002461
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	73fb      	strb	r3, [r7, #15]
      break;
 800244c:	e030      	b.n	80024b0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800244e:	687b      	ldr	r3, [r7, #4]
 8002450:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002452:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002456:	2b00      	cmp	r3, #0
 8002458:	d025      	beq.n	80024a6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800245a:	2301      	movs	r3, #1
 800245c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800245e:	e022      	b.n	80024a6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002464:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002468:	d11f      	bne.n	80024aa <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800246a:	2301      	movs	r3, #1
 800246c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800246e:	e01c      	b.n	80024aa <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b02      	cmp	r3, #2
 8002474:	d903      	bls.n	800247e <DMA_CheckFifoParam+0xb6>
 8002476:	68bb      	ldr	r3, [r7, #8]
 8002478:	2b03      	cmp	r3, #3
 800247a:	d003      	beq.n	8002484 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800247c:	e018      	b.n	80024b0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	73fb      	strb	r3, [r7, #15]
      break;
 8002482:	e015      	b.n	80024b0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002488:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800248c:	2b00      	cmp	r3, #0
 800248e:	d00e      	beq.n	80024ae <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002490:	2301      	movs	r3, #1
 8002492:	73fb      	strb	r3, [r7, #15]
      break;
 8002494:	e00b      	b.n	80024ae <DMA_CheckFifoParam+0xe6>
      break;
 8002496:	bf00      	nop
 8002498:	e00a      	b.n	80024b0 <DMA_CheckFifoParam+0xe8>
      break;
 800249a:	bf00      	nop
 800249c:	e008      	b.n	80024b0 <DMA_CheckFifoParam+0xe8>
      break;
 800249e:	bf00      	nop
 80024a0:	e006      	b.n	80024b0 <DMA_CheckFifoParam+0xe8>
      break;
 80024a2:	bf00      	nop
 80024a4:	e004      	b.n	80024b0 <DMA_CheckFifoParam+0xe8>
      break;
 80024a6:	bf00      	nop
 80024a8:	e002      	b.n	80024b0 <DMA_CheckFifoParam+0xe8>
      break;   
 80024aa:	bf00      	nop
 80024ac:	e000      	b.n	80024b0 <DMA_CheckFifoParam+0xe8>
      break;
 80024ae:	bf00      	nop
    }
  } 
  
  return status; 
 80024b0:	7bfb      	ldrb	r3, [r7, #15]
}
 80024b2:	4618      	mov	r0, r3
 80024b4:	3714      	adds	r7, #20
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop

080024c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80024c0:	b480      	push	{r7}
 80024c2:	b089      	sub	sp, #36	; 0x24
 80024c4:	af00      	add	r7, sp, #0
 80024c6:	6078      	str	r0, [r7, #4]
 80024c8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80024ca:	2300      	movs	r3, #0
 80024cc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80024ce:	2300      	movs	r3, #0
 80024d0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80024d2:	2300      	movs	r3, #0
 80024d4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
 80024da:	e159      	b.n	8002790 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80024dc:	2201      	movs	r2, #1
 80024de:	69fb      	ldr	r3, [r7, #28]
 80024e0:	fa02 f303 	lsl.w	r3, r2, r3
 80024e4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80024e6:	683b      	ldr	r3, [r7, #0]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	697a      	ldr	r2, [r7, #20]
 80024ec:	4013      	ands	r3, r2
 80024ee:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80024f0:	693a      	ldr	r2, [r7, #16]
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	429a      	cmp	r2, r3
 80024f6:	f040 8148 	bne.w	800278a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	685b      	ldr	r3, [r3, #4]
 80024fe:	f003 0303 	and.w	r3, r3, #3
 8002502:	2b01      	cmp	r3, #1
 8002504:	d005      	beq.n	8002512 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002506:	683b      	ldr	r3, [r7, #0]
 8002508:	685b      	ldr	r3, [r3, #4]
 800250a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800250e:	2b02      	cmp	r3, #2
 8002510:	d130      	bne.n	8002574 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	689b      	ldr	r3, [r3, #8]
 8002516:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002518:	69fb      	ldr	r3, [r7, #28]
 800251a:	005b      	lsls	r3, r3, #1
 800251c:	2203      	movs	r2, #3
 800251e:	fa02 f303 	lsl.w	r3, r2, r3
 8002522:	43db      	mvns	r3, r3
 8002524:	69ba      	ldr	r2, [r7, #24]
 8002526:	4013      	ands	r3, r2
 8002528:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800252a:	683b      	ldr	r3, [r7, #0]
 800252c:	68da      	ldr	r2, [r3, #12]
 800252e:	69fb      	ldr	r3, [r7, #28]
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	fa02 f303 	lsl.w	r3, r2, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4313      	orrs	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	69ba      	ldr	r2, [r7, #24]
 8002540:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002542:	687b      	ldr	r3, [r7, #4]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002548:	2201      	movs	r2, #1
 800254a:	69fb      	ldr	r3, [r7, #28]
 800254c:	fa02 f303 	lsl.w	r3, r2, r3
 8002550:	43db      	mvns	r3, r3
 8002552:	69ba      	ldr	r2, [r7, #24]
 8002554:	4013      	ands	r3, r2
 8002556:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002558:	683b      	ldr	r3, [r7, #0]
 800255a:	685b      	ldr	r3, [r3, #4]
 800255c:	091b      	lsrs	r3, r3, #4
 800255e:	f003 0201 	and.w	r2, r3, #1
 8002562:	69fb      	ldr	r3, [r7, #28]
 8002564:	fa02 f303 	lsl.w	r3, r2, r3
 8002568:	69ba      	ldr	r2, [r7, #24]
 800256a:	4313      	orrs	r3, r2
 800256c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	69ba      	ldr	r2, [r7, #24]
 8002572:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002574:	683b      	ldr	r3, [r7, #0]
 8002576:	685b      	ldr	r3, [r3, #4]
 8002578:	f003 0303 	and.w	r3, r3, #3
 800257c:	2b03      	cmp	r3, #3
 800257e:	d017      	beq.n	80025b0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	2203      	movs	r2, #3
 800258c:	fa02 f303 	lsl.w	r3, r2, r3
 8002590:	43db      	mvns	r3, r3
 8002592:	69ba      	ldr	r2, [r7, #24]
 8002594:	4013      	ands	r3, r2
 8002596:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	689a      	ldr	r2, [r3, #8]
 800259c:	69fb      	ldr	r3, [r7, #28]
 800259e:	005b      	lsls	r3, r3, #1
 80025a0:	fa02 f303 	lsl.w	r3, r2, r3
 80025a4:	69ba      	ldr	r2, [r7, #24]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	69ba      	ldr	r2, [r7, #24]
 80025ae:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	f003 0303 	and.w	r3, r3, #3
 80025b8:	2b02      	cmp	r3, #2
 80025ba:	d123      	bne.n	8002604 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	08da      	lsrs	r2, r3, #3
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	3208      	adds	r2, #8
 80025c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80025c8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	f003 0307 	and.w	r3, r3, #7
 80025d0:	009b      	lsls	r3, r3, #2
 80025d2:	220f      	movs	r2, #15
 80025d4:	fa02 f303 	lsl.w	r3, r2, r3
 80025d8:	43db      	mvns	r3, r3
 80025da:	69ba      	ldr	r2, [r7, #24]
 80025dc:	4013      	ands	r3, r2
 80025de:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	691a      	ldr	r2, [r3, #16]
 80025e4:	69fb      	ldr	r3, [r7, #28]
 80025e6:	f003 0307 	and.w	r3, r3, #7
 80025ea:	009b      	lsls	r3, r3, #2
 80025ec:	fa02 f303 	lsl.w	r3, r2, r3
 80025f0:	69ba      	ldr	r2, [r7, #24]
 80025f2:	4313      	orrs	r3, r2
 80025f4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80025f6:	69fb      	ldr	r3, [r7, #28]
 80025f8:	08da      	lsrs	r2, r3, #3
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	3208      	adds	r2, #8
 80025fe:	69b9      	ldr	r1, [r7, #24]
 8002600:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800260a:	69fb      	ldr	r3, [r7, #28]
 800260c:	005b      	lsls	r3, r3, #1
 800260e:	2203      	movs	r2, #3
 8002610:	fa02 f303 	lsl.w	r3, r2, r3
 8002614:	43db      	mvns	r3, r3
 8002616:	69ba      	ldr	r2, [r7, #24]
 8002618:	4013      	ands	r3, r2
 800261a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685b      	ldr	r3, [r3, #4]
 8002620:	f003 0203 	and.w	r2, r3, #3
 8002624:	69fb      	ldr	r3, [r7, #28]
 8002626:	005b      	lsls	r3, r3, #1
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	4313      	orrs	r3, r2
 8002630:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	69ba      	ldr	r2, [r7, #24]
 8002636:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	685b      	ldr	r3, [r3, #4]
 800263c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002640:	2b00      	cmp	r3, #0
 8002642:	f000 80a2 	beq.w	800278a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002646:	2300      	movs	r3, #0
 8002648:	60fb      	str	r3, [r7, #12]
 800264a:	4b57      	ldr	r3, [pc, #348]	; (80027a8 <HAL_GPIO_Init+0x2e8>)
 800264c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800264e:	4a56      	ldr	r2, [pc, #344]	; (80027a8 <HAL_GPIO_Init+0x2e8>)
 8002650:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002654:	6453      	str	r3, [r2, #68]	; 0x44
 8002656:	4b54      	ldr	r3, [pc, #336]	; (80027a8 <HAL_GPIO_Init+0x2e8>)
 8002658:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800265a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800265e:	60fb      	str	r3, [r7, #12]
 8002660:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002662:	4a52      	ldr	r2, [pc, #328]	; (80027ac <HAL_GPIO_Init+0x2ec>)
 8002664:	69fb      	ldr	r3, [r7, #28]
 8002666:	089b      	lsrs	r3, r3, #2
 8002668:	3302      	adds	r3, #2
 800266a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800266e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002670:	69fb      	ldr	r3, [r7, #28]
 8002672:	f003 0303 	and.w	r3, r3, #3
 8002676:	009b      	lsls	r3, r3, #2
 8002678:	220f      	movs	r2, #15
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	43db      	mvns	r3, r3
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	4013      	ands	r3, r2
 8002684:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	4a49      	ldr	r2, [pc, #292]	; (80027b0 <HAL_GPIO_Init+0x2f0>)
 800268a:	4293      	cmp	r3, r2
 800268c:	d019      	beq.n	80026c2 <HAL_GPIO_Init+0x202>
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	4a48      	ldr	r2, [pc, #288]	; (80027b4 <HAL_GPIO_Init+0x2f4>)
 8002692:	4293      	cmp	r3, r2
 8002694:	d013      	beq.n	80026be <HAL_GPIO_Init+0x1fe>
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	4a47      	ldr	r2, [pc, #284]	; (80027b8 <HAL_GPIO_Init+0x2f8>)
 800269a:	4293      	cmp	r3, r2
 800269c:	d00d      	beq.n	80026ba <HAL_GPIO_Init+0x1fa>
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	4a46      	ldr	r2, [pc, #280]	; (80027bc <HAL_GPIO_Init+0x2fc>)
 80026a2:	4293      	cmp	r3, r2
 80026a4:	d007      	beq.n	80026b6 <HAL_GPIO_Init+0x1f6>
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	4a45      	ldr	r2, [pc, #276]	; (80027c0 <HAL_GPIO_Init+0x300>)
 80026aa:	4293      	cmp	r3, r2
 80026ac:	d101      	bne.n	80026b2 <HAL_GPIO_Init+0x1f2>
 80026ae:	2304      	movs	r3, #4
 80026b0:	e008      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026b2:	2307      	movs	r3, #7
 80026b4:	e006      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026b6:	2303      	movs	r3, #3
 80026b8:	e004      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026ba:	2302      	movs	r3, #2
 80026bc:	e002      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026be:	2301      	movs	r3, #1
 80026c0:	e000      	b.n	80026c4 <HAL_GPIO_Init+0x204>
 80026c2:	2300      	movs	r3, #0
 80026c4:	69fa      	ldr	r2, [r7, #28]
 80026c6:	f002 0203 	and.w	r2, r2, #3
 80026ca:	0092      	lsls	r2, r2, #2
 80026cc:	4093      	lsls	r3, r2
 80026ce:	69ba      	ldr	r2, [r7, #24]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80026d4:	4935      	ldr	r1, [pc, #212]	; (80027ac <HAL_GPIO_Init+0x2ec>)
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	089b      	lsrs	r3, r3, #2
 80026da:	3302      	adds	r3, #2
 80026dc:	69ba      	ldr	r2, [r7, #24]
 80026de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80026e2:	4b38      	ldr	r3, [pc, #224]	; (80027c4 <HAL_GPIO_Init+0x304>)
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e8:	693b      	ldr	r3, [r7, #16]
 80026ea:	43db      	mvns	r3, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4013      	ands	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80026f2:	683b      	ldr	r3, [r7, #0]
 80026f4:	685b      	ldr	r3, [r3, #4]
 80026f6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80026fa:	2b00      	cmp	r3, #0
 80026fc:	d003      	beq.n	8002706 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026fe:	69ba      	ldr	r2, [r7, #24]
 8002700:	693b      	ldr	r3, [r7, #16]
 8002702:	4313      	orrs	r3, r2
 8002704:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002706:	4a2f      	ldr	r2, [pc, #188]	; (80027c4 <HAL_GPIO_Init+0x304>)
 8002708:	69bb      	ldr	r3, [r7, #24]
 800270a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800270c:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <HAL_GPIO_Init+0x304>)
 800270e:	68db      	ldr	r3, [r3, #12]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002712:	693b      	ldr	r3, [r7, #16]
 8002714:	43db      	mvns	r3, r3
 8002716:	69ba      	ldr	r2, [r7, #24]
 8002718:	4013      	ands	r3, r2
 800271a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800271c:	683b      	ldr	r3, [r7, #0]
 800271e:	685b      	ldr	r3, [r3, #4]
 8002720:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002724:	2b00      	cmp	r3, #0
 8002726:	d003      	beq.n	8002730 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002728:	69ba      	ldr	r2, [r7, #24]
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	4313      	orrs	r3, r2
 800272e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002730:	4a24      	ldr	r2, [pc, #144]	; (80027c4 <HAL_GPIO_Init+0x304>)
 8002732:	69bb      	ldr	r3, [r7, #24]
 8002734:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002736:	4b23      	ldr	r3, [pc, #140]	; (80027c4 <HAL_GPIO_Init+0x304>)
 8002738:	685b      	ldr	r3, [r3, #4]
 800273a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800273c:	693b      	ldr	r3, [r7, #16]
 800273e:	43db      	mvns	r3, r3
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	4013      	ands	r3, r2
 8002744:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800274e:	2b00      	cmp	r3, #0
 8002750:	d003      	beq.n	800275a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002752:	69ba      	ldr	r2, [r7, #24]
 8002754:	693b      	ldr	r3, [r7, #16]
 8002756:	4313      	orrs	r3, r2
 8002758:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800275a:	4a1a      	ldr	r2, [pc, #104]	; (80027c4 <HAL_GPIO_Init+0x304>)
 800275c:	69bb      	ldr	r3, [r7, #24]
 800275e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002760:	4b18      	ldr	r3, [pc, #96]	; (80027c4 <HAL_GPIO_Init+0x304>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002766:	693b      	ldr	r3, [r7, #16]
 8002768:	43db      	mvns	r3, r3
 800276a:	69ba      	ldr	r2, [r7, #24]
 800276c:	4013      	ands	r3, r2
 800276e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	685b      	ldr	r3, [r3, #4]
 8002774:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	693b      	ldr	r3, [r7, #16]
 8002780:	4313      	orrs	r3, r2
 8002782:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002784:	4a0f      	ldr	r2, [pc, #60]	; (80027c4 <HAL_GPIO_Init+0x304>)
 8002786:	69bb      	ldr	r3, [r7, #24]
 8002788:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	3301      	adds	r3, #1
 800278e:	61fb      	str	r3, [r7, #28]
 8002790:	69fb      	ldr	r3, [r7, #28]
 8002792:	2b0f      	cmp	r3, #15
 8002794:	f67f aea2 	bls.w	80024dc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002798:	bf00      	nop
 800279a:	bf00      	nop
 800279c:	3724      	adds	r7, #36	; 0x24
 800279e:	46bd      	mov	sp, r7
 80027a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027a4:	4770      	bx	lr
 80027a6:	bf00      	nop
 80027a8:	40023800 	.word	0x40023800
 80027ac:	40013800 	.word	0x40013800
 80027b0:	40020000 	.word	0x40020000
 80027b4:	40020400 	.word	0x40020400
 80027b8:	40020800 	.word	0x40020800
 80027bc:	40020c00 	.word	0x40020c00
 80027c0:	40021000 	.word	0x40021000
 80027c4:	40013c00 	.word	0x40013c00

080027c8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80027c8:	b480      	push	{r7}
 80027ca:	b085      	sub	sp, #20
 80027cc:	af00      	add	r7, sp, #0
 80027ce:	6078      	str	r0, [r7, #4]
 80027d0:	460b      	mov	r3, r1
 80027d2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	691a      	ldr	r2, [r3, #16]
 80027d8:	887b      	ldrh	r3, [r7, #2]
 80027da:	4013      	ands	r3, r2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d002      	beq.n	80027e6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80027e0:	2301      	movs	r3, #1
 80027e2:	73fb      	strb	r3, [r7, #15]
 80027e4:	e001      	b.n	80027ea <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80027e6:	2300      	movs	r3, #0
 80027e8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80027ea:	7bfb      	ldrb	r3, [r7, #15]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3714      	adds	r7, #20
 80027f0:	46bd      	mov	sp, r7
 80027f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027f6:	4770      	bx	lr

080027f8 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80027f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80027fa:	b08f      	sub	sp, #60	; 0x3c
 80027fc:	af0a      	add	r7, sp, #40	; 0x28
 80027fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2b00      	cmp	r3, #0
 8002804:	d101      	bne.n	800280a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002806:	2301      	movs	r3, #1
 8002808:	e10f      	b.n	8002a2a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002816:	b2db      	uxtb	r3, r3
 8002818:	2b00      	cmp	r3, #0
 800281a:	d106      	bne.n	800282a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2200      	movs	r2, #0
 8002820:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f005 f931 	bl	8007a8c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	2203      	movs	r2, #3
 800282e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002832:	68bb      	ldr	r3, [r7, #8]
 8002834:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800283a:	2b00      	cmp	r3, #0
 800283c:	d102      	bne.n	8002844 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2200      	movs	r2, #0
 8002842:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4618      	mov	r0, r3
 800284a:	f001 ff80 	bl	800474e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	603b      	str	r3, [r7, #0]
 8002854:	687e      	ldr	r6, [r7, #4]
 8002856:	466d      	mov	r5, sp
 8002858:	f106 0410 	add.w	r4, r6, #16
 800285c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800285e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002860:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002862:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002864:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002868:	e885 0003 	stmia.w	r5, {r0, r1}
 800286c:	1d33      	adds	r3, r6, #4
 800286e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002870:	6838      	ldr	r0, [r7, #0]
 8002872:	f001 fe57 	bl	8004524 <USB_CoreInit>
 8002876:	4603      	mov	r3, r0
 8002878:	2b00      	cmp	r3, #0
 800287a:	d005      	beq.n	8002888 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2202      	movs	r2, #2
 8002880:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e0d0      	b.n	8002a2a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	2100      	movs	r1, #0
 800288e:	4618      	mov	r0, r3
 8002890:	f001 ff6e 	bl	8004770 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002894:	2300      	movs	r3, #0
 8002896:	73fb      	strb	r3, [r7, #15]
 8002898:	e04a      	b.n	8002930 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800289a:	7bfa      	ldrb	r2, [r7, #15]
 800289c:	6879      	ldr	r1, [r7, #4]
 800289e:	4613      	mov	r3, r2
 80028a0:	00db      	lsls	r3, r3, #3
 80028a2:	4413      	add	r3, r2
 80028a4:	009b      	lsls	r3, r3, #2
 80028a6:	440b      	add	r3, r1
 80028a8:	333d      	adds	r3, #61	; 0x3d
 80028aa:	2201      	movs	r2, #1
 80028ac:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80028ae:	7bfa      	ldrb	r2, [r7, #15]
 80028b0:	6879      	ldr	r1, [r7, #4]
 80028b2:	4613      	mov	r3, r2
 80028b4:	00db      	lsls	r3, r3, #3
 80028b6:	4413      	add	r3, r2
 80028b8:	009b      	lsls	r3, r3, #2
 80028ba:	440b      	add	r3, r1
 80028bc:	333c      	adds	r3, #60	; 0x3c
 80028be:	7bfa      	ldrb	r2, [r7, #15]
 80028c0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80028c2:	7bfa      	ldrb	r2, [r7, #15]
 80028c4:	7bfb      	ldrb	r3, [r7, #15]
 80028c6:	b298      	uxth	r0, r3
 80028c8:	6879      	ldr	r1, [r7, #4]
 80028ca:	4613      	mov	r3, r2
 80028cc:	00db      	lsls	r3, r3, #3
 80028ce:	4413      	add	r3, r2
 80028d0:	009b      	lsls	r3, r3, #2
 80028d2:	440b      	add	r3, r1
 80028d4:	3344      	adds	r3, #68	; 0x44
 80028d6:	4602      	mov	r2, r0
 80028d8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80028da:	7bfa      	ldrb	r2, [r7, #15]
 80028dc:	6879      	ldr	r1, [r7, #4]
 80028de:	4613      	mov	r3, r2
 80028e0:	00db      	lsls	r3, r3, #3
 80028e2:	4413      	add	r3, r2
 80028e4:	009b      	lsls	r3, r3, #2
 80028e6:	440b      	add	r3, r1
 80028e8:	3340      	adds	r3, #64	; 0x40
 80028ea:	2200      	movs	r2, #0
 80028ec:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80028ee:	7bfa      	ldrb	r2, [r7, #15]
 80028f0:	6879      	ldr	r1, [r7, #4]
 80028f2:	4613      	mov	r3, r2
 80028f4:	00db      	lsls	r3, r3, #3
 80028f6:	4413      	add	r3, r2
 80028f8:	009b      	lsls	r3, r3, #2
 80028fa:	440b      	add	r3, r1
 80028fc:	3348      	adds	r3, #72	; 0x48
 80028fe:	2200      	movs	r2, #0
 8002900:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002902:	7bfa      	ldrb	r2, [r7, #15]
 8002904:	6879      	ldr	r1, [r7, #4]
 8002906:	4613      	mov	r3, r2
 8002908:	00db      	lsls	r3, r3, #3
 800290a:	4413      	add	r3, r2
 800290c:	009b      	lsls	r3, r3, #2
 800290e:	440b      	add	r3, r1
 8002910:	334c      	adds	r3, #76	; 0x4c
 8002912:	2200      	movs	r2, #0
 8002914:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002916:	7bfa      	ldrb	r2, [r7, #15]
 8002918:	6879      	ldr	r1, [r7, #4]
 800291a:	4613      	mov	r3, r2
 800291c:	00db      	lsls	r3, r3, #3
 800291e:	4413      	add	r3, r2
 8002920:	009b      	lsls	r3, r3, #2
 8002922:	440b      	add	r3, r1
 8002924:	3354      	adds	r3, #84	; 0x54
 8002926:	2200      	movs	r2, #0
 8002928:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800292a:	7bfb      	ldrb	r3, [r7, #15]
 800292c:	3301      	adds	r3, #1
 800292e:	73fb      	strb	r3, [r7, #15]
 8002930:	7bfa      	ldrb	r2, [r7, #15]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	429a      	cmp	r2, r3
 8002938:	d3af      	bcc.n	800289a <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800293a:	2300      	movs	r3, #0
 800293c:	73fb      	strb	r3, [r7, #15]
 800293e:	e044      	b.n	80029ca <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002940:	7bfa      	ldrb	r2, [r7, #15]
 8002942:	6879      	ldr	r1, [r7, #4]
 8002944:	4613      	mov	r3, r2
 8002946:	00db      	lsls	r3, r3, #3
 8002948:	4413      	add	r3, r2
 800294a:	009b      	lsls	r3, r3, #2
 800294c:	440b      	add	r3, r1
 800294e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002952:	2200      	movs	r2, #0
 8002954:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002956:	7bfa      	ldrb	r2, [r7, #15]
 8002958:	6879      	ldr	r1, [r7, #4]
 800295a:	4613      	mov	r3, r2
 800295c:	00db      	lsls	r3, r3, #3
 800295e:	4413      	add	r3, r2
 8002960:	009b      	lsls	r3, r3, #2
 8002962:	440b      	add	r3, r1
 8002964:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002968:	7bfa      	ldrb	r2, [r7, #15]
 800296a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800296c:	7bfa      	ldrb	r2, [r7, #15]
 800296e:	6879      	ldr	r1, [r7, #4]
 8002970:	4613      	mov	r3, r2
 8002972:	00db      	lsls	r3, r3, #3
 8002974:	4413      	add	r3, r2
 8002976:	009b      	lsls	r3, r3, #2
 8002978:	440b      	add	r3, r1
 800297a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800297e:	2200      	movs	r2, #0
 8002980:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002982:	7bfa      	ldrb	r2, [r7, #15]
 8002984:	6879      	ldr	r1, [r7, #4]
 8002986:	4613      	mov	r3, r2
 8002988:	00db      	lsls	r3, r3, #3
 800298a:	4413      	add	r3, r2
 800298c:	009b      	lsls	r3, r3, #2
 800298e:	440b      	add	r3, r1
 8002990:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80029aa:	2200      	movs	r2, #0
 80029ac:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80029c0:	2200      	movs	r2, #0
 80029c2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80029c4:	7bfb      	ldrb	r3, [r7, #15]
 80029c6:	3301      	adds	r3, #1
 80029c8:	73fb      	strb	r3, [r7, #15]
 80029ca:	7bfa      	ldrb	r2, [r7, #15]
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	429a      	cmp	r2, r3
 80029d2:	d3b5      	bcc.n	8002940 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	603b      	str	r3, [r7, #0]
 80029da:	687e      	ldr	r6, [r7, #4]
 80029dc:	466d      	mov	r5, sp
 80029de:	f106 0410 	add.w	r4, r6, #16
 80029e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029e6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80029e8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80029ea:	e894 0003 	ldmia.w	r4, {r0, r1}
 80029ee:	e885 0003 	stmia.w	r5, {r0, r1}
 80029f2:	1d33      	adds	r3, r6, #4
 80029f4:	cb0e      	ldmia	r3, {r1, r2, r3}
 80029f6:	6838      	ldr	r0, [r7, #0]
 80029f8:	f001 ff06 	bl	8004808 <USB_DevInit>
 80029fc:	4603      	mov	r3, r0
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	d005      	beq.n	8002a0e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	2202      	movs	r2, #2
 8002a06:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a0a:	2301      	movs	r3, #1
 8002a0c:	e00d      	b.n	8002a2a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	2200      	movs	r2, #0
 8002a12:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	2201      	movs	r2, #1
 8002a1a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4618      	mov	r0, r3
 8002a24:	f003 f855 	bl	8005ad2 <USB_DevDisconnect>

  return HAL_OK;
 8002a28:	2300      	movs	r3, #0
}
 8002a2a:	4618      	mov	r0, r3
 8002a2c:	3714      	adds	r7, #20
 8002a2e:	46bd      	mov	sp, r7
 8002a30:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a32 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a32:	b580      	push	{r7, lr}
 8002a34:	b084      	sub	sp, #16
 8002a36:	af00      	add	r7, sp, #0
 8002a38:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a46:	2b01      	cmp	r3, #1
 8002a48:	d101      	bne.n	8002a4e <HAL_PCD_Start+0x1c>
 8002a4a:	2302      	movs	r3, #2
 8002a4c:	e020      	b.n	8002a90 <HAL_PCD_Start+0x5e>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2201      	movs	r2, #1
 8002a52:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d109      	bne.n	8002a72 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002a62:	2b01      	cmp	r3, #1
 8002a64:	d005      	beq.n	8002a72 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002a66:	68fb      	ldr	r3, [r7, #12]
 8002a68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a6a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f001 fe58 	bl	800472c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	681b      	ldr	r3, [r3, #0]
 8002a80:	4618      	mov	r0, r3
 8002a82:	f003 f805 	bl	8005a90 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a8e:	2300      	movs	r3, #0
}
 8002a90:	4618      	mov	r0, r3
 8002a92:	3710      	adds	r7, #16
 8002a94:	46bd      	mov	sp, r7
 8002a96:	bd80      	pop	{r7, pc}

08002a98 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002a98:	b590      	push	{r4, r7, lr}
 8002a9a:	b08d      	sub	sp, #52	; 0x34
 8002a9c:	af00      	add	r7, sp, #0
 8002a9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002aa6:	6a3b      	ldr	r3, [r7, #32]
 8002aa8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	681b      	ldr	r3, [r3, #0]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f003 f8c3 	bl	8005c3a <USB_GetMode>
 8002ab4:	4603      	mov	r3, r0
 8002ab6:	2b00      	cmp	r3, #0
 8002ab8:	f040 848a 	bne.w	80033d0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	4618      	mov	r0, r3
 8002ac2:	f003 f827 	bl	8005b14 <USB_ReadInterrupts>
 8002ac6:	4603      	mov	r3, r0
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	f000 8480 	beq.w	80033ce <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ad4:	689b      	ldr	r3, [r3, #8]
 8002ad6:	0a1b      	lsrs	r3, r3, #8
 8002ad8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	681b      	ldr	r3, [r3, #0]
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	f003 f814 	bl	8005b14 <USB_ReadInterrupts>
 8002aec:	4603      	mov	r3, r0
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b02      	cmp	r3, #2
 8002af4:	d107      	bne.n	8002b06 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	695a      	ldr	r2, [r3, #20]
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	f002 0202 	and.w	r2, r2, #2
 8002b04:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4618      	mov	r0, r3
 8002b0c:	f003 f802 	bl	8005b14 <USB_ReadInterrupts>
 8002b10:	4603      	mov	r3, r0
 8002b12:	f003 0310 	and.w	r3, r3, #16
 8002b16:	2b10      	cmp	r3, #16
 8002b18:	d161      	bne.n	8002bde <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	699a      	ldr	r2, [r3, #24]
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	f022 0210 	bic.w	r2, r2, #16
 8002b28:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b2a:	6a3b      	ldr	r3, [r7, #32]
 8002b2c:	6a1b      	ldr	r3, [r3, #32]
 8002b2e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b30:	69bb      	ldr	r3, [r7, #24]
 8002b32:	f003 020f 	and.w	r2, r3, #15
 8002b36:	4613      	mov	r3, r2
 8002b38:	00db      	lsls	r3, r3, #3
 8002b3a:	4413      	add	r3, r2
 8002b3c:	009b      	lsls	r3, r3, #2
 8002b3e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b42:	687a      	ldr	r2, [r7, #4]
 8002b44:	4413      	add	r3, r2
 8002b46:	3304      	adds	r3, #4
 8002b48:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002b4a:	69bb      	ldr	r3, [r7, #24]
 8002b4c:	0c5b      	lsrs	r3, r3, #17
 8002b4e:	f003 030f 	and.w	r3, r3, #15
 8002b52:	2b02      	cmp	r3, #2
 8002b54:	d124      	bne.n	8002ba0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002b56:	69ba      	ldr	r2, [r7, #24]
 8002b58:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d035      	beq.n	8002bce <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b62:	697b      	ldr	r3, [r7, #20]
 8002b64:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002b66:	69bb      	ldr	r3, [r7, #24]
 8002b68:	091b      	lsrs	r3, r3, #4
 8002b6a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002b6c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b70:	b29b      	uxth	r3, r3
 8002b72:	461a      	mov	r2, r3
 8002b74:	6a38      	ldr	r0, [r7, #32]
 8002b76:	f002 fe39 	bl	80057ec <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b7a:	697b      	ldr	r3, [r7, #20]
 8002b7c:	691a      	ldr	r2, [r3, #16]
 8002b7e:	69bb      	ldr	r3, [r7, #24]
 8002b80:	091b      	lsrs	r3, r3, #4
 8002b82:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b86:	441a      	add	r2, r3
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002b8c:	697b      	ldr	r3, [r7, #20]
 8002b8e:	6a1a      	ldr	r2, [r3, #32]
 8002b90:	69bb      	ldr	r3, [r7, #24]
 8002b92:	091b      	lsrs	r3, r3, #4
 8002b94:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002b98:	441a      	add	r2, r3
 8002b9a:	697b      	ldr	r3, [r7, #20]
 8002b9c:	621a      	str	r2, [r3, #32]
 8002b9e:	e016      	b.n	8002bce <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002ba0:	69bb      	ldr	r3, [r7, #24]
 8002ba2:	0c5b      	lsrs	r3, r3, #17
 8002ba4:	f003 030f 	and.w	r3, r3, #15
 8002ba8:	2b06      	cmp	r3, #6
 8002baa:	d110      	bne.n	8002bce <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002bb2:	2208      	movs	r2, #8
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	6a38      	ldr	r0, [r7, #32]
 8002bb8:	f002 fe18 	bl	80057ec <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	6a1a      	ldr	r2, [r3, #32]
 8002bc0:	69bb      	ldr	r3, [r7, #24]
 8002bc2:	091b      	lsrs	r3, r3, #4
 8002bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bc8:	441a      	add	r2, r3
 8002bca:	697b      	ldr	r3, [r7, #20]
 8002bcc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	699a      	ldr	r2, [r3, #24]
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f042 0210 	orr.w	r2, r2, #16
 8002bdc:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	4618      	mov	r0, r3
 8002be4:	f002 ff96 	bl	8005b14 <USB_ReadInterrupts>
 8002be8:	4603      	mov	r3, r0
 8002bea:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002bee:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002bf2:	f040 80a7 	bne.w	8002d44 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002bfa:	687b      	ldr	r3, [r7, #4]
 8002bfc:	681b      	ldr	r3, [r3, #0]
 8002bfe:	4618      	mov	r0, r3
 8002c00:	f002 ff9b 	bl	8005b3a <USB_ReadDevAllOutEpInterrupt>
 8002c04:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c06:	e099      	b.n	8002d3c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	f000 808e 	beq.w	8002d30 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c1a:	b2d2      	uxtb	r2, r2
 8002c1c:	4611      	mov	r1, r2
 8002c1e:	4618      	mov	r0, r3
 8002c20:	f002 ffbf 	bl	8005ba2 <USB_ReadDevOutEPInterrupt>
 8002c24:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c26:	693b      	ldr	r3, [r7, #16]
 8002c28:	f003 0301 	and.w	r3, r3, #1
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d00c      	beq.n	8002c4a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c32:	015a      	lsls	r2, r3, #5
 8002c34:	69fb      	ldr	r3, [r7, #28]
 8002c36:	4413      	add	r3, r2
 8002c38:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c3c:	461a      	mov	r2, r3
 8002c3e:	2301      	movs	r3, #1
 8002c40:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c42:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c44:	6878      	ldr	r0, [r7, #4]
 8002c46:	f000 feab 	bl	80039a0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002c4a:	693b      	ldr	r3, [r7, #16]
 8002c4c:	f003 0308 	and.w	r3, r3, #8
 8002c50:	2b00      	cmp	r3, #0
 8002c52:	d00c      	beq.n	8002c6e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002c54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c56:	015a      	lsls	r2, r3, #5
 8002c58:	69fb      	ldr	r3, [r7, #28]
 8002c5a:	4413      	add	r3, r2
 8002c5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c60:	461a      	mov	r2, r3
 8002c62:	2308      	movs	r3, #8
 8002c64:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002c66:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 ff81 	bl	8003b70 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002c6e:	693b      	ldr	r3, [r7, #16]
 8002c70:	f003 0310 	and.w	r3, r3, #16
 8002c74:	2b00      	cmp	r3, #0
 8002c76:	d008      	beq.n	8002c8a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c7a:	015a      	lsls	r2, r3, #5
 8002c7c:	69fb      	ldr	r3, [r7, #28]
 8002c7e:	4413      	add	r3, r2
 8002c80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c84:	461a      	mov	r2, r3
 8002c86:	2310      	movs	r3, #16
 8002c88:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002c8a:	693b      	ldr	r3, [r7, #16]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d030      	beq.n	8002cf6 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002c94:	6a3b      	ldr	r3, [r7, #32]
 8002c96:	695b      	ldr	r3, [r3, #20]
 8002c98:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c9c:	2b80      	cmp	r3, #128	; 0x80
 8002c9e:	d109      	bne.n	8002cb4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	69fa      	ldr	r2, [r7, #28]
 8002caa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cae:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002cb2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002cb4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002cb6:	4613      	mov	r3, r2
 8002cb8:	00db      	lsls	r3, r3, #3
 8002cba:	4413      	add	r3, r2
 8002cbc:	009b      	lsls	r3, r3, #2
 8002cbe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cc2:	687a      	ldr	r2, [r7, #4]
 8002cc4:	4413      	add	r3, r2
 8002cc6:	3304      	adds	r3, #4
 8002cc8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002cca:	697b      	ldr	r3, [r7, #20]
 8002ccc:	78db      	ldrb	r3, [r3, #3]
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d108      	bne.n	8002ce4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002cd2:	697b      	ldr	r3, [r7, #20]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002cd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cda:	b2db      	uxtb	r3, r3
 8002cdc:	4619      	mov	r1, r3
 8002cde:	6878      	ldr	r0, [r7, #4]
 8002ce0:	f004 ffd0 	bl	8007c84 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ce6:	015a      	lsls	r2, r3, #5
 8002ce8:	69fb      	ldr	r3, [r7, #28]
 8002cea:	4413      	add	r3, r2
 8002cec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cf0:	461a      	mov	r2, r3
 8002cf2:	2302      	movs	r3, #2
 8002cf4:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002cf6:	693b      	ldr	r3, [r7, #16]
 8002cf8:	f003 0320 	and.w	r3, r3, #32
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d008      	beq.n	8002d12 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d02:	015a      	lsls	r2, r3, #5
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	4413      	add	r3, r2
 8002d08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2320      	movs	r3, #32
 8002d10:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d12:	693b      	ldr	r3, [r7, #16]
 8002d14:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d009      	beq.n	8002d30 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d1e:	015a      	lsls	r2, r3, #5
 8002d20:	69fb      	ldr	r3, [r7, #28]
 8002d22:	4413      	add	r3, r2
 8002d24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d28:	461a      	mov	r2, r3
 8002d2a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d2e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	3301      	adds	r3, #1
 8002d34:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d36:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d3e:	2b00      	cmp	r3, #0
 8002d40:	f47f af62 	bne.w	8002c08 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f002 fee3 	bl	8005b14 <USB_ReadInterrupts>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d54:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002d58:	f040 80db 	bne.w	8002f12 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	681b      	ldr	r3, [r3, #0]
 8002d60:	4618      	mov	r0, r3
 8002d62:	f002 ff04 	bl	8005b6e <USB_ReadDevAllInEpInterrupt>
 8002d66:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002d68:	2300      	movs	r3, #0
 8002d6a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002d6c:	e0cd      	b.n	8002f0a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d70:	f003 0301 	and.w	r3, r3, #1
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	f000 80c2 	beq.w	8002efe <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d80:	b2d2      	uxtb	r2, r2
 8002d82:	4611      	mov	r1, r2
 8002d84:	4618      	mov	r0, r3
 8002d86:	f002 ff2a 	bl	8005bde <USB_ReadDevInEPInterrupt>
 8002d8a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002d8c:	693b      	ldr	r3, [r7, #16]
 8002d8e:	f003 0301 	and.w	r3, r3, #1
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d057      	beq.n	8002e46 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002d96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d98:	f003 030f 	and.w	r3, r3, #15
 8002d9c:	2201      	movs	r2, #1
 8002d9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002da2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002da4:	69fb      	ldr	r3, [r7, #28]
 8002da6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002daa:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	43db      	mvns	r3, r3
 8002db0:	69f9      	ldr	r1, [r7, #28]
 8002db2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002db6:	4013      	ands	r3, r2
 8002db8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002dba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002dbc:	015a      	lsls	r2, r3, #5
 8002dbe:	69fb      	ldr	r3, [r7, #28]
 8002dc0:	4413      	add	r3, r2
 8002dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002dc6:	461a      	mov	r2, r3
 8002dc8:	2301      	movs	r3, #1
 8002dca:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	691b      	ldr	r3, [r3, #16]
 8002dd0:	2b01      	cmp	r3, #1
 8002dd2:	d132      	bne.n	8002e3a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002dd4:	6879      	ldr	r1, [r7, #4]
 8002dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd8:	4613      	mov	r3, r2
 8002dda:	00db      	lsls	r3, r3, #3
 8002ddc:	4413      	add	r3, r2
 8002dde:	009b      	lsls	r3, r3, #2
 8002de0:	440b      	add	r3, r1
 8002de2:	334c      	adds	r3, #76	; 0x4c
 8002de4:	6819      	ldr	r1, [r3, #0]
 8002de6:	6878      	ldr	r0, [r7, #4]
 8002de8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dea:	4613      	mov	r3, r2
 8002dec:	00db      	lsls	r3, r3, #3
 8002dee:	4413      	add	r3, r2
 8002df0:	009b      	lsls	r3, r3, #2
 8002df2:	4403      	add	r3, r0
 8002df4:	3348      	adds	r3, #72	; 0x48
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	4419      	add	r1, r3
 8002dfa:	6878      	ldr	r0, [r7, #4]
 8002dfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dfe:	4613      	mov	r3, r2
 8002e00:	00db      	lsls	r3, r3, #3
 8002e02:	4413      	add	r3, r2
 8002e04:	009b      	lsls	r3, r3, #2
 8002e06:	4403      	add	r3, r0
 8002e08:	334c      	adds	r3, #76	; 0x4c
 8002e0a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d113      	bne.n	8002e3a <HAL_PCD_IRQHandler+0x3a2>
 8002e12:	6879      	ldr	r1, [r7, #4]
 8002e14:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e16:	4613      	mov	r3, r2
 8002e18:	00db      	lsls	r3, r3, #3
 8002e1a:	4413      	add	r3, r2
 8002e1c:	009b      	lsls	r3, r3, #2
 8002e1e:	440b      	add	r3, r1
 8002e20:	3354      	adds	r3, #84	; 0x54
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d108      	bne.n	8002e3a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6818      	ldr	r0, [r3, #0]
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e32:	461a      	mov	r2, r3
 8002e34:	2101      	movs	r1, #1
 8002e36:	f002 ff31 	bl	8005c9c <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e3c:	b2db      	uxtb	r3, r3
 8002e3e:	4619      	mov	r1, r3
 8002e40:	6878      	ldr	r0, [r7, #4]
 8002e42:	f004 fea4 	bl	8007b8e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e46:	693b      	ldr	r3, [r7, #16]
 8002e48:	f003 0308 	and.w	r3, r3, #8
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d008      	beq.n	8002e62 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e52:	015a      	lsls	r2, r3, #5
 8002e54:	69fb      	ldr	r3, [r7, #28]
 8002e56:	4413      	add	r3, r2
 8002e58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e5c:	461a      	mov	r2, r3
 8002e5e:	2308      	movs	r3, #8
 8002e60:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002e62:	693b      	ldr	r3, [r7, #16]
 8002e64:	f003 0310 	and.w	r3, r3, #16
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d008      	beq.n	8002e7e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002e6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e6e:	015a      	lsls	r2, r3, #5
 8002e70:	69fb      	ldr	r3, [r7, #28]
 8002e72:	4413      	add	r3, r2
 8002e74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e78:	461a      	mov	r2, r3
 8002e7a:	2310      	movs	r3, #16
 8002e7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002e7e:	693b      	ldr	r3, [r7, #16]
 8002e80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d008      	beq.n	8002e9a <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e8a:	015a      	lsls	r2, r3, #5
 8002e8c:	69fb      	ldr	r3, [r7, #28]
 8002e8e:	4413      	add	r3, r2
 8002e90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e94:	461a      	mov	r2, r3
 8002e96:	2340      	movs	r3, #64	; 0x40
 8002e98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002e9a:	693b      	ldr	r3, [r7, #16]
 8002e9c:	f003 0302 	and.w	r3, r3, #2
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d023      	beq.n	8002eec <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002ea4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ea6:	6a38      	ldr	r0, [r7, #32]
 8002ea8:	f001 fe12 	bl	8004ad0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002eac:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002eae:	4613      	mov	r3, r2
 8002eb0:	00db      	lsls	r3, r3, #3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	009b      	lsls	r3, r3, #2
 8002eb6:	3338      	adds	r3, #56	; 0x38
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	4413      	add	r3, r2
 8002ebc:	3304      	adds	r3, #4
 8002ebe:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	78db      	ldrb	r3, [r3, #3]
 8002ec4:	2b01      	cmp	r3, #1
 8002ec6:	d108      	bne.n	8002eda <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	2200      	movs	r2, #0
 8002ecc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002ece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	4619      	mov	r1, r3
 8002ed4:	6878      	ldr	r0, [r7, #4]
 8002ed6:	f004 fee7 	bl	8007ca8 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002edc:	015a      	lsls	r2, r3, #5
 8002ede:	69fb      	ldr	r3, [r7, #28]
 8002ee0:	4413      	add	r3, r2
 8002ee2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	2302      	movs	r3, #2
 8002eea:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002eec:	693b      	ldr	r3, [r7, #16]
 8002eee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d003      	beq.n	8002efe <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002ef6:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002ef8:	6878      	ldr	r0, [r7, #4]
 8002efa:	f000 fcc3 	bl	8003884 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f00:	3301      	adds	r3, #1
 8002f02:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f06:	085b      	lsrs	r3, r3, #1
 8002f08:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f0c:	2b00      	cmp	r3, #0
 8002f0e:	f47f af2e 	bne.w	8002d6e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f002 fdfc 	bl	8005b14 <USB_ReadInterrupts>
 8002f1c:	4603      	mov	r3, r0
 8002f1e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f22:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f26:	d122      	bne.n	8002f6e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f28:	69fb      	ldr	r3, [r7, #28]
 8002f2a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f2e:	685b      	ldr	r3, [r3, #4]
 8002f30:	69fa      	ldr	r2, [r7, #28]
 8002f32:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f36:	f023 0301 	bic.w	r3, r3, #1
 8002f3a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002f42:	2b01      	cmp	r3, #1
 8002f44:	d108      	bne.n	8002f58 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	2200      	movs	r2, #0
 8002f4a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002f4e:	2100      	movs	r1, #0
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 feab 	bl	8003cac <HAL_PCDEx_LPM_Callback>
 8002f56:	e002      	b.n	8002f5e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002f58:	6878      	ldr	r0, [r7, #4]
 8002f5a:	f004 fe85 	bl	8007c68 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	695a      	ldr	r2, [r3, #20]
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002f6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	4618      	mov	r0, r3
 8002f74:	f002 fdce 	bl	8005b14 <USB_ReadInterrupts>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002f7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f82:	d112      	bne.n	8002faa <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002f84:	69fb      	ldr	r3, [r7, #28]
 8002f86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f003 0301 	and.w	r3, r3, #1
 8002f90:	2b01      	cmp	r3, #1
 8002f92:	d102      	bne.n	8002f9a <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002f94:	6878      	ldr	r0, [r7, #4]
 8002f96:	f004 fe41 	bl	8007c1c <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	695a      	ldr	r2, [r3, #20]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002fa8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f002 fdb0 	bl	8005b14 <USB_ReadInterrupts>
 8002fb4:	4603      	mov	r3, r0
 8002fb6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002fba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002fbe:	f040 80b7 	bne.w	8003130 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	69fa      	ldr	r2, [r7, #28]
 8002fcc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002fd0:	f023 0301 	bic.w	r3, r3, #1
 8002fd4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	2110      	movs	r1, #16
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f001 fd77 	bl	8004ad0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002fe6:	e046      	b.n	8003076 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002fe8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002fea:	015a      	lsls	r2, r3, #5
 8002fec:	69fb      	ldr	r3, [r7, #28]
 8002fee:	4413      	add	r3, r2
 8002ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ff4:	461a      	mov	r2, r3
 8002ff6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002ffa:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002ffe:	015a      	lsls	r2, r3, #5
 8003000:	69fb      	ldr	r3, [r7, #28]
 8003002:	4413      	add	r3, r2
 8003004:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800300c:	0151      	lsls	r1, r2, #5
 800300e:	69fa      	ldr	r2, [r7, #28]
 8003010:	440a      	add	r2, r1
 8003012:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003016:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800301a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 800301c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800301e:	015a      	lsls	r2, r3, #5
 8003020:	69fb      	ldr	r3, [r7, #28]
 8003022:	4413      	add	r3, r2
 8003024:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003028:	461a      	mov	r2, r3
 800302a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800302e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003030:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003032:	015a      	lsls	r2, r3, #5
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	4413      	add	r3, r2
 8003038:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800303c:	681b      	ldr	r3, [r3, #0]
 800303e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003040:	0151      	lsls	r1, r2, #5
 8003042:	69fa      	ldr	r2, [r7, #28]
 8003044:	440a      	add	r2, r1
 8003046:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800304a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800304e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003050:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003052:	015a      	lsls	r2, r3, #5
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	4413      	add	r3, r2
 8003058:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003060:	0151      	lsls	r1, r2, #5
 8003062:	69fa      	ldr	r2, [r7, #28]
 8003064:	440a      	add	r2, r1
 8003066:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800306a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800306e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8003070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003072:	3301      	adds	r3, #1
 8003074:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800307c:	429a      	cmp	r2, r3
 800307e:	d3b3      	bcc.n	8002fe8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003086:	69db      	ldr	r3, [r3, #28]
 8003088:	69fa      	ldr	r2, [r7, #28]
 800308a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800308e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8003092:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003098:	2b00      	cmp	r3, #0
 800309a:	d016      	beq.n	80030ca <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800309c:	69fb      	ldr	r3, [r7, #28]
 800309e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030a6:	69fa      	ldr	r2, [r7, #28]
 80030a8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030ac:	f043 030b 	orr.w	r3, r3, #11
 80030b0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 80030b4:	69fb      	ldr	r3, [r7, #28]
 80030b6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030bc:	69fa      	ldr	r2, [r7, #28]
 80030be:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030c2:	f043 030b 	orr.w	r3, r3, #11
 80030c6:	6453      	str	r3, [r2, #68]	; 0x44
 80030c8:	e015      	b.n	80030f6 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80030ca:	69fb      	ldr	r3, [r7, #28]
 80030cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030d0:	695b      	ldr	r3, [r3, #20]
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030d8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80030dc:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80030e0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80030e2:	69fb      	ldr	r3, [r7, #28]
 80030e4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030f0:	f043 030b 	orr.w	r3, r3, #11
 80030f4:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80030f6:	69fb      	ldr	r3, [r7, #28]
 80030f8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003104:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003108:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	6818      	ldr	r0, [r3, #0]
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	691b      	ldr	r3, [r3, #16]
 8003112:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 800311a:	461a      	mov	r2, r3
 800311c:	f002 fdbe 	bl	8005c9c <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	695a      	ldr	r2, [r3, #20]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 800312e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	4618      	mov	r0, r3
 8003136:	f002 fced 	bl	8005b14 <USB_ReadInterrupts>
 800313a:	4603      	mov	r3, r0
 800313c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003140:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003144:	d124      	bne.n	8003190 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	4618      	mov	r0, r3
 800314c:	f002 fd83 	bl	8005c56 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f001 fd38 	bl	8004bca <USB_GetDevSpeed>
 800315a:	4603      	mov	r3, r0
 800315c:	461a      	mov	r2, r3
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681c      	ldr	r4, [r3, #0]
 8003166:	f001 f9d1 	bl	800450c <HAL_RCC_GetHCLKFreq>
 800316a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8003170:	b2db      	uxtb	r3, r3
 8003172:	461a      	mov	r2, r3
 8003174:	4620      	mov	r0, r4
 8003176:	f001 fa37 	bl	80045e8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f004 fd2f 	bl	8007bde <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	695a      	ldr	r2, [r3, #20]
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 800318e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	4618      	mov	r0, r3
 8003196:	f002 fcbd 	bl	8005b14 <USB_ReadInterrupts>
 800319a:	4603      	mov	r3, r0
 800319c:	f003 0308 	and.w	r3, r3, #8
 80031a0:	2b08      	cmp	r3, #8
 80031a2:	d10a      	bne.n	80031ba <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031a4:	6878      	ldr	r0, [r7, #4]
 80031a6:	f004 fd0c 	bl	8007bc2 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	695a      	ldr	r2, [r3, #20]
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f002 0208 	and.w	r2, r2, #8
 80031b8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f002 fca8 	bl	8005b14 <USB_ReadInterrupts>
 80031c4:	4603      	mov	r3, r0
 80031c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031ca:	2b80      	cmp	r3, #128	; 0x80
 80031cc:	d122      	bne.n	8003214 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 80031ce:	6a3b      	ldr	r3, [r7, #32]
 80031d0:	699b      	ldr	r3, [r3, #24]
 80031d2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80031d6:	6a3b      	ldr	r3, [r7, #32]
 80031d8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80031da:	2301      	movs	r3, #1
 80031dc:	627b      	str	r3, [r7, #36]	; 0x24
 80031de:	e014      	b.n	800320a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80031e0:	6879      	ldr	r1, [r7, #4]
 80031e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80031e4:	4613      	mov	r3, r2
 80031e6:	00db      	lsls	r3, r3, #3
 80031e8:	4413      	add	r3, r2
 80031ea:	009b      	lsls	r3, r3, #2
 80031ec:	440b      	add	r3, r1
 80031ee:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80031f2:	781b      	ldrb	r3, [r3, #0]
 80031f4:	2b01      	cmp	r3, #1
 80031f6:	d105      	bne.n	8003204 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80031f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80031fa:	b2db      	uxtb	r3, r3
 80031fc:	4619      	mov	r1, r3
 80031fe:	6878      	ldr	r0, [r7, #4]
 8003200:	f000 fb0f 	bl	8003822 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003206:	3301      	adds	r3, #1
 8003208:	627b      	str	r3, [r7, #36]	; 0x24
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	685b      	ldr	r3, [r3, #4]
 800320e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003210:	429a      	cmp	r2, r3
 8003212:	d3e5      	bcc.n	80031e0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	4618      	mov	r0, r3
 800321a:	f002 fc7b 	bl	8005b14 <USB_ReadInterrupts>
 800321e:	4603      	mov	r3, r0
 8003220:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003224:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003228:	d13b      	bne.n	80032a2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800322a:	2301      	movs	r3, #1
 800322c:	627b      	str	r3, [r7, #36]	; 0x24
 800322e:	e02b      	b.n	8003288 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003232:	015a      	lsls	r2, r3, #5
 8003234:	69fb      	ldr	r3, [r7, #28]
 8003236:	4413      	add	r3, r2
 8003238:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003244:	4613      	mov	r3, r2
 8003246:	00db      	lsls	r3, r3, #3
 8003248:	4413      	add	r3, r2
 800324a:	009b      	lsls	r3, r3, #2
 800324c:	440b      	add	r3, r1
 800324e:	3340      	adds	r3, #64	; 0x40
 8003250:	781b      	ldrb	r3, [r3, #0]
 8003252:	2b01      	cmp	r3, #1
 8003254:	d115      	bne.n	8003282 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8003256:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003258:	2b00      	cmp	r3, #0
 800325a:	da12      	bge.n	8003282 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 800325c:	6879      	ldr	r1, [r7, #4]
 800325e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003260:	4613      	mov	r3, r2
 8003262:	00db      	lsls	r3, r3, #3
 8003264:	4413      	add	r3, r2
 8003266:	009b      	lsls	r3, r3, #2
 8003268:	440b      	add	r3, r1
 800326a:	333f      	adds	r3, #63	; 0x3f
 800326c:	2201      	movs	r2, #1
 800326e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8003270:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003272:	b2db      	uxtb	r3, r3
 8003274:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8003278:	b2db      	uxtb	r3, r3
 800327a:	4619      	mov	r1, r3
 800327c:	6878      	ldr	r0, [r7, #4]
 800327e:	f000 fad0 	bl	8003822 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	3301      	adds	r3, #1
 8003286:	627b      	str	r3, [r7, #36]	; 0x24
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	685b      	ldr	r3, [r3, #4]
 800328c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800328e:	429a      	cmp	r2, r3
 8003290:	d3ce      	bcc.n	8003230 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	695a      	ldr	r2, [r3, #20]
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80032a0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f002 fc34 	bl	8005b14 <USB_ReadInterrupts>
 80032ac:	4603      	mov	r3, r0
 80032ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80032b2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80032b6:	d155      	bne.n	8003364 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032b8:	2301      	movs	r3, #1
 80032ba:	627b      	str	r3, [r7, #36]	; 0x24
 80032bc:	e045      	b.n	800334a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 80032be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032c0:	015a      	lsls	r2, r3, #5
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	4413      	add	r3, r2
 80032c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032ce:	6879      	ldr	r1, [r7, #4]
 80032d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032d2:	4613      	mov	r3, r2
 80032d4:	00db      	lsls	r3, r3, #3
 80032d6:	4413      	add	r3, r2
 80032d8:	009b      	lsls	r3, r3, #2
 80032da:	440b      	add	r3, r1
 80032dc:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80032e0:	781b      	ldrb	r3, [r3, #0]
 80032e2:	2b01      	cmp	r3, #1
 80032e4:	d12e      	bne.n	8003344 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032e6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	da2b      	bge.n	8003344 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80032ec:	69bb      	ldr	r3, [r7, #24]
 80032ee:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80032f8:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d121      	bne.n	8003344 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003300:	6879      	ldr	r1, [r7, #4]
 8003302:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003304:	4613      	mov	r3, r2
 8003306:	00db      	lsls	r3, r3, #3
 8003308:	4413      	add	r3, r2
 800330a:	009b      	lsls	r3, r3, #2
 800330c:	440b      	add	r3, r1
 800330e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003316:	6a3b      	ldr	r3, [r7, #32]
 8003318:	699b      	ldr	r3, [r3, #24]
 800331a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800331e:	6a3b      	ldr	r3, [r7, #32]
 8003320:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003322:	6a3b      	ldr	r3, [r7, #32]
 8003324:	695b      	ldr	r3, [r3, #20]
 8003326:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800332a:	2b00      	cmp	r3, #0
 800332c:	d10a      	bne.n	8003344 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800332e:	69fb      	ldr	r3, [r7, #28]
 8003330:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	69fa      	ldr	r2, [r7, #28]
 8003338:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800333c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003340:	6053      	str	r3, [r2, #4]
            break;
 8003342:	e007      	b.n	8003354 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003344:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003346:	3301      	adds	r3, #1
 8003348:	627b      	str	r3, [r7, #36]	; 0x24
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003350:	429a      	cmp	r2, r3
 8003352:	d3b4      	bcc.n	80032be <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	681b      	ldr	r3, [r3, #0]
 8003358:	695a      	ldr	r2, [r3, #20]
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003362:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	4618      	mov	r0, r3
 800336a:	f002 fbd3 	bl	8005b14 <USB_ReadInterrupts>
 800336e:	4603      	mov	r3, r0
 8003370:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003374:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003378:	d10a      	bne.n	8003390 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800337a:	6878      	ldr	r0, [r7, #4]
 800337c:	f004 fca6 	bl	8007ccc <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	695a      	ldr	r2, [r3, #20]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800338e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f002 fbbd 	bl	8005b14 <USB_ReadInterrupts>
 800339a:	4603      	mov	r3, r0
 800339c:	f003 0304 	and.w	r3, r3, #4
 80033a0:	2b04      	cmp	r3, #4
 80033a2:	d115      	bne.n	80033d0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	681b      	ldr	r3, [r3, #0]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80033ac:	69bb      	ldr	r3, [r7, #24]
 80033ae:	f003 0304 	and.w	r3, r3, #4
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80033b6:	6878      	ldr	r0, [r7, #4]
 80033b8:	f004 fc96 	bl	8007ce8 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	6859      	ldr	r1, [r3, #4]
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	430a      	orrs	r2, r1
 80033ca:	605a      	str	r2, [r3, #4]
 80033cc:	e000      	b.n	80033d0 <HAL_PCD_IRQHandler+0x938>
      return;
 80033ce:	bf00      	nop
    }
  }
}
 80033d0:	3734      	adds	r7, #52	; 0x34
 80033d2:	46bd      	mov	sp, r7
 80033d4:	bd90      	pop	{r4, r7, pc}

080033d6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80033d6:	b580      	push	{r7, lr}
 80033d8:	b082      	sub	sp, #8
 80033da:	af00      	add	r7, sp, #0
 80033dc:	6078      	str	r0, [r7, #4]
 80033de:	460b      	mov	r3, r1
 80033e0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80033e8:	2b01      	cmp	r3, #1
 80033ea:	d101      	bne.n	80033f0 <HAL_PCD_SetAddress+0x1a>
 80033ec:	2302      	movs	r3, #2
 80033ee:	e013      	b.n	8003418 <HAL_PCD_SetAddress+0x42>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	2201      	movs	r2, #1
 80033f4:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	78fa      	ldrb	r2, [r7, #3]
 80033fc:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	4611      	mov	r1, r2
 8003408:	4618      	mov	r0, r3
 800340a:	f002 fb1b 	bl	8005a44 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	2200      	movs	r2, #0
 8003412:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003416:	2300      	movs	r3, #0
}
 8003418:	4618      	mov	r0, r3
 800341a:	3708      	adds	r7, #8
 800341c:	46bd      	mov	sp, r7
 800341e:	bd80      	pop	{r7, pc}

08003420 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003420:	b580      	push	{r7, lr}
 8003422:	b084      	sub	sp, #16
 8003424:	af00      	add	r7, sp, #0
 8003426:	6078      	str	r0, [r7, #4]
 8003428:	4608      	mov	r0, r1
 800342a:	4611      	mov	r1, r2
 800342c:	461a      	mov	r2, r3
 800342e:	4603      	mov	r3, r0
 8003430:	70fb      	strb	r3, [r7, #3]
 8003432:	460b      	mov	r3, r1
 8003434:	803b      	strh	r3, [r7, #0]
 8003436:	4613      	mov	r3, r2
 8003438:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800343a:	2300      	movs	r3, #0
 800343c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800343e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003442:	2b00      	cmp	r3, #0
 8003444:	da0f      	bge.n	8003466 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003446:	78fb      	ldrb	r3, [r7, #3]
 8003448:	f003 020f 	and.w	r2, r3, #15
 800344c:	4613      	mov	r3, r2
 800344e:	00db      	lsls	r3, r3, #3
 8003450:	4413      	add	r3, r2
 8003452:	009b      	lsls	r3, r3, #2
 8003454:	3338      	adds	r3, #56	; 0x38
 8003456:	687a      	ldr	r2, [r7, #4]
 8003458:	4413      	add	r3, r2
 800345a:	3304      	adds	r3, #4
 800345c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	2201      	movs	r2, #1
 8003462:	705a      	strb	r2, [r3, #1]
 8003464:	e00f      	b.n	8003486 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003466:	78fb      	ldrb	r3, [r7, #3]
 8003468:	f003 020f 	and.w	r2, r3, #15
 800346c:	4613      	mov	r3, r2
 800346e:	00db      	lsls	r3, r3, #3
 8003470:	4413      	add	r3, r2
 8003472:	009b      	lsls	r3, r3, #2
 8003474:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003478:	687a      	ldr	r2, [r7, #4]
 800347a:	4413      	add	r3, r2
 800347c:	3304      	adds	r3, #4
 800347e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003486:	78fb      	ldrb	r3, [r7, #3]
 8003488:	f003 030f 	and.w	r3, r3, #15
 800348c:	b2da      	uxtb	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8003492:	883a      	ldrh	r2, [r7, #0]
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	78ba      	ldrb	r2, [r7, #2]
 800349c:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	785b      	ldrb	r3, [r3, #1]
 80034a2:	2b00      	cmp	r3, #0
 80034a4:	d004      	beq.n	80034b0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	781b      	ldrb	r3, [r3, #0]
 80034aa:	b29a      	uxth	r2, r3
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80034b0:	78bb      	ldrb	r3, [r7, #2]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d102      	bne.n	80034bc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2200      	movs	r2, #0
 80034ba:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d101      	bne.n	80034ca <HAL_PCD_EP_Open+0xaa>
 80034c6:	2302      	movs	r3, #2
 80034c8:	e00e      	b.n	80034e8 <HAL_PCD_EP_Open+0xc8>
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	2201      	movs	r2, #1
 80034ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68f9      	ldr	r1, [r7, #12]
 80034d8:	4618      	mov	r0, r3
 80034da:	f001 fb9b 	bl	8004c14 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80034e6:	7afb      	ldrb	r3, [r7, #11]
}
 80034e8:	4618      	mov	r0, r3
 80034ea:	3710      	adds	r7, #16
 80034ec:	46bd      	mov	sp, r7
 80034ee:	bd80      	pop	{r7, pc}

080034f0 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b084      	sub	sp, #16
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
 80034f8:	460b      	mov	r3, r1
 80034fa:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80034fc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003500:	2b00      	cmp	r3, #0
 8003502:	da0f      	bge.n	8003524 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003504:	78fb      	ldrb	r3, [r7, #3]
 8003506:	f003 020f 	and.w	r2, r3, #15
 800350a:	4613      	mov	r3, r2
 800350c:	00db      	lsls	r3, r3, #3
 800350e:	4413      	add	r3, r2
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	3338      	adds	r3, #56	; 0x38
 8003514:	687a      	ldr	r2, [r7, #4]
 8003516:	4413      	add	r3, r2
 8003518:	3304      	adds	r3, #4
 800351a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	2201      	movs	r2, #1
 8003520:	705a      	strb	r2, [r3, #1]
 8003522:	e00f      	b.n	8003544 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003524:	78fb      	ldrb	r3, [r7, #3]
 8003526:	f003 020f 	and.w	r2, r3, #15
 800352a:	4613      	mov	r3, r2
 800352c:	00db      	lsls	r3, r3, #3
 800352e:	4413      	add	r3, r2
 8003530:	009b      	lsls	r3, r3, #2
 8003532:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4413      	add	r3, r2
 800353a:	3304      	adds	r3, #4
 800353c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800353e:	68fb      	ldr	r3, [r7, #12]
 8003540:	2200      	movs	r2, #0
 8003542:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003544:	78fb      	ldrb	r3, [r7, #3]
 8003546:	f003 030f 	and.w	r3, r3, #15
 800354a:	b2da      	uxtb	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003556:	2b01      	cmp	r3, #1
 8003558:	d101      	bne.n	800355e <HAL_PCD_EP_Close+0x6e>
 800355a:	2302      	movs	r3, #2
 800355c:	e00e      	b.n	800357c <HAL_PCD_EP_Close+0x8c>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2201      	movs	r2, #1
 8003562:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	68f9      	ldr	r1, [r7, #12]
 800356c:	4618      	mov	r0, r3
 800356e:	f001 fbd9 	bl	8004d24 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	2200      	movs	r2, #0
 8003576:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	3710      	adds	r7, #16
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}

08003584 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003584:	b580      	push	{r7, lr}
 8003586:	b086      	sub	sp, #24
 8003588:	af00      	add	r7, sp, #0
 800358a:	60f8      	str	r0, [r7, #12]
 800358c:	607a      	str	r2, [r7, #4]
 800358e:	603b      	str	r3, [r7, #0]
 8003590:	460b      	mov	r3, r1
 8003592:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003594:	7afb      	ldrb	r3, [r7, #11]
 8003596:	f003 020f 	and.w	r2, r3, #15
 800359a:	4613      	mov	r3, r2
 800359c:	00db      	lsls	r3, r3, #3
 800359e:	4413      	add	r3, r2
 80035a0:	009b      	lsls	r3, r3, #2
 80035a2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035a6:	68fa      	ldr	r2, [r7, #12]
 80035a8:	4413      	add	r3, r2
 80035aa:	3304      	adds	r3, #4
 80035ac:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80035ae:	697b      	ldr	r3, [r7, #20]
 80035b0:	687a      	ldr	r2, [r7, #4]
 80035b2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80035b4:	697b      	ldr	r3, [r7, #20]
 80035b6:	683a      	ldr	r2, [r7, #0]
 80035b8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80035ba:	697b      	ldr	r3, [r7, #20]
 80035bc:	2200      	movs	r2, #0
 80035be:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	2200      	movs	r2, #0
 80035c4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80035c6:	7afb      	ldrb	r3, [r7, #11]
 80035c8:	f003 030f 	and.w	r3, r3, #15
 80035cc:	b2da      	uxtb	r2, r3
 80035ce:	697b      	ldr	r3, [r7, #20]
 80035d0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80035d2:	68fb      	ldr	r3, [r7, #12]
 80035d4:	691b      	ldr	r3, [r3, #16]
 80035d6:	2b01      	cmp	r3, #1
 80035d8:	d102      	bne.n	80035e0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80035da:	687a      	ldr	r2, [r7, #4]
 80035dc:	697b      	ldr	r3, [r7, #20]
 80035de:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80035e0:	7afb      	ldrb	r3, [r7, #11]
 80035e2:	f003 030f 	and.w	r3, r3, #15
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d109      	bne.n	80035fe <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	6818      	ldr	r0, [r3, #0]
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	691b      	ldr	r3, [r3, #16]
 80035f2:	b2db      	uxtb	r3, r3
 80035f4:	461a      	mov	r2, r3
 80035f6:	6979      	ldr	r1, [r7, #20]
 80035f8:	f001 feb8 	bl	800536c <USB_EP0StartXfer>
 80035fc:	e008      	b.n	8003610 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	6818      	ldr	r0, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	691b      	ldr	r3, [r3, #16]
 8003606:	b2db      	uxtb	r3, r3
 8003608:	461a      	mov	r2, r3
 800360a:	6979      	ldr	r1, [r7, #20]
 800360c:	f001 fc66 	bl	8004edc <USB_EPStartXfer>
  }

  return HAL_OK;
 8003610:	2300      	movs	r3, #0
}
 8003612:	4618      	mov	r0, r3
 8003614:	3718      	adds	r7, #24
 8003616:	46bd      	mov	sp, r7
 8003618:	bd80      	pop	{r7, pc}

0800361a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800361a:	b580      	push	{r7, lr}
 800361c:	b086      	sub	sp, #24
 800361e:	af00      	add	r7, sp, #0
 8003620:	60f8      	str	r0, [r7, #12]
 8003622:	607a      	str	r2, [r7, #4]
 8003624:	603b      	str	r3, [r7, #0]
 8003626:	460b      	mov	r3, r1
 8003628:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800362a:	7afb      	ldrb	r3, [r7, #11]
 800362c:	f003 020f 	and.w	r2, r3, #15
 8003630:	4613      	mov	r3, r2
 8003632:	00db      	lsls	r3, r3, #3
 8003634:	4413      	add	r3, r2
 8003636:	009b      	lsls	r3, r3, #2
 8003638:	3338      	adds	r3, #56	; 0x38
 800363a:	68fa      	ldr	r2, [r7, #12]
 800363c:	4413      	add	r3, r2
 800363e:	3304      	adds	r3, #4
 8003640:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003642:	697b      	ldr	r3, [r7, #20]
 8003644:	687a      	ldr	r2, [r7, #4]
 8003646:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003648:	697b      	ldr	r3, [r7, #20]
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800364e:	697b      	ldr	r3, [r7, #20]
 8003650:	2200      	movs	r2, #0
 8003652:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003654:	697b      	ldr	r3, [r7, #20]
 8003656:	2201      	movs	r2, #1
 8003658:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800365a:	7afb      	ldrb	r3, [r7, #11]
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	b2da      	uxtb	r2, r3
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	691b      	ldr	r3, [r3, #16]
 800366a:	2b01      	cmp	r3, #1
 800366c:	d102      	bne.n	8003674 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	697b      	ldr	r3, [r7, #20]
 8003672:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003674:	7afb      	ldrb	r3, [r7, #11]
 8003676:	f003 030f 	and.w	r3, r3, #15
 800367a:	2b00      	cmp	r3, #0
 800367c:	d109      	bne.n	8003692 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	6818      	ldr	r0, [r3, #0]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	691b      	ldr	r3, [r3, #16]
 8003686:	b2db      	uxtb	r3, r3
 8003688:	461a      	mov	r2, r3
 800368a:	6979      	ldr	r1, [r7, #20]
 800368c:	f001 fe6e 	bl	800536c <USB_EP0StartXfer>
 8003690:	e008      	b.n	80036a4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	6818      	ldr	r0, [r3, #0]
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	691b      	ldr	r3, [r3, #16]
 800369a:	b2db      	uxtb	r3, r3
 800369c:	461a      	mov	r2, r3
 800369e:	6979      	ldr	r1, [r7, #20]
 80036a0:	f001 fc1c 	bl	8004edc <USB_EPStartXfer>
  }

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3718      	adds	r7, #24
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}

080036ae <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80036ae:	b580      	push	{r7, lr}
 80036b0:	b084      	sub	sp, #16
 80036b2:	af00      	add	r7, sp, #0
 80036b4:	6078      	str	r0, [r7, #4]
 80036b6:	460b      	mov	r3, r1
 80036b8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80036ba:	78fb      	ldrb	r3, [r7, #3]
 80036bc:	f003 020f 	and.w	r2, r3, #15
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	429a      	cmp	r2, r3
 80036c6:	d901      	bls.n	80036cc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80036c8:	2301      	movs	r3, #1
 80036ca:	e050      	b.n	800376e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80036cc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	da0f      	bge.n	80036f4 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80036d4:	78fb      	ldrb	r3, [r7, #3]
 80036d6:	f003 020f 	and.w	r2, r3, #15
 80036da:	4613      	mov	r3, r2
 80036dc:	00db      	lsls	r3, r3, #3
 80036de:	4413      	add	r3, r2
 80036e0:	009b      	lsls	r3, r3, #2
 80036e2:	3338      	adds	r3, #56	; 0x38
 80036e4:	687a      	ldr	r2, [r7, #4]
 80036e6:	4413      	add	r3, r2
 80036e8:	3304      	adds	r3, #4
 80036ea:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2201      	movs	r2, #1
 80036f0:	705a      	strb	r2, [r3, #1]
 80036f2:	e00d      	b.n	8003710 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80036f4:	78fa      	ldrb	r2, [r7, #3]
 80036f6:	4613      	mov	r3, r2
 80036f8:	00db      	lsls	r3, r3, #3
 80036fa:	4413      	add	r3, r2
 80036fc:	009b      	lsls	r3, r3, #2
 80036fe:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003702:	687a      	ldr	r2, [r7, #4]
 8003704:	4413      	add	r3, r2
 8003706:	3304      	adds	r3, #4
 8003708:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	2200      	movs	r2, #0
 800370e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	2201      	movs	r2, #1
 8003714:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003716:	78fb      	ldrb	r3, [r7, #3]
 8003718:	f003 030f 	and.w	r3, r3, #15
 800371c:	b2da      	uxtb	r2, r3
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003728:	2b01      	cmp	r3, #1
 800372a:	d101      	bne.n	8003730 <HAL_PCD_EP_SetStall+0x82>
 800372c:	2302      	movs	r3, #2
 800372e:	e01e      	b.n	800376e <HAL_PCD_EP_SetStall+0xc0>
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	2201      	movs	r2, #1
 8003734:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	68f9      	ldr	r1, [r7, #12]
 800373e:	4618      	mov	r0, r3
 8003740:	f002 f8ac 	bl	800589c <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003744:	78fb      	ldrb	r3, [r7, #3]
 8003746:	f003 030f 	and.w	r3, r3, #15
 800374a:	2b00      	cmp	r3, #0
 800374c:	d10a      	bne.n	8003764 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800374e:	687b      	ldr	r3, [r7, #4]
 8003750:	6818      	ldr	r0, [r3, #0]
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	691b      	ldr	r3, [r3, #16]
 8003756:	b2d9      	uxtb	r1, r3
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800375e:	461a      	mov	r2, r3
 8003760:	f002 fa9c 	bl	8005c9c <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800376c:	2300      	movs	r3, #0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3710      	adds	r7, #16
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}

08003776 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003776:	b580      	push	{r7, lr}
 8003778:	b084      	sub	sp, #16
 800377a:	af00      	add	r7, sp, #0
 800377c:	6078      	str	r0, [r7, #4]
 800377e:	460b      	mov	r3, r1
 8003780:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	f003 020f 	and.w	r2, r3, #15
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	429a      	cmp	r2, r3
 800378e:	d901      	bls.n	8003794 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e042      	b.n	800381a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003794:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003798:	2b00      	cmp	r3, #0
 800379a:	da0f      	bge.n	80037bc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800379c:	78fb      	ldrb	r3, [r7, #3]
 800379e:	f003 020f 	and.w	r2, r3, #15
 80037a2:	4613      	mov	r3, r2
 80037a4:	00db      	lsls	r3, r3, #3
 80037a6:	4413      	add	r3, r2
 80037a8:	009b      	lsls	r3, r3, #2
 80037aa:	3338      	adds	r3, #56	; 0x38
 80037ac:	687a      	ldr	r2, [r7, #4]
 80037ae:	4413      	add	r3, r2
 80037b0:	3304      	adds	r3, #4
 80037b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	2201      	movs	r2, #1
 80037b8:	705a      	strb	r2, [r3, #1]
 80037ba:	e00f      	b.n	80037dc <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80037bc:	78fb      	ldrb	r3, [r7, #3]
 80037be:	f003 020f 	and.w	r2, r3, #15
 80037c2:	4613      	mov	r3, r2
 80037c4:	00db      	lsls	r3, r3, #3
 80037c6:	4413      	add	r3, r2
 80037c8:	009b      	lsls	r3, r3, #2
 80037ca:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80037ce:	687a      	ldr	r2, [r7, #4]
 80037d0:	4413      	add	r3, r2
 80037d2:	3304      	adds	r3, #4
 80037d4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	2200      	movs	r2, #0
 80037da:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	2200      	movs	r2, #0
 80037e0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80037e2:	78fb      	ldrb	r3, [r7, #3]
 80037e4:	f003 030f 	and.w	r3, r3, #15
 80037e8:	b2da      	uxtb	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80037f4:	2b01      	cmp	r3, #1
 80037f6:	d101      	bne.n	80037fc <HAL_PCD_EP_ClrStall+0x86>
 80037f8:	2302      	movs	r3, #2
 80037fa:	e00e      	b.n	800381a <HAL_PCD_EP_ClrStall+0xa4>
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	2201      	movs	r2, #1
 8003800:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	68f9      	ldr	r1, [r7, #12]
 800380a:	4618      	mov	r0, r3
 800380c:	f002 f8b4 	bl	8005978 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2200      	movs	r2, #0
 8003814:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003818:	2300      	movs	r3, #0
}
 800381a:	4618      	mov	r0, r3
 800381c:	3710      	adds	r7, #16
 800381e:	46bd      	mov	sp, r7
 8003820:	bd80      	pop	{r7, pc}

08003822 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003822:	b580      	push	{r7, lr}
 8003824:	b084      	sub	sp, #16
 8003826:	af00      	add	r7, sp, #0
 8003828:	6078      	str	r0, [r7, #4]
 800382a:	460b      	mov	r3, r1
 800382c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800382e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003832:	2b00      	cmp	r3, #0
 8003834:	da0c      	bge.n	8003850 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003836:	78fb      	ldrb	r3, [r7, #3]
 8003838:	f003 020f 	and.w	r2, r3, #15
 800383c:	4613      	mov	r3, r2
 800383e:	00db      	lsls	r3, r3, #3
 8003840:	4413      	add	r3, r2
 8003842:	009b      	lsls	r3, r3, #2
 8003844:	3338      	adds	r3, #56	; 0x38
 8003846:	687a      	ldr	r2, [r7, #4]
 8003848:	4413      	add	r3, r2
 800384a:	3304      	adds	r3, #4
 800384c:	60fb      	str	r3, [r7, #12]
 800384e:	e00c      	b.n	800386a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003850:	78fb      	ldrb	r3, [r7, #3]
 8003852:	f003 020f 	and.w	r2, r3, #15
 8003856:	4613      	mov	r3, r2
 8003858:	00db      	lsls	r3, r3, #3
 800385a:	4413      	add	r3, r2
 800385c:	009b      	lsls	r3, r3, #2
 800385e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	4413      	add	r3, r2
 8003866:	3304      	adds	r3, #4
 8003868:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	68f9      	ldr	r1, [r7, #12]
 8003870:	4618      	mov	r0, r3
 8003872:	f001 fed3 	bl	800561c <USB_EPStopXfer>
 8003876:	4603      	mov	r3, r0
 8003878:	72fb      	strb	r3, [r7, #11]

  return ret;
 800387a:	7afb      	ldrb	r3, [r7, #11]
}
 800387c:	4618      	mov	r0, r3
 800387e:	3710      	adds	r7, #16
 8003880:	46bd      	mov	sp, r7
 8003882:	bd80      	pop	{r7, pc}

08003884 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08a      	sub	sp, #40	; 0x28
 8003888:	af02      	add	r7, sp, #8
 800388a:	6078      	str	r0, [r7, #4]
 800388c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003898:	683a      	ldr	r2, [r7, #0]
 800389a:	4613      	mov	r3, r2
 800389c:	00db      	lsls	r3, r3, #3
 800389e:	4413      	add	r3, r2
 80038a0:	009b      	lsls	r3, r3, #2
 80038a2:	3338      	adds	r3, #56	; 0x38
 80038a4:	687a      	ldr	r2, [r7, #4]
 80038a6:	4413      	add	r3, r2
 80038a8:	3304      	adds	r3, #4
 80038aa:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	6a1a      	ldr	r2, [r3, #32]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	699b      	ldr	r3, [r3, #24]
 80038b4:	429a      	cmp	r2, r3
 80038b6:	d901      	bls.n	80038bc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80038b8:	2301      	movs	r3, #1
 80038ba:	e06c      	b.n	8003996 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	699a      	ldr	r2, [r3, #24]
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6a1b      	ldr	r3, [r3, #32]
 80038c4:	1ad3      	subs	r3, r2, r3
 80038c6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	68db      	ldr	r3, [r3, #12]
 80038cc:	69fa      	ldr	r2, [r7, #28]
 80038ce:	429a      	cmp	r2, r3
 80038d0:	d902      	bls.n	80038d8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	68db      	ldr	r3, [r3, #12]
 80038d6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80038d8:	69fb      	ldr	r3, [r7, #28]
 80038da:	3303      	adds	r3, #3
 80038dc:	089b      	lsrs	r3, r3, #2
 80038de:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80038e0:	e02b      	b.n	800393a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	699a      	ldr	r2, [r3, #24]
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	6a1b      	ldr	r3, [r3, #32]
 80038ea:	1ad3      	subs	r3, r2, r3
 80038ec:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	68db      	ldr	r3, [r3, #12]
 80038f2:	69fa      	ldr	r2, [r7, #28]
 80038f4:	429a      	cmp	r2, r3
 80038f6:	d902      	bls.n	80038fe <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	68db      	ldr	r3, [r3, #12]
 80038fc:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80038fe:	69fb      	ldr	r3, [r7, #28]
 8003900:	3303      	adds	r3, #3
 8003902:	089b      	lsrs	r3, r3, #2
 8003904:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	6919      	ldr	r1, [r3, #16]
 800390a:	683b      	ldr	r3, [r7, #0]
 800390c:	b2da      	uxtb	r2, r3
 800390e:	69fb      	ldr	r3, [r7, #28]
 8003910:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003916:	b2db      	uxtb	r3, r3
 8003918:	9300      	str	r3, [sp, #0]
 800391a:	4603      	mov	r3, r0
 800391c:	6978      	ldr	r0, [r7, #20]
 800391e:	f001 ff27 	bl	8005770 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	691a      	ldr	r2, [r3, #16]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	441a      	add	r2, r3
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	6a1a      	ldr	r2, [r3, #32]
 8003932:	69fb      	ldr	r3, [r7, #28]
 8003934:	441a      	add	r2, r3
 8003936:	68fb      	ldr	r3, [r7, #12]
 8003938:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	015a      	lsls	r2, r3, #5
 800393e:	693b      	ldr	r3, [r7, #16]
 8003940:	4413      	add	r3, r2
 8003942:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003946:	699b      	ldr	r3, [r3, #24]
 8003948:	b29b      	uxth	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	429a      	cmp	r2, r3
 800394e:	d809      	bhi.n	8003964 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	6a1a      	ldr	r2, [r3, #32]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003958:	429a      	cmp	r2, r3
 800395a:	d203      	bcs.n	8003964 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	699b      	ldr	r3, [r3, #24]
 8003960:	2b00      	cmp	r3, #0
 8003962:	d1be      	bne.n	80038e2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	699a      	ldr	r2, [r3, #24]
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	6a1b      	ldr	r3, [r3, #32]
 800396c:	429a      	cmp	r2, r3
 800396e:	d811      	bhi.n	8003994 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	f003 030f 	and.w	r3, r3, #15
 8003976:	2201      	movs	r2, #1
 8003978:	fa02 f303 	lsl.w	r3, r2, r3
 800397c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800397e:	693b      	ldr	r3, [r7, #16]
 8003980:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003984:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003986:	68bb      	ldr	r3, [r7, #8]
 8003988:	43db      	mvns	r3, r3
 800398a:	6939      	ldr	r1, [r7, #16]
 800398c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003990:	4013      	ands	r3, r2
 8003992:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003994:	2300      	movs	r3, #0
}
 8003996:	4618      	mov	r0, r3
 8003998:	3720      	adds	r7, #32
 800399a:	46bd      	mov	sp, r7
 800399c:	bd80      	pop	{r7, pc}
	...

080039a0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b088      	sub	sp, #32
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80039b0:	69fb      	ldr	r3, [r7, #28]
 80039b2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	333c      	adds	r3, #60	; 0x3c
 80039b8:	3304      	adds	r3, #4
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	015a      	lsls	r2, r3, #5
 80039c2:	69bb      	ldr	r3, [r7, #24]
 80039c4:	4413      	add	r3, r2
 80039c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039ca:	689b      	ldr	r3, [r3, #8]
 80039cc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	691b      	ldr	r3, [r3, #16]
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d17b      	bne.n	8003ace <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f003 0308 	and.w	r3, r3, #8
 80039dc:	2b00      	cmp	r3, #0
 80039de:	d015      	beq.n	8003a0c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039e0:	697b      	ldr	r3, [r7, #20]
 80039e2:	4a61      	ldr	r2, [pc, #388]	; (8003b68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80039e4:	4293      	cmp	r3, r2
 80039e6:	f240 80b9 	bls.w	8003b5c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	f000 80b3 	beq.w	8003b5c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	69bb      	ldr	r3, [r7, #24]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a02:	461a      	mov	r2, r3
 8003a04:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a08:	6093      	str	r3, [r2, #8]
 8003a0a:	e0a7      	b.n	8003b5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f003 0320 	and.w	r3, r3, #32
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d009      	beq.n	8003a2a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a22:	461a      	mov	r2, r3
 8003a24:	2320      	movs	r3, #32
 8003a26:	6093      	str	r3, [r2, #8]
 8003a28:	e098      	b.n	8003b5c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a2a:	693b      	ldr	r3, [r7, #16]
 8003a2c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	f040 8093 	bne.w	8003b5c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a36:	697b      	ldr	r3, [r7, #20]
 8003a38:	4a4b      	ldr	r2, [pc, #300]	; (8003b68 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a3a:	4293      	cmp	r3, r2
 8003a3c:	d90f      	bls.n	8003a5e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a3e:	693b      	ldr	r3, [r7, #16]
 8003a40:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a44:	2b00      	cmp	r3, #0
 8003a46:	d00a      	beq.n	8003a5e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a48:	683b      	ldr	r3, [r7, #0]
 8003a4a:	015a      	lsls	r2, r3, #5
 8003a4c:	69bb      	ldr	r3, [r7, #24]
 8003a4e:	4413      	add	r3, r2
 8003a50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a54:	461a      	mov	r2, r3
 8003a56:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a5a:	6093      	str	r3, [r2, #8]
 8003a5c:	e07e      	b.n	8003b5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	4613      	mov	r3, r2
 8003a62:	00db      	lsls	r3, r3, #3
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	4413      	add	r3, r2
 8003a70:	3304      	adds	r3, #4
 8003a72:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	69da      	ldr	r2, [r3, #28]
 8003a78:	683b      	ldr	r3, [r7, #0]
 8003a7a:	0159      	lsls	r1, r3, #5
 8003a7c:	69bb      	ldr	r3, [r7, #24]
 8003a7e:	440b      	add	r3, r1
 8003a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a84:	691b      	ldr	r3, [r3, #16]
 8003a86:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003a8a:	1ad2      	subs	r2, r2, r3
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	2b00      	cmp	r3, #0
 8003a94:	d114      	bne.n	8003ac0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	699b      	ldr	r3, [r3, #24]
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d109      	bne.n	8003ab2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6818      	ldr	r0, [r3, #0]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003aa8:	461a      	mov	r2, r3
 8003aaa:	2101      	movs	r1, #1
 8003aac:	f002 f8f6 	bl	8005c9c <USB_EP0_OutStart>
 8003ab0:	e006      	b.n	8003ac0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	691a      	ldr	r2, [r3, #16]
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	6a1b      	ldr	r3, [r3, #32]
 8003aba:	441a      	add	r2, r3
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	b2db      	uxtb	r3, r3
 8003ac4:	4619      	mov	r1, r3
 8003ac6:	6878      	ldr	r0, [r7, #4]
 8003ac8:	f004 f846 	bl	8007b58 <HAL_PCD_DataOutStageCallback>
 8003acc:	e046      	b.n	8003b5c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	4a26      	ldr	r2, [pc, #152]	; (8003b6c <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d124      	bne.n	8003b20 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003ad6:	693b      	ldr	r3, [r7, #16]
 8003ad8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003adc:	2b00      	cmp	r3, #0
 8003ade:	d00a      	beq.n	8003af6 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003ae0:	683b      	ldr	r3, [r7, #0]
 8003ae2:	015a      	lsls	r2, r3, #5
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	4413      	add	r3, r2
 8003ae8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aec:	461a      	mov	r2, r3
 8003aee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003af2:	6093      	str	r3, [r2, #8]
 8003af4:	e032      	b.n	8003b5c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003af6:	693b      	ldr	r3, [r7, #16]
 8003af8:	f003 0320 	and.w	r3, r3, #32
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d008      	beq.n	8003b12 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b00:	683b      	ldr	r3, [r7, #0]
 8003b02:	015a      	lsls	r2, r3, #5
 8003b04:	69bb      	ldr	r3, [r7, #24]
 8003b06:	4413      	add	r3, r2
 8003b08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b0c:	461a      	mov	r2, r3
 8003b0e:	2320      	movs	r3, #32
 8003b10:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b12:	683b      	ldr	r3, [r7, #0]
 8003b14:	b2db      	uxtb	r3, r3
 8003b16:	4619      	mov	r1, r3
 8003b18:	6878      	ldr	r0, [r7, #4]
 8003b1a:	f004 f81d 	bl	8007b58 <HAL_PCD_DataOutStageCallback>
 8003b1e:	e01d      	b.n	8003b5c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b20:	683b      	ldr	r3, [r7, #0]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d114      	bne.n	8003b50 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b26:	6879      	ldr	r1, [r7, #4]
 8003b28:	683a      	ldr	r2, [r7, #0]
 8003b2a:	4613      	mov	r3, r2
 8003b2c:	00db      	lsls	r3, r3, #3
 8003b2e:	4413      	add	r3, r2
 8003b30:	009b      	lsls	r3, r3, #2
 8003b32:	440b      	add	r3, r1
 8003b34:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d108      	bne.n	8003b50 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6818      	ldr	r0, [r3, #0]
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b48:	461a      	mov	r2, r3
 8003b4a:	2100      	movs	r1, #0
 8003b4c:	f002 f8a6 	bl	8005c9c <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	b2db      	uxtb	r3, r3
 8003b54:	4619      	mov	r1, r3
 8003b56:	6878      	ldr	r0, [r7, #4]
 8003b58:	f003 fffe 	bl	8007b58 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003b5c:	2300      	movs	r3, #0
}
 8003b5e:	4618      	mov	r0, r3
 8003b60:	3720      	adds	r7, #32
 8003b62:	46bd      	mov	sp, r7
 8003b64:	bd80      	pop	{r7, pc}
 8003b66:	bf00      	nop
 8003b68:	4f54300a 	.word	0x4f54300a
 8003b6c:	4f54310a 	.word	0x4f54310a

08003b70 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003b70:	b580      	push	{r7, lr}
 8003b72:	b086      	sub	sp, #24
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	6078      	str	r0, [r7, #4]
 8003b78:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b80:	697b      	ldr	r3, [r7, #20]
 8003b82:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	333c      	adds	r3, #60	; 0x3c
 8003b88:	3304      	adds	r3, #4
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003b8e:	683b      	ldr	r3, [r7, #0]
 8003b90:	015a      	lsls	r2, r3, #5
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	4413      	add	r3, r2
 8003b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b9a:	689b      	ldr	r3, [r3, #8]
 8003b9c:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	4a15      	ldr	r2, [pc, #84]	; (8003bf8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003ba2:	4293      	cmp	r3, r2
 8003ba4:	d90e      	bls.n	8003bc4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003ba6:	68bb      	ldr	r3, [r7, #8]
 8003ba8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d009      	beq.n	8003bc4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	693b      	ldr	r3, [r7, #16]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003bc2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003bc4:	6878      	ldr	r0, [r7, #4]
 8003bc6:	f003 ffb5 	bl	8007b34 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4a0a      	ldr	r2, [pc, #40]	; (8003bf8 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bce:	4293      	cmp	r3, r2
 8003bd0:	d90c      	bls.n	8003bec <PCD_EP_OutSetupPacket_int+0x7c>
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	691b      	ldr	r3, [r3, #16]
 8003bd6:	2b01      	cmp	r3, #1
 8003bd8:	d108      	bne.n	8003bec <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	6818      	ldr	r0, [r3, #0]
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003be4:	461a      	mov	r2, r3
 8003be6:	2101      	movs	r1, #1
 8003be8:	f002 f858 	bl	8005c9c <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	4f54300a 	.word	0x4f54300a

08003bfc <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	460b      	mov	r3, r1
 8003c06:	70fb      	strb	r3, [r7, #3]
 8003c08:	4613      	mov	r3, r2
 8003c0a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c12:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c14:	78fb      	ldrb	r3, [r7, #3]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d107      	bne.n	8003c2a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c1a:	883b      	ldrh	r3, [r7, #0]
 8003c1c:	0419      	lsls	r1, r3, #16
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	68ba      	ldr	r2, [r7, #8]
 8003c24:	430a      	orrs	r2, r1
 8003c26:	629a      	str	r2, [r3, #40]	; 0x28
 8003c28:	e028      	b.n	8003c7c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c30:	0c1b      	lsrs	r3, r3, #16
 8003c32:	68ba      	ldr	r2, [r7, #8]
 8003c34:	4413      	add	r3, r2
 8003c36:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c38:	2300      	movs	r3, #0
 8003c3a:	73fb      	strb	r3, [r7, #15]
 8003c3c:	e00d      	b.n	8003c5a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	7bfb      	ldrb	r3, [r7, #15]
 8003c44:	3340      	adds	r3, #64	; 0x40
 8003c46:	009b      	lsls	r3, r3, #2
 8003c48:	4413      	add	r3, r2
 8003c4a:	685b      	ldr	r3, [r3, #4]
 8003c4c:	0c1b      	lsrs	r3, r3, #16
 8003c4e:	68ba      	ldr	r2, [r7, #8]
 8003c50:	4413      	add	r3, r2
 8003c52:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c54:	7bfb      	ldrb	r3, [r7, #15]
 8003c56:	3301      	adds	r3, #1
 8003c58:	73fb      	strb	r3, [r7, #15]
 8003c5a:	7bfa      	ldrb	r2, [r7, #15]
 8003c5c:	78fb      	ldrb	r3, [r7, #3]
 8003c5e:	3b01      	subs	r3, #1
 8003c60:	429a      	cmp	r2, r3
 8003c62:	d3ec      	bcc.n	8003c3e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003c64:	883b      	ldrh	r3, [r7, #0]
 8003c66:	0418      	lsls	r0, r3, #16
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	6819      	ldr	r1, [r3, #0]
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	3b01      	subs	r3, #1
 8003c70:	68ba      	ldr	r2, [r7, #8]
 8003c72:	4302      	orrs	r2, r0
 8003c74:	3340      	adds	r3, #64	; 0x40
 8003c76:	009b      	lsls	r3, r3, #2
 8003c78:	440b      	add	r3, r1
 8003c7a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003c7c:	2300      	movs	r3, #0
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3714      	adds	r7, #20
 8003c82:	46bd      	mov	sp, r7
 8003c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c88:	4770      	bx	lr

08003c8a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003c8a:	b480      	push	{r7}
 8003c8c:	b083      	sub	sp, #12
 8003c8e:	af00      	add	r7, sp, #0
 8003c90:	6078      	str	r0, [r7, #4]
 8003c92:	460b      	mov	r3, r1
 8003c94:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	887a      	ldrh	r2, [r7, #2]
 8003c9c:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	370c      	adds	r7, #12
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b083      	sub	sp, #12
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003cb8:	bf00      	nop
 8003cba:	370c      	adds	r7, #12
 8003cbc:	46bd      	mov	sp, r7
 8003cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc2:	4770      	bx	lr

08003cc4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b086      	sub	sp, #24
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d101      	bne.n	8003cd6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003cd2:	2301      	movs	r3, #1
 8003cd4:	e267      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f003 0301 	and.w	r3, r3, #1
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d075      	beq.n	8003dce <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003ce2:	4b88      	ldr	r3, [pc, #544]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003ce4:	689b      	ldr	r3, [r3, #8]
 8003ce6:	f003 030c 	and.w	r3, r3, #12
 8003cea:	2b04      	cmp	r3, #4
 8003cec:	d00c      	beq.n	8003d08 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cee:	4b85      	ldr	r3, [pc, #532]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003cf6:	2b08      	cmp	r3, #8
 8003cf8:	d112      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003cfa:	4b82      	ldr	r3, [pc, #520]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003cfc:	685b      	ldr	r3, [r3, #4]
 8003cfe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d02:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d06:	d10b      	bne.n	8003d20 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d08:	4b7e      	ldr	r3, [pc, #504]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d05b      	beq.n	8003dcc <HAL_RCC_OscConfig+0x108>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	2b00      	cmp	r3, #0
 8003d1a:	d157      	bne.n	8003dcc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	e242      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	685b      	ldr	r3, [r3, #4]
 8003d24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d28:	d106      	bne.n	8003d38 <HAL_RCC_OscConfig+0x74>
 8003d2a:	4b76      	ldr	r3, [pc, #472]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	4a75      	ldr	r2, [pc, #468]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d30:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d34:	6013      	str	r3, [r2, #0]
 8003d36:	e01d      	b.n	8003d74 <HAL_RCC_OscConfig+0xb0>
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	685b      	ldr	r3, [r3, #4]
 8003d3c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d40:	d10c      	bne.n	8003d5c <HAL_RCC_OscConfig+0x98>
 8003d42:	4b70      	ldr	r3, [pc, #448]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a6f      	ldr	r2, [pc, #444]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d48:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003d4c:	6013      	str	r3, [r2, #0]
 8003d4e:	4b6d      	ldr	r3, [pc, #436]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	4a6c      	ldr	r2, [pc, #432]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d54:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d58:	6013      	str	r3, [r2, #0]
 8003d5a:	e00b      	b.n	8003d74 <HAL_RCC_OscConfig+0xb0>
 8003d5c:	4b69      	ldr	r3, [pc, #420]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	4a68      	ldr	r2, [pc, #416]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003d66:	6013      	str	r3, [r2, #0]
 8003d68:	4b66      	ldr	r3, [pc, #408]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4a65      	ldr	r2, [pc, #404]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d6e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003d72:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685b      	ldr	r3, [r3, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d013      	beq.n	8003da4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d7c:	f7fd fafc 	bl	8001378 <HAL_GetTick>
 8003d80:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d82:	e008      	b.n	8003d96 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003d84:	f7fd faf8 	bl	8001378 <HAL_GetTick>
 8003d88:	4602      	mov	r2, r0
 8003d8a:	693b      	ldr	r3, [r7, #16]
 8003d8c:	1ad3      	subs	r3, r2, r3
 8003d8e:	2b64      	cmp	r3, #100	; 0x64
 8003d90:	d901      	bls.n	8003d96 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003d92:	2303      	movs	r3, #3
 8003d94:	e207      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003d96:	4b5b      	ldr	r3, [pc, #364]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d0f0      	beq.n	8003d84 <HAL_RCC_OscConfig+0xc0>
 8003da2:	e014      	b.n	8003dce <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003da4:	f7fd fae8 	bl	8001378 <HAL_GetTick>
 8003da8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003daa:	e008      	b.n	8003dbe <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003dac:	f7fd fae4 	bl	8001378 <HAL_GetTick>
 8003db0:	4602      	mov	r2, r0
 8003db2:	693b      	ldr	r3, [r7, #16]
 8003db4:	1ad3      	subs	r3, r2, r3
 8003db6:	2b64      	cmp	r3, #100	; 0x64
 8003db8:	d901      	bls.n	8003dbe <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003dba:	2303      	movs	r3, #3
 8003dbc:	e1f3      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003dbe:	4b51      	ldr	r3, [pc, #324]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003dc0:	681b      	ldr	r3, [r3, #0]
 8003dc2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003dc6:	2b00      	cmp	r3, #0
 8003dc8:	d1f0      	bne.n	8003dac <HAL_RCC_OscConfig+0xe8>
 8003dca:	e000      	b.n	8003dce <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003dcc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	f003 0302 	and.w	r3, r3, #2
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d063      	beq.n	8003ea2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dda:	4b4a      	ldr	r3, [pc, #296]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003ddc:	689b      	ldr	r3, [r3, #8]
 8003dde:	f003 030c 	and.w	r3, r3, #12
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d00b      	beq.n	8003dfe <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003de6:	4b47      	ldr	r3, [pc, #284]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003de8:	689b      	ldr	r3, [r3, #8]
 8003dea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003dee:	2b08      	cmp	r3, #8
 8003df0:	d11c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003df2:	4b44      	ldr	r3, [pc, #272]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003df4:	685b      	ldr	r3, [r3, #4]
 8003df6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d116      	bne.n	8003e2c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003dfe:	4b41      	ldr	r3, [pc, #260]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	f003 0302 	and.w	r3, r3, #2
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d005      	beq.n	8003e16 <HAL_RCC_OscConfig+0x152>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	68db      	ldr	r3, [r3, #12]
 8003e0e:	2b01      	cmp	r3, #1
 8003e10:	d001      	beq.n	8003e16 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e12:	2301      	movs	r3, #1
 8003e14:	e1c7      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e16:	4b3b      	ldr	r3, [pc, #236]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	691b      	ldr	r3, [r3, #16]
 8003e22:	00db      	lsls	r3, r3, #3
 8003e24:	4937      	ldr	r1, [pc, #220]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e26:	4313      	orrs	r3, r2
 8003e28:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e2a:	e03a      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	68db      	ldr	r3, [r3, #12]
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d020      	beq.n	8003e76 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e34:	4b34      	ldr	r3, [pc, #208]	; (8003f08 <HAL_RCC_OscConfig+0x244>)
 8003e36:	2201      	movs	r2, #1
 8003e38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e3a:	f7fd fa9d 	bl	8001378 <HAL_GetTick>
 8003e3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e40:	e008      	b.n	8003e54 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e42:	f7fd fa99 	bl	8001378 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	693b      	ldr	r3, [r7, #16]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	2b02      	cmp	r3, #2
 8003e4e:	d901      	bls.n	8003e54 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003e50:	2303      	movs	r3, #3
 8003e52:	e1a8      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e54:	4b2b      	ldr	r3, [pc, #172]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f003 0302 	and.w	r3, r3, #2
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d0f0      	beq.n	8003e42 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e60:	4b28      	ldr	r3, [pc, #160]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	691b      	ldr	r3, [r3, #16]
 8003e6c:	00db      	lsls	r3, r3, #3
 8003e6e:	4925      	ldr	r1, [pc, #148]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e70:	4313      	orrs	r3, r2
 8003e72:	600b      	str	r3, [r1, #0]
 8003e74:	e015      	b.n	8003ea2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003e76:	4b24      	ldr	r3, [pc, #144]	; (8003f08 <HAL_RCC_OscConfig+0x244>)
 8003e78:	2200      	movs	r2, #0
 8003e7a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e7c:	f7fd fa7c 	bl	8001378 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e84:	f7fd fa78 	bl	8001378 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e187      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003e96:	4b1b      	ldr	r3, [pc, #108]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1f0      	bne.n	8003e84 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	f003 0308 	and.w	r3, r3, #8
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d036      	beq.n	8003f1c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	695b      	ldr	r3, [r3, #20]
 8003eb2:	2b00      	cmp	r3, #0
 8003eb4:	d016      	beq.n	8003ee4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003eb6:	4b15      	ldr	r3, [pc, #84]	; (8003f0c <HAL_RCC_OscConfig+0x248>)
 8003eb8:	2201      	movs	r2, #1
 8003eba:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ebc:	f7fd fa5c 	bl	8001378 <HAL_GetTick>
 8003ec0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ec2:	e008      	b.n	8003ed6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ec4:	f7fd fa58 	bl	8001378 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	693b      	ldr	r3, [r7, #16]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d901      	bls.n	8003ed6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003ed2:	2303      	movs	r3, #3
 8003ed4:	e167      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003ed6:	4b0b      	ldr	r3, [pc, #44]	; (8003f04 <HAL_RCC_OscConfig+0x240>)
 8003ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d0f0      	beq.n	8003ec4 <HAL_RCC_OscConfig+0x200>
 8003ee2:	e01b      	b.n	8003f1c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003ee4:	4b09      	ldr	r3, [pc, #36]	; (8003f0c <HAL_RCC_OscConfig+0x248>)
 8003ee6:	2200      	movs	r2, #0
 8003ee8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003eea:	f7fd fa45 	bl	8001378 <HAL_GetTick>
 8003eee:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003ef0:	e00e      	b.n	8003f10 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003ef2:	f7fd fa41 	bl	8001378 <HAL_GetTick>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	693b      	ldr	r3, [r7, #16]
 8003efa:	1ad3      	subs	r3, r2, r3
 8003efc:	2b02      	cmp	r3, #2
 8003efe:	d907      	bls.n	8003f10 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f00:	2303      	movs	r3, #3
 8003f02:	e150      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
 8003f04:	40023800 	.word	0x40023800
 8003f08:	42470000 	.word	0x42470000
 8003f0c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f10:	4b88      	ldr	r3, [pc, #544]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f12:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f14:	f003 0302 	and.w	r3, r3, #2
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d1ea      	bne.n	8003ef2 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	f003 0304 	and.w	r3, r3, #4
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	f000 8097 	beq.w	8004058 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f2a:	2300      	movs	r3, #0
 8003f2c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f2e:	4b81      	ldr	r3, [pc, #516]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f32:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d10f      	bne.n	8003f5a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f3a:	2300      	movs	r3, #0
 8003f3c:	60bb      	str	r3, [r7, #8]
 8003f3e:	4b7d      	ldr	r3, [pc, #500]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f42:	4a7c      	ldr	r2, [pc, #496]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f44:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f48:	6413      	str	r3, [r2, #64]	; 0x40
 8003f4a:	4b7a      	ldr	r3, [pc, #488]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003f4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f52:	60bb      	str	r3, [r7, #8]
 8003f54:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003f56:	2301      	movs	r3, #1
 8003f58:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f5a:	4b77      	ldr	r3, [pc, #476]	; (8004138 <HAL_RCC_OscConfig+0x474>)
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d118      	bne.n	8003f98 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003f66:	4b74      	ldr	r3, [pc, #464]	; (8004138 <HAL_RCC_OscConfig+0x474>)
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	4a73      	ldr	r2, [pc, #460]	; (8004138 <HAL_RCC_OscConfig+0x474>)
 8003f6c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003f70:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003f72:	f7fd fa01 	bl	8001378 <HAL_GetTick>
 8003f76:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f78:	e008      	b.n	8003f8c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003f7a:	f7fd f9fd 	bl	8001378 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b02      	cmp	r3, #2
 8003f86:	d901      	bls.n	8003f8c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003f88:	2303      	movs	r3, #3
 8003f8a:	e10c      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003f8c:	4b6a      	ldr	r3, [pc, #424]	; (8004138 <HAL_RCC_OscConfig+0x474>)
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d0f0      	beq.n	8003f7a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	689b      	ldr	r3, [r3, #8]
 8003f9c:	2b01      	cmp	r3, #1
 8003f9e:	d106      	bne.n	8003fae <HAL_RCC_OscConfig+0x2ea>
 8003fa0:	4b64      	ldr	r3, [pc, #400]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fa4:	4a63      	ldr	r2, [pc, #396]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fa6:	f043 0301 	orr.w	r3, r3, #1
 8003faa:	6713      	str	r3, [r2, #112]	; 0x70
 8003fac:	e01c      	b.n	8003fe8 <HAL_RCC_OscConfig+0x324>
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	2b05      	cmp	r3, #5
 8003fb4:	d10c      	bne.n	8003fd0 <HAL_RCC_OscConfig+0x30c>
 8003fb6:	4b5f      	ldr	r3, [pc, #380]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fb8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fba:	4a5e      	ldr	r2, [pc, #376]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fbc:	f043 0304 	orr.w	r3, r3, #4
 8003fc0:	6713      	str	r3, [r2, #112]	; 0x70
 8003fc2:	4b5c      	ldr	r3, [pc, #368]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fc6:	4a5b      	ldr	r2, [pc, #364]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fc8:	f043 0301 	orr.w	r3, r3, #1
 8003fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8003fce:	e00b      	b.n	8003fe8 <HAL_RCC_OscConfig+0x324>
 8003fd0:	4b58      	ldr	r3, [pc, #352]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fd2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fd4:	4a57      	ldr	r2, [pc, #348]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fd6:	f023 0301 	bic.w	r3, r3, #1
 8003fda:	6713      	str	r3, [r2, #112]	; 0x70
 8003fdc:	4b55      	ldr	r3, [pc, #340]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fde:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003fe0:	4a54      	ldr	r2, [pc, #336]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8003fe2:	f023 0304 	bic.w	r3, r3, #4
 8003fe6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	689b      	ldr	r3, [r3, #8]
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d015      	beq.n	800401c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003ff0:	f7fd f9c2 	bl	8001378 <HAL_GetTick>
 8003ff4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003ff6:	e00a      	b.n	800400e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003ff8:	f7fd f9be 	bl	8001378 <HAL_GetTick>
 8003ffc:	4602      	mov	r2, r0
 8003ffe:	693b      	ldr	r3, [r7, #16]
 8004000:	1ad3      	subs	r3, r2, r3
 8004002:	f241 3288 	movw	r2, #5000	; 0x1388
 8004006:	4293      	cmp	r3, r2
 8004008:	d901      	bls.n	800400e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800400a:	2303      	movs	r3, #3
 800400c:	e0cb      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800400e:	4b49      	ldr	r3, [pc, #292]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	f003 0302 	and.w	r3, r3, #2
 8004016:	2b00      	cmp	r3, #0
 8004018:	d0ee      	beq.n	8003ff8 <HAL_RCC_OscConfig+0x334>
 800401a:	e014      	b.n	8004046 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800401c:	f7fd f9ac 	bl	8001378 <HAL_GetTick>
 8004020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004022:	e00a      	b.n	800403a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004024:	f7fd f9a8 	bl	8001378 <HAL_GetTick>
 8004028:	4602      	mov	r2, r0
 800402a:	693b      	ldr	r3, [r7, #16]
 800402c:	1ad3      	subs	r3, r2, r3
 800402e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004032:	4293      	cmp	r3, r2
 8004034:	d901      	bls.n	800403a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004036:	2303      	movs	r3, #3
 8004038:	e0b5      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800403a:	4b3e      	ldr	r3, [pc, #248]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 800403c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800403e:	f003 0302 	and.w	r3, r3, #2
 8004042:	2b00      	cmp	r3, #0
 8004044:	d1ee      	bne.n	8004024 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004046:	7dfb      	ldrb	r3, [r7, #23]
 8004048:	2b01      	cmp	r3, #1
 800404a:	d105      	bne.n	8004058 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800404c:	4b39      	ldr	r3, [pc, #228]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 800404e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004050:	4a38      	ldr	r2, [pc, #224]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8004052:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004056:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	699b      	ldr	r3, [r3, #24]
 800405c:	2b00      	cmp	r3, #0
 800405e:	f000 80a1 	beq.w	80041a4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004062:	4b34      	ldr	r3, [pc, #208]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8004064:	689b      	ldr	r3, [r3, #8]
 8004066:	f003 030c 	and.w	r3, r3, #12
 800406a:	2b08      	cmp	r3, #8
 800406c:	d05c      	beq.n	8004128 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	699b      	ldr	r3, [r3, #24]
 8004072:	2b02      	cmp	r3, #2
 8004074:	d141      	bne.n	80040fa <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004076:	4b31      	ldr	r3, [pc, #196]	; (800413c <HAL_RCC_OscConfig+0x478>)
 8004078:	2200      	movs	r2, #0
 800407a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800407c:	f7fd f97c 	bl	8001378 <HAL_GetTick>
 8004080:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004082:	e008      	b.n	8004096 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004084:	f7fd f978 	bl	8001378 <HAL_GetTick>
 8004088:	4602      	mov	r2, r0
 800408a:	693b      	ldr	r3, [r7, #16]
 800408c:	1ad3      	subs	r3, r2, r3
 800408e:	2b02      	cmp	r3, #2
 8004090:	d901      	bls.n	8004096 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004092:	2303      	movs	r3, #3
 8004094:	e087      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004096:	4b27      	ldr	r3, [pc, #156]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 8004098:	681b      	ldr	r3, [r3, #0]
 800409a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d1f0      	bne.n	8004084 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	69da      	ldr	r2, [r3, #28]
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6a1b      	ldr	r3, [r3, #32]
 80040aa:	431a      	orrs	r2, r3
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040b0:	019b      	lsls	r3, r3, #6
 80040b2:	431a      	orrs	r2, r3
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040b8:	085b      	lsrs	r3, r3, #1
 80040ba:	3b01      	subs	r3, #1
 80040bc:	041b      	lsls	r3, r3, #16
 80040be:	431a      	orrs	r2, r3
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040c4:	061b      	lsls	r3, r3, #24
 80040c6:	491b      	ldr	r1, [pc, #108]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 80040c8:	4313      	orrs	r3, r2
 80040ca:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80040cc:	4b1b      	ldr	r3, [pc, #108]	; (800413c <HAL_RCC_OscConfig+0x478>)
 80040ce:	2201      	movs	r2, #1
 80040d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d2:	f7fd f951 	bl	8001378 <HAL_GetTick>
 80040d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040d8:	e008      	b.n	80040ec <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040da:	f7fd f94d 	bl	8001378 <HAL_GetTick>
 80040de:	4602      	mov	r2, r0
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	1ad3      	subs	r3, r2, r3
 80040e4:	2b02      	cmp	r3, #2
 80040e6:	d901      	bls.n	80040ec <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80040e8:	2303      	movs	r3, #3
 80040ea:	e05c      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ec:	4b11      	ldr	r3, [pc, #68]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d0f0      	beq.n	80040da <HAL_RCC_OscConfig+0x416>
 80040f8:	e054      	b.n	80041a4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040fa:	4b10      	ldr	r3, [pc, #64]	; (800413c <HAL_RCC_OscConfig+0x478>)
 80040fc:	2200      	movs	r2, #0
 80040fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004100:	f7fd f93a 	bl	8001378 <HAL_GetTick>
 8004104:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004106:	e008      	b.n	800411a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004108:	f7fd f936 	bl	8001378 <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	693b      	ldr	r3, [r7, #16]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	2b02      	cmp	r3, #2
 8004114:	d901      	bls.n	800411a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004116:	2303      	movs	r3, #3
 8004118:	e045      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800411a:	4b06      	ldr	r3, [pc, #24]	; (8004134 <HAL_RCC_OscConfig+0x470>)
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004122:	2b00      	cmp	r3, #0
 8004124:	d1f0      	bne.n	8004108 <HAL_RCC_OscConfig+0x444>
 8004126:	e03d      	b.n	80041a4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	699b      	ldr	r3, [r3, #24]
 800412c:	2b01      	cmp	r3, #1
 800412e:	d107      	bne.n	8004140 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004130:	2301      	movs	r3, #1
 8004132:	e038      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
 8004134:	40023800 	.word	0x40023800
 8004138:	40007000 	.word	0x40007000
 800413c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004140:	4b1b      	ldr	r3, [pc, #108]	; (80041b0 <HAL_RCC_OscConfig+0x4ec>)
 8004142:	685b      	ldr	r3, [r3, #4]
 8004144:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	699b      	ldr	r3, [r3, #24]
 800414a:	2b01      	cmp	r3, #1
 800414c:	d028      	beq.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004158:	429a      	cmp	r2, r3
 800415a:	d121      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004166:	429a      	cmp	r2, r3
 8004168:	d11a      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800416a:	68fa      	ldr	r2, [r7, #12]
 800416c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004170:	4013      	ands	r3, r2
 8004172:	687a      	ldr	r2, [r7, #4]
 8004174:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004176:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004178:	4293      	cmp	r3, r2
 800417a:	d111      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004186:	085b      	lsrs	r3, r3, #1
 8004188:	3b01      	subs	r3, #1
 800418a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800418c:	429a      	cmp	r2, r3
 800418e:	d107      	bne.n	80041a0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800419a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800419c:	429a      	cmp	r2, r3
 800419e:	d001      	beq.n	80041a4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041a0:	2301      	movs	r3, #1
 80041a2:	e000      	b.n	80041a6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3718      	adds	r7, #24
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}
 80041ae:	bf00      	nop
 80041b0:	40023800 	.word	0x40023800

080041b4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80041b4:	b580      	push	{r7, lr}
 80041b6:	b084      	sub	sp, #16
 80041b8:	af00      	add	r7, sp, #0
 80041ba:	6078      	str	r0, [r7, #4]
 80041bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d101      	bne.n	80041c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80041c4:	2301      	movs	r3, #1
 80041c6:	e0cc      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80041c8:	4b68      	ldr	r3, [pc, #416]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	f003 0307 	and.w	r3, r3, #7
 80041d0:	683a      	ldr	r2, [r7, #0]
 80041d2:	429a      	cmp	r2, r3
 80041d4:	d90c      	bls.n	80041f0 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80041d6:	4b65      	ldr	r3, [pc, #404]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80041d8:	683a      	ldr	r2, [r7, #0]
 80041da:	b2d2      	uxtb	r2, r2
 80041dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80041de:	4b63      	ldr	r3, [pc, #396]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f003 0307 	and.w	r3, r3, #7
 80041e6:	683a      	ldr	r2, [r7, #0]
 80041e8:	429a      	cmp	r2, r3
 80041ea:	d001      	beq.n	80041f0 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80041ec:	2301      	movs	r3, #1
 80041ee:	e0b8      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f003 0302 	and.w	r3, r3, #2
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d020      	beq.n	800423e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f003 0304 	and.w	r3, r3, #4
 8004204:	2b00      	cmp	r3, #0
 8004206:	d005      	beq.n	8004214 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004208:	4b59      	ldr	r3, [pc, #356]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	4a58      	ldr	r2, [pc, #352]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800420e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004212:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 0308 	and.w	r3, r3, #8
 800421c:	2b00      	cmp	r3, #0
 800421e:	d005      	beq.n	800422c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004220:	4b53      	ldr	r3, [pc, #332]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004222:	689b      	ldr	r3, [r3, #8]
 8004224:	4a52      	ldr	r2, [pc, #328]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004226:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800422a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800422c:	4b50      	ldr	r3, [pc, #320]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800422e:	689b      	ldr	r3, [r3, #8]
 8004230:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	494d      	ldr	r1, [pc, #308]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800423a:	4313      	orrs	r3, r2
 800423c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	f003 0301 	and.w	r3, r3, #1
 8004246:	2b00      	cmp	r3, #0
 8004248:	d044      	beq.n	80042d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	685b      	ldr	r3, [r3, #4]
 800424e:	2b01      	cmp	r3, #1
 8004250:	d107      	bne.n	8004262 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004252:	4b47      	ldr	r3, [pc, #284]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d119      	bne.n	8004292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800425e:	2301      	movs	r3, #1
 8004260:	e07f      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b02      	cmp	r3, #2
 8004268:	d003      	beq.n	8004272 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800426e:	2b03      	cmp	r3, #3
 8004270:	d107      	bne.n	8004282 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004272:	4b3f      	ldr	r3, [pc, #252]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800427a:	2b00      	cmp	r3, #0
 800427c:	d109      	bne.n	8004292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800427e:	2301      	movs	r3, #1
 8004280:	e06f      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004282:	4b3b      	ldr	r3, [pc, #236]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	f003 0302 	and.w	r3, r3, #2
 800428a:	2b00      	cmp	r3, #0
 800428c:	d101      	bne.n	8004292 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e067      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004292:	4b37      	ldr	r3, [pc, #220]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004294:	689b      	ldr	r3, [r3, #8]
 8004296:	f023 0203 	bic.w	r2, r3, #3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	685b      	ldr	r3, [r3, #4]
 800429e:	4934      	ldr	r1, [pc, #208]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 80042a0:	4313      	orrs	r3, r2
 80042a2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042a4:	f7fd f868 	bl	8001378 <HAL_GetTick>
 80042a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042aa:	e00a      	b.n	80042c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80042ac:	f7fd f864 	bl	8001378 <HAL_GetTick>
 80042b0:	4602      	mov	r2, r0
 80042b2:	68fb      	ldr	r3, [r7, #12]
 80042b4:	1ad3      	subs	r3, r2, r3
 80042b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d901      	bls.n	80042c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80042be:	2303      	movs	r3, #3
 80042c0:	e04f      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80042c2:	4b2b      	ldr	r3, [pc, #172]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 80042c4:	689b      	ldr	r3, [r3, #8]
 80042c6:	f003 020c 	and.w	r2, r3, #12
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	685b      	ldr	r3, [r3, #4]
 80042ce:	009b      	lsls	r3, r3, #2
 80042d0:	429a      	cmp	r2, r3
 80042d2:	d1eb      	bne.n	80042ac <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80042d4:	4b25      	ldr	r3, [pc, #148]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f003 0307 	and.w	r3, r3, #7
 80042dc:	683a      	ldr	r2, [r7, #0]
 80042de:	429a      	cmp	r2, r3
 80042e0:	d20c      	bcs.n	80042fc <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80042e2:	4b22      	ldr	r3, [pc, #136]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80042e4:	683a      	ldr	r2, [r7, #0]
 80042e6:	b2d2      	uxtb	r2, r2
 80042e8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80042ea:	4b20      	ldr	r3, [pc, #128]	; (800436c <HAL_RCC_ClockConfig+0x1b8>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	f003 0307 	and.w	r3, r3, #7
 80042f2:	683a      	ldr	r2, [r7, #0]
 80042f4:	429a      	cmp	r2, r3
 80042f6:	d001      	beq.n	80042fc <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80042f8:	2301      	movs	r3, #1
 80042fa:	e032      	b.n	8004362 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f003 0304 	and.w	r3, r3, #4
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004308:	4b19      	ldr	r3, [pc, #100]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	68db      	ldr	r3, [r3, #12]
 8004314:	4916      	ldr	r1, [pc, #88]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004316:	4313      	orrs	r3, r2
 8004318:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f003 0308 	and.w	r3, r3, #8
 8004322:	2b00      	cmp	r3, #0
 8004324:	d009      	beq.n	800433a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004326:	4b12      	ldr	r3, [pc, #72]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004328:	689b      	ldr	r3, [r3, #8]
 800432a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	691b      	ldr	r3, [r3, #16]
 8004332:	00db      	lsls	r3, r3, #3
 8004334:	490e      	ldr	r1, [pc, #56]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004336:	4313      	orrs	r3, r2
 8004338:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800433a:	f000 f821 	bl	8004380 <HAL_RCC_GetSysClockFreq>
 800433e:	4602      	mov	r2, r0
 8004340:	4b0b      	ldr	r3, [pc, #44]	; (8004370 <HAL_RCC_ClockConfig+0x1bc>)
 8004342:	689b      	ldr	r3, [r3, #8]
 8004344:	091b      	lsrs	r3, r3, #4
 8004346:	f003 030f 	and.w	r3, r3, #15
 800434a:	490a      	ldr	r1, [pc, #40]	; (8004374 <HAL_RCC_ClockConfig+0x1c0>)
 800434c:	5ccb      	ldrb	r3, [r1, r3]
 800434e:	fa22 f303 	lsr.w	r3, r2, r3
 8004352:	4a09      	ldr	r2, [pc, #36]	; (8004378 <HAL_RCC_ClockConfig+0x1c4>)
 8004354:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004356:	4b09      	ldr	r3, [pc, #36]	; (800437c <HAL_RCC_ClockConfig+0x1c8>)
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	4618      	mov	r0, r3
 800435c:	f7fc ffc8 	bl	80012f0 <HAL_InitTick>

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3710      	adds	r7, #16
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	40023c00 	.word	0x40023c00
 8004370:	40023800 	.word	0x40023800
 8004374:	08008144 	.word	0x08008144
 8004378:	200003d4 	.word	0x200003d4
 800437c:	200003d8 	.word	0x200003d8

08004380 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004380:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004384:	b090      	sub	sp, #64	; 0x40
 8004386:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004388:	2300      	movs	r3, #0
 800438a:	637b      	str	r3, [r7, #52]	; 0x34
 800438c:	2300      	movs	r3, #0
 800438e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004390:	2300      	movs	r3, #0
 8004392:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8004394:	2300      	movs	r3, #0
 8004396:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004398:	4b59      	ldr	r3, [pc, #356]	; (8004500 <HAL_RCC_GetSysClockFreq+0x180>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	f003 030c 	and.w	r3, r3, #12
 80043a0:	2b08      	cmp	r3, #8
 80043a2:	d00d      	beq.n	80043c0 <HAL_RCC_GetSysClockFreq+0x40>
 80043a4:	2b08      	cmp	r3, #8
 80043a6:	f200 80a1 	bhi.w	80044ec <HAL_RCC_GetSysClockFreq+0x16c>
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d002      	beq.n	80043b4 <HAL_RCC_GetSysClockFreq+0x34>
 80043ae:	2b04      	cmp	r3, #4
 80043b0:	d003      	beq.n	80043ba <HAL_RCC_GetSysClockFreq+0x3a>
 80043b2:	e09b      	b.n	80044ec <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80043b4:	4b53      	ldr	r3, [pc, #332]	; (8004504 <HAL_RCC_GetSysClockFreq+0x184>)
 80043b6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80043b8:	e09b      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80043ba:	4b53      	ldr	r3, [pc, #332]	; (8004508 <HAL_RCC_GetSysClockFreq+0x188>)
 80043bc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80043be:	e098      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80043c0:	4b4f      	ldr	r3, [pc, #316]	; (8004500 <HAL_RCC_GetSysClockFreq+0x180>)
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80043c8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80043ca:	4b4d      	ldr	r3, [pc, #308]	; (8004500 <HAL_RCC_GetSysClockFreq+0x180>)
 80043cc:	685b      	ldr	r3, [r3, #4]
 80043ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d028      	beq.n	8004428 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80043d6:	4b4a      	ldr	r3, [pc, #296]	; (8004500 <HAL_RCC_GetSysClockFreq+0x180>)
 80043d8:	685b      	ldr	r3, [r3, #4]
 80043da:	099b      	lsrs	r3, r3, #6
 80043dc:	2200      	movs	r2, #0
 80043de:	623b      	str	r3, [r7, #32]
 80043e0:	627a      	str	r2, [r7, #36]	; 0x24
 80043e2:	6a3b      	ldr	r3, [r7, #32]
 80043e4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80043e8:	2100      	movs	r1, #0
 80043ea:	4b47      	ldr	r3, [pc, #284]	; (8004508 <HAL_RCC_GetSysClockFreq+0x188>)
 80043ec:	fb03 f201 	mul.w	r2, r3, r1
 80043f0:	2300      	movs	r3, #0
 80043f2:	fb00 f303 	mul.w	r3, r0, r3
 80043f6:	4413      	add	r3, r2
 80043f8:	4a43      	ldr	r2, [pc, #268]	; (8004508 <HAL_RCC_GetSysClockFreq+0x188>)
 80043fa:	fba0 1202 	umull	r1, r2, r0, r2
 80043fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004400:	460a      	mov	r2, r1
 8004402:	62ba      	str	r2, [r7, #40]	; 0x28
 8004404:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004406:	4413      	add	r3, r2
 8004408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800440a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800440c:	2200      	movs	r2, #0
 800440e:	61bb      	str	r3, [r7, #24]
 8004410:	61fa      	str	r2, [r7, #28]
 8004412:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004416:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800441a:	f7fb fedb 	bl	80001d4 <__aeabi_uldivmod>
 800441e:	4602      	mov	r2, r0
 8004420:	460b      	mov	r3, r1
 8004422:	4613      	mov	r3, r2
 8004424:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004426:	e053      	b.n	80044d0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004428:	4b35      	ldr	r3, [pc, #212]	; (8004500 <HAL_RCC_GetSysClockFreq+0x180>)
 800442a:	685b      	ldr	r3, [r3, #4]
 800442c:	099b      	lsrs	r3, r3, #6
 800442e:	2200      	movs	r2, #0
 8004430:	613b      	str	r3, [r7, #16]
 8004432:	617a      	str	r2, [r7, #20]
 8004434:	693b      	ldr	r3, [r7, #16]
 8004436:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800443a:	f04f 0b00 	mov.w	fp, #0
 800443e:	4652      	mov	r2, sl
 8004440:	465b      	mov	r3, fp
 8004442:	f04f 0000 	mov.w	r0, #0
 8004446:	f04f 0100 	mov.w	r1, #0
 800444a:	0159      	lsls	r1, r3, #5
 800444c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004450:	0150      	lsls	r0, r2, #5
 8004452:	4602      	mov	r2, r0
 8004454:	460b      	mov	r3, r1
 8004456:	ebb2 080a 	subs.w	r8, r2, sl
 800445a:	eb63 090b 	sbc.w	r9, r3, fp
 800445e:	f04f 0200 	mov.w	r2, #0
 8004462:	f04f 0300 	mov.w	r3, #0
 8004466:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800446a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800446e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004472:	ebb2 0408 	subs.w	r4, r2, r8
 8004476:	eb63 0509 	sbc.w	r5, r3, r9
 800447a:	f04f 0200 	mov.w	r2, #0
 800447e:	f04f 0300 	mov.w	r3, #0
 8004482:	00eb      	lsls	r3, r5, #3
 8004484:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004488:	00e2      	lsls	r2, r4, #3
 800448a:	4614      	mov	r4, r2
 800448c:	461d      	mov	r5, r3
 800448e:	eb14 030a 	adds.w	r3, r4, sl
 8004492:	603b      	str	r3, [r7, #0]
 8004494:	eb45 030b 	adc.w	r3, r5, fp
 8004498:	607b      	str	r3, [r7, #4]
 800449a:	f04f 0200 	mov.w	r2, #0
 800449e:	f04f 0300 	mov.w	r3, #0
 80044a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044a6:	4629      	mov	r1, r5
 80044a8:	028b      	lsls	r3, r1, #10
 80044aa:	4621      	mov	r1, r4
 80044ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80044b0:	4621      	mov	r1, r4
 80044b2:	028a      	lsls	r2, r1, #10
 80044b4:	4610      	mov	r0, r2
 80044b6:	4619      	mov	r1, r3
 80044b8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044ba:	2200      	movs	r2, #0
 80044bc:	60bb      	str	r3, [r7, #8]
 80044be:	60fa      	str	r2, [r7, #12]
 80044c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80044c4:	f7fb fe86 	bl	80001d4 <__aeabi_uldivmod>
 80044c8:	4602      	mov	r2, r0
 80044ca:	460b      	mov	r3, r1
 80044cc:	4613      	mov	r3, r2
 80044ce:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80044d0:	4b0b      	ldr	r3, [pc, #44]	; (8004500 <HAL_RCC_GetSysClockFreq+0x180>)
 80044d2:	685b      	ldr	r3, [r3, #4]
 80044d4:	0c1b      	lsrs	r3, r3, #16
 80044d6:	f003 0303 	and.w	r3, r3, #3
 80044da:	3301      	adds	r3, #1
 80044dc:	005b      	lsls	r3, r3, #1
 80044de:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80044e0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80044e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80044e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044e8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044ea:	e002      	b.n	80044f2 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80044ec:	4b05      	ldr	r3, [pc, #20]	; (8004504 <HAL_RCC_GetSysClockFreq+0x184>)
 80044ee:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80044f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80044f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80044f4:	4618      	mov	r0, r3
 80044f6:	3740      	adds	r7, #64	; 0x40
 80044f8:	46bd      	mov	sp, r7
 80044fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800
 8004504:	00f42400 	.word	0x00f42400
 8004508:	017d7840 	.word	0x017d7840

0800450c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800450c:	b480      	push	{r7}
 800450e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004510:	4b03      	ldr	r3, [pc, #12]	; (8004520 <HAL_RCC_GetHCLKFreq+0x14>)
 8004512:	681b      	ldr	r3, [r3, #0]
}
 8004514:	4618      	mov	r0, r3
 8004516:	46bd      	mov	sp, r7
 8004518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	200003d4 	.word	0x200003d4

08004524 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004524:	b084      	sub	sp, #16
 8004526:	b580      	push	{r7, lr}
 8004528:	b084      	sub	sp, #16
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	f107 001c 	add.w	r0, r7, #28
 8004532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004536:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004538:	2b01      	cmp	r3, #1
 800453a:	d122      	bne.n	8004582 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004540:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	68db      	ldr	r3, [r3, #12]
 800454c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004550:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004554:	687a      	ldr	r2, [r7, #4]
 8004556:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	68db      	ldr	r3, [r3, #12]
 800455c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004564:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004566:	2b01      	cmp	r3, #1
 8004568:	d105      	bne.n	8004576 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	f001 fbee 	bl	8005d58 <USB_CoreReset>
 800457c:	4603      	mov	r3, r0
 800457e:	73fb      	strb	r3, [r7, #15]
 8004580:	e01a      	b.n	80045b8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68db      	ldr	r3, [r3, #12]
 8004586:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f001 fbe2 	bl	8005d58 <USB_CoreReset>
 8004594:	4603      	mov	r3, r0
 8004596:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8004598:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800459a:	2b00      	cmp	r3, #0
 800459c:	d106      	bne.n	80045ac <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	639a      	str	r2, [r3, #56]	; 0x38
 80045aa:	e005      	b.n	80045b8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045b0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80045b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80045ba:	2b01      	cmp	r3, #1
 80045bc:	d10b      	bne.n	80045d6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	689b      	ldr	r3, [r3, #8]
 80045c2:	f043 0206 	orr.w	r2, r3, #6
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	689b      	ldr	r3, [r3, #8]
 80045ce:	f043 0220 	orr.w	r2, r3, #32
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80045d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80045d8:	4618      	mov	r0, r3
 80045da:	3710      	adds	r7, #16
 80045dc:	46bd      	mov	sp, r7
 80045de:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80045e2:	b004      	add	sp, #16
 80045e4:	4770      	bx	lr
	...

080045e8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80045e8:	b480      	push	{r7}
 80045ea:	b087      	sub	sp, #28
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	4613      	mov	r3, r2
 80045f4:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80045f6:	79fb      	ldrb	r3, [r7, #7]
 80045f8:	2b02      	cmp	r3, #2
 80045fa:	d165      	bne.n	80046c8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4a41      	ldr	r2, [pc, #260]	; (8004704 <USB_SetTurnaroundTime+0x11c>)
 8004600:	4293      	cmp	r3, r2
 8004602:	d906      	bls.n	8004612 <USB_SetTurnaroundTime+0x2a>
 8004604:	68bb      	ldr	r3, [r7, #8]
 8004606:	4a40      	ldr	r2, [pc, #256]	; (8004708 <USB_SetTurnaroundTime+0x120>)
 8004608:	4293      	cmp	r3, r2
 800460a:	d202      	bcs.n	8004612 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800460c:	230f      	movs	r3, #15
 800460e:	617b      	str	r3, [r7, #20]
 8004610:	e062      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	4a3c      	ldr	r2, [pc, #240]	; (8004708 <USB_SetTurnaroundTime+0x120>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d306      	bcc.n	8004628 <USB_SetTurnaroundTime+0x40>
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	4a3b      	ldr	r2, [pc, #236]	; (800470c <USB_SetTurnaroundTime+0x124>)
 800461e:	4293      	cmp	r3, r2
 8004620:	d202      	bcs.n	8004628 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004622:	230e      	movs	r3, #14
 8004624:	617b      	str	r3, [r7, #20]
 8004626:	e057      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004628:	68bb      	ldr	r3, [r7, #8]
 800462a:	4a38      	ldr	r2, [pc, #224]	; (800470c <USB_SetTurnaroundTime+0x124>)
 800462c:	4293      	cmp	r3, r2
 800462e:	d306      	bcc.n	800463e <USB_SetTurnaroundTime+0x56>
 8004630:	68bb      	ldr	r3, [r7, #8]
 8004632:	4a37      	ldr	r2, [pc, #220]	; (8004710 <USB_SetTurnaroundTime+0x128>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d202      	bcs.n	800463e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004638:	230d      	movs	r3, #13
 800463a:	617b      	str	r3, [r7, #20]
 800463c:	e04c      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800463e:	68bb      	ldr	r3, [r7, #8]
 8004640:	4a33      	ldr	r2, [pc, #204]	; (8004710 <USB_SetTurnaroundTime+0x128>)
 8004642:	4293      	cmp	r3, r2
 8004644:	d306      	bcc.n	8004654 <USB_SetTurnaroundTime+0x6c>
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	4a32      	ldr	r2, [pc, #200]	; (8004714 <USB_SetTurnaroundTime+0x12c>)
 800464a:	4293      	cmp	r3, r2
 800464c:	d802      	bhi.n	8004654 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800464e:	230c      	movs	r3, #12
 8004650:	617b      	str	r3, [r7, #20]
 8004652:	e041      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4a2f      	ldr	r2, [pc, #188]	; (8004714 <USB_SetTurnaroundTime+0x12c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d906      	bls.n	800466a <USB_SetTurnaroundTime+0x82>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4a2e      	ldr	r2, [pc, #184]	; (8004718 <USB_SetTurnaroundTime+0x130>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d802      	bhi.n	800466a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004664:	230b      	movs	r3, #11
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	e036      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4a2a      	ldr	r2, [pc, #168]	; (8004718 <USB_SetTurnaroundTime+0x130>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d906      	bls.n	8004680 <USB_SetTurnaroundTime+0x98>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4a29      	ldr	r2, [pc, #164]	; (800471c <USB_SetTurnaroundTime+0x134>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d802      	bhi.n	8004680 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800467a:	230a      	movs	r3, #10
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	e02b      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4a26      	ldr	r2, [pc, #152]	; (800471c <USB_SetTurnaroundTime+0x134>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d906      	bls.n	8004696 <USB_SetTurnaroundTime+0xae>
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4a25      	ldr	r2, [pc, #148]	; (8004720 <USB_SetTurnaroundTime+0x138>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d202      	bcs.n	8004696 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8004690:	2309      	movs	r3, #9
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	e020      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4a21      	ldr	r2, [pc, #132]	; (8004720 <USB_SetTurnaroundTime+0x138>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d306      	bcc.n	80046ac <USB_SetTurnaroundTime+0xc4>
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4a20      	ldr	r2, [pc, #128]	; (8004724 <USB_SetTurnaroundTime+0x13c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d802      	bhi.n	80046ac <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80046a6:	2308      	movs	r3, #8
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	e015      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4a1d      	ldr	r2, [pc, #116]	; (8004724 <USB_SetTurnaroundTime+0x13c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d906      	bls.n	80046c2 <USB_SetTurnaroundTime+0xda>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4a1c      	ldr	r2, [pc, #112]	; (8004728 <USB_SetTurnaroundTime+0x140>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d202      	bcs.n	80046c2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80046bc:	2307      	movs	r3, #7
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e00a      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80046c2:	2306      	movs	r3, #6
 80046c4:	617b      	str	r3, [r7, #20]
 80046c6:	e007      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80046c8:	79fb      	ldrb	r3, [r7, #7]
 80046ca:	2b00      	cmp	r3, #0
 80046cc:	d102      	bne.n	80046d4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80046ce:	2309      	movs	r3, #9
 80046d0:	617b      	str	r3, [r7, #20]
 80046d2:	e001      	b.n	80046d8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80046d4:	2309      	movs	r3, #9
 80046d6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	68db      	ldr	r3, [r3, #12]
 80046dc:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	68da      	ldr	r2, [r3, #12]
 80046e8:	697b      	ldr	r3, [r7, #20]
 80046ea:	029b      	lsls	r3, r3, #10
 80046ec:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80046f0:	431a      	orrs	r2, r3
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80046f6:	2300      	movs	r3, #0
}
 80046f8:	4618      	mov	r0, r3
 80046fa:	371c      	adds	r7, #28
 80046fc:	46bd      	mov	sp, r7
 80046fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004702:	4770      	bx	lr
 8004704:	00d8acbf 	.word	0x00d8acbf
 8004708:	00e4e1c0 	.word	0x00e4e1c0
 800470c:	00f42400 	.word	0x00f42400
 8004710:	01067380 	.word	0x01067380
 8004714:	011a499f 	.word	0x011a499f
 8004718:	01312cff 	.word	0x01312cff
 800471c:	014ca43f 	.word	0x014ca43f
 8004720:	016e3600 	.word	0x016e3600
 8004724:	01a6ab1f 	.word	0x01a6ab1f
 8004728:	01e84800 	.word	0x01e84800

0800472c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800472c:	b480      	push	{r7}
 800472e:	b083      	sub	sp, #12
 8004730:	af00      	add	r7, sp, #0
 8004732:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	689b      	ldr	r3, [r3, #8]
 8004738:	f043 0201 	orr.w	r2, r3, #1
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004740:	2300      	movs	r3, #0
}
 8004742:	4618      	mov	r0, r3
 8004744:	370c      	adds	r7, #12
 8004746:	46bd      	mov	sp, r7
 8004748:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474c:	4770      	bx	lr

0800474e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800474e:	b480      	push	{r7}
 8004750:	b083      	sub	sp, #12
 8004752:	af00      	add	r7, sp, #0
 8004754:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	f023 0201 	bic.w	r2, r3, #1
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004762:	2300      	movs	r3, #0
}
 8004764:	4618      	mov	r0, r3
 8004766:	370c      	adds	r7, #12
 8004768:	46bd      	mov	sp, r7
 800476a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800476e:	4770      	bx	lr

08004770 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b084      	sub	sp, #16
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
 8004778:	460b      	mov	r3, r1
 800477a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800477c:	2300      	movs	r3, #0
 800477e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68db      	ldr	r3, [r3, #12]
 8004784:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800478c:	78fb      	ldrb	r3, [r7, #3]
 800478e:	2b01      	cmp	r3, #1
 8004790:	d115      	bne.n	80047be <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68db      	ldr	r3, [r3, #12]
 8004796:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800479e:	2001      	movs	r0, #1
 80047a0:	f7fc fdf6 	bl	8001390 <HAL_Delay>
      ms++;
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	3301      	adds	r3, #1
 80047a8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80047aa:	6878      	ldr	r0, [r7, #4]
 80047ac:	f001 fa45 	bl	8005c3a <USB_GetMode>
 80047b0:	4603      	mov	r3, r0
 80047b2:	2b01      	cmp	r3, #1
 80047b4:	d01e      	beq.n	80047f4 <USB_SetCurrentMode+0x84>
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	2b31      	cmp	r3, #49	; 0x31
 80047ba:	d9f0      	bls.n	800479e <USB_SetCurrentMode+0x2e>
 80047bc:	e01a      	b.n	80047f4 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80047be:	78fb      	ldrb	r3, [r7, #3]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d115      	bne.n	80047f0 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	68db      	ldr	r3, [r3, #12]
 80047c8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047d0:	2001      	movs	r0, #1
 80047d2:	f7fc fddd 	bl	8001390 <HAL_Delay>
      ms++;
 80047d6:	68fb      	ldr	r3, [r7, #12]
 80047d8:	3301      	adds	r3, #1
 80047da:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f001 fa2c 	bl	8005c3a <USB_GetMode>
 80047e2:	4603      	mov	r3, r0
 80047e4:	2b00      	cmp	r3, #0
 80047e6:	d005      	beq.n	80047f4 <USB_SetCurrentMode+0x84>
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	2b31      	cmp	r3, #49	; 0x31
 80047ec:	d9f0      	bls.n	80047d0 <USB_SetCurrentMode+0x60>
 80047ee:	e001      	b.n	80047f4 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80047f0:	2301      	movs	r3, #1
 80047f2:	e005      	b.n	8004800 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	2b32      	cmp	r3, #50	; 0x32
 80047f8:	d101      	bne.n	80047fe <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80047fa:	2301      	movs	r3, #1
 80047fc:	e000      	b.n	8004800 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3710      	adds	r7, #16
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004808:	b084      	sub	sp, #16
 800480a:	b580      	push	{r7, lr}
 800480c:	b086      	sub	sp, #24
 800480e:	af00      	add	r7, sp, #0
 8004810:	6078      	str	r0, [r7, #4]
 8004812:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004816:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800481a:	2300      	movs	r3, #0
 800481c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004822:	2300      	movs	r3, #0
 8004824:	613b      	str	r3, [r7, #16]
 8004826:	e009      	b.n	800483c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004828:	687a      	ldr	r2, [r7, #4]
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	3340      	adds	r3, #64	; 0x40
 800482e:	009b      	lsls	r3, r3, #2
 8004830:	4413      	add	r3, r2
 8004832:	2200      	movs	r2, #0
 8004834:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004836:	693b      	ldr	r3, [r7, #16]
 8004838:	3301      	adds	r3, #1
 800483a:	613b      	str	r3, [r7, #16]
 800483c:	693b      	ldr	r3, [r7, #16]
 800483e:	2b0e      	cmp	r3, #14
 8004840:	d9f2      	bls.n	8004828 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004842:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004844:	2b00      	cmp	r3, #0
 8004846:	d11c      	bne.n	8004882 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004848:	68fb      	ldr	r3, [r7, #12]
 800484a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	68fa      	ldr	r2, [r7, #12]
 8004852:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004856:	f043 0302 	orr.w	r3, r3, #2
 800485a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004860:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800486c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004878:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	639a      	str	r2, [r3, #56]	; 0x38
 8004880:	e00b      	b.n	800489a <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004886:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004892:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048a0:	461a      	mov	r2, r3
 80048a2:	2300      	movs	r3, #0
 80048a4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048a6:	68fb      	ldr	r3, [r7, #12]
 80048a8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ac:	4619      	mov	r1, r3
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048b4:	461a      	mov	r2, r3
 80048b6:	680b      	ldr	r3, [r1, #0]
 80048b8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80048ba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80048bc:	2b01      	cmp	r3, #1
 80048be:	d10c      	bne.n	80048da <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80048c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80048c2:	2b00      	cmp	r3, #0
 80048c4:	d104      	bne.n	80048d0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80048c6:	2100      	movs	r1, #0
 80048c8:	6878      	ldr	r0, [r7, #4]
 80048ca:	f000 f965 	bl	8004b98 <USB_SetDevSpeed>
 80048ce:	e008      	b.n	80048e2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80048d0:	2101      	movs	r1, #1
 80048d2:	6878      	ldr	r0, [r7, #4]
 80048d4:	f000 f960 	bl	8004b98 <USB_SetDevSpeed>
 80048d8:	e003      	b.n	80048e2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80048da:	2103      	movs	r1, #3
 80048dc:	6878      	ldr	r0, [r7, #4]
 80048de:	f000 f95b 	bl	8004b98 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80048e2:	2110      	movs	r1, #16
 80048e4:	6878      	ldr	r0, [r7, #4]
 80048e6:	f000 f8f3 	bl	8004ad0 <USB_FlushTxFifo>
 80048ea:	4603      	mov	r3, r0
 80048ec:	2b00      	cmp	r3, #0
 80048ee:	d001      	beq.n	80048f4 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80048f0:	2301      	movs	r3, #1
 80048f2:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80048f4:	6878      	ldr	r0, [r7, #4]
 80048f6:	f000 f91f 	bl	8004b38 <USB_FlushRxFifo>
 80048fa:	4603      	mov	r3, r0
 80048fc:	2b00      	cmp	r3, #0
 80048fe:	d001      	beq.n	8004904 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004900:	2301      	movs	r3, #1
 8004902:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004904:	68fb      	ldr	r3, [r7, #12]
 8004906:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490a:	461a      	mov	r2, r3
 800490c:	2300      	movs	r3, #0
 800490e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004910:	68fb      	ldr	r3, [r7, #12]
 8004912:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004916:	461a      	mov	r2, r3
 8004918:	2300      	movs	r3, #0
 800491a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004922:	461a      	mov	r2, r3
 8004924:	2300      	movs	r3, #0
 8004926:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
 800492c:	e043      	b.n	80049b6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800492e:	693b      	ldr	r3, [r7, #16]
 8004930:	015a      	lsls	r2, r3, #5
 8004932:	68fb      	ldr	r3, [r7, #12]
 8004934:	4413      	add	r3, r2
 8004936:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800493a:	681b      	ldr	r3, [r3, #0]
 800493c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004940:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004944:	d118      	bne.n	8004978 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004946:	693b      	ldr	r3, [r7, #16]
 8004948:	2b00      	cmp	r3, #0
 800494a:	d10a      	bne.n	8004962 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800494c:	693b      	ldr	r3, [r7, #16]
 800494e:	015a      	lsls	r2, r3, #5
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4413      	add	r3, r2
 8004954:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004958:	461a      	mov	r2, r3
 800495a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800495e:	6013      	str	r3, [r2, #0]
 8004960:	e013      	b.n	800498a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004962:	693b      	ldr	r3, [r7, #16]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496e:	461a      	mov	r2, r3
 8004970:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004974:	6013      	str	r3, [r2, #0]
 8004976:	e008      	b.n	800498a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004984:	461a      	mov	r2, r3
 8004986:	2300      	movs	r3, #0
 8004988:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800498a:	693b      	ldr	r3, [r7, #16]
 800498c:	015a      	lsls	r2, r3, #5
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4413      	add	r3, r2
 8004992:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004996:	461a      	mov	r2, r3
 8004998:	2300      	movs	r3, #0
 800499a:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	015a      	lsls	r2, r3, #5
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	4413      	add	r3, r2
 80049a4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049a8:	461a      	mov	r2, r3
 80049aa:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80049ae:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049b0:	693b      	ldr	r3, [r7, #16]
 80049b2:	3301      	adds	r3, #1
 80049b4:	613b      	str	r3, [r7, #16]
 80049b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	429a      	cmp	r2, r3
 80049bc:	d3b7      	bcc.n	800492e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80049be:	2300      	movs	r3, #0
 80049c0:	613b      	str	r3, [r7, #16]
 80049c2:	e043      	b.n	8004a4c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80049c4:	693b      	ldr	r3, [r7, #16]
 80049c6:	015a      	lsls	r2, r3, #5
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	4413      	add	r3, r2
 80049cc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049d0:	681b      	ldr	r3, [r3, #0]
 80049d2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049d6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049da:	d118      	bne.n	8004a0e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80049dc:	693b      	ldr	r3, [r7, #16]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d10a      	bne.n	80049f8 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ee:	461a      	mov	r2, r3
 80049f0:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049f4:	6013      	str	r3, [r2, #0]
 80049f6:	e013      	b.n	8004a20 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80049f8:	693b      	ldr	r3, [r7, #16]
 80049fa:	015a      	lsls	r2, r3, #5
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	4413      	add	r3, r2
 8004a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a04:	461a      	mov	r2, r3
 8004a06:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a0a:	6013      	str	r3, [r2, #0]
 8004a0c:	e008      	b.n	8004a20 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a0e:	693b      	ldr	r3, [r7, #16]
 8004a10:	015a      	lsls	r2, r3, #5
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	4413      	add	r3, r2
 8004a16:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a1a:	461a      	mov	r2, r3
 8004a1c:	2300      	movs	r3, #0
 8004a1e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a20:	693b      	ldr	r3, [r7, #16]
 8004a22:	015a      	lsls	r2, r3, #5
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	4413      	add	r3, r2
 8004a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a2c:	461a      	mov	r2, r3
 8004a2e:	2300      	movs	r3, #0
 8004a30:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a32:	693b      	ldr	r3, [r7, #16]
 8004a34:	015a      	lsls	r2, r3, #5
 8004a36:	68fb      	ldr	r3, [r7, #12]
 8004a38:	4413      	add	r3, r2
 8004a3a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a3e:	461a      	mov	r2, r3
 8004a40:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a44:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a46:	693b      	ldr	r3, [r7, #16]
 8004a48:	3301      	adds	r3, #1
 8004a4a:	613b      	str	r3, [r7, #16]
 8004a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a4e:	693a      	ldr	r2, [r7, #16]
 8004a50:	429a      	cmp	r2, r3
 8004a52:	d3b7      	bcc.n	80049c4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a5a:	691b      	ldr	r3, [r3, #16]
 8004a5c:	68fa      	ldr	r2, [r7, #12]
 8004a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a62:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004a66:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	2200      	movs	r2, #0
 8004a6c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004a74:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004a76:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d105      	bne.n	8004a88 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	699b      	ldr	r3, [r3, #24]
 8004a80:	f043 0210 	orr.w	r2, r3, #16
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	699a      	ldr	r2, [r3, #24]
 8004a8c:	4b0f      	ldr	r3, [pc, #60]	; (8004acc <USB_DevInit+0x2c4>)
 8004a8e:	4313      	orrs	r3, r2
 8004a90:	687a      	ldr	r2, [r7, #4]
 8004a92:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004a94:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d005      	beq.n	8004aa6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	699b      	ldr	r3, [r3, #24]
 8004a9e:	f043 0208 	orr.w	r2, r3, #8
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004aa8:	2b01      	cmp	r3, #1
 8004aaa:	d107      	bne.n	8004abc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	699b      	ldr	r3, [r3, #24]
 8004ab0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ab4:	f043 0304 	orr.w	r3, r3, #4
 8004ab8:	687a      	ldr	r2, [r7, #4]
 8004aba:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004abc:	7dfb      	ldrb	r3, [r7, #23]
}
 8004abe:	4618      	mov	r0, r3
 8004ac0:	3718      	adds	r7, #24
 8004ac2:	46bd      	mov	sp, r7
 8004ac4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004ac8:	b004      	add	sp, #16
 8004aca:	4770      	bx	lr
 8004acc:	803c3800 	.word	0x803c3800

08004ad0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004ada:	2300      	movs	r3, #0
 8004adc:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ae4:	68fb      	ldr	r3, [r7, #12]
 8004ae6:	4a13      	ldr	r2, [pc, #76]	; (8004b34 <USB_FlushTxFifo+0x64>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d901      	bls.n	8004af0 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004aec:	2303      	movs	r3, #3
 8004aee:	e01b      	b.n	8004b28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	691b      	ldr	r3, [r3, #16]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	daf2      	bge.n	8004ade <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004af8:	2300      	movs	r3, #0
 8004afa:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004afc:	683b      	ldr	r3, [r7, #0]
 8004afe:	019b      	lsls	r3, r3, #6
 8004b00:	f043 0220 	orr.w	r2, r3, #32
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	3301      	adds	r3, #1
 8004b0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	4a08      	ldr	r2, [pc, #32]	; (8004b34 <USB_FlushTxFifo+0x64>)
 8004b12:	4293      	cmp	r3, r2
 8004b14:	d901      	bls.n	8004b1a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b16:	2303      	movs	r3, #3
 8004b18:	e006      	b.n	8004b28 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	691b      	ldr	r3, [r3, #16]
 8004b1e:	f003 0320 	and.w	r3, r3, #32
 8004b22:	2b20      	cmp	r3, #32
 8004b24:	d0f0      	beq.n	8004b08 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b26:	2300      	movs	r3, #0
}
 8004b28:	4618      	mov	r0, r3
 8004b2a:	3714      	adds	r7, #20
 8004b2c:	46bd      	mov	sp, r7
 8004b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b32:	4770      	bx	lr
 8004b34:	00030d40 	.word	0x00030d40

08004b38 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b085      	sub	sp, #20
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b40:	2300      	movs	r3, #0
 8004b42:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	3301      	adds	r3, #1
 8004b48:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	4a11      	ldr	r2, [pc, #68]	; (8004b94 <USB_FlushRxFifo+0x5c>)
 8004b4e:	4293      	cmp	r3, r2
 8004b50:	d901      	bls.n	8004b56 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004b52:	2303      	movs	r3, #3
 8004b54:	e018      	b.n	8004b88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	691b      	ldr	r3, [r3, #16]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	daf2      	bge.n	8004b44 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004b5e:	2300      	movs	r3, #0
 8004b60:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	2210      	movs	r2, #16
 8004b66:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	3301      	adds	r3, #1
 8004b6c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	4a08      	ldr	r2, [pc, #32]	; (8004b94 <USB_FlushRxFifo+0x5c>)
 8004b72:	4293      	cmp	r3, r2
 8004b74:	d901      	bls.n	8004b7a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004b76:	2303      	movs	r3, #3
 8004b78:	e006      	b.n	8004b88 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	691b      	ldr	r3, [r3, #16]
 8004b7e:	f003 0310 	and.w	r3, r3, #16
 8004b82:	2b10      	cmp	r3, #16
 8004b84:	d0f0      	beq.n	8004b68 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004b86:	2300      	movs	r3, #0
}
 8004b88:	4618      	mov	r0, r3
 8004b8a:	3714      	adds	r7, #20
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b92:	4770      	bx	lr
 8004b94:	00030d40 	.word	0x00030d40

08004b98 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004b98:	b480      	push	{r7}
 8004b9a:	b085      	sub	sp, #20
 8004b9c:	af00      	add	r7, sp, #0
 8004b9e:	6078      	str	r0, [r7, #4]
 8004ba0:	460b      	mov	r3, r1
 8004ba2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bae:	681a      	ldr	r2, [r3, #0]
 8004bb0:	78fb      	ldrb	r3, [r7, #3]
 8004bb2:	68f9      	ldr	r1, [r7, #12]
 8004bb4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bb8:	4313      	orrs	r3, r2
 8004bba:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004bbc:	2300      	movs	r3, #0
}
 8004bbe:	4618      	mov	r0, r3
 8004bc0:	3714      	adds	r7, #20
 8004bc2:	46bd      	mov	sp, r7
 8004bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bc8:	4770      	bx	lr

08004bca <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004bca:	b480      	push	{r7}
 8004bcc:	b087      	sub	sp, #28
 8004bce:	af00      	add	r7, sp, #0
 8004bd0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004bd6:	693b      	ldr	r3, [r7, #16]
 8004bd8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bdc:	689b      	ldr	r3, [r3, #8]
 8004bde:	f003 0306 	and.w	r3, r3, #6
 8004be2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d102      	bne.n	8004bf0 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004bea:	2300      	movs	r3, #0
 8004bec:	75fb      	strb	r3, [r7, #23]
 8004bee:	e00a      	b.n	8004c06 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	2b02      	cmp	r3, #2
 8004bf4:	d002      	beq.n	8004bfc <USB_GetDevSpeed+0x32>
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	2b06      	cmp	r3, #6
 8004bfa:	d102      	bne.n	8004c02 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004bfc:	2302      	movs	r3, #2
 8004bfe:	75fb      	strb	r3, [r7, #23]
 8004c00:	e001      	b.n	8004c06 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004c02:	230f      	movs	r3, #15
 8004c04:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004c06:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c08:	4618      	mov	r0, r3
 8004c0a:	371c      	adds	r7, #28
 8004c0c:	46bd      	mov	sp, r7
 8004c0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c12:	4770      	bx	lr

08004c14 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c14:	b480      	push	{r7}
 8004c16:	b085      	sub	sp, #20
 8004c18:	af00      	add	r7, sp, #0
 8004c1a:	6078      	str	r0, [r7, #4]
 8004c1c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	781b      	ldrb	r3, [r3, #0]
 8004c26:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c28:	683b      	ldr	r3, [r7, #0]
 8004c2a:	785b      	ldrb	r3, [r3, #1]
 8004c2c:	2b01      	cmp	r3, #1
 8004c2e:	d13a      	bne.n	8004ca6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c36:	69da      	ldr	r2, [r3, #28]
 8004c38:	683b      	ldr	r3, [r7, #0]
 8004c3a:	781b      	ldrb	r3, [r3, #0]
 8004c3c:	f003 030f 	and.w	r3, r3, #15
 8004c40:	2101      	movs	r1, #1
 8004c42:	fa01 f303 	lsl.w	r3, r1, r3
 8004c46:	b29b      	uxth	r3, r3
 8004c48:	68f9      	ldr	r1, [r7, #12]
 8004c4a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c4e:	4313      	orrs	r3, r2
 8004c50:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004c52:	68bb      	ldr	r3, [r7, #8]
 8004c54:	015a      	lsls	r2, r3, #5
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	4413      	add	r3, r2
 8004c5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004c64:	2b00      	cmp	r3, #0
 8004c66:	d155      	bne.n	8004d14 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c68:	68bb      	ldr	r3, [r7, #8]
 8004c6a:	015a      	lsls	r2, r3, #5
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	4413      	add	r3, r2
 8004c70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c7e:	683b      	ldr	r3, [r7, #0]
 8004c80:	791b      	ldrb	r3, [r3, #4]
 8004c82:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c84:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004c86:	68bb      	ldr	r3, [r7, #8]
 8004c88:	059b      	lsls	r3, r3, #22
 8004c8a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004c8c:	4313      	orrs	r3, r2
 8004c8e:	68ba      	ldr	r2, [r7, #8]
 8004c90:	0151      	lsls	r1, r2, #5
 8004c92:	68fa      	ldr	r2, [r7, #12]
 8004c94:	440a      	add	r2, r1
 8004c96:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c9a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c9e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004ca2:	6013      	str	r3, [r2, #0]
 8004ca4:	e036      	b.n	8004d14 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cac:	69da      	ldr	r2, [r3, #28]
 8004cae:	683b      	ldr	r3, [r7, #0]
 8004cb0:	781b      	ldrb	r3, [r3, #0]
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	2101      	movs	r1, #1
 8004cb8:	fa01 f303 	lsl.w	r3, r1, r3
 8004cbc:	041b      	lsls	r3, r3, #16
 8004cbe:	68f9      	ldr	r1, [r7, #12]
 8004cc0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004cc8:	68bb      	ldr	r3, [r7, #8]
 8004cca:	015a      	lsls	r2, r3, #5
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	4413      	add	r3, r2
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d11a      	bne.n	8004d14 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	015a      	lsls	r2, r3, #5
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	4413      	add	r3, r2
 8004ce6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cea:	681a      	ldr	r2, [r3, #0]
 8004cec:	683b      	ldr	r3, [r7, #0]
 8004cee:	68db      	ldr	r3, [r3, #12]
 8004cf0:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	791b      	ldrb	r3, [r3, #4]
 8004cf8:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004cfa:	430b      	orrs	r3, r1
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	68ba      	ldr	r2, [r7, #8]
 8004d00:	0151      	lsls	r1, r2, #5
 8004d02:	68fa      	ldr	r2, [r7, #12]
 8004d04:	440a      	add	r2, r1
 8004d06:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d12:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004d14:	2300      	movs	r3, #0
}
 8004d16:	4618      	mov	r0, r3
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr
	...

08004d24 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b085      	sub	sp, #20
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	6078      	str	r0, [r7, #4]
 8004d2c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d32:	683b      	ldr	r3, [r7, #0]
 8004d34:	781b      	ldrb	r3, [r3, #0]
 8004d36:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	785b      	ldrb	r3, [r3, #1]
 8004d3c:	2b01      	cmp	r3, #1
 8004d3e:	d161      	bne.n	8004e04 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d40:	68bb      	ldr	r3, [r7, #8]
 8004d42:	015a      	lsls	r2, r3, #5
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4413      	add	r3, r2
 8004d48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004d52:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004d56:	d11f      	bne.n	8004d98 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004d58:	68bb      	ldr	r3, [r7, #8]
 8004d5a:	015a      	lsls	r2, r3, #5
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	4413      	add	r3, r2
 8004d60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	68ba      	ldr	r2, [r7, #8]
 8004d68:	0151      	lsls	r1, r2, #5
 8004d6a:	68fa      	ldr	r2, [r7, #12]
 8004d6c:	440a      	add	r2, r1
 8004d6e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d72:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004d76:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	015a      	lsls	r2, r3, #5
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	4413      	add	r3, r2
 8004d80:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d84:	681b      	ldr	r3, [r3, #0]
 8004d86:	68ba      	ldr	r2, [r7, #8]
 8004d88:	0151      	lsls	r1, r2, #5
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	440a      	add	r2, r1
 8004d8e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d92:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004d96:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d9e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004da0:	683b      	ldr	r3, [r7, #0]
 8004da2:	781b      	ldrb	r3, [r3, #0]
 8004da4:	f003 030f 	and.w	r3, r3, #15
 8004da8:	2101      	movs	r1, #1
 8004daa:	fa01 f303 	lsl.w	r3, r1, r3
 8004dae:	b29b      	uxth	r3, r3
 8004db0:	43db      	mvns	r3, r3
 8004db2:	68f9      	ldr	r1, [r7, #12]
 8004db4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004db8:	4013      	ands	r3, r2
 8004dba:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc2:	69da      	ldr	r2, [r3, #28]
 8004dc4:	683b      	ldr	r3, [r7, #0]
 8004dc6:	781b      	ldrb	r3, [r3, #0]
 8004dc8:	f003 030f 	and.w	r3, r3, #15
 8004dcc:	2101      	movs	r1, #1
 8004dce:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd2:	b29b      	uxth	r3, r3
 8004dd4:	43db      	mvns	r3, r3
 8004dd6:	68f9      	ldr	r1, [r7, #12]
 8004dd8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ddc:	4013      	ands	r3, r2
 8004dde:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	015a      	lsls	r2, r3, #5
 8004de4:	68fb      	ldr	r3, [r7, #12]
 8004de6:	4413      	add	r3, r2
 8004de8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dec:	681a      	ldr	r2, [r3, #0]
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	0159      	lsls	r1, r3, #5
 8004df2:	68fb      	ldr	r3, [r7, #12]
 8004df4:	440b      	add	r3, r1
 8004df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfa:	4619      	mov	r1, r3
 8004dfc:	4b35      	ldr	r3, [pc, #212]	; (8004ed4 <USB_DeactivateEndpoint+0x1b0>)
 8004dfe:	4013      	ands	r3, r2
 8004e00:	600b      	str	r3, [r1, #0]
 8004e02:	e060      	b.n	8004ec6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e04:	68bb      	ldr	r3, [r7, #8]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	68fb      	ldr	r3, [r7, #12]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e1a:	d11f      	bne.n	8004e5c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e1c:	68bb      	ldr	r3, [r7, #8]
 8004e1e:	015a      	lsls	r2, r3, #5
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	4413      	add	r3, r2
 8004e24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	68ba      	ldr	r2, [r7, #8]
 8004e2c:	0151      	lsls	r1, r2, #5
 8004e2e:	68fa      	ldr	r2, [r7, #12]
 8004e30:	440a      	add	r2, r1
 8004e32:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e3a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	015a      	lsls	r2, r3, #5
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	4413      	add	r3, r2
 8004e44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	68ba      	ldr	r2, [r7, #8]
 8004e4c:	0151      	lsls	r1, r2, #5
 8004e4e:	68fa      	ldr	r2, [r7, #12]
 8004e50:	440a      	add	r2, r1
 8004e52:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004e5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	781b      	ldrb	r3, [r3, #0]
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	2101      	movs	r1, #1
 8004e6e:	fa01 f303 	lsl.w	r3, r1, r3
 8004e72:	041b      	lsls	r3, r3, #16
 8004e74:	43db      	mvns	r3, r3
 8004e76:	68f9      	ldr	r1, [r7, #12]
 8004e78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e7c:	4013      	ands	r3, r2
 8004e7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004e80:	68fb      	ldr	r3, [r7, #12]
 8004e82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e86:	69da      	ldr	r2, [r3, #28]
 8004e88:	683b      	ldr	r3, [r7, #0]
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	f003 030f 	and.w	r3, r3, #15
 8004e90:	2101      	movs	r1, #1
 8004e92:	fa01 f303 	lsl.w	r3, r1, r3
 8004e96:	041b      	lsls	r3, r3, #16
 8004e98:	43db      	mvns	r3, r3
 8004e9a:	68f9      	ldr	r1, [r7, #12]
 8004e9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ea0:	4013      	ands	r3, r2
 8004ea2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004ea4:	68bb      	ldr	r3, [r7, #8]
 8004ea6:	015a      	lsls	r2, r3, #5
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	4413      	add	r3, r2
 8004eac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004eb0:	681a      	ldr	r2, [r3, #0]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	0159      	lsls	r1, r3, #5
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	440b      	add	r3, r1
 8004eba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ebe:	4619      	mov	r1, r3
 8004ec0:	4b05      	ldr	r3, [pc, #20]	; (8004ed8 <USB_DeactivateEndpoint+0x1b4>)
 8004ec2:	4013      	ands	r3, r2
 8004ec4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004ec6:	2300      	movs	r3, #0
}
 8004ec8:	4618      	mov	r0, r3
 8004eca:	3714      	adds	r7, #20
 8004ecc:	46bd      	mov	sp, r7
 8004ece:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ed2:	4770      	bx	lr
 8004ed4:	ec337800 	.word	0xec337800
 8004ed8:	eff37800 	.word	0xeff37800

08004edc <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004edc:	b580      	push	{r7, lr}
 8004ede:	b08a      	sub	sp, #40	; 0x28
 8004ee0:	af02      	add	r7, sp, #8
 8004ee2:	60f8      	str	r0, [r7, #12]
 8004ee4:	60b9      	str	r1, [r7, #8]
 8004ee6:	4613      	mov	r3, r2
 8004ee8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004eee:	68bb      	ldr	r3, [r7, #8]
 8004ef0:	781b      	ldrb	r3, [r3, #0]
 8004ef2:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004ef4:	68bb      	ldr	r3, [r7, #8]
 8004ef6:	785b      	ldrb	r3, [r3, #1]
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	f040 815c 	bne.w	80051b6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004efe:	68bb      	ldr	r3, [r7, #8]
 8004f00:	699b      	ldr	r3, [r3, #24]
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d132      	bne.n	8004f6c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f06:	69bb      	ldr	r3, [r7, #24]
 8004f08:	015a      	lsls	r2, r3, #5
 8004f0a:	69fb      	ldr	r3, [r7, #28]
 8004f0c:	4413      	add	r3, r2
 8004f0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f12:	691b      	ldr	r3, [r3, #16]
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	0151      	lsls	r1, r2, #5
 8004f18:	69fa      	ldr	r2, [r7, #28]
 8004f1a:	440a      	add	r2, r1
 8004f1c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f20:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f24:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f28:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f2a:	69bb      	ldr	r3, [r7, #24]
 8004f2c:	015a      	lsls	r2, r3, #5
 8004f2e:	69fb      	ldr	r3, [r7, #28]
 8004f30:	4413      	add	r3, r2
 8004f32:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f36:	691b      	ldr	r3, [r3, #16]
 8004f38:	69ba      	ldr	r2, [r7, #24]
 8004f3a:	0151      	lsls	r1, r2, #5
 8004f3c:	69fa      	ldr	r2, [r7, #28]
 8004f3e:	440a      	add	r2, r1
 8004f40:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f44:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f48:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f4a:	69bb      	ldr	r3, [r7, #24]
 8004f4c:	015a      	lsls	r2, r3, #5
 8004f4e:	69fb      	ldr	r3, [r7, #28]
 8004f50:	4413      	add	r3, r2
 8004f52:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f56:	691b      	ldr	r3, [r3, #16]
 8004f58:	69ba      	ldr	r2, [r7, #24]
 8004f5a:	0151      	lsls	r1, r2, #5
 8004f5c:	69fa      	ldr	r2, [r7, #28]
 8004f5e:	440a      	add	r2, r1
 8004f60:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f64:	0cdb      	lsrs	r3, r3, #19
 8004f66:	04db      	lsls	r3, r3, #19
 8004f68:	6113      	str	r3, [r2, #16]
 8004f6a:	e074      	b.n	8005056 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004f6c:	69bb      	ldr	r3, [r7, #24]
 8004f6e:	015a      	lsls	r2, r3, #5
 8004f70:	69fb      	ldr	r3, [r7, #28]
 8004f72:	4413      	add	r3, r2
 8004f74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f78:	691b      	ldr	r3, [r3, #16]
 8004f7a:	69ba      	ldr	r2, [r7, #24]
 8004f7c:	0151      	lsls	r1, r2, #5
 8004f7e:	69fa      	ldr	r2, [r7, #28]
 8004f80:	440a      	add	r2, r1
 8004f82:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f86:	0cdb      	lsrs	r3, r3, #19
 8004f88:	04db      	lsls	r3, r3, #19
 8004f8a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f8c:	69bb      	ldr	r3, [r7, #24]
 8004f8e:	015a      	lsls	r2, r3, #5
 8004f90:	69fb      	ldr	r3, [r7, #28]
 8004f92:	4413      	add	r3, r2
 8004f94:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f98:	691b      	ldr	r3, [r3, #16]
 8004f9a:	69ba      	ldr	r2, [r7, #24]
 8004f9c:	0151      	lsls	r1, r2, #5
 8004f9e:	69fa      	ldr	r2, [r7, #28]
 8004fa0:	440a      	add	r2, r1
 8004fa2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fa6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004faa:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004fae:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004fb0:	69bb      	ldr	r3, [r7, #24]
 8004fb2:	015a      	lsls	r2, r3, #5
 8004fb4:	69fb      	ldr	r3, [r7, #28]
 8004fb6:	4413      	add	r3, r2
 8004fb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fbc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004fbe:	68bb      	ldr	r3, [r7, #8]
 8004fc0:	6999      	ldr	r1, [r3, #24]
 8004fc2:	68bb      	ldr	r3, [r7, #8]
 8004fc4:	68db      	ldr	r3, [r3, #12]
 8004fc6:	440b      	add	r3, r1
 8004fc8:	1e59      	subs	r1, r3, #1
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	68db      	ldr	r3, [r3, #12]
 8004fce:	fbb1 f3f3 	udiv	r3, r1, r3
 8004fd2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004fd4:	4b9d      	ldr	r3, [pc, #628]	; (800524c <USB_EPStartXfer+0x370>)
 8004fd6:	400b      	ands	r3, r1
 8004fd8:	69b9      	ldr	r1, [r7, #24]
 8004fda:	0148      	lsls	r0, r1, #5
 8004fdc:	69f9      	ldr	r1, [r7, #28]
 8004fde:	4401      	add	r1, r0
 8004fe0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004fe4:	4313      	orrs	r3, r2
 8004fe6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004fe8:	69bb      	ldr	r3, [r7, #24]
 8004fea:	015a      	lsls	r2, r3, #5
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	4413      	add	r3, r2
 8004ff0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff4:	691a      	ldr	r2, [r3, #16]
 8004ff6:	68bb      	ldr	r3, [r7, #8]
 8004ff8:	699b      	ldr	r3, [r3, #24]
 8004ffa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004ffe:	69b9      	ldr	r1, [r7, #24]
 8005000:	0148      	lsls	r0, r1, #5
 8005002:	69f9      	ldr	r1, [r7, #28]
 8005004:	4401      	add	r1, r0
 8005006:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800500a:	4313      	orrs	r3, r2
 800500c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 800500e:	68bb      	ldr	r3, [r7, #8]
 8005010:	791b      	ldrb	r3, [r3, #4]
 8005012:	2b01      	cmp	r3, #1
 8005014:	d11f      	bne.n	8005056 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005022:	691b      	ldr	r3, [r3, #16]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	0151      	lsls	r1, r2, #5
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	440a      	add	r2, r1
 800502c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005030:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8005034:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8005036:	69bb      	ldr	r3, [r7, #24]
 8005038:	015a      	lsls	r2, r3, #5
 800503a:	69fb      	ldr	r3, [r7, #28]
 800503c:	4413      	add	r3, r2
 800503e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005042:	691b      	ldr	r3, [r3, #16]
 8005044:	69ba      	ldr	r2, [r7, #24]
 8005046:	0151      	lsls	r1, r2, #5
 8005048:	69fa      	ldr	r2, [r7, #28]
 800504a:	440a      	add	r2, r1
 800504c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005050:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005054:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8005056:	79fb      	ldrb	r3, [r7, #7]
 8005058:	2b01      	cmp	r3, #1
 800505a:	d14b      	bne.n	80050f4 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 800505c:	68bb      	ldr	r3, [r7, #8]
 800505e:	695b      	ldr	r3, [r3, #20]
 8005060:	2b00      	cmp	r3, #0
 8005062:	d009      	beq.n	8005078 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005064:	69bb      	ldr	r3, [r7, #24]
 8005066:	015a      	lsls	r2, r3, #5
 8005068:	69fb      	ldr	r3, [r7, #28]
 800506a:	4413      	add	r3, r2
 800506c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005070:	461a      	mov	r2, r3
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	695b      	ldr	r3, [r3, #20]
 8005076:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8005078:	68bb      	ldr	r3, [r7, #8]
 800507a:	791b      	ldrb	r3, [r3, #4]
 800507c:	2b01      	cmp	r3, #1
 800507e:	d128      	bne.n	80050d2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005080:	69fb      	ldr	r3, [r7, #28]
 8005082:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005086:	689b      	ldr	r3, [r3, #8]
 8005088:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800508c:	2b00      	cmp	r3, #0
 800508e:	d110      	bne.n	80050b2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005090:	69bb      	ldr	r3, [r7, #24]
 8005092:	015a      	lsls	r2, r3, #5
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	4413      	add	r3, r2
 8005098:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509c:	681b      	ldr	r3, [r3, #0]
 800509e:	69ba      	ldr	r2, [r7, #24]
 80050a0:	0151      	lsls	r1, r2, #5
 80050a2:	69fa      	ldr	r2, [r7, #28]
 80050a4:	440a      	add	r2, r1
 80050a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050aa:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050ae:	6013      	str	r3, [r2, #0]
 80050b0:	e00f      	b.n	80050d2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80050b2:	69bb      	ldr	r3, [r7, #24]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	69ba      	ldr	r2, [r7, #24]
 80050c2:	0151      	lsls	r1, r2, #5
 80050c4:	69fa      	ldr	r2, [r7, #28]
 80050c6:	440a      	add	r2, r1
 80050c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80050d0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050d2:	69bb      	ldr	r3, [r7, #24]
 80050d4:	015a      	lsls	r2, r3, #5
 80050d6:	69fb      	ldr	r3, [r7, #28]
 80050d8:	4413      	add	r3, r2
 80050da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	69ba      	ldr	r2, [r7, #24]
 80050e2:	0151      	lsls	r1, r2, #5
 80050e4:	69fa      	ldr	r2, [r7, #28]
 80050e6:	440a      	add	r2, r1
 80050e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050ec:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80050f0:	6013      	str	r3, [r2, #0]
 80050f2:	e133      	b.n	800535c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	015a      	lsls	r2, r3, #5
 80050f8:	69fb      	ldr	r3, [r7, #28]
 80050fa:	4413      	add	r3, r2
 80050fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	69ba      	ldr	r2, [r7, #24]
 8005104:	0151      	lsls	r1, r2, #5
 8005106:	69fa      	ldr	r2, [r7, #28]
 8005108:	440a      	add	r2, r1
 800510a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800510e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005112:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8005114:	68bb      	ldr	r3, [r7, #8]
 8005116:	791b      	ldrb	r3, [r3, #4]
 8005118:	2b01      	cmp	r3, #1
 800511a:	d015      	beq.n	8005148 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 800511c:	68bb      	ldr	r3, [r7, #8]
 800511e:	699b      	ldr	r3, [r3, #24]
 8005120:	2b00      	cmp	r3, #0
 8005122:	f000 811b 	beq.w	800535c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005126:	69fb      	ldr	r3, [r7, #28]
 8005128:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800512c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800512e:	68bb      	ldr	r3, [r7, #8]
 8005130:	781b      	ldrb	r3, [r3, #0]
 8005132:	f003 030f 	and.w	r3, r3, #15
 8005136:	2101      	movs	r1, #1
 8005138:	fa01 f303 	lsl.w	r3, r1, r3
 800513c:	69f9      	ldr	r1, [r7, #28]
 800513e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005142:	4313      	orrs	r3, r2
 8005144:	634b      	str	r3, [r1, #52]	; 0x34
 8005146:	e109      	b.n	800535c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005148:	69fb      	ldr	r3, [r7, #28]
 800514a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800514e:	689b      	ldr	r3, [r3, #8]
 8005150:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005154:	2b00      	cmp	r3, #0
 8005156:	d110      	bne.n	800517a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8005158:	69bb      	ldr	r3, [r7, #24]
 800515a:	015a      	lsls	r2, r3, #5
 800515c:	69fb      	ldr	r3, [r7, #28]
 800515e:	4413      	add	r3, r2
 8005160:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	69ba      	ldr	r2, [r7, #24]
 8005168:	0151      	lsls	r1, r2, #5
 800516a:	69fa      	ldr	r2, [r7, #28]
 800516c:	440a      	add	r2, r1
 800516e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005172:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005176:	6013      	str	r3, [r2, #0]
 8005178:	e00f      	b.n	800519a <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800517a:	69bb      	ldr	r3, [r7, #24]
 800517c:	015a      	lsls	r2, r3, #5
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	4413      	add	r3, r2
 8005182:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005186:	681b      	ldr	r3, [r3, #0]
 8005188:	69ba      	ldr	r2, [r7, #24]
 800518a:	0151      	lsls	r1, r2, #5
 800518c:	69fa      	ldr	r2, [r7, #28]
 800518e:	440a      	add	r2, r1
 8005190:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005194:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005198:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800519a:	68bb      	ldr	r3, [r7, #8]
 800519c:	6919      	ldr	r1, [r3, #16]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	781a      	ldrb	r2, [r3, #0]
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	699b      	ldr	r3, [r3, #24]
 80051a6:	b298      	uxth	r0, r3
 80051a8:	79fb      	ldrb	r3, [r7, #7]
 80051aa:	9300      	str	r3, [sp, #0]
 80051ac:	4603      	mov	r3, r0
 80051ae:	68f8      	ldr	r0, [r7, #12]
 80051b0:	f000 fade 	bl	8005770 <USB_WritePacket>
 80051b4:	e0d2      	b.n	800535c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80051b6:	69bb      	ldr	r3, [r7, #24]
 80051b8:	015a      	lsls	r2, r3, #5
 80051ba:	69fb      	ldr	r3, [r7, #28]
 80051bc:	4413      	add	r3, r2
 80051be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051c2:	691b      	ldr	r3, [r3, #16]
 80051c4:	69ba      	ldr	r2, [r7, #24]
 80051c6:	0151      	lsls	r1, r2, #5
 80051c8:	69fa      	ldr	r2, [r7, #28]
 80051ca:	440a      	add	r2, r1
 80051cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051d0:	0cdb      	lsrs	r3, r3, #19
 80051d2:	04db      	lsls	r3, r3, #19
 80051d4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80051d6:	69bb      	ldr	r3, [r7, #24]
 80051d8:	015a      	lsls	r2, r3, #5
 80051da:	69fb      	ldr	r3, [r7, #28]
 80051dc:	4413      	add	r3, r2
 80051de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051e2:	691b      	ldr	r3, [r3, #16]
 80051e4:	69ba      	ldr	r2, [r7, #24]
 80051e6:	0151      	lsls	r1, r2, #5
 80051e8:	69fa      	ldr	r2, [r7, #28]
 80051ea:	440a      	add	r2, r1
 80051ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80051f0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80051f4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80051f8:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d126      	bne.n	8005250 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8005202:	69bb      	ldr	r3, [r7, #24]
 8005204:	015a      	lsls	r2, r3, #5
 8005206:	69fb      	ldr	r3, [r7, #28]
 8005208:	4413      	add	r3, r2
 800520a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800520e:	691a      	ldr	r2, [r3, #16]
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	68db      	ldr	r3, [r3, #12]
 8005214:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005218:	69b9      	ldr	r1, [r7, #24]
 800521a:	0148      	lsls	r0, r1, #5
 800521c:	69f9      	ldr	r1, [r7, #28]
 800521e:	4401      	add	r1, r0
 8005220:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005224:	4313      	orrs	r3, r2
 8005226:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005228:	69bb      	ldr	r3, [r7, #24]
 800522a:	015a      	lsls	r2, r3, #5
 800522c:	69fb      	ldr	r3, [r7, #28]
 800522e:	4413      	add	r3, r2
 8005230:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005234:	691b      	ldr	r3, [r3, #16]
 8005236:	69ba      	ldr	r2, [r7, #24]
 8005238:	0151      	lsls	r1, r2, #5
 800523a:	69fa      	ldr	r2, [r7, #28]
 800523c:	440a      	add	r2, r1
 800523e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005242:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005246:	6113      	str	r3, [r2, #16]
 8005248:	e03a      	b.n	80052c0 <USB_EPStartXfer+0x3e4>
 800524a:	bf00      	nop
 800524c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8005250:	68bb      	ldr	r3, [r7, #8]
 8005252:	699a      	ldr	r2, [r3, #24]
 8005254:	68bb      	ldr	r3, [r7, #8]
 8005256:	68db      	ldr	r3, [r3, #12]
 8005258:	4413      	add	r3, r2
 800525a:	1e5a      	subs	r2, r3, #1
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	68db      	ldr	r3, [r3, #12]
 8005260:	fbb2 f3f3 	udiv	r3, r2, r3
 8005264:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8005266:	68bb      	ldr	r3, [r7, #8]
 8005268:	68db      	ldr	r3, [r3, #12]
 800526a:	8afa      	ldrh	r2, [r7, #22]
 800526c:	fb03 f202 	mul.w	r2, r3, r2
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8005274:	69bb      	ldr	r3, [r7, #24]
 8005276:	015a      	lsls	r2, r3, #5
 8005278:	69fb      	ldr	r3, [r7, #28]
 800527a:	4413      	add	r3, r2
 800527c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005280:	691a      	ldr	r2, [r3, #16]
 8005282:	8afb      	ldrh	r3, [r7, #22]
 8005284:	04d9      	lsls	r1, r3, #19
 8005286:	4b38      	ldr	r3, [pc, #224]	; (8005368 <USB_EPStartXfer+0x48c>)
 8005288:	400b      	ands	r3, r1
 800528a:	69b9      	ldr	r1, [r7, #24]
 800528c:	0148      	lsls	r0, r1, #5
 800528e:	69f9      	ldr	r1, [r7, #28]
 8005290:	4401      	add	r1, r0
 8005292:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005296:	4313      	orrs	r3, r2
 8005298:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800529a:	69bb      	ldr	r3, [r7, #24]
 800529c:	015a      	lsls	r2, r3, #5
 800529e:	69fb      	ldr	r3, [r7, #28]
 80052a0:	4413      	add	r3, r2
 80052a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a6:	691a      	ldr	r2, [r3, #16]
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	69db      	ldr	r3, [r3, #28]
 80052ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052b0:	69b9      	ldr	r1, [r7, #24]
 80052b2:	0148      	lsls	r0, r1, #5
 80052b4:	69f9      	ldr	r1, [r7, #28]
 80052b6:	4401      	add	r1, r0
 80052b8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052bc:	4313      	orrs	r3, r2
 80052be:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80052c0:	79fb      	ldrb	r3, [r7, #7]
 80052c2:	2b01      	cmp	r3, #1
 80052c4:	d10d      	bne.n	80052e2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80052c6:	68bb      	ldr	r3, [r7, #8]
 80052c8:	691b      	ldr	r3, [r3, #16]
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d009      	beq.n	80052e2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80052ce:	68bb      	ldr	r3, [r7, #8]
 80052d0:	6919      	ldr	r1, [r3, #16]
 80052d2:	69bb      	ldr	r3, [r7, #24]
 80052d4:	015a      	lsls	r2, r3, #5
 80052d6:	69fb      	ldr	r3, [r7, #28]
 80052d8:	4413      	add	r3, r2
 80052da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052de:	460a      	mov	r2, r1
 80052e0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	791b      	ldrb	r3, [r3, #4]
 80052e6:	2b01      	cmp	r3, #1
 80052e8:	d128      	bne.n	800533c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80052ea:	69fb      	ldr	r3, [r7, #28]
 80052ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d110      	bne.n	800531c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80052fa:	69bb      	ldr	r3, [r7, #24]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	69fb      	ldr	r3, [r7, #28]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	69ba      	ldr	r2, [r7, #24]
 800530a:	0151      	lsls	r1, r2, #5
 800530c:	69fa      	ldr	r2, [r7, #28]
 800530e:	440a      	add	r2, r1
 8005310:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005314:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005318:	6013      	str	r3, [r2, #0]
 800531a:	e00f      	b.n	800533c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800531c:	69bb      	ldr	r3, [r7, #24]
 800531e:	015a      	lsls	r2, r3, #5
 8005320:	69fb      	ldr	r3, [r7, #28]
 8005322:	4413      	add	r3, r2
 8005324:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	69ba      	ldr	r2, [r7, #24]
 800532c:	0151      	lsls	r1, r2, #5
 800532e:	69fa      	ldr	r2, [r7, #28]
 8005330:	440a      	add	r2, r1
 8005332:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005336:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800533a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800533c:	69bb      	ldr	r3, [r7, #24]
 800533e:	015a      	lsls	r2, r3, #5
 8005340:	69fb      	ldr	r3, [r7, #28]
 8005342:	4413      	add	r3, r2
 8005344:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	69ba      	ldr	r2, [r7, #24]
 800534c:	0151      	lsls	r1, r2, #5
 800534e:	69fa      	ldr	r2, [r7, #28]
 8005350:	440a      	add	r2, r1
 8005352:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005356:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800535a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800535c:	2300      	movs	r3, #0
}
 800535e:	4618      	mov	r0, r3
 8005360:	3720      	adds	r7, #32
 8005362:	46bd      	mov	sp, r7
 8005364:	bd80      	pop	{r7, pc}
 8005366:	bf00      	nop
 8005368:	1ff80000 	.word	0x1ff80000

0800536c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800536c:	b480      	push	{r7}
 800536e:	b087      	sub	sp, #28
 8005370:	af00      	add	r7, sp, #0
 8005372:	60f8      	str	r0, [r7, #12]
 8005374:	60b9      	str	r1, [r7, #8]
 8005376:	4613      	mov	r3, r2
 8005378:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800537e:	68bb      	ldr	r3, [r7, #8]
 8005380:	781b      	ldrb	r3, [r3, #0]
 8005382:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005384:	68bb      	ldr	r3, [r7, #8]
 8005386:	785b      	ldrb	r3, [r3, #1]
 8005388:	2b01      	cmp	r3, #1
 800538a:	f040 80ce 	bne.w	800552a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	699b      	ldr	r3, [r3, #24]
 8005392:	2b00      	cmp	r3, #0
 8005394:	d132      	bne.n	80053fc <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005396:	693b      	ldr	r3, [r7, #16]
 8005398:	015a      	lsls	r2, r3, #5
 800539a:	697b      	ldr	r3, [r7, #20]
 800539c:	4413      	add	r3, r2
 800539e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a2:	691b      	ldr	r3, [r3, #16]
 80053a4:	693a      	ldr	r2, [r7, #16]
 80053a6:	0151      	lsls	r1, r2, #5
 80053a8:	697a      	ldr	r2, [r7, #20]
 80053aa:	440a      	add	r2, r1
 80053ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80053b4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80053b8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	015a      	lsls	r2, r3, #5
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	4413      	add	r3, r2
 80053c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053c6:	691b      	ldr	r3, [r3, #16]
 80053c8:	693a      	ldr	r2, [r7, #16]
 80053ca:	0151      	lsls	r1, r2, #5
 80053cc:	697a      	ldr	r2, [r7, #20]
 80053ce:	440a      	add	r2, r1
 80053d0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80053d8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	015a      	lsls	r2, r3, #5
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	4413      	add	r3, r2
 80053e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053e6:	691b      	ldr	r3, [r3, #16]
 80053e8:	693a      	ldr	r2, [r7, #16]
 80053ea:	0151      	lsls	r1, r2, #5
 80053ec:	697a      	ldr	r2, [r7, #20]
 80053ee:	440a      	add	r2, r1
 80053f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053f4:	0cdb      	lsrs	r3, r3, #19
 80053f6:	04db      	lsls	r3, r3, #19
 80053f8:	6113      	str	r3, [r2, #16]
 80053fa:	e04e      	b.n	800549a <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80053fc:	693b      	ldr	r3, [r7, #16]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	697b      	ldr	r3, [r7, #20]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005408:	691b      	ldr	r3, [r3, #16]
 800540a:	693a      	ldr	r2, [r7, #16]
 800540c:	0151      	lsls	r1, r2, #5
 800540e:	697a      	ldr	r2, [r7, #20]
 8005410:	440a      	add	r2, r1
 8005412:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005416:	0cdb      	lsrs	r3, r3, #19
 8005418:	04db      	lsls	r3, r3, #19
 800541a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	015a      	lsls	r2, r3, #5
 8005420:	697b      	ldr	r3, [r7, #20]
 8005422:	4413      	add	r3, r2
 8005424:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005428:	691b      	ldr	r3, [r3, #16]
 800542a:	693a      	ldr	r2, [r7, #16]
 800542c:	0151      	lsls	r1, r2, #5
 800542e:	697a      	ldr	r2, [r7, #20]
 8005430:	440a      	add	r2, r1
 8005432:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005436:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800543a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800543e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005440:	68bb      	ldr	r3, [r7, #8]
 8005442:	699a      	ldr	r2, [r3, #24]
 8005444:	68bb      	ldr	r3, [r7, #8]
 8005446:	68db      	ldr	r3, [r3, #12]
 8005448:	429a      	cmp	r2, r3
 800544a:	d903      	bls.n	8005454 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800544c:	68bb      	ldr	r3, [r7, #8]
 800544e:	68da      	ldr	r2, [r3, #12]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	440a      	add	r2, r1
 800546a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005472:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005480:	691a      	ldr	r2, [r3, #16]
 8005482:	68bb      	ldr	r3, [r7, #8]
 8005484:	699b      	ldr	r3, [r3, #24]
 8005486:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800548a:	6939      	ldr	r1, [r7, #16]
 800548c:	0148      	lsls	r0, r1, #5
 800548e:	6979      	ldr	r1, [r7, #20]
 8005490:	4401      	add	r1, r0
 8005492:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005496:	4313      	orrs	r3, r2
 8005498:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800549a:	79fb      	ldrb	r3, [r7, #7]
 800549c:	2b01      	cmp	r3, #1
 800549e:	d11e      	bne.n	80054de <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054a0:	68bb      	ldr	r3, [r7, #8]
 80054a2:	695b      	ldr	r3, [r3, #20]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d009      	beq.n	80054bc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80054a8:	693b      	ldr	r3, [r7, #16]
 80054aa:	015a      	lsls	r2, r3, #5
 80054ac:	697b      	ldr	r3, [r7, #20]
 80054ae:	4413      	add	r3, r2
 80054b0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b4:	461a      	mov	r2, r3
 80054b6:	68bb      	ldr	r3, [r7, #8]
 80054b8:	695b      	ldr	r3, [r3, #20]
 80054ba:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	015a      	lsls	r2, r3, #5
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	4413      	add	r3, r2
 80054c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	693a      	ldr	r2, [r7, #16]
 80054cc:	0151      	lsls	r1, r2, #5
 80054ce:	697a      	ldr	r2, [r7, #20]
 80054d0:	440a      	add	r2, r1
 80054d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054d6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054da:	6013      	str	r3, [r2, #0]
 80054dc:	e097      	b.n	800560e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80054de:	693b      	ldr	r3, [r7, #16]
 80054e0:	015a      	lsls	r2, r3, #5
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	4413      	add	r3, r2
 80054e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054ea:	681b      	ldr	r3, [r3, #0]
 80054ec:	693a      	ldr	r2, [r7, #16]
 80054ee:	0151      	lsls	r1, r2, #5
 80054f0:	697a      	ldr	r2, [r7, #20]
 80054f2:	440a      	add	r2, r1
 80054f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054f8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80054fc:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80054fe:	68bb      	ldr	r3, [r7, #8]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	2b00      	cmp	r3, #0
 8005504:	f000 8083 	beq.w	800560e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005508:	697b      	ldr	r3, [r7, #20]
 800550a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800550e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005510:	68bb      	ldr	r3, [r7, #8]
 8005512:	781b      	ldrb	r3, [r3, #0]
 8005514:	f003 030f 	and.w	r3, r3, #15
 8005518:	2101      	movs	r1, #1
 800551a:	fa01 f303 	lsl.w	r3, r1, r3
 800551e:	6979      	ldr	r1, [r7, #20]
 8005520:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005524:	4313      	orrs	r3, r2
 8005526:	634b      	str	r3, [r1, #52]	; 0x34
 8005528:	e071      	b.n	800560e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	015a      	lsls	r2, r3, #5
 800552e:	697b      	ldr	r3, [r7, #20]
 8005530:	4413      	add	r3, r2
 8005532:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005536:	691b      	ldr	r3, [r3, #16]
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	0151      	lsls	r1, r2, #5
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	440a      	add	r2, r1
 8005540:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005544:	0cdb      	lsrs	r3, r3, #19
 8005546:	04db      	lsls	r3, r3, #19
 8005548:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800554a:	693b      	ldr	r3, [r7, #16]
 800554c:	015a      	lsls	r2, r3, #5
 800554e:	697b      	ldr	r3, [r7, #20]
 8005550:	4413      	add	r3, r2
 8005552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005556:	691b      	ldr	r3, [r3, #16]
 8005558:	693a      	ldr	r2, [r7, #16]
 800555a:	0151      	lsls	r1, r2, #5
 800555c:	697a      	ldr	r2, [r7, #20]
 800555e:	440a      	add	r2, r1
 8005560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005564:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005568:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800556c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800556e:	68bb      	ldr	r3, [r7, #8]
 8005570:	699b      	ldr	r3, [r3, #24]
 8005572:	2b00      	cmp	r3, #0
 8005574:	d003      	beq.n	800557e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	68da      	ldr	r2, [r3, #12]
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800557e:	68bb      	ldr	r3, [r7, #8]
 8005580:	68da      	ldr	r2, [r3, #12]
 8005582:	68bb      	ldr	r3, [r7, #8]
 8005584:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	015a      	lsls	r2, r3, #5
 800558a:	697b      	ldr	r3, [r7, #20]
 800558c:	4413      	add	r3, r2
 800558e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005592:	691b      	ldr	r3, [r3, #16]
 8005594:	693a      	ldr	r2, [r7, #16]
 8005596:	0151      	lsls	r1, r2, #5
 8005598:	697a      	ldr	r2, [r7, #20]
 800559a:	440a      	add	r2, r1
 800559c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055a0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055a4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80055a6:	693b      	ldr	r3, [r7, #16]
 80055a8:	015a      	lsls	r2, r3, #5
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	4413      	add	r3, r2
 80055ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b2:	691a      	ldr	r2, [r3, #16]
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	69db      	ldr	r3, [r3, #28]
 80055b8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80055bc:	6939      	ldr	r1, [r7, #16]
 80055be:	0148      	lsls	r0, r1, #5
 80055c0:	6979      	ldr	r1, [r7, #20]
 80055c2:	4401      	add	r1, r0
 80055c4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80055c8:	4313      	orrs	r3, r2
 80055ca:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80055cc:	79fb      	ldrb	r3, [r7, #7]
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d10d      	bne.n	80055ee <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	691b      	ldr	r3, [r3, #16]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	d009      	beq.n	80055ee <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	6919      	ldr	r1, [r3, #16]
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ea:	460a      	mov	r2, r1
 80055ec:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80055ee:	693b      	ldr	r3, [r7, #16]
 80055f0:	015a      	lsls	r2, r3, #5
 80055f2:	697b      	ldr	r3, [r7, #20]
 80055f4:	4413      	add	r3, r2
 80055f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	693a      	ldr	r2, [r7, #16]
 80055fe:	0151      	lsls	r1, r2, #5
 8005600:	697a      	ldr	r2, [r7, #20]
 8005602:	440a      	add	r2, r1
 8005604:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005608:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800560c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800560e:	2300      	movs	r3, #0
}
 8005610:	4618      	mov	r0, r3
 8005612:	371c      	adds	r7, #28
 8005614:	46bd      	mov	sp, r7
 8005616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800561a:	4770      	bx	lr

0800561c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800561c:	b480      	push	{r7}
 800561e:	b087      	sub	sp, #28
 8005620:	af00      	add	r7, sp, #0
 8005622:	6078      	str	r0, [r7, #4]
 8005624:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800562a:	2300      	movs	r3, #0
 800562c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	785b      	ldrb	r3, [r3, #1]
 8005636:	2b01      	cmp	r3, #1
 8005638:	d14a      	bne.n	80056d0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	781b      	ldrb	r3, [r3, #0]
 800563e:	015a      	lsls	r2, r3, #5
 8005640:	693b      	ldr	r3, [r7, #16]
 8005642:	4413      	add	r3, r2
 8005644:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005648:	681b      	ldr	r3, [r3, #0]
 800564a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800564e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005652:	f040 8086 	bne.w	8005762 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	781b      	ldrb	r3, [r3, #0]
 800565a:	015a      	lsls	r2, r3, #5
 800565c:	693b      	ldr	r3, [r7, #16]
 800565e:	4413      	add	r3, r2
 8005660:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	683a      	ldr	r2, [r7, #0]
 8005668:	7812      	ldrb	r2, [r2, #0]
 800566a:	0151      	lsls	r1, r2, #5
 800566c:	693a      	ldr	r2, [r7, #16]
 800566e:	440a      	add	r2, r1
 8005670:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005674:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005678:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	781b      	ldrb	r3, [r3, #0]
 800567e:	015a      	lsls	r2, r3, #5
 8005680:	693b      	ldr	r3, [r7, #16]
 8005682:	4413      	add	r3, r2
 8005684:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	683a      	ldr	r2, [r7, #0]
 800568c:	7812      	ldrb	r2, [r2, #0]
 800568e:	0151      	lsls	r1, r2, #5
 8005690:	693a      	ldr	r2, [r7, #16]
 8005692:	440a      	add	r2, r1
 8005694:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005698:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800569c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	3301      	adds	r3, #1
 80056a2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80056a4:	68fb      	ldr	r3, [r7, #12]
 80056a6:	f242 7210 	movw	r2, #10000	; 0x2710
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d902      	bls.n	80056b4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	75fb      	strb	r3, [r7, #23]
          break;
 80056b2:	e056      	b.n	8005762 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	781b      	ldrb	r3, [r3, #0]
 80056b8:	015a      	lsls	r2, r3, #5
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	4413      	add	r3, r2
 80056be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056c8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056cc:	d0e7      	beq.n	800569e <USB_EPStopXfer+0x82>
 80056ce:	e048      	b.n	8005762 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	781b      	ldrb	r3, [r3, #0]
 80056d4:	015a      	lsls	r2, r3, #5
 80056d6:	693b      	ldr	r3, [r7, #16]
 80056d8:	4413      	add	r3, r2
 80056da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056e8:	d13b      	bne.n	8005762 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	781b      	ldrb	r3, [r3, #0]
 80056ee:	015a      	lsls	r2, r3, #5
 80056f0:	693b      	ldr	r3, [r7, #16]
 80056f2:	4413      	add	r3, r2
 80056f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	683a      	ldr	r2, [r7, #0]
 80056fc:	7812      	ldrb	r2, [r2, #0]
 80056fe:	0151      	lsls	r1, r2, #5
 8005700:	693a      	ldr	r2, [r7, #16]
 8005702:	440a      	add	r2, r1
 8005704:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005708:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800570c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800570e:	683b      	ldr	r3, [r7, #0]
 8005710:	781b      	ldrb	r3, [r3, #0]
 8005712:	015a      	lsls	r2, r3, #5
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	4413      	add	r3, r2
 8005718:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	683a      	ldr	r2, [r7, #0]
 8005720:	7812      	ldrb	r2, [r2, #0]
 8005722:	0151      	lsls	r1, r2, #5
 8005724:	693a      	ldr	r2, [r7, #16]
 8005726:	440a      	add	r2, r1
 8005728:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800572c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005730:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005732:	68fb      	ldr	r3, [r7, #12]
 8005734:	3301      	adds	r3, #1
 8005736:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	f242 7210 	movw	r2, #10000	; 0x2710
 800573e:	4293      	cmp	r3, r2
 8005740:	d902      	bls.n	8005748 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005742:	2301      	movs	r3, #1
 8005744:	75fb      	strb	r3, [r7, #23]
          break;
 8005746:	e00c      	b.n	8005762 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005748:	683b      	ldr	r3, [r7, #0]
 800574a:	781b      	ldrb	r3, [r3, #0]
 800574c:	015a      	lsls	r2, r3, #5
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	4413      	add	r3, r2
 8005752:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005756:	681b      	ldr	r3, [r3, #0]
 8005758:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800575c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005760:	d0e7      	beq.n	8005732 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005762:	7dfb      	ldrb	r3, [r7, #23]
}
 8005764:	4618      	mov	r0, r3
 8005766:	371c      	adds	r7, #28
 8005768:	46bd      	mov	sp, r7
 800576a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800576e:	4770      	bx	lr

08005770 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005770:	b480      	push	{r7}
 8005772:	b089      	sub	sp, #36	; 0x24
 8005774:	af00      	add	r7, sp, #0
 8005776:	60f8      	str	r0, [r7, #12]
 8005778:	60b9      	str	r1, [r7, #8]
 800577a:	4611      	mov	r1, r2
 800577c:	461a      	mov	r2, r3
 800577e:	460b      	mov	r3, r1
 8005780:	71fb      	strb	r3, [r7, #7]
 8005782:	4613      	mov	r3, r2
 8005784:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800578a:	68bb      	ldr	r3, [r7, #8]
 800578c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800578e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8005792:	2b00      	cmp	r3, #0
 8005794:	d123      	bne.n	80057de <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005796:	88bb      	ldrh	r3, [r7, #4]
 8005798:	3303      	adds	r3, #3
 800579a:	089b      	lsrs	r3, r3, #2
 800579c:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800579e:	2300      	movs	r3, #0
 80057a0:	61bb      	str	r3, [r7, #24]
 80057a2:	e018      	b.n	80057d6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057a4:	79fb      	ldrb	r3, [r7, #7]
 80057a6:	031a      	lsls	r2, r3, #12
 80057a8:	697b      	ldr	r3, [r7, #20]
 80057aa:	4413      	add	r3, r2
 80057ac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80057b0:	461a      	mov	r2, r3
 80057b2:	69fb      	ldr	r3, [r7, #28]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80057b8:	69fb      	ldr	r3, [r7, #28]
 80057ba:	3301      	adds	r3, #1
 80057bc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057be:	69fb      	ldr	r3, [r7, #28]
 80057c0:	3301      	adds	r3, #1
 80057c2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057c4:	69fb      	ldr	r3, [r7, #28]
 80057c6:	3301      	adds	r3, #1
 80057c8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80057ca:	69fb      	ldr	r3, [r7, #28]
 80057cc:	3301      	adds	r3, #1
 80057ce:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80057d0:	69bb      	ldr	r3, [r7, #24]
 80057d2:	3301      	adds	r3, #1
 80057d4:	61bb      	str	r3, [r7, #24]
 80057d6:	69ba      	ldr	r2, [r7, #24]
 80057d8:	693b      	ldr	r3, [r7, #16]
 80057da:	429a      	cmp	r2, r3
 80057dc:	d3e2      	bcc.n	80057a4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80057de:	2300      	movs	r3, #0
}
 80057e0:	4618      	mov	r0, r3
 80057e2:	3724      	adds	r7, #36	; 0x24
 80057e4:	46bd      	mov	sp, r7
 80057e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ea:	4770      	bx	lr

080057ec <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80057ec:	b480      	push	{r7}
 80057ee:	b08b      	sub	sp, #44	; 0x2c
 80057f0:	af00      	add	r7, sp, #0
 80057f2:	60f8      	str	r0, [r7, #12]
 80057f4:	60b9      	str	r1, [r7, #8]
 80057f6:	4613      	mov	r3, r2
 80057f8:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005802:	88fb      	ldrh	r3, [r7, #6]
 8005804:	089b      	lsrs	r3, r3, #2
 8005806:	b29b      	uxth	r3, r3
 8005808:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800580a:	88fb      	ldrh	r3, [r7, #6]
 800580c:	f003 0303 	and.w	r3, r3, #3
 8005810:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005812:	2300      	movs	r3, #0
 8005814:	623b      	str	r3, [r7, #32]
 8005816:	e014      	b.n	8005842 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005818:	69bb      	ldr	r3, [r7, #24]
 800581a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800581e:	681a      	ldr	r2, [r3, #0]
 8005820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005822:	601a      	str	r2, [r3, #0]
    pDest++;
 8005824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005826:	3301      	adds	r3, #1
 8005828:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800582a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800582c:	3301      	adds	r3, #1
 800582e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005830:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005832:	3301      	adds	r3, #1
 8005834:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005838:	3301      	adds	r3, #1
 800583a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800583c:	6a3b      	ldr	r3, [r7, #32]
 800583e:	3301      	adds	r3, #1
 8005840:	623b      	str	r3, [r7, #32]
 8005842:	6a3a      	ldr	r2, [r7, #32]
 8005844:	697b      	ldr	r3, [r7, #20]
 8005846:	429a      	cmp	r2, r3
 8005848:	d3e6      	bcc.n	8005818 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800584a:	8bfb      	ldrh	r3, [r7, #30]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d01e      	beq.n	800588e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005850:	2300      	movs	r3, #0
 8005852:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800585a:	461a      	mov	r2, r3
 800585c:	f107 0310 	add.w	r3, r7, #16
 8005860:	6812      	ldr	r2, [r2, #0]
 8005862:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	6a3b      	ldr	r3, [r7, #32]
 8005868:	b2db      	uxtb	r3, r3
 800586a:	00db      	lsls	r3, r3, #3
 800586c:	fa22 f303 	lsr.w	r3, r2, r3
 8005870:	b2da      	uxtb	r2, r3
 8005872:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005874:	701a      	strb	r2, [r3, #0]
      i++;
 8005876:	6a3b      	ldr	r3, [r7, #32]
 8005878:	3301      	adds	r3, #1
 800587a:	623b      	str	r3, [r7, #32]
      pDest++;
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	3301      	adds	r3, #1
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005882:	8bfb      	ldrh	r3, [r7, #30]
 8005884:	3b01      	subs	r3, #1
 8005886:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005888:	8bfb      	ldrh	r3, [r7, #30]
 800588a:	2b00      	cmp	r3, #0
 800588c:	d1ea      	bne.n	8005864 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8005890:	4618      	mov	r0, r3
 8005892:	372c      	adds	r7, #44	; 0x2c
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80058b0:	683b      	ldr	r3, [r7, #0]
 80058b2:	785b      	ldrb	r3, [r3, #1]
 80058b4:	2b01      	cmp	r3, #1
 80058b6:	d12c      	bne.n	8005912 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	015a      	lsls	r2, r3, #5
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	4413      	add	r3, r2
 80058c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	2b00      	cmp	r3, #0
 80058c8:	db12      	blt.n	80058f0 <USB_EPSetStall+0x54>
 80058ca:	68bb      	ldr	r3, [r7, #8]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d00f      	beq.n	80058f0 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80058d0:	68bb      	ldr	r3, [r7, #8]
 80058d2:	015a      	lsls	r2, r3, #5
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4413      	add	r3, r2
 80058d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	68ba      	ldr	r2, [r7, #8]
 80058e0:	0151      	lsls	r1, r2, #5
 80058e2:	68fa      	ldr	r2, [r7, #12]
 80058e4:	440a      	add	r2, r1
 80058e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80058ea:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80058ee:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80058f0:	68bb      	ldr	r3, [r7, #8]
 80058f2:	015a      	lsls	r2, r3, #5
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	4413      	add	r3, r2
 80058f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	68ba      	ldr	r2, [r7, #8]
 8005900:	0151      	lsls	r1, r2, #5
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	440a      	add	r2, r1
 8005906:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800590a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800590e:	6013      	str	r3, [r2, #0]
 8005910:	e02b      	b.n	800596a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005912:	68bb      	ldr	r3, [r7, #8]
 8005914:	015a      	lsls	r2, r3, #5
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	4413      	add	r3, r2
 800591a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800591e:	681b      	ldr	r3, [r3, #0]
 8005920:	2b00      	cmp	r3, #0
 8005922:	db12      	blt.n	800594a <USB_EPSetStall+0xae>
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d00f      	beq.n	800594a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800592a:	68bb      	ldr	r3, [r7, #8]
 800592c:	015a      	lsls	r2, r3, #5
 800592e:	68fb      	ldr	r3, [r7, #12]
 8005930:	4413      	add	r3, r2
 8005932:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	68ba      	ldr	r2, [r7, #8]
 800593a:	0151      	lsls	r1, r2, #5
 800593c:	68fa      	ldr	r2, [r7, #12]
 800593e:	440a      	add	r2, r1
 8005940:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005944:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005948:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800594a:	68bb      	ldr	r3, [r7, #8]
 800594c:	015a      	lsls	r2, r3, #5
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	4413      	add	r3, r2
 8005952:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	68ba      	ldr	r2, [r7, #8]
 800595a:	0151      	lsls	r1, r2, #5
 800595c:	68fa      	ldr	r2, [r7, #12]
 800595e:	440a      	add	r2, r1
 8005960:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005964:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005968:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800596a:	2300      	movs	r3, #0
}
 800596c:	4618      	mov	r0, r3
 800596e:	3714      	adds	r7, #20
 8005970:	46bd      	mov	sp, r7
 8005972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005976:	4770      	bx	lr

08005978 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005978:	b480      	push	{r7}
 800597a:	b085      	sub	sp, #20
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	781b      	ldrb	r3, [r3, #0]
 800598a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	785b      	ldrb	r3, [r3, #1]
 8005990:	2b01      	cmp	r3, #1
 8005992:	d128      	bne.n	80059e6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005994:	68bb      	ldr	r3, [r7, #8]
 8005996:	015a      	lsls	r2, r3, #5
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	4413      	add	r3, r2
 800599c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	0151      	lsls	r1, r2, #5
 80059a6:	68fa      	ldr	r2, [r7, #12]
 80059a8:	440a      	add	r2, r1
 80059aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059ae:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80059b2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	791b      	ldrb	r3, [r3, #4]
 80059b8:	2b03      	cmp	r3, #3
 80059ba:	d003      	beq.n	80059c4 <USB_EPClearStall+0x4c>
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	791b      	ldrb	r3, [r3, #4]
 80059c0:	2b02      	cmp	r3, #2
 80059c2:	d138      	bne.n	8005a36 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	015a      	lsls	r2, r3, #5
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	4413      	add	r3, r2
 80059cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	68ba      	ldr	r2, [r7, #8]
 80059d4:	0151      	lsls	r1, r2, #5
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	440a      	add	r2, r1
 80059da:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80059de:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059e2:	6013      	str	r3, [r2, #0]
 80059e4:	e027      	b.n	8005a36 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80059e6:	68bb      	ldr	r3, [r7, #8]
 80059e8:	015a      	lsls	r2, r3, #5
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	4413      	add	r3, r2
 80059ee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68ba      	ldr	r2, [r7, #8]
 80059f6:	0151      	lsls	r1, r2, #5
 80059f8:	68fa      	ldr	r2, [r7, #12]
 80059fa:	440a      	add	r2, r1
 80059fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a00:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a04:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a06:	683b      	ldr	r3, [r7, #0]
 8005a08:	791b      	ldrb	r3, [r3, #4]
 8005a0a:	2b03      	cmp	r3, #3
 8005a0c:	d003      	beq.n	8005a16 <USB_EPClearStall+0x9e>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	791b      	ldrb	r3, [r3, #4]
 8005a12:	2b02      	cmp	r3, #2
 8005a14:	d10f      	bne.n	8005a36 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a16:	68bb      	ldr	r3, [r7, #8]
 8005a18:	015a      	lsls	r2, r3, #5
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	4413      	add	r3, r2
 8005a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	68ba      	ldr	r2, [r7, #8]
 8005a26:	0151      	lsls	r1, r2, #5
 8005a28:	68fa      	ldr	r2, [r7, #12]
 8005a2a:	440a      	add	r2, r1
 8005a2c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a34:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a36:	2300      	movs	r3, #0
}
 8005a38:	4618      	mov	r0, r3
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
 8005a4c:	460b      	mov	r3, r1
 8005a4e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005a62:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005a66:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005a6e:	681a      	ldr	r2, [r3, #0]
 8005a70:	78fb      	ldrb	r3, [r7, #3]
 8005a72:	011b      	lsls	r3, r3, #4
 8005a74:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005a78:	68f9      	ldr	r1, [r7, #12]
 8005a7a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005a7e:	4313      	orrs	r3, r2
 8005a80:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005a82:	2300      	movs	r3, #0
}
 8005a84:	4618      	mov	r0, r3
 8005a86:	3714      	adds	r7, #20
 8005a88:	46bd      	mov	sp, r7
 8005a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a8e:	4770      	bx	lr

08005a90 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005a90:	b480      	push	{r7}
 8005a92:	b085      	sub	sp, #20
 8005a94:	af00      	add	r7, sp, #0
 8005a96:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005aaa:	f023 0303 	bic.w	r3, r3, #3
 8005aae:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab6:	685b      	ldr	r3, [r3, #4]
 8005ab8:	68fa      	ldr	r2, [r7, #12]
 8005aba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005abe:	f023 0302 	bic.w	r3, r3, #2
 8005ac2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	3714      	adds	r7, #20
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ad2:	b480      	push	{r7}
 8005ad4:	b085      	sub	sp, #20
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	68fa      	ldr	r2, [r7, #12]
 8005ae8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005aec:	f023 0303 	bic.w	r3, r3, #3
 8005af0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005af8:	685b      	ldr	r3, [r3, #4]
 8005afa:	68fa      	ldr	r2, [r7, #12]
 8005afc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b00:	f043 0302 	orr.w	r3, r3, #2
 8005b04:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b06:	2300      	movs	r3, #0
}
 8005b08:	4618      	mov	r0, r3
 8005b0a:	3714      	adds	r7, #20
 8005b0c:	46bd      	mov	sp, r7
 8005b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b12:	4770      	bx	lr

08005b14 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b14:	b480      	push	{r7}
 8005b16:	b085      	sub	sp, #20
 8005b18:	af00      	add	r7, sp, #0
 8005b1a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	695b      	ldr	r3, [r3, #20]
 8005b20:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	699b      	ldr	r3, [r3, #24]
 8005b26:	68fa      	ldr	r2, [r7, #12]
 8005b28:	4013      	ands	r3, r2
 8005b2a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b2c:	68fb      	ldr	r3, [r7, #12]
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr

08005b3a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b3a:	b480      	push	{r7}
 8005b3c:	b085      	sub	sp, #20
 8005b3e:	af00      	add	r7, sp, #0
 8005b40:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b4c:	699b      	ldr	r3, [r3, #24]
 8005b4e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b56:	69db      	ldr	r3, [r3, #28]
 8005b58:	68ba      	ldr	r2, [r7, #8]
 8005b5a:	4013      	ands	r3, r2
 8005b5c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005b5e:	68bb      	ldr	r3, [r7, #8]
 8005b60:	0c1b      	lsrs	r3, r3, #16
}
 8005b62:	4618      	mov	r0, r3
 8005b64:	3714      	adds	r7, #20
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b085      	sub	sp, #20
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b8a:	69db      	ldr	r3, [r3, #28]
 8005b8c:	68ba      	ldr	r2, [r7, #8]
 8005b8e:	4013      	ands	r3, r2
 8005b90:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005b92:	68bb      	ldr	r3, [r7, #8]
 8005b94:	b29b      	uxth	r3, r3
}
 8005b96:	4618      	mov	r0, r3
 8005b98:	3714      	adds	r7, #20
 8005b9a:	46bd      	mov	sp, r7
 8005b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba0:	4770      	bx	lr

08005ba2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005ba2:	b480      	push	{r7}
 8005ba4:	b085      	sub	sp, #20
 8005ba6:	af00      	add	r7, sp, #0
 8005ba8:	6078      	str	r0, [r7, #4]
 8005baa:	460b      	mov	r3, r1
 8005bac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005bb2:	78fb      	ldrb	r3, [r7, #3]
 8005bb4:	015a      	lsls	r2, r3, #5
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	4413      	add	r3, r2
 8005bba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005bbe:	689b      	ldr	r3, [r3, #8]
 8005bc0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005bc2:	68fb      	ldr	r3, [r7, #12]
 8005bc4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bc8:	695b      	ldr	r3, [r3, #20]
 8005bca:	68ba      	ldr	r2, [r7, #8]
 8005bcc:	4013      	ands	r3, r2
 8005bce:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005bd0:	68bb      	ldr	r3, [r7, #8]
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3714      	adds	r7, #20
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bdc:	4770      	bx	lr

08005bde <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bde:	b480      	push	{r7}
 8005be0:	b087      	sub	sp, #28
 8005be2:	af00      	add	r7, sp, #0
 8005be4:	6078      	str	r0, [r7, #4]
 8005be6:	460b      	mov	r3, r1
 8005be8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005bee:	697b      	ldr	r3, [r7, #20]
 8005bf0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bf4:	691b      	ldr	r3, [r3, #16]
 8005bf6:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005bf8:	697b      	ldr	r3, [r7, #20]
 8005bfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bfe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c00:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c02:	78fb      	ldrb	r3, [r7, #3]
 8005c04:	f003 030f 	and.w	r3, r3, #15
 8005c08:	68fa      	ldr	r2, [r7, #12]
 8005c0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005c0e:	01db      	lsls	r3, r3, #7
 8005c10:	b2db      	uxtb	r3, r3
 8005c12:	693a      	ldr	r2, [r7, #16]
 8005c14:	4313      	orrs	r3, r2
 8005c16:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c18:	78fb      	ldrb	r3, [r7, #3]
 8005c1a:	015a      	lsls	r2, r3, #5
 8005c1c:	697b      	ldr	r3, [r7, #20]
 8005c1e:	4413      	add	r3, r2
 8005c20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c24:	689b      	ldr	r3, [r3, #8]
 8005c26:	693a      	ldr	r2, [r7, #16]
 8005c28:	4013      	ands	r3, r2
 8005c2a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c2c:	68bb      	ldr	r3, [r7, #8]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	371c      	adds	r7, #28
 8005c32:	46bd      	mov	sp, r7
 8005c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c38:	4770      	bx	lr

08005c3a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c3a:	b480      	push	{r7}
 8005c3c:	b083      	sub	sp, #12
 8005c3e:	af00      	add	r7, sp, #0
 8005c40:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	695b      	ldr	r3, [r3, #20]
 8005c46:	f003 0301 	and.w	r3, r3, #1
}
 8005c4a:	4618      	mov	r0, r3
 8005c4c:	370c      	adds	r7, #12
 8005c4e:	46bd      	mov	sp, r7
 8005c50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c54:	4770      	bx	lr

08005c56 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005c56:	b480      	push	{r7}
 8005c58:	b085      	sub	sp, #20
 8005c5a:	af00      	add	r7, sp, #0
 8005c5c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	68fa      	ldr	r2, [r7, #12]
 8005c6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005c70:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005c74:	f023 0307 	bic.w	r3, r3, #7
 8005c78:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	68fa      	ldr	r2, [r7, #12]
 8005c84:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c8c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005c8e:	2300      	movs	r3, #0
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3714      	adds	r7, #20
 8005c94:	46bd      	mov	sp, r7
 8005c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9a:	4770      	bx	lr

08005c9c <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	b087      	sub	sp, #28
 8005ca0:	af00      	add	r7, sp, #0
 8005ca2:	60f8      	str	r0, [r7, #12]
 8005ca4:	460b      	mov	r3, r1
 8005ca6:	607a      	str	r2, [r7, #4]
 8005ca8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005cae:	68fb      	ldr	r3, [r7, #12]
 8005cb0:	333c      	adds	r3, #60	; 0x3c
 8005cb2:	3304      	adds	r3, #4
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005cb8:	693b      	ldr	r3, [r7, #16]
 8005cba:	4a26      	ldr	r2, [pc, #152]	; (8005d54 <USB_EP0_OutStart+0xb8>)
 8005cbc:	4293      	cmp	r3, r2
 8005cbe:	d90a      	bls.n	8005cd6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005cc0:	697b      	ldr	r3, [r7, #20]
 8005cc2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005ccc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005cd0:	d101      	bne.n	8005cd6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005cd2:	2300      	movs	r3, #0
 8005cd4:	e037      	b.n	8005d46 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005cd6:	697b      	ldr	r3, [r7, #20]
 8005cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cdc:	461a      	mov	r2, r3
 8005cde:	2300      	movs	r3, #0
 8005ce0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005ce2:	697b      	ldr	r3, [r7, #20]
 8005ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005ce8:	691b      	ldr	r3, [r3, #16]
 8005cea:	697a      	ldr	r2, [r7, #20]
 8005cec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005cf0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005cf4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005cf6:	697b      	ldr	r3, [r7, #20]
 8005cf8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005cfc:	691b      	ldr	r3, [r3, #16]
 8005cfe:	697a      	ldr	r2, [r7, #20]
 8005d00:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d04:	f043 0318 	orr.w	r3, r3, #24
 8005d08:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d0a:	697b      	ldr	r3, [r7, #20]
 8005d0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d10:	691b      	ldr	r3, [r3, #16]
 8005d12:	697a      	ldr	r2, [r7, #20]
 8005d14:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d18:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005d1c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d1e:	7afb      	ldrb	r3, [r7, #11]
 8005d20:	2b01      	cmp	r3, #1
 8005d22:	d10f      	bne.n	8005d44 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d2a:	461a      	mov	r2, r3
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d36:	681b      	ldr	r3, [r3, #0]
 8005d38:	697a      	ldr	r2, [r7, #20]
 8005d3a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d3e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005d42:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d44:	2300      	movs	r3, #0
}
 8005d46:	4618      	mov	r0, r3
 8005d48:	371c      	adds	r7, #28
 8005d4a:	46bd      	mov	sp, r7
 8005d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d50:	4770      	bx	lr
 8005d52:	bf00      	nop
 8005d54:	4f54300a 	.word	0x4f54300a

08005d58 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005d58:	b480      	push	{r7}
 8005d5a:	b085      	sub	sp, #20
 8005d5c:	af00      	add	r7, sp, #0
 8005d5e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005d60:	2300      	movs	r3, #0
 8005d62:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005d64:	68fb      	ldr	r3, [r7, #12]
 8005d66:	3301      	adds	r3, #1
 8005d68:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	4a13      	ldr	r2, [pc, #76]	; (8005dbc <USB_CoreReset+0x64>)
 8005d6e:	4293      	cmp	r3, r2
 8005d70:	d901      	bls.n	8005d76 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005d72:	2303      	movs	r3, #3
 8005d74:	e01b      	b.n	8005dae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	691b      	ldr	r3, [r3, #16]
 8005d7a:	2b00      	cmp	r3, #0
 8005d7c:	daf2      	bge.n	8005d64 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005d7e:	2300      	movs	r3, #0
 8005d80:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	691b      	ldr	r3, [r3, #16]
 8005d86:	f043 0201 	orr.w	r2, r3, #1
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	3301      	adds	r3, #1
 8005d92:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005d94:	68fb      	ldr	r3, [r7, #12]
 8005d96:	4a09      	ldr	r2, [pc, #36]	; (8005dbc <USB_CoreReset+0x64>)
 8005d98:	4293      	cmp	r3, r2
 8005d9a:	d901      	bls.n	8005da0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005d9c:	2303      	movs	r3, #3
 8005d9e:	e006      	b.n	8005dae <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	691b      	ldr	r3, [r3, #16]
 8005da4:	f003 0301 	and.w	r3, r3, #1
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d0f0      	beq.n	8005d8e <USB_CoreReset+0x36>

  return HAL_OK;
 8005dac:	2300      	movs	r3, #0
}
 8005dae:	4618      	mov	r0, r3
 8005db0:	3714      	adds	r7, #20
 8005db2:	46bd      	mov	sp, r7
 8005db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005db8:	4770      	bx	lr
 8005dba:	bf00      	nop
 8005dbc:	00030d40 	.word	0x00030d40

08005dc0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005dc0:	b580      	push	{r7, lr}
 8005dc2:	b084      	sub	sp, #16
 8005dc4:	af00      	add	r7, sp, #0
 8005dc6:	6078      	str	r0, [r7, #4]
 8005dc8:	460b      	mov	r3, r1
 8005dca:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005dcc:	2010      	movs	r0, #16
 8005dce:	f002 f911 	bl	8007ff4 <USBD_static_malloc>
 8005dd2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005dd4:	68fb      	ldr	r3, [r7, #12]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d109      	bne.n	8005dee <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	32b0      	adds	r2, #176	; 0xb0
 8005de4:	2100      	movs	r1, #0
 8005de6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005dea:	2302      	movs	r3, #2
 8005dec:	e048      	b.n	8005e80 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	32b0      	adds	r2, #176	; 0xb0
 8005df8:	68f9      	ldr	r1, [r7, #12]
 8005dfa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	32b0      	adds	r2, #176	; 0xb0
 8005e08:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	7c1b      	ldrb	r3, [r3, #16]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d10d      	bne.n	8005e36 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005e1a:	4b1b      	ldr	r3, [pc, #108]	; (8005e88 <USBD_HID_Init+0xc8>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	f003 020f 	and.w	r2, r3, #15
 8005e22:	6879      	ldr	r1, [r7, #4]
 8005e24:	4613      	mov	r3, r2
 8005e26:	009b      	lsls	r3, r3, #2
 8005e28:	4413      	add	r3, r2
 8005e2a:	009b      	lsls	r3, r3, #2
 8005e2c:	440b      	add	r3, r1
 8005e2e:	3326      	adds	r3, #38	; 0x26
 8005e30:	2207      	movs	r2, #7
 8005e32:	801a      	strh	r2, [r3, #0]
 8005e34:	e00c      	b.n	8005e50 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005e36:	4b14      	ldr	r3, [pc, #80]	; (8005e88 <USBD_HID_Init+0xc8>)
 8005e38:	781b      	ldrb	r3, [r3, #0]
 8005e3a:	f003 020f 	and.w	r2, r3, #15
 8005e3e:	6879      	ldr	r1, [r7, #4]
 8005e40:	4613      	mov	r3, r2
 8005e42:	009b      	lsls	r3, r3, #2
 8005e44:	4413      	add	r3, r2
 8005e46:	009b      	lsls	r3, r3, #2
 8005e48:	440b      	add	r3, r1
 8005e4a:	3326      	adds	r3, #38	; 0x26
 8005e4c:	220a      	movs	r2, #10
 8005e4e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005e50:	4b0d      	ldr	r3, [pc, #52]	; (8005e88 <USBD_HID_Init+0xc8>)
 8005e52:	7819      	ldrb	r1, [r3, #0]
 8005e54:	2304      	movs	r3, #4
 8005e56:	2203      	movs	r2, #3
 8005e58:	6878      	ldr	r0, [r7, #4]
 8005e5a:	f001 ffba 	bl	8007dd2 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005e5e:	4b0a      	ldr	r3, [pc, #40]	; (8005e88 <USBD_HID_Init+0xc8>)
 8005e60:	781b      	ldrb	r3, [r3, #0]
 8005e62:	f003 020f 	and.w	r2, r3, #15
 8005e66:	6879      	ldr	r1, [r7, #4]
 8005e68:	4613      	mov	r3, r2
 8005e6a:	009b      	lsls	r3, r3, #2
 8005e6c:	4413      	add	r3, r2
 8005e6e:	009b      	lsls	r3, r3, #2
 8005e70:	440b      	add	r3, r1
 8005e72:	3324      	adds	r3, #36	; 0x24
 8005e74:	2201      	movs	r2, #1
 8005e76:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	2200      	movs	r2, #0
 8005e7c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005e7e:	2300      	movs	r3, #0
}
 8005e80:	4618      	mov	r0, r3
 8005e82:	3710      	adds	r7, #16
 8005e84:	46bd      	mov	sp, r7
 8005e86:	bd80      	pop	{r7, pc}
 8005e88:	2000049e 	.word	0x2000049e

08005e8c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e8c:	b580      	push	{r7, lr}
 8005e8e:	b082      	sub	sp, #8
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	6078      	str	r0, [r7, #4]
 8005e94:	460b      	mov	r3, r1
 8005e96:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005e98:	4b1f      	ldr	r3, [pc, #124]	; (8005f18 <USBD_HID_DeInit+0x8c>)
 8005e9a:	781b      	ldrb	r3, [r3, #0]
 8005e9c:	4619      	mov	r1, r3
 8005e9e:	6878      	ldr	r0, [r7, #4]
 8005ea0:	f001 ffbd 	bl	8007e1e <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005ea4:	4b1c      	ldr	r3, [pc, #112]	; (8005f18 <USBD_HID_DeInit+0x8c>)
 8005ea6:	781b      	ldrb	r3, [r3, #0]
 8005ea8:	f003 020f 	and.w	r2, r3, #15
 8005eac:	6879      	ldr	r1, [r7, #4]
 8005eae:	4613      	mov	r3, r2
 8005eb0:	009b      	lsls	r3, r3, #2
 8005eb2:	4413      	add	r3, r2
 8005eb4:	009b      	lsls	r3, r3, #2
 8005eb6:	440b      	add	r3, r1
 8005eb8:	3324      	adds	r3, #36	; 0x24
 8005eba:	2200      	movs	r2, #0
 8005ebc:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005ebe:	4b16      	ldr	r3, [pc, #88]	; (8005f18 <USBD_HID_DeInit+0x8c>)
 8005ec0:	781b      	ldrb	r3, [r3, #0]
 8005ec2:	f003 020f 	and.w	r2, r3, #15
 8005ec6:	6879      	ldr	r1, [r7, #4]
 8005ec8:	4613      	mov	r3, r2
 8005eca:	009b      	lsls	r3, r3, #2
 8005ecc:	4413      	add	r3, r2
 8005ece:	009b      	lsls	r3, r3, #2
 8005ed0:	440b      	add	r3, r1
 8005ed2:	3326      	adds	r3, #38	; 0x26
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	32b0      	adds	r2, #176	; 0xb0
 8005ee2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d011      	beq.n	8005f0e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	32b0      	adds	r2, #176	; 0xb0
 8005ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef8:	4618      	mov	r0, r3
 8005efa:	f002 f889 	bl	8008010 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	32b0      	adds	r2, #176	; 0xb0
 8005f08:	2100      	movs	r1, #0
 8005f0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005f0e:	2300      	movs	r3, #0
}
 8005f10:	4618      	mov	r0, r3
 8005f12:	3708      	adds	r7, #8
 8005f14:	46bd      	mov	sp, r7
 8005f16:	bd80      	pop	{r7, pc}
 8005f18:	2000049e 	.word	0x2000049e

08005f1c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b086      	sub	sp, #24
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	32b0      	adds	r2, #176	; 0xb0
 8005f30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f34:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f36:	2300      	movs	r3, #0
 8005f38:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005f3a:	2300      	movs	r3, #0
 8005f3c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e0e8      	b.n	800611a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f48:	683b      	ldr	r3, [r7, #0]
 8005f4a:	781b      	ldrb	r3, [r3, #0]
 8005f4c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d046      	beq.n	8005fe2 <USBD_HID_Setup+0xc6>
 8005f54:	2b20      	cmp	r3, #32
 8005f56:	f040 80d8 	bne.w	800610a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	785b      	ldrb	r3, [r3, #1]
 8005f5e:	3b02      	subs	r3, #2
 8005f60:	2b09      	cmp	r3, #9
 8005f62:	d836      	bhi.n	8005fd2 <USBD_HID_Setup+0xb6>
 8005f64:	a201      	add	r2, pc, #4	; (adr r2, 8005f6c <USBD_HID_Setup+0x50>)
 8005f66:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f6a:	bf00      	nop
 8005f6c:	08005fc3 	.word	0x08005fc3
 8005f70:	08005fa3 	.word	0x08005fa3
 8005f74:	08005fd3 	.word	0x08005fd3
 8005f78:	08005fd3 	.word	0x08005fd3
 8005f7c:	08005fd3 	.word	0x08005fd3
 8005f80:	08005fd3 	.word	0x08005fd3
 8005f84:	08005fd3 	.word	0x08005fd3
 8005f88:	08005fd3 	.word	0x08005fd3
 8005f8c:	08005fb1 	.word	0x08005fb1
 8005f90:	08005f95 	.word	0x08005f95
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005f94:	683b      	ldr	r3, [r7, #0]
 8005f96:	885b      	ldrh	r3, [r3, #2]
 8005f98:	b2db      	uxtb	r3, r3
 8005f9a:	461a      	mov	r2, r3
 8005f9c:	68fb      	ldr	r3, [r7, #12]
 8005f9e:	601a      	str	r2, [r3, #0]
          break;
 8005fa0:	e01e      	b.n	8005fe0 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005fa2:	68fb      	ldr	r3, [r7, #12]
 8005fa4:	2201      	movs	r2, #1
 8005fa6:	4619      	mov	r1, r3
 8005fa8:	6878      	ldr	r0, [r7, #4]
 8005faa:	f001 fbd5 	bl	8007758 <USBD_CtlSendData>
          break;
 8005fae:	e017      	b.n	8005fe0 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	885b      	ldrh	r3, [r3, #2]
 8005fb4:	0a1b      	lsrs	r3, r3, #8
 8005fb6:	b29b      	uxth	r3, r3
 8005fb8:	b2db      	uxtb	r3, r3
 8005fba:	461a      	mov	r2, r3
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	605a      	str	r2, [r3, #4]
          break;
 8005fc0:	e00e      	b.n	8005fe0 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	3304      	adds	r3, #4
 8005fc6:	2201      	movs	r2, #1
 8005fc8:	4619      	mov	r1, r3
 8005fca:	6878      	ldr	r0, [r7, #4]
 8005fcc:	f001 fbc4 	bl	8007758 <USBD_CtlSendData>
          break;
 8005fd0:	e006      	b.n	8005fe0 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005fd2:	6839      	ldr	r1, [r7, #0]
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f001 fb4e 	bl	8007676 <USBD_CtlError>
          ret = USBD_FAIL;
 8005fda:	2303      	movs	r3, #3
 8005fdc:	75fb      	strb	r3, [r7, #23]
          break;
 8005fde:	bf00      	nop
      }
      break;
 8005fe0:	e09a      	b.n	8006118 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005fe2:	683b      	ldr	r3, [r7, #0]
 8005fe4:	785b      	ldrb	r3, [r3, #1]
 8005fe6:	2b0b      	cmp	r3, #11
 8005fe8:	f200 8086 	bhi.w	80060f8 <USBD_HID_Setup+0x1dc>
 8005fec:	a201      	add	r2, pc, #4	; (adr r2, 8005ff4 <USBD_HID_Setup+0xd8>)
 8005fee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005ff2:	bf00      	nop
 8005ff4:	08006025 	.word	0x08006025
 8005ff8:	08006107 	.word	0x08006107
 8005ffc:	080060f9 	.word	0x080060f9
 8006000:	080060f9 	.word	0x080060f9
 8006004:	080060f9 	.word	0x080060f9
 8006008:	080060f9 	.word	0x080060f9
 800600c:	0800604f 	.word	0x0800604f
 8006010:	080060f9 	.word	0x080060f9
 8006014:	080060f9 	.word	0x080060f9
 8006018:	080060f9 	.word	0x080060f9
 800601c:	080060a7 	.word	0x080060a7
 8006020:	080060d1 	.word	0x080060d1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800602a:	b2db      	uxtb	r3, r3
 800602c:	2b03      	cmp	r3, #3
 800602e:	d107      	bne.n	8006040 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006030:	f107 030a 	add.w	r3, r7, #10
 8006034:	2202      	movs	r2, #2
 8006036:	4619      	mov	r1, r3
 8006038:	6878      	ldr	r0, [r7, #4]
 800603a:	f001 fb8d 	bl	8007758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800603e:	e063      	b.n	8006108 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006040:	6839      	ldr	r1, [r7, #0]
 8006042:	6878      	ldr	r0, [r7, #4]
 8006044:	f001 fb17 	bl	8007676 <USBD_CtlError>
            ret = USBD_FAIL;
 8006048:	2303      	movs	r3, #3
 800604a:	75fb      	strb	r3, [r7, #23]
          break;
 800604c:	e05c      	b.n	8006108 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800604e:	683b      	ldr	r3, [r7, #0]
 8006050:	885b      	ldrh	r3, [r3, #2]
 8006052:	0a1b      	lsrs	r3, r3, #8
 8006054:	b29b      	uxth	r3, r3
 8006056:	2b22      	cmp	r3, #34	; 0x22
 8006058:	d108      	bne.n	800606c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800605a:	683b      	ldr	r3, [r7, #0]
 800605c:	88db      	ldrh	r3, [r3, #6]
 800605e:	2b4a      	cmp	r3, #74	; 0x4a
 8006060:	bf28      	it	cs
 8006062:	234a      	movcs	r3, #74	; 0x4a
 8006064:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8006066:	4b2f      	ldr	r3, [pc, #188]	; (8006124 <USBD_HID_Setup+0x208>)
 8006068:	613b      	str	r3, [r7, #16]
 800606a:	e015      	b.n	8006098 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 800606c:	683b      	ldr	r3, [r7, #0]
 800606e:	885b      	ldrh	r3, [r3, #2]
 8006070:	0a1b      	lsrs	r3, r3, #8
 8006072:	b29b      	uxth	r3, r3
 8006074:	2b21      	cmp	r3, #33	; 0x21
 8006076:	d108      	bne.n	800608a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8006078:	4b2b      	ldr	r3, [pc, #172]	; (8006128 <USBD_HID_Setup+0x20c>)
 800607a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	88db      	ldrh	r3, [r3, #6]
 8006080:	2b09      	cmp	r3, #9
 8006082:	bf28      	it	cs
 8006084:	2309      	movcs	r3, #9
 8006086:	82bb      	strh	r3, [r7, #20]
 8006088:	e006      	b.n	8006098 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800608a:	6839      	ldr	r1, [r7, #0]
 800608c:	6878      	ldr	r0, [r7, #4]
 800608e:	f001 faf2 	bl	8007676 <USBD_CtlError>
            ret = USBD_FAIL;
 8006092:	2303      	movs	r3, #3
 8006094:	75fb      	strb	r3, [r7, #23]
            break;
 8006096:	e037      	b.n	8006108 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8006098:	8abb      	ldrh	r3, [r7, #20]
 800609a:	461a      	mov	r2, r3
 800609c:	6939      	ldr	r1, [r7, #16]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f001 fb5a 	bl	8007758 <USBD_CtlSendData>
          break;
 80060a4:	e030      	b.n	8006108 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060ac:	b2db      	uxtb	r3, r3
 80060ae:	2b03      	cmp	r3, #3
 80060b0:	d107      	bne.n	80060c2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 80060b2:	68fb      	ldr	r3, [r7, #12]
 80060b4:	3308      	adds	r3, #8
 80060b6:	2201      	movs	r2, #1
 80060b8:	4619      	mov	r1, r3
 80060ba:	6878      	ldr	r0, [r7, #4]
 80060bc:	f001 fb4c 	bl	8007758 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060c0:	e022      	b.n	8006108 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80060c2:	6839      	ldr	r1, [r7, #0]
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f001 fad6 	bl	8007676 <USBD_CtlError>
            ret = USBD_FAIL;
 80060ca:	2303      	movs	r3, #3
 80060cc:	75fb      	strb	r3, [r7, #23]
          break;
 80060ce:	e01b      	b.n	8006108 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060d6:	b2db      	uxtb	r3, r3
 80060d8:	2b03      	cmp	r3, #3
 80060da:	d106      	bne.n	80060ea <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80060dc:	683b      	ldr	r3, [r7, #0]
 80060de:	885b      	ldrh	r3, [r3, #2]
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	461a      	mov	r2, r3
 80060e4:	68fb      	ldr	r3, [r7, #12]
 80060e6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80060e8:	e00e      	b.n	8006108 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80060ea:	6839      	ldr	r1, [r7, #0]
 80060ec:	6878      	ldr	r0, [r7, #4]
 80060ee:	f001 fac2 	bl	8007676 <USBD_CtlError>
            ret = USBD_FAIL;
 80060f2:	2303      	movs	r3, #3
 80060f4:	75fb      	strb	r3, [r7, #23]
          break;
 80060f6:	e007      	b.n	8006108 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f001 fabb 	bl	8007676 <USBD_CtlError>
          ret = USBD_FAIL;
 8006100:	2303      	movs	r3, #3
 8006102:	75fb      	strb	r3, [r7, #23]
          break;
 8006104:	e000      	b.n	8006108 <USBD_HID_Setup+0x1ec>
          break;
 8006106:	bf00      	nop
      }
      break;
 8006108:	e006      	b.n	8006118 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800610a:	6839      	ldr	r1, [r7, #0]
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f001 fab2 	bl	8007676 <USBD_CtlError>
      ret = USBD_FAIL;
 8006112:	2303      	movs	r3, #3
 8006114:	75fb      	strb	r3, [r7, #23]
      break;
 8006116:	bf00      	nop
  }

  return (uint8_t)ret;
 8006118:	7dfb      	ldrb	r3, [r7, #23]
}
 800611a:	4618      	mov	r0, r3
 800611c:	3718      	adds	r7, #24
 800611e:	46bd      	mov	sp, r7
 8006120:	bd80      	pop	{r7, pc}
 8006122:	bf00      	nop
 8006124:	20000454 	.word	0x20000454
 8006128:	2000043c 	.word	0x2000043c

0800612c <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 800612c:	b580      	push	{r7, lr}
 800612e:	b086      	sub	sp, #24
 8006130:	af00      	add	r7, sp, #0
 8006132:	60f8      	str	r0, [r7, #12]
 8006134:	60b9      	str	r1, [r7, #8]
 8006136:	4613      	mov	r3, r2
 8006138:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006140:	68fb      	ldr	r3, [r7, #12]
 8006142:	32b0      	adds	r2, #176	; 0xb0
 8006144:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006148:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800614a:	697b      	ldr	r3, [r7, #20]
 800614c:	2b00      	cmp	r3, #0
 800614e:	d101      	bne.n	8006154 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8006150:	2303      	movs	r3, #3
 8006152:	e014      	b.n	800617e <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800615a:	b2db      	uxtb	r3, r3
 800615c:	2b03      	cmp	r3, #3
 800615e:	d10d      	bne.n	800617c <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8006160:	697b      	ldr	r3, [r7, #20]
 8006162:	7b1b      	ldrb	r3, [r3, #12]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d109      	bne.n	800617c <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8006168:	697b      	ldr	r3, [r7, #20]
 800616a:	2201      	movs	r2, #1
 800616c:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 800616e:	4b06      	ldr	r3, [pc, #24]	; (8006188 <USBD_HID_SendReport+0x5c>)
 8006170:	7819      	ldrb	r1, [r3, #0]
 8006172:	88fb      	ldrh	r3, [r7, #6]
 8006174:	68ba      	ldr	r2, [r7, #8]
 8006176:	68f8      	ldr	r0, [r7, #12]
 8006178:	f001 fef9 	bl	8007f6e <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 800617c:	2300      	movs	r3, #0
}
 800617e:	4618      	mov	r0, r3
 8006180:	3718      	adds	r7, #24
 8006182:	46bd      	mov	sp, r7
 8006184:	bd80      	pop	{r7, pc}
 8006186:	bf00      	nop
 8006188:	2000049e 	.word	0x2000049e

0800618c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006194:	2181      	movs	r1, #129	; 0x81
 8006196:	4809      	ldr	r0, [pc, #36]	; (80061bc <USBD_HID_GetFSCfgDesc+0x30>)
 8006198:	f000 fc35 	bl	8006a06 <USBD_GetEpDesc>
 800619c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d002      	beq.n	80061aa <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	220a      	movs	r2, #10
 80061a8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2222      	movs	r2, #34	; 0x22
 80061ae:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80061b0:	4b02      	ldr	r3, [pc, #8]	; (80061bc <USBD_HID_GetFSCfgDesc+0x30>)
}
 80061b2:	4618      	mov	r0, r3
 80061b4:	3710      	adds	r7, #16
 80061b6:	46bd      	mov	sp, r7
 80061b8:	bd80      	pop	{r7, pc}
 80061ba:	bf00      	nop
 80061bc:	20000418 	.word	0x20000418

080061c0 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 80061c0:	b580      	push	{r7, lr}
 80061c2:	b084      	sub	sp, #16
 80061c4:	af00      	add	r7, sp, #0
 80061c6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80061c8:	2181      	movs	r1, #129	; 0x81
 80061ca:	4809      	ldr	r0, [pc, #36]	; (80061f0 <USBD_HID_GetHSCfgDesc+0x30>)
 80061cc:	f000 fc1b 	bl	8006a06 <USBD_GetEpDesc>
 80061d0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	2b00      	cmp	r3, #0
 80061d6:	d002      	beq.n	80061de <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	2207      	movs	r2, #7
 80061dc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2222      	movs	r2, #34	; 0x22
 80061e2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80061e4:	4b02      	ldr	r3, [pc, #8]	; (80061f0 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3710      	adds	r7, #16
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}
 80061ee:	bf00      	nop
 80061f0:	20000418 	.word	0x20000418

080061f4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80061f4:	b580      	push	{r7, lr}
 80061f6:	b084      	sub	sp, #16
 80061f8:	af00      	add	r7, sp, #0
 80061fa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80061fc:	2181      	movs	r1, #129	; 0x81
 80061fe:	4809      	ldr	r0, [pc, #36]	; (8006224 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8006200:	f000 fc01 	bl	8006a06 <USBD_GetEpDesc>
 8006204:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8006206:	68fb      	ldr	r3, [r7, #12]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d002      	beq.n	8006212 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	220a      	movs	r2, #10
 8006210:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2222      	movs	r2, #34	; 0x22
 8006216:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006218:	4b02      	ldr	r3, [pc, #8]	; (8006224 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800621a:	4618      	mov	r0, r3
 800621c:	3710      	adds	r7, #16
 800621e:	46bd      	mov	sp, r7
 8006220:	bd80      	pop	{r7, pc}
 8006222:	bf00      	nop
 8006224:	20000418 	.word	0x20000418

08006228 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006228:	b480      	push	{r7}
 800622a:	b083      	sub	sp, #12
 800622c:	af00      	add	r7, sp, #0
 800622e:	6078      	str	r0, [r7, #4]
 8006230:	460b      	mov	r3, r1
 8006232:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	32b0      	adds	r2, #176	; 0xb0
 800623e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006242:	2200      	movs	r2, #0
 8006244:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8006246:	2300      	movs	r3, #0
}
 8006248:	4618      	mov	r0, r3
 800624a:	370c      	adds	r7, #12
 800624c:	46bd      	mov	sp, r7
 800624e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006252:	4770      	bx	lr

08006254 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8006254:	b480      	push	{r7}
 8006256:	b083      	sub	sp, #12
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	220a      	movs	r2, #10
 8006260:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8006262:	4b03      	ldr	r3, [pc, #12]	; (8006270 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8006264:	4618      	mov	r0, r3
 8006266:	370c      	adds	r7, #12
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr
 8006270:	20000448 	.word	0x20000448

08006274 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8006274:	b580      	push	{r7, lr}
 8006276:	b086      	sub	sp, #24
 8006278:	af00      	add	r7, sp, #0
 800627a:	60f8      	str	r0, [r7, #12]
 800627c:	60b9      	str	r1, [r7, #8]
 800627e:	4613      	mov	r3, r2
 8006280:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	2b00      	cmp	r3, #0
 8006286:	d101      	bne.n	800628c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006288:	2303      	movs	r3, #3
 800628a:	e01f      	b.n	80062cc <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	2200      	movs	r2, #0
 8006298:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	2200      	movs	r2, #0
 80062a0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062a4:	68bb      	ldr	r3, [r7, #8]
 80062a6:	2b00      	cmp	r3, #0
 80062a8:	d003      	beq.n	80062b2 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 80062aa:	68fb      	ldr	r3, [r7, #12]
 80062ac:	68ba      	ldr	r2, [r7, #8]
 80062ae:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	2201      	movs	r2, #1
 80062b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	79fa      	ldrb	r2, [r7, #7]
 80062be:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 80062c0:	68f8      	ldr	r0, [r7, #12]
 80062c2:	f001 fd1f 	bl	8007d04 <USBD_LL_Init>
 80062c6:	4603      	mov	r3, r0
 80062c8:	75fb      	strb	r3, [r7, #23]

  return ret;
 80062ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80062cc:	4618      	mov	r0, r3
 80062ce:	3718      	adds	r7, #24
 80062d0:	46bd      	mov	sp, r7
 80062d2:	bd80      	pop	{r7, pc}

080062d4 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 80062d4:	b580      	push	{r7, lr}
 80062d6:	b084      	sub	sp, #16
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80062de:	2300      	movs	r3, #0
 80062e0:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80062e2:	683b      	ldr	r3, [r7, #0]
 80062e4:	2b00      	cmp	r3, #0
 80062e6:	d101      	bne.n	80062ec <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062e8:	2303      	movs	r3, #3
 80062ea:	e025      	b.n	8006338 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	683a      	ldr	r2, [r7, #0]
 80062f0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	32ae      	adds	r2, #174	; 0xae
 80062fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006302:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006304:	2b00      	cmp	r3, #0
 8006306:	d00f      	beq.n	8006328 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	32ae      	adds	r2, #174	; 0xae
 8006312:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006316:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006318:	f107 020e 	add.w	r2, r7, #14
 800631c:	4610      	mov	r0, r2
 800631e:	4798      	blx	r3
 8006320:	4602      	mov	r2, r0
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 800632e:	1c5a      	adds	r2, r3, #1
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8006336:	2300      	movs	r3, #0
}
 8006338:	4618      	mov	r0, r3
 800633a:	3710      	adds	r7, #16
 800633c:	46bd      	mov	sp, r7
 800633e:	bd80      	pop	{r7, pc}

08006340 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006340:	b580      	push	{r7, lr}
 8006342:	b082      	sub	sp, #8
 8006344:	af00      	add	r7, sp, #0
 8006346:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006348:	6878      	ldr	r0, [r7, #4]
 800634a:	f001 fd27 	bl	8007d9c <USBD_LL_Start>
 800634e:	4603      	mov	r3, r0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3708      	adds	r7, #8
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006358:	b480      	push	{r7}
 800635a:	b083      	sub	sp, #12
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006360:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006362:	4618      	mov	r0, r3
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr

0800636e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800636e:	b580      	push	{r7, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
 8006374:	6078      	str	r0, [r7, #4]
 8006376:	460b      	mov	r3, r1
 8006378:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800637a:	2300      	movs	r3, #0
 800637c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006384:	2b00      	cmp	r3, #0
 8006386:	d009      	beq.n	800639c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	78fa      	ldrb	r2, [r7, #3]
 8006392:	4611      	mov	r1, r2
 8006394:	6878      	ldr	r0, [r7, #4]
 8006396:	4798      	blx	r3
 8006398:	4603      	mov	r3, r0
 800639a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800639c:	7bfb      	ldrb	r3, [r7, #15]
}
 800639e:	4618      	mov	r0, r3
 80063a0:	3710      	adds	r7, #16
 80063a2:	46bd      	mov	sp, r7
 80063a4:	bd80      	pop	{r7, pc}

080063a6 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063a6:	b580      	push	{r7, lr}
 80063a8:	b084      	sub	sp, #16
 80063aa:	af00      	add	r7, sp, #0
 80063ac:	6078      	str	r0, [r7, #4]
 80063ae:	460b      	mov	r3, r1
 80063b0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063b2:	2300      	movs	r3, #0
 80063b4:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063bc:	685b      	ldr	r3, [r3, #4]
 80063be:	78fa      	ldrb	r2, [r7, #3]
 80063c0:	4611      	mov	r1, r2
 80063c2:	6878      	ldr	r0, [r7, #4]
 80063c4:	4798      	blx	r3
 80063c6:	4603      	mov	r3, r0
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d001      	beq.n	80063d0 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 80063cc:	2303      	movs	r3, #3
 80063ce:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80063d2:	4618      	mov	r0, r3
 80063d4:	3710      	adds	r7, #16
 80063d6:	46bd      	mov	sp, r7
 80063d8:	bd80      	pop	{r7, pc}

080063da <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 80063da:	b580      	push	{r7, lr}
 80063dc:	b084      	sub	sp, #16
 80063de:	af00      	add	r7, sp, #0
 80063e0:	6078      	str	r0, [r7, #4]
 80063e2:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80063ea:	6839      	ldr	r1, [r7, #0]
 80063ec:	4618      	mov	r0, r3
 80063ee:	f001 f908 	bl	8007602 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	2201      	movs	r2, #1
 80063f6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006400:	461a      	mov	r2, r3
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800640e:	f003 031f 	and.w	r3, r3, #31
 8006412:	2b02      	cmp	r3, #2
 8006414:	d01a      	beq.n	800644c <USBD_LL_SetupStage+0x72>
 8006416:	2b02      	cmp	r3, #2
 8006418:	d822      	bhi.n	8006460 <USBD_LL_SetupStage+0x86>
 800641a:	2b00      	cmp	r3, #0
 800641c:	d002      	beq.n	8006424 <USBD_LL_SetupStage+0x4a>
 800641e:	2b01      	cmp	r3, #1
 8006420:	d00a      	beq.n	8006438 <USBD_LL_SetupStage+0x5e>
 8006422:	e01d      	b.n	8006460 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800642a:	4619      	mov	r1, r3
 800642c:	6878      	ldr	r0, [r7, #4]
 800642e:	f000 fb5f 	bl	8006af0 <USBD_StdDevReq>
 8006432:	4603      	mov	r3, r0
 8006434:	73fb      	strb	r3, [r7, #15]
      break;
 8006436:	e020      	b.n	800647a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f000 fbc7 	bl	8006bd4 <USBD_StdItfReq>
 8006446:	4603      	mov	r3, r0
 8006448:	73fb      	strb	r3, [r7, #15]
      break;
 800644a:	e016      	b.n	800647a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006452:	4619      	mov	r1, r3
 8006454:	6878      	ldr	r0, [r7, #4]
 8006456:	f000 fc29 	bl	8006cac <USBD_StdEPReq>
 800645a:	4603      	mov	r3, r0
 800645c:	73fb      	strb	r3, [r7, #15]
      break;
 800645e:	e00c      	b.n	800647a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006466:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800646a:	b2db      	uxtb	r3, r3
 800646c:	4619      	mov	r1, r3
 800646e:	6878      	ldr	r0, [r7, #4]
 8006470:	f001 fcf4 	bl	8007e5c <USBD_LL_StallEP>
 8006474:	4603      	mov	r3, r0
 8006476:	73fb      	strb	r3, [r7, #15]
      break;
 8006478:	bf00      	nop
  }

  return ret;
 800647a:	7bfb      	ldrb	r3, [r7, #15]
}
 800647c:	4618      	mov	r0, r3
 800647e:	3710      	adds	r7, #16
 8006480:	46bd      	mov	sp, r7
 8006482:	bd80      	pop	{r7, pc}

08006484 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006484:	b580      	push	{r7, lr}
 8006486:	b086      	sub	sp, #24
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	460b      	mov	r3, r1
 800648e:	607a      	str	r2, [r7, #4]
 8006490:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006492:	2300      	movs	r3, #0
 8006494:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006496:	7afb      	ldrb	r3, [r7, #11]
 8006498:	2b00      	cmp	r3, #0
 800649a:	d16e      	bne.n	800657a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80064a2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80064aa:	2b03      	cmp	r3, #3
 80064ac:	f040 8098 	bne.w	80065e0 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 80064b0:	693b      	ldr	r3, [r7, #16]
 80064b2:	689a      	ldr	r2, [r3, #8]
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	68db      	ldr	r3, [r3, #12]
 80064b8:	429a      	cmp	r2, r3
 80064ba:	d913      	bls.n	80064e4 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 80064bc:	693b      	ldr	r3, [r7, #16]
 80064be:	689a      	ldr	r2, [r3, #8]
 80064c0:	693b      	ldr	r3, [r7, #16]
 80064c2:	68db      	ldr	r3, [r3, #12]
 80064c4:	1ad2      	subs	r2, r2, r3
 80064c6:	693b      	ldr	r3, [r7, #16]
 80064c8:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 80064ca:	693b      	ldr	r3, [r7, #16]
 80064cc:	68da      	ldr	r2, [r3, #12]
 80064ce:	693b      	ldr	r3, [r7, #16]
 80064d0:	689b      	ldr	r3, [r3, #8]
 80064d2:	4293      	cmp	r3, r2
 80064d4:	bf28      	it	cs
 80064d6:	4613      	movcs	r3, r2
 80064d8:	461a      	mov	r2, r3
 80064da:	6879      	ldr	r1, [r7, #4]
 80064dc:	68f8      	ldr	r0, [r7, #12]
 80064de:	f001 f967 	bl	80077b0 <USBD_CtlContinueRx>
 80064e2:	e07d      	b.n	80065e0 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064ea:	f003 031f 	and.w	r3, r3, #31
 80064ee:	2b02      	cmp	r3, #2
 80064f0:	d014      	beq.n	800651c <USBD_LL_DataOutStage+0x98>
 80064f2:	2b02      	cmp	r3, #2
 80064f4:	d81d      	bhi.n	8006532 <USBD_LL_DataOutStage+0xae>
 80064f6:	2b00      	cmp	r3, #0
 80064f8:	d002      	beq.n	8006500 <USBD_LL_DataOutStage+0x7c>
 80064fa:	2b01      	cmp	r3, #1
 80064fc:	d003      	beq.n	8006506 <USBD_LL_DataOutStage+0x82>
 80064fe:	e018      	b.n	8006532 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006500:	2300      	movs	r3, #0
 8006502:	75bb      	strb	r3, [r7, #22]
            break;
 8006504:	e018      	b.n	8006538 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800650c:	b2db      	uxtb	r3, r3
 800650e:	4619      	mov	r1, r3
 8006510:	68f8      	ldr	r0, [r7, #12]
 8006512:	f000 fa5e 	bl	80069d2 <USBD_CoreFindIF>
 8006516:	4603      	mov	r3, r0
 8006518:	75bb      	strb	r3, [r7, #22]
            break;
 800651a:	e00d      	b.n	8006538 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006522:	b2db      	uxtb	r3, r3
 8006524:	4619      	mov	r1, r3
 8006526:	68f8      	ldr	r0, [r7, #12]
 8006528:	f000 fa60 	bl	80069ec <USBD_CoreFindEP>
 800652c:	4603      	mov	r3, r0
 800652e:	75bb      	strb	r3, [r7, #22]
            break;
 8006530:	e002      	b.n	8006538 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8006532:	2300      	movs	r3, #0
 8006534:	75bb      	strb	r3, [r7, #22]
            break;
 8006536:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006538:	7dbb      	ldrb	r3, [r7, #22]
 800653a:	2b00      	cmp	r3, #0
 800653c:	d119      	bne.n	8006572 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800653e:	68fb      	ldr	r3, [r7, #12]
 8006540:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b03      	cmp	r3, #3
 8006548:	d113      	bne.n	8006572 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800654a:	7dba      	ldrb	r2, [r7, #22]
 800654c:	68fb      	ldr	r3, [r7, #12]
 800654e:	32ae      	adds	r2, #174	; 0xae
 8006550:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006554:	691b      	ldr	r3, [r3, #16]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00b      	beq.n	8006572 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800655a:	7dba      	ldrb	r2, [r7, #22]
 800655c:	68fb      	ldr	r3, [r7, #12]
 800655e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006562:	7dba      	ldrb	r2, [r7, #22]
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	32ae      	adds	r2, #174	; 0xae
 8006568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800656c:	691b      	ldr	r3, [r3, #16]
 800656e:	68f8      	ldr	r0, [r7, #12]
 8006570:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006572:	68f8      	ldr	r0, [r7, #12]
 8006574:	f001 f92d 	bl	80077d2 <USBD_CtlSendStatus>
 8006578:	e032      	b.n	80065e0 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800657a:	7afb      	ldrb	r3, [r7, #11]
 800657c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006580:	b2db      	uxtb	r3, r3
 8006582:	4619      	mov	r1, r3
 8006584:	68f8      	ldr	r0, [r7, #12]
 8006586:	f000 fa31 	bl	80069ec <USBD_CoreFindEP>
 800658a:	4603      	mov	r3, r0
 800658c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800658e:	7dbb      	ldrb	r3, [r7, #22]
 8006590:	2bff      	cmp	r3, #255	; 0xff
 8006592:	d025      	beq.n	80065e0 <USBD_LL_DataOutStage+0x15c>
 8006594:	7dbb      	ldrb	r3, [r7, #22]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d122      	bne.n	80065e0 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065a0:	b2db      	uxtb	r3, r3
 80065a2:	2b03      	cmp	r3, #3
 80065a4:	d117      	bne.n	80065d6 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80065a6:	7dba      	ldrb	r2, [r7, #22]
 80065a8:	68fb      	ldr	r3, [r7, #12]
 80065aa:	32ae      	adds	r2, #174	; 0xae
 80065ac:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065b0:	699b      	ldr	r3, [r3, #24]
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d00f      	beq.n	80065d6 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 80065b6:	7dba      	ldrb	r2, [r7, #22]
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 80065be:	7dba      	ldrb	r2, [r7, #22]
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	32ae      	adds	r2, #174	; 0xae
 80065c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c8:	699b      	ldr	r3, [r3, #24]
 80065ca:	7afa      	ldrb	r2, [r7, #11]
 80065cc:	4611      	mov	r1, r2
 80065ce:	68f8      	ldr	r0, [r7, #12]
 80065d0:	4798      	blx	r3
 80065d2:	4603      	mov	r3, r0
 80065d4:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 80065d6:	7dfb      	ldrb	r3, [r7, #23]
 80065d8:	2b00      	cmp	r3, #0
 80065da:	d001      	beq.n	80065e0 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80065dc:	7dfb      	ldrb	r3, [r7, #23]
 80065de:	e000      	b.n	80065e2 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80065e0:	2300      	movs	r3, #0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3718      	adds	r7, #24
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b086      	sub	sp, #24
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	60f8      	str	r0, [r7, #12]
 80065f2:	460b      	mov	r3, r1
 80065f4:	607a      	str	r2, [r7, #4]
 80065f6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80065f8:	7afb      	ldrb	r3, [r7, #11]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d16f      	bne.n	80066de <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3314      	adds	r3, #20
 8006602:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800660a:	2b02      	cmp	r3, #2
 800660c:	d15a      	bne.n	80066c4 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 800660e:	693b      	ldr	r3, [r7, #16]
 8006610:	689a      	ldr	r2, [r3, #8]
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	68db      	ldr	r3, [r3, #12]
 8006616:	429a      	cmp	r2, r3
 8006618:	d914      	bls.n	8006644 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800661a:	693b      	ldr	r3, [r7, #16]
 800661c:	689a      	ldr	r2, [r3, #8]
 800661e:	693b      	ldr	r3, [r7, #16]
 8006620:	68db      	ldr	r3, [r3, #12]
 8006622:	1ad2      	subs	r2, r2, r3
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006628:	693b      	ldr	r3, [r7, #16]
 800662a:	689b      	ldr	r3, [r3, #8]
 800662c:	461a      	mov	r2, r3
 800662e:	6879      	ldr	r1, [r7, #4]
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f001 f8ac 	bl	800778e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006636:	2300      	movs	r3, #0
 8006638:	2200      	movs	r2, #0
 800663a:	2100      	movs	r1, #0
 800663c:	68f8      	ldr	r0, [r7, #12]
 800663e:	f001 fcb7 	bl	8007fb0 <USBD_LL_PrepareReceive>
 8006642:	e03f      	b.n	80066c4 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006644:	693b      	ldr	r3, [r7, #16]
 8006646:	68da      	ldr	r2, [r3, #12]
 8006648:	693b      	ldr	r3, [r7, #16]
 800664a:	689b      	ldr	r3, [r3, #8]
 800664c:	429a      	cmp	r2, r3
 800664e:	d11c      	bne.n	800668a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006650:	693b      	ldr	r3, [r7, #16]
 8006652:	685a      	ldr	r2, [r3, #4]
 8006654:	693b      	ldr	r3, [r7, #16]
 8006656:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006658:	429a      	cmp	r2, r3
 800665a:	d316      	bcc.n	800668a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800665c:	693b      	ldr	r3, [r7, #16]
 800665e:	685a      	ldr	r2, [r3, #4]
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006666:	429a      	cmp	r2, r3
 8006668:	d20f      	bcs.n	800668a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800666a:	2200      	movs	r2, #0
 800666c:	2100      	movs	r1, #0
 800666e:	68f8      	ldr	r0, [r7, #12]
 8006670:	f001 f88d 	bl	800778e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006674:	68fb      	ldr	r3, [r7, #12]
 8006676:	2200      	movs	r2, #0
 8006678:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800667c:	2300      	movs	r3, #0
 800667e:	2200      	movs	r2, #0
 8006680:	2100      	movs	r1, #0
 8006682:	68f8      	ldr	r0, [r7, #12]
 8006684:	f001 fc94 	bl	8007fb0 <USBD_LL_PrepareReceive>
 8006688:	e01c      	b.n	80066c4 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b03      	cmp	r3, #3
 8006694:	d10f      	bne.n	80066b6 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800669c:	68db      	ldr	r3, [r3, #12]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d009      	beq.n	80066b6 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	2200      	movs	r2, #0
 80066a6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066b0:	68db      	ldr	r3, [r3, #12]
 80066b2:	68f8      	ldr	r0, [r7, #12]
 80066b4:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 80066b6:	2180      	movs	r1, #128	; 0x80
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f001 fbcf 	bl	8007e5c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 80066be:	68f8      	ldr	r0, [r7, #12]
 80066c0:	f001 f89a 	bl	80077f8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 80066ca:	2b00      	cmp	r3, #0
 80066cc:	d03a      	beq.n	8006744 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 80066ce:	68f8      	ldr	r0, [r7, #12]
 80066d0:	f7ff fe42 	bl	8006358 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	2200      	movs	r2, #0
 80066d8:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80066dc:	e032      	b.n	8006744 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80066de:	7afb      	ldrb	r3, [r7, #11]
 80066e0:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80066e4:	b2db      	uxtb	r3, r3
 80066e6:	4619      	mov	r1, r3
 80066e8:	68f8      	ldr	r0, [r7, #12]
 80066ea:	f000 f97f 	bl	80069ec <USBD_CoreFindEP>
 80066ee:	4603      	mov	r3, r0
 80066f0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80066f2:	7dfb      	ldrb	r3, [r7, #23]
 80066f4:	2bff      	cmp	r3, #255	; 0xff
 80066f6:	d025      	beq.n	8006744 <USBD_LL_DataInStage+0x15a>
 80066f8:	7dfb      	ldrb	r3, [r7, #23]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d122      	bne.n	8006744 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006704:	b2db      	uxtb	r3, r3
 8006706:	2b03      	cmp	r3, #3
 8006708:	d11c      	bne.n	8006744 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800670a:	7dfa      	ldrb	r2, [r7, #23]
 800670c:	68fb      	ldr	r3, [r7, #12]
 800670e:	32ae      	adds	r2, #174	; 0xae
 8006710:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006714:	695b      	ldr	r3, [r3, #20]
 8006716:	2b00      	cmp	r3, #0
 8006718:	d014      	beq.n	8006744 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800671a:	7dfa      	ldrb	r2, [r7, #23]
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8006722:	7dfa      	ldrb	r2, [r7, #23]
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	32ae      	adds	r2, #174	; 0xae
 8006728:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800672c:	695b      	ldr	r3, [r3, #20]
 800672e:	7afa      	ldrb	r2, [r7, #11]
 8006730:	4611      	mov	r1, r2
 8006732:	68f8      	ldr	r0, [r7, #12]
 8006734:	4798      	blx	r3
 8006736:	4603      	mov	r3, r0
 8006738:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800673a:	7dbb      	ldrb	r3, [r7, #22]
 800673c:	2b00      	cmp	r3, #0
 800673e:	d001      	beq.n	8006744 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006740:	7dbb      	ldrb	r3, [r7, #22]
 8006742:	e000      	b.n	8006746 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006744:	2300      	movs	r3, #0
}
 8006746:	4618      	mov	r0, r3
 8006748:	3718      	adds	r7, #24
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}

0800674e <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800674e:	b580      	push	{r7, lr}
 8006750:	b084      	sub	sp, #16
 8006752:	af00      	add	r7, sp, #0
 8006754:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006756:	2300      	movs	r3, #0
 8006758:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	2201      	movs	r2, #1
 800675e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006762:	687b      	ldr	r3, [r7, #4]
 8006764:	2200      	movs	r2, #0
 8006766:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2200      	movs	r2, #0
 800676e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	2200      	movs	r2, #0
 8006774:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2200      	movs	r2, #0
 800677c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006786:	2b00      	cmp	r3, #0
 8006788:	d014      	beq.n	80067b4 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	2b00      	cmp	r3, #0
 8006794:	d00e      	beq.n	80067b4 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800679c:	685b      	ldr	r3, [r3, #4]
 800679e:	687a      	ldr	r2, [r7, #4]
 80067a0:	6852      	ldr	r2, [r2, #4]
 80067a2:	b2d2      	uxtb	r2, r2
 80067a4:	4611      	mov	r1, r2
 80067a6:	6878      	ldr	r0, [r7, #4]
 80067a8:	4798      	blx	r3
 80067aa:	4603      	mov	r3, r0
 80067ac:	2b00      	cmp	r3, #0
 80067ae:	d001      	beq.n	80067b4 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 80067b0:	2303      	movs	r3, #3
 80067b2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067b4:	2340      	movs	r3, #64	; 0x40
 80067b6:	2200      	movs	r2, #0
 80067b8:	2100      	movs	r1, #0
 80067ba:	6878      	ldr	r0, [r7, #4]
 80067bc:	f001 fb09 	bl	8007dd2 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	2201      	movs	r2, #1
 80067c4:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2240      	movs	r2, #64	; 0x40
 80067cc:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80067d0:	2340      	movs	r3, #64	; 0x40
 80067d2:	2200      	movs	r2, #0
 80067d4:	2180      	movs	r1, #128	; 0x80
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f001 fafb 	bl	8007dd2 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2201      	movs	r2, #1
 80067e0:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2240      	movs	r2, #64	; 0x40
 80067e6:	621a      	str	r2, [r3, #32]

  return ret;
 80067e8:	7bfb      	ldrb	r3, [r7, #15]
}
 80067ea:	4618      	mov	r0, r3
 80067ec:	3710      	adds	r7, #16
 80067ee:	46bd      	mov	sp, r7
 80067f0:	bd80      	pop	{r7, pc}

080067f2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
 80067fa:	460b      	mov	r3, r1
 80067fc:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	78fa      	ldrb	r2, [r7, #3]
 8006802:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8006804:	2300      	movs	r3, #0
}
 8006806:	4618      	mov	r0, r3
 8006808:	370c      	adds	r7, #12
 800680a:	46bd      	mov	sp, r7
 800680c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006810:	4770      	bx	lr

08006812 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8006812:	b480      	push	{r7}
 8006814:	b083      	sub	sp, #12
 8006816:	af00      	add	r7, sp, #0
 8006818:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006820:	b2da      	uxtb	r2, r3
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	2204      	movs	r2, #4
 800682c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006830:	2300      	movs	r3, #0
}
 8006832:	4618      	mov	r0, r3
 8006834:	370c      	adds	r7, #12
 8006836:	46bd      	mov	sp, r7
 8006838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683c:	4770      	bx	lr

0800683e <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800683e:	b480      	push	{r7}
 8006840:	b083      	sub	sp, #12
 8006842:	af00      	add	r7, sp, #0
 8006844:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800684c:	b2db      	uxtb	r3, r3
 800684e:	2b04      	cmp	r3, #4
 8006850:	d106      	bne.n	8006860 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006858:	b2da      	uxtb	r2, r3
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006860:	2300      	movs	r3, #0
}
 8006862:	4618      	mov	r0, r3
 8006864:	370c      	adds	r7, #12
 8006866:	46bd      	mov	sp, r7
 8006868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800686c:	4770      	bx	lr

0800686e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800686e:	b580      	push	{r7, lr}
 8006870:	b082      	sub	sp, #8
 8006872:	af00      	add	r7, sp, #0
 8006874:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800687c:	b2db      	uxtb	r3, r3
 800687e:	2b03      	cmp	r3, #3
 8006880:	d110      	bne.n	80068a4 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006888:	2b00      	cmp	r3, #0
 800688a:	d00b      	beq.n	80068a4 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006892:	69db      	ldr	r3, [r3, #28]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d005      	beq.n	80068a4 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	6878      	ldr	r0, [r7, #4]
 80068a2:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80068a4:	2300      	movs	r3, #0
}
 80068a6:	4618      	mov	r0, r3
 80068a8:	3708      	adds	r7, #8
 80068aa:	46bd      	mov	sp, r7
 80068ac:	bd80      	pop	{r7, pc}

080068ae <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 80068ae:	b580      	push	{r7, lr}
 80068b0:	b082      	sub	sp, #8
 80068b2:	af00      	add	r7, sp, #0
 80068b4:	6078      	str	r0, [r7, #4]
 80068b6:	460b      	mov	r3, r1
 80068b8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	32ae      	adds	r2, #174	; 0xae
 80068c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068c8:	2b00      	cmp	r3, #0
 80068ca:	d101      	bne.n	80068d0 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80068cc:	2303      	movs	r3, #3
 80068ce:	e01c      	b.n	800690a <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d6:	b2db      	uxtb	r3, r3
 80068d8:	2b03      	cmp	r3, #3
 80068da:	d115      	bne.n	8006908 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	32ae      	adds	r2, #174	; 0xae
 80068e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ea:	6a1b      	ldr	r3, [r3, #32]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00b      	beq.n	8006908 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	32ae      	adds	r2, #174	; 0xae
 80068fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068fe:	6a1b      	ldr	r3, [r3, #32]
 8006900:	78fa      	ldrb	r2, [r7, #3]
 8006902:	4611      	mov	r1, r2
 8006904:	6878      	ldr	r0, [r7, #4]
 8006906:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006908:	2300      	movs	r3, #0
}
 800690a:	4618      	mov	r0, r3
 800690c:	3708      	adds	r7, #8
 800690e:	46bd      	mov	sp, r7
 8006910:	bd80      	pop	{r7, pc}

08006912 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8006912:	b580      	push	{r7, lr}
 8006914:	b082      	sub	sp, #8
 8006916:	af00      	add	r7, sp, #0
 8006918:	6078      	str	r0, [r7, #4]
 800691a:	460b      	mov	r3, r1
 800691c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	32ae      	adds	r2, #174	; 0xae
 8006928:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d101      	bne.n	8006934 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006930:	2303      	movs	r3, #3
 8006932:	e01c      	b.n	800696e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800693a:	b2db      	uxtb	r3, r3
 800693c:	2b03      	cmp	r3, #3
 800693e:	d115      	bne.n	800696c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	32ae      	adds	r2, #174	; 0xae
 800694a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800694e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006950:	2b00      	cmp	r3, #0
 8006952:	d00b      	beq.n	800696c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	32ae      	adds	r2, #174	; 0xae
 800695e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006964:	78fa      	ldrb	r2, [r7, #3]
 8006966:	4611      	mov	r1, r2
 8006968:	6878      	ldr	r0, [r7, #4]
 800696a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800696c:	2300      	movs	r3, #0
}
 800696e:	4618      	mov	r0, r3
 8006970:	3708      	adds	r7, #8
 8006972:	46bd      	mov	sp, r7
 8006974:	bd80      	pop	{r7, pc}

08006976 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006976:	b480      	push	{r7}
 8006978:	b083      	sub	sp, #12
 800697a:	af00      	add	r7, sp, #0
 800697c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800697e:	2300      	movs	r3, #0
}
 8006980:	4618      	mov	r0, r3
 8006982:	370c      	adds	r7, #12
 8006984:	46bd      	mov	sp, r7
 8006986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698a:	4770      	bx	lr

0800698c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800698c:	b580      	push	{r7, lr}
 800698e:	b084      	sub	sp, #16
 8006990:	af00      	add	r7, sp, #0
 8006992:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006994:	2300      	movs	r3, #0
 8006996:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	2201      	movs	r2, #1
 800699c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069a0:	687b      	ldr	r3, [r7, #4]
 80069a2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00e      	beq.n	80069c8 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 80069aa:	687b      	ldr	r3, [r7, #4]
 80069ac:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069b0:	685b      	ldr	r3, [r3, #4]
 80069b2:	687a      	ldr	r2, [r7, #4]
 80069b4:	6852      	ldr	r2, [r2, #4]
 80069b6:	b2d2      	uxtb	r2, r2
 80069b8:	4611      	mov	r1, r2
 80069ba:	6878      	ldr	r0, [r7, #4]
 80069bc:	4798      	blx	r3
 80069be:	4603      	mov	r3, r0
 80069c0:	2b00      	cmp	r3, #0
 80069c2:	d001      	beq.n	80069c8 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80069c4:	2303      	movs	r3, #3
 80069c6:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80069c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	3710      	adds	r7, #16
 80069ce:	46bd      	mov	sp, r7
 80069d0:	bd80      	pop	{r7, pc}

080069d2 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069d2:	b480      	push	{r7}
 80069d4:	b083      	sub	sp, #12
 80069d6:	af00      	add	r7, sp, #0
 80069d8:	6078      	str	r0, [r7, #4]
 80069da:	460b      	mov	r3, r1
 80069dc:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069de:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069e0:	4618      	mov	r0, r3
 80069e2:	370c      	adds	r7, #12
 80069e4:	46bd      	mov	sp, r7
 80069e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ea:	4770      	bx	lr

080069ec <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b083      	sub	sp, #12
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	460b      	mov	r3, r1
 80069f6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80069f8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80069fa:	4618      	mov	r0, r3
 80069fc:	370c      	adds	r7, #12
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006a06:	b580      	push	{r7, lr}
 8006a08:	b086      	sub	sp, #24
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	460b      	mov	r3, r1
 8006a10:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	885b      	ldrh	r3, [r3, #2]
 8006a22:	b29a      	uxth	r2, r3
 8006a24:	68fb      	ldr	r3, [r7, #12]
 8006a26:	781b      	ldrb	r3, [r3, #0]
 8006a28:	b29b      	uxth	r3, r3
 8006a2a:	429a      	cmp	r2, r3
 8006a2c:	d920      	bls.n	8006a70 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006a2e:	68fb      	ldr	r3, [r7, #12]
 8006a30:	781b      	ldrb	r3, [r3, #0]
 8006a32:	b29b      	uxth	r3, r3
 8006a34:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a36:	e013      	b.n	8006a60 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a38:	f107 030a 	add.w	r3, r7, #10
 8006a3c:	4619      	mov	r1, r3
 8006a3e:	6978      	ldr	r0, [r7, #20]
 8006a40:	f000 f81b 	bl	8006a7a <USBD_GetNextDesc>
 8006a44:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a46:	697b      	ldr	r3, [r7, #20]
 8006a48:	785b      	ldrb	r3, [r3, #1]
 8006a4a:	2b05      	cmp	r3, #5
 8006a4c:	d108      	bne.n	8006a60 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006a4e:	697b      	ldr	r3, [r7, #20]
 8006a50:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006a52:	693b      	ldr	r3, [r7, #16]
 8006a54:	789b      	ldrb	r3, [r3, #2]
 8006a56:	78fa      	ldrb	r2, [r7, #3]
 8006a58:	429a      	cmp	r2, r3
 8006a5a:	d008      	beq.n	8006a6e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006a5c:	2300      	movs	r3, #0
 8006a5e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	885b      	ldrh	r3, [r3, #2]
 8006a64:	b29a      	uxth	r2, r3
 8006a66:	897b      	ldrh	r3, [r7, #10]
 8006a68:	429a      	cmp	r2, r3
 8006a6a:	d8e5      	bhi.n	8006a38 <USBD_GetEpDesc+0x32>
 8006a6c:	e000      	b.n	8006a70 <USBD_GetEpDesc+0x6a>
          break;
 8006a6e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006a70:	693b      	ldr	r3, [r7, #16]
}
 8006a72:	4618      	mov	r0, r3
 8006a74:	3718      	adds	r7, #24
 8006a76:	46bd      	mov	sp, r7
 8006a78:	bd80      	pop	{r7, pc}

08006a7a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006a7a:	b480      	push	{r7}
 8006a7c:	b085      	sub	sp, #20
 8006a7e:	af00      	add	r7, sp, #0
 8006a80:	6078      	str	r0, [r7, #4]
 8006a82:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	881a      	ldrh	r2, [r3, #0]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	b29b      	uxth	r3, r3
 8006a92:	4413      	add	r3, r2
 8006a94:	b29a      	uxth	r2, r3
 8006a96:	683b      	ldr	r3, [r7, #0]
 8006a98:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006a9a:	68fb      	ldr	r3, [r7, #12]
 8006a9c:	781b      	ldrb	r3, [r3, #0]
 8006a9e:	461a      	mov	r2, r3
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	4413      	add	r3, r2
 8006aa4:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006aa6:	68fb      	ldr	r3, [r7, #12]
}
 8006aa8:	4618      	mov	r0, r3
 8006aaa:	3714      	adds	r7, #20
 8006aac:	46bd      	mov	sp, r7
 8006aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab2:	4770      	bx	lr

08006ab4 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b087      	sub	sp, #28
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006ac0:	697b      	ldr	r3, [r7, #20]
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	3301      	adds	r3, #1
 8006aca:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	781b      	ldrb	r3, [r3, #0]
 8006ad0:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006ad2:	8a3b      	ldrh	r3, [r7, #16]
 8006ad4:	021b      	lsls	r3, r3, #8
 8006ad6:	b21a      	sxth	r2, r3
 8006ad8:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	b21b      	sxth	r3, r3
 8006ae0:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006ae2:	89fb      	ldrh	r3, [r7, #14]
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	371c      	adds	r7, #28
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr

08006af0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006afa:	2300      	movs	r3, #0
 8006afc:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	781b      	ldrb	r3, [r3, #0]
 8006b02:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b06:	2b40      	cmp	r3, #64	; 0x40
 8006b08:	d005      	beq.n	8006b16 <USBD_StdDevReq+0x26>
 8006b0a:	2b40      	cmp	r3, #64	; 0x40
 8006b0c:	d857      	bhi.n	8006bbe <USBD_StdDevReq+0xce>
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d00f      	beq.n	8006b32 <USBD_StdDevReq+0x42>
 8006b12:	2b20      	cmp	r3, #32
 8006b14:	d153      	bne.n	8006bbe <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	32ae      	adds	r2, #174	; 0xae
 8006b20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b24:	689b      	ldr	r3, [r3, #8]
 8006b26:	6839      	ldr	r1, [r7, #0]
 8006b28:	6878      	ldr	r0, [r7, #4]
 8006b2a:	4798      	blx	r3
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	73fb      	strb	r3, [r7, #15]
      break;
 8006b30:	e04a      	b.n	8006bc8 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	785b      	ldrb	r3, [r3, #1]
 8006b36:	2b09      	cmp	r3, #9
 8006b38:	d83b      	bhi.n	8006bb2 <USBD_StdDevReq+0xc2>
 8006b3a:	a201      	add	r2, pc, #4	; (adr r2, 8006b40 <USBD_StdDevReq+0x50>)
 8006b3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b40:	08006b95 	.word	0x08006b95
 8006b44:	08006ba9 	.word	0x08006ba9
 8006b48:	08006bb3 	.word	0x08006bb3
 8006b4c:	08006b9f 	.word	0x08006b9f
 8006b50:	08006bb3 	.word	0x08006bb3
 8006b54:	08006b73 	.word	0x08006b73
 8006b58:	08006b69 	.word	0x08006b69
 8006b5c:	08006bb3 	.word	0x08006bb3
 8006b60:	08006b8b 	.word	0x08006b8b
 8006b64:	08006b7d 	.word	0x08006b7d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006b68:	6839      	ldr	r1, [r7, #0]
 8006b6a:	6878      	ldr	r0, [r7, #4]
 8006b6c:	f000 fa3c 	bl	8006fe8 <USBD_GetDescriptor>
          break;
 8006b70:	e024      	b.n	8006bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006b72:	6839      	ldr	r1, [r7, #0]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fba1 	bl	80072bc <USBD_SetAddress>
          break;
 8006b7a:	e01f      	b.n	8006bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fbe0 	bl	8007344 <USBD_SetConfig>
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]
          break;
 8006b88:	e018      	b.n	8006bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006b8a:	6839      	ldr	r1, [r7, #0]
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fc83 	bl	8007498 <USBD_GetConfig>
          break;
 8006b92:	e013      	b.n	8006bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006b94:	6839      	ldr	r1, [r7, #0]
 8006b96:	6878      	ldr	r0, [r7, #4]
 8006b98:	f000 fcb4 	bl	8007504 <USBD_GetStatus>
          break;
 8006b9c:	e00e      	b.n	8006bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006b9e:	6839      	ldr	r1, [r7, #0]
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fce3 	bl	800756c <USBD_SetFeature>
          break;
 8006ba6:	e009      	b.n	8006bbc <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006ba8:	6839      	ldr	r1, [r7, #0]
 8006baa:	6878      	ldr	r0, [r7, #4]
 8006bac:	f000 fd07 	bl	80075be <USBD_ClrFeature>
          break;
 8006bb0:	e004      	b.n	8006bbc <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006bb2:	6839      	ldr	r1, [r7, #0]
 8006bb4:	6878      	ldr	r0, [r7, #4]
 8006bb6:	f000 fd5e 	bl	8007676 <USBD_CtlError>
          break;
 8006bba:	bf00      	nop
      }
      break;
 8006bbc:	e004      	b.n	8006bc8 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fd58 	bl	8007676 <USBD_CtlError>
      break;
 8006bc6:	bf00      	nop
  }

  return ret;
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop

08006bd4 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006bd4:	b580      	push	{r7, lr}
 8006bd6:	b084      	sub	sp, #16
 8006bd8:	af00      	add	r7, sp, #0
 8006bda:	6078      	str	r0, [r7, #4]
 8006bdc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006bde:	2300      	movs	r3, #0
 8006be0:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	781b      	ldrb	r3, [r3, #0]
 8006be6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006bea:	2b40      	cmp	r3, #64	; 0x40
 8006bec:	d005      	beq.n	8006bfa <USBD_StdItfReq+0x26>
 8006bee:	2b40      	cmp	r3, #64	; 0x40
 8006bf0:	d852      	bhi.n	8006c98 <USBD_StdItfReq+0xc4>
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	d001      	beq.n	8006bfa <USBD_StdItfReq+0x26>
 8006bf6:	2b20      	cmp	r3, #32
 8006bf8:	d14e      	bne.n	8006c98 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c00:	b2db      	uxtb	r3, r3
 8006c02:	3b01      	subs	r3, #1
 8006c04:	2b02      	cmp	r3, #2
 8006c06:	d840      	bhi.n	8006c8a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c08:	683b      	ldr	r3, [r7, #0]
 8006c0a:	889b      	ldrh	r3, [r3, #4]
 8006c0c:	b2db      	uxtb	r3, r3
 8006c0e:	2b01      	cmp	r3, #1
 8006c10:	d836      	bhi.n	8006c80 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006c12:	683b      	ldr	r3, [r7, #0]
 8006c14:	889b      	ldrh	r3, [r3, #4]
 8006c16:	b2db      	uxtb	r3, r3
 8006c18:	4619      	mov	r1, r3
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f7ff fed9 	bl	80069d2 <USBD_CoreFindIF>
 8006c20:	4603      	mov	r3, r0
 8006c22:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c24:	7bbb      	ldrb	r3, [r7, #14]
 8006c26:	2bff      	cmp	r3, #255	; 0xff
 8006c28:	d01d      	beq.n	8006c66 <USBD_StdItfReq+0x92>
 8006c2a:	7bbb      	ldrb	r3, [r7, #14]
 8006c2c:	2b00      	cmp	r3, #0
 8006c2e:	d11a      	bne.n	8006c66 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c30:	7bba      	ldrb	r2, [r7, #14]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	32ae      	adds	r2, #174	; 0xae
 8006c36:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c3a:	689b      	ldr	r3, [r3, #8]
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d00f      	beq.n	8006c60 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c40:	7bba      	ldrb	r2, [r7, #14]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006c48:	7bba      	ldrb	r2, [r7, #14]
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	32ae      	adds	r2, #174	; 0xae
 8006c4e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	6839      	ldr	r1, [r7, #0]
 8006c56:	6878      	ldr	r0, [r7, #4]
 8006c58:	4798      	blx	r3
 8006c5a:	4603      	mov	r3, r0
 8006c5c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c5e:	e004      	b.n	8006c6a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006c60:	2303      	movs	r3, #3
 8006c62:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006c64:	e001      	b.n	8006c6a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006c66:	2303      	movs	r3, #3
 8006c68:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	88db      	ldrh	r3, [r3, #6]
 8006c6e:	2b00      	cmp	r3, #0
 8006c70:	d110      	bne.n	8006c94 <USBD_StdItfReq+0xc0>
 8006c72:	7bfb      	ldrb	r3, [r7, #15]
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10d      	bne.n	8006c94 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006c78:	6878      	ldr	r0, [r7, #4]
 8006c7a:	f000 fdaa 	bl	80077d2 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006c7e:	e009      	b.n	8006c94 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fcf7 	bl	8007676 <USBD_CtlError>
          break;
 8006c88:	e004      	b.n	8006c94 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006c8a:	6839      	ldr	r1, [r7, #0]
 8006c8c:	6878      	ldr	r0, [r7, #4]
 8006c8e:	f000 fcf2 	bl	8007676 <USBD_CtlError>
          break;
 8006c92:	e000      	b.n	8006c96 <USBD_StdItfReq+0xc2>
          break;
 8006c94:	bf00      	nop
      }
      break;
 8006c96:	e004      	b.n	8006ca2 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006c98:	6839      	ldr	r1, [r7, #0]
 8006c9a:	6878      	ldr	r0, [r7, #4]
 8006c9c:	f000 fceb 	bl	8007676 <USBD_CtlError>
      break;
 8006ca0:	bf00      	nop
  }

  return ret;
 8006ca2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006ca4:	4618      	mov	r0, r3
 8006ca6:	3710      	adds	r7, #16
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b084      	sub	sp, #16
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
 8006cb4:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	889b      	ldrh	r3, [r3, #4]
 8006cbe:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006cc0:	683b      	ldr	r3, [r7, #0]
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006cc8:	2b40      	cmp	r3, #64	; 0x40
 8006cca:	d007      	beq.n	8006cdc <USBD_StdEPReq+0x30>
 8006ccc:	2b40      	cmp	r3, #64	; 0x40
 8006cce:	f200 817f 	bhi.w	8006fd0 <USBD_StdEPReq+0x324>
 8006cd2:	2b00      	cmp	r3, #0
 8006cd4:	d02a      	beq.n	8006d2c <USBD_StdEPReq+0x80>
 8006cd6:	2b20      	cmp	r3, #32
 8006cd8:	f040 817a 	bne.w	8006fd0 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006cdc:	7bbb      	ldrb	r3, [r7, #14]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	6878      	ldr	r0, [r7, #4]
 8006ce2:	f7ff fe83 	bl	80069ec <USBD_CoreFindEP>
 8006ce6:	4603      	mov	r3, r0
 8006ce8:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006cea:	7b7b      	ldrb	r3, [r7, #13]
 8006cec:	2bff      	cmp	r3, #255	; 0xff
 8006cee:	f000 8174 	beq.w	8006fda <USBD_StdEPReq+0x32e>
 8006cf2:	7b7b      	ldrb	r3, [r7, #13]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	f040 8170 	bne.w	8006fda <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006cfa:	7b7a      	ldrb	r2, [r7, #13]
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006d02:	7b7a      	ldrb	r2, [r7, #13]
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	32ae      	adds	r2, #174	; 0xae
 8006d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d0c:	689b      	ldr	r3, [r3, #8]
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	f000 8163 	beq.w	8006fda <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006d14:	7b7a      	ldrb	r2, [r7, #13]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	32ae      	adds	r2, #174	; 0xae
 8006d1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d1e:	689b      	ldr	r3, [r3, #8]
 8006d20:	6839      	ldr	r1, [r7, #0]
 8006d22:	6878      	ldr	r0, [r7, #4]
 8006d24:	4798      	blx	r3
 8006d26:	4603      	mov	r3, r0
 8006d28:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d2a:	e156      	b.n	8006fda <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	785b      	ldrb	r3, [r3, #1]
 8006d30:	2b03      	cmp	r3, #3
 8006d32:	d008      	beq.n	8006d46 <USBD_StdEPReq+0x9a>
 8006d34:	2b03      	cmp	r3, #3
 8006d36:	f300 8145 	bgt.w	8006fc4 <USBD_StdEPReq+0x318>
 8006d3a:	2b00      	cmp	r3, #0
 8006d3c:	f000 809b 	beq.w	8006e76 <USBD_StdEPReq+0x1ca>
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d03c      	beq.n	8006dbe <USBD_StdEPReq+0x112>
 8006d44:	e13e      	b.n	8006fc4 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d46:	687b      	ldr	r3, [r7, #4]
 8006d48:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d4c:	b2db      	uxtb	r3, r3
 8006d4e:	2b02      	cmp	r3, #2
 8006d50:	d002      	beq.n	8006d58 <USBD_StdEPReq+0xac>
 8006d52:	2b03      	cmp	r3, #3
 8006d54:	d016      	beq.n	8006d84 <USBD_StdEPReq+0xd8>
 8006d56:	e02c      	b.n	8006db2 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006d58:	7bbb      	ldrb	r3, [r7, #14]
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d00d      	beq.n	8006d7a <USBD_StdEPReq+0xce>
 8006d5e:	7bbb      	ldrb	r3, [r7, #14]
 8006d60:	2b80      	cmp	r3, #128	; 0x80
 8006d62:	d00a      	beq.n	8006d7a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006d64:	7bbb      	ldrb	r3, [r7, #14]
 8006d66:	4619      	mov	r1, r3
 8006d68:	6878      	ldr	r0, [r7, #4]
 8006d6a:	f001 f877 	bl	8007e5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006d6e:	2180      	movs	r1, #128	; 0x80
 8006d70:	6878      	ldr	r0, [r7, #4]
 8006d72:	f001 f873 	bl	8007e5c <USBD_LL_StallEP>
 8006d76:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006d78:	e020      	b.n	8006dbc <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006d7a:	6839      	ldr	r1, [r7, #0]
 8006d7c:	6878      	ldr	r0, [r7, #4]
 8006d7e:	f000 fc7a 	bl	8007676 <USBD_CtlError>
              break;
 8006d82:	e01b      	b.n	8006dbc <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	885b      	ldrh	r3, [r3, #2]
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d10e      	bne.n	8006daa <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d00b      	beq.n	8006daa <USBD_StdEPReq+0xfe>
 8006d92:	7bbb      	ldrb	r3, [r7, #14]
 8006d94:	2b80      	cmp	r3, #128	; 0x80
 8006d96:	d008      	beq.n	8006daa <USBD_StdEPReq+0xfe>
 8006d98:	683b      	ldr	r3, [r7, #0]
 8006d9a:	88db      	ldrh	r3, [r3, #6]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	d104      	bne.n	8006daa <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006da0:	7bbb      	ldrb	r3, [r7, #14]
 8006da2:	4619      	mov	r1, r3
 8006da4:	6878      	ldr	r0, [r7, #4]
 8006da6:	f001 f859 	bl	8007e5c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f000 fd11 	bl	80077d2 <USBD_CtlSendStatus>

              break;
 8006db0:	e004      	b.n	8006dbc <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006db2:	6839      	ldr	r1, [r7, #0]
 8006db4:	6878      	ldr	r0, [r7, #4]
 8006db6:	f000 fc5e 	bl	8007676 <USBD_CtlError>
              break;
 8006dba:	bf00      	nop
          }
          break;
 8006dbc:	e107      	b.n	8006fce <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b02      	cmp	r3, #2
 8006dc8:	d002      	beq.n	8006dd0 <USBD_StdEPReq+0x124>
 8006dca:	2b03      	cmp	r3, #3
 8006dcc:	d016      	beq.n	8006dfc <USBD_StdEPReq+0x150>
 8006dce:	e04b      	b.n	8006e68 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006dd0:	7bbb      	ldrb	r3, [r7, #14]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d00d      	beq.n	8006df2 <USBD_StdEPReq+0x146>
 8006dd6:	7bbb      	ldrb	r3, [r7, #14]
 8006dd8:	2b80      	cmp	r3, #128	; 0x80
 8006dda:	d00a      	beq.n	8006df2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006ddc:	7bbb      	ldrb	r3, [r7, #14]
 8006dde:	4619      	mov	r1, r3
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f001 f83b 	bl	8007e5c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006de6:	2180      	movs	r1, #128	; 0x80
 8006de8:	6878      	ldr	r0, [r7, #4]
 8006dea:	f001 f837 	bl	8007e5c <USBD_LL_StallEP>
 8006dee:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006df0:	e040      	b.n	8006e74 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006df2:	6839      	ldr	r1, [r7, #0]
 8006df4:	6878      	ldr	r0, [r7, #4]
 8006df6:	f000 fc3e 	bl	8007676 <USBD_CtlError>
              break;
 8006dfa:	e03b      	b.n	8006e74 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006dfc:	683b      	ldr	r3, [r7, #0]
 8006dfe:	885b      	ldrh	r3, [r3, #2]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d136      	bne.n	8006e72 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e04:	7bbb      	ldrb	r3, [r7, #14]
 8006e06:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e0a:	2b00      	cmp	r3, #0
 8006e0c:	d004      	beq.n	8006e18 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e0e:	7bbb      	ldrb	r3, [r7, #14]
 8006e10:	4619      	mov	r1, r3
 8006e12:	6878      	ldr	r0, [r7, #4]
 8006e14:	f001 f841 	bl	8007e9a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e18:	6878      	ldr	r0, [r7, #4]
 8006e1a:	f000 fcda 	bl	80077d2 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e1e:	7bbb      	ldrb	r3, [r7, #14]
 8006e20:	4619      	mov	r1, r3
 8006e22:	6878      	ldr	r0, [r7, #4]
 8006e24:	f7ff fde2 	bl	80069ec <USBD_CoreFindEP>
 8006e28:	4603      	mov	r3, r0
 8006e2a:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e2c:	7b7b      	ldrb	r3, [r7, #13]
 8006e2e:	2bff      	cmp	r3, #255	; 0xff
 8006e30:	d01f      	beq.n	8006e72 <USBD_StdEPReq+0x1c6>
 8006e32:	7b7b      	ldrb	r3, [r7, #13]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d11c      	bne.n	8006e72 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e38:	7b7a      	ldrb	r2, [r7, #13]
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e40:	7b7a      	ldrb	r2, [r7, #13]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	32ae      	adds	r2, #174	; 0xae
 8006e46:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e4a:	689b      	ldr	r3, [r3, #8]
 8006e4c:	2b00      	cmp	r3, #0
 8006e4e:	d010      	beq.n	8006e72 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006e50:	7b7a      	ldrb	r2, [r7, #13]
 8006e52:	687b      	ldr	r3, [r7, #4]
 8006e54:	32ae      	adds	r2, #174	; 0xae
 8006e56:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006e5a:	689b      	ldr	r3, [r3, #8]
 8006e5c:	6839      	ldr	r1, [r7, #0]
 8006e5e:	6878      	ldr	r0, [r7, #4]
 8006e60:	4798      	blx	r3
 8006e62:	4603      	mov	r3, r0
 8006e64:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006e66:	e004      	b.n	8006e72 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006e68:	6839      	ldr	r1, [r7, #0]
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f000 fc03 	bl	8007676 <USBD_CtlError>
              break;
 8006e70:	e000      	b.n	8006e74 <USBD_StdEPReq+0x1c8>
              break;
 8006e72:	bf00      	nop
          }
          break;
 8006e74:	e0ab      	b.n	8006fce <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e7c:	b2db      	uxtb	r3, r3
 8006e7e:	2b02      	cmp	r3, #2
 8006e80:	d002      	beq.n	8006e88 <USBD_StdEPReq+0x1dc>
 8006e82:	2b03      	cmp	r3, #3
 8006e84:	d032      	beq.n	8006eec <USBD_StdEPReq+0x240>
 8006e86:	e097      	b.n	8006fb8 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e88:	7bbb      	ldrb	r3, [r7, #14]
 8006e8a:	2b00      	cmp	r3, #0
 8006e8c:	d007      	beq.n	8006e9e <USBD_StdEPReq+0x1f2>
 8006e8e:	7bbb      	ldrb	r3, [r7, #14]
 8006e90:	2b80      	cmp	r3, #128	; 0x80
 8006e92:	d004      	beq.n	8006e9e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006e94:	6839      	ldr	r1, [r7, #0]
 8006e96:	6878      	ldr	r0, [r7, #4]
 8006e98:	f000 fbed 	bl	8007676 <USBD_CtlError>
                break;
 8006e9c:	e091      	b.n	8006fc2 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006e9e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	da0b      	bge.n	8006ebe <USBD_StdEPReq+0x212>
 8006ea6:	7bbb      	ldrb	r3, [r7, #14]
 8006ea8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006eac:	4613      	mov	r3, r2
 8006eae:	009b      	lsls	r3, r3, #2
 8006eb0:	4413      	add	r3, r2
 8006eb2:	009b      	lsls	r3, r3, #2
 8006eb4:	3310      	adds	r3, #16
 8006eb6:	687a      	ldr	r2, [r7, #4]
 8006eb8:	4413      	add	r3, r2
 8006eba:	3304      	adds	r3, #4
 8006ebc:	e00b      	b.n	8006ed6 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006ebe:	7bbb      	ldrb	r3, [r7, #14]
 8006ec0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ec4:	4613      	mov	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	4413      	add	r3, r2
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006ed0:	687a      	ldr	r2, [r7, #4]
 8006ed2:	4413      	add	r3, r2
 8006ed4:	3304      	adds	r3, #4
 8006ed6:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	2200      	movs	r2, #0
 8006edc:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006ede:	68bb      	ldr	r3, [r7, #8]
 8006ee0:	2202      	movs	r2, #2
 8006ee2:	4619      	mov	r1, r3
 8006ee4:	6878      	ldr	r0, [r7, #4]
 8006ee6:	f000 fc37 	bl	8007758 <USBD_CtlSendData>
              break;
 8006eea:	e06a      	b.n	8006fc2 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006eec:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ef0:	2b00      	cmp	r3, #0
 8006ef2:	da11      	bge.n	8006f18 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ef4:	7bbb      	ldrb	r3, [r7, #14]
 8006ef6:	f003 020f 	and.w	r2, r3, #15
 8006efa:	6879      	ldr	r1, [r7, #4]
 8006efc:	4613      	mov	r3, r2
 8006efe:	009b      	lsls	r3, r3, #2
 8006f00:	4413      	add	r3, r2
 8006f02:	009b      	lsls	r3, r3, #2
 8006f04:	440b      	add	r3, r1
 8006f06:	3324      	adds	r3, #36	; 0x24
 8006f08:	881b      	ldrh	r3, [r3, #0]
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d117      	bne.n	8006f3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fbb0 	bl	8007676 <USBD_CtlError>
                  break;
 8006f16:	e054      	b.n	8006fc2 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f18:	7bbb      	ldrb	r3, [r7, #14]
 8006f1a:	f003 020f 	and.w	r2, r3, #15
 8006f1e:	6879      	ldr	r1, [r7, #4]
 8006f20:	4613      	mov	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	4413      	add	r3, r2
 8006f26:	009b      	lsls	r3, r3, #2
 8006f28:	440b      	add	r3, r1
 8006f2a:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f2e:	881b      	ldrh	r3, [r3, #0]
 8006f30:	2b00      	cmp	r3, #0
 8006f32:	d104      	bne.n	8006f3e <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f34:	6839      	ldr	r1, [r7, #0]
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 fb9d 	bl	8007676 <USBD_CtlError>
                  break;
 8006f3c:	e041      	b.n	8006fc2 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f3e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	da0b      	bge.n	8006f5e <USBD_StdEPReq+0x2b2>
 8006f46:	7bbb      	ldrb	r3, [r7, #14]
 8006f48:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f4c:	4613      	mov	r3, r2
 8006f4e:	009b      	lsls	r3, r3, #2
 8006f50:	4413      	add	r3, r2
 8006f52:	009b      	lsls	r3, r3, #2
 8006f54:	3310      	adds	r3, #16
 8006f56:	687a      	ldr	r2, [r7, #4]
 8006f58:	4413      	add	r3, r2
 8006f5a:	3304      	adds	r3, #4
 8006f5c:	e00b      	b.n	8006f76 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f5e:	7bbb      	ldrb	r3, [r7, #14]
 8006f60:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f64:	4613      	mov	r3, r2
 8006f66:	009b      	lsls	r3, r3, #2
 8006f68:	4413      	add	r3, r2
 8006f6a:	009b      	lsls	r3, r3, #2
 8006f6c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f70:	687a      	ldr	r2, [r7, #4]
 8006f72:	4413      	add	r3, r2
 8006f74:	3304      	adds	r3, #4
 8006f76:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006f78:	7bbb      	ldrb	r3, [r7, #14]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d002      	beq.n	8006f84 <USBD_StdEPReq+0x2d8>
 8006f7e:	7bbb      	ldrb	r3, [r7, #14]
 8006f80:	2b80      	cmp	r3, #128	; 0x80
 8006f82:	d103      	bne.n	8006f8c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006f84:	68bb      	ldr	r3, [r7, #8]
 8006f86:	2200      	movs	r2, #0
 8006f88:	601a      	str	r2, [r3, #0]
 8006f8a:	e00e      	b.n	8006faa <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006f8c:	7bbb      	ldrb	r3, [r7, #14]
 8006f8e:	4619      	mov	r1, r3
 8006f90:	6878      	ldr	r0, [r7, #4]
 8006f92:	f000 ffa1 	bl	8007ed8 <USBD_LL_IsStallEP>
 8006f96:	4603      	mov	r3, r0
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d003      	beq.n	8006fa4 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006f9c:	68bb      	ldr	r3, [r7, #8]
 8006f9e:	2201      	movs	r2, #1
 8006fa0:	601a      	str	r2, [r3, #0]
 8006fa2:	e002      	b.n	8006faa <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006fa4:	68bb      	ldr	r3, [r7, #8]
 8006fa6:	2200      	movs	r2, #0
 8006fa8:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006faa:	68bb      	ldr	r3, [r7, #8]
 8006fac:	2202      	movs	r2, #2
 8006fae:	4619      	mov	r1, r3
 8006fb0:	6878      	ldr	r0, [r7, #4]
 8006fb2:	f000 fbd1 	bl	8007758 <USBD_CtlSendData>
              break;
 8006fb6:	e004      	b.n	8006fc2 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006fb8:	6839      	ldr	r1, [r7, #0]
 8006fba:	6878      	ldr	r0, [r7, #4]
 8006fbc:	f000 fb5b 	bl	8007676 <USBD_CtlError>
              break;
 8006fc0:	bf00      	nop
          }
          break;
 8006fc2:	e004      	b.n	8006fce <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006fc4:	6839      	ldr	r1, [r7, #0]
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 fb55 	bl	8007676 <USBD_CtlError>
          break;
 8006fcc:	bf00      	nop
      }
      break;
 8006fce:	e005      	b.n	8006fdc <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006fd0:	6839      	ldr	r1, [r7, #0]
 8006fd2:	6878      	ldr	r0, [r7, #4]
 8006fd4:	f000 fb4f 	bl	8007676 <USBD_CtlError>
      break;
 8006fd8:	e000      	b.n	8006fdc <USBD_StdEPReq+0x330>
      break;
 8006fda:	bf00      	nop
  }

  return ret;
 8006fdc:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fde:	4618      	mov	r0, r3
 8006fe0:	3710      	adds	r7, #16
 8006fe2:	46bd      	mov	sp, r7
 8006fe4:	bd80      	pop	{r7, pc}
	...

08006fe8 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b084      	sub	sp, #16
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
 8006ff0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ff6:	2300      	movs	r3, #0
 8006ff8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006ffa:	2300      	movs	r3, #0
 8006ffc:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006ffe:	683b      	ldr	r3, [r7, #0]
 8007000:	885b      	ldrh	r3, [r3, #2]
 8007002:	0a1b      	lsrs	r3, r3, #8
 8007004:	b29b      	uxth	r3, r3
 8007006:	3b01      	subs	r3, #1
 8007008:	2b06      	cmp	r3, #6
 800700a:	f200 8128 	bhi.w	800725e <USBD_GetDescriptor+0x276>
 800700e:	a201      	add	r2, pc, #4	; (adr r2, 8007014 <USBD_GetDescriptor+0x2c>)
 8007010:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007014:	08007031 	.word	0x08007031
 8007018:	08007049 	.word	0x08007049
 800701c:	08007089 	.word	0x08007089
 8007020:	0800725f 	.word	0x0800725f
 8007024:	0800725f 	.word	0x0800725f
 8007028:	080071ff 	.word	0x080071ff
 800702c:	0800722b 	.word	0x0800722b
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	687a      	ldr	r2, [r7, #4]
 800703a:	7c12      	ldrb	r2, [r2, #16]
 800703c:	f107 0108 	add.w	r1, r7, #8
 8007040:	4610      	mov	r0, r2
 8007042:	4798      	blx	r3
 8007044:	60f8      	str	r0, [r7, #12]
      break;
 8007046:	e112      	b.n	800726e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	7c1b      	ldrb	r3, [r3, #16]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d10d      	bne.n	800706c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8007050:	687b      	ldr	r3, [r7, #4]
 8007052:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007056:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007058:	f107 0208 	add.w	r2, r7, #8
 800705c:	4610      	mov	r0, r2
 800705e:	4798      	blx	r3
 8007060:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8007062:	68fb      	ldr	r3, [r7, #12]
 8007064:	3301      	adds	r3, #1
 8007066:	2202      	movs	r2, #2
 8007068:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800706a:	e100      	b.n	800726e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007072:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007074:	f107 0208 	add.w	r2, r7, #8
 8007078:	4610      	mov	r0, r2
 800707a:	4798      	blx	r3
 800707c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	3301      	adds	r3, #1
 8007082:	2202      	movs	r2, #2
 8007084:	701a      	strb	r2, [r3, #0]
      break;
 8007086:	e0f2      	b.n	800726e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	885b      	ldrh	r3, [r3, #2]
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b05      	cmp	r3, #5
 8007090:	f200 80ac 	bhi.w	80071ec <USBD_GetDescriptor+0x204>
 8007094:	a201      	add	r2, pc, #4	; (adr r2, 800709c <USBD_GetDescriptor+0xb4>)
 8007096:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800709a:	bf00      	nop
 800709c:	080070b5 	.word	0x080070b5
 80070a0:	080070e9 	.word	0x080070e9
 80070a4:	0800711d 	.word	0x0800711d
 80070a8:	08007151 	.word	0x08007151
 80070ac:	08007185 	.word	0x08007185
 80070b0:	080071b9 	.word	0x080071b9
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	2b00      	cmp	r3, #0
 80070be:	d00b      	beq.n	80070d8 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	687a      	ldr	r2, [r7, #4]
 80070ca:	7c12      	ldrb	r2, [r2, #16]
 80070cc:	f107 0108 	add.w	r1, r7, #8
 80070d0:	4610      	mov	r0, r2
 80070d2:	4798      	blx	r3
 80070d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80070d6:	e091      	b.n	80071fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80070d8:	6839      	ldr	r1, [r7, #0]
 80070da:	6878      	ldr	r0, [r7, #4]
 80070dc:	f000 facb 	bl	8007676 <USBD_CtlError>
            err++;
 80070e0:	7afb      	ldrb	r3, [r7, #11]
 80070e2:	3301      	adds	r3, #1
 80070e4:	72fb      	strb	r3, [r7, #11]
          break;
 80070e6:	e089      	b.n	80071fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070ee:	689b      	ldr	r3, [r3, #8]
 80070f0:	2b00      	cmp	r3, #0
 80070f2:	d00b      	beq.n	800710c <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80070fa:	689b      	ldr	r3, [r3, #8]
 80070fc:	687a      	ldr	r2, [r7, #4]
 80070fe:	7c12      	ldrb	r2, [r2, #16]
 8007100:	f107 0108 	add.w	r1, r7, #8
 8007104:	4610      	mov	r0, r2
 8007106:	4798      	blx	r3
 8007108:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800710a:	e077      	b.n	80071fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800710c:	6839      	ldr	r1, [r7, #0]
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 fab1 	bl	8007676 <USBD_CtlError>
            err++;
 8007114:	7afb      	ldrb	r3, [r7, #11]
 8007116:	3301      	adds	r3, #1
 8007118:	72fb      	strb	r3, [r7, #11]
          break;
 800711a:	e06f      	b.n	80071fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007122:	68db      	ldr	r3, [r3, #12]
 8007124:	2b00      	cmp	r3, #0
 8007126:	d00b      	beq.n	8007140 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800712e:	68db      	ldr	r3, [r3, #12]
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	7c12      	ldrb	r2, [r2, #16]
 8007134:	f107 0108 	add.w	r1, r7, #8
 8007138:	4610      	mov	r0, r2
 800713a:	4798      	blx	r3
 800713c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800713e:	e05d      	b.n	80071fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007140:	6839      	ldr	r1, [r7, #0]
 8007142:	6878      	ldr	r0, [r7, #4]
 8007144:	f000 fa97 	bl	8007676 <USBD_CtlError>
            err++;
 8007148:	7afb      	ldrb	r3, [r7, #11]
 800714a:	3301      	adds	r3, #1
 800714c:	72fb      	strb	r3, [r7, #11]
          break;
 800714e:	e055      	b.n	80071fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007156:	691b      	ldr	r3, [r3, #16]
 8007158:	2b00      	cmp	r3, #0
 800715a:	d00b      	beq.n	8007174 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007162:	691b      	ldr	r3, [r3, #16]
 8007164:	687a      	ldr	r2, [r7, #4]
 8007166:	7c12      	ldrb	r2, [r2, #16]
 8007168:	f107 0108 	add.w	r1, r7, #8
 800716c:	4610      	mov	r0, r2
 800716e:	4798      	blx	r3
 8007170:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007172:	e043      	b.n	80071fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007174:	6839      	ldr	r1, [r7, #0]
 8007176:	6878      	ldr	r0, [r7, #4]
 8007178:	f000 fa7d 	bl	8007676 <USBD_CtlError>
            err++;
 800717c:	7afb      	ldrb	r3, [r7, #11]
 800717e:	3301      	adds	r3, #1
 8007180:	72fb      	strb	r3, [r7, #11]
          break;
 8007182:	e03b      	b.n	80071fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800718a:	695b      	ldr	r3, [r3, #20]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00b      	beq.n	80071a8 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8007190:	687b      	ldr	r3, [r7, #4]
 8007192:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007196:	695b      	ldr	r3, [r3, #20]
 8007198:	687a      	ldr	r2, [r7, #4]
 800719a:	7c12      	ldrb	r2, [r2, #16]
 800719c:	f107 0108 	add.w	r1, r7, #8
 80071a0:	4610      	mov	r0, r2
 80071a2:	4798      	blx	r3
 80071a4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071a6:	e029      	b.n	80071fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071a8:	6839      	ldr	r1, [r7, #0]
 80071aa:	6878      	ldr	r0, [r7, #4]
 80071ac:	f000 fa63 	bl	8007676 <USBD_CtlError>
            err++;
 80071b0:	7afb      	ldrb	r3, [r7, #11]
 80071b2:	3301      	adds	r3, #1
 80071b4:	72fb      	strb	r3, [r7, #11]
          break;
 80071b6:	e021      	b.n	80071fc <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071be:	699b      	ldr	r3, [r3, #24]
 80071c0:	2b00      	cmp	r3, #0
 80071c2:	d00b      	beq.n	80071dc <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ca:	699b      	ldr	r3, [r3, #24]
 80071cc:	687a      	ldr	r2, [r7, #4]
 80071ce:	7c12      	ldrb	r2, [r2, #16]
 80071d0:	f107 0108 	add.w	r1, r7, #8
 80071d4:	4610      	mov	r0, r2
 80071d6:	4798      	blx	r3
 80071d8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071da:	e00f      	b.n	80071fc <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071dc:	6839      	ldr	r1, [r7, #0]
 80071de:	6878      	ldr	r0, [r7, #4]
 80071e0:	f000 fa49 	bl	8007676 <USBD_CtlError>
            err++;
 80071e4:	7afb      	ldrb	r3, [r7, #11]
 80071e6:	3301      	adds	r3, #1
 80071e8:	72fb      	strb	r3, [r7, #11]
          break;
 80071ea:	e007      	b.n	80071fc <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80071ec:	6839      	ldr	r1, [r7, #0]
 80071ee:	6878      	ldr	r0, [r7, #4]
 80071f0:	f000 fa41 	bl	8007676 <USBD_CtlError>
          err++;
 80071f4:	7afb      	ldrb	r3, [r7, #11]
 80071f6:	3301      	adds	r3, #1
 80071f8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80071fa:	bf00      	nop
      }
      break;
 80071fc:	e037      	b.n	800726e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	7c1b      	ldrb	r3, [r3, #16]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d109      	bne.n	800721a <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800720c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800720e:	f107 0208 	add.w	r2, r7, #8
 8007212:	4610      	mov	r0, r2
 8007214:	4798      	blx	r3
 8007216:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007218:	e029      	b.n	800726e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800721a:	6839      	ldr	r1, [r7, #0]
 800721c:	6878      	ldr	r0, [r7, #4]
 800721e:	f000 fa2a 	bl	8007676 <USBD_CtlError>
        err++;
 8007222:	7afb      	ldrb	r3, [r7, #11]
 8007224:	3301      	adds	r3, #1
 8007226:	72fb      	strb	r3, [r7, #11]
      break;
 8007228:	e021      	b.n	800726e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	7c1b      	ldrb	r3, [r3, #16]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10d      	bne.n	800724e <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723a:	f107 0208 	add.w	r2, r7, #8
 800723e:	4610      	mov	r0, r2
 8007240:	4798      	blx	r3
 8007242:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8007244:	68fb      	ldr	r3, [r7, #12]
 8007246:	3301      	adds	r3, #1
 8007248:	2207      	movs	r2, #7
 800724a:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800724c:	e00f      	b.n	800726e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800724e:	6839      	ldr	r1, [r7, #0]
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 fa10 	bl	8007676 <USBD_CtlError>
        err++;
 8007256:	7afb      	ldrb	r3, [r7, #11]
 8007258:	3301      	adds	r3, #1
 800725a:	72fb      	strb	r3, [r7, #11]
      break;
 800725c:	e007      	b.n	800726e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 fa08 	bl	8007676 <USBD_CtlError>
      err++;
 8007266:	7afb      	ldrb	r3, [r7, #11]
 8007268:	3301      	adds	r3, #1
 800726a:	72fb      	strb	r3, [r7, #11]
      break;
 800726c:	bf00      	nop
  }

  if (err != 0U)
 800726e:	7afb      	ldrb	r3, [r7, #11]
 8007270:	2b00      	cmp	r3, #0
 8007272:	d11e      	bne.n	80072b2 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8007274:	683b      	ldr	r3, [r7, #0]
 8007276:	88db      	ldrh	r3, [r3, #6]
 8007278:	2b00      	cmp	r3, #0
 800727a:	d016      	beq.n	80072aa <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 800727c:	893b      	ldrh	r3, [r7, #8]
 800727e:	2b00      	cmp	r3, #0
 8007280:	d00e      	beq.n	80072a0 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8007282:	683b      	ldr	r3, [r7, #0]
 8007284:	88da      	ldrh	r2, [r3, #6]
 8007286:	893b      	ldrh	r3, [r7, #8]
 8007288:	4293      	cmp	r3, r2
 800728a:	bf28      	it	cs
 800728c:	4613      	movcs	r3, r2
 800728e:	b29b      	uxth	r3, r3
 8007290:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8007292:	893b      	ldrh	r3, [r7, #8]
 8007294:	461a      	mov	r2, r3
 8007296:	68f9      	ldr	r1, [r7, #12]
 8007298:	6878      	ldr	r0, [r7, #4]
 800729a:	f000 fa5d 	bl	8007758 <USBD_CtlSendData>
 800729e:	e009      	b.n	80072b4 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80072a0:	6839      	ldr	r1, [r7, #0]
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f9e7 	bl	8007676 <USBD_CtlError>
 80072a8:	e004      	b.n	80072b4 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 80072aa:	6878      	ldr	r0, [r7, #4]
 80072ac:	f000 fa91 	bl	80077d2 <USBD_CtlSendStatus>
 80072b0:	e000      	b.n	80072b4 <USBD_GetDescriptor+0x2cc>
    return;
 80072b2:	bf00      	nop
  }
}
 80072b4:	3710      	adds	r7, #16
 80072b6:	46bd      	mov	sp, r7
 80072b8:	bd80      	pop	{r7, pc}
 80072ba:	bf00      	nop

080072bc <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80072bc:	b580      	push	{r7, lr}
 80072be:	b084      	sub	sp, #16
 80072c0:	af00      	add	r7, sp, #0
 80072c2:	6078      	str	r0, [r7, #4]
 80072c4:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 80072c6:	683b      	ldr	r3, [r7, #0]
 80072c8:	889b      	ldrh	r3, [r3, #4]
 80072ca:	2b00      	cmp	r3, #0
 80072cc:	d131      	bne.n	8007332 <USBD_SetAddress+0x76>
 80072ce:	683b      	ldr	r3, [r7, #0]
 80072d0:	88db      	ldrh	r3, [r3, #6]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d12d      	bne.n	8007332 <USBD_SetAddress+0x76>
 80072d6:	683b      	ldr	r3, [r7, #0]
 80072d8:	885b      	ldrh	r3, [r3, #2]
 80072da:	2b7f      	cmp	r3, #127	; 0x7f
 80072dc:	d829      	bhi.n	8007332 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80072de:	683b      	ldr	r3, [r7, #0]
 80072e0:	885b      	ldrh	r3, [r3, #2]
 80072e2:	b2db      	uxtb	r3, r3
 80072e4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80072e8:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b03      	cmp	r3, #3
 80072f4:	d104      	bne.n	8007300 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80072f6:	6839      	ldr	r1, [r7, #0]
 80072f8:	6878      	ldr	r0, [r7, #4]
 80072fa:	f000 f9bc 	bl	8007676 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80072fe:	e01d      	b.n	800733c <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	7bfa      	ldrb	r2, [r7, #15]
 8007304:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007308:	7bfb      	ldrb	r3, [r7, #15]
 800730a:	4619      	mov	r1, r3
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f000 fe0f 	bl	8007f30 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8007312:	6878      	ldr	r0, [r7, #4]
 8007314:	f000 fa5d 	bl	80077d2 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007318:	7bfb      	ldrb	r3, [r7, #15]
 800731a:	2b00      	cmp	r3, #0
 800731c:	d004      	beq.n	8007328 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	2202      	movs	r2, #2
 8007322:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007326:	e009      	b.n	800733c <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	2201      	movs	r2, #1
 800732c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007330:	e004      	b.n	800733c <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8007332:	6839      	ldr	r1, [r7, #0]
 8007334:	6878      	ldr	r0, [r7, #4]
 8007336:	f000 f99e 	bl	8007676 <USBD_CtlError>
  }
}
 800733a:	bf00      	nop
 800733c:	bf00      	nop
 800733e:	3710      	adds	r7, #16
 8007340:	46bd      	mov	sp, r7
 8007342:	bd80      	pop	{r7, pc}

08007344 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007344:	b580      	push	{r7, lr}
 8007346:	b084      	sub	sp, #16
 8007348:	af00      	add	r7, sp, #0
 800734a:	6078      	str	r0, [r7, #4]
 800734c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800734e:	2300      	movs	r3, #0
 8007350:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007352:	683b      	ldr	r3, [r7, #0]
 8007354:	885b      	ldrh	r3, [r3, #2]
 8007356:	b2da      	uxtb	r2, r3
 8007358:	4b4e      	ldr	r3, [pc, #312]	; (8007494 <USBD_SetConfig+0x150>)
 800735a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800735c:	4b4d      	ldr	r3, [pc, #308]	; (8007494 <USBD_SetConfig+0x150>)
 800735e:	781b      	ldrb	r3, [r3, #0]
 8007360:	2b01      	cmp	r3, #1
 8007362:	d905      	bls.n	8007370 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007364:	6839      	ldr	r1, [r7, #0]
 8007366:	6878      	ldr	r0, [r7, #4]
 8007368:	f000 f985 	bl	8007676 <USBD_CtlError>
    return USBD_FAIL;
 800736c:	2303      	movs	r3, #3
 800736e:	e08c      	b.n	800748a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007376:	b2db      	uxtb	r3, r3
 8007378:	2b02      	cmp	r3, #2
 800737a:	d002      	beq.n	8007382 <USBD_SetConfig+0x3e>
 800737c:	2b03      	cmp	r3, #3
 800737e:	d029      	beq.n	80073d4 <USBD_SetConfig+0x90>
 8007380:	e075      	b.n	800746e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007382:	4b44      	ldr	r3, [pc, #272]	; (8007494 <USBD_SetConfig+0x150>)
 8007384:	781b      	ldrb	r3, [r3, #0]
 8007386:	2b00      	cmp	r3, #0
 8007388:	d020      	beq.n	80073cc <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800738a:	4b42      	ldr	r3, [pc, #264]	; (8007494 <USBD_SetConfig+0x150>)
 800738c:	781b      	ldrb	r3, [r3, #0]
 800738e:	461a      	mov	r2, r3
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007394:	4b3f      	ldr	r3, [pc, #252]	; (8007494 <USBD_SetConfig+0x150>)
 8007396:	781b      	ldrb	r3, [r3, #0]
 8007398:	4619      	mov	r1, r3
 800739a:	6878      	ldr	r0, [r7, #4]
 800739c:	f7fe ffe7 	bl	800636e <USBD_SetClassConfig>
 80073a0:	4603      	mov	r3, r0
 80073a2:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80073a4:	7bfb      	ldrb	r3, [r7, #15]
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d008      	beq.n	80073bc <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 80073aa:	6839      	ldr	r1, [r7, #0]
 80073ac:	6878      	ldr	r0, [r7, #4]
 80073ae:	f000 f962 	bl	8007676 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	2202      	movs	r2, #2
 80073b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80073ba:	e065      	b.n	8007488 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80073bc:	6878      	ldr	r0, [r7, #4]
 80073be:	f000 fa08 	bl	80077d2 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	2203      	movs	r2, #3
 80073c6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80073ca:	e05d      	b.n	8007488 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80073cc:	6878      	ldr	r0, [r7, #4]
 80073ce:	f000 fa00 	bl	80077d2 <USBD_CtlSendStatus>
      break;
 80073d2:	e059      	b.n	8007488 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 80073d4:	4b2f      	ldr	r3, [pc, #188]	; (8007494 <USBD_SetConfig+0x150>)
 80073d6:	781b      	ldrb	r3, [r3, #0]
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d112      	bne.n	8007402 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	2202      	movs	r2, #2
 80073e0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80073e4:	4b2b      	ldr	r3, [pc, #172]	; (8007494 <USBD_SetConfig+0x150>)
 80073e6:	781b      	ldrb	r3, [r3, #0]
 80073e8:	461a      	mov	r2, r3
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80073ee:	4b29      	ldr	r3, [pc, #164]	; (8007494 <USBD_SetConfig+0x150>)
 80073f0:	781b      	ldrb	r3, [r3, #0]
 80073f2:	4619      	mov	r1, r3
 80073f4:	6878      	ldr	r0, [r7, #4]
 80073f6:	f7fe ffd6 	bl	80063a6 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80073fa:	6878      	ldr	r0, [r7, #4]
 80073fc:	f000 f9e9 	bl	80077d2 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007400:	e042      	b.n	8007488 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8007402:	4b24      	ldr	r3, [pc, #144]	; (8007494 <USBD_SetConfig+0x150>)
 8007404:	781b      	ldrb	r3, [r3, #0]
 8007406:	461a      	mov	r2, r3
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	685b      	ldr	r3, [r3, #4]
 800740c:	429a      	cmp	r2, r3
 800740e:	d02a      	beq.n	8007466 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	b2db      	uxtb	r3, r3
 8007416:	4619      	mov	r1, r3
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f7fe ffc4 	bl	80063a6 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 800741e:	4b1d      	ldr	r3, [pc, #116]	; (8007494 <USBD_SetConfig+0x150>)
 8007420:	781b      	ldrb	r3, [r3, #0]
 8007422:	461a      	mov	r2, r3
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007428:	4b1a      	ldr	r3, [pc, #104]	; (8007494 <USBD_SetConfig+0x150>)
 800742a:	781b      	ldrb	r3, [r3, #0]
 800742c:	4619      	mov	r1, r3
 800742e:	6878      	ldr	r0, [r7, #4]
 8007430:	f7fe ff9d 	bl	800636e <USBD_SetClassConfig>
 8007434:	4603      	mov	r3, r0
 8007436:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007438:	7bfb      	ldrb	r3, [r7, #15]
 800743a:	2b00      	cmp	r3, #0
 800743c:	d00f      	beq.n	800745e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 800743e:	6839      	ldr	r1, [r7, #0]
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f000 f918 	bl	8007676 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	b2db      	uxtb	r3, r3
 800744c:	4619      	mov	r1, r3
 800744e:	6878      	ldr	r0, [r7, #4]
 8007450:	f7fe ffa9 	bl	80063a6 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	2202      	movs	r2, #2
 8007458:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800745c:	e014      	b.n	8007488 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f000 f9b7 	bl	80077d2 <USBD_CtlSendStatus>
      break;
 8007464:	e010      	b.n	8007488 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007466:	6878      	ldr	r0, [r7, #4]
 8007468:	f000 f9b3 	bl	80077d2 <USBD_CtlSendStatus>
      break;
 800746c:	e00c      	b.n	8007488 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800746e:	6839      	ldr	r1, [r7, #0]
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f000 f900 	bl	8007676 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007476:	4b07      	ldr	r3, [pc, #28]	; (8007494 <USBD_SetConfig+0x150>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	4619      	mov	r1, r3
 800747c:	6878      	ldr	r0, [r7, #4]
 800747e:	f7fe ff92 	bl	80063a6 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007482:	2303      	movs	r3, #3
 8007484:	73fb      	strb	r3, [r7, #15]
      break;
 8007486:	bf00      	nop
  }

  return ret;
 8007488:	7bfb      	ldrb	r3, [r7, #15]
}
 800748a:	4618      	mov	r0, r3
 800748c:	3710      	adds	r7, #16
 800748e:	46bd      	mov	sp, r7
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	200007a8 	.word	0x200007a8

08007498 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	b082      	sub	sp, #8
 800749c:	af00      	add	r7, sp, #0
 800749e:	6078      	str	r0, [r7, #4]
 80074a0:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074a2:	683b      	ldr	r3, [r7, #0]
 80074a4:	88db      	ldrh	r3, [r3, #6]
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	d004      	beq.n	80074b4 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 80074aa:	6839      	ldr	r1, [r7, #0]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f000 f8e2 	bl	8007676 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 80074b2:	e023      	b.n	80074fc <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b02      	cmp	r3, #2
 80074be:	dc02      	bgt.n	80074c6 <USBD_GetConfig+0x2e>
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	dc03      	bgt.n	80074cc <USBD_GetConfig+0x34>
 80074c4:	e015      	b.n	80074f2 <USBD_GetConfig+0x5a>
 80074c6:	2b03      	cmp	r3, #3
 80074c8:	d00b      	beq.n	80074e2 <USBD_GetConfig+0x4a>
 80074ca:	e012      	b.n	80074f2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2200      	movs	r2, #0
 80074d0:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	3308      	adds	r3, #8
 80074d6:	2201      	movs	r2, #1
 80074d8:	4619      	mov	r1, r3
 80074da:	6878      	ldr	r0, [r7, #4]
 80074dc:	f000 f93c 	bl	8007758 <USBD_CtlSendData>
        break;
 80074e0:	e00c      	b.n	80074fc <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	3304      	adds	r3, #4
 80074e6:	2201      	movs	r2, #1
 80074e8:	4619      	mov	r1, r3
 80074ea:	6878      	ldr	r0, [r7, #4]
 80074ec:	f000 f934 	bl	8007758 <USBD_CtlSendData>
        break;
 80074f0:	e004      	b.n	80074fc <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80074f2:	6839      	ldr	r1, [r7, #0]
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 f8be 	bl	8007676 <USBD_CtlError>
        break;
 80074fa:	bf00      	nop
}
 80074fc:	bf00      	nop
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
 800750c:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800750e:	687b      	ldr	r3, [r7, #4]
 8007510:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007514:	b2db      	uxtb	r3, r3
 8007516:	3b01      	subs	r3, #1
 8007518:	2b02      	cmp	r3, #2
 800751a:	d81e      	bhi.n	800755a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	88db      	ldrh	r3, [r3, #6]
 8007520:	2b02      	cmp	r3, #2
 8007522:	d004      	beq.n	800752e <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	6878      	ldr	r0, [r7, #4]
 8007528:	f000 f8a5 	bl	8007676 <USBD_CtlError>
        break;
 800752c:	e01a      	b.n	8007564 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	2201      	movs	r2, #1
 8007532:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8007534:	687b      	ldr	r3, [r7, #4]
 8007536:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800753a:	2b00      	cmp	r3, #0
 800753c:	d005      	beq.n	800754a <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	68db      	ldr	r3, [r3, #12]
 8007542:	f043 0202 	orr.w	r2, r3, #2
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800754a:	687b      	ldr	r3, [r7, #4]
 800754c:	330c      	adds	r3, #12
 800754e:	2202      	movs	r2, #2
 8007550:	4619      	mov	r1, r3
 8007552:	6878      	ldr	r0, [r7, #4]
 8007554:	f000 f900 	bl	8007758 <USBD_CtlSendData>
      break;
 8007558:	e004      	b.n	8007564 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800755a:	6839      	ldr	r1, [r7, #0]
 800755c:	6878      	ldr	r0, [r7, #4]
 800755e:	f000 f88a 	bl	8007676 <USBD_CtlError>
      break;
 8007562:	bf00      	nop
  }
}
 8007564:	bf00      	nop
 8007566:	3708      	adds	r7, #8
 8007568:	46bd      	mov	sp, r7
 800756a:	bd80      	pop	{r7, pc}

0800756c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800756c:	b580      	push	{r7, lr}
 800756e:	b082      	sub	sp, #8
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
 8007574:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007576:	683b      	ldr	r3, [r7, #0]
 8007578:	885b      	ldrh	r3, [r3, #2]
 800757a:	2b01      	cmp	r3, #1
 800757c:	d107      	bne.n	800758e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	2201      	movs	r2, #1
 8007582:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007586:	6878      	ldr	r0, [r7, #4]
 8007588:	f000 f923 	bl	80077d2 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800758c:	e013      	b.n	80075b6 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800758e:	683b      	ldr	r3, [r7, #0]
 8007590:	885b      	ldrh	r3, [r3, #2]
 8007592:	2b02      	cmp	r3, #2
 8007594:	d10b      	bne.n	80075ae <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007596:	683b      	ldr	r3, [r7, #0]
 8007598:	889b      	ldrh	r3, [r3, #4]
 800759a:	0a1b      	lsrs	r3, r3, #8
 800759c:	b29b      	uxth	r3, r3
 800759e:	b2da      	uxtb	r2, r3
 80075a0:	687b      	ldr	r3, [r7, #4]
 80075a2:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80075a6:	6878      	ldr	r0, [r7, #4]
 80075a8:	f000 f913 	bl	80077d2 <USBD_CtlSendStatus>
}
 80075ac:	e003      	b.n	80075b6 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 80075ae:	6839      	ldr	r1, [r7, #0]
 80075b0:	6878      	ldr	r0, [r7, #4]
 80075b2:	f000 f860 	bl	8007676 <USBD_CtlError>
}
 80075b6:	bf00      	nop
 80075b8:	3708      	adds	r7, #8
 80075ba:	46bd      	mov	sp, r7
 80075bc:	bd80      	pop	{r7, pc}

080075be <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075be:	b580      	push	{r7, lr}
 80075c0:	b082      	sub	sp, #8
 80075c2:	af00      	add	r7, sp, #0
 80075c4:	6078      	str	r0, [r7, #4]
 80075c6:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80075c8:	687b      	ldr	r3, [r7, #4]
 80075ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80075ce:	b2db      	uxtb	r3, r3
 80075d0:	3b01      	subs	r3, #1
 80075d2:	2b02      	cmp	r3, #2
 80075d4:	d80b      	bhi.n	80075ee <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075d6:	683b      	ldr	r3, [r7, #0]
 80075d8:	885b      	ldrh	r3, [r3, #2]
 80075da:	2b01      	cmp	r3, #1
 80075dc:	d10c      	bne.n	80075f8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2200      	movs	r2, #0
 80075e2:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80075e6:	6878      	ldr	r0, [r7, #4]
 80075e8:	f000 f8f3 	bl	80077d2 <USBD_CtlSendStatus>
      }
      break;
 80075ec:	e004      	b.n	80075f8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80075ee:	6839      	ldr	r1, [r7, #0]
 80075f0:	6878      	ldr	r0, [r7, #4]
 80075f2:	f000 f840 	bl	8007676 <USBD_CtlError>
      break;
 80075f6:	e000      	b.n	80075fa <USBD_ClrFeature+0x3c>
      break;
 80075f8:	bf00      	nop
  }
}
 80075fa:	bf00      	nop
 80075fc:	3708      	adds	r7, #8
 80075fe:	46bd      	mov	sp, r7
 8007600:	bd80      	pop	{r7, pc}

08007602 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8007602:	b580      	push	{r7, lr}
 8007604:	b084      	sub	sp, #16
 8007606:	af00      	add	r7, sp, #0
 8007608:	6078      	str	r0, [r7, #4]
 800760a:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007610:	68fb      	ldr	r3, [r7, #12]
 8007612:	781a      	ldrb	r2, [r3, #0]
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007618:	68fb      	ldr	r3, [r7, #12]
 800761a:	3301      	adds	r3, #1
 800761c:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	781a      	ldrb	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	3301      	adds	r3, #1
 800762a:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 800762c:	68f8      	ldr	r0, [r7, #12]
 800762e:	f7ff fa41 	bl	8006ab4 <SWAPBYTE>
 8007632:	4603      	mov	r3, r0
 8007634:	461a      	mov	r2, r3
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800763a:	68fb      	ldr	r3, [r7, #12]
 800763c:	3301      	adds	r3, #1
 800763e:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	3301      	adds	r3, #1
 8007644:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007646:	68f8      	ldr	r0, [r7, #12]
 8007648:	f7ff fa34 	bl	8006ab4 <SWAPBYTE>
 800764c:	4603      	mov	r3, r0
 800764e:	461a      	mov	r2, r3
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	3301      	adds	r3, #1
 8007658:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	3301      	adds	r3, #1
 800765e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007660:	68f8      	ldr	r0, [r7, #12]
 8007662:	f7ff fa27 	bl	8006ab4 <SWAPBYTE>
 8007666:	4603      	mov	r3, r0
 8007668:	461a      	mov	r2, r3
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	80da      	strh	r2, [r3, #6]
}
 800766e:	bf00      	nop
 8007670:	3710      	adds	r7, #16
 8007672:	46bd      	mov	sp, r7
 8007674:	bd80      	pop	{r7, pc}

08007676 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007676:	b580      	push	{r7, lr}
 8007678:	b082      	sub	sp, #8
 800767a:	af00      	add	r7, sp, #0
 800767c:	6078      	str	r0, [r7, #4]
 800767e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007680:	2180      	movs	r1, #128	; 0x80
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fbea 	bl	8007e5c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007688:	2100      	movs	r1, #0
 800768a:	6878      	ldr	r0, [r7, #4]
 800768c:	f000 fbe6 	bl	8007e5c <USBD_LL_StallEP>
}
 8007690:	bf00      	nop
 8007692:	3708      	adds	r7, #8
 8007694:	46bd      	mov	sp, r7
 8007696:	bd80      	pop	{r7, pc}

08007698 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007698:	b580      	push	{r7, lr}
 800769a:	b086      	sub	sp, #24
 800769c:	af00      	add	r7, sp, #0
 800769e:	60f8      	str	r0, [r7, #12]
 80076a0:	60b9      	str	r1, [r7, #8]
 80076a2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076a4:	2300      	movs	r3, #0
 80076a6:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 80076a8:	68fb      	ldr	r3, [r7, #12]
 80076aa:	2b00      	cmp	r3, #0
 80076ac:	d036      	beq.n	800771c <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 80076b2:	6938      	ldr	r0, [r7, #16]
 80076b4:	f000 f836 	bl	8007724 <USBD_GetLen>
 80076b8:	4603      	mov	r3, r0
 80076ba:	3301      	adds	r3, #1
 80076bc:	b29b      	uxth	r3, r3
 80076be:	005b      	lsls	r3, r3, #1
 80076c0:	b29a      	uxth	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 80076c6:	7dfb      	ldrb	r3, [r7, #23]
 80076c8:	68ba      	ldr	r2, [r7, #8]
 80076ca:	4413      	add	r3, r2
 80076cc:	687a      	ldr	r2, [r7, #4]
 80076ce:	7812      	ldrb	r2, [r2, #0]
 80076d0:	701a      	strb	r2, [r3, #0]
  idx++;
 80076d2:	7dfb      	ldrb	r3, [r7, #23]
 80076d4:	3301      	adds	r3, #1
 80076d6:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 80076d8:	7dfb      	ldrb	r3, [r7, #23]
 80076da:	68ba      	ldr	r2, [r7, #8]
 80076dc:	4413      	add	r3, r2
 80076de:	2203      	movs	r2, #3
 80076e0:	701a      	strb	r2, [r3, #0]
  idx++;
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	3301      	adds	r3, #1
 80076e6:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80076e8:	e013      	b.n	8007712 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80076ea:	7dfb      	ldrb	r3, [r7, #23]
 80076ec:	68ba      	ldr	r2, [r7, #8]
 80076ee:	4413      	add	r3, r2
 80076f0:	693a      	ldr	r2, [r7, #16]
 80076f2:	7812      	ldrb	r2, [r2, #0]
 80076f4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80076f6:	693b      	ldr	r3, [r7, #16]
 80076f8:	3301      	adds	r3, #1
 80076fa:	613b      	str	r3, [r7, #16]
    idx++;
 80076fc:	7dfb      	ldrb	r3, [r7, #23]
 80076fe:	3301      	adds	r3, #1
 8007700:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8007702:	7dfb      	ldrb	r3, [r7, #23]
 8007704:	68ba      	ldr	r2, [r7, #8]
 8007706:	4413      	add	r3, r2
 8007708:	2200      	movs	r2, #0
 800770a:	701a      	strb	r2, [r3, #0]
    idx++;
 800770c:	7dfb      	ldrb	r3, [r7, #23]
 800770e:	3301      	adds	r3, #1
 8007710:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8007712:	693b      	ldr	r3, [r7, #16]
 8007714:	781b      	ldrb	r3, [r3, #0]
 8007716:	2b00      	cmp	r3, #0
 8007718:	d1e7      	bne.n	80076ea <USBD_GetString+0x52>
 800771a:	e000      	b.n	800771e <USBD_GetString+0x86>
    return;
 800771c:	bf00      	nop
  }
}
 800771e:	3718      	adds	r7, #24
 8007720:	46bd      	mov	sp, r7
 8007722:	bd80      	pop	{r7, pc}

08007724 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007724:	b480      	push	{r7}
 8007726:	b085      	sub	sp, #20
 8007728:	af00      	add	r7, sp, #0
 800772a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 800772c:	2300      	movs	r3, #0
 800772e:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007734:	e005      	b.n	8007742 <USBD_GetLen+0x1e>
  {
    len++;
 8007736:	7bfb      	ldrb	r3, [r7, #15]
 8007738:	3301      	adds	r3, #1
 800773a:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 800773c:	68bb      	ldr	r3, [r7, #8]
 800773e:	3301      	adds	r3, #1
 8007740:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8007742:	68bb      	ldr	r3, [r7, #8]
 8007744:	781b      	ldrb	r3, [r3, #0]
 8007746:	2b00      	cmp	r3, #0
 8007748:	d1f5      	bne.n	8007736 <USBD_GetLen+0x12>
  }

  return len;
 800774a:	7bfb      	ldrb	r3, [r7, #15]
}
 800774c:	4618      	mov	r0, r3
 800774e:	3714      	adds	r7, #20
 8007750:	46bd      	mov	sp, r7
 8007752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007756:	4770      	bx	lr

08007758 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007758:	b580      	push	{r7, lr}
 800775a:	b084      	sub	sp, #16
 800775c:	af00      	add	r7, sp, #0
 800775e:	60f8      	str	r0, [r7, #12]
 8007760:	60b9      	str	r1, [r7, #8]
 8007762:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	2202      	movs	r2, #2
 8007768:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	687a      	ldr	r2, [r7, #4]
 8007770:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	687a      	ldr	r2, [r7, #4]
 8007776:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007778:	687b      	ldr	r3, [r7, #4]
 800777a:	68ba      	ldr	r2, [r7, #8]
 800777c:	2100      	movs	r1, #0
 800777e:	68f8      	ldr	r0, [r7, #12]
 8007780:	f000 fbf5 	bl	8007f6e <USBD_LL_Transmit>

  return USBD_OK;
 8007784:	2300      	movs	r3, #0
}
 8007786:	4618      	mov	r0, r3
 8007788:	3710      	adds	r7, #16
 800778a:	46bd      	mov	sp, r7
 800778c:	bd80      	pop	{r7, pc}

0800778e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800778e:	b580      	push	{r7, lr}
 8007790:	b084      	sub	sp, #16
 8007792:	af00      	add	r7, sp, #0
 8007794:	60f8      	str	r0, [r7, #12]
 8007796:	60b9      	str	r1, [r7, #8]
 8007798:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	68ba      	ldr	r2, [r7, #8]
 800779e:	2100      	movs	r1, #0
 80077a0:	68f8      	ldr	r0, [r7, #12]
 80077a2:	f000 fbe4 	bl	8007f6e <USBD_LL_Transmit>

  return USBD_OK;
 80077a6:	2300      	movs	r3, #0
}
 80077a8:	4618      	mov	r0, r3
 80077aa:	3710      	adds	r7, #16
 80077ac:	46bd      	mov	sp, r7
 80077ae:	bd80      	pop	{r7, pc}

080077b0 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	2100      	movs	r1, #0
 80077c2:	68f8      	ldr	r0, [r7, #12]
 80077c4:	f000 fbf4 	bl	8007fb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80077c8:	2300      	movs	r3, #0
}
 80077ca:	4618      	mov	r0, r3
 80077cc:	3710      	adds	r7, #16
 80077ce:	46bd      	mov	sp, r7
 80077d0:	bd80      	pop	{r7, pc}

080077d2 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80077d2:	b580      	push	{r7, lr}
 80077d4:	b082      	sub	sp, #8
 80077d6:	af00      	add	r7, sp, #0
 80077d8:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	2204      	movs	r2, #4
 80077de:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80077e2:	2300      	movs	r3, #0
 80077e4:	2200      	movs	r2, #0
 80077e6:	2100      	movs	r1, #0
 80077e8:	6878      	ldr	r0, [r7, #4]
 80077ea:	f000 fbc0 	bl	8007f6e <USBD_LL_Transmit>

  return USBD_OK;
 80077ee:	2300      	movs	r3, #0
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3708      	adds	r7, #8
 80077f4:	46bd      	mov	sp, r7
 80077f6:	bd80      	pop	{r7, pc}

080077f8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b082      	sub	sp, #8
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	2205      	movs	r2, #5
 8007804:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007808:	2300      	movs	r3, #0
 800780a:	2200      	movs	r2, #0
 800780c:	2100      	movs	r1, #0
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 fbce 	bl	8007fb0 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007814:	2300      	movs	r3, #0
}
 8007816:	4618      	mov	r0, r3
 8007818:	3708      	adds	r7, #8
 800781a:	46bd      	mov	sp, r7
 800781c:	bd80      	pop	{r7, pc}
	...

08007820 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007820:	b580      	push	{r7, lr}
 8007822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007824:	2200      	movs	r2, #0
 8007826:	490e      	ldr	r1, [pc, #56]	; (8007860 <MX_USB_DEVICE_Init+0x40>)
 8007828:	480e      	ldr	r0, [pc, #56]	; (8007864 <MX_USB_DEVICE_Init+0x44>)
 800782a:	f7fe fd23 	bl	8006274 <USBD_Init>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007834:	f7f9 fc1a 	bl	800106c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007838:	490b      	ldr	r1, [pc, #44]	; (8007868 <MX_USB_DEVICE_Init+0x48>)
 800783a:	480a      	ldr	r0, [pc, #40]	; (8007864 <MX_USB_DEVICE_Init+0x44>)
 800783c:	f7fe fd4a 	bl	80062d4 <USBD_RegisterClass>
 8007840:	4603      	mov	r3, r0
 8007842:	2b00      	cmp	r3, #0
 8007844:	d001      	beq.n	800784a <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007846:	f7f9 fc11 	bl	800106c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800784a:	4806      	ldr	r0, [pc, #24]	; (8007864 <MX_USB_DEVICE_Init+0x44>)
 800784c:	f7fe fd78 	bl	8006340 <USBD_Start>
 8007850:	4603      	mov	r3, r0
 8007852:	2b00      	cmp	r3, #0
 8007854:	d001      	beq.n	800785a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007856:	f7f9 fc09 	bl	800106c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800785a:	bf00      	nop
 800785c:	bd80      	pop	{r7, pc}
 800785e:	bf00      	nop
 8007860:	200004a0 	.word	0x200004a0
 8007864:	200007ac 	.word	0x200007ac
 8007868:	200003e0 	.word	0x200003e0

0800786c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800786c:	b480      	push	{r7}
 800786e:	b083      	sub	sp, #12
 8007870:	af00      	add	r7, sp, #0
 8007872:	4603      	mov	r3, r0
 8007874:	6039      	str	r1, [r7, #0]
 8007876:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	2212      	movs	r2, #18
 800787c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800787e:	4b03      	ldr	r3, [pc, #12]	; (800788c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007880:	4618      	mov	r0, r3
 8007882:	370c      	adds	r7, #12
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	200004bc 	.word	0x200004bc

08007890 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	6039      	str	r1, [r7, #0]
 800789a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800789c:	683b      	ldr	r3, [r7, #0]
 800789e:	2204      	movs	r2, #4
 80078a0:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078a2:	4b03      	ldr	r3, [pc, #12]	; (80078b0 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078a4:	4618      	mov	r0, r3
 80078a6:	370c      	adds	r7, #12
 80078a8:	46bd      	mov	sp, r7
 80078aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ae:	4770      	bx	lr
 80078b0:	200004d0 	.word	0x200004d0

080078b4 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078b4:	b580      	push	{r7, lr}
 80078b6:	b082      	sub	sp, #8
 80078b8:	af00      	add	r7, sp, #0
 80078ba:	4603      	mov	r3, r0
 80078bc:	6039      	str	r1, [r7, #0]
 80078be:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80078c0:	79fb      	ldrb	r3, [r7, #7]
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d105      	bne.n	80078d2 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078c6:	683a      	ldr	r2, [r7, #0]
 80078c8:	4907      	ldr	r1, [pc, #28]	; (80078e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80078ca:	4808      	ldr	r0, [pc, #32]	; (80078ec <USBD_FS_ProductStrDescriptor+0x38>)
 80078cc:	f7ff fee4 	bl	8007698 <USBD_GetString>
 80078d0:	e004      	b.n	80078dc <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80078d2:	683a      	ldr	r2, [r7, #0]
 80078d4:	4904      	ldr	r1, [pc, #16]	; (80078e8 <USBD_FS_ProductStrDescriptor+0x34>)
 80078d6:	4805      	ldr	r0, [pc, #20]	; (80078ec <USBD_FS_ProductStrDescriptor+0x38>)
 80078d8:	f7ff fede 	bl	8007698 <USBD_GetString>
  }
  return USBD_StrDesc;
 80078dc:	4b02      	ldr	r3, [pc, #8]	; (80078e8 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80078de:	4618      	mov	r0, r3
 80078e0:	3708      	adds	r7, #8
 80078e2:	46bd      	mov	sp, r7
 80078e4:	bd80      	pop	{r7, pc}
 80078e6:	bf00      	nop
 80078e8:	20000a88 	.word	0x20000a88
 80078ec:	080080fc 	.word	0x080080fc

080078f0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078f0:	b580      	push	{r7, lr}
 80078f2:	b082      	sub	sp, #8
 80078f4:	af00      	add	r7, sp, #0
 80078f6:	4603      	mov	r3, r0
 80078f8:	6039      	str	r1, [r7, #0]
 80078fa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80078fc:	683a      	ldr	r2, [r7, #0]
 80078fe:	4904      	ldr	r1, [pc, #16]	; (8007910 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007900:	4804      	ldr	r0, [pc, #16]	; (8007914 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8007902:	f7ff fec9 	bl	8007698 <USBD_GetString>
  return USBD_StrDesc;
 8007906:	4b02      	ldr	r3, [pc, #8]	; (8007910 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007908:	4618      	mov	r0, r3
 800790a:	3708      	adds	r7, #8
 800790c:	46bd      	mov	sp, r7
 800790e:	bd80      	pop	{r7, pc}
 8007910:	20000a88 	.word	0x20000a88
 8007914:	08008114 	.word	0x08008114

08007918 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	4603      	mov	r3, r0
 8007920:	6039      	str	r1, [r7, #0]
 8007922:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007924:	683b      	ldr	r3, [r7, #0]
 8007926:	221a      	movs	r2, #26
 8007928:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 800792a:	f000 f843 	bl	80079b4 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800792e:	4b02      	ldr	r3, [pc, #8]	; (8007938 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007930:	4618      	mov	r0, r3
 8007932:	3708      	adds	r7, #8
 8007934:	46bd      	mov	sp, r7
 8007936:	bd80      	pop	{r7, pc}
 8007938:	200004d4 	.word	0x200004d4

0800793c <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800793c:	b580      	push	{r7, lr}
 800793e:	b082      	sub	sp, #8
 8007940:	af00      	add	r7, sp, #0
 8007942:	4603      	mov	r3, r0
 8007944:	6039      	str	r1, [r7, #0]
 8007946:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007948:	79fb      	ldrb	r3, [r7, #7]
 800794a:	2b00      	cmp	r3, #0
 800794c:	d105      	bne.n	800795a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800794e:	683a      	ldr	r2, [r7, #0]
 8007950:	4907      	ldr	r1, [pc, #28]	; (8007970 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007952:	4808      	ldr	r0, [pc, #32]	; (8007974 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007954:	f7ff fea0 	bl	8007698 <USBD_GetString>
 8007958:	e004      	b.n	8007964 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800795a:	683a      	ldr	r2, [r7, #0]
 800795c:	4904      	ldr	r1, [pc, #16]	; (8007970 <USBD_FS_ConfigStrDescriptor+0x34>)
 800795e:	4805      	ldr	r0, [pc, #20]	; (8007974 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007960:	f7ff fe9a 	bl	8007698 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007964:	4b02      	ldr	r3, [pc, #8]	; (8007970 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007966:	4618      	mov	r0, r3
 8007968:	3708      	adds	r7, #8
 800796a:	46bd      	mov	sp, r7
 800796c:	bd80      	pop	{r7, pc}
 800796e:	bf00      	nop
 8007970:	20000a88 	.word	0x20000a88
 8007974:	08008128 	.word	0x08008128

08007978 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007978:	b580      	push	{r7, lr}
 800797a:	b082      	sub	sp, #8
 800797c:	af00      	add	r7, sp, #0
 800797e:	4603      	mov	r3, r0
 8007980:	6039      	str	r1, [r7, #0]
 8007982:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007984:	79fb      	ldrb	r3, [r7, #7]
 8007986:	2b00      	cmp	r3, #0
 8007988:	d105      	bne.n	8007996 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800798a:	683a      	ldr	r2, [r7, #0]
 800798c:	4907      	ldr	r1, [pc, #28]	; (80079ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800798e:	4808      	ldr	r0, [pc, #32]	; (80079b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007990:	f7ff fe82 	bl	8007698 <USBD_GetString>
 8007994:	e004      	b.n	80079a0 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007996:	683a      	ldr	r2, [r7, #0]
 8007998:	4904      	ldr	r1, [pc, #16]	; (80079ac <USBD_FS_InterfaceStrDescriptor+0x34>)
 800799a:	4805      	ldr	r0, [pc, #20]	; (80079b0 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800799c:	f7ff fe7c 	bl	8007698 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079a0:	4b02      	ldr	r3, [pc, #8]	; (80079ac <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079a2:	4618      	mov	r0, r3
 80079a4:	3708      	adds	r7, #8
 80079a6:	46bd      	mov	sp, r7
 80079a8:	bd80      	pop	{r7, pc}
 80079aa:	bf00      	nop
 80079ac:	20000a88 	.word	0x20000a88
 80079b0:	08008134 	.word	0x08008134

080079b4 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b084      	sub	sp, #16
 80079b8:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 80079ba:	4b0f      	ldr	r3, [pc, #60]	; (80079f8 <Get_SerialNum+0x44>)
 80079bc:	681b      	ldr	r3, [r3, #0]
 80079be:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 80079c0:	4b0e      	ldr	r3, [pc, #56]	; (80079fc <Get_SerialNum+0x48>)
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80079c6:	4b0e      	ldr	r3, [pc, #56]	; (8007a00 <Get_SerialNum+0x4c>)
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80079cc:	68fa      	ldr	r2, [r7, #12]
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	4413      	add	r3, r2
 80079d2:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	2b00      	cmp	r3, #0
 80079d8:	d009      	beq.n	80079ee <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80079da:	2208      	movs	r2, #8
 80079dc:	4909      	ldr	r1, [pc, #36]	; (8007a04 <Get_SerialNum+0x50>)
 80079de:	68f8      	ldr	r0, [r7, #12]
 80079e0:	f000 f814 	bl	8007a0c <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80079e4:	2204      	movs	r2, #4
 80079e6:	4908      	ldr	r1, [pc, #32]	; (8007a08 <Get_SerialNum+0x54>)
 80079e8:	68b8      	ldr	r0, [r7, #8]
 80079ea:	f000 f80f 	bl	8007a0c <IntToUnicode>
  }
}
 80079ee:	bf00      	nop
 80079f0:	3710      	adds	r7, #16
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
 80079f6:	bf00      	nop
 80079f8:	1fff7a10 	.word	0x1fff7a10
 80079fc:	1fff7a14 	.word	0x1fff7a14
 8007a00:	1fff7a18 	.word	0x1fff7a18
 8007a04:	200004d6 	.word	0x200004d6
 8007a08:	200004e6 	.word	0x200004e6

08007a0c <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a0c:	b480      	push	{r7}
 8007a0e:	b087      	sub	sp, #28
 8007a10:	af00      	add	r7, sp, #0
 8007a12:	60f8      	str	r0, [r7, #12]
 8007a14:	60b9      	str	r1, [r7, #8]
 8007a16:	4613      	mov	r3, r2
 8007a18:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a1a:	2300      	movs	r3, #0
 8007a1c:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a1e:	2300      	movs	r3, #0
 8007a20:	75fb      	strb	r3, [r7, #23]
 8007a22:	e027      	b.n	8007a74 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a24:	68fb      	ldr	r3, [r7, #12]
 8007a26:	0f1b      	lsrs	r3, r3, #28
 8007a28:	2b09      	cmp	r3, #9
 8007a2a:	d80b      	bhi.n	8007a44 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	0f1b      	lsrs	r3, r3, #28
 8007a30:	b2da      	uxtb	r2, r3
 8007a32:	7dfb      	ldrb	r3, [r7, #23]
 8007a34:	005b      	lsls	r3, r3, #1
 8007a36:	4619      	mov	r1, r3
 8007a38:	68bb      	ldr	r3, [r7, #8]
 8007a3a:	440b      	add	r3, r1
 8007a3c:	3230      	adds	r2, #48	; 0x30
 8007a3e:	b2d2      	uxtb	r2, r2
 8007a40:	701a      	strb	r2, [r3, #0]
 8007a42:	e00a      	b.n	8007a5a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	0f1b      	lsrs	r3, r3, #28
 8007a48:	b2da      	uxtb	r2, r3
 8007a4a:	7dfb      	ldrb	r3, [r7, #23]
 8007a4c:	005b      	lsls	r3, r3, #1
 8007a4e:	4619      	mov	r1, r3
 8007a50:	68bb      	ldr	r3, [r7, #8]
 8007a52:	440b      	add	r3, r1
 8007a54:	3237      	adds	r2, #55	; 0x37
 8007a56:	b2d2      	uxtb	r2, r2
 8007a58:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	011b      	lsls	r3, r3, #4
 8007a5e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007a60:	7dfb      	ldrb	r3, [r7, #23]
 8007a62:	005b      	lsls	r3, r3, #1
 8007a64:	3301      	adds	r3, #1
 8007a66:	68ba      	ldr	r2, [r7, #8]
 8007a68:	4413      	add	r3, r2
 8007a6a:	2200      	movs	r2, #0
 8007a6c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007a6e:	7dfb      	ldrb	r3, [r7, #23]
 8007a70:	3301      	adds	r3, #1
 8007a72:	75fb      	strb	r3, [r7, #23]
 8007a74:	7dfa      	ldrb	r2, [r7, #23]
 8007a76:	79fb      	ldrb	r3, [r7, #7]
 8007a78:	429a      	cmp	r2, r3
 8007a7a:	d3d3      	bcc.n	8007a24 <IntToUnicode+0x18>
  }
}
 8007a7c:	bf00      	nop
 8007a7e:	bf00      	nop
 8007a80:	371c      	adds	r7, #28
 8007a82:	46bd      	mov	sp, r7
 8007a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a88:	4770      	bx	lr
	...

08007a8c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007a8c:	b580      	push	{r7, lr}
 8007a8e:	b08a      	sub	sp, #40	; 0x28
 8007a90:	af00      	add	r7, sp, #0
 8007a92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007a94:	f107 0314 	add.w	r3, r7, #20
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]
 8007a9c:	605a      	str	r2, [r3, #4]
 8007a9e:	609a      	str	r2, [r3, #8]
 8007aa0:	60da      	str	r2, [r3, #12]
 8007aa2:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	681b      	ldr	r3, [r3, #0]
 8007aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007aac:	d13a      	bne.n	8007b24 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007aae:	2300      	movs	r3, #0
 8007ab0:	613b      	str	r3, [r7, #16]
 8007ab2:	4b1e      	ldr	r3, [pc, #120]	; (8007b2c <HAL_PCD_MspInit+0xa0>)
 8007ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ab6:	4a1d      	ldr	r2, [pc, #116]	; (8007b2c <HAL_PCD_MspInit+0xa0>)
 8007ab8:	f043 0301 	orr.w	r3, r3, #1
 8007abc:	6313      	str	r3, [r2, #48]	; 0x30
 8007abe:	4b1b      	ldr	r3, [pc, #108]	; (8007b2c <HAL_PCD_MspInit+0xa0>)
 8007ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ac2:	f003 0301 	and.w	r3, r3, #1
 8007ac6:	613b      	str	r3, [r7, #16]
 8007ac8:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007aca:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007ace:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007ad0:	2302      	movs	r3, #2
 8007ad2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ad4:	2300      	movs	r3, #0
 8007ad6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007ad8:	2303      	movs	r3, #3
 8007ada:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007adc:	230a      	movs	r3, #10
 8007ade:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007ae0:	f107 0314 	add.w	r3, r7, #20
 8007ae4:	4619      	mov	r1, r3
 8007ae6:	4812      	ldr	r0, [pc, #72]	; (8007b30 <HAL_PCD_MspInit+0xa4>)
 8007ae8:	f7fa fcea 	bl	80024c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007aec:	4b0f      	ldr	r3, [pc, #60]	; (8007b2c <HAL_PCD_MspInit+0xa0>)
 8007aee:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007af0:	4a0e      	ldr	r2, [pc, #56]	; (8007b2c <HAL_PCD_MspInit+0xa0>)
 8007af2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007af6:	6353      	str	r3, [r2, #52]	; 0x34
 8007af8:	2300      	movs	r3, #0
 8007afa:	60fb      	str	r3, [r7, #12]
 8007afc:	4b0b      	ldr	r3, [pc, #44]	; (8007b2c <HAL_PCD_MspInit+0xa0>)
 8007afe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b00:	4a0a      	ldr	r2, [pc, #40]	; (8007b2c <HAL_PCD_MspInit+0xa0>)
 8007b02:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b06:	6453      	str	r3, [r2, #68]	; 0x44
 8007b08:	4b08      	ldr	r3, [pc, #32]	; (8007b2c <HAL_PCD_MspInit+0xa0>)
 8007b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b10:	60fb      	str	r3, [r7, #12]
 8007b12:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b14:	2200      	movs	r2, #0
 8007b16:	2100      	movs	r1, #0
 8007b18:	2043      	movs	r0, #67	; 0x43
 8007b1a:	f7fa f92a 	bl	8001d72 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b1e:	2043      	movs	r0, #67	; 0x43
 8007b20:	f7fa f943 	bl	8001daa <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b24:	bf00      	nop
 8007b26:	3728      	adds	r7, #40	; 0x28
 8007b28:	46bd      	mov	sp, r7
 8007b2a:	bd80      	pop	{r7, pc}
 8007b2c:	40023800 	.word	0x40023800
 8007b30:	40020000 	.word	0x40020000

08007b34 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b34:	b580      	push	{r7, lr}
 8007b36:	b082      	sub	sp, #8
 8007b38:	af00      	add	r7, sp, #0
 8007b3a:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007b48:	4619      	mov	r1, r3
 8007b4a:	4610      	mov	r0, r2
 8007b4c:	f7fe fc45 	bl	80063da <USBD_LL_SetupStage>
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}

08007b58 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b58:	b580      	push	{r7, lr}
 8007b5a:	b082      	sub	sp, #8
 8007b5c:	af00      	add	r7, sp, #0
 8007b5e:	6078      	str	r0, [r7, #4]
 8007b60:	460b      	mov	r3, r1
 8007b62:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007b6a:	78fa      	ldrb	r2, [r7, #3]
 8007b6c:	6879      	ldr	r1, [r7, #4]
 8007b6e:	4613      	mov	r3, r2
 8007b70:	00db      	lsls	r3, r3, #3
 8007b72:	4413      	add	r3, r2
 8007b74:	009b      	lsls	r3, r3, #2
 8007b76:	440b      	add	r3, r1
 8007b78:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007b7c:	681a      	ldr	r2, [r3, #0]
 8007b7e:	78fb      	ldrb	r3, [r7, #3]
 8007b80:	4619      	mov	r1, r3
 8007b82:	f7fe fc7f 	bl	8006484 <USBD_LL_DataOutStage>
}
 8007b86:	bf00      	nop
 8007b88:	3708      	adds	r7, #8
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}

08007b8e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b8e:	b580      	push	{r7, lr}
 8007b90:	b082      	sub	sp, #8
 8007b92:	af00      	add	r7, sp, #0
 8007b94:	6078      	str	r0, [r7, #4]
 8007b96:	460b      	mov	r3, r1
 8007b98:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007ba0:	78fa      	ldrb	r2, [r7, #3]
 8007ba2:	6879      	ldr	r1, [r7, #4]
 8007ba4:	4613      	mov	r3, r2
 8007ba6:	00db      	lsls	r3, r3, #3
 8007ba8:	4413      	add	r3, r2
 8007baa:	009b      	lsls	r3, r3, #2
 8007bac:	440b      	add	r3, r1
 8007bae:	334c      	adds	r3, #76	; 0x4c
 8007bb0:	681a      	ldr	r2, [r3, #0]
 8007bb2:	78fb      	ldrb	r3, [r7, #3]
 8007bb4:	4619      	mov	r1, r3
 8007bb6:	f7fe fd18 	bl	80065ea <USBD_LL_DataInStage>
}
 8007bba:	bf00      	nop
 8007bbc:	3708      	adds	r7, #8
 8007bbe:	46bd      	mov	sp, r7
 8007bc0:	bd80      	pop	{r7, pc}

08007bc2 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bc2:	b580      	push	{r7, lr}
 8007bc4:	b082      	sub	sp, #8
 8007bc6:	af00      	add	r7, sp, #0
 8007bc8:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bd0:	4618      	mov	r0, r3
 8007bd2:	f7fe fe4c 	bl	800686e <USBD_LL_SOF>
}
 8007bd6:	bf00      	nop
 8007bd8:	3708      	adds	r7, #8
 8007bda:	46bd      	mov	sp, r7
 8007bdc:	bd80      	pop	{r7, pc}

08007bde <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bde:	b580      	push	{r7, lr}
 8007be0:	b084      	sub	sp, #16
 8007be2:	af00      	add	r7, sp, #0
 8007be4:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007be6:	2301      	movs	r3, #1
 8007be8:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	68db      	ldr	r3, [r3, #12]
 8007bee:	2b02      	cmp	r3, #2
 8007bf0:	d001      	beq.n	8007bf6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007bf2:	f7f9 fa3b 	bl	800106c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007bfc:	7bfa      	ldrb	r2, [r7, #15]
 8007bfe:	4611      	mov	r1, r2
 8007c00:	4618      	mov	r0, r3
 8007c02:	f7fe fdf6 	bl	80067f2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c0c:	4618      	mov	r0, r3
 8007c0e:	f7fe fd9e 	bl	800674e <USBD_LL_Reset>
}
 8007c12:	bf00      	nop
 8007c14:	3710      	adds	r7, #16
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}
	...

08007c1c <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c1c:	b580      	push	{r7, lr}
 8007c1e:	b082      	sub	sp, #8
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fe fdf1 	bl	8006812 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	681b      	ldr	r3, [r3, #0]
 8007c34:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	687a      	ldr	r2, [r7, #4]
 8007c3c:	6812      	ldr	r2, [r2, #0]
 8007c3e:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c42:	f043 0301 	orr.w	r3, r3, #1
 8007c46:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	6a1b      	ldr	r3, [r3, #32]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d005      	beq.n	8007c5c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007c50:	4b04      	ldr	r3, [pc, #16]	; (8007c64 <HAL_PCD_SuspendCallback+0x48>)
 8007c52:	691b      	ldr	r3, [r3, #16]
 8007c54:	4a03      	ldr	r2, [pc, #12]	; (8007c64 <HAL_PCD_SuspendCallback+0x48>)
 8007c56:	f043 0306 	orr.w	r3, r3, #6
 8007c5a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007c5c:	bf00      	nop
 8007c5e:	3708      	adds	r7, #8
 8007c60:	46bd      	mov	sp, r7
 8007c62:	bd80      	pop	{r7, pc}
 8007c64:	e000ed00 	.word	0xe000ed00

08007c68 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c68:	b580      	push	{r7, lr}
 8007c6a:	b082      	sub	sp, #8
 8007c6c:	af00      	add	r7, sp, #0
 8007c6e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c76:	4618      	mov	r0, r3
 8007c78:	f7fe fde1 	bl	800683e <USBD_LL_Resume>
}
 8007c7c:	bf00      	nop
 8007c7e:	3708      	adds	r7, #8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c84:	b580      	push	{r7, lr}
 8007c86:	b082      	sub	sp, #8
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
 8007c8c:	460b      	mov	r3, r1
 8007c8e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007c90:	687b      	ldr	r3, [r7, #4]
 8007c92:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c96:	78fa      	ldrb	r2, [r7, #3]
 8007c98:	4611      	mov	r1, r2
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f7fe fe39 	bl	8006912 <USBD_LL_IsoOUTIncomplete>
}
 8007ca0:	bf00      	nop
 8007ca2:	3708      	adds	r7, #8
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}

08007ca8 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ca8:	b580      	push	{r7, lr}
 8007caa:	b082      	sub	sp, #8
 8007cac:	af00      	add	r7, sp, #0
 8007cae:	6078      	str	r0, [r7, #4]
 8007cb0:	460b      	mov	r3, r1
 8007cb2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cba:	78fa      	ldrb	r2, [r7, #3]
 8007cbc:	4611      	mov	r1, r2
 8007cbe:	4618      	mov	r0, r3
 8007cc0:	f7fe fdf5 	bl	80068ae <USBD_LL_IsoINIncomplete>
}
 8007cc4:	bf00      	nop
 8007cc6:	3708      	adds	r7, #8
 8007cc8:	46bd      	mov	sp, r7
 8007cca:	bd80      	pop	{r7, pc}

08007ccc <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b082      	sub	sp, #8
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007cd4:	687b      	ldr	r3, [r7, #4]
 8007cd6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cda:	4618      	mov	r0, r3
 8007cdc:	f7fe fe4b 	bl	8006976 <USBD_LL_DevConnected>
}
 8007ce0:	bf00      	nop
 8007ce2:	3708      	adds	r7, #8
 8007ce4:	46bd      	mov	sp, r7
 8007ce6:	bd80      	pop	{r7, pc}

08007ce8 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007ce8:	b580      	push	{r7, lr}
 8007cea:	b082      	sub	sp, #8
 8007cec:	af00      	add	r7, sp, #0
 8007cee:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f7fe fe48 	bl	800698c <USBD_LL_DevDisconnected>
}
 8007cfc:	bf00      	nop
 8007cfe:	3708      	adds	r7, #8
 8007d00:	46bd      	mov	sp, r7
 8007d02:	bd80      	pop	{r7, pc}

08007d04 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d04:	b580      	push	{r7, lr}
 8007d06:	b082      	sub	sp, #8
 8007d08:	af00      	add	r7, sp, #0
 8007d0a:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	781b      	ldrb	r3, [r3, #0]
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d13c      	bne.n	8007d8e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d14:	4a20      	ldr	r2, [pc, #128]	; (8007d98 <USBD_LL_Init+0x94>)
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	4a1e      	ldr	r2, [pc, #120]	; (8007d98 <USBD_LL_Init+0x94>)
 8007d20:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d24:	4b1c      	ldr	r3, [pc, #112]	; (8007d98 <USBD_LL_Init+0x94>)
 8007d26:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d2a:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d2c:	4b1a      	ldr	r3, [pc, #104]	; (8007d98 <USBD_LL_Init+0x94>)
 8007d2e:	2204      	movs	r2, #4
 8007d30:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d32:	4b19      	ldr	r3, [pc, #100]	; (8007d98 <USBD_LL_Init+0x94>)
 8007d34:	2202      	movs	r2, #2
 8007d36:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d38:	4b17      	ldr	r3, [pc, #92]	; (8007d98 <USBD_LL_Init+0x94>)
 8007d3a:	2200      	movs	r2, #0
 8007d3c:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d3e:	4b16      	ldr	r3, [pc, #88]	; (8007d98 <USBD_LL_Init+0x94>)
 8007d40:	2202      	movs	r2, #2
 8007d42:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d44:	4b14      	ldr	r3, [pc, #80]	; (8007d98 <USBD_LL_Init+0x94>)
 8007d46:	2200      	movs	r2, #0
 8007d48:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007d4a:	4b13      	ldr	r3, [pc, #76]	; (8007d98 <USBD_LL_Init+0x94>)
 8007d4c:	2200      	movs	r2, #0
 8007d4e:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007d50:	4b11      	ldr	r3, [pc, #68]	; (8007d98 <USBD_LL_Init+0x94>)
 8007d52:	2200      	movs	r2, #0
 8007d54:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007d56:	4b10      	ldr	r3, [pc, #64]	; (8007d98 <USBD_LL_Init+0x94>)
 8007d58:	2200      	movs	r2, #0
 8007d5a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007d5c:	4b0e      	ldr	r3, [pc, #56]	; (8007d98 <USBD_LL_Init+0x94>)
 8007d5e:	2200      	movs	r2, #0
 8007d60:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007d62:	480d      	ldr	r0, [pc, #52]	; (8007d98 <USBD_LL_Init+0x94>)
 8007d64:	f7fa fd48 	bl	80027f8 <HAL_PCD_Init>
 8007d68:	4603      	mov	r3, r0
 8007d6a:	2b00      	cmp	r3, #0
 8007d6c:	d001      	beq.n	8007d72 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007d6e:	f7f9 f97d 	bl	800106c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007d72:	2180      	movs	r1, #128	; 0x80
 8007d74:	4808      	ldr	r0, [pc, #32]	; (8007d98 <USBD_LL_Init+0x94>)
 8007d76:	f7fb ff88 	bl	8003c8a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007d7a:	2240      	movs	r2, #64	; 0x40
 8007d7c:	2100      	movs	r1, #0
 8007d7e:	4806      	ldr	r0, [pc, #24]	; (8007d98 <USBD_LL_Init+0x94>)
 8007d80:	f7fb ff3c 	bl	8003bfc <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007d84:	2280      	movs	r2, #128	; 0x80
 8007d86:	2101      	movs	r1, #1
 8007d88:	4803      	ldr	r0, [pc, #12]	; (8007d98 <USBD_LL_Init+0x94>)
 8007d8a:	f7fb ff37 	bl	8003bfc <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007d8e:	2300      	movs	r3, #0
}
 8007d90:	4618      	mov	r0, r3
 8007d92:	3708      	adds	r7, #8
 8007d94:	46bd      	mov	sp, r7
 8007d96:	bd80      	pop	{r7, pc}
 8007d98:	20000c88 	.word	0x20000c88

08007d9c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007d9c:	b580      	push	{r7, lr}
 8007d9e:	b084      	sub	sp, #16
 8007da0:	af00      	add	r7, sp, #0
 8007da2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007da4:	2300      	movs	r3, #0
 8007da6:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007da8:	2300      	movs	r3, #0
 8007daa:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007db2:	4618      	mov	r0, r3
 8007db4:	f7fa fe3d 	bl	8002a32 <HAL_PCD_Start>
 8007db8:	4603      	mov	r3, r0
 8007dba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007dbc:	7bfb      	ldrb	r3, [r7, #15]
 8007dbe:	4618      	mov	r0, r3
 8007dc0:	f000 f930 	bl	8008024 <USBD_Get_USB_Status>
 8007dc4:	4603      	mov	r3, r0
 8007dc6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007dc8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007dca:	4618      	mov	r0, r3
 8007dcc:	3710      	adds	r7, #16
 8007dce:	46bd      	mov	sp, r7
 8007dd0:	bd80      	pop	{r7, pc}

08007dd2 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007dd2:	b580      	push	{r7, lr}
 8007dd4:	b084      	sub	sp, #16
 8007dd6:	af00      	add	r7, sp, #0
 8007dd8:	6078      	str	r0, [r7, #4]
 8007dda:	4608      	mov	r0, r1
 8007ddc:	4611      	mov	r1, r2
 8007dde:	461a      	mov	r2, r3
 8007de0:	4603      	mov	r3, r0
 8007de2:	70fb      	strb	r3, [r7, #3]
 8007de4:	460b      	mov	r3, r1
 8007de6:	70bb      	strb	r3, [r7, #2]
 8007de8:	4613      	mov	r3, r2
 8007dea:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dec:	2300      	movs	r3, #0
 8007dee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007df0:	2300      	movs	r3, #0
 8007df2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007dfa:	78bb      	ldrb	r3, [r7, #2]
 8007dfc:	883a      	ldrh	r2, [r7, #0]
 8007dfe:	78f9      	ldrb	r1, [r7, #3]
 8007e00:	f7fb fb0e 	bl	8003420 <HAL_PCD_EP_Open>
 8007e04:	4603      	mov	r3, r0
 8007e06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e08:	7bfb      	ldrb	r3, [r7, #15]
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f000 f90a 	bl	8008024 <USBD_Get_USB_Status>
 8007e10:	4603      	mov	r3, r0
 8007e12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e16:	4618      	mov	r0, r3
 8007e18:	3710      	adds	r7, #16
 8007e1a:	46bd      	mov	sp, r7
 8007e1c:	bd80      	pop	{r7, pc}

08007e1e <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e1e:	b580      	push	{r7, lr}
 8007e20:	b084      	sub	sp, #16
 8007e22:	af00      	add	r7, sp, #0
 8007e24:	6078      	str	r0, [r7, #4]
 8007e26:	460b      	mov	r3, r1
 8007e28:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e2a:	2300      	movs	r3, #0
 8007e2c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e2e:	2300      	movs	r3, #0
 8007e30:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e38:	78fa      	ldrb	r2, [r7, #3]
 8007e3a:	4611      	mov	r1, r2
 8007e3c:	4618      	mov	r0, r3
 8007e3e:	f7fb fb57 	bl	80034f0 <HAL_PCD_EP_Close>
 8007e42:	4603      	mov	r3, r0
 8007e44:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e46:	7bfb      	ldrb	r3, [r7, #15]
 8007e48:	4618      	mov	r0, r3
 8007e4a:	f000 f8eb 	bl	8008024 <USBD_Get_USB_Status>
 8007e4e:	4603      	mov	r3, r0
 8007e50:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e52:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e54:	4618      	mov	r0, r3
 8007e56:	3710      	adds	r7, #16
 8007e58:	46bd      	mov	sp, r7
 8007e5a:	bd80      	pop	{r7, pc}

08007e5c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e5c:	b580      	push	{r7, lr}
 8007e5e:	b084      	sub	sp, #16
 8007e60:	af00      	add	r7, sp, #0
 8007e62:	6078      	str	r0, [r7, #4]
 8007e64:	460b      	mov	r3, r1
 8007e66:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e68:	2300      	movs	r3, #0
 8007e6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e6c:	2300      	movs	r3, #0
 8007e6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e76:	78fa      	ldrb	r2, [r7, #3]
 8007e78:	4611      	mov	r1, r2
 8007e7a:	4618      	mov	r0, r3
 8007e7c:	f7fb fc17 	bl	80036ae <HAL_PCD_EP_SetStall>
 8007e80:	4603      	mov	r3, r0
 8007e82:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e84:	7bfb      	ldrb	r3, [r7, #15]
 8007e86:	4618      	mov	r0, r3
 8007e88:	f000 f8cc 	bl	8008024 <USBD_Get_USB_Status>
 8007e8c:	4603      	mov	r3, r0
 8007e8e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e90:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e92:	4618      	mov	r0, r3
 8007e94:	3710      	adds	r7, #16
 8007e96:	46bd      	mov	sp, r7
 8007e98:	bd80      	pop	{r7, pc}

08007e9a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e9a:	b580      	push	{r7, lr}
 8007e9c:	b084      	sub	sp, #16
 8007e9e:	af00      	add	r7, sp, #0
 8007ea0:	6078      	str	r0, [r7, #4]
 8007ea2:	460b      	mov	r3, r1
 8007ea4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ea6:	2300      	movs	r3, #0
 8007ea8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007eaa:	2300      	movs	r3, #0
 8007eac:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007eae:	687b      	ldr	r3, [r7, #4]
 8007eb0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007eb4:	78fa      	ldrb	r2, [r7, #3]
 8007eb6:	4611      	mov	r1, r2
 8007eb8:	4618      	mov	r0, r3
 8007eba:	f7fb fc5c 	bl	8003776 <HAL_PCD_EP_ClrStall>
 8007ebe:	4603      	mov	r3, r0
 8007ec0:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
 8007ec4:	4618      	mov	r0, r3
 8007ec6:	f000 f8ad 	bl	8008024 <USBD_Get_USB_Status>
 8007eca:	4603      	mov	r3, r0
 8007ecc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ece:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ed0:	4618      	mov	r0, r3
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ed8:	b480      	push	{r7}
 8007eda:	b085      	sub	sp, #20
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
 8007ee0:	460b      	mov	r3, r1
 8007ee2:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007eea:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007eec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ef0:	2b00      	cmp	r3, #0
 8007ef2:	da0b      	bge.n	8007f0c <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ef4:	78fb      	ldrb	r3, [r7, #3]
 8007ef6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007efa:	68f9      	ldr	r1, [r7, #12]
 8007efc:	4613      	mov	r3, r2
 8007efe:	00db      	lsls	r3, r3, #3
 8007f00:	4413      	add	r3, r2
 8007f02:	009b      	lsls	r3, r3, #2
 8007f04:	440b      	add	r3, r1
 8007f06:	333e      	adds	r3, #62	; 0x3e
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	e00b      	b.n	8007f24 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f0c:	78fb      	ldrb	r3, [r7, #3]
 8007f0e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f12:	68f9      	ldr	r1, [r7, #12]
 8007f14:	4613      	mov	r3, r2
 8007f16:	00db      	lsls	r3, r3, #3
 8007f18:	4413      	add	r3, r2
 8007f1a:	009b      	lsls	r3, r3, #2
 8007f1c:	440b      	add	r3, r1
 8007f1e:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007f22:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f24:	4618      	mov	r0, r3
 8007f26:	3714      	adds	r7, #20
 8007f28:	46bd      	mov	sp, r7
 8007f2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2e:	4770      	bx	lr

08007f30 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f3c:	2300      	movs	r3, #0
 8007f3e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f40:	2300      	movs	r3, #0
 8007f42:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f4a:	78fa      	ldrb	r2, [r7, #3]
 8007f4c:	4611      	mov	r1, r2
 8007f4e:	4618      	mov	r0, r3
 8007f50:	f7fb fa41 	bl	80033d6 <HAL_PCD_SetAddress>
 8007f54:	4603      	mov	r3, r0
 8007f56:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f58:	7bfb      	ldrb	r3, [r7, #15]
 8007f5a:	4618      	mov	r0, r3
 8007f5c:	f000 f862 	bl	8008024 <USBD_Get_USB_Status>
 8007f60:	4603      	mov	r3, r0
 8007f62:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f64:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f66:	4618      	mov	r0, r3
 8007f68:	3710      	adds	r7, #16
 8007f6a:	46bd      	mov	sp, r7
 8007f6c:	bd80      	pop	{r7, pc}

08007f6e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007f6e:	b580      	push	{r7, lr}
 8007f70:	b086      	sub	sp, #24
 8007f72:	af00      	add	r7, sp, #0
 8007f74:	60f8      	str	r0, [r7, #12]
 8007f76:	607a      	str	r2, [r7, #4]
 8007f78:	603b      	str	r3, [r7, #0]
 8007f7a:	460b      	mov	r3, r1
 8007f7c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f7e:	2300      	movs	r3, #0
 8007f80:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f82:	2300      	movs	r3, #0
 8007f84:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007f8c:	7af9      	ldrb	r1, [r7, #11]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	687a      	ldr	r2, [r7, #4]
 8007f92:	f7fb fb42 	bl	800361a <HAL_PCD_EP_Transmit>
 8007f96:	4603      	mov	r3, r0
 8007f98:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f9a:	7dfb      	ldrb	r3, [r7, #23]
 8007f9c:	4618      	mov	r0, r3
 8007f9e:	f000 f841 	bl	8008024 <USBD_Get_USB_Status>
 8007fa2:	4603      	mov	r3, r0
 8007fa4:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fa6:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3718      	adds	r7, #24
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}

08007fb0 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fb0:	b580      	push	{r7, lr}
 8007fb2:	b086      	sub	sp, #24
 8007fb4:	af00      	add	r7, sp, #0
 8007fb6:	60f8      	str	r0, [r7, #12]
 8007fb8:	607a      	str	r2, [r7, #4]
 8007fba:	603b      	str	r3, [r7, #0]
 8007fbc:	460b      	mov	r3, r1
 8007fbe:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fc4:	2300      	movs	r3, #0
 8007fc6:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007fc8:	68fb      	ldr	r3, [r7, #12]
 8007fca:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007fce:	7af9      	ldrb	r1, [r7, #11]
 8007fd0:	683b      	ldr	r3, [r7, #0]
 8007fd2:	687a      	ldr	r2, [r7, #4]
 8007fd4:	f7fb fad6 	bl	8003584 <HAL_PCD_EP_Receive>
 8007fd8:	4603      	mov	r3, r0
 8007fda:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fdc:	7dfb      	ldrb	r3, [r7, #23]
 8007fde:	4618      	mov	r0, r3
 8007fe0:	f000 f820 	bl	8008024 <USBD_Get_USB_Status>
 8007fe4:	4603      	mov	r3, r0
 8007fe6:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007fe8:	7dbb      	ldrb	r3, [r7, #22]
}
 8007fea:	4618      	mov	r0, r3
 8007fec:	3718      	adds	r7, #24
 8007fee:	46bd      	mov	sp, r7
 8007ff0:	bd80      	pop	{r7, pc}
	...

08007ff4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ff4:	b480      	push	{r7}
 8007ff6:	b083      	sub	sp, #12
 8007ff8:	af00      	add	r7, sp, #0
 8007ffa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007ffc:	4b03      	ldr	r3, [pc, #12]	; (800800c <USBD_static_malloc+0x18>)
}
 8007ffe:	4618      	mov	r0, r3
 8008000:	370c      	adds	r7, #12
 8008002:	46bd      	mov	sp, r7
 8008004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008008:	4770      	bx	lr
 800800a:	bf00      	nop
 800800c:	20001194 	.word	0x20001194

08008010 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008010:	b480      	push	{r7}
 8008012:	b083      	sub	sp, #12
 8008014:	af00      	add	r7, sp, #0
 8008016:	6078      	str	r0, [r7, #4]

}
 8008018:	bf00      	nop
 800801a:	370c      	adds	r7, #12
 800801c:	46bd      	mov	sp, r7
 800801e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008022:	4770      	bx	lr

08008024 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008024:	b480      	push	{r7}
 8008026:	b085      	sub	sp, #20
 8008028:	af00      	add	r7, sp, #0
 800802a:	4603      	mov	r3, r0
 800802c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800802e:	2300      	movs	r3, #0
 8008030:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008032:	79fb      	ldrb	r3, [r7, #7]
 8008034:	2b03      	cmp	r3, #3
 8008036:	d817      	bhi.n	8008068 <USBD_Get_USB_Status+0x44>
 8008038:	a201      	add	r2, pc, #4	; (adr r2, 8008040 <USBD_Get_USB_Status+0x1c>)
 800803a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800803e:	bf00      	nop
 8008040:	08008051 	.word	0x08008051
 8008044:	08008057 	.word	0x08008057
 8008048:	0800805d 	.word	0x0800805d
 800804c:	08008063 	.word	0x08008063
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8008050:	2300      	movs	r3, #0
 8008052:	73fb      	strb	r3, [r7, #15]
    break;
 8008054:	e00b      	b.n	800806e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8008056:	2303      	movs	r3, #3
 8008058:	73fb      	strb	r3, [r7, #15]
    break;
 800805a:	e008      	b.n	800806e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 800805c:	2301      	movs	r3, #1
 800805e:	73fb      	strb	r3, [r7, #15]
    break;
 8008060:	e005      	b.n	800806e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8008062:	2303      	movs	r3, #3
 8008064:	73fb      	strb	r3, [r7, #15]
    break;
 8008066:	e002      	b.n	800806e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8008068:	2303      	movs	r3, #3
 800806a:	73fb      	strb	r3, [r7, #15]
    break;
 800806c:	bf00      	nop
  }
  return usb_status;
 800806e:	7bfb      	ldrb	r3, [r7, #15]
}
 8008070:	4618      	mov	r0, r3
 8008072:	3714      	adds	r7, #20
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <__libc_init_array>:
 800807c:	b570      	push	{r4, r5, r6, lr}
 800807e:	4d0d      	ldr	r5, [pc, #52]	; (80080b4 <__libc_init_array+0x38>)
 8008080:	4c0d      	ldr	r4, [pc, #52]	; (80080b8 <__libc_init_array+0x3c>)
 8008082:	1b64      	subs	r4, r4, r5
 8008084:	10a4      	asrs	r4, r4, #2
 8008086:	2600      	movs	r6, #0
 8008088:	42a6      	cmp	r6, r4
 800808a:	d109      	bne.n	80080a0 <__libc_init_array+0x24>
 800808c:	4d0b      	ldr	r5, [pc, #44]	; (80080bc <__libc_init_array+0x40>)
 800808e:	4c0c      	ldr	r4, [pc, #48]	; (80080c0 <__libc_init_array+0x44>)
 8008090:	f000 f820 	bl	80080d4 <_init>
 8008094:	1b64      	subs	r4, r4, r5
 8008096:	10a4      	asrs	r4, r4, #2
 8008098:	2600      	movs	r6, #0
 800809a:	42a6      	cmp	r6, r4
 800809c:	d105      	bne.n	80080aa <__libc_init_array+0x2e>
 800809e:	bd70      	pop	{r4, r5, r6, pc}
 80080a0:	f855 3b04 	ldr.w	r3, [r5], #4
 80080a4:	4798      	blx	r3
 80080a6:	3601      	adds	r6, #1
 80080a8:	e7ee      	b.n	8008088 <__libc_init_array+0xc>
 80080aa:	f855 3b04 	ldr.w	r3, [r5], #4
 80080ae:	4798      	blx	r3
 80080b0:	3601      	adds	r6, #1
 80080b2:	e7f2      	b.n	800809a <__libc_init_array+0x1e>
 80080b4:	08008164 	.word	0x08008164
 80080b8:	08008164 	.word	0x08008164
 80080bc:	08008164 	.word	0x08008164
 80080c0:	08008168 	.word	0x08008168

080080c4 <memset>:
 80080c4:	4402      	add	r2, r0
 80080c6:	4603      	mov	r3, r0
 80080c8:	4293      	cmp	r3, r2
 80080ca:	d100      	bne.n	80080ce <memset+0xa>
 80080cc:	4770      	bx	lr
 80080ce:	f803 1b01 	strb.w	r1, [r3], #1
 80080d2:	e7f9      	b.n	80080c8 <memset+0x4>

080080d4 <_init>:
 80080d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080d6:	bf00      	nop
 80080d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080da:	bc08      	pop	{r3}
 80080dc:	469e      	mov	lr, r3
 80080de:	4770      	bx	lr

080080e0 <_fini>:
 80080e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80080e2:	bf00      	nop
 80080e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80080e6:	bc08      	pop	{r3}
 80080e8:	469e      	mov	lr, r3
 80080ea:	4770      	bx	lr
