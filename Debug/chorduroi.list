
chorduroi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c08  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007d9c  08007d9c  00017d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e0c  08007e0c  000204e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007e0c  08007e0c  00017e0c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e14  08007e14  000204e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e14  08007e14  00017e14  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e18  08007e18  00017e18  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004e4  20000000  08007e1c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cb8  200004e4  08008300  000204e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000119c  08008300  0002119c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010793  00000000  00000000  00020514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ec4  00000000  00000000  00030ca7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00033b70  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  00034870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cc3  00000000  00000000  00035400  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116d7  00000000  00000000  0004f0c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000936ae  00000000  00000000  0006079a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3e48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033cc  00000000  00000000  000f3e98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200004e4 	.word	0x200004e4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007d84 	.word	0x08007d84

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200004e8 	.word	0x200004e8
 80001d0:	08007d84 	.word	0x08007d84

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <checkKeyPins>:



// Update the key-press array.
// This is where the keys "index" is determined.
void checkKeyPins(uint8_t* keyRef){
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	keyRef[4] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	1d1c      	adds	r4, r3, #4
 80004e4:	2110      	movs	r1, #16
 80004e6:	4842      	ldr	r0, [pc, #264]	; (80005f0 <checkKeyPins+0x118>)
 80004e8:	f001 fff6 	bl	80024d8 <HAL_GPIO_ReadPin>
 80004ec:	4603      	mov	r3, r0
 80004ee:	7023      	strb	r3, [r4, #0]
	keyRef[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80004f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f4:	483f      	ldr	r0, [pc, #252]	; (80005f4 <checkKeyPins+0x11c>)
 80004f6:	f001 ffef 	bl	80024d8 <HAL_GPIO_ReadPin>
 80004fa:	4603      	mov	r3, r0
 80004fc:	461a      	mov	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	701a      	strb	r2, [r3, #0]
	keyRef[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	1c5c      	adds	r4, r3, #1
 8000506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800050a:	483a      	ldr	r0, [pc, #232]	; (80005f4 <checkKeyPins+0x11c>)
 800050c:	f001 ffe4 	bl	80024d8 <HAL_GPIO_ReadPin>
 8000510:	4603      	mov	r3, r0
 8000512:	7023      	strb	r3, [r4, #0]
	keyRef[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	1c9c      	adds	r4, r3, #2
 8000518:	2110      	movs	r1, #16
 800051a:	4836      	ldr	r0, [pc, #216]	; (80005f4 <checkKeyPins+0x11c>)
 800051c:	f001 ffdc 	bl	80024d8 <HAL_GPIO_ReadPin>
 8000520:	4603      	mov	r3, r0
 8000522:	7023      	strb	r3, [r4, #0]
	keyRef[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	1cdc      	adds	r4, r3, #3
 8000528:	2120      	movs	r1, #32
 800052a:	4832      	ldr	r0, [pc, #200]	; (80005f4 <checkKeyPins+0x11c>)
 800052c:	f001 ffd4 	bl	80024d8 <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	7023      	strb	r3, [r4, #0]
	keyRef[8] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f103 0408 	add.w	r4, r3, #8
 800053a:	2140      	movs	r1, #64	; 0x40
 800053c:	482d      	ldr	r0, [pc, #180]	; (80005f4 <checkKeyPins+0x11c>)
 800053e:	f001 ffcb 	bl	80024d8 <HAL_GPIO_ReadPin>
 8000542:	4603      	mov	r3, r0
 8000544:	7023      	strb	r3, [r4, #0]
	keyRef[9] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f103 0409 	add.w	r4, r3, #9
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	4829      	ldr	r0, [pc, #164]	; (80005f4 <checkKeyPins+0x11c>)
 8000550:	f001 ffc2 	bl	80024d8 <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	7023      	strb	r3, [r4, #0]
	keyRef[10] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f103 040a 	add.w	r4, r3, #10
 800055e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000562:	4824      	ldr	r0, [pc, #144]	; (80005f4 <checkKeyPins+0x11c>)
 8000564:	f001 ffb8 	bl	80024d8 <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	7023      	strb	r3, [r4, #0]
	keyRef[11] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f103 040b 	add.w	r4, r3, #11
 8000572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000576:	481f      	ldr	r0, [pc, #124]	; (80005f4 <checkKeyPins+0x11c>)
 8000578:	f001 ffae 	bl	80024d8 <HAL_GPIO_ReadPin>
 800057c:	4603      	mov	r3, r0
 800057e:	7023      	strb	r3, [r4, #0]
	keyRef[5] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	1d5c      	adds	r4, r3, #5
 8000584:	2120      	movs	r1, #32
 8000586:	481a      	ldr	r0, [pc, #104]	; (80005f0 <checkKeyPins+0x118>)
 8000588:	f001 ffa6 	bl	80024d8 <HAL_GPIO_ReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	7023      	strb	r3, [r4, #0]
	keyRef[6] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	1d9c      	adds	r4, r3, #6
 8000594:	2140      	movs	r1, #64	; 0x40
 8000596:	4816      	ldr	r0, [pc, #88]	; (80005f0 <checkKeyPins+0x118>)
 8000598:	f001 ff9e 	bl	80024d8 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	7023      	strb	r3, [r4, #0]
	keyRef[7] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	1ddc      	adds	r4, r3, #7
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	4812      	ldr	r0, [pc, #72]	; (80005f0 <checkKeyPins+0x118>)
 80005a8:	f001 ff96 	bl	80024d8 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	7023      	strb	r3, [r4, #0]
	keyRef[12] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f103 040c 	add.w	r4, r3, #12
 80005b6:	2101      	movs	r1, #1
 80005b8:	480e      	ldr	r0, [pc, #56]	; (80005f4 <checkKeyPins+0x11c>)
 80005ba:	f001 ff8d 	bl	80024d8 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	7023      	strb	r3, [r4, #0]
	keyRef[13] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f103 040d 	add.w	r4, r3, #13
 80005c8:	2102      	movs	r1, #2
 80005ca:	480a      	ldr	r0, [pc, #40]	; (80005f4 <checkKeyPins+0x11c>)
 80005cc:	f001 ff84 	bl	80024d8 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	7023      	strb	r3, [r4, #0]
	//keyRef[14] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2); -- Hard-fault culprit
	keyRef[15] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f103 040f 	add.w	r4, r3, #15
 80005da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <checkKeyPins+0x11c>)
 80005e0:	f001 ff7a 	bl	80024d8 <HAL_GPIO_ReadPin>
 80005e4:	4603      	mov	r3, r0
 80005e6:	7023      	strb	r3, [r4, #0]
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd90      	pop	{r4, r7, pc}
 80005f0:	40020000 	.word	0x40020000
 80005f4:	40020400 	.word	0x40020400

080005f8 <setModByte>:


void setModByte(uint8_t* code, keyboardHIDReport* report){
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
	report->MOD = report->MOD | *code;
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	781a      	ldrb	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4313      	orrs	r3, r2
 800060c:	b2da      	uxtb	r2, r3
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	701a      	strb	r2, [r3, #0]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <setKeyBytes>:

void setKeyBytes(uint8_t* code, keyboardHIDReport* keyboardReport){
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	6039      	str	r1, [r7, #0]
	if(keyboardReport->K1 == 0){
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d104      	bne.n	800063a <setKeyBytes+0x1c>
		keyboardReport->K1 = *code;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	709a      	strb	r2, [r3, #2]
	} else if(keyboardReport->K5 == 0){
		keyboardReport->K5 = *code;
	} else if(keyboardReport->K6 == 0){
		keyboardReport->K6 = *code;
	}
}
 8000638:	e02b      	b.n	8000692 <setKeyBytes+0x74>
	} else if(keyboardReport->K2 == 0){
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	78db      	ldrb	r3, [r3, #3]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d104      	bne.n	800064c <setKeyBytes+0x2e>
		keyboardReport->K2 = *code;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	781a      	ldrb	r2, [r3, #0]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	70da      	strb	r2, [r3, #3]
}
 800064a:	e022      	b.n	8000692 <setKeyBytes+0x74>
	} else if(keyboardReport->K3 == 0){
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d104      	bne.n	800065e <setKeyBytes+0x40>
		keyboardReport->K3 = *code;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	781a      	ldrb	r2, [r3, #0]
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	711a      	strb	r2, [r3, #4]
}
 800065c:	e019      	b.n	8000692 <setKeyBytes+0x74>
	} else if(keyboardReport->K4 == 0){
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	795b      	ldrb	r3, [r3, #5]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d104      	bne.n	8000670 <setKeyBytes+0x52>
		keyboardReport->K4 = *code;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	781a      	ldrb	r2, [r3, #0]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	715a      	strb	r2, [r3, #5]
}
 800066e:	e010      	b.n	8000692 <setKeyBytes+0x74>
	} else if(keyboardReport->K5 == 0){
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	799b      	ldrb	r3, [r3, #6]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d104      	bne.n	8000682 <setKeyBytes+0x64>
		keyboardReport->K5 = *code;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	719a      	strb	r2, [r3, #6]
}
 8000680:	e007      	b.n	8000692 <setKeyBytes+0x74>
	} else if(keyboardReport->K6 == 0){
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	79db      	ldrb	r3, [r3, #7]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d103      	bne.n	8000692 <setKeyBytes+0x74>
		keyboardReport->K6 = *code;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	781a      	ldrb	r2, [r3, #0]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	71da      	strb	r2, [r3, #7]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <setReport>:

//TODO physical vs imp priority could be configurable
void setReport(int keypress, Layer* layer, keyboardHIDReport* keyboardReport){
 800069e:	b580      	push	{r7, lr}
 80006a0:	b088      	sub	sp, #32
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	60f8      	str	r0, [r7, #12]
 80006a6:	60b9      	str	r1, [r7, #8]
 80006a8:	607a      	str	r2, [r7, #4]
	// Temporary data store
	uint8_t * impModcode = layer->impMod;
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	61fb      	str	r3, [r7, #28]
	uint8_t * impKeycode = layer->impKey;
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	61bb      	str	r3, [r7, #24]
	uint8_t * modcode = layer->pModLayer + keypress;
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	689a      	ldr	r2, [r3, #8]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	4413      	add	r3, r2
 80006be:	617b      	str	r3, [r7, #20]
	uint8_t * keycode = layer->pKeyLayer + keypress;
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	613b      	str	r3, [r7, #16]

	setKeyBytes(keycode, keyboardReport);
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	6938      	ldr	r0, [r7, #16]
 80006ce:	f7ff ffa6 	bl	800061e <setKeyBytes>
	setModByte(modcode, keyboardReport);
 80006d2:	6879      	ldr	r1, [r7, #4]
 80006d4:	6978      	ldr	r0, [r7, #20]
 80006d6:	f7ff ff8f 	bl	80005f8 <setModByte>
	setKeyBytes(impModcode, keyboardReport);
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	69f8      	ldr	r0, [r7, #28]
 80006de:	f7ff ff9e 	bl	800061e <setKeyBytes>
	setModByte(impKeycode, keyboardReport);
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	69b8      	ldr	r0, [r7, #24]
 80006e6:	f7ff ff87 	bl	80005f8 <setModByte>
}
 80006ea:	bf00      	nop
 80006ec:	3720      	adds	r7, #32
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <setHeld>:
	setKeyBytes(keycode);
	setModByte(modcode);
}
 * */

void setHeld(int keypress, int layerNumber, int* heldRef){
 80006f2:	b480      	push	{r7}
 80006f4:	b085      	sub	sp, #20
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	60f8      	str	r0, [r7, #12]
 80006fa:	60b9      	str	r1, [r7, #8]
 80006fc:	607a      	str	r2, [r7, #4]
	heldRef[keypress] = layerNumber;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	601a      	str	r2, [r3, #0]
}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <setHeldReport>:


// TODO setHeldReport could be simplified by using: Layer* helpRef[], so that the held keys automatically know which layer to use... In fact there wouldn't be a need for setHeldReport.
void setHeldReport(int keyIndex, const Layer** keymap, int* heldRef, keyboardHIDReport* keyboardReport){
 8000716:	b580      	push	{r7, lr}
 8000718:	b086      	sub	sp, #24
 800071a:	af00      	add	r7, sp, #0
 800071c:	60f8      	str	r0, [r7, #12]
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	603b      	str	r3, [r7, #0]
	Layer* heldKeyLayer = keymap[heldRef[keyIndex]];
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	4413      	add	r3, r2
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	009b      	lsls	r3, r3, #2
 8000730:	68ba      	ldr	r2, [r7, #8]
 8000732:	4413      	add	r3, r2
 8000734:	681b      	ldr	r3, [r3, #0]
 8000736:	617b      	str	r3, [r7, #20]
	//if isHold[i] == 0 then the i key is not held, else it's the numebr of the layer it was pressed down in

	setReport(keyIndex, heldKeyLayer, keyboardReport);
 8000738:	683a      	ldr	r2, [r7, #0]
 800073a:	6979      	ldr	r1, [r7, #20]
 800073c:	68f8      	ldr	r0, [r7, #12]
 800073e:	f7ff ffae 	bl	800069e <setReport>

}
 8000742:	bf00      	nop
 8000744:	3718      	adds	r7, #24
 8000746:	46bd      	mov	sp, r7
 8000748:	bd80      	pop	{r7, pc}

0800074a <scanKeys>:
	setReport(keypress, relMods, relKeys);

}
 * */

void scanKeys(const Layer** keymap, Layer* layerRef, int* heldRef, uint8_t* keyStates, keyboardHIDReport* report){
 800074a:	b580      	push	{r7, lr}
 800074c:	b086      	sub	sp, #24
 800074e:	af00      	add	r7, sp, #0
 8000750:	60f8      	str	r0, [r7, #12]
 8000752:	60b9      	str	r1, [r7, #8]
 8000754:	607a      	str	r2, [r7, #4]
 8000756:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < NUMBER_OF_KEYS; i++){
 8000758:	2300      	movs	r3, #0
 800075a:	617b      	str	r3, [r7, #20]
 800075c:	e028      	b.n	80007b0 <scanKeys+0x66>
		//Original if condition was: GPIO_PIN_RESET == HAL_GPIO_ReadPin(keyPorts[i]/, keyPins[i])
		if(keyStates[i] == 0){
 800075e:	697b      	ldr	r3, [r7, #20]
 8000760:	683a      	ldr	r2, [r7, #0]
 8000762:	4413      	add	r3, r2
 8000764:	781b      	ldrb	r3, [r3, #0]
 8000766:	2b00      	cmp	r3, #0
 8000768:	d11a      	bne.n	80007a0 <scanKeys+0x56>
			switch(heldRef[i]){
 800076a:	697b      	ldr	r3, [r7, #20]
 800076c:	009b      	lsls	r3, r3, #2
 800076e:	687a      	ldr	r2, [r7, #4]
 8000770:	4413      	add	r3, r2
 8000772:	681b      	ldr	r3, [r3, #0]
 8000774:	2b00      	cmp	r3, #0
 8000776:	d10c      	bne.n	8000792 <scanKeys+0x48>
			case 0: setReport(i, layerRef, report);
 8000778:	6a3a      	ldr	r2, [r7, #32]
 800077a:	68b9      	ldr	r1, [r7, #8]
 800077c:	6978      	ldr	r0, [r7, #20]
 800077e:	f7ff ff8e 	bl	800069e <setReport>
					setHeld(i, layerRef->layerNum, heldRef);
 8000782:	68bb      	ldr	r3, [r7, #8]
 8000784:	691b      	ldr	r3, [r3, #16]
 8000786:	687a      	ldr	r2, [r7, #4]
 8000788:	4619      	mov	r1, r3
 800078a:	6978      	ldr	r0, [r7, #20]
 800078c:	f7ff ffb1 	bl	80006f2 <setHeld>
				break;
 8000790:	e00b      	b.n	80007aa <scanKeys+0x60>
			default: setHeldReport(i, keymap, heldRef, report);
 8000792:	6a3b      	ldr	r3, [r7, #32]
 8000794:	687a      	ldr	r2, [r7, #4]
 8000796:	68f9      	ldr	r1, [r7, #12]
 8000798:	6978      	ldr	r0, [r7, #20]
 800079a:	f7ff ffbc 	bl	8000716 <setHeldReport>
				break;
 800079e:	e004      	b.n	80007aa <scanKeys+0x60>
			}

		} else {// TODO add a check?
			setHeld(i, 0, heldRef);
 80007a0:	687a      	ldr	r2, [r7, #4]
 80007a2:	2100      	movs	r1, #0
 80007a4:	6978      	ldr	r0, [r7, #20]
 80007a6:	f7ff ffa4 	bl	80006f2 <setHeld>
	for(int i = 0; i < NUMBER_OF_KEYS; i++){
 80007aa:	697b      	ldr	r3, [r7, #20]
 80007ac:	3301      	adds	r3, #1
 80007ae:	617b      	str	r3, [r7, #20]
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	2b0f      	cmp	r3, #15
 80007b4:	ddd3      	ble.n	800075e <scanKeys+0x14>
		}
	}
}
 80007b6:	bf00      	nop
 80007b8:	bf00      	nop
 80007ba:	3718      	adds	r7, #24
 80007bc:	46bd      	mov	sp, r7
 80007be:	bd80      	pop	{r7, pc}

080007c0 <clearReport>:

// scan function for keyboard settings i.e. swtichingmouse mode

// scan for thumb-stick keys, so scans held, but sets the report to a prebuilt report mapped tot hat layer... technically with that the layer could still function normally... for mod keys... probbaly a more elegant solution for most cases... but I do like the manual mod map

void clearReport(keyboardHIDReport* keyboardReport){
 80007c0:	b480      	push	{r7}
 80007c2:	b083      	sub	sp, #12
 80007c4:	af00      	add	r7, sp, #0
 80007c6:	6078      	str	r0, [r7, #4]
	keyboardReport->MOD = 0;
 80007c8:	687b      	ldr	r3, [r7, #4]
 80007ca:	2200      	movs	r2, #0
 80007cc:	701a      	strb	r2, [r3, #0]
	keyboardReport->K1 = 0;
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	2200      	movs	r2, #0
 80007d2:	709a      	strb	r2, [r3, #2]
	keyboardReport->K2 = 0;
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	2200      	movs	r2, #0
 80007d8:	70da      	strb	r2, [r3, #3]
	keyboardReport->K3 = 0;
 80007da:	687b      	ldr	r3, [r7, #4]
 80007dc:	2200      	movs	r2, #0
 80007de:	711a      	strb	r2, [r3, #4]
	keyboardReport->K4 = 0;
 80007e0:	687b      	ldr	r3, [r7, #4]
 80007e2:	2200      	movs	r2, #0
 80007e4:	715a      	strb	r2, [r3, #5]
	keyboardReport->K5 = 0;
 80007e6:	687b      	ldr	r3, [r7, #4]
 80007e8:	2200      	movs	r2, #0
 80007ea:	719a      	strb	r2, [r3, #6]
	keyboardReport->K6 = 0;
 80007ec:	687b      	ldr	r3, [r7, #4]
 80007ee:	2200      	movs	r2, #0
 80007f0:	71da      	strb	r2, [r3, #7]
}
 80007f2:	bf00      	nop
 80007f4:	370c      	adds	r7, #12
 80007f6:	46bd      	mov	sp, r7
 80007f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007fc:	4770      	bx	lr

080007fe <categorizeJoy>:
//void initStick(uint32_t* DMA_buff, uint16_t restHandle, uint){

//}


enum joydir categorizeJoy(joystick* stick, uint32_t tresh){
 80007fe:	b480      	push	{r7}
 8000800:	b087      	sub	sp, #28
 8000802:	af00      	add	r7, sp, #0
 8000804:	6078      	str	r0, [r7, #4]
 8000806:	6039      	str	r1, [r7, #0]

	int32_t xDif;
	int32_t yDif;

	// Substract the neutral and position for the sign to match cartesian convention
	if(stick->xPolarity == 0) {
 8000808:	687b      	ldr	r3, [r7, #4]
 800080a:	7c1b      	ldrb	r3, [r3, #16]
 800080c:	2b00      	cmp	r3, #0
 800080e:	d107      	bne.n	8000820 <categorizeJoy+0x22>
		xDif = *(stick->xAxis) - stick->xNeutral;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	685b      	ldr	r3, [r3, #4]
 8000814:	681a      	ldr	r2, [r3, #0]
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	689b      	ldr	r3, [r3, #8]
 800081a:	1ad3      	subs	r3, r2, r3
 800081c:	617b      	str	r3, [r7, #20]
 800081e:	e006      	b.n	800082e <categorizeJoy+0x30>
	} else {
		xDif = stick->xNeutral - *(stick->xAxis);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	689a      	ldr	r2, [r3, #8]
 8000824:	687b      	ldr	r3, [r7, #4]
 8000826:	685b      	ldr	r3, [r3, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	1ad3      	subs	r3, r2, r3
 800082c:	617b      	str	r3, [r7, #20]
	}

	if(stick->yPolarity == 0) {
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	7c5b      	ldrb	r3, [r3, #17]
 8000832:	2b00      	cmp	r3, #0
 8000834:	d107      	bne.n	8000846 <categorizeJoy+0x48>
	    yDif = *(stick->yAxis) - stick->yNeutral;
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	681a      	ldr	r2, [r3, #0]
 800083c:	687b      	ldr	r3, [r7, #4]
 800083e:	68db      	ldr	r3, [r3, #12]
 8000840:	1ad3      	subs	r3, r2, r3
 8000842:	613b      	str	r3, [r7, #16]
 8000844:	e006      	b.n	8000854 <categorizeJoy+0x56>
	} else {
		yDif = stick->xNeutral - *(stick->xAxis);
 8000846:	687b      	ldr	r3, [r7, #4]
 8000848:	689a      	ldr	r2, [r3, #8]
 800084a:	687b      	ldr	r3, [r7, #4]
 800084c:	685b      	ldr	r3, [r3, #4]
 800084e:	681b      	ldr	r3, [r3, #0]
 8000850:	1ad3      	subs	r3, r2, r3
 8000852:	613b      	str	r3, [r7, #16]
	}


	int xMag = abs(xDif);
 8000854:	697b      	ldr	r3, [r7, #20]
 8000856:	2b00      	cmp	r3, #0
 8000858:	bfb8      	it	lt
 800085a:	425b      	neglt	r3, r3
 800085c:	60fb      	str	r3, [r7, #12]
	int yMag = abs(yDif);
 800085e:	693b      	ldr	r3, [r7, #16]
 8000860:	2b00      	cmp	r3, #0
 8000862:	bfb8      	it	lt
 8000864:	425b      	neglt	r3, r3
 8000866:	60bb      	str	r3, [r7, #8]

	if(xMag <= tresh && yMag <= tresh){
 8000868:	68fb      	ldr	r3, [r7, #12]
 800086a:	683a      	ldr	r2, [r7, #0]
 800086c:	429a      	cmp	r2, r3
 800086e:	d308      	bcc.n	8000882 <categorizeJoy+0x84>
 8000870:	68bb      	ldr	r3, [r7, #8]
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	429a      	cmp	r2, r3
 8000876:	d304      	bcc.n	8000882 <categorizeJoy+0x84>
		stick->position = CENTERWISE;
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	2200      	movs	r2, #0
 800087c:	749a      	strb	r2, [r3, #18]
		return CENTERWISE; //Stick not directed
 800087e:	2300      	movs	r3, #0
 8000880:	e01c      	b.n	80008bc <categorizeJoy+0xbe>
	}

	if(xMag > yMag) {// HORIZONTAL MOTION
 8000882:	68fa      	ldr	r2, [r7, #12]
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	429a      	cmp	r2, r3
 8000888:	dd0c      	ble.n	80008a4 <categorizeJoy+0xa6>
		if(xDif > 0) {
 800088a:	697b      	ldr	r3, [r7, #20]
 800088c:	2b00      	cmp	r3, #0
 800088e:	dd04      	ble.n	800089a <categorizeJoy+0x9c>
			stick->position = EASTWISE;
 8000890:	687b      	ldr	r3, [r7, #4]
 8000892:	2201      	movs	r2, #1
 8000894:	749a      	strb	r2, [r3, #18]
			return EASTWISE;
 8000896:	2301      	movs	r3, #1
 8000898:	e010      	b.n	80008bc <categorizeJoy+0xbe>
		} else {
			stick->position = WESTWISE;
 800089a:	687b      	ldr	r3, [r7, #4]
 800089c:	2204      	movs	r2, #4
 800089e:	749a      	strb	r2, [r3, #18]
			return WESTWISE;
 80008a0:	2304      	movs	r3, #4
 80008a2:	e00b      	b.n	80008bc <categorizeJoy+0xbe>
		}

	} else { // VERTICAL MOTION
		if(yDif > 0) {
 80008a4:	693b      	ldr	r3, [r7, #16]
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	dd04      	ble.n	80008b4 <categorizeJoy+0xb6>
			stick->position = NORTHWISE;
 80008aa:	687b      	ldr	r3, [r7, #4]
 80008ac:	2203      	movs	r2, #3
 80008ae:	749a      	strb	r2, [r3, #18]
			return NORTHWISE;
 80008b0:	2303      	movs	r3, #3
 80008b2:	e003      	b.n	80008bc <categorizeJoy+0xbe>
		} else {
			stick->position = SOUTHWISE;
 80008b4:	687b      	ldr	r3, [r7, #4]
 80008b6:	2202      	movs	r2, #2
 80008b8:	749a      	strb	r2, [r3, #18]
			return SOUTHWISE;
 80008ba:	2302      	movs	r3, #2
		}
	}
 stick->position = CENTERWISE;
 return CENTERWISE; // If they're equal in magnitude they cancel out... Very Unlikely
}
 80008bc:	4618      	mov	r0, r3
 80008be:	371c      	adds	r7, #28
 80008c0:	46bd      	mov	sp, r7
 80008c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008c6:	4770      	bx	lr

080008c8 <setJoystate>:
	layerHandle = &(keymap[layerNum]);
}

// Set byte

joystate* setJoystate(joystick* left, joystick* right, joystate* handle, uint32_t tresh){
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b086      	sub	sp, #24
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	60f8      	str	r0, [r7, #12]
 80008d0:	60b9      	str	r1, [r7, #8]
 80008d2:	607a      	str	r2, [r7, #4]
 80008d4:	603b      	str	r3, [r7, #0]
	*handle = 0; // Reset the bits of the state mask.
 80008d6:	687b      	ldr	r3, [r7, #4]
 80008d8:	2200      	movs	r2, #0
 80008da:	701a      	strb	r2, [r3, #0]

	//TODO Redundant. Can use the joystick struct position.
	enum joydir leftDir = categorizeJoy(left, tresh);
 80008dc:	6839      	ldr	r1, [r7, #0]
 80008de:	68f8      	ldr	r0, [r7, #12]
 80008e0:	f7ff ff8d 	bl	80007fe <categorizeJoy>
 80008e4:	4603      	mov	r3, r0
 80008e6:	75fb      	strb	r3, [r7, #23]
	enum joydir rightDir = categorizeJoy(right, tresh);
 80008e8:	6839      	ldr	r1, [r7, #0]
 80008ea:	68b8      	ldr	r0, [r7, #8]
 80008ec:	f7ff ff87 	bl	80007fe <categorizeJoy>
 80008f0:	4603      	mov	r3, r0
 80008f2:	75bb      	strb	r3, [r7, #22]



	switch(leftDir){
 80008f4:	7dfb      	ldrb	r3, [r7, #23]
 80008f6:	3b01      	subs	r3, #1
 80008f8:	2b03      	cmp	r3, #3
 80008fa:	d82b      	bhi.n	8000954 <setJoystate+0x8c>
 80008fc:	a201      	add	r2, pc, #4	; (adr r2, 8000904 <setJoystate+0x3c>)
 80008fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000902:	bf00      	nop
 8000904:	08000925 	.word	0x08000925
 8000908:	08000935 	.word	0x08000935
 800090c:	08000915 	.word	0x08000915
 8000910:	08000945 	.word	0x08000945
		case NORTHWISE:
			*handle = *handle | LEFT_JOY_UP;
 8000914:	687b      	ldr	r3, [r7, #4]
 8000916:	781b      	ldrb	r3, [r3, #0]
 8000918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091c:	b2da      	uxtb	r2, r3
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	701a      	strb	r2, [r3, #0]
			break;
 8000922:	e017      	b.n	8000954 <setJoystate+0x8c>
		case EASTWISE:
			*handle = *handle | LEFT_JOY_RIGHT;
 8000924:	687b      	ldr	r3, [r7, #4]
 8000926:	781b      	ldrb	r3, [r3, #0]
 8000928:	f043 0320 	orr.w	r3, r3, #32
 800092c:	b2da      	uxtb	r2, r3
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	701a      	strb	r2, [r3, #0]
			break;
 8000932:	e00f      	b.n	8000954 <setJoystate+0x8c>
		case SOUTHWISE:
			*handle = *handle | LEFT_JOY_DOWN;
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	781b      	ldrb	r3, [r3, #0]
 8000938:	f043 0310 	orr.w	r3, r3, #16
 800093c:	b2da      	uxtb	r2, r3
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	701a      	strb	r2, [r3, #0]
			break;
 8000942:	e007      	b.n	8000954 <setJoystate+0x8c>
		case WESTWISE:
			*handle = *handle | LEFT_JOY_LEFT;
 8000944:	687b      	ldr	r3, [r7, #4]
 8000946:	781b      	ldrb	r3, [r3, #0]
 8000948:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800094c:	b2da      	uxtb	r2, r3
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	701a      	strb	r2, [r3, #0]
			break;
 8000952:	bf00      	nop
	}

	switch(rightDir){
 8000954:	7dbb      	ldrb	r3, [r7, #22]
 8000956:	3b01      	subs	r3, #1
 8000958:	2b03      	cmp	r3, #3
 800095a:	d82b      	bhi.n	80009b4 <setJoystate+0xec>
 800095c:	a201      	add	r2, pc, #4	; (adr r2, 8000964 <setJoystate+0x9c>)
 800095e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000962:	bf00      	nop
 8000964:	08000985 	.word	0x08000985
 8000968:	08000995 	.word	0x08000995
 800096c:	08000975 	.word	0x08000975
 8000970:	080009a5 	.word	0x080009a5
		case NORTHWISE:
			*handle = *handle | RIGHT_JOY_UP;
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	f043 0304 	orr.w	r3, r3, #4
 800097c:	b2da      	uxtb	r2, r3
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	701a      	strb	r2, [r3, #0]
			break;
 8000982:	e017      	b.n	80009b4 <setJoystate+0xec>
		case EASTWISE:
			*handle = *handle | RIGHT_JOY_RIGHT;
 8000984:	687b      	ldr	r3, [r7, #4]
 8000986:	781b      	ldrb	r3, [r3, #0]
 8000988:	f043 0302 	orr.w	r3, r3, #2
 800098c:	b2da      	uxtb	r2, r3
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	701a      	strb	r2, [r3, #0]
			break;
 8000992:	e00f      	b.n	80009b4 <setJoystate+0xec>
		case SOUTHWISE:
			*handle = *handle | RIGHT_JOY_DOWN;
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	f043 0301 	orr.w	r3, r3, #1
 800099c:	b2da      	uxtb	r2, r3
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	701a      	strb	r2, [r3, #0]
			break;
 80009a2:	e007      	b.n	80009b4 <setJoystate+0xec>
		case WESTWISE:
			*handle = *handle | RIGHT_JOY_LEFT;
 80009a4:	687b      	ldr	r3, [r7, #4]
 80009a6:	781b      	ldrb	r3, [r3, #0]
 80009a8:	f043 0308 	orr.w	r3, r3, #8
 80009ac:	b2da      	uxtb	r2, r3
 80009ae:	687b      	ldr	r3, [r7, #4]
 80009b0:	701a      	strb	r2, [r3, #0]
			break;
 80009b2:	bf00      	nop
		}

	return handle;
 80009b4:	687b      	ldr	r3, [r7, #4]

}
 80009b6:	4618      	mov	r0, r3
 80009b8:	3718      	adds	r7, #24
 80009ba:	46bd      	mov	sp, r7
 80009bc:	bd80      	pop	{r7, pc}
 80009be:	bf00      	nop

080009c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c0:	b590      	push	{r4, r7, lr}
 80009c2:	b0ad      	sub	sp, #180	; 0xb4
 80009c4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009c6:	f000 faf9 	bl	8000fbc <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009ca:	f000 f879 	bl	8000ac0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ce:	f000 f97d 	bl	8000ccc <MX_GPIO_Init>
  MX_ADC1_Init();
 80009d2:	f000 f8df 	bl	8000b94 <MX_ADC1_Init>
  MX_DMA_Init();
 80009d6:	f000 f959 	bl	8000c8c <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80009da:	f006 fd79 	bl	80074d0 <MX_USB_DEVICE_Init>


	// Init and configure the joysticks.

	joystick rightStick;
	rightStick.xAxis = &analogIn[0];// joystick structs point directly to the buffer data
 80009de:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80009e2:	67bb      	str	r3, [r7, #120]	; 0x78
	rightStick.yAxis = &analogIn[2];
 80009e4:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80009e8:	3308      	adds	r3, #8
 80009ea:	677b      	str	r3, [r7, #116]	; 0x74
	rightStick.xNeutral = 2000;
 80009ec:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009f0:	67fb      	str	r3, [r7, #124]	; 0x7c
	rightStick.yNeutral = 2000;
 80009f2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009f6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80

	joystick leftStick;
	leftStick.xAxis = &analogIn[1];
 80009fa:	f107 0388 	add.w	r3, r7, #136	; 0x88
 80009fe:	3304      	adds	r3, #4
 8000a00:	667b      	str	r3, [r7, #100]	; 0x64
	leftStick.yAxis = &analogIn[3];
 8000a02:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a06:	330c      	adds	r3, #12
 8000a08:	663b      	str	r3, [r7, #96]	; 0x60
	leftStick.xNeutral = 2000;
 8000a0a:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a0e:	66bb      	str	r3, [r7, #104]	; 0x68
	leftStick.yNeutral = 2000;
 8000a10:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a14:	66fb      	str	r3, [r7, #108]	; 0x6c

	// Joystick threshold, fornow uniform. TODO granular struct
	uint32_t tresh = 600;
 8000a16:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000a1a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4

	// Init Layer byteID and active layer handle

	joystate layerByteID = 0;
 8000a1e:	2300      	movs	r3, #0
 8000a20:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
	Layer* layerHandle = keymap[1];
 8000a24:	4b23      	ldr	r3, [pc, #140]	; (8000ab4 <main+0xf4>)
 8000a26:	685b      	ldr	r3, [r3, #4]
 8000a28:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
	const Layer** keymapRef = &keymap[0];
 8000a2c:	4b21      	ldr	r3, [pc, #132]	; (8000ab4 <main+0xf4>)
 8000a2e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
	//laery 3 harfautls layer 1 does not...

	// Array of key and pin states

	uint8_t pinStates[NUMBER_OF_KEYS] = {1, 1, 1, 1,     1, 1, 1, 1,
 8000a32:	4b21      	ldr	r3, [pc, #132]	; (8000ab8 <main+0xf8>)
 8000a34:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000a38:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a3a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			                             1, 1, 1, 1,     1, 1, 1, 1};
	int isHold[NUMBER_OF_KEYS] = {0, 0, 0, 0,     0, 0, 0, 0,
 8000a3e:	f107 030c 	add.w	r3, r7, #12
 8000a42:	2240      	movs	r2, #64	; 0x40
 8000a44:	2100      	movs	r1, #0
 8000a46:	4618      	mov	r0, r3
 8000a48:	f007 f994 	bl	8007d74 <memset>
			                      0, 0, 0, 0,     0, 0, 0, 0};
	// Keyboard HID report

	keyboardHIDReport kReport = {0, 0, 0, 0, 0, 0, 0, 0};
 8000a4c:	1d3b      	adds	r3, r7, #4
 8000a4e:	2200      	movs	r2, #0
 8000a50:	601a      	str	r2, [r3, #0]
 8000a52:	605a      	str	r2, [r3, #4]
	keyboardHIDReport* pReport = &kReport;
 8000a54:	1d3b      	adds	r3, r7, #4
 8000a56:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Start the DMA (?)Not sure why it doesn't run when inited outside the while (1)
	  HAL_ADC_Start_DMA(&hadc1, analogIn, 4);
 8000a5a:	f107 0388 	add.w	r3, r7, #136	; 0x88
 8000a5e:	2204      	movs	r2, #4
 8000a60:	4619      	mov	r1, r3
 8000a62:	4816      	ldr	r0, [pc, #88]	; (8000abc <main+0xfc>)
 8000a64:	f000 fb84 	bl	8001170 <HAL_ADC_Start_DMA>

	  // Set the layer mask to the appropraite id
	  setJoystate(&leftStick, &rightStick, &layerByteID, tresh);
 8000a68:	f107 025f 	add.w	r2, r7, #95	; 0x5f
 8000a6c:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8000a70:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000a74:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000a78:	f7ff ff26 	bl	80008c8 <setJoystate>

	  // Get the pointer handle updated with the current active layer
	  //layerNumToRef(layerHandle, keymap[0], 1);//DEBUG hardcoded q

	  // check pressed keys
	  checkKeyPins(&pinStates[0]);
 8000a7c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000a80:	4618      	mov	r0, r3
 8000a82:	f7ff fd29 	bl	80004d8 <checkKeyPins>

	  // Check and set all keyboard related reports
	  // Seems to work until using keymap[0]as the starting point???
	  scanKeys(keymapRef, layerHandle, &isHold[0], pinStates, pReport);
 8000a86:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000a8a:	f107 020c 	add.w	r2, r7, #12
 8000a8e:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	460b      	mov	r3, r1
 8000a96:	f8d7 10a0 	ldr.w	r1, [r7, #160]	; 0xa0
 8000a9a:	f8d7 009c 	ldr.w	r0, [r7, #156]	; 0x9c
 8000a9e:	f7ff fe54 	bl	800074a <scanKeys>

	  // send report
	  //USBD_HID_SendReport(&hUsbDeviceFS, pReport, sizeof(kReport));
  	  HAL_Delay(100);
 8000aa2:	2064      	movs	r0, #100	; 0x64
 8000aa4:	f000 fafc 	bl	80010a0 <HAL_Delay>
	  // clear report
	  clearReport(pReport);
 8000aa8:	f8d7 0098 	ldr.w	r0, [r7, #152]	; 0x98
 8000aac:	f7ff fe88 	bl	80007c0 <clearReport>
	  HAL_ADC_Start_DMA(&hadc1, analogIn, 4);
 8000ab0:	e7d3      	b.n	8000a5a <main+0x9a>
 8000ab2:	bf00      	nop
 8000ab4:	2000036c 	.word	0x2000036c
 8000ab8:	08007d9c 	.word	0x08007d9c
 8000abc:	200006f0 	.word	0x200006f0

08000ac0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	b094      	sub	sp, #80	; 0x50
 8000ac4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ac6:	f107 0320 	add.w	r3, r7, #32
 8000aca:	2230      	movs	r2, #48	; 0x30
 8000acc:	2100      	movs	r1, #0
 8000ace:	4618      	mov	r0, r3
 8000ad0:	f007 f950 	bl	8007d74 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ad4:	f107 030c 	add.w	r3, r7, #12
 8000ad8:	2200      	movs	r2, #0
 8000ada:	601a      	str	r2, [r3, #0]
 8000adc:	605a      	str	r2, [r3, #4]
 8000ade:	609a      	str	r2, [r3, #8]
 8000ae0:	60da      	str	r2, [r3, #12]
 8000ae2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ae4:	2300      	movs	r3, #0
 8000ae6:	60bb      	str	r3, [r7, #8]
 8000ae8:	4b28      	ldr	r3, [pc, #160]	; (8000b8c <SystemClock_Config+0xcc>)
 8000aea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aec:	4a27      	ldr	r2, [pc, #156]	; (8000b8c <SystemClock_Config+0xcc>)
 8000aee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000af2:	6413      	str	r3, [r2, #64]	; 0x40
 8000af4:	4b25      	ldr	r3, [pc, #148]	; (8000b8c <SystemClock_Config+0xcc>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000afc:	60bb      	str	r3, [r7, #8]
 8000afe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b00:	2300      	movs	r3, #0
 8000b02:	607b      	str	r3, [r7, #4]
 8000b04:	4b22      	ldr	r3, [pc, #136]	; (8000b90 <SystemClock_Config+0xd0>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b0c:	4a20      	ldr	r2, [pc, #128]	; (8000b90 <SystemClock_Config+0xd0>)
 8000b0e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b12:	6013      	str	r3, [r2, #0]
 8000b14:	4b1e      	ldr	r3, [pc, #120]	; (8000b90 <SystemClock_Config+0xd0>)
 8000b16:	681b      	ldr	r3, [r3, #0]
 8000b18:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b1c:	607b      	str	r3, [r7, #4]
 8000b1e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b20:	2301      	movs	r3, #1
 8000b22:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b24:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b2e:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b32:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000b34:	230f      	movs	r3, #15
 8000b36:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000b38:	2390      	movs	r3, #144	; 0x90
 8000b3a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b3c:	2302      	movs	r3, #2
 8000b3e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000b40:	2305      	movs	r3, #5
 8000b42:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b44:	f107 0320 	add.w	r3, r7, #32
 8000b48:	4618      	mov	r0, r3
 8000b4a:	f002 ff43 	bl	80039d4 <HAL_RCC_OscConfig>
 8000b4e:	4603      	mov	r3, r0
 8000b50:	2b00      	cmp	r3, #0
 8000b52:	d001      	beq.n	8000b58 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b54:	f000 f912 	bl	8000d7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b58:	230f      	movs	r3, #15
 8000b5a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000b5c:	2301      	movs	r3, #1
 8000b5e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b60:	2300      	movs	r3, #0
 8000b62:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b64:	2300      	movs	r3, #0
 8000b66:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b68:	2300      	movs	r3, #0
 8000b6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b6c:	f107 030c 	add.w	r3, r7, #12
 8000b70:	2100      	movs	r1, #0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f003 f9a6 	bl	8003ec4 <HAL_RCC_ClockConfig>
 8000b78:	4603      	mov	r3, r0
 8000b7a:	2b00      	cmp	r3, #0
 8000b7c:	d001      	beq.n	8000b82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b7e:	f000 f8fd 	bl	8000d7c <Error_Handler>
  }
}
 8000b82:	bf00      	nop
 8000b84:	3750      	adds	r7, #80	; 0x50
 8000b86:	46bd      	mov	sp, r7
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40023800 	.word	0x40023800
 8000b90:	40007000 	.word	0x40007000

08000b94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b94:	b580      	push	{r7, lr}
 8000b96:	b084      	sub	sp, #16
 8000b98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b9a:	463b      	mov	r3, r7
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	601a      	str	r2, [r3, #0]
 8000ba0:	605a      	str	r2, [r3, #4]
 8000ba2:	609a      	str	r2, [r3, #8]
 8000ba4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000ba6:	4b36      	ldr	r3, [pc, #216]	; (8000c80 <MX_ADC1_Init+0xec>)
 8000ba8:	4a36      	ldr	r2, [pc, #216]	; (8000c84 <MX_ADC1_Init+0xf0>)
 8000baa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bac:	4b34      	ldr	r3, [pc, #208]	; (8000c80 <MX_ADC1_Init+0xec>)
 8000bae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bb4:	4b32      	ldr	r3, [pc, #200]	; (8000c80 <MX_ADC1_Init+0xec>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000bba:	4b31      	ldr	r3, [pc, #196]	; (8000c80 <MX_ADC1_Init+0xec>)
 8000bbc:	2201      	movs	r2, #1
 8000bbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bc0:	4b2f      	ldr	r3, [pc, #188]	; (8000c80 <MX_ADC1_Init+0xec>)
 8000bc2:	2201      	movs	r2, #1
 8000bc4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bc6:	4b2e      	ldr	r3, [pc, #184]	; (8000c80 <MX_ADC1_Init+0xec>)
 8000bc8:	2200      	movs	r2, #0
 8000bca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bce:	4b2c      	ldr	r3, [pc, #176]	; (8000c80 <MX_ADC1_Init+0xec>)
 8000bd0:	2200      	movs	r2, #0
 8000bd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000bd4:	4b2a      	ldr	r3, [pc, #168]	; (8000c80 <MX_ADC1_Init+0xec>)
 8000bd6:	4a2c      	ldr	r2, [pc, #176]	; (8000c88 <MX_ADC1_Init+0xf4>)
 8000bd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000bda:	4b29      	ldr	r3, [pc, #164]	; (8000c80 <MX_ADC1_Init+0xec>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000be0:	4b27      	ldr	r3, [pc, #156]	; (8000c80 <MX_ADC1_Init+0xec>)
 8000be2:	2204      	movs	r2, #4
 8000be4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000be6:	4b26      	ldr	r3, [pc, #152]	; (8000c80 <MX_ADC1_Init+0xec>)
 8000be8:	2201      	movs	r2, #1
 8000bea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000bee:	4b24      	ldr	r3, [pc, #144]	; (8000c80 <MX_ADC1_Init+0xec>)
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bf4:	4822      	ldr	r0, [pc, #136]	; (8000c80 <MX_ADC1_Init+0xec>)
 8000bf6:	f000 fa77 	bl	80010e8 <HAL_ADC_Init>
 8000bfa:	4603      	mov	r3, r0
 8000bfc:	2b00      	cmp	r3, #0
 8000bfe:	d001      	beq.n	8000c04 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c00:	f000 f8bc 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c04:	2300      	movs	r3, #0
 8000c06:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c08:	2301      	movs	r3, #1
 8000c0a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000c0c:	2301      	movs	r3, #1
 8000c0e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c10:	463b      	mov	r3, r7
 8000c12:	4619      	mov	r1, r3
 8000c14:	481a      	ldr	r0, [pc, #104]	; (8000c80 <MX_ADC1_Init+0xec>)
 8000c16:	f000 fbb9 	bl	800138c <HAL_ADC_ConfigChannel>
 8000c1a:	4603      	mov	r3, r0
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	d001      	beq.n	8000c24 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c20:	f000 f8ac 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c24:	2301      	movs	r3, #1
 8000c26:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c2c:	463b      	mov	r3, r7
 8000c2e:	4619      	mov	r1, r3
 8000c30:	4813      	ldr	r0, [pc, #76]	; (8000c80 <MX_ADC1_Init+0xec>)
 8000c32:	f000 fbab 	bl	800138c <HAL_ADC_ConfigChannel>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c3c:	f000 f89e 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c40:	2302      	movs	r3, #2
 8000c42:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000c44:	2303      	movs	r3, #3
 8000c46:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c48:	463b      	mov	r3, r7
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	480c      	ldr	r0, [pc, #48]	; (8000c80 <MX_ADC1_Init+0xec>)
 8000c4e:	f000 fb9d 	bl	800138c <HAL_ADC_ConfigChannel>
 8000c52:	4603      	mov	r3, r0
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d001      	beq.n	8000c5c <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000c58:	f000 f890 	bl	8000d7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c5c:	2303      	movs	r3, #3
 8000c5e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000c60:	2304      	movs	r3, #4
 8000c62:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c64:	463b      	mov	r3, r7
 8000c66:	4619      	mov	r1, r3
 8000c68:	4805      	ldr	r0, [pc, #20]	; (8000c80 <MX_ADC1_Init+0xec>)
 8000c6a:	f000 fb8f 	bl	800138c <HAL_ADC_ConfigChannel>
 8000c6e:	4603      	mov	r3, r0
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d001      	beq.n	8000c78 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000c74:	f000 f882 	bl	8000d7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c78:	bf00      	nop
 8000c7a:	3710      	adds	r7, #16
 8000c7c:	46bd      	mov	sp, r7
 8000c7e:	bd80      	pop	{r7, pc}
 8000c80:	200006f0 	.word	0x200006f0
 8000c84:	40012000 	.word	0x40012000
 8000c88:	0f000001 	.word	0x0f000001

08000c8c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b082      	sub	sp, #8
 8000c90:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c92:	2300      	movs	r3, #0
 8000c94:	607b      	str	r3, [r7, #4]
 8000c96:	4b0c      	ldr	r3, [pc, #48]	; (8000cc8 <MX_DMA_Init+0x3c>)
 8000c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9a:	4a0b      	ldr	r2, [pc, #44]	; (8000cc8 <MX_DMA_Init+0x3c>)
 8000c9c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca2:	4b09      	ldr	r3, [pc, #36]	; (8000cc8 <MX_DMA_Init+0x3c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000caa:	607b      	str	r3, [r7, #4]
 8000cac:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	2038      	movs	r0, #56	; 0x38
 8000cb4:	f000 fee5 	bl	8001a82 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000cb8:	2038      	movs	r0, #56	; 0x38
 8000cba:	f000 fefe 	bl	8001aba <HAL_NVIC_EnableIRQ>

}
 8000cbe:	bf00      	nop
 8000cc0:	3708      	adds	r7, #8
 8000cc2:	46bd      	mov	sp, r7
 8000cc4:	bd80      	pop	{r7, pc}
 8000cc6:	bf00      	nop
 8000cc8:	40023800 	.word	0x40023800

08000ccc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000ccc:	b580      	push	{r7, lr}
 8000cce:	b088      	sub	sp, #32
 8000cd0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cd2:	f107 030c 	add.w	r3, r7, #12
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	601a      	str	r2, [r3, #0]
 8000cda:	605a      	str	r2, [r3, #4]
 8000cdc:	609a      	str	r2, [r3, #8]
 8000cde:	60da      	str	r2, [r3, #12]
 8000ce0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000ce2:	2300      	movs	r3, #0
 8000ce4:	60bb      	str	r3, [r7, #8]
 8000ce6:	4b22      	ldr	r3, [pc, #136]	; (8000d70 <MX_GPIO_Init+0xa4>)
 8000ce8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cea:	4a21      	ldr	r2, [pc, #132]	; (8000d70 <MX_GPIO_Init+0xa4>)
 8000cec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cf0:	6313      	str	r3, [r2, #48]	; 0x30
 8000cf2:	4b1f      	ldr	r3, [pc, #124]	; (8000d70 <MX_GPIO_Init+0xa4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000cfa:	60bb      	str	r3, [r7, #8]
 8000cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000cfe:	2300      	movs	r3, #0
 8000d00:	607b      	str	r3, [r7, #4]
 8000d02:	4b1b      	ldr	r3, [pc, #108]	; (8000d70 <MX_GPIO_Init+0xa4>)
 8000d04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d06:	4a1a      	ldr	r2, [pc, #104]	; (8000d70 <MX_GPIO_Init+0xa4>)
 8000d08:	f043 0301 	orr.w	r3, r3, #1
 8000d0c:	6313      	str	r3, [r2, #48]	; 0x30
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <MX_GPIO_Init+0xa4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	f003 0301 	and.w	r3, r3, #1
 8000d16:	607b      	str	r3, [r7, #4]
 8000d18:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d1a:	2300      	movs	r3, #0
 8000d1c:	603b      	str	r3, [r7, #0]
 8000d1e:	4b14      	ldr	r3, [pc, #80]	; (8000d70 <MX_GPIO_Init+0xa4>)
 8000d20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d22:	4a13      	ldr	r2, [pc, #76]	; (8000d70 <MX_GPIO_Init+0xa4>)
 8000d24:	f043 0302 	orr.w	r3, r3, #2
 8000d28:	6313      	str	r3, [r2, #48]	; 0x30
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <MX_GPIO_Init+0xa4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	f003 0302 	and.w	r3, r3, #2
 8000d32:	603b      	str	r3, [r7, #0]
 8000d34:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d36:	23f0      	movs	r3, #240	; 0xf0
 8000d38:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3a:	2300      	movs	r3, #0
 8000d3c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d3e:	2301      	movs	r3, #1
 8000d40:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d42:	f107 030c 	add.w	r3, r7, #12
 8000d46:	4619      	mov	r1, r3
 8000d48:	480a      	ldr	r0, [pc, #40]	; (8000d74 <MX_GPIO_Init+0xa8>)
 8000d4a:	f001 fa41 	bl	80021d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB13 PB15 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000d4e:	f24a 73f7 	movw	r3, #42999	; 0xa7f7
 8000d52:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d54:	2300      	movs	r3, #0
 8000d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d58:	2301      	movs	r3, #1
 8000d5a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d5c:	f107 030c 	add.w	r3, r7, #12
 8000d60:	4619      	mov	r1, r3
 8000d62:	4805      	ldr	r0, [pc, #20]	; (8000d78 <MX_GPIO_Init+0xac>)
 8000d64:	f001 fa34 	bl	80021d0 <HAL_GPIO_Init>

}
 8000d68:	bf00      	nop
 8000d6a:	3720      	adds	r7, #32
 8000d6c:	46bd      	mov	sp, r7
 8000d6e:	bd80      	pop	{r7, pc}
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000
 8000d78:	40020400 	.word	0x40020400

08000d7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d7c:	b480      	push	{r7}
 8000d7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d80:	b672      	cpsid	i
}
 8000d82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <Error_Handler+0x8>
	...

08000d88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	b083      	sub	sp, #12
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d8e:	2300      	movs	r3, #0
 8000d90:	607b      	str	r3, [r7, #4]
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d96:	4a0f      	ldr	r2, [pc, #60]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000d98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000d9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000d9e:	4b0d      	ldr	r3, [pc, #52]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000da6:	607b      	str	r3, [r7, #4]
 8000da8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000daa:	2300      	movs	r3, #0
 8000dac:	603b      	str	r3, [r7, #0]
 8000dae:	4b09      	ldr	r3, [pc, #36]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000db2:	4a08      	ldr	r2, [pc, #32]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000db4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000db8:	6413      	str	r3, [r2, #64]	; 0x40
 8000dba:	4b06      	ldr	r3, [pc, #24]	; (8000dd4 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dc2:	603b      	str	r3, [r7, #0]
 8000dc4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	370c      	adds	r7, #12
 8000dca:	46bd      	mov	sp, r7
 8000dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd0:	4770      	bx	lr
 8000dd2:	bf00      	nop
 8000dd4:	40023800 	.word	0x40023800

08000dd8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	b08a      	sub	sp, #40	; 0x28
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000de0:	f107 0314 	add.w	r3, r7, #20
 8000de4:	2200      	movs	r2, #0
 8000de6:	601a      	str	r2, [r3, #0]
 8000de8:	605a      	str	r2, [r3, #4]
 8000dea:	609a      	str	r2, [r3, #8]
 8000dec:	60da      	str	r2, [r3, #12]
 8000dee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a2f      	ldr	r2, [pc, #188]	; (8000eb4 <HAL_ADC_MspInit+0xdc>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d157      	bne.n	8000eaa <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000dfa:	2300      	movs	r3, #0
 8000dfc:	613b      	str	r3, [r7, #16]
 8000dfe:	4b2e      	ldr	r3, [pc, #184]	; (8000eb8 <HAL_ADC_MspInit+0xe0>)
 8000e00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e02:	4a2d      	ldr	r2, [pc, #180]	; (8000eb8 <HAL_ADC_MspInit+0xe0>)
 8000e04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e08:	6453      	str	r3, [r2, #68]	; 0x44
 8000e0a:	4b2b      	ldr	r3, [pc, #172]	; (8000eb8 <HAL_ADC_MspInit+0xe0>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e12:	613b      	str	r3, [r7, #16]
 8000e14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e16:	2300      	movs	r3, #0
 8000e18:	60fb      	str	r3, [r7, #12]
 8000e1a:	4b27      	ldr	r3, [pc, #156]	; (8000eb8 <HAL_ADC_MspInit+0xe0>)
 8000e1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1e:	4a26      	ldr	r2, [pc, #152]	; (8000eb8 <HAL_ADC_MspInit+0xe0>)
 8000e20:	f043 0301 	orr.w	r3, r3, #1
 8000e24:	6313      	str	r3, [r2, #48]	; 0x30
 8000e26:	4b24      	ldr	r3, [pc, #144]	; (8000eb8 <HAL_ADC_MspInit+0xe0>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	f003 0301 	and.w	r3, r3, #1
 8000e2e:	60fb      	str	r3, [r7, #12]
 8000e30:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e32:	230f      	movs	r3, #15
 8000e34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e36:	2303      	movs	r3, #3
 8000e38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e3e:	f107 0314 	add.w	r3, r7, #20
 8000e42:	4619      	mov	r1, r3
 8000e44:	481d      	ldr	r0, [pc, #116]	; (8000ebc <HAL_ADC_MspInit+0xe4>)
 8000e46:	f001 f9c3 	bl	80021d0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e4a:	4b1d      	ldr	r3, [pc, #116]	; (8000ec0 <HAL_ADC_MspInit+0xe8>)
 8000e4c:	4a1d      	ldr	r2, [pc, #116]	; (8000ec4 <HAL_ADC_MspInit+0xec>)
 8000e4e:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e50:	4b1b      	ldr	r3, [pc, #108]	; (8000ec0 <HAL_ADC_MspInit+0xe8>)
 8000e52:	2200      	movs	r2, #0
 8000e54:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e56:	4b1a      	ldr	r3, [pc, #104]	; (8000ec0 <HAL_ADC_MspInit+0xe8>)
 8000e58:	2200      	movs	r2, #0
 8000e5a:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e5c:	4b18      	ldr	r3, [pc, #96]	; (8000ec0 <HAL_ADC_MspInit+0xe8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e62:	4b17      	ldr	r3, [pc, #92]	; (8000ec0 <HAL_ADC_MspInit+0xe8>)
 8000e64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e68:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e6a:	4b15      	ldr	r3, [pc, #84]	; (8000ec0 <HAL_ADC_MspInit+0xe8>)
 8000e6c:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e70:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e72:	4b13      	ldr	r3, [pc, #76]	; (8000ec0 <HAL_ADC_MspInit+0xe8>)
 8000e74:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e78:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e7a:	4b11      	ldr	r3, [pc, #68]	; (8000ec0 <HAL_ADC_MspInit+0xe8>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e80:	4b0f      	ldr	r3, [pc, #60]	; (8000ec0 <HAL_ADC_MspInit+0xe8>)
 8000e82:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e86:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e88:	4b0d      	ldr	r3, [pc, #52]	; (8000ec0 <HAL_ADC_MspInit+0xe8>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e8e:	480c      	ldr	r0, [pc, #48]	; (8000ec0 <HAL_ADC_MspInit+0xe8>)
 8000e90:	f000 fe2e 	bl	8001af0 <HAL_DMA_Init>
 8000e94:	4603      	mov	r3, r0
 8000e96:	2b00      	cmp	r3, #0
 8000e98:	d001      	beq.n	8000e9e <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000e9a:	f7ff ff6f 	bl	8000d7c <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	4a07      	ldr	r2, [pc, #28]	; (8000ec0 <HAL_ADC_MspInit+0xe8>)
 8000ea2:	639a      	str	r2, [r3, #56]	; 0x38
 8000ea4:	4a06      	ldr	r2, [pc, #24]	; (8000ec0 <HAL_ADC_MspInit+0xe8>)
 8000ea6:	687b      	ldr	r3, [r7, #4]
 8000ea8:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eaa:	bf00      	nop
 8000eac:	3728      	adds	r7, #40	; 0x28
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	40012000 	.word	0x40012000
 8000eb8:	40023800 	.word	0x40023800
 8000ebc:	40020000 	.word	0x40020000
 8000ec0:	20000738 	.word	0x20000738
 8000ec4:	40026410 	.word	0x40026410

08000ec8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ec8:	b480      	push	{r7}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ecc:	e7fe      	b.n	8000ecc <NMI_Handler+0x4>

08000ece <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ed2:	e7fe      	b.n	8000ed2 <HardFault_Handler+0x4>

08000ed4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <MemManage_Handler+0x4>

08000eda <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <BusFault_Handler+0x4>

08000ee0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <UsageFault_Handler+0x4>

08000ee6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000eea:	bf00      	nop
 8000eec:	46bd      	mov	sp, r7
 8000eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef2:	4770      	bx	lr

08000ef4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ef8:	bf00      	nop
 8000efa:	46bd      	mov	sp, r7
 8000efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f00:	4770      	bx	lr

08000f02 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f02:	b480      	push	{r7}
 8000f04:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f06:	bf00      	nop
 8000f08:	46bd      	mov	sp, r7
 8000f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0e:	4770      	bx	lr

08000f10 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f10:	b580      	push	{r7, lr}
 8000f12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f14:	f000 f8a4 	bl	8001060 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f18:	bf00      	nop
 8000f1a:	bd80      	pop	{r7, pc}

08000f1c <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f20:	4802      	ldr	r0, [pc, #8]	; (8000f2c <DMA2_Stream0_IRQHandler+0x10>)
 8000f22:	f000 feeb 	bl	8001cfc <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	20000738 	.word	0x20000738

08000f30 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f34:	4802      	ldr	r0, [pc, #8]	; (8000f40 <OTG_FS_IRQHandler+0x10>)
 8000f36:	f001 fc37 	bl	80027a8 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f3a:	bf00      	nop
 8000f3c:	bd80      	pop	{r7, pc}
 8000f3e:	bf00      	nop
 8000f40:	20000c7c 	.word	0x20000c7c

08000f44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f44:	b480      	push	{r7}
 8000f46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f48:	4b06      	ldr	r3, [pc, #24]	; (8000f64 <SystemInit+0x20>)
 8000f4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f4e:	4a05      	ldr	r2, [pc, #20]	; (8000f64 <SystemInit+0x20>)
 8000f50:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f54:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f58:	bf00      	nop
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f60:	4770      	bx	lr
 8000f62:	bf00      	nop
 8000f64:	e000ed00 	.word	0xe000ed00

08000f68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f68:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fa0 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f6c:	480d      	ldr	r0, [pc, #52]	; (8000fa4 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f6e:	490e      	ldr	r1, [pc, #56]	; (8000fa8 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f70:	4a0e      	ldr	r2, [pc, #56]	; (8000fac <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f74:	e002      	b.n	8000f7c <LoopCopyDataInit>

08000f76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f7a:	3304      	adds	r3, #4

08000f7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f80:	d3f9      	bcc.n	8000f76 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f82:	4a0b      	ldr	r2, [pc, #44]	; (8000fb0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f84:	4c0b      	ldr	r4, [pc, #44]	; (8000fb4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f88:	e001      	b.n	8000f8e <LoopFillZerobss>

08000f8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f8c:	3204      	adds	r2, #4

08000f8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f90:	d3fb      	bcc.n	8000f8a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f92:	f7ff ffd7 	bl	8000f44 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f96:	f006 fec9 	bl	8007d2c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f9a:	f7ff fd11 	bl	80009c0 <main>
  bx  lr    
 8000f9e:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fa0:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fa4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fa8:	200004e4 	.word	0x200004e4
  ldr r2, =_sidata
 8000fac:	08007e1c 	.word	0x08007e1c
  ldr r2, =_sbss
 8000fb0:	200004e4 	.word	0x200004e4
  ldr r4, =_ebss
 8000fb4:	2000119c 	.word	0x2000119c

08000fb8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fb8:	e7fe      	b.n	8000fb8 <ADC_IRQHandler>
	...

08000fbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fc0:	4b0e      	ldr	r3, [pc, #56]	; (8000ffc <HAL_Init+0x40>)
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <HAL_Init+0x40>)
 8000fc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fcc:	4b0b      	ldr	r3, [pc, #44]	; (8000ffc <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0a      	ldr	r2, [pc, #40]	; (8000ffc <HAL_Init+0x40>)
 8000fd2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fd8:	4b08      	ldr	r3, [pc, #32]	; (8000ffc <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a07      	ldr	r2, [pc, #28]	; (8000ffc <HAL_Init+0x40>)
 8000fde:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000fe4:	2003      	movs	r0, #3
 8000fe6:	f000 fd41 	bl	8001a6c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000fea:	200f      	movs	r0, #15
 8000fec:	f000 f808 	bl	8001000 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ff0:	f7ff feca 	bl	8000d88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000ff4:	2300      	movs	r3, #0
}
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	bd80      	pop	{r7, pc}
 8000ffa:	bf00      	nop
 8000ffc:	40023c00 	.word	0x40023c00

08001000 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	b082      	sub	sp, #8
 8001004:	af00      	add	r7, sp, #0
 8001006:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001008:	4b12      	ldr	r3, [pc, #72]	; (8001054 <HAL_InitTick+0x54>)
 800100a:	681a      	ldr	r2, [r3, #0]
 800100c:	4b12      	ldr	r3, [pc, #72]	; (8001058 <HAL_InitTick+0x58>)
 800100e:	781b      	ldrb	r3, [r3, #0]
 8001010:	4619      	mov	r1, r3
 8001012:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001016:	fbb3 f3f1 	udiv	r3, r3, r1
 800101a:	fbb2 f3f3 	udiv	r3, r2, r3
 800101e:	4618      	mov	r0, r3
 8001020:	f000 fd59 	bl	8001ad6 <HAL_SYSTICK_Config>
 8001024:	4603      	mov	r3, r0
 8001026:	2b00      	cmp	r3, #0
 8001028:	d001      	beq.n	800102e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800102a:	2301      	movs	r3, #1
 800102c:	e00e      	b.n	800104c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	2b0f      	cmp	r3, #15
 8001032:	d80a      	bhi.n	800104a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001034:	2200      	movs	r2, #0
 8001036:	6879      	ldr	r1, [r7, #4]
 8001038:	f04f 30ff 	mov.w	r0, #4294967295
 800103c:	f000 fd21 	bl	8001a82 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001040:	4a06      	ldr	r2, [pc, #24]	; (800105c <HAL_InitTick+0x5c>)
 8001042:	687b      	ldr	r3, [r7, #4]
 8001044:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001046:	2300      	movs	r3, #0
 8001048:	e000      	b.n	800104c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800104a:	2301      	movs	r3, #1
}
 800104c:	4618      	mov	r0, r3
 800104e:	3708      	adds	r7, #8
 8001050:	46bd      	mov	sp, r7
 8001052:	bd80      	pop	{r7, pc}
 8001054:	200003d4 	.word	0x200003d4
 8001058:	200003dc 	.word	0x200003dc
 800105c:	200003d8 	.word	0x200003d8

08001060 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001060:	b480      	push	{r7}
 8001062:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001064:	4b06      	ldr	r3, [pc, #24]	; (8001080 <HAL_IncTick+0x20>)
 8001066:	781b      	ldrb	r3, [r3, #0]
 8001068:	461a      	mov	r2, r3
 800106a:	4b06      	ldr	r3, [pc, #24]	; (8001084 <HAL_IncTick+0x24>)
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	4413      	add	r3, r2
 8001070:	4a04      	ldr	r2, [pc, #16]	; (8001084 <HAL_IncTick+0x24>)
 8001072:	6013      	str	r3, [r2, #0]
}
 8001074:	bf00      	nop
 8001076:	46bd      	mov	sp, r7
 8001078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800107c:	4770      	bx	lr
 800107e:	bf00      	nop
 8001080:	200003dc 	.word	0x200003dc
 8001084:	20000798 	.word	0x20000798

08001088 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001088:	b480      	push	{r7}
 800108a:	af00      	add	r7, sp, #0
  return uwTick;
 800108c:	4b03      	ldr	r3, [pc, #12]	; (800109c <HAL_GetTick+0x14>)
 800108e:	681b      	ldr	r3, [r3, #0]
}
 8001090:	4618      	mov	r0, r3
 8001092:	46bd      	mov	sp, r7
 8001094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001098:	4770      	bx	lr
 800109a:	bf00      	nop
 800109c:	20000798 	.word	0x20000798

080010a0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b084      	sub	sp, #16
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010a8:	f7ff ffee 	bl	8001088 <HAL_GetTick>
 80010ac:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010b2:	68fb      	ldr	r3, [r7, #12]
 80010b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010b8:	d005      	beq.n	80010c6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010ba:	4b0a      	ldr	r3, [pc, #40]	; (80010e4 <HAL_Delay+0x44>)
 80010bc:	781b      	ldrb	r3, [r3, #0]
 80010be:	461a      	mov	r2, r3
 80010c0:	68fb      	ldr	r3, [r7, #12]
 80010c2:	4413      	add	r3, r2
 80010c4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010c6:	bf00      	nop
 80010c8:	f7ff ffde 	bl	8001088 <HAL_GetTick>
 80010cc:	4602      	mov	r2, r0
 80010ce:	68bb      	ldr	r3, [r7, #8]
 80010d0:	1ad3      	subs	r3, r2, r3
 80010d2:	68fa      	ldr	r2, [r7, #12]
 80010d4:	429a      	cmp	r2, r3
 80010d6:	d8f7      	bhi.n	80010c8 <HAL_Delay+0x28>
  {
  }
}
 80010d8:	bf00      	nop
 80010da:	bf00      	nop
 80010dc:	3710      	adds	r7, #16
 80010de:	46bd      	mov	sp, r7
 80010e0:	bd80      	pop	{r7, pc}
 80010e2:	bf00      	nop
 80010e4:	200003dc 	.word	0x200003dc

080010e8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b084      	sub	sp, #16
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010f0:	2300      	movs	r3, #0
 80010f2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d101      	bne.n	80010fe <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80010fa:	2301      	movs	r3, #1
 80010fc:	e033      	b.n	8001166 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001102:	2b00      	cmp	r3, #0
 8001104:	d109      	bne.n	800111a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001106:	6878      	ldr	r0, [r7, #4]
 8001108:	f7ff fe66 	bl	8000dd8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	2200      	movs	r2, #0
 8001110:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	2200      	movs	r2, #0
 8001116:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800111a:	687b      	ldr	r3, [r7, #4]
 800111c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800111e:	f003 0310 	and.w	r3, r3, #16
 8001122:	2b00      	cmp	r3, #0
 8001124:	d118      	bne.n	8001158 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800112e:	f023 0302 	bic.w	r3, r3, #2
 8001132:	f043 0202 	orr.w	r2, r3, #2
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800113a:	6878      	ldr	r0, [r7, #4]
 800113c:	f000 fa48 	bl	80015d0 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001140:	687b      	ldr	r3, [r7, #4]
 8001142:	2200      	movs	r2, #0
 8001144:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114a:	f023 0303 	bic.w	r3, r3, #3
 800114e:	f043 0201 	orr.w	r2, r3, #1
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	641a      	str	r2, [r3, #64]	; 0x40
 8001156:	e001      	b.n	800115c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001158:	2301      	movs	r3, #1
 800115a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	2200      	movs	r2, #0
 8001160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001164:	7bfb      	ldrb	r3, [r7, #15]
}
 8001166:	4618      	mov	r0, r3
 8001168:	3710      	adds	r7, #16
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
	...

08001170 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8001170:	b580      	push	{r7, lr}
 8001172:	b086      	sub	sp, #24
 8001174:	af00      	add	r7, sp, #0
 8001176:	60f8      	str	r0, [r7, #12]
 8001178:	60b9      	str	r1, [r7, #8]
 800117a:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 800117c:	2300      	movs	r3, #0
 800117e:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001180:	68fb      	ldr	r3, [r7, #12]
 8001182:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001186:	2b01      	cmp	r3, #1
 8001188:	d101      	bne.n	800118e <HAL_ADC_Start_DMA+0x1e>
 800118a:	2302      	movs	r3, #2
 800118c:	e0ce      	b.n	800132c <HAL_ADC_Start_DMA+0x1bc>
 800118e:	68fb      	ldr	r3, [r7, #12]
 8001190:	2201      	movs	r2, #1
 8001192:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8001196:	68fb      	ldr	r3, [r7, #12]
 8001198:	681b      	ldr	r3, [r3, #0]
 800119a:	689b      	ldr	r3, [r3, #8]
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	2b01      	cmp	r3, #1
 80011a2:	d018      	beq.n	80011d6 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011a4:	68fb      	ldr	r3, [r7, #12]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	689a      	ldr	r2, [r3, #8]
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	681b      	ldr	r3, [r3, #0]
 80011ae:	f042 0201 	orr.w	r2, r2, #1
 80011b2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011b4:	4b5f      	ldr	r3, [pc, #380]	; (8001334 <HAL_ADC_Start_DMA+0x1c4>)
 80011b6:	681b      	ldr	r3, [r3, #0]
 80011b8:	4a5f      	ldr	r2, [pc, #380]	; (8001338 <HAL_ADC_Start_DMA+0x1c8>)
 80011ba:	fba2 2303 	umull	r2, r3, r2, r3
 80011be:	0c9a      	lsrs	r2, r3, #18
 80011c0:	4613      	mov	r3, r2
 80011c2:	005b      	lsls	r3, r3, #1
 80011c4:	4413      	add	r3, r2
 80011c6:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80011c8:	e002      	b.n	80011d0 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80011ca:	693b      	ldr	r3, [r7, #16]
 80011cc:	3b01      	subs	r3, #1
 80011ce:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80011d0:	693b      	ldr	r3, [r7, #16]
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d1f9      	bne.n	80011ca <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80011d6:	68fb      	ldr	r3, [r7, #12]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	689b      	ldr	r3, [r3, #8]
 80011dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011e0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011e4:	d107      	bne.n	80011f6 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011e6:	68fb      	ldr	r3, [r7, #12]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	689a      	ldr	r2, [r3, #8]
 80011ec:	68fb      	ldr	r3, [r7, #12]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80011f4:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80011f6:	68fb      	ldr	r3, [r7, #12]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	689b      	ldr	r3, [r3, #8]
 80011fc:	f003 0301 	and.w	r3, r3, #1
 8001200:	2b01      	cmp	r3, #1
 8001202:	f040 8086 	bne.w	8001312 <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001206:	68fb      	ldr	r3, [r7, #12]
 8001208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120a:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800120e:	f023 0301 	bic.w	r3, r3, #1
 8001212:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001216:	68fb      	ldr	r3, [r7, #12]
 8001218:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800121a:	68fb      	ldr	r3, [r7, #12]
 800121c:	681b      	ldr	r3, [r3, #0]
 800121e:	685b      	ldr	r3, [r3, #4]
 8001220:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001224:	2b00      	cmp	r3, #0
 8001226:	d007      	beq.n	8001238 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800122c:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001230:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001238:	68fb      	ldr	r3, [r7, #12]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001240:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001244:	d106      	bne.n	8001254 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001246:	68fb      	ldr	r3, [r7, #12]
 8001248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800124a:	f023 0206 	bic.w	r2, r3, #6
 800124e:	68fb      	ldr	r3, [r7, #12]
 8001250:	645a      	str	r2, [r3, #68]	; 0x44
 8001252:	e002      	b.n	800125a <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001254:	68fb      	ldr	r3, [r7, #12]
 8001256:	2200      	movs	r2, #0
 8001258:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	2200      	movs	r2, #0
 800125e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001262:	4b36      	ldr	r3, [pc, #216]	; (800133c <HAL_ADC_Start_DMA+0x1cc>)
 8001264:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800126a:	4a35      	ldr	r2, [pc, #212]	; (8001340 <HAL_ADC_Start_DMA+0x1d0>)
 800126c:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800126e:	68fb      	ldr	r3, [r7, #12]
 8001270:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001272:	4a34      	ldr	r2, [pc, #208]	; (8001344 <HAL_ADC_Start_DMA+0x1d4>)
 8001274:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001276:	68fb      	ldr	r3, [r7, #12]
 8001278:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127a:	4a33      	ldr	r2, [pc, #204]	; (8001348 <HAL_ADC_Start_DMA+0x1d8>)
 800127c:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800127e:	68fb      	ldr	r3, [r7, #12]
 8001280:	681b      	ldr	r3, [r3, #0]
 8001282:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001286:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	685a      	ldr	r2, [r3, #4]
 800128e:	68fb      	ldr	r3, [r7, #12]
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8001296:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	689a      	ldr	r2, [r3, #8]
 800129e:	68fb      	ldr	r3, [r7, #12]
 80012a0:	681b      	ldr	r3, [r3, #0]
 80012a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012a6:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	334c      	adds	r3, #76	; 0x4c
 80012b2:	4619      	mov	r1, r3
 80012b4:	68ba      	ldr	r2, [r7, #8]
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	f000 fcc8 	bl	8001c4c <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012bc:	697b      	ldr	r3, [r7, #20]
 80012be:	685b      	ldr	r3, [r3, #4]
 80012c0:	f003 031f 	and.w	r3, r3, #31
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	d10f      	bne.n	80012e8 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	681b      	ldr	r3, [r3, #0]
 80012cc:	689b      	ldr	r3, [r3, #8]
 80012ce:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d129      	bne.n	800132a <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	681b      	ldr	r3, [r3, #0]
 80012da:	689a      	ldr	r2, [r3, #8]
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012e4:	609a      	str	r2, [r3, #8]
 80012e6:	e020      	b.n	800132a <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	4a17      	ldr	r2, [pc, #92]	; (800134c <HAL_ADC_Start_DMA+0x1dc>)
 80012ee:	4293      	cmp	r3, r2
 80012f0:	d11b      	bne.n	800132a <HAL_ADC_Start_DMA+0x1ba>
 80012f2:	68fb      	ldr	r3, [r7, #12]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	689b      	ldr	r3, [r3, #8]
 80012f8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012fc:	2b00      	cmp	r3, #0
 80012fe:	d114      	bne.n	800132a <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001300:	68fb      	ldr	r3, [r7, #12]
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	689a      	ldr	r2, [r3, #8]
 8001306:	68fb      	ldr	r3, [r7, #12]
 8001308:	681b      	ldr	r3, [r3, #0]
 800130a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800130e:	609a      	str	r2, [r3, #8]
 8001310:	e00b      	b.n	800132a <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001316:	f043 0210 	orr.w	r2, r3, #16
 800131a:	68fb      	ldr	r3, [r7, #12]
 800131c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001322:	f043 0201 	orr.w	r2, r3, #1
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800132a:	2300      	movs	r3, #0
}
 800132c:	4618      	mov	r0, r3
 800132e:	3718      	adds	r7, #24
 8001330:	46bd      	mov	sp, r7
 8001332:	bd80      	pop	{r7, pc}
 8001334:	200003d4 	.word	0x200003d4
 8001338:	431bde83 	.word	0x431bde83
 800133c:	40012300 	.word	0x40012300
 8001340:	080017c9 	.word	0x080017c9
 8001344:	08001883 	.word	0x08001883
 8001348:	0800189f 	.word	0x0800189f
 800134c:	40012000 	.word	0x40012000

08001350 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001350:	b480      	push	{r7}
 8001352:	b083      	sub	sp, #12
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr

08001364 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001364:	b480      	push	{r7}
 8001366:	b083      	sub	sp, #12
 8001368:	af00      	add	r7, sp, #0
 800136a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 800136c:	bf00      	nop
 800136e:	370c      	adds	r7, #12
 8001370:	46bd      	mov	sp, r7
 8001372:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001376:	4770      	bx	lr

08001378 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001378:	b480      	push	{r7}
 800137a:	b083      	sub	sp, #12
 800137c:	af00      	add	r7, sp, #0
 800137e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8001380:	bf00      	nop
 8001382:	370c      	adds	r7, #12
 8001384:	46bd      	mov	sp, r7
 8001386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138a:	4770      	bx	lr

0800138c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800138c:	b480      	push	{r7}
 800138e:	b085      	sub	sp, #20
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
 8001394:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001396:	2300      	movs	r3, #0
 8001398:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013a0:	2b01      	cmp	r3, #1
 80013a2:	d101      	bne.n	80013a8 <HAL_ADC_ConfigChannel+0x1c>
 80013a4:	2302      	movs	r3, #2
 80013a6:	e105      	b.n	80015b4 <HAL_ADC_ConfigChannel+0x228>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	2201      	movs	r2, #1
 80013ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013b0:	683b      	ldr	r3, [r7, #0]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	2b09      	cmp	r3, #9
 80013b6:	d925      	bls.n	8001404 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013b8:	687b      	ldr	r3, [r7, #4]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	68d9      	ldr	r1, [r3, #12]
 80013be:	683b      	ldr	r3, [r7, #0]
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	b29b      	uxth	r3, r3
 80013c4:	461a      	mov	r2, r3
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	3b1e      	subs	r3, #30
 80013ce:	2207      	movs	r2, #7
 80013d0:	fa02 f303 	lsl.w	r3, r2, r3
 80013d4:	43da      	mvns	r2, r3
 80013d6:	687b      	ldr	r3, [r7, #4]
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	400a      	ands	r2, r1
 80013dc:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68d9      	ldr	r1, [r3, #12]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	689a      	ldr	r2, [r3, #8]
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681b      	ldr	r3, [r3, #0]
 80013ec:	b29b      	uxth	r3, r3
 80013ee:	4618      	mov	r0, r3
 80013f0:	4603      	mov	r3, r0
 80013f2:	005b      	lsls	r3, r3, #1
 80013f4:	4403      	add	r3, r0
 80013f6:	3b1e      	subs	r3, #30
 80013f8:	409a      	lsls	r2, r3
 80013fa:	687b      	ldr	r3, [r7, #4]
 80013fc:	681b      	ldr	r3, [r3, #0]
 80013fe:	430a      	orrs	r2, r1
 8001400:	60da      	str	r2, [r3, #12]
 8001402:	e022      	b.n	800144a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001404:	687b      	ldr	r3, [r7, #4]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	6919      	ldr	r1, [r3, #16]
 800140a:	683b      	ldr	r3, [r7, #0]
 800140c:	681b      	ldr	r3, [r3, #0]
 800140e:	b29b      	uxth	r3, r3
 8001410:	461a      	mov	r2, r3
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	2207      	movs	r2, #7
 800141a:	fa02 f303 	lsl.w	r3, r2, r3
 800141e:	43da      	mvns	r2, r3
 8001420:	687b      	ldr	r3, [r7, #4]
 8001422:	681b      	ldr	r3, [r3, #0]
 8001424:	400a      	ands	r2, r1
 8001426:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6919      	ldr	r1, [r3, #16]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	689a      	ldr	r2, [r3, #8]
 8001432:	683b      	ldr	r3, [r7, #0]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	b29b      	uxth	r3, r3
 8001438:	4618      	mov	r0, r3
 800143a:	4603      	mov	r3, r0
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4403      	add	r3, r0
 8001440:	409a      	lsls	r2, r3
 8001442:	687b      	ldr	r3, [r7, #4]
 8001444:	681b      	ldr	r3, [r3, #0]
 8001446:	430a      	orrs	r2, r1
 8001448:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800144a:	683b      	ldr	r3, [r7, #0]
 800144c:	685b      	ldr	r3, [r3, #4]
 800144e:	2b06      	cmp	r3, #6
 8001450:	d824      	bhi.n	800149c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001452:	687b      	ldr	r3, [r7, #4]
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001458:	683b      	ldr	r3, [r7, #0]
 800145a:	685a      	ldr	r2, [r3, #4]
 800145c:	4613      	mov	r3, r2
 800145e:	009b      	lsls	r3, r3, #2
 8001460:	4413      	add	r3, r2
 8001462:	3b05      	subs	r3, #5
 8001464:	221f      	movs	r2, #31
 8001466:	fa02 f303 	lsl.w	r3, r2, r3
 800146a:	43da      	mvns	r2, r3
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	400a      	ands	r2, r1
 8001472:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	b29b      	uxth	r3, r3
 8001480:	4618      	mov	r0, r3
 8001482:	683b      	ldr	r3, [r7, #0]
 8001484:	685a      	ldr	r2, [r3, #4]
 8001486:	4613      	mov	r3, r2
 8001488:	009b      	lsls	r3, r3, #2
 800148a:	4413      	add	r3, r2
 800148c:	3b05      	subs	r3, #5
 800148e:	fa00 f203 	lsl.w	r2, r0, r3
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	430a      	orrs	r2, r1
 8001498:	635a      	str	r2, [r3, #52]	; 0x34
 800149a:	e04c      	b.n	8001536 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 800149c:	683b      	ldr	r3, [r7, #0]
 800149e:	685b      	ldr	r3, [r3, #4]
 80014a0:	2b0c      	cmp	r3, #12
 80014a2:	d824      	bhi.n	80014ee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	681b      	ldr	r3, [r3, #0]
 80014a8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014aa:	683b      	ldr	r3, [r7, #0]
 80014ac:	685a      	ldr	r2, [r3, #4]
 80014ae:	4613      	mov	r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	4413      	add	r3, r2
 80014b4:	3b23      	subs	r3, #35	; 0x23
 80014b6:	221f      	movs	r2, #31
 80014b8:	fa02 f303 	lsl.w	r3, r2, r3
 80014bc:	43da      	mvns	r2, r3
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	400a      	ands	r2, r1
 80014c4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014cc:	683b      	ldr	r3, [r7, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	b29b      	uxth	r3, r3
 80014d2:	4618      	mov	r0, r3
 80014d4:	683b      	ldr	r3, [r7, #0]
 80014d6:	685a      	ldr	r2, [r3, #4]
 80014d8:	4613      	mov	r3, r2
 80014da:	009b      	lsls	r3, r3, #2
 80014dc:	4413      	add	r3, r2
 80014de:	3b23      	subs	r3, #35	; 0x23
 80014e0:	fa00 f203 	lsl.w	r2, r0, r3
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	631a      	str	r2, [r3, #48]	; 0x30
 80014ec:	e023      	b.n	8001536 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80014f4:	683b      	ldr	r3, [r7, #0]
 80014f6:	685a      	ldr	r2, [r3, #4]
 80014f8:	4613      	mov	r3, r2
 80014fa:	009b      	lsls	r3, r3, #2
 80014fc:	4413      	add	r3, r2
 80014fe:	3b41      	subs	r3, #65	; 0x41
 8001500:	221f      	movs	r2, #31
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43da      	mvns	r2, r3
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	681b      	ldr	r3, [r3, #0]
 800150c:	400a      	ands	r2, r1
 800150e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001516:	683b      	ldr	r3, [r7, #0]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	b29b      	uxth	r3, r3
 800151c:	4618      	mov	r0, r3
 800151e:	683b      	ldr	r3, [r7, #0]
 8001520:	685a      	ldr	r2, [r3, #4]
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	3b41      	subs	r3, #65	; 0x41
 800152a:	fa00 f203 	lsl.w	r2, r0, r3
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	430a      	orrs	r2, r1
 8001534:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001536:	4b22      	ldr	r3, [pc, #136]	; (80015c0 <HAL_ADC_ConfigChannel+0x234>)
 8001538:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	4a21      	ldr	r2, [pc, #132]	; (80015c4 <HAL_ADC_ConfigChannel+0x238>)
 8001540:	4293      	cmp	r3, r2
 8001542:	d109      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x1cc>
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	681b      	ldr	r3, [r3, #0]
 8001548:	2b12      	cmp	r3, #18
 800154a:	d105      	bne.n	8001558 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 800154c:	68fb      	ldr	r3, [r7, #12]
 800154e:	685b      	ldr	r3, [r3, #4]
 8001550:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001554:	68fb      	ldr	r3, [r7, #12]
 8001556:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001558:	687b      	ldr	r3, [r7, #4]
 800155a:	681b      	ldr	r3, [r3, #0]
 800155c:	4a19      	ldr	r2, [pc, #100]	; (80015c4 <HAL_ADC_ConfigChannel+0x238>)
 800155e:	4293      	cmp	r3, r2
 8001560:	d123      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x21e>
 8001562:	683b      	ldr	r3, [r7, #0]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	2b10      	cmp	r3, #16
 8001568:	d003      	beq.n	8001572 <HAL_ADC_ConfigChannel+0x1e6>
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	2b11      	cmp	r3, #17
 8001570:	d11b      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8001572:	68fb      	ldr	r3, [r7, #12]
 8001574:	685b      	ldr	r3, [r3, #4]
 8001576:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 800157a:	68fb      	ldr	r3, [r7, #12]
 800157c:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	681b      	ldr	r3, [r3, #0]
 8001582:	2b10      	cmp	r3, #16
 8001584:	d111      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001586:	4b10      	ldr	r3, [pc, #64]	; (80015c8 <HAL_ADC_ConfigChannel+0x23c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	4a10      	ldr	r2, [pc, #64]	; (80015cc <HAL_ADC_ConfigChannel+0x240>)
 800158c:	fba2 2303 	umull	r2, r3, r2, r3
 8001590:	0c9a      	lsrs	r2, r3, #18
 8001592:	4613      	mov	r3, r2
 8001594:	009b      	lsls	r3, r3, #2
 8001596:	4413      	add	r3, r2
 8001598:	005b      	lsls	r3, r3, #1
 800159a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800159c:	e002      	b.n	80015a4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800159e:	68bb      	ldr	r3, [r7, #8]
 80015a0:	3b01      	subs	r3, #1
 80015a2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a4:	68bb      	ldr	r3, [r7, #8]
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d1f9      	bne.n	800159e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	2200      	movs	r2, #0
 80015ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015b2:	2300      	movs	r3, #0
}
 80015b4:	4618      	mov	r0, r3
 80015b6:	3714      	adds	r7, #20
 80015b8:	46bd      	mov	sp, r7
 80015ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015be:	4770      	bx	lr
 80015c0:	40012300 	.word	0x40012300
 80015c4:	40012000 	.word	0x40012000
 80015c8:	200003d4 	.word	0x200003d4
 80015cc:	431bde83 	.word	0x431bde83

080015d0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015d0:	b480      	push	{r7}
 80015d2:	b085      	sub	sp, #20
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015d8:	4b79      	ldr	r3, [pc, #484]	; (80017c0 <ADC_Init+0x1f0>)
 80015da:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015dc:	68fb      	ldr	r3, [r7, #12]
 80015de:	685b      	ldr	r3, [r3, #4]
 80015e0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685a      	ldr	r2, [r3, #4]
 80015ec:	687b      	ldr	r3, [r7, #4]
 80015ee:	685b      	ldr	r3, [r3, #4]
 80015f0:	431a      	orrs	r2, r3
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	685a      	ldr	r2, [r3, #4]
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001604:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001606:	687b      	ldr	r3, [r7, #4]
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	6859      	ldr	r1, [r3, #4]
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	691b      	ldr	r3, [r3, #16]
 8001610:	021a      	lsls	r2, r3, #8
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	430a      	orrs	r2, r1
 8001618:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	685a      	ldr	r2, [r3, #4]
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001628:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	681b      	ldr	r3, [r3, #0]
 800162e:	6859      	ldr	r1, [r3, #4]
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	689a      	ldr	r2, [r3, #8]
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	430a      	orrs	r2, r1
 800163a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	681b      	ldr	r3, [r3, #0]
 8001640:	689a      	ldr	r2, [r3, #8]
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	681b      	ldr	r3, [r3, #0]
 8001646:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800164a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	6899      	ldr	r1, [r3, #8]
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	68da      	ldr	r2, [r3, #12]
 8001656:	687b      	ldr	r3, [r7, #4]
 8001658:	681b      	ldr	r3, [r3, #0]
 800165a:	430a      	orrs	r2, r1
 800165c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001662:	4a58      	ldr	r2, [pc, #352]	; (80017c4 <ADC_Init+0x1f4>)
 8001664:	4293      	cmp	r3, r2
 8001666:	d022      	beq.n	80016ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	689a      	ldr	r2, [r3, #8]
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001676:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	6899      	ldr	r1, [r3, #8]
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	430a      	orrs	r2, r1
 8001688:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	689a      	ldr	r2, [r3, #8]
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001698:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	681b      	ldr	r3, [r3, #0]
 800169e:	6899      	ldr	r1, [r3, #8]
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	430a      	orrs	r2, r1
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	e00f      	b.n	80016ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	681b      	ldr	r3, [r3, #0]
 80016b2:	689a      	ldr	r2, [r3, #8]
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	689a      	ldr	r2, [r3, #8]
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	681b      	ldr	r3, [r3, #0]
 80016c8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016cc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	689a      	ldr	r2, [r3, #8]
 80016d4:	687b      	ldr	r3, [r7, #4]
 80016d6:	681b      	ldr	r3, [r3, #0]
 80016d8:	f022 0202 	bic.w	r2, r2, #2
 80016dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	6899      	ldr	r1, [r3, #8]
 80016e4:	687b      	ldr	r3, [r7, #4]
 80016e6:	7e1b      	ldrb	r3, [r3, #24]
 80016e8:	005a      	lsls	r2, r3, #1
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80016f8:	2b00      	cmp	r3, #0
 80016fa:	d01b      	beq.n	8001734 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	685a      	ldr	r2, [r3, #4]
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800170a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	685a      	ldr	r2, [r3, #4]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800171a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	6859      	ldr	r1, [r3, #4]
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001726:	3b01      	subs	r3, #1
 8001728:	035a      	lsls	r2, r3, #13
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	605a      	str	r2, [r3, #4]
 8001732:	e007      	b.n	8001744 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	685a      	ldr	r2, [r3, #4]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001742:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001752:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	69db      	ldr	r3, [r3, #28]
 800175e:	3b01      	subs	r3, #1
 8001760:	051a      	lsls	r2, r3, #20
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	430a      	orrs	r2, r1
 8001768:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	689a      	ldr	r2, [r3, #8]
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001778:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	6899      	ldr	r1, [r3, #8]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001786:	025a      	lsls	r2, r3, #9
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	430a      	orrs	r2, r1
 800178e:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	689a      	ldr	r2, [r3, #8]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800179e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	6899      	ldr	r1, [r3, #8]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	695b      	ldr	r3, [r3, #20]
 80017aa:	029a      	lsls	r2, r3, #10
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	430a      	orrs	r2, r1
 80017b2:	609a      	str	r2, [r3, #8]
}
 80017b4:	bf00      	nop
 80017b6:	3714      	adds	r7, #20
 80017b8:	46bd      	mov	sp, r7
 80017ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017be:	4770      	bx	lr
 80017c0:	40012300 	.word	0x40012300
 80017c4:	0f000001 	.word	0x0f000001

080017c8 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017d4:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017d6:	68fb      	ldr	r3, [r7, #12]
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d13c      	bne.n	800185c <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017ea:	68fb      	ldr	r3, [r7, #12]
 80017ec:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	689b      	ldr	r3, [r3, #8]
 80017f4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d12b      	bne.n	8001854 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80017fc:	68fb      	ldr	r3, [r7, #12]
 80017fe:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001800:	2b00      	cmp	r3, #0
 8001802:	d127      	bne.n	8001854 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800180a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800180e:	2b00      	cmp	r3, #0
 8001810:	d006      	beq.n	8001820 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	681b      	ldr	r3, [r3, #0]
 8001816:	689b      	ldr	r3, [r3, #8]
 8001818:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 800181c:	2b00      	cmp	r3, #0
 800181e:	d119      	bne.n	8001854 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001820:	68fb      	ldr	r3, [r7, #12]
 8001822:	681b      	ldr	r3, [r3, #0]
 8001824:	685a      	ldr	r2, [r3, #4]
 8001826:	68fb      	ldr	r3, [r7, #12]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	f022 0220 	bic.w	r2, r2, #32
 800182e:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001830:	68fb      	ldr	r3, [r7, #12]
 8001832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001834:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001838:	68fb      	ldr	r3, [r7, #12]
 800183a:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001844:	2b00      	cmp	r3, #0
 8001846:	d105      	bne.n	8001854 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f043 0201 	orr.w	r2, r3, #1
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001854:	68f8      	ldr	r0, [r7, #12]
 8001856:	f7ff fd7b 	bl	8001350 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 800185a:	e00e      	b.n	800187a <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001860:	f003 0310 	and.w	r3, r3, #16
 8001864:	2b00      	cmp	r3, #0
 8001866:	d003      	beq.n	8001870 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001868:	68f8      	ldr	r0, [r7, #12]
 800186a:	f7ff fd85 	bl	8001378 <HAL_ADC_ErrorCallback>
}
 800186e:	e004      	b.n	800187a <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001870:	68fb      	ldr	r3, [r7, #12]
 8001872:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001874:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001876:	6878      	ldr	r0, [r7, #4]
 8001878:	4798      	blx	r3
}
 800187a:	bf00      	nop
 800187c:	3710      	adds	r7, #16
 800187e:	46bd      	mov	sp, r7
 8001880:	bd80      	pop	{r7, pc}

08001882 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001882:	b580      	push	{r7, lr}
 8001884:	b084      	sub	sp, #16
 8001886:	af00      	add	r7, sp, #0
 8001888:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800188e:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001890:	68f8      	ldr	r0, [r7, #12]
 8001892:	f7ff fd67 	bl	8001364 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001896:	bf00      	nop
 8001898:	3710      	adds	r7, #16
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}

0800189e <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800189e:	b580      	push	{r7, lr}
 80018a0:	b084      	sub	sp, #16
 80018a2:	af00      	add	r7, sp, #0
 80018a4:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018aa:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2240      	movs	r2, #64	; 0x40
 80018b0:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80018b2:	68fb      	ldr	r3, [r7, #12]
 80018b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b6:	f043 0204 	orr.w	r2, r3, #4
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018be:	68f8      	ldr	r0, [r7, #12]
 80018c0:	f7ff fd5a 	bl	8001378 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018c4:	bf00      	nop
 80018c6:	3710      	adds	r7, #16
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}

080018cc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018cc:	b480      	push	{r7}
 80018ce:	b085      	sub	sp, #20
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	f003 0307 	and.w	r3, r3, #7
 80018da:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018dc:	4b0c      	ldr	r3, [pc, #48]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 80018de:	68db      	ldr	r3, [r3, #12]
 80018e0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018e2:	68ba      	ldr	r2, [r7, #8]
 80018e4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018e8:	4013      	ands	r3, r2
 80018ea:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018f0:	68bb      	ldr	r3, [r7, #8]
 80018f2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80018f4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80018f8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80018fc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018fe:	4a04      	ldr	r2, [pc, #16]	; (8001910 <__NVIC_SetPriorityGrouping+0x44>)
 8001900:	68bb      	ldr	r3, [r7, #8]
 8001902:	60d3      	str	r3, [r2, #12]
}
 8001904:	bf00      	nop
 8001906:	3714      	adds	r7, #20
 8001908:	46bd      	mov	sp, r7
 800190a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190e:	4770      	bx	lr
 8001910:	e000ed00 	.word	0xe000ed00

08001914 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001918:	4b04      	ldr	r3, [pc, #16]	; (800192c <__NVIC_GetPriorityGrouping+0x18>)
 800191a:	68db      	ldr	r3, [r3, #12]
 800191c:	0a1b      	lsrs	r3, r3, #8
 800191e:	f003 0307 	and.w	r3, r3, #7
}
 8001922:	4618      	mov	r0, r3
 8001924:	46bd      	mov	sp, r7
 8001926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800192a:	4770      	bx	lr
 800192c:	e000ed00 	.word	0xe000ed00

08001930 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001930:	b480      	push	{r7}
 8001932:	b083      	sub	sp, #12
 8001934:	af00      	add	r7, sp, #0
 8001936:	4603      	mov	r3, r0
 8001938:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800193a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193e:	2b00      	cmp	r3, #0
 8001940:	db0b      	blt.n	800195a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001942:	79fb      	ldrb	r3, [r7, #7]
 8001944:	f003 021f 	and.w	r2, r3, #31
 8001948:	4907      	ldr	r1, [pc, #28]	; (8001968 <__NVIC_EnableIRQ+0x38>)
 800194a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194e:	095b      	lsrs	r3, r3, #5
 8001950:	2001      	movs	r0, #1
 8001952:	fa00 f202 	lsl.w	r2, r0, r2
 8001956:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800195a:	bf00      	nop
 800195c:	370c      	adds	r7, #12
 800195e:	46bd      	mov	sp, r7
 8001960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001964:	4770      	bx	lr
 8001966:	bf00      	nop
 8001968:	e000e100 	.word	0xe000e100

0800196c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800196c:	b480      	push	{r7}
 800196e:	b083      	sub	sp, #12
 8001970:	af00      	add	r7, sp, #0
 8001972:	4603      	mov	r3, r0
 8001974:	6039      	str	r1, [r7, #0]
 8001976:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001978:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800197c:	2b00      	cmp	r3, #0
 800197e:	db0a      	blt.n	8001996 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	b2da      	uxtb	r2, r3
 8001984:	490c      	ldr	r1, [pc, #48]	; (80019b8 <__NVIC_SetPriority+0x4c>)
 8001986:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800198a:	0112      	lsls	r2, r2, #4
 800198c:	b2d2      	uxtb	r2, r2
 800198e:	440b      	add	r3, r1
 8001990:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001994:	e00a      	b.n	80019ac <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001996:	683b      	ldr	r3, [r7, #0]
 8001998:	b2da      	uxtb	r2, r3
 800199a:	4908      	ldr	r1, [pc, #32]	; (80019bc <__NVIC_SetPriority+0x50>)
 800199c:	79fb      	ldrb	r3, [r7, #7]
 800199e:	f003 030f 	and.w	r3, r3, #15
 80019a2:	3b04      	subs	r3, #4
 80019a4:	0112      	lsls	r2, r2, #4
 80019a6:	b2d2      	uxtb	r2, r2
 80019a8:	440b      	add	r3, r1
 80019aa:	761a      	strb	r2, [r3, #24]
}
 80019ac:	bf00      	nop
 80019ae:	370c      	adds	r7, #12
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr
 80019b8:	e000e100 	.word	0xe000e100
 80019bc:	e000ed00 	.word	0xe000ed00

080019c0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b089      	sub	sp, #36	; 0x24
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	60f8      	str	r0, [r7, #12]
 80019c8:	60b9      	str	r1, [r7, #8]
 80019ca:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019cc:	68fb      	ldr	r3, [r7, #12]
 80019ce:	f003 0307 	and.w	r3, r3, #7
 80019d2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019d4:	69fb      	ldr	r3, [r7, #28]
 80019d6:	f1c3 0307 	rsb	r3, r3, #7
 80019da:	2b04      	cmp	r3, #4
 80019dc:	bf28      	it	cs
 80019de:	2304      	movcs	r3, #4
 80019e0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019e2:	69fb      	ldr	r3, [r7, #28]
 80019e4:	3304      	adds	r3, #4
 80019e6:	2b06      	cmp	r3, #6
 80019e8:	d902      	bls.n	80019f0 <NVIC_EncodePriority+0x30>
 80019ea:	69fb      	ldr	r3, [r7, #28]
 80019ec:	3b03      	subs	r3, #3
 80019ee:	e000      	b.n	80019f2 <NVIC_EncodePriority+0x32>
 80019f0:	2300      	movs	r3, #0
 80019f2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019f4:	f04f 32ff 	mov.w	r2, #4294967295
 80019f8:	69bb      	ldr	r3, [r7, #24]
 80019fa:	fa02 f303 	lsl.w	r3, r2, r3
 80019fe:	43da      	mvns	r2, r3
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	401a      	ands	r2, r3
 8001a04:	697b      	ldr	r3, [r7, #20]
 8001a06:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a08:	f04f 31ff 	mov.w	r1, #4294967295
 8001a0c:	697b      	ldr	r3, [r7, #20]
 8001a0e:	fa01 f303 	lsl.w	r3, r1, r3
 8001a12:	43d9      	mvns	r1, r3
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a18:	4313      	orrs	r3, r2
         );
}
 8001a1a:	4618      	mov	r0, r3
 8001a1c:	3724      	adds	r7, #36	; 0x24
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
	...

08001a28 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
 8001a2e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	3b01      	subs	r3, #1
 8001a34:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a38:	d301      	bcc.n	8001a3e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a3a:	2301      	movs	r3, #1
 8001a3c:	e00f      	b.n	8001a5e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a3e:	4a0a      	ldr	r2, [pc, #40]	; (8001a68 <SysTick_Config+0x40>)
 8001a40:	687b      	ldr	r3, [r7, #4]
 8001a42:	3b01      	subs	r3, #1
 8001a44:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a46:	210f      	movs	r1, #15
 8001a48:	f04f 30ff 	mov.w	r0, #4294967295
 8001a4c:	f7ff ff8e 	bl	800196c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a50:	4b05      	ldr	r3, [pc, #20]	; (8001a68 <SysTick_Config+0x40>)
 8001a52:	2200      	movs	r2, #0
 8001a54:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a56:	4b04      	ldr	r3, [pc, #16]	; (8001a68 <SysTick_Config+0x40>)
 8001a58:	2207      	movs	r2, #7
 8001a5a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a5c:	2300      	movs	r3, #0
}
 8001a5e:	4618      	mov	r0, r3
 8001a60:	3708      	adds	r7, #8
 8001a62:	46bd      	mov	sp, r7
 8001a64:	bd80      	pop	{r7, pc}
 8001a66:	bf00      	nop
 8001a68:	e000e010 	.word	0xe000e010

08001a6c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff ff29 	bl	80018cc <__NVIC_SetPriorityGrouping>
}
 8001a7a:	bf00      	nop
 8001a7c:	3708      	adds	r7, #8
 8001a7e:	46bd      	mov	sp, r7
 8001a80:	bd80      	pop	{r7, pc}

08001a82 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a82:	b580      	push	{r7, lr}
 8001a84:	b086      	sub	sp, #24
 8001a86:	af00      	add	r7, sp, #0
 8001a88:	4603      	mov	r3, r0
 8001a8a:	60b9      	str	r1, [r7, #8]
 8001a8c:	607a      	str	r2, [r7, #4]
 8001a8e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a90:	2300      	movs	r3, #0
 8001a92:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a94:	f7ff ff3e 	bl	8001914 <__NVIC_GetPriorityGrouping>
 8001a98:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	68b9      	ldr	r1, [r7, #8]
 8001a9e:	6978      	ldr	r0, [r7, #20]
 8001aa0:	f7ff ff8e 	bl	80019c0 <NVIC_EncodePriority>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aaa:	4611      	mov	r1, r2
 8001aac:	4618      	mov	r0, r3
 8001aae:	f7ff ff5d 	bl	800196c <__NVIC_SetPriority>
}
 8001ab2:	bf00      	nop
 8001ab4:	3718      	adds	r7, #24
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	bd80      	pop	{r7, pc}

08001aba <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aba:	b580      	push	{r7, lr}
 8001abc:	b082      	sub	sp, #8
 8001abe:	af00      	add	r7, sp, #0
 8001ac0:	4603      	mov	r3, r0
 8001ac2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7ff ff31 	bl	8001930 <__NVIC_EnableIRQ>
}
 8001ace:	bf00      	nop
 8001ad0:	3708      	adds	r7, #8
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}

08001ad6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ad6:	b580      	push	{r7, lr}
 8001ad8:	b082      	sub	sp, #8
 8001ada:	af00      	add	r7, sp, #0
 8001adc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ade:	6878      	ldr	r0, [r7, #4]
 8001ae0:	f7ff ffa2 	bl	8001a28 <SysTick_Config>
 8001ae4:	4603      	mov	r3, r0
}
 8001ae6:	4618      	mov	r0, r3
 8001ae8:	3708      	adds	r7, #8
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
	...

08001af0 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001af0:	b580      	push	{r7, lr}
 8001af2:	b086      	sub	sp, #24
 8001af4:	af00      	add	r7, sp, #0
 8001af6:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001af8:	2300      	movs	r3, #0
 8001afa:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001afc:	f7ff fac4 	bl	8001088 <HAL_GetTick>
 8001b00:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d101      	bne.n	8001b0c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	e099      	b.n	8001c40 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	2202      	movs	r2, #2
 8001b10:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2200      	movs	r2, #0
 8001b18:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	681a      	ldr	r2, [r3, #0]
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	f022 0201 	bic.w	r2, r2, #1
 8001b2a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b2c:	e00f      	b.n	8001b4e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b2e:	f7ff faab 	bl	8001088 <HAL_GetTick>
 8001b32:	4602      	mov	r2, r0
 8001b34:	693b      	ldr	r3, [r7, #16]
 8001b36:	1ad3      	subs	r3, r2, r3
 8001b38:	2b05      	cmp	r3, #5
 8001b3a:	d908      	bls.n	8001b4e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2220      	movs	r2, #32
 8001b40:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	2203      	movs	r2, #3
 8001b46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e078      	b.n	8001c40 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f003 0301 	and.w	r3, r3, #1
 8001b58:	2b00      	cmp	r3, #0
 8001b5a:	d1e8      	bne.n	8001b2e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b64:	697a      	ldr	r2, [r7, #20]
 8001b66:	4b38      	ldr	r3, [pc, #224]	; (8001c48 <HAL_DMA_Init+0x158>)
 8001b68:	4013      	ands	r3, r2
 8001b6a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	685a      	ldr	r2, [r3, #4]
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	689b      	ldr	r3, [r3, #8]
 8001b74:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b7a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	691b      	ldr	r3, [r3, #16]
 8001b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b92:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	6a1b      	ldr	r3, [r3, #32]
 8001b98:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b9a:	697a      	ldr	r2, [r7, #20]
 8001b9c:	4313      	orrs	r3, r2
 8001b9e:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ba4:	2b04      	cmp	r3, #4
 8001ba6:	d107      	bne.n	8001bb8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bb0:	4313      	orrs	r3, r2
 8001bb2:	697a      	ldr	r2, [r7, #20]
 8001bb4:	4313      	orrs	r3, r2
 8001bb6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	697a      	ldr	r2, [r7, #20]
 8001bbe:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	695b      	ldr	r3, [r3, #20]
 8001bc6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bc8:	697b      	ldr	r3, [r7, #20]
 8001bca:	f023 0307 	bic.w	r3, r3, #7
 8001bce:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bd4:	697a      	ldr	r2, [r7, #20]
 8001bd6:	4313      	orrs	r3, r2
 8001bd8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bde:	2b04      	cmp	r3, #4
 8001be0:	d117      	bne.n	8001c12 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001be6:	697a      	ldr	r2, [r7, #20]
 8001be8:	4313      	orrs	r3, r2
 8001bea:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bf0:	2b00      	cmp	r3, #0
 8001bf2:	d00e      	beq.n	8001c12 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001bf4:	6878      	ldr	r0, [r7, #4]
 8001bf6:	f000 fa6f 	bl	80020d8 <DMA_CheckFifoParam>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d008      	beq.n	8001c12 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2240      	movs	r2, #64	; 0x40
 8001c04:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	2201      	movs	r2, #1
 8001c0a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c0e:	2301      	movs	r3, #1
 8001c10:	e016      	b.n	8001c40 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	697a      	ldr	r2, [r7, #20]
 8001c18:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c1a:	6878      	ldr	r0, [r7, #4]
 8001c1c:	f000 fa26 	bl	800206c <DMA_CalcBaseAndBitshift>
 8001c20:	4603      	mov	r3, r0
 8001c22:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c28:	223f      	movs	r2, #63	; 0x3f
 8001c2a:	409a      	lsls	r2, r3
 8001c2c:	68fb      	ldr	r3, [r7, #12]
 8001c2e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	2200      	movs	r2, #0
 8001c34:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2201      	movs	r2, #1
 8001c3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	3718      	adds	r7, #24
 8001c44:	46bd      	mov	sp, r7
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	f010803f 	.word	0xf010803f

08001c4c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	60f8      	str	r0, [r7, #12]
 8001c54:	60b9      	str	r1, [r7, #8]
 8001c56:	607a      	str	r2, [r7, #4]
 8001c58:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c5e:	68fb      	ldr	r3, [r7, #12]
 8001c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c62:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c6a:	2b01      	cmp	r3, #1
 8001c6c:	d101      	bne.n	8001c72 <HAL_DMA_Start_IT+0x26>
 8001c6e:	2302      	movs	r3, #2
 8001c70:	e040      	b.n	8001cf4 <HAL_DMA_Start_IT+0xa8>
 8001c72:	68fb      	ldr	r3, [r7, #12]
 8001c74:	2201      	movs	r2, #1
 8001c76:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c7a:	68fb      	ldr	r3, [r7, #12]
 8001c7c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c80:	b2db      	uxtb	r3, r3
 8001c82:	2b01      	cmp	r3, #1
 8001c84:	d12f      	bne.n	8001ce6 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	2202      	movs	r2, #2
 8001c8a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	2200      	movs	r2, #0
 8001c92:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	687a      	ldr	r2, [r7, #4]
 8001c98:	68b9      	ldr	r1, [r7, #8]
 8001c9a:	68f8      	ldr	r0, [r7, #12]
 8001c9c:	f000 f9b8 	bl	8002010 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ca0:	68fb      	ldr	r3, [r7, #12]
 8001ca2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ca4:	223f      	movs	r2, #63	; 0x3f
 8001ca6:	409a      	lsls	r2, r3
 8001ca8:	693b      	ldr	r3, [r7, #16]
 8001caa:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	681a      	ldr	r2, [r3, #0]
 8001cb2:	68fb      	ldr	r3, [r7, #12]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f042 0216 	orr.w	r2, r2, #22
 8001cba:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d007      	beq.n	8001cd4 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f042 0208 	orr.w	r2, r2, #8
 8001cd2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	68fb      	ldr	r3, [r7, #12]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f042 0201 	orr.w	r2, r2, #1
 8001ce2:	601a      	str	r2, [r3, #0]
 8001ce4:	e005      	b.n	8001cf2 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	2200      	movs	r2, #0
 8001cea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cee:	2302      	movs	r3, #2
 8001cf0:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cf2:	7dfb      	ldrb	r3, [r7, #23]
}
 8001cf4:	4618      	mov	r0, r3
 8001cf6:	3718      	adds	r7, #24
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	bd80      	pop	{r7, pc}

08001cfc <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b086      	sub	sp, #24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d04:	2300      	movs	r3, #0
 8001d06:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d08:	4b8e      	ldr	r3, [pc, #568]	; (8001f44 <HAL_DMA_IRQHandler+0x248>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a8e      	ldr	r2, [pc, #568]	; (8001f48 <HAL_DMA_IRQHandler+0x24c>)
 8001d0e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d12:	0a9b      	lsrs	r3, r3, #10
 8001d14:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d1a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d1c:	693b      	ldr	r3, [r7, #16]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d26:	2208      	movs	r2, #8
 8001d28:	409a      	lsls	r2, r3
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d01a      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	681b      	ldr	r3, [r3, #0]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	f003 0304 	and.w	r3, r3, #4
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	d013      	beq.n	8001d68 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	681a      	ldr	r2, [r3, #0]
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	681b      	ldr	r3, [r3, #0]
 8001d4a:	f022 0204 	bic.w	r2, r2, #4
 8001d4e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d54:	2208      	movs	r2, #8
 8001d56:	409a      	lsls	r2, r3
 8001d58:	693b      	ldr	r3, [r7, #16]
 8001d5a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d60:	f043 0201 	orr.w	r2, r3, #1
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d6c:	2201      	movs	r2, #1
 8001d6e:	409a      	lsls	r2, r3
 8001d70:	68fb      	ldr	r3, [r7, #12]
 8001d72:	4013      	ands	r3, r2
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	d012      	beq.n	8001d9e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	695b      	ldr	r3, [r3, #20]
 8001d7e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d00b      	beq.n	8001d9e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d8a:	2201      	movs	r2, #1
 8001d8c:	409a      	lsls	r2, r3
 8001d8e:	693b      	ldr	r3, [r7, #16]
 8001d90:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d96:	f043 0202 	orr.w	r2, r3, #2
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da2:	2204      	movs	r2, #4
 8001da4:	409a      	lsls	r2, r3
 8001da6:	68fb      	ldr	r3, [r7, #12]
 8001da8:	4013      	ands	r3, r2
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d012      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	681b      	ldr	r3, [r3, #0]
 8001db4:	f003 0302 	and.w	r3, r3, #2
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d00b      	beq.n	8001dd4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dc0:	2204      	movs	r2, #4
 8001dc2:	409a      	lsls	r2, r3
 8001dc4:	693b      	ldr	r3, [r7, #16]
 8001dc6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dcc:	f043 0204 	orr.w	r2, r3, #4
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dd8:	2210      	movs	r2, #16
 8001dda:	409a      	lsls	r2, r3
 8001ddc:	68fb      	ldr	r3, [r7, #12]
 8001dde:	4013      	ands	r3, r2
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d043      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f003 0308 	and.w	r3, r3, #8
 8001dee:	2b00      	cmp	r3, #0
 8001df0:	d03c      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001df6:	2210      	movs	r2, #16
 8001df8:	409a      	lsls	r2, r3
 8001dfa:	693b      	ldr	r3, [r7, #16]
 8001dfc:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d018      	beq.n	8001e3e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d108      	bne.n	8001e2c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e1e:	2b00      	cmp	r3, #0
 8001e20:	d024      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	4798      	blx	r3
 8001e2a:	e01f      	b.n	8001e6c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d01b      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e38:	6878      	ldr	r0, [r7, #4]
 8001e3a:	4798      	blx	r3
 8001e3c:	e016      	b.n	8001e6c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e3e:	687b      	ldr	r3, [r7, #4]
 8001e40:	681b      	ldr	r3, [r3, #0]
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d107      	bne.n	8001e5c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	681a      	ldr	r2, [r3, #0]
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	f022 0208 	bic.w	r2, r2, #8
 8001e5a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e68:	6878      	ldr	r0, [r7, #4]
 8001e6a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e70:	2220      	movs	r2, #32
 8001e72:	409a      	lsls	r2, r3
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	4013      	ands	r3, r2
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 808f 	beq.w	8001f9c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e7e:	687b      	ldr	r3, [r7, #4]
 8001e80:	681b      	ldr	r3, [r3, #0]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	f003 0310 	and.w	r3, r3, #16
 8001e88:	2b00      	cmp	r3, #0
 8001e8a:	f000 8087 	beq.w	8001f9c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e92:	2220      	movs	r2, #32
 8001e94:	409a      	lsls	r2, r3
 8001e96:	693b      	ldr	r3, [r7, #16]
 8001e98:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ea0:	b2db      	uxtb	r3, r3
 8001ea2:	2b05      	cmp	r3, #5
 8001ea4:	d136      	bne.n	8001f14 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f022 0216 	bic.w	r2, r2, #22
 8001eb4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	695a      	ldr	r2, [r3, #20]
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ec4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ec6:	687b      	ldr	r3, [r7, #4]
 8001ec8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d103      	bne.n	8001ed6 <HAL_DMA_IRQHandler+0x1da>
 8001ece:	687b      	ldr	r3, [r7, #4]
 8001ed0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d007      	beq.n	8001ee6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	681a      	ldr	r2, [r3, #0]
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	681b      	ldr	r3, [r3, #0]
 8001ee0:	f022 0208 	bic.w	r2, r2, #8
 8001ee4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ee6:	687b      	ldr	r3, [r7, #4]
 8001ee8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001eea:	223f      	movs	r2, #63	; 0x3f
 8001eec:	409a      	lsls	r2, r3
 8001eee:	693b      	ldr	r3, [r7, #16]
 8001ef0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	2201      	movs	r2, #1
 8001ef6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	2200      	movs	r2, #0
 8001efe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d07e      	beq.n	8002008 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f0e:	6878      	ldr	r0, [r7, #4]
 8001f10:	4798      	blx	r3
        }
        return;
 8001f12:	e079      	b.n	8002008 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f14:	687b      	ldr	r3, [r7, #4]
 8001f16:	681b      	ldr	r3, [r3, #0]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d01d      	beq.n	8001f5e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f2c:	2b00      	cmp	r3, #0
 8001f2e:	d10d      	bne.n	8001f4c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f34:	2b00      	cmp	r3, #0
 8001f36:	d031      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	4798      	blx	r3
 8001f40:	e02c      	b.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
 8001f42:	bf00      	nop
 8001f44:	200003d4 	.word	0x200003d4
 8001f48:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f50:	2b00      	cmp	r3, #0
 8001f52:	d023      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f54:	687b      	ldr	r3, [r7, #4]
 8001f56:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	4798      	blx	r3
 8001f5c:	e01e      	b.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d10f      	bne.n	8001f8c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	681a      	ldr	r2, [r3, #0]
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	f022 0210 	bic.w	r2, r2, #16
 8001f7a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	2201      	movs	r2, #1
 8001f80:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	2200      	movs	r2, #0
 8001f88:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f90:	2b00      	cmp	r3, #0
 8001f92:	d003      	beq.n	8001f9c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f98:	6878      	ldr	r0, [r7, #4]
 8001f9a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d032      	beq.n	800200a <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fa8:	f003 0301 	and.w	r3, r3, #1
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d022      	beq.n	8001ff6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	2205      	movs	r2, #5
 8001fb4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f022 0201 	bic.w	r2, r2, #1
 8001fc6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fc8:	68bb      	ldr	r3, [r7, #8]
 8001fca:	3301      	adds	r3, #1
 8001fcc:	60bb      	str	r3, [r7, #8]
 8001fce:	697a      	ldr	r2, [r7, #20]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d307      	bcc.n	8001fe4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	f003 0301 	and.w	r3, r3, #1
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	d1f2      	bne.n	8001fc8 <HAL_DMA_IRQHandler+0x2cc>
 8001fe2:	e000      	b.n	8001fe6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001fe4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	2201      	movs	r2, #1
 8001fea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001ff6:	687b      	ldr	r3, [r7, #4]
 8001ff8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d005      	beq.n	800200a <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001ffe:	687b      	ldr	r3, [r7, #4]
 8002000:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	4798      	blx	r3
 8002006:	e000      	b.n	800200a <HAL_DMA_IRQHandler+0x30e>
        return;
 8002008:	bf00      	nop
    }
  }
}
 800200a:	3718      	adds	r7, #24
 800200c:	46bd      	mov	sp, r7
 800200e:	bd80      	pop	{r7, pc}

08002010 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002010:	b480      	push	{r7}
 8002012:	b085      	sub	sp, #20
 8002014:	af00      	add	r7, sp, #0
 8002016:	60f8      	str	r0, [r7, #12]
 8002018:	60b9      	str	r1, [r7, #8]
 800201a:	607a      	str	r2, [r7, #4]
 800201c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	681a      	ldr	r2, [r3, #0]
 8002024:	68fb      	ldr	r3, [r7, #12]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800202c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	683a      	ldr	r2, [r7, #0]
 8002034:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	689b      	ldr	r3, [r3, #8]
 800203a:	2b40      	cmp	r3, #64	; 0x40
 800203c:	d108      	bne.n	8002050 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	687a      	ldr	r2, [r7, #4]
 8002044:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	681b      	ldr	r3, [r3, #0]
 800204a:	68ba      	ldr	r2, [r7, #8]
 800204c:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800204e:	e007      	b.n	8002060 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002050:	68fb      	ldr	r3, [r7, #12]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	68ba      	ldr	r2, [r7, #8]
 8002056:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002058:	68fb      	ldr	r3, [r7, #12]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	687a      	ldr	r2, [r7, #4]
 800205e:	60da      	str	r2, [r3, #12]
}
 8002060:	bf00      	nop
 8002062:	3714      	adds	r7, #20
 8002064:	46bd      	mov	sp, r7
 8002066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800206a:	4770      	bx	lr

0800206c <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 800206c:	b480      	push	{r7}
 800206e:	b085      	sub	sp, #20
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	681b      	ldr	r3, [r3, #0]
 8002078:	b2db      	uxtb	r3, r3
 800207a:	3b10      	subs	r3, #16
 800207c:	4a14      	ldr	r2, [pc, #80]	; (80020d0 <DMA_CalcBaseAndBitshift+0x64>)
 800207e:	fba2 2303 	umull	r2, r3, r2, r3
 8002082:	091b      	lsrs	r3, r3, #4
 8002084:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002086:	4a13      	ldr	r2, [pc, #76]	; (80020d4 <DMA_CalcBaseAndBitshift+0x68>)
 8002088:	68fb      	ldr	r3, [r7, #12]
 800208a:	4413      	add	r3, r2
 800208c:	781b      	ldrb	r3, [r3, #0]
 800208e:	461a      	mov	r2, r3
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	2b03      	cmp	r3, #3
 8002098:	d909      	bls.n	80020ae <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020a2:	f023 0303 	bic.w	r3, r3, #3
 80020a6:	1d1a      	adds	r2, r3, #4
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	659a      	str	r2, [r3, #88]	; 0x58
 80020ac:	e007      	b.n	80020be <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020b6:	f023 0303 	bic.w	r3, r3, #3
 80020ba:	687a      	ldr	r2, [r7, #4]
 80020bc:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020c2:	4618      	mov	r0, r3
 80020c4:	3714      	adds	r7, #20
 80020c6:	46bd      	mov	sp, r7
 80020c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020cc:	4770      	bx	lr
 80020ce:	bf00      	nop
 80020d0:	aaaaaaab 	.word	0xaaaaaaab
 80020d4:	08007e04 	.word	0x08007e04

080020d8 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020d8:	b480      	push	{r7}
 80020da:	b085      	sub	sp, #20
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020e0:	2300      	movs	r3, #0
 80020e2:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020e8:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	699b      	ldr	r3, [r3, #24]
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d11f      	bne.n	8002132 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	2b03      	cmp	r3, #3
 80020f6:	d856      	bhi.n	80021a6 <DMA_CheckFifoParam+0xce>
 80020f8:	a201      	add	r2, pc, #4	; (adr r2, 8002100 <DMA_CheckFifoParam+0x28>)
 80020fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80020fe:	bf00      	nop
 8002100:	08002111 	.word	0x08002111
 8002104:	08002123 	.word	0x08002123
 8002108:	08002111 	.word	0x08002111
 800210c:	080021a7 	.word	0x080021a7
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002114:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002118:	2b00      	cmp	r3, #0
 800211a:	d046      	beq.n	80021aa <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002120:	e043      	b.n	80021aa <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002126:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800212a:	d140      	bne.n	80021ae <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800212c:	2301      	movs	r3, #1
 800212e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002130:	e03d      	b.n	80021ae <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	699b      	ldr	r3, [r3, #24]
 8002136:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800213a:	d121      	bne.n	8002180 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	2b03      	cmp	r3, #3
 8002140:	d837      	bhi.n	80021b2 <DMA_CheckFifoParam+0xda>
 8002142:	a201      	add	r2, pc, #4	; (adr r2, 8002148 <DMA_CheckFifoParam+0x70>)
 8002144:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002148:	08002159 	.word	0x08002159
 800214c:	0800215f 	.word	0x0800215f
 8002150:	08002159 	.word	0x08002159
 8002154:	08002171 	.word	0x08002171
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002158:	2301      	movs	r3, #1
 800215a:	73fb      	strb	r3, [r7, #15]
      break;
 800215c:	e030      	b.n	80021c0 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002162:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002166:	2b00      	cmp	r3, #0
 8002168:	d025      	beq.n	80021b6 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800216a:	2301      	movs	r3, #1
 800216c:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800216e:	e022      	b.n	80021b6 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002174:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002178:	d11f      	bne.n	80021ba <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800217a:	2301      	movs	r3, #1
 800217c:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800217e:	e01c      	b.n	80021ba <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002180:	68bb      	ldr	r3, [r7, #8]
 8002182:	2b02      	cmp	r3, #2
 8002184:	d903      	bls.n	800218e <DMA_CheckFifoParam+0xb6>
 8002186:	68bb      	ldr	r3, [r7, #8]
 8002188:	2b03      	cmp	r3, #3
 800218a:	d003      	beq.n	8002194 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 800218c:	e018      	b.n	80021c0 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	73fb      	strb	r3, [r7, #15]
      break;
 8002192:	e015      	b.n	80021c0 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002198:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800219c:	2b00      	cmp	r3, #0
 800219e:	d00e      	beq.n	80021be <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021a0:	2301      	movs	r3, #1
 80021a2:	73fb      	strb	r3, [r7, #15]
      break;
 80021a4:	e00b      	b.n	80021be <DMA_CheckFifoParam+0xe6>
      break;
 80021a6:	bf00      	nop
 80021a8:	e00a      	b.n	80021c0 <DMA_CheckFifoParam+0xe8>
      break;
 80021aa:	bf00      	nop
 80021ac:	e008      	b.n	80021c0 <DMA_CheckFifoParam+0xe8>
      break;
 80021ae:	bf00      	nop
 80021b0:	e006      	b.n	80021c0 <DMA_CheckFifoParam+0xe8>
      break;
 80021b2:	bf00      	nop
 80021b4:	e004      	b.n	80021c0 <DMA_CheckFifoParam+0xe8>
      break;
 80021b6:	bf00      	nop
 80021b8:	e002      	b.n	80021c0 <DMA_CheckFifoParam+0xe8>
      break;   
 80021ba:	bf00      	nop
 80021bc:	e000      	b.n	80021c0 <DMA_CheckFifoParam+0xe8>
      break;
 80021be:	bf00      	nop
    }
  } 
  
  return status; 
 80021c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80021c2:	4618      	mov	r0, r3
 80021c4:	3714      	adds	r7, #20
 80021c6:	46bd      	mov	sp, r7
 80021c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021cc:	4770      	bx	lr
 80021ce:	bf00      	nop

080021d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021d0:	b480      	push	{r7}
 80021d2:	b089      	sub	sp, #36	; 0x24
 80021d4:	af00      	add	r7, sp, #0
 80021d6:	6078      	str	r0, [r7, #4]
 80021d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021da:	2300      	movs	r3, #0
 80021dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021de:	2300      	movs	r3, #0
 80021e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021e2:	2300      	movs	r3, #0
 80021e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021e6:	2300      	movs	r3, #0
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	e159      	b.n	80024a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021ec:	2201      	movs	r2, #1
 80021ee:	69fb      	ldr	r3, [r7, #28]
 80021f0:	fa02 f303 	lsl.w	r3, r2, r3
 80021f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	697a      	ldr	r2, [r7, #20]
 80021fc:	4013      	ands	r3, r2
 80021fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002200:	693a      	ldr	r2, [r7, #16]
 8002202:	697b      	ldr	r3, [r7, #20]
 8002204:	429a      	cmp	r2, r3
 8002206:	f040 8148 	bne.w	800249a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800220a:	683b      	ldr	r3, [r7, #0]
 800220c:	685b      	ldr	r3, [r3, #4]
 800220e:	f003 0303 	and.w	r3, r3, #3
 8002212:	2b01      	cmp	r3, #1
 8002214:	d005      	beq.n	8002222 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800221e:	2b02      	cmp	r3, #2
 8002220:	d130      	bne.n	8002284 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	005b      	lsls	r3, r3, #1
 800222c:	2203      	movs	r2, #3
 800222e:	fa02 f303 	lsl.w	r3, r2, r3
 8002232:	43db      	mvns	r3, r3
 8002234:	69ba      	ldr	r2, [r7, #24]
 8002236:	4013      	ands	r3, r2
 8002238:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800223a:	683b      	ldr	r3, [r7, #0]
 800223c:	68da      	ldr	r2, [r3, #12]
 800223e:	69fb      	ldr	r3, [r7, #28]
 8002240:	005b      	lsls	r3, r3, #1
 8002242:	fa02 f303 	lsl.w	r3, r2, r3
 8002246:	69ba      	ldr	r2, [r7, #24]
 8002248:	4313      	orrs	r3, r2
 800224a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800224c:	687b      	ldr	r3, [r7, #4]
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	685b      	ldr	r3, [r3, #4]
 8002256:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002258:	2201      	movs	r2, #1
 800225a:	69fb      	ldr	r3, [r7, #28]
 800225c:	fa02 f303 	lsl.w	r3, r2, r3
 8002260:	43db      	mvns	r3, r3
 8002262:	69ba      	ldr	r2, [r7, #24]
 8002264:	4013      	ands	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002268:	683b      	ldr	r3, [r7, #0]
 800226a:	685b      	ldr	r3, [r3, #4]
 800226c:	091b      	lsrs	r3, r3, #4
 800226e:	f003 0201 	and.w	r2, r3, #1
 8002272:	69fb      	ldr	r3, [r7, #28]
 8002274:	fa02 f303 	lsl.w	r3, r2, r3
 8002278:	69ba      	ldr	r2, [r7, #24]
 800227a:	4313      	orrs	r3, r2
 800227c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	69ba      	ldr	r2, [r7, #24]
 8002282:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002284:	683b      	ldr	r3, [r7, #0]
 8002286:	685b      	ldr	r3, [r3, #4]
 8002288:	f003 0303 	and.w	r3, r3, #3
 800228c:	2b03      	cmp	r3, #3
 800228e:	d017      	beq.n	80022c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	68db      	ldr	r3, [r3, #12]
 8002294:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002296:	69fb      	ldr	r3, [r7, #28]
 8002298:	005b      	lsls	r3, r3, #1
 800229a:	2203      	movs	r2, #3
 800229c:	fa02 f303 	lsl.w	r3, r2, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	69ba      	ldr	r2, [r7, #24]
 80022a4:	4013      	ands	r3, r2
 80022a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022a8:	683b      	ldr	r3, [r7, #0]
 80022aa:	689a      	ldr	r2, [r3, #8]
 80022ac:	69fb      	ldr	r3, [r7, #28]
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	fa02 f303 	lsl.w	r3, r2, r3
 80022b4:	69ba      	ldr	r2, [r7, #24]
 80022b6:	4313      	orrs	r3, r2
 80022b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	69ba      	ldr	r2, [r7, #24]
 80022be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022c0:	683b      	ldr	r3, [r7, #0]
 80022c2:	685b      	ldr	r3, [r3, #4]
 80022c4:	f003 0303 	and.w	r3, r3, #3
 80022c8:	2b02      	cmp	r3, #2
 80022ca:	d123      	bne.n	8002314 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022cc:	69fb      	ldr	r3, [r7, #28]
 80022ce:	08da      	lsrs	r2, r3, #3
 80022d0:	687b      	ldr	r3, [r7, #4]
 80022d2:	3208      	adds	r2, #8
 80022d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022da:	69fb      	ldr	r3, [r7, #28]
 80022dc:	f003 0307 	and.w	r3, r3, #7
 80022e0:	009b      	lsls	r3, r3, #2
 80022e2:	220f      	movs	r2, #15
 80022e4:	fa02 f303 	lsl.w	r3, r2, r3
 80022e8:	43db      	mvns	r3, r3
 80022ea:	69ba      	ldr	r2, [r7, #24]
 80022ec:	4013      	ands	r3, r2
 80022ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022f0:	683b      	ldr	r3, [r7, #0]
 80022f2:	691a      	ldr	r2, [r3, #16]
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	009b      	lsls	r3, r3, #2
 80022fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002300:	69ba      	ldr	r2, [r7, #24]
 8002302:	4313      	orrs	r3, r2
 8002304:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002306:	69fb      	ldr	r3, [r7, #28]
 8002308:	08da      	lsrs	r2, r3, #3
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	3208      	adds	r2, #8
 800230e:	69b9      	ldr	r1, [r7, #24]
 8002310:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002314:	687b      	ldr	r3, [r7, #4]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	005b      	lsls	r3, r3, #1
 800231e:	2203      	movs	r2, #3
 8002320:	fa02 f303 	lsl.w	r3, r2, r3
 8002324:	43db      	mvns	r3, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4013      	ands	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	685b      	ldr	r3, [r3, #4]
 8002330:	f003 0203 	and.w	r2, r3, #3
 8002334:	69fb      	ldr	r3, [r7, #28]
 8002336:	005b      	lsls	r3, r3, #1
 8002338:	fa02 f303 	lsl.w	r3, r2, r3
 800233c:	69ba      	ldr	r2, [r7, #24]
 800233e:	4313      	orrs	r3, r2
 8002340:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	69ba      	ldr	r2, [r7, #24]
 8002346:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002350:	2b00      	cmp	r3, #0
 8002352:	f000 80a2 	beq.w	800249a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002356:	2300      	movs	r3, #0
 8002358:	60fb      	str	r3, [r7, #12]
 800235a:	4b57      	ldr	r3, [pc, #348]	; (80024b8 <HAL_GPIO_Init+0x2e8>)
 800235c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800235e:	4a56      	ldr	r2, [pc, #344]	; (80024b8 <HAL_GPIO_Init+0x2e8>)
 8002360:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002364:	6453      	str	r3, [r2, #68]	; 0x44
 8002366:	4b54      	ldr	r3, [pc, #336]	; (80024b8 <HAL_GPIO_Init+0x2e8>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800236e:	60fb      	str	r3, [r7, #12]
 8002370:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002372:	4a52      	ldr	r2, [pc, #328]	; (80024bc <HAL_GPIO_Init+0x2ec>)
 8002374:	69fb      	ldr	r3, [r7, #28]
 8002376:	089b      	lsrs	r3, r3, #2
 8002378:	3302      	adds	r3, #2
 800237a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800237e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	f003 0303 	and.w	r3, r3, #3
 8002386:	009b      	lsls	r3, r3, #2
 8002388:	220f      	movs	r2, #15
 800238a:	fa02 f303 	lsl.w	r3, r2, r3
 800238e:	43db      	mvns	r3, r3
 8002390:	69ba      	ldr	r2, [r7, #24]
 8002392:	4013      	ands	r3, r2
 8002394:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	4a49      	ldr	r2, [pc, #292]	; (80024c0 <HAL_GPIO_Init+0x2f0>)
 800239a:	4293      	cmp	r3, r2
 800239c:	d019      	beq.n	80023d2 <HAL_GPIO_Init+0x202>
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	4a48      	ldr	r2, [pc, #288]	; (80024c4 <HAL_GPIO_Init+0x2f4>)
 80023a2:	4293      	cmp	r3, r2
 80023a4:	d013      	beq.n	80023ce <HAL_GPIO_Init+0x1fe>
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	4a47      	ldr	r2, [pc, #284]	; (80024c8 <HAL_GPIO_Init+0x2f8>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d00d      	beq.n	80023ca <HAL_GPIO_Init+0x1fa>
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	4a46      	ldr	r2, [pc, #280]	; (80024cc <HAL_GPIO_Init+0x2fc>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d007      	beq.n	80023c6 <HAL_GPIO_Init+0x1f6>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	4a45      	ldr	r2, [pc, #276]	; (80024d0 <HAL_GPIO_Init+0x300>)
 80023ba:	4293      	cmp	r3, r2
 80023bc:	d101      	bne.n	80023c2 <HAL_GPIO_Init+0x1f2>
 80023be:	2304      	movs	r3, #4
 80023c0:	e008      	b.n	80023d4 <HAL_GPIO_Init+0x204>
 80023c2:	2307      	movs	r3, #7
 80023c4:	e006      	b.n	80023d4 <HAL_GPIO_Init+0x204>
 80023c6:	2303      	movs	r3, #3
 80023c8:	e004      	b.n	80023d4 <HAL_GPIO_Init+0x204>
 80023ca:	2302      	movs	r3, #2
 80023cc:	e002      	b.n	80023d4 <HAL_GPIO_Init+0x204>
 80023ce:	2301      	movs	r3, #1
 80023d0:	e000      	b.n	80023d4 <HAL_GPIO_Init+0x204>
 80023d2:	2300      	movs	r3, #0
 80023d4:	69fa      	ldr	r2, [r7, #28]
 80023d6:	f002 0203 	and.w	r2, r2, #3
 80023da:	0092      	lsls	r2, r2, #2
 80023dc:	4093      	lsls	r3, r2
 80023de:	69ba      	ldr	r2, [r7, #24]
 80023e0:	4313      	orrs	r3, r2
 80023e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023e4:	4935      	ldr	r1, [pc, #212]	; (80024bc <HAL_GPIO_Init+0x2ec>)
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	089b      	lsrs	r3, r3, #2
 80023ea:	3302      	adds	r3, #2
 80023ec:	69ba      	ldr	r2, [r7, #24]
 80023ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023f2:	4b38      	ldr	r3, [pc, #224]	; (80024d4 <HAL_GPIO_Init+0x304>)
 80023f4:	689b      	ldr	r3, [r3, #8]
 80023f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80023f8:	693b      	ldr	r3, [r7, #16]
 80023fa:	43db      	mvns	r3, r3
 80023fc:	69ba      	ldr	r2, [r7, #24]
 80023fe:	4013      	ands	r3, r2
 8002400:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	685b      	ldr	r3, [r3, #4]
 8002406:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800240a:	2b00      	cmp	r3, #0
 800240c:	d003      	beq.n	8002416 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800240e:	69ba      	ldr	r2, [r7, #24]
 8002410:	693b      	ldr	r3, [r7, #16]
 8002412:	4313      	orrs	r3, r2
 8002414:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002416:	4a2f      	ldr	r2, [pc, #188]	; (80024d4 <HAL_GPIO_Init+0x304>)
 8002418:	69bb      	ldr	r3, [r7, #24]
 800241a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800241c:	4b2d      	ldr	r3, [pc, #180]	; (80024d4 <HAL_GPIO_Init+0x304>)
 800241e:	68db      	ldr	r3, [r3, #12]
 8002420:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002422:	693b      	ldr	r3, [r7, #16]
 8002424:	43db      	mvns	r3, r3
 8002426:	69ba      	ldr	r2, [r7, #24]
 8002428:	4013      	ands	r3, r2
 800242a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	685b      	ldr	r3, [r3, #4]
 8002430:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002434:	2b00      	cmp	r3, #0
 8002436:	d003      	beq.n	8002440 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002438:	69ba      	ldr	r2, [r7, #24]
 800243a:	693b      	ldr	r3, [r7, #16]
 800243c:	4313      	orrs	r3, r2
 800243e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002440:	4a24      	ldr	r2, [pc, #144]	; (80024d4 <HAL_GPIO_Init+0x304>)
 8002442:	69bb      	ldr	r3, [r7, #24]
 8002444:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002446:	4b23      	ldr	r3, [pc, #140]	; (80024d4 <HAL_GPIO_Init+0x304>)
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800244c:	693b      	ldr	r3, [r7, #16]
 800244e:	43db      	mvns	r3, r3
 8002450:	69ba      	ldr	r2, [r7, #24]
 8002452:	4013      	ands	r3, r2
 8002454:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002456:	683b      	ldr	r3, [r7, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800245e:	2b00      	cmp	r3, #0
 8002460:	d003      	beq.n	800246a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002462:	69ba      	ldr	r2, [r7, #24]
 8002464:	693b      	ldr	r3, [r7, #16]
 8002466:	4313      	orrs	r3, r2
 8002468:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800246a:	4a1a      	ldr	r2, [pc, #104]	; (80024d4 <HAL_GPIO_Init+0x304>)
 800246c:	69bb      	ldr	r3, [r7, #24]
 800246e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002470:	4b18      	ldr	r3, [pc, #96]	; (80024d4 <HAL_GPIO_Init+0x304>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002476:	693b      	ldr	r3, [r7, #16]
 8002478:	43db      	mvns	r3, r3
 800247a:	69ba      	ldr	r2, [r7, #24]
 800247c:	4013      	ands	r3, r2
 800247e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	685b      	ldr	r3, [r3, #4]
 8002484:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d003      	beq.n	8002494 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800248c:	69ba      	ldr	r2, [r7, #24]
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	4313      	orrs	r3, r2
 8002492:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002494:	4a0f      	ldr	r2, [pc, #60]	; (80024d4 <HAL_GPIO_Init+0x304>)
 8002496:	69bb      	ldr	r3, [r7, #24]
 8002498:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	3301      	adds	r3, #1
 800249e:	61fb      	str	r3, [r7, #28]
 80024a0:	69fb      	ldr	r3, [r7, #28]
 80024a2:	2b0f      	cmp	r3, #15
 80024a4:	f67f aea2 	bls.w	80021ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024a8:	bf00      	nop
 80024aa:	bf00      	nop
 80024ac:	3724      	adds	r7, #36	; 0x24
 80024ae:	46bd      	mov	sp, r7
 80024b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b4:	4770      	bx	lr
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40013800 	.word	0x40013800
 80024c0:	40020000 	.word	0x40020000
 80024c4:	40020400 	.word	0x40020400
 80024c8:	40020800 	.word	0x40020800
 80024cc:	40020c00 	.word	0x40020c00
 80024d0:	40021000 	.word	0x40021000
 80024d4:	40013c00 	.word	0x40013c00

080024d8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024d8:	b480      	push	{r7}
 80024da:	b085      	sub	sp, #20
 80024dc:	af00      	add	r7, sp, #0
 80024de:	6078      	str	r0, [r7, #4]
 80024e0:	460b      	mov	r3, r1
 80024e2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	691a      	ldr	r2, [r3, #16]
 80024e8:	887b      	ldrh	r3, [r7, #2]
 80024ea:	4013      	ands	r3, r2
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	d002      	beq.n	80024f6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024f0:	2301      	movs	r3, #1
 80024f2:	73fb      	strb	r3, [r7, #15]
 80024f4:	e001      	b.n	80024fa <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80024f6:	2300      	movs	r3, #0
 80024f8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80024fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	3714      	adds	r7, #20
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002508:	b5f0      	push	{r4, r5, r6, r7, lr}
 800250a:	b08f      	sub	sp, #60	; 0x3c
 800250c:	af0a      	add	r7, sp, #40	; 0x28
 800250e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d101      	bne.n	800251a <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002516:	2301      	movs	r3, #1
 8002518:	e10f      	b.n	800273a <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002526:	b2db      	uxtb	r3, r3
 8002528:	2b00      	cmp	r3, #0
 800252a:	d106      	bne.n	800253a <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	2200      	movs	r2, #0
 8002530:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002534:	6878      	ldr	r0, [r7, #4]
 8002536:	f005 f901 	bl	800773c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	2203      	movs	r2, #3
 800253e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002542:	68bb      	ldr	r3, [r7, #8]
 8002544:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002546:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800254a:	2b00      	cmp	r3, #0
 800254c:	d102      	bne.n	8002554 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	2200      	movs	r2, #0
 8002552:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	4618      	mov	r0, r3
 800255a:	f001 ff80 	bl	800445e <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800255e:	687b      	ldr	r3, [r7, #4]
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	603b      	str	r3, [r7, #0]
 8002564:	687e      	ldr	r6, [r7, #4]
 8002566:	466d      	mov	r5, sp
 8002568:	f106 0410 	add.w	r4, r6, #16
 800256c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800256e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002570:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002572:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002574:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002578:	e885 0003 	stmia.w	r5, {r0, r1}
 800257c:	1d33      	adds	r3, r6, #4
 800257e:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002580:	6838      	ldr	r0, [r7, #0]
 8002582:	f001 fe57 	bl	8004234 <USB_CoreInit>
 8002586:	4603      	mov	r3, r0
 8002588:	2b00      	cmp	r3, #0
 800258a:	d005      	beq.n	8002598 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800258c:	687b      	ldr	r3, [r7, #4]
 800258e:	2202      	movs	r2, #2
 8002590:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002594:	2301      	movs	r3, #1
 8002596:	e0d0      	b.n	800273a <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2100      	movs	r1, #0
 800259e:	4618      	mov	r0, r3
 80025a0:	f001 ff6e 	bl	8004480 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
 80025a8:	e04a      	b.n	8002640 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025aa:	7bfa      	ldrb	r2, [r7, #15]
 80025ac:	6879      	ldr	r1, [r7, #4]
 80025ae:	4613      	mov	r3, r2
 80025b0:	00db      	lsls	r3, r3, #3
 80025b2:	4413      	add	r3, r2
 80025b4:	009b      	lsls	r3, r3, #2
 80025b6:	440b      	add	r3, r1
 80025b8:	333d      	adds	r3, #61	; 0x3d
 80025ba:	2201      	movs	r2, #1
 80025bc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025be:	7bfa      	ldrb	r2, [r7, #15]
 80025c0:	6879      	ldr	r1, [r7, #4]
 80025c2:	4613      	mov	r3, r2
 80025c4:	00db      	lsls	r3, r3, #3
 80025c6:	4413      	add	r3, r2
 80025c8:	009b      	lsls	r3, r3, #2
 80025ca:	440b      	add	r3, r1
 80025cc:	333c      	adds	r3, #60	; 0x3c
 80025ce:	7bfa      	ldrb	r2, [r7, #15]
 80025d0:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025d2:	7bfa      	ldrb	r2, [r7, #15]
 80025d4:	7bfb      	ldrb	r3, [r7, #15]
 80025d6:	b298      	uxth	r0, r3
 80025d8:	6879      	ldr	r1, [r7, #4]
 80025da:	4613      	mov	r3, r2
 80025dc:	00db      	lsls	r3, r3, #3
 80025de:	4413      	add	r3, r2
 80025e0:	009b      	lsls	r3, r3, #2
 80025e2:	440b      	add	r3, r1
 80025e4:	3344      	adds	r3, #68	; 0x44
 80025e6:	4602      	mov	r2, r0
 80025e8:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025ea:	7bfa      	ldrb	r2, [r7, #15]
 80025ec:	6879      	ldr	r1, [r7, #4]
 80025ee:	4613      	mov	r3, r2
 80025f0:	00db      	lsls	r3, r3, #3
 80025f2:	4413      	add	r3, r2
 80025f4:	009b      	lsls	r3, r3, #2
 80025f6:	440b      	add	r3, r1
 80025f8:	3340      	adds	r3, #64	; 0x40
 80025fa:	2200      	movs	r2, #0
 80025fc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80025fe:	7bfa      	ldrb	r2, [r7, #15]
 8002600:	6879      	ldr	r1, [r7, #4]
 8002602:	4613      	mov	r3, r2
 8002604:	00db      	lsls	r3, r3, #3
 8002606:	4413      	add	r3, r2
 8002608:	009b      	lsls	r3, r3, #2
 800260a:	440b      	add	r3, r1
 800260c:	3348      	adds	r3, #72	; 0x48
 800260e:	2200      	movs	r2, #0
 8002610:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002612:	7bfa      	ldrb	r2, [r7, #15]
 8002614:	6879      	ldr	r1, [r7, #4]
 8002616:	4613      	mov	r3, r2
 8002618:	00db      	lsls	r3, r3, #3
 800261a:	4413      	add	r3, r2
 800261c:	009b      	lsls	r3, r3, #2
 800261e:	440b      	add	r3, r1
 8002620:	334c      	adds	r3, #76	; 0x4c
 8002622:	2200      	movs	r2, #0
 8002624:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002626:	7bfa      	ldrb	r2, [r7, #15]
 8002628:	6879      	ldr	r1, [r7, #4]
 800262a:	4613      	mov	r3, r2
 800262c:	00db      	lsls	r3, r3, #3
 800262e:	4413      	add	r3, r2
 8002630:	009b      	lsls	r3, r3, #2
 8002632:	440b      	add	r3, r1
 8002634:	3354      	adds	r3, #84	; 0x54
 8002636:	2200      	movs	r2, #0
 8002638:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800263a:	7bfb      	ldrb	r3, [r7, #15]
 800263c:	3301      	adds	r3, #1
 800263e:	73fb      	strb	r3, [r7, #15]
 8002640:	7bfa      	ldrb	r2, [r7, #15]
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	429a      	cmp	r2, r3
 8002648:	d3af      	bcc.n	80025aa <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800264a:	2300      	movs	r3, #0
 800264c:	73fb      	strb	r3, [r7, #15]
 800264e:	e044      	b.n	80026da <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002650:	7bfa      	ldrb	r2, [r7, #15]
 8002652:	6879      	ldr	r1, [r7, #4]
 8002654:	4613      	mov	r3, r2
 8002656:	00db      	lsls	r3, r3, #3
 8002658:	4413      	add	r3, r2
 800265a:	009b      	lsls	r3, r3, #2
 800265c:	440b      	add	r3, r1
 800265e:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002662:	2200      	movs	r2, #0
 8002664:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002666:	7bfa      	ldrb	r2, [r7, #15]
 8002668:	6879      	ldr	r1, [r7, #4]
 800266a:	4613      	mov	r3, r2
 800266c:	00db      	lsls	r3, r3, #3
 800266e:	4413      	add	r3, r2
 8002670:	009b      	lsls	r3, r3, #2
 8002672:	440b      	add	r3, r1
 8002674:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002678:	7bfa      	ldrb	r2, [r7, #15]
 800267a:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800267c:	7bfa      	ldrb	r2, [r7, #15]
 800267e:	6879      	ldr	r1, [r7, #4]
 8002680:	4613      	mov	r3, r2
 8002682:	00db      	lsls	r3, r3, #3
 8002684:	4413      	add	r3, r2
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	440b      	add	r3, r1
 800268a:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800268e:	2200      	movs	r2, #0
 8002690:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002692:	7bfa      	ldrb	r2, [r7, #15]
 8002694:	6879      	ldr	r1, [r7, #4]
 8002696:	4613      	mov	r3, r2
 8002698:	00db      	lsls	r3, r3, #3
 800269a:	4413      	add	r3, r2
 800269c:	009b      	lsls	r3, r3, #2
 800269e:	440b      	add	r3, r1
 80026a0:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80026a4:	2200      	movs	r2, #0
 80026a6:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026a8:	7bfa      	ldrb	r2, [r7, #15]
 80026aa:	6879      	ldr	r1, [r7, #4]
 80026ac:	4613      	mov	r3, r2
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	4413      	add	r3, r2
 80026b2:	009b      	lsls	r3, r3, #2
 80026b4:	440b      	add	r3, r1
 80026b6:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80026ba:	2200      	movs	r2, #0
 80026bc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026be:	7bfa      	ldrb	r2, [r7, #15]
 80026c0:	6879      	ldr	r1, [r7, #4]
 80026c2:	4613      	mov	r3, r2
 80026c4:	00db      	lsls	r3, r3, #3
 80026c6:	4413      	add	r3, r2
 80026c8:	009b      	lsls	r3, r3, #2
 80026ca:	440b      	add	r3, r1
 80026cc:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80026d0:	2200      	movs	r2, #0
 80026d2:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026d4:	7bfb      	ldrb	r3, [r7, #15]
 80026d6:	3301      	adds	r3, #1
 80026d8:	73fb      	strb	r3, [r7, #15]
 80026da:	7bfa      	ldrb	r2, [r7, #15]
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	429a      	cmp	r2, r3
 80026e2:	d3b5      	bcc.n	8002650 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	603b      	str	r3, [r7, #0]
 80026ea:	687e      	ldr	r6, [r7, #4]
 80026ec:	466d      	mov	r5, sp
 80026ee:	f106 0410 	add.w	r4, r6, #16
 80026f2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026f6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80026f8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80026fa:	e894 0003 	ldmia.w	r4, {r0, r1}
 80026fe:	e885 0003 	stmia.w	r5, {r0, r1}
 8002702:	1d33      	adds	r3, r6, #4
 8002704:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002706:	6838      	ldr	r0, [r7, #0]
 8002708:	f001 ff06 	bl	8004518 <USB_DevInit>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d005      	beq.n	800271e <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2202      	movs	r2, #2
 8002716:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800271a:	2301      	movs	r3, #1
 800271c:	e00d      	b.n	800273a <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2200      	movs	r2, #0
 8002722:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	2201      	movs	r2, #1
 800272a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4618      	mov	r0, r3
 8002734:	f003 f855 	bl	80057e2 <USB_DevDisconnect>

  return HAL_OK;
 8002738:	2300      	movs	r3, #0
}
 800273a:	4618      	mov	r0, r3
 800273c:	3714      	adds	r7, #20
 800273e:	46bd      	mov	sp, r7
 8002740:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002742 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002742:	b580      	push	{r7, lr}
 8002744:	b084      	sub	sp, #16
 8002746:	af00      	add	r7, sp, #0
 8002748:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	681b      	ldr	r3, [r3, #0]
 800274e:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002756:	2b01      	cmp	r3, #1
 8002758:	d101      	bne.n	800275e <HAL_PCD_Start+0x1c>
 800275a:	2302      	movs	r3, #2
 800275c:	e020      	b.n	80027a0 <HAL_PCD_Start+0x5e>
 800275e:	687b      	ldr	r3, [r7, #4]
 8002760:	2201      	movs	r2, #1
 8002762:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800276a:	2b01      	cmp	r3, #1
 800276c:	d109      	bne.n	8002782 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002772:	2b01      	cmp	r3, #1
 8002774:	d005      	beq.n	8002782 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800277a:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800277e:	68fb      	ldr	r3, [r7, #12]
 8002780:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4618      	mov	r0, r3
 8002788:	f001 fe58 	bl	800443c <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f003 f805 	bl	80057a0 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2200      	movs	r2, #0
 800279a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800279e:	2300      	movs	r3, #0
}
 80027a0:	4618      	mov	r0, r3
 80027a2:	3710      	adds	r7, #16
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}

080027a8 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027a8:	b590      	push	{r4, r7, lr}
 80027aa:	b08d      	sub	sp, #52	; 0x34
 80027ac:	af00      	add	r7, sp, #0
 80027ae:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027b6:	6a3b      	ldr	r3, [r7, #32]
 80027b8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	4618      	mov	r0, r3
 80027c0:	f003 f8c3 	bl	800594a <USB_GetMode>
 80027c4:	4603      	mov	r3, r0
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 848a 	bne.w	80030e0 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f003 f827 	bl	8005824 <USB_ReadInterrupts>
 80027d6:	4603      	mov	r3, r0
 80027d8:	2b00      	cmp	r3, #0
 80027da:	f000 8480 	beq.w	80030de <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80027de:	69fb      	ldr	r3, [r7, #28]
 80027e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027e4:	689b      	ldr	r3, [r3, #8]
 80027e6:	0a1b      	lsrs	r3, r3, #8
 80027e8:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	4618      	mov	r0, r3
 80027f8:	f003 f814 	bl	8005824 <USB_ReadInterrupts>
 80027fc:	4603      	mov	r3, r0
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b02      	cmp	r3, #2
 8002804:	d107      	bne.n	8002816 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	695a      	ldr	r2, [r3, #20]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f002 0202 	and.w	r2, r2, #2
 8002814:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	4618      	mov	r0, r3
 800281c:	f003 f802 	bl	8005824 <USB_ReadInterrupts>
 8002820:	4603      	mov	r3, r0
 8002822:	f003 0310 	and.w	r3, r3, #16
 8002826:	2b10      	cmp	r3, #16
 8002828:	d161      	bne.n	80028ee <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	699a      	ldr	r2, [r3, #24]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f022 0210 	bic.w	r2, r2, #16
 8002838:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 800283a:	6a3b      	ldr	r3, [r7, #32]
 800283c:	6a1b      	ldr	r3, [r3, #32]
 800283e:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002840:	69bb      	ldr	r3, [r7, #24]
 8002842:	f003 020f 	and.w	r2, r3, #15
 8002846:	4613      	mov	r3, r2
 8002848:	00db      	lsls	r3, r3, #3
 800284a:	4413      	add	r3, r2
 800284c:	009b      	lsls	r3, r3, #2
 800284e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002852:	687a      	ldr	r2, [r7, #4]
 8002854:	4413      	add	r3, r2
 8002856:	3304      	adds	r3, #4
 8002858:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 800285a:	69bb      	ldr	r3, [r7, #24]
 800285c:	0c5b      	lsrs	r3, r3, #17
 800285e:	f003 030f 	and.w	r3, r3, #15
 8002862:	2b02      	cmp	r3, #2
 8002864:	d124      	bne.n	80028b0 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002866:	69ba      	ldr	r2, [r7, #24]
 8002868:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800286c:	4013      	ands	r3, r2
 800286e:	2b00      	cmp	r3, #0
 8002870:	d035      	beq.n	80028de <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002872:	697b      	ldr	r3, [r7, #20]
 8002874:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002876:	69bb      	ldr	r3, [r7, #24]
 8002878:	091b      	lsrs	r3, r3, #4
 800287a:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800287c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002880:	b29b      	uxth	r3, r3
 8002882:	461a      	mov	r2, r3
 8002884:	6a38      	ldr	r0, [r7, #32]
 8002886:	f002 fe39 	bl	80054fc <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800288a:	697b      	ldr	r3, [r7, #20]
 800288c:	691a      	ldr	r2, [r3, #16]
 800288e:	69bb      	ldr	r3, [r7, #24]
 8002890:	091b      	lsrs	r3, r3, #4
 8002892:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002896:	441a      	add	r2, r3
 8002898:	697b      	ldr	r3, [r7, #20]
 800289a:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	6a1a      	ldr	r2, [r3, #32]
 80028a0:	69bb      	ldr	r3, [r7, #24]
 80028a2:	091b      	lsrs	r3, r3, #4
 80028a4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028a8:	441a      	add	r2, r3
 80028aa:	697b      	ldr	r3, [r7, #20]
 80028ac:	621a      	str	r2, [r3, #32]
 80028ae:	e016      	b.n	80028de <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80028b0:	69bb      	ldr	r3, [r7, #24]
 80028b2:	0c5b      	lsrs	r3, r3, #17
 80028b4:	f003 030f 	and.w	r3, r3, #15
 80028b8:	2b06      	cmp	r3, #6
 80028ba:	d110      	bne.n	80028de <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028bc:	687b      	ldr	r3, [r7, #4]
 80028be:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028c2:	2208      	movs	r2, #8
 80028c4:	4619      	mov	r1, r3
 80028c6:	6a38      	ldr	r0, [r7, #32]
 80028c8:	f002 fe18 	bl	80054fc <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028cc:	697b      	ldr	r3, [r7, #20]
 80028ce:	6a1a      	ldr	r2, [r3, #32]
 80028d0:	69bb      	ldr	r3, [r7, #24]
 80028d2:	091b      	lsrs	r3, r3, #4
 80028d4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028d8:	441a      	add	r2, r3
 80028da:	697b      	ldr	r3, [r7, #20]
 80028dc:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	699a      	ldr	r2, [r3, #24]
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	f042 0210 	orr.w	r2, r2, #16
 80028ec:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	4618      	mov	r0, r3
 80028f4:	f002 ff96 	bl	8005824 <USB_ReadInterrupts>
 80028f8:	4603      	mov	r3, r0
 80028fa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80028fe:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002902:	f040 80a7 	bne.w	8002a54 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002906:	2300      	movs	r3, #0
 8002908:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	681b      	ldr	r3, [r3, #0]
 800290e:	4618      	mov	r0, r3
 8002910:	f002 ff9b 	bl	800584a <USB_ReadDevAllOutEpInterrupt>
 8002914:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002916:	e099      	b.n	8002a4c <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002918:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	f000 808e 	beq.w	8002a40 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800292a:	b2d2      	uxtb	r2, r2
 800292c:	4611      	mov	r1, r2
 800292e:	4618      	mov	r0, r3
 8002930:	f002 ffbf 	bl	80058b2 <USB_ReadDevOutEPInterrupt>
 8002934:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002936:	693b      	ldr	r3, [r7, #16]
 8002938:	f003 0301 	and.w	r3, r3, #1
 800293c:	2b00      	cmp	r3, #0
 800293e:	d00c      	beq.n	800295a <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002942:	015a      	lsls	r2, r3, #5
 8002944:	69fb      	ldr	r3, [r7, #28]
 8002946:	4413      	add	r3, r2
 8002948:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800294c:	461a      	mov	r2, r3
 800294e:	2301      	movs	r3, #1
 8002950:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002952:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002954:	6878      	ldr	r0, [r7, #4]
 8002956:	f000 feab 	bl	80036b0 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 800295a:	693b      	ldr	r3, [r7, #16]
 800295c:	f003 0308 	and.w	r3, r3, #8
 8002960:	2b00      	cmp	r3, #0
 8002962:	d00c      	beq.n	800297e <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002964:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002966:	015a      	lsls	r2, r3, #5
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002970:	461a      	mov	r2, r3
 8002972:	2308      	movs	r3, #8
 8002974:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002976:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f000 ff81 	bl	8003880 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800297e:	693b      	ldr	r3, [r7, #16]
 8002980:	f003 0310 	and.w	r3, r3, #16
 8002984:	2b00      	cmp	r3, #0
 8002986:	d008      	beq.n	800299a <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800298a:	015a      	lsls	r2, r3, #5
 800298c:	69fb      	ldr	r3, [r7, #28]
 800298e:	4413      	add	r3, r2
 8002990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002994:	461a      	mov	r2, r3
 8002996:	2310      	movs	r3, #16
 8002998:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f003 0302 	and.w	r3, r3, #2
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d030      	beq.n	8002a06 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80029a4:	6a3b      	ldr	r3, [r7, #32]
 80029a6:	695b      	ldr	r3, [r3, #20]
 80029a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029ac:	2b80      	cmp	r3, #128	; 0x80
 80029ae:	d109      	bne.n	80029c4 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	69fa      	ldr	r2, [r7, #28]
 80029ba:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029c2:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80029c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029c6:	4613      	mov	r3, r2
 80029c8:	00db      	lsls	r3, r3, #3
 80029ca:	4413      	add	r3, r2
 80029cc:	009b      	lsls	r3, r3, #2
 80029ce:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029d2:	687a      	ldr	r2, [r7, #4]
 80029d4:	4413      	add	r3, r2
 80029d6:	3304      	adds	r3, #4
 80029d8:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029da:	697b      	ldr	r3, [r7, #20]
 80029dc:	78db      	ldrb	r3, [r3, #3]
 80029de:	2b01      	cmp	r3, #1
 80029e0:	d108      	bne.n	80029f4 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80029e2:	697b      	ldr	r3, [r7, #20]
 80029e4:	2200      	movs	r2, #0
 80029e6:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029ea:	b2db      	uxtb	r3, r3
 80029ec:	4619      	mov	r1, r3
 80029ee:	6878      	ldr	r0, [r7, #4]
 80029f0:	f004 ffa0 	bl	8007934 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	015a      	lsls	r2, r3, #5
 80029f8:	69fb      	ldr	r3, [r7, #28]
 80029fa:	4413      	add	r3, r2
 80029fc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a00:	461a      	mov	r2, r3
 8002a02:	2302      	movs	r3, #2
 8002a04:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a06:	693b      	ldr	r3, [r7, #16]
 8002a08:	f003 0320 	and.w	r3, r3, #32
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d008      	beq.n	8002a22 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a12:	015a      	lsls	r2, r3, #5
 8002a14:	69fb      	ldr	r3, [r7, #28]
 8002a16:	4413      	add	r3, r2
 8002a18:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a1c:	461a      	mov	r2, r3
 8002a1e:	2320      	movs	r3, #32
 8002a20:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a22:	693b      	ldr	r3, [r7, #16]
 8002a24:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d009      	beq.n	8002a40 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a2e:	015a      	lsls	r2, r3, #5
 8002a30:	69fb      	ldr	r3, [r7, #28]
 8002a32:	4413      	add	r3, r2
 8002a34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a38:	461a      	mov	r2, r3
 8002a3a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a3e:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a42:	3301      	adds	r3, #1
 8002a44:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a48:	085b      	lsrs	r3, r3, #1
 8002a4a:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a4c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	f47f af62 	bne.w	8002918 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	4618      	mov	r0, r3
 8002a5a:	f002 fee3 	bl	8005824 <USB_ReadInterrupts>
 8002a5e:	4603      	mov	r3, r0
 8002a60:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a64:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a68:	f040 80db 	bne.w	8002c22 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f002 ff04 	bl	800587e <USB_ReadDevAllInEpInterrupt>
 8002a76:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002a78:	2300      	movs	r3, #0
 8002a7a:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002a7c:	e0cd      	b.n	8002c1a <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a80:	f003 0301 	and.w	r3, r3, #1
 8002a84:	2b00      	cmp	r3, #0
 8002a86:	f000 80c2 	beq.w	8002c0e <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a90:	b2d2      	uxtb	r2, r2
 8002a92:	4611      	mov	r1, r2
 8002a94:	4618      	mov	r0, r3
 8002a96:	f002 ff2a 	bl	80058ee <USB_ReadDevInEPInterrupt>
 8002a9a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002a9c:	693b      	ldr	r3, [r7, #16]
 8002a9e:	f003 0301 	and.w	r3, r3, #1
 8002aa2:	2b00      	cmp	r3, #0
 8002aa4:	d057      	beq.n	8002b56 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002aa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002aa8:	f003 030f 	and.w	r3, r3, #15
 8002aac:	2201      	movs	r2, #1
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ab4:	69fb      	ldr	r3, [r7, #28]
 8002ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002aba:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002abc:	68fb      	ldr	r3, [r7, #12]
 8002abe:	43db      	mvns	r3, r3
 8002ac0:	69f9      	ldr	r1, [r7, #28]
 8002ac2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ac6:	4013      	ands	r3, r2
 8002ac8:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002acc:	015a      	lsls	r2, r3, #5
 8002ace:	69fb      	ldr	r3, [r7, #28]
 8002ad0:	4413      	add	r3, r2
 8002ad2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ad6:	461a      	mov	r2, r3
 8002ad8:	2301      	movs	r3, #1
 8002ada:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	691b      	ldr	r3, [r3, #16]
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d132      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002ae4:	6879      	ldr	r1, [r7, #4]
 8002ae6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ae8:	4613      	mov	r3, r2
 8002aea:	00db      	lsls	r3, r3, #3
 8002aec:	4413      	add	r3, r2
 8002aee:	009b      	lsls	r3, r3, #2
 8002af0:	440b      	add	r3, r1
 8002af2:	334c      	adds	r3, #76	; 0x4c
 8002af4:	6819      	ldr	r1, [r3, #0]
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002afa:	4613      	mov	r3, r2
 8002afc:	00db      	lsls	r3, r3, #3
 8002afe:	4413      	add	r3, r2
 8002b00:	009b      	lsls	r3, r3, #2
 8002b02:	4403      	add	r3, r0
 8002b04:	3348      	adds	r3, #72	; 0x48
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	4419      	add	r1, r3
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b0e:	4613      	mov	r3, r2
 8002b10:	00db      	lsls	r3, r3, #3
 8002b12:	4413      	add	r3, r2
 8002b14:	009b      	lsls	r3, r3, #2
 8002b16:	4403      	add	r3, r0
 8002b18:	334c      	adds	r3, #76	; 0x4c
 8002b1a:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d113      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x3a2>
 8002b22:	6879      	ldr	r1, [r7, #4]
 8002b24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b26:	4613      	mov	r3, r2
 8002b28:	00db      	lsls	r3, r3, #3
 8002b2a:	4413      	add	r3, r2
 8002b2c:	009b      	lsls	r3, r3, #2
 8002b2e:	440b      	add	r3, r1
 8002b30:	3354      	adds	r3, #84	; 0x54
 8002b32:	681b      	ldr	r3, [r3, #0]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d108      	bne.n	8002b4a <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	6818      	ldr	r0, [r3, #0]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b42:	461a      	mov	r2, r3
 8002b44:	2101      	movs	r1, #1
 8002b46:	f002 ff31 	bl	80059ac <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	4619      	mov	r1, r3
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f004 fe74 	bl	800783e <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	f003 0308 	and.w	r3, r3, #8
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d008      	beq.n	8002b72 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	015a      	lsls	r2, r3, #5
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	4413      	add	r3, r2
 8002b68:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b6c:	461a      	mov	r2, r3
 8002b6e:	2308      	movs	r3, #8
 8002b70:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b72:	693b      	ldr	r3, [r7, #16]
 8002b74:	f003 0310 	and.w	r3, r3, #16
 8002b78:	2b00      	cmp	r3, #0
 8002b7a:	d008      	beq.n	8002b8e <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b7c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b7e:	015a      	lsls	r2, r3, #5
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	4413      	add	r3, r2
 8002b84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b88:	461a      	mov	r2, r3
 8002b8a:	2310      	movs	r3, #16
 8002b8c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b8e:	693b      	ldr	r3, [r7, #16]
 8002b90:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b94:	2b00      	cmp	r3, #0
 8002b96:	d008      	beq.n	8002baa <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002b98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9a:	015a      	lsls	r2, r3, #5
 8002b9c:	69fb      	ldr	r3, [r7, #28]
 8002b9e:	4413      	add	r3, r2
 8002ba0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ba4:	461a      	mov	r2, r3
 8002ba6:	2340      	movs	r3, #64	; 0x40
 8002ba8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002baa:	693b      	ldr	r3, [r7, #16]
 8002bac:	f003 0302 	and.w	r3, r3, #2
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d023      	beq.n	8002bfc <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002bb4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bb6:	6a38      	ldr	r0, [r7, #32]
 8002bb8:	f001 fe12 	bl	80047e0 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002bbc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bbe:	4613      	mov	r3, r2
 8002bc0:	00db      	lsls	r3, r3, #3
 8002bc2:	4413      	add	r3, r2
 8002bc4:	009b      	lsls	r3, r3, #2
 8002bc6:	3338      	adds	r3, #56	; 0x38
 8002bc8:	687a      	ldr	r2, [r7, #4]
 8002bca:	4413      	add	r3, r2
 8002bcc:	3304      	adds	r3, #4
 8002bce:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bd0:	697b      	ldr	r3, [r7, #20]
 8002bd2:	78db      	ldrb	r3, [r3, #3]
 8002bd4:	2b01      	cmp	r3, #1
 8002bd6:	d108      	bne.n	8002bea <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002bd8:	697b      	ldr	r3, [r7, #20]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bde:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002be0:	b2db      	uxtb	r3, r3
 8002be2:	4619      	mov	r1, r3
 8002be4:	6878      	ldr	r0, [r7, #4]
 8002be6:	f004 feb7 	bl	8007958 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	015a      	lsls	r2, r3, #5
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	4413      	add	r3, r2
 8002bf2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bf6:	461a      	mov	r2, r3
 8002bf8:	2302      	movs	r3, #2
 8002bfa:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002bfc:	693b      	ldr	r3, [r7, #16]
 8002bfe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c02:	2b00      	cmp	r3, #0
 8002c04:	d003      	beq.n	8002c0e <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c06:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c08:	6878      	ldr	r0, [r7, #4]
 8002c0a:	f000 fcc3 	bl	8003594 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c10:	3301      	adds	r3, #1
 8002c12:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c16:	085b      	lsrs	r3, r3, #1
 8002c18:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c1a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	f47f af2e 	bne.w	8002a7e <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	4618      	mov	r0, r3
 8002c28:	f002 fdfc 	bl	8005824 <USB_ReadInterrupts>
 8002c2c:	4603      	mov	r3, r0
 8002c2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c36:	d122      	bne.n	8002c7e <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c3e:	685b      	ldr	r3, [r3, #4]
 8002c40:	69fa      	ldr	r2, [r7, #28]
 8002c42:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c46:	f023 0301 	bic.w	r3, r3, #1
 8002c4a:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002c52:	2b01      	cmp	r3, #1
 8002c54:	d108      	bne.n	8002c68 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2200      	movs	r2, #0
 8002c5a:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c5e:	2100      	movs	r1, #0
 8002c60:	6878      	ldr	r0, [r7, #4]
 8002c62:	f000 feab 	bl	80039bc <HAL_PCDEx_LPM_Callback>
 8002c66:	e002      	b.n	8002c6e <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f004 fe55 	bl	8007918 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	695a      	ldr	r2, [r3, #20]
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c7c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4618      	mov	r0, r3
 8002c84:	f002 fdce 	bl	8005824 <USB_ReadInterrupts>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c92:	d112      	bne.n	8002cba <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	f003 0301 	and.w	r3, r3, #1
 8002ca0:	2b01      	cmp	r3, #1
 8002ca2:	d102      	bne.n	8002caa <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002ca4:	6878      	ldr	r0, [r7, #4]
 8002ca6:	f004 fe11 	bl	80078cc <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	695a      	ldr	r2, [r3, #20]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002cb8:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f002 fdb0 	bl	8005824 <USB_ReadInterrupts>
 8002cc4:	4603      	mov	r3, r0
 8002cc6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cce:	f040 80b7 	bne.w	8002e40 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cd2:	69fb      	ldr	r3, [r7, #28]
 8002cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cd8:	685b      	ldr	r3, [r3, #4]
 8002cda:	69fa      	ldr	r2, [r7, #28]
 8002cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002ce0:	f023 0301 	bic.w	r3, r3, #1
 8002ce4:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	2110      	movs	r1, #16
 8002cec:	4618      	mov	r0, r3
 8002cee:	f001 fd77 	bl	80047e0 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002cf6:	e046      	b.n	8002d86 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002cf8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002cfa:	015a      	lsls	r2, r3, #5
 8002cfc:	69fb      	ldr	r3, [r7, #28]
 8002cfe:	4413      	add	r3, r2
 8002d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d04:	461a      	mov	r2, r3
 8002d06:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d0a:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d0e:	015a      	lsls	r2, r3, #5
 8002d10:	69fb      	ldr	r3, [r7, #28]
 8002d12:	4413      	add	r3, r2
 8002d14:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d1c:	0151      	lsls	r1, r2, #5
 8002d1e:	69fa      	ldr	r2, [r7, #28]
 8002d20:	440a      	add	r2, r1
 8002d22:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d26:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d2a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d2e:	015a      	lsls	r2, r3, #5
 8002d30:	69fb      	ldr	r3, [r7, #28]
 8002d32:	4413      	add	r3, r2
 8002d34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d38:	461a      	mov	r2, r3
 8002d3a:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d3e:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d42:	015a      	lsls	r2, r3, #5
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	4413      	add	r3, r2
 8002d48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d50:	0151      	lsls	r1, r2, #5
 8002d52:	69fa      	ldr	r2, [r7, #28]
 8002d54:	440a      	add	r2, r1
 8002d56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d5a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d5e:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d62:	015a      	lsls	r2, r3, #5
 8002d64:	69fb      	ldr	r3, [r7, #28]
 8002d66:	4413      	add	r3, r2
 8002d68:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d70:	0151      	lsls	r1, r2, #5
 8002d72:	69fa      	ldr	r2, [r7, #28]
 8002d74:	440a      	add	r2, r1
 8002d76:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d7a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d7e:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d80:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d82:	3301      	adds	r3, #1
 8002d84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	685b      	ldr	r3, [r3, #4]
 8002d8a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d8c:	429a      	cmp	r2, r3
 8002d8e:	d3b3      	bcc.n	8002cf8 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002d96:	69db      	ldr	r3, [r3, #28]
 8002d98:	69fa      	ldr	r2, [r7, #28]
 8002d9a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d9e:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002da2:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	d016      	beq.n	8002dda <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002dac:	69fb      	ldr	r3, [r7, #28]
 8002dae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002db2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002db6:	69fa      	ldr	r2, [r7, #28]
 8002db8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dbc:	f043 030b 	orr.w	r3, r3, #11
 8002dc0:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dcc:	69fa      	ldr	r2, [r7, #28]
 8002dce:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dd2:	f043 030b 	orr.w	r3, r3, #11
 8002dd6:	6453      	str	r3, [r2, #68]	; 0x44
 8002dd8:	e015      	b.n	8002e06 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002dda:	69fb      	ldr	r3, [r7, #28]
 8002ddc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002de0:	695b      	ldr	r3, [r3, #20]
 8002de2:	69fa      	ldr	r2, [r7, #28]
 8002de4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002de8:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002dec:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002df0:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	69fa      	ldr	r2, [r7, #28]
 8002dfc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e00:	f043 030b 	orr.w	r3, r3, #11
 8002e04:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e06:	69fb      	ldr	r3, [r7, #28]
 8002e08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	69fa      	ldr	r2, [r7, #28]
 8002e10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e14:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e18:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	6818      	ldr	r0, [r3, #0]
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	691b      	ldr	r3, [r3, #16]
 8002e22:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e2a:	461a      	mov	r2, r3
 8002e2c:	f002 fdbe 	bl	80059ac <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	695a      	ldr	r2, [r3, #20]
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e3e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	4618      	mov	r0, r3
 8002e46:	f002 fced 	bl	8005824 <USB_ReadInterrupts>
 8002e4a:	4603      	mov	r3, r0
 8002e4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e50:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e54:	d124      	bne.n	8002ea0 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	f002 fd83 	bl	8005966 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	681b      	ldr	r3, [r3, #0]
 8002e64:	4618      	mov	r0, r3
 8002e66:	f001 fd38 	bl	80048da <USB_GetDevSpeed>
 8002e6a:	4603      	mov	r3, r0
 8002e6c:	461a      	mov	r2, r3
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681c      	ldr	r4, [r3, #0]
 8002e76:	f001 f9d1 	bl	800421c <HAL_RCC_GetHCLKFreq>
 8002e7a:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e80:	b2db      	uxtb	r3, r3
 8002e82:	461a      	mov	r2, r3
 8002e84:	4620      	mov	r0, r4
 8002e86:	f001 fa37 	bl	80042f8 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e8a:	6878      	ldr	r0, [r7, #4]
 8002e8c:	f004 fcff 	bl	800788e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	695a      	ldr	r2, [r3, #20]
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002e9e:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	f002 fcbd 	bl	8005824 <USB_ReadInterrupts>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	f003 0308 	and.w	r3, r3, #8
 8002eb0:	2b08      	cmp	r3, #8
 8002eb2:	d10a      	bne.n	8002eca <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002eb4:	6878      	ldr	r0, [r7, #4]
 8002eb6:	f004 fcdc 	bl	8007872 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	695a      	ldr	r2, [r3, #20]
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f002 0208 	and.w	r2, r2, #8
 8002ec8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	681b      	ldr	r3, [r3, #0]
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f002 fca8 	bl	8005824 <USB_ReadInterrupts>
 8002ed4:	4603      	mov	r3, r0
 8002ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002eda:	2b80      	cmp	r3, #128	; 0x80
 8002edc:	d122      	bne.n	8002f24 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002ede:	6a3b      	ldr	r3, [r7, #32]
 8002ee0:	699b      	ldr	r3, [r3, #24]
 8002ee2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ee6:	6a3b      	ldr	r3, [r7, #32]
 8002ee8:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002eea:	2301      	movs	r3, #1
 8002eec:	627b      	str	r3, [r7, #36]	; 0x24
 8002eee:	e014      	b.n	8002f1a <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002ef0:	6879      	ldr	r1, [r7, #4]
 8002ef2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ef4:	4613      	mov	r3, r2
 8002ef6:	00db      	lsls	r3, r3, #3
 8002ef8:	4413      	add	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	440b      	add	r3, r1
 8002efe:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f02:	781b      	ldrb	r3, [r3, #0]
 8002f04:	2b01      	cmp	r3, #1
 8002f06:	d105      	bne.n	8002f14 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f0a:	b2db      	uxtb	r3, r3
 8002f0c:	4619      	mov	r1, r3
 8002f0e:	6878      	ldr	r0, [r7, #4]
 8002f10:	f000 fb0f 	bl	8003532 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	3301      	adds	r3, #1
 8002f18:	627b      	str	r3, [r7, #36]	; 0x24
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f20:	429a      	cmp	r2, r3
 8002f22:	d3e5      	bcc.n	8002ef0 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	4618      	mov	r0, r3
 8002f2a:	f002 fc7b 	bl	8005824 <USB_ReadInterrupts>
 8002f2e:	4603      	mov	r3, r0
 8002f30:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f38:	d13b      	bne.n	8002fb2 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002f3e:	e02b      	b.n	8002f98 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f42:	015a      	lsls	r2, r3, #5
 8002f44:	69fb      	ldr	r3, [r7, #28]
 8002f46:	4413      	add	r3, r2
 8002f48:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f50:	6879      	ldr	r1, [r7, #4]
 8002f52:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f54:	4613      	mov	r3, r2
 8002f56:	00db      	lsls	r3, r3, #3
 8002f58:	4413      	add	r3, r2
 8002f5a:	009b      	lsls	r3, r3, #2
 8002f5c:	440b      	add	r3, r1
 8002f5e:	3340      	adds	r3, #64	; 0x40
 8002f60:	781b      	ldrb	r3, [r3, #0]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d115      	bne.n	8002f92 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f66:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	da12      	bge.n	8002f92 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f6c:	6879      	ldr	r1, [r7, #4]
 8002f6e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f70:	4613      	mov	r3, r2
 8002f72:	00db      	lsls	r3, r3, #3
 8002f74:	4413      	add	r3, r2
 8002f76:	009b      	lsls	r3, r3, #2
 8002f78:	440b      	add	r3, r1
 8002f7a:	333f      	adds	r3, #63	; 0x3f
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f82:	b2db      	uxtb	r3, r3
 8002f84:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f88:	b2db      	uxtb	r3, r3
 8002f8a:	4619      	mov	r1, r3
 8002f8c:	6878      	ldr	r0, [r7, #4]
 8002f8e:	f000 fad0 	bl	8003532 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f94:	3301      	adds	r3, #1
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	d3ce      	bcc.n	8002f40 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	695a      	ldr	r2, [r3, #20]
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002fb0:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f002 fc34 	bl	8005824 <USB_ReadInterrupts>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fc2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fc6:	d155      	bne.n	8003074 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fc8:	2301      	movs	r3, #1
 8002fca:	627b      	str	r3, [r7, #36]	; 0x24
 8002fcc:	e045      	b.n	800305a <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002fce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fd0:	015a      	lsls	r2, r3, #5
 8002fd2:	69fb      	ldr	r3, [r7, #28]
 8002fd4:	4413      	add	r3, r2
 8002fd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fde:	6879      	ldr	r1, [r7, #4]
 8002fe0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fe2:	4613      	mov	r3, r2
 8002fe4:	00db      	lsls	r3, r3, #3
 8002fe6:	4413      	add	r3, r2
 8002fe8:	009b      	lsls	r3, r3, #2
 8002fea:	440b      	add	r3, r1
 8002fec:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ff0:	781b      	ldrb	r3, [r3, #0]
 8002ff2:	2b01      	cmp	r3, #1
 8002ff4:	d12e      	bne.n	8003054 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002ff6:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	da2b      	bge.n	8003054 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002ffc:	69bb      	ldr	r3, [r7, #24]
 8002ffe:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003008:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800300c:	429a      	cmp	r2, r3
 800300e:	d121      	bne.n	8003054 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003010:	6879      	ldr	r1, [r7, #4]
 8003012:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003014:	4613      	mov	r3, r2
 8003016:	00db      	lsls	r3, r3, #3
 8003018:	4413      	add	r3, r2
 800301a:	009b      	lsls	r3, r3, #2
 800301c:	440b      	add	r3, r1
 800301e:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8003022:	2201      	movs	r2, #1
 8003024:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003026:	6a3b      	ldr	r3, [r7, #32]
 8003028:	699b      	ldr	r3, [r3, #24]
 800302a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800302e:	6a3b      	ldr	r3, [r7, #32]
 8003030:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	695b      	ldr	r3, [r3, #20]
 8003036:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800303a:	2b00      	cmp	r3, #0
 800303c:	d10a      	bne.n	8003054 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800303e:	69fb      	ldr	r3, [r7, #28]
 8003040:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	69fa      	ldr	r2, [r7, #28]
 8003048:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800304c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003050:	6053      	str	r3, [r2, #4]
            break;
 8003052:	e007      	b.n	8003064 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003054:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003056:	3301      	adds	r3, #1
 8003058:	627b      	str	r3, [r7, #36]	; 0x24
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	685b      	ldr	r3, [r3, #4]
 800305e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003060:	429a      	cmp	r2, r3
 8003062:	d3b4      	bcc.n	8002fce <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	695a      	ldr	r2, [r3, #20]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8003072:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	4618      	mov	r0, r3
 800307a:	f002 fbd3 	bl	8005824 <USB_ReadInterrupts>
 800307e:	4603      	mov	r3, r0
 8003080:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003084:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003088:	d10a      	bne.n	80030a0 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f004 fc76 	bl	800797c <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	695a      	ldr	r2, [r3, #20]
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 800309e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	4618      	mov	r0, r3
 80030a6:	f002 fbbd 	bl	8005824 <USB_ReadInterrupts>
 80030aa:	4603      	mov	r3, r0
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d115      	bne.n	80030e0 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	685b      	ldr	r3, [r3, #4]
 80030ba:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030bc:	69bb      	ldr	r3, [r7, #24]
 80030be:	f003 0304 	and.w	r3, r3, #4
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d002      	beq.n	80030cc <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f004 fc66 	bl	8007998 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	6859      	ldr	r1, [r3, #4]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	69ba      	ldr	r2, [r7, #24]
 80030d8:	430a      	orrs	r2, r1
 80030da:	605a      	str	r2, [r3, #4]
 80030dc:	e000      	b.n	80030e0 <HAL_PCD_IRQHandler+0x938>
      return;
 80030de:	bf00      	nop
    }
  }
}
 80030e0:	3734      	adds	r7, #52	; 0x34
 80030e2:	46bd      	mov	sp, r7
 80030e4:	bd90      	pop	{r4, r7, pc}

080030e6 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030e6:	b580      	push	{r7, lr}
 80030e8:	b082      	sub	sp, #8
 80030ea:	af00      	add	r7, sp, #0
 80030ec:	6078      	str	r0, [r7, #4]
 80030ee:	460b      	mov	r3, r1
 80030f0:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d101      	bne.n	8003100 <HAL_PCD_SetAddress+0x1a>
 80030fc:	2302      	movs	r3, #2
 80030fe:	e013      	b.n	8003128 <HAL_PCD_SetAddress+0x42>
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	2201      	movs	r2, #1
 8003104:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	78fa      	ldrb	r2, [r7, #3]
 800310c:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	78fa      	ldrb	r2, [r7, #3]
 8003116:	4611      	mov	r1, r2
 8003118:	4618      	mov	r0, r3
 800311a:	f002 fb1b 	bl	8005754 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	2200      	movs	r2, #0
 8003122:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003126:	2300      	movs	r3, #0
}
 8003128:	4618      	mov	r0, r3
 800312a:	3708      	adds	r7, #8
 800312c:	46bd      	mov	sp, r7
 800312e:	bd80      	pop	{r7, pc}

08003130 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b084      	sub	sp, #16
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
 8003138:	4608      	mov	r0, r1
 800313a:	4611      	mov	r1, r2
 800313c:	461a      	mov	r2, r3
 800313e:	4603      	mov	r3, r0
 8003140:	70fb      	strb	r3, [r7, #3]
 8003142:	460b      	mov	r3, r1
 8003144:	803b      	strh	r3, [r7, #0]
 8003146:	4613      	mov	r3, r2
 8003148:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 800314a:	2300      	movs	r3, #0
 800314c:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800314e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003152:	2b00      	cmp	r3, #0
 8003154:	da0f      	bge.n	8003176 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003156:	78fb      	ldrb	r3, [r7, #3]
 8003158:	f003 020f 	and.w	r2, r3, #15
 800315c:	4613      	mov	r3, r2
 800315e:	00db      	lsls	r3, r3, #3
 8003160:	4413      	add	r3, r2
 8003162:	009b      	lsls	r3, r3, #2
 8003164:	3338      	adds	r3, #56	; 0x38
 8003166:	687a      	ldr	r2, [r7, #4]
 8003168:	4413      	add	r3, r2
 800316a:	3304      	adds	r3, #4
 800316c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2201      	movs	r2, #1
 8003172:	705a      	strb	r2, [r3, #1]
 8003174:	e00f      	b.n	8003196 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003176:	78fb      	ldrb	r3, [r7, #3]
 8003178:	f003 020f 	and.w	r2, r3, #15
 800317c:	4613      	mov	r3, r2
 800317e:	00db      	lsls	r3, r3, #3
 8003180:	4413      	add	r3, r2
 8003182:	009b      	lsls	r3, r3, #2
 8003184:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003188:	687a      	ldr	r2, [r7, #4]
 800318a:	4413      	add	r3, r2
 800318c:	3304      	adds	r3, #4
 800318e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8003196:	78fb      	ldrb	r3, [r7, #3]
 8003198:	f003 030f 	and.w	r3, r3, #15
 800319c:	b2da      	uxtb	r2, r3
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031a2:	883a      	ldrh	r2, [r7, #0]
 80031a4:	68fb      	ldr	r3, [r7, #12]
 80031a6:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	78ba      	ldrb	r2, [r7, #2]
 80031ac:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80031ae:	68fb      	ldr	r3, [r7, #12]
 80031b0:	785b      	ldrb	r3, [r3, #1]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d004      	beq.n	80031c0 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031b6:	68fb      	ldr	r3, [r7, #12]
 80031b8:	781b      	ldrb	r3, [r3, #0]
 80031ba:	b29a      	uxth	r2, r3
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031c0:	78bb      	ldrb	r3, [r7, #2]
 80031c2:	2b02      	cmp	r3, #2
 80031c4:	d102      	bne.n	80031cc <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031d2:	2b01      	cmp	r3, #1
 80031d4:	d101      	bne.n	80031da <HAL_PCD_EP_Open+0xaa>
 80031d6:	2302      	movs	r3, #2
 80031d8:	e00e      	b.n	80031f8 <HAL_PCD_EP_Open+0xc8>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	2201      	movs	r2, #1
 80031de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	681b      	ldr	r3, [r3, #0]
 80031e6:	68f9      	ldr	r1, [r7, #12]
 80031e8:	4618      	mov	r0, r3
 80031ea:	f001 fb9b 	bl	8004924 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	2200      	movs	r2, #0
 80031f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80031f6:	7afb      	ldrb	r3, [r7, #11]
}
 80031f8:	4618      	mov	r0, r3
 80031fa:	3710      	adds	r7, #16
 80031fc:	46bd      	mov	sp, r7
 80031fe:	bd80      	pop	{r7, pc}

08003200 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b084      	sub	sp, #16
 8003204:	af00      	add	r7, sp, #0
 8003206:	6078      	str	r0, [r7, #4]
 8003208:	460b      	mov	r3, r1
 800320a:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800320c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003210:	2b00      	cmp	r3, #0
 8003212:	da0f      	bge.n	8003234 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003214:	78fb      	ldrb	r3, [r7, #3]
 8003216:	f003 020f 	and.w	r2, r3, #15
 800321a:	4613      	mov	r3, r2
 800321c:	00db      	lsls	r3, r3, #3
 800321e:	4413      	add	r3, r2
 8003220:	009b      	lsls	r3, r3, #2
 8003222:	3338      	adds	r3, #56	; 0x38
 8003224:	687a      	ldr	r2, [r7, #4]
 8003226:	4413      	add	r3, r2
 8003228:	3304      	adds	r3, #4
 800322a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800322c:	68fb      	ldr	r3, [r7, #12]
 800322e:	2201      	movs	r2, #1
 8003230:	705a      	strb	r2, [r3, #1]
 8003232:	e00f      	b.n	8003254 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003234:	78fb      	ldrb	r3, [r7, #3]
 8003236:	f003 020f 	and.w	r2, r3, #15
 800323a:	4613      	mov	r3, r2
 800323c:	00db      	lsls	r3, r3, #3
 800323e:	4413      	add	r3, r2
 8003240:	009b      	lsls	r3, r3, #2
 8003242:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003246:	687a      	ldr	r2, [r7, #4]
 8003248:	4413      	add	r3, r2
 800324a:	3304      	adds	r3, #4
 800324c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	2200      	movs	r2, #0
 8003252:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003254:	78fb      	ldrb	r3, [r7, #3]
 8003256:	f003 030f 	and.w	r3, r3, #15
 800325a:	b2da      	uxtb	r2, r3
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003266:	2b01      	cmp	r3, #1
 8003268:	d101      	bne.n	800326e <HAL_PCD_EP_Close+0x6e>
 800326a:	2302      	movs	r3, #2
 800326c:	e00e      	b.n	800328c <HAL_PCD_EP_Close+0x8c>
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	2201      	movs	r2, #1
 8003272:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	68f9      	ldr	r1, [r7, #12]
 800327c:	4618      	mov	r0, r3
 800327e:	f001 fbd9 	bl	8004a34 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	2200      	movs	r2, #0
 8003286:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 800328a:	2300      	movs	r3, #0
}
 800328c:	4618      	mov	r0, r3
 800328e:	3710      	adds	r7, #16
 8003290:	46bd      	mov	sp, r7
 8003292:	bd80      	pop	{r7, pc}

08003294 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003294:	b580      	push	{r7, lr}
 8003296:	b086      	sub	sp, #24
 8003298:	af00      	add	r7, sp, #0
 800329a:	60f8      	str	r0, [r7, #12]
 800329c:	607a      	str	r2, [r7, #4]
 800329e:	603b      	str	r3, [r7, #0]
 80032a0:	460b      	mov	r3, r1
 80032a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032a4:	7afb      	ldrb	r3, [r7, #11]
 80032a6:	f003 020f 	and.w	r2, r3, #15
 80032aa:	4613      	mov	r3, r2
 80032ac:	00db      	lsls	r3, r3, #3
 80032ae:	4413      	add	r3, r2
 80032b0:	009b      	lsls	r3, r3, #2
 80032b2:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032b6:	68fa      	ldr	r2, [r7, #12]
 80032b8:	4413      	add	r3, r2
 80032ba:	3304      	adds	r3, #4
 80032bc:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	687a      	ldr	r2, [r7, #4]
 80032c2:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80032c4:	697b      	ldr	r3, [r7, #20]
 80032c6:	683a      	ldr	r2, [r7, #0]
 80032c8:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	2200      	movs	r2, #0
 80032ce:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	2200      	movs	r2, #0
 80032d4:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032d6:	7afb      	ldrb	r3, [r7, #11]
 80032d8:	f003 030f 	and.w	r3, r3, #15
 80032dc:	b2da      	uxtb	r2, r3
 80032de:	697b      	ldr	r3, [r7, #20]
 80032e0:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	691b      	ldr	r3, [r3, #16]
 80032e6:	2b01      	cmp	r3, #1
 80032e8:	d102      	bne.n	80032f0 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032ea:	687a      	ldr	r2, [r7, #4]
 80032ec:	697b      	ldr	r3, [r7, #20]
 80032ee:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032f0:	7afb      	ldrb	r3, [r7, #11]
 80032f2:	f003 030f 	and.w	r3, r3, #15
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d109      	bne.n	800330e <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	6818      	ldr	r0, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	691b      	ldr	r3, [r3, #16]
 8003302:	b2db      	uxtb	r3, r3
 8003304:	461a      	mov	r2, r3
 8003306:	6979      	ldr	r1, [r7, #20]
 8003308:	f001 feb8 	bl	800507c <USB_EP0StartXfer>
 800330c:	e008      	b.n	8003320 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6818      	ldr	r0, [r3, #0]
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	b2db      	uxtb	r3, r3
 8003318:	461a      	mov	r2, r3
 800331a:	6979      	ldr	r1, [r7, #20]
 800331c:	f001 fc66 	bl	8004bec <USB_EPStartXfer>
  }

  return HAL_OK;
 8003320:	2300      	movs	r3, #0
}
 8003322:	4618      	mov	r0, r3
 8003324:	3718      	adds	r7, #24
 8003326:	46bd      	mov	sp, r7
 8003328:	bd80      	pop	{r7, pc}

0800332a <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800332a:	b580      	push	{r7, lr}
 800332c:	b086      	sub	sp, #24
 800332e:	af00      	add	r7, sp, #0
 8003330:	60f8      	str	r0, [r7, #12]
 8003332:	607a      	str	r2, [r7, #4]
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	460b      	mov	r3, r1
 8003338:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800333a:	7afb      	ldrb	r3, [r7, #11]
 800333c:	f003 020f 	and.w	r2, r3, #15
 8003340:	4613      	mov	r3, r2
 8003342:	00db      	lsls	r3, r3, #3
 8003344:	4413      	add	r3, r2
 8003346:	009b      	lsls	r3, r3, #2
 8003348:	3338      	adds	r3, #56	; 0x38
 800334a:	68fa      	ldr	r2, [r7, #12]
 800334c:	4413      	add	r3, r2
 800334e:	3304      	adds	r3, #4
 8003350:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003352:	697b      	ldr	r3, [r7, #20]
 8003354:	687a      	ldr	r2, [r7, #4]
 8003356:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003358:	697b      	ldr	r3, [r7, #20]
 800335a:	683a      	ldr	r2, [r7, #0]
 800335c:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	2200      	movs	r2, #0
 8003362:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	2201      	movs	r2, #1
 8003368:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800336a:	7afb      	ldrb	r3, [r7, #11]
 800336c:	f003 030f 	and.w	r3, r3, #15
 8003370:	b2da      	uxtb	r2, r3
 8003372:	697b      	ldr	r3, [r7, #20]
 8003374:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	691b      	ldr	r3, [r3, #16]
 800337a:	2b01      	cmp	r3, #1
 800337c:	d102      	bne.n	8003384 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800337e:	687a      	ldr	r2, [r7, #4]
 8003380:	697b      	ldr	r3, [r7, #20]
 8003382:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003384:	7afb      	ldrb	r3, [r7, #11]
 8003386:	f003 030f 	and.w	r3, r3, #15
 800338a:	2b00      	cmp	r3, #0
 800338c:	d109      	bne.n	80033a2 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6818      	ldr	r0, [r3, #0]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	691b      	ldr	r3, [r3, #16]
 8003396:	b2db      	uxtb	r3, r3
 8003398:	461a      	mov	r2, r3
 800339a:	6979      	ldr	r1, [r7, #20]
 800339c:	f001 fe6e 	bl	800507c <USB_EP0StartXfer>
 80033a0:	e008      	b.n	80033b4 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	691b      	ldr	r3, [r3, #16]
 80033aa:	b2db      	uxtb	r3, r3
 80033ac:	461a      	mov	r2, r3
 80033ae:	6979      	ldr	r1, [r7, #20]
 80033b0:	f001 fc1c 	bl	8004bec <USB_EPStartXfer>
  }

  return HAL_OK;
 80033b4:	2300      	movs	r3, #0
}
 80033b6:	4618      	mov	r0, r3
 80033b8:	3718      	adds	r7, #24
 80033ba:	46bd      	mov	sp, r7
 80033bc:	bd80      	pop	{r7, pc}

080033be <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033be:	b580      	push	{r7, lr}
 80033c0:	b084      	sub	sp, #16
 80033c2:	af00      	add	r7, sp, #0
 80033c4:	6078      	str	r0, [r7, #4]
 80033c6:	460b      	mov	r3, r1
 80033c8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033ca:	78fb      	ldrb	r3, [r7, #3]
 80033cc:	f003 020f 	and.w	r2, r3, #15
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	429a      	cmp	r2, r3
 80033d6:	d901      	bls.n	80033dc <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e050      	b.n	800347e <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033dc:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033e0:	2b00      	cmp	r3, #0
 80033e2:	da0f      	bge.n	8003404 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033e4:	78fb      	ldrb	r3, [r7, #3]
 80033e6:	f003 020f 	and.w	r2, r3, #15
 80033ea:	4613      	mov	r3, r2
 80033ec:	00db      	lsls	r3, r3, #3
 80033ee:	4413      	add	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	3338      	adds	r3, #56	; 0x38
 80033f4:	687a      	ldr	r2, [r7, #4]
 80033f6:	4413      	add	r3, r2
 80033f8:	3304      	adds	r3, #4
 80033fa:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	2201      	movs	r2, #1
 8003400:	705a      	strb	r2, [r3, #1]
 8003402:	e00d      	b.n	8003420 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003404:	78fa      	ldrb	r2, [r7, #3]
 8003406:	4613      	mov	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003412:	687a      	ldr	r2, [r7, #4]
 8003414:	4413      	add	r3, r2
 8003416:	3304      	adds	r3, #4
 8003418:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	2200      	movs	r2, #0
 800341e:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	2201      	movs	r2, #1
 8003424:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003426:	78fb      	ldrb	r3, [r7, #3]
 8003428:	f003 030f 	and.w	r3, r3, #15
 800342c:	b2da      	uxtb	r2, r3
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003438:	2b01      	cmp	r3, #1
 800343a:	d101      	bne.n	8003440 <HAL_PCD_EP_SetStall+0x82>
 800343c:	2302      	movs	r3, #2
 800343e:	e01e      	b.n	800347e <HAL_PCD_EP_SetStall+0xc0>
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	2201      	movs	r2, #1
 8003444:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	68f9      	ldr	r1, [r7, #12]
 800344e:	4618      	mov	r0, r3
 8003450:	f002 f8ac 	bl	80055ac <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003454:	78fb      	ldrb	r3, [r7, #3]
 8003456:	f003 030f 	and.w	r3, r3, #15
 800345a:	2b00      	cmp	r3, #0
 800345c:	d10a      	bne.n	8003474 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	6818      	ldr	r0, [r3, #0]
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	691b      	ldr	r3, [r3, #16]
 8003466:	b2d9      	uxtb	r1, r3
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800346e:	461a      	mov	r2, r3
 8003470:	f002 fa9c 	bl	80059ac <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2200      	movs	r2, #0
 8003478:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800347c:	2300      	movs	r3, #0
}
 800347e:	4618      	mov	r0, r3
 8003480:	3710      	adds	r7, #16
 8003482:	46bd      	mov	sp, r7
 8003484:	bd80      	pop	{r7, pc}

08003486 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003486:	b580      	push	{r7, lr}
 8003488:	b084      	sub	sp, #16
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	460b      	mov	r3, r1
 8003490:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003492:	78fb      	ldrb	r3, [r7, #3]
 8003494:	f003 020f 	and.w	r2, r3, #15
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	429a      	cmp	r2, r3
 800349e:	d901      	bls.n	80034a4 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034a0:	2301      	movs	r3, #1
 80034a2:	e042      	b.n	800352a <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	da0f      	bge.n	80034cc <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034ac:	78fb      	ldrb	r3, [r7, #3]
 80034ae:	f003 020f 	and.w	r2, r3, #15
 80034b2:	4613      	mov	r3, r2
 80034b4:	00db      	lsls	r3, r3, #3
 80034b6:	4413      	add	r3, r2
 80034b8:	009b      	lsls	r3, r3, #2
 80034ba:	3338      	adds	r3, #56	; 0x38
 80034bc:	687a      	ldr	r2, [r7, #4]
 80034be:	4413      	add	r3, r2
 80034c0:	3304      	adds	r3, #4
 80034c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	2201      	movs	r2, #1
 80034c8:	705a      	strb	r2, [r3, #1]
 80034ca:	e00f      	b.n	80034ec <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034cc:	78fb      	ldrb	r3, [r7, #3]
 80034ce:	f003 020f 	and.w	r2, r3, #15
 80034d2:	4613      	mov	r3, r2
 80034d4:	00db      	lsls	r3, r3, #3
 80034d6:	4413      	add	r3, r2
 80034d8:	009b      	lsls	r3, r3, #2
 80034da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034de:	687a      	ldr	r2, [r7, #4]
 80034e0:	4413      	add	r3, r2
 80034e2:	3304      	adds	r3, #4
 80034e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	2200      	movs	r2, #0
 80034ea:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	2200      	movs	r2, #0
 80034f0:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034f2:	78fb      	ldrb	r3, [r7, #3]
 80034f4:	f003 030f 	and.w	r3, r3, #15
 80034f8:	b2da      	uxtb	r2, r3
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003504:	2b01      	cmp	r3, #1
 8003506:	d101      	bne.n	800350c <HAL_PCD_EP_ClrStall+0x86>
 8003508:	2302      	movs	r3, #2
 800350a:	e00e      	b.n	800352a <HAL_PCD_EP_ClrStall+0xa4>
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	2201      	movs	r2, #1
 8003510:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	68f9      	ldr	r1, [r7, #12]
 800351a:	4618      	mov	r0, r3
 800351c:	f002 f8b4 	bl	8005688 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003528:	2300      	movs	r3, #0
}
 800352a:	4618      	mov	r0, r3
 800352c:	3710      	adds	r7, #16
 800352e:	46bd      	mov	sp, r7
 8003530:	bd80      	pop	{r7, pc}

08003532 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003532:	b580      	push	{r7, lr}
 8003534:	b084      	sub	sp, #16
 8003536:	af00      	add	r7, sp, #0
 8003538:	6078      	str	r0, [r7, #4]
 800353a:	460b      	mov	r3, r1
 800353c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800353e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003542:	2b00      	cmp	r3, #0
 8003544:	da0c      	bge.n	8003560 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003546:	78fb      	ldrb	r3, [r7, #3]
 8003548:	f003 020f 	and.w	r2, r3, #15
 800354c:	4613      	mov	r3, r2
 800354e:	00db      	lsls	r3, r3, #3
 8003550:	4413      	add	r3, r2
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	3338      	adds	r3, #56	; 0x38
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	4413      	add	r3, r2
 800355a:	3304      	adds	r3, #4
 800355c:	60fb      	str	r3, [r7, #12]
 800355e:	e00c      	b.n	800357a <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003560:	78fb      	ldrb	r3, [r7, #3]
 8003562:	f003 020f 	and.w	r2, r3, #15
 8003566:	4613      	mov	r3, r2
 8003568:	00db      	lsls	r3, r3, #3
 800356a:	4413      	add	r3, r2
 800356c:	009b      	lsls	r3, r3, #2
 800356e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003572:	687a      	ldr	r2, [r7, #4]
 8003574:	4413      	add	r3, r2
 8003576:	3304      	adds	r3, #4
 8003578:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	68f9      	ldr	r1, [r7, #12]
 8003580:	4618      	mov	r0, r3
 8003582:	f001 fed3 	bl	800532c <USB_EPStopXfer>
 8003586:	4603      	mov	r3, r0
 8003588:	72fb      	strb	r3, [r7, #11]

  return ret;
 800358a:	7afb      	ldrb	r3, [r7, #11]
}
 800358c:	4618      	mov	r0, r3
 800358e:	3710      	adds	r7, #16
 8003590:	46bd      	mov	sp, r7
 8003592:	bd80      	pop	{r7, pc}

08003594 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003594:	b580      	push	{r7, lr}
 8003596:	b08a      	sub	sp, #40	; 0x28
 8003598:	af02      	add	r7, sp, #8
 800359a:	6078      	str	r0, [r7, #4]
 800359c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035a4:	697b      	ldr	r3, [r7, #20]
 80035a6:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80035a8:	683a      	ldr	r2, [r7, #0]
 80035aa:	4613      	mov	r3, r2
 80035ac:	00db      	lsls	r3, r3, #3
 80035ae:	4413      	add	r3, r2
 80035b0:	009b      	lsls	r3, r3, #2
 80035b2:	3338      	adds	r3, #56	; 0x38
 80035b4:	687a      	ldr	r2, [r7, #4]
 80035b6:	4413      	add	r3, r2
 80035b8:	3304      	adds	r3, #4
 80035ba:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035bc:	68fb      	ldr	r3, [r7, #12]
 80035be:	6a1a      	ldr	r2, [r3, #32]
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	699b      	ldr	r3, [r3, #24]
 80035c4:	429a      	cmp	r2, r3
 80035c6:	d901      	bls.n	80035cc <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035c8:	2301      	movs	r3, #1
 80035ca:	e06c      	b.n	80036a6 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	699a      	ldr	r2, [r3, #24]
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	1ad3      	subs	r3, r2, r3
 80035d6:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	68db      	ldr	r3, [r3, #12]
 80035dc:	69fa      	ldr	r2, [r7, #28]
 80035de:	429a      	cmp	r2, r3
 80035e0:	d902      	bls.n	80035e8 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035e8:	69fb      	ldr	r3, [r7, #28]
 80035ea:	3303      	adds	r3, #3
 80035ec:	089b      	lsrs	r3, r3, #2
 80035ee:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035f0:	e02b      	b.n	800364a <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	699a      	ldr	r2, [r3, #24]
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	1ad3      	subs	r3, r2, r3
 80035fc:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	68db      	ldr	r3, [r3, #12]
 8003602:	69fa      	ldr	r2, [r7, #28]
 8003604:	429a      	cmp	r2, r3
 8003606:	d902      	bls.n	800360e <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003608:	68fb      	ldr	r3, [r7, #12]
 800360a:	68db      	ldr	r3, [r3, #12]
 800360c:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800360e:	69fb      	ldr	r3, [r7, #28]
 8003610:	3303      	adds	r3, #3
 8003612:	089b      	lsrs	r3, r3, #2
 8003614:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003616:	68fb      	ldr	r3, [r7, #12]
 8003618:	6919      	ldr	r1, [r3, #16]
 800361a:	683b      	ldr	r3, [r7, #0]
 800361c:	b2da      	uxtb	r2, r3
 800361e:	69fb      	ldr	r3, [r7, #28]
 8003620:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003626:	b2db      	uxtb	r3, r3
 8003628:	9300      	str	r3, [sp, #0]
 800362a:	4603      	mov	r3, r0
 800362c:	6978      	ldr	r0, [r7, #20]
 800362e:	f001 ff27 	bl	8005480 <USB_WritePacket>

    ep->xfer_buff  += len;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	691a      	ldr	r2, [r3, #16]
 8003636:	69fb      	ldr	r3, [r7, #28]
 8003638:	441a      	add	r2, r3
 800363a:	68fb      	ldr	r3, [r7, #12]
 800363c:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	6a1a      	ldr	r2, [r3, #32]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	441a      	add	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800364a:	683b      	ldr	r3, [r7, #0]
 800364c:	015a      	lsls	r2, r3, #5
 800364e:	693b      	ldr	r3, [r7, #16]
 8003650:	4413      	add	r3, r2
 8003652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003656:	699b      	ldr	r3, [r3, #24]
 8003658:	b29b      	uxth	r3, r3
 800365a:	69ba      	ldr	r2, [r7, #24]
 800365c:	429a      	cmp	r2, r3
 800365e:	d809      	bhi.n	8003674 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	6a1a      	ldr	r2, [r3, #32]
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003668:	429a      	cmp	r2, r3
 800366a:	d203      	bcs.n	8003674 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	699b      	ldr	r3, [r3, #24]
 8003670:	2b00      	cmp	r3, #0
 8003672:	d1be      	bne.n	80035f2 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	699a      	ldr	r2, [r3, #24]
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	429a      	cmp	r2, r3
 800367e:	d811      	bhi.n	80036a4 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	f003 030f 	and.w	r3, r3, #15
 8003686:	2201      	movs	r2, #1
 8003688:	fa02 f303 	lsl.w	r3, r2, r3
 800368c:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003694:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003696:	68bb      	ldr	r3, [r7, #8]
 8003698:	43db      	mvns	r3, r3
 800369a:	6939      	ldr	r1, [r7, #16]
 800369c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036a0:	4013      	ands	r3, r2
 80036a2:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80036a4:	2300      	movs	r3, #0
}
 80036a6:	4618      	mov	r0, r3
 80036a8:	3720      	adds	r7, #32
 80036aa:	46bd      	mov	sp, r7
 80036ac:	bd80      	pop	{r7, pc}
	...

080036b0 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036b0:	b580      	push	{r7, lr}
 80036b2:	b088      	sub	sp, #32
 80036b4:	af00      	add	r7, sp, #0
 80036b6:	6078      	str	r0, [r7, #4]
 80036b8:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036c0:	69fb      	ldr	r3, [r7, #28]
 80036c2:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036c4:	69fb      	ldr	r3, [r7, #28]
 80036c6:	333c      	adds	r3, #60	; 0x3c
 80036c8:	3304      	adds	r3, #4
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	015a      	lsls	r2, r3, #5
 80036d2:	69bb      	ldr	r3, [r7, #24]
 80036d4:	4413      	add	r3, r2
 80036d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	691b      	ldr	r3, [r3, #16]
 80036e2:	2b01      	cmp	r3, #1
 80036e4:	d17b      	bne.n	80037de <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f003 0308 	and.w	r3, r3, #8
 80036ec:	2b00      	cmp	r3, #0
 80036ee:	d015      	beq.n	800371c <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036f0:	697b      	ldr	r3, [r7, #20]
 80036f2:	4a61      	ldr	r2, [pc, #388]	; (8003878 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	f240 80b9 	bls.w	800386c <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003700:	2b00      	cmp	r3, #0
 8003702:	f000 80b3 	beq.w	800386c <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	015a      	lsls	r2, r3, #5
 800370a:	69bb      	ldr	r3, [r7, #24]
 800370c:	4413      	add	r3, r2
 800370e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003712:	461a      	mov	r2, r3
 8003714:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003718:	6093      	str	r3, [r2, #8]
 800371a:	e0a7      	b.n	800386c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 800371c:	693b      	ldr	r3, [r7, #16]
 800371e:	f003 0320 	and.w	r3, r3, #32
 8003722:	2b00      	cmp	r3, #0
 8003724:	d009      	beq.n	800373a <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003726:	683b      	ldr	r3, [r7, #0]
 8003728:	015a      	lsls	r2, r3, #5
 800372a:	69bb      	ldr	r3, [r7, #24]
 800372c:	4413      	add	r3, r2
 800372e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003732:	461a      	mov	r2, r3
 8003734:	2320      	movs	r3, #32
 8003736:	6093      	str	r3, [r2, #8]
 8003738:	e098      	b.n	800386c <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003740:	2b00      	cmp	r3, #0
 8003742:	f040 8093 	bne.w	800386c <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003746:	697b      	ldr	r3, [r7, #20]
 8003748:	4a4b      	ldr	r2, [pc, #300]	; (8003878 <PCD_EP_OutXfrComplete_int+0x1c8>)
 800374a:	4293      	cmp	r3, r2
 800374c:	d90f      	bls.n	800376e <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800374e:	693b      	ldr	r3, [r7, #16]
 8003750:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003754:	2b00      	cmp	r3, #0
 8003756:	d00a      	beq.n	800376e <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	015a      	lsls	r2, r3, #5
 800375c:	69bb      	ldr	r3, [r7, #24]
 800375e:	4413      	add	r3, r2
 8003760:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003764:	461a      	mov	r2, r3
 8003766:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800376a:	6093      	str	r3, [r2, #8]
 800376c:	e07e      	b.n	800386c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800376e:	683a      	ldr	r2, [r7, #0]
 8003770:	4613      	mov	r3, r2
 8003772:	00db      	lsls	r3, r3, #3
 8003774:	4413      	add	r3, r2
 8003776:	009b      	lsls	r3, r3, #2
 8003778:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800377c:	687a      	ldr	r2, [r7, #4]
 800377e:	4413      	add	r3, r2
 8003780:	3304      	adds	r3, #4
 8003782:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003784:	68fb      	ldr	r3, [r7, #12]
 8003786:	69da      	ldr	r2, [r3, #28]
 8003788:	683b      	ldr	r3, [r7, #0]
 800378a:	0159      	lsls	r1, r3, #5
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	440b      	add	r3, r1
 8003790:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003794:	691b      	ldr	r3, [r3, #16]
 8003796:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800379a:	1ad2      	subs	r2, r2, r3
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d114      	bne.n	80037d0 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	699b      	ldr	r3, [r3, #24]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d109      	bne.n	80037c2 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	6818      	ldr	r0, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037b8:	461a      	mov	r2, r3
 80037ba:	2101      	movs	r1, #1
 80037bc:	f002 f8f6 	bl	80059ac <USB_EP0_OutStart>
 80037c0:	e006      	b.n	80037d0 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	691a      	ldr	r2, [r3, #16]
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a1b      	ldr	r3, [r3, #32]
 80037ca:	441a      	add	r2, r3
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	b2db      	uxtb	r3, r3
 80037d4:	4619      	mov	r1, r3
 80037d6:	6878      	ldr	r0, [r7, #4]
 80037d8:	f004 f816 	bl	8007808 <HAL_PCD_DataOutStageCallback>
 80037dc:	e046      	b.n	800386c <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037de:	697b      	ldr	r3, [r7, #20]
 80037e0:	4a26      	ldr	r2, [pc, #152]	; (800387c <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037e2:	4293      	cmp	r3, r2
 80037e4:	d124      	bne.n	8003830 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037e6:	693b      	ldr	r3, [r7, #16]
 80037e8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037ec:	2b00      	cmp	r3, #0
 80037ee:	d00a      	beq.n	8003806 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037f0:	683b      	ldr	r3, [r7, #0]
 80037f2:	015a      	lsls	r2, r3, #5
 80037f4:	69bb      	ldr	r3, [r7, #24]
 80037f6:	4413      	add	r3, r2
 80037f8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037fc:	461a      	mov	r2, r3
 80037fe:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003802:	6093      	str	r3, [r2, #8]
 8003804:	e032      	b.n	800386c <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003806:	693b      	ldr	r3, [r7, #16]
 8003808:	f003 0320 	and.w	r3, r3, #32
 800380c:	2b00      	cmp	r3, #0
 800380e:	d008      	beq.n	8003822 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003810:	683b      	ldr	r3, [r7, #0]
 8003812:	015a      	lsls	r2, r3, #5
 8003814:	69bb      	ldr	r3, [r7, #24]
 8003816:	4413      	add	r3, r2
 8003818:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800381c:	461a      	mov	r2, r3
 800381e:	2320      	movs	r3, #32
 8003820:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	b2db      	uxtb	r3, r3
 8003826:	4619      	mov	r1, r3
 8003828:	6878      	ldr	r0, [r7, #4]
 800382a:	f003 ffed 	bl	8007808 <HAL_PCD_DataOutStageCallback>
 800382e:	e01d      	b.n	800386c <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003830:	683b      	ldr	r3, [r7, #0]
 8003832:	2b00      	cmp	r3, #0
 8003834:	d114      	bne.n	8003860 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003836:	6879      	ldr	r1, [r7, #4]
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	4613      	mov	r3, r2
 800383c:	00db      	lsls	r3, r3, #3
 800383e:	4413      	add	r3, r2
 8003840:	009b      	lsls	r3, r3, #2
 8003842:	440b      	add	r3, r1
 8003844:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	2b00      	cmp	r3, #0
 800384c:	d108      	bne.n	8003860 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	6818      	ldr	r0, [r3, #0]
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003858:	461a      	mov	r2, r3
 800385a:	2100      	movs	r1, #0
 800385c:	f002 f8a6 	bl	80059ac <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	b2db      	uxtb	r3, r3
 8003864:	4619      	mov	r1, r3
 8003866:	6878      	ldr	r0, [r7, #4]
 8003868:	f003 ffce 	bl	8007808 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 800386c:	2300      	movs	r3, #0
}
 800386e:	4618      	mov	r0, r3
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	4f54300a 	.word	0x4f54300a
 800387c:	4f54310a 	.word	0x4f54310a

08003880 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003880:	b580      	push	{r7, lr}
 8003882:	b086      	sub	sp, #24
 8003884:	af00      	add	r7, sp, #0
 8003886:	6078      	str	r0, [r7, #4]
 8003888:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003894:	697b      	ldr	r3, [r7, #20]
 8003896:	333c      	adds	r3, #60	; 0x3c
 8003898:	3304      	adds	r3, #4
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	015a      	lsls	r2, r3, #5
 80038a2:	693b      	ldr	r3, [r7, #16]
 80038a4:	4413      	add	r3, r2
 80038a6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	4a15      	ldr	r2, [pc, #84]	; (8003908 <PCD_EP_OutSetupPacket_int+0x88>)
 80038b2:	4293      	cmp	r3, r2
 80038b4:	d90e      	bls.n	80038d4 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038b6:	68bb      	ldr	r3, [r7, #8]
 80038b8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d009      	beq.n	80038d4 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	015a      	lsls	r2, r3, #5
 80038c4:	693b      	ldr	r3, [r7, #16]
 80038c6:	4413      	add	r3, r2
 80038c8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038cc:	461a      	mov	r2, r3
 80038ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038d2:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f003 ff85 	bl	80077e4 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	4a0a      	ldr	r2, [pc, #40]	; (8003908 <PCD_EP_OutSetupPacket_int+0x88>)
 80038de:	4293      	cmp	r3, r2
 80038e0:	d90c      	bls.n	80038fc <PCD_EP_OutSetupPacket_int+0x7c>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	691b      	ldr	r3, [r3, #16]
 80038e6:	2b01      	cmp	r3, #1
 80038e8:	d108      	bne.n	80038fc <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	6818      	ldr	r0, [r3, #0]
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80038f4:	461a      	mov	r2, r3
 80038f6:	2101      	movs	r1, #1
 80038f8:	f002 f858 	bl	80059ac <USB_EP0_OutStart>
  }

  return HAL_OK;
 80038fc:	2300      	movs	r3, #0
}
 80038fe:	4618      	mov	r0, r3
 8003900:	3718      	adds	r7, #24
 8003902:	46bd      	mov	sp, r7
 8003904:	bd80      	pop	{r7, pc}
 8003906:	bf00      	nop
 8003908:	4f54300a 	.word	0x4f54300a

0800390c <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 800390c:	b480      	push	{r7}
 800390e:	b085      	sub	sp, #20
 8003910:	af00      	add	r7, sp, #0
 8003912:	6078      	str	r0, [r7, #4]
 8003914:	460b      	mov	r3, r1
 8003916:	70fb      	strb	r3, [r7, #3]
 8003918:	4613      	mov	r3, r2
 800391a:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003922:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003924:	78fb      	ldrb	r3, [r7, #3]
 8003926:	2b00      	cmp	r3, #0
 8003928:	d107      	bne.n	800393a <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 800392a:	883b      	ldrh	r3, [r7, #0]
 800392c:	0419      	lsls	r1, r3, #16
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	68ba      	ldr	r2, [r7, #8]
 8003934:	430a      	orrs	r2, r1
 8003936:	629a      	str	r2, [r3, #40]	; 0x28
 8003938:	e028      	b.n	800398c <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003940:	0c1b      	lsrs	r3, r3, #16
 8003942:	68ba      	ldr	r2, [r7, #8]
 8003944:	4413      	add	r3, r2
 8003946:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003948:	2300      	movs	r3, #0
 800394a:	73fb      	strb	r3, [r7, #15]
 800394c:	e00d      	b.n	800396a <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681a      	ldr	r2, [r3, #0]
 8003952:	7bfb      	ldrb	r3, [r7, #15]
 8003954:	3340      	adds	r3, #64	; 0x40
 8003956:	009b      	lsls	r3, r3, #2
 8003958:	4413      	add	r3, r2
 800395a:	685b      	ldr	r3, [r3, #4]
 800395c:	0c1b      	lsrs	r3, r3, #16
 800395e:	68ba      	ldr	r2, [r7, #8]
 8003960:	4413      	add	r3, r2
 8003962:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003964:	7bfb      	ldrb	r3, [r7, #15]
 8003966:	3301      	adds	r3, #1
 8003968:	73fb      	strb	r3, [r7, #15]
 800396a:	7bfa      	ldrb	r2, [r7, #15]
 800396c:	78fb      	ldrb	r3, [r7, #3]
 800396e:	3b01      	subs	r3, #1
 8003970:	429a      	cmp	r2, r3
 8003972:	d3ec      	bcc.n	800394e <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003974:	883b      	ldrh	r3, [r7, #0]
 8003976:	0418      	lsls	r0, r3, #16
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6819      	ldr	r1, [r3, #0]
 800397c:	78fb      	ldrb	r3, [r7, #3]
 800397e:	3b01      	subs	r3, #1
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	4302      	orrs	r2, r0
 8003984:	3340      	adds	r3, #64	; 0x40
 8003986:	009b      	lsls	r3, r3, #2
 8003988:	440b      	add	r3, r1
 800398a:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 800398c:	2300      	movs	r3, #0
}
 800398e:	4618      	mov	r0, r3
 8003990:	3714      	adds	r7, #20
 8003992:	46bd      	mov	sp, r7
 8003994:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003998:	4770      	bx	lr

0800399a <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 800399a:	b480      	push	{r7}
 800399c:	b083      	sub	sp, #12
 800399e:	af00      	add	r7, sp, #0
 80039a0:	6078      	str	r0, [r7, #4]
 80039a2:	460b      	mov	r3, r1
 80039a4:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	887a      	ldrh	r2, [r7, #2]
 80039ac:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039ae:	2300      	movs	r3, #0
}
 80039b0:	4618      	mov	r0, r3
 80039b2:	370c      	adds	r7, #12
 80039b4:	46bd      	mov	sp, r7
 80039b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ba:	4770      	bx	lr

080039bc <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039bc:	b480      	push	{r7}
 80039be:	b083      	sub	sp, #12
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	6078      	str	r0, [r7, #4]
 80039c4:	460b      	mov	r3, r1
 80039c6:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039c8:	bf00      	nop
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b086      	sub	sp, #24
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d101      	bne.n	80039e6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039e2:	2301      	movs	r3, #1
 80039e4:	e267      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 0301 	and.w	r3, r3, #1
 80039ee:	2b00      	cmp	r3, #0
 80039f0:	d075      	beq.n	8003ade <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039f2:	4b88      	ldr	r3, [pc, #544]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 80039f4:	689b      	ldr	r3, [r3, #8]
 80039f6:	f003 030c 	and.w	r3, r3, #12
 80039fa:	2b04      	cmp	r3, #4
 80039fc:	d00c      	beq.n	8003a18 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80039fe:	4b85      	ldr	r3, [pc, #532]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a06:	2b08      	cmp	r3, #8
 8003a08:	d112      	bne.n	8003a30 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a0a:	4b82      	ldr	r3, [pc, #520]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a12:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a16:	d10b      	bne.n	8003a30 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a18:	4b7e      	ldr	r3, [pc, #504]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d05b      	beq.n	8003adc <HAL_RCC_OscConfig+0x108>
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	685b      	ldr	r3, [r3, #4]
 8003a28:	2b00      	cmp	r3, #0
 8003a2a:	d157      	bne.n	8003adc <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a2c:	2301      	movs	r3, #1
 8003a2e:	e242      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a38:	d106      	bne.n	8003a48 <HAL_RCC_OscConfig+0x74>
 8003a3a:	4b76      	ldr	r3, [pc, #472]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a75      	ldr	r2, [pc, #468]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a44:	6013      	str	r3, [r2, #0]
 8003a46:	e01d      	b.n	8003a84 <HAL_RCC_OscConfig+0xb0>
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	685b      	ldr	r3, [r3, #4]
 8003a4c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a50:	d10c      	bne.n	8003a6c <HAL_RCC_OscConfig+0x98>
 8003a52:	4b70      	ldr	r3, [pc, #448]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	4a6f      	ldr	r2, [pc, #444]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a58:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a5c:	6013      	str	r3, [r2, #0]
 8003a5e:	4b6d      	ldr	r3, [pc, #436]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a6c      	ldr	r2, [pc, #432]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	e00b      	b.n	8003a84 <HAL_RCC_OscConfig+0xb0>
 8003a6c:	4b69      	ldr	r3, [pc, #420]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	4a68      	ldr	r2, [pc, #416]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a72:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a76:	6013      	str	r3, [r2, #0]
 8003a78:	4b66      	ldr	r3, [pc, #408]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a65      	ldr	r2, [pc, #404]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003a7e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a82:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	685b      	ldr	r3, [r3, #4]
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d013      	beq.n	8003ab4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a8c:	f7fd fafc 	bl	8001088 <HAL_GetTick>
 8003a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a92:	e008      	b.n	8003aa6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003a94:	f7fd faf8 	bl	8001088 <HAL_GetTick>
 8003a98:	4602      	mov	r2, r0
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	1ad3      	subs	r3, r2, r3
 8003a9e:	2b64      	cmp	r3, #100	; 0x64
 8003aa0:	d901      	bls.n	8003aa6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aa2:	2303      	movs	r3, #3
 8003aa4:	e207      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003aa6:	4b5b      	ldr	r3, [pc, #364]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aae:	2b00      	cmp	r3, #0
 8003ab0:	d0f0      	beq.n	8003a94 <HAL_RCC_OscConfig+0xc0>
 8003ab2:	e014      	b.n	8003ade <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ab4:	f7fd fae8 	bl	8001088 <HAL_GetTick>
 8003ab8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003aba:	e008      	b.n	8003ace <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003abc:	f7fd fae4 	bl	8001088 <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	693b      	ldr	r3, [r7, #16]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	2b64      	cmp	r3, #100	; 0x64
 8003ac8:	d901      	bls.n	8003ace <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003aca:	2303      	movs	r3, #3
 8003acc:	e1f3      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ace:	4b51      	ldr	r3, [pc, #324]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d1f0      	bne.n	8003abc <HAL_RCC_OscConfig+0xe8>
 8003ada:	e000      	b.n	8003ade <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003adc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f003 0302 	and.w	r3, r3, #2
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d063      	beq.n	8003bb2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003aea:	4b4a      	ldr	r3, [pc, #296]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003aec:	689b      	ldr	r3, [r3, #8]
 8003aee:	f003 030c 	and.w	r3, r3, #12
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d00b      	beq.n	8003b0e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003af6:	4b47      	ldr	r3, [pc, #284]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003afe:	2b08      	cmp	r3, #8
 8003b00:	d11c      	bne.n	8003b3c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b02:	4b44      	ldr	r3, [pc, #272]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b04:	685b      	ldr	r3, [r3, #4]
 8003b06:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d116      	bne.n	8003b3c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b0e:	4b41      	ldr	r3, [pc, #260]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b10:	681b      	ldr	r3, [r3, #0]
 8003b12:	f003 0302 	and.w	r3, r3, #2
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d005      	beq.n	8003b26 <HAL_RCC_OscConfig+0x152>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	68db      	ldr	r3, [r3, #12]
 8003b1e:	2b01      	cmp	r3, #1
 8003b20:	d001      	beq.n	8003b26 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b22:	2301      	movs	r3, #1
 8003b24:	e1c7      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b26:	4b3b      	ldr	r3, [pc, #236]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	691b      	ldr	r3, [r3, #16]
 8003b32:	00db      	lsls	r3, r3, #3
 8003b34:	4937      	ldr	r1, [pc, #220]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b36:	4313      	orrs	r3, r2
 8003b38:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b3a:	e03a      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	68db      	ldr	r3, [r3, #12]
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d020      	beq.n	8003b86 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b44:	4b34      	ldr	r3, [pc, #208]	; (8003c18 <HAL_RCC_OscConfig+0x244>)
 8003b46:	2201      	movs	r2, #1
 8003b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b4a:	f7fd fa9d 	bl	8001088 <HAL_GetTick>
 8003b4e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b50:	e008      	b.n	8003b64 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b52:	f7fd fa99 	bl	8001088 <HAL_GetTick>
 8003b56:	4602      	mov	r2, r0
 8003b58:	693b      	ldr	r3, [r7, #16]
 8003b5a:	1ad3      	subs	r3, r2, r3
 8003b5c:	2b02      	cmp	r3, #2
 8003b5e:	d901      	bls.n	8003b64 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b60:	2303      	movs	r3, #3
 8003b62:	e1a8      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b64:	4b2b      	ldr	r3, [pc, #172]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f003 0302 	and.w	r3, r3, #2
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d0f0      	beq.n	8003b52 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b70:	4b28      	ldr	r3, [pc, #160]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	00db      	lsls	r3, r3, #3
 8003b7e:	4925      	ldr	r1, [pc, #148]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003b80:	4313      	orrs	r3, r2
 8003b82:	600b      	str	r3, [r1, #0]
 8003b84:	e015      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b86:	4b24      	ldr	r3, [pc, #144]	; (8003c18 <HAL_RCC_OscConfig+0x244>)
 8003b88:	2200      	movs	r2, #0
 8003b8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b8c:	f7fd fa7c 	bl	8001088 <HAL_GetTick>
 8003b90:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b92:	e008      	b.n	8003ba6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b94:	f7fd fa78 	bl	8001088 <HAL_GetTick>
 8003b98:	4602      	mov	r2, r0
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	1ad3      	subs	r3, r2, r3
 8003b9e:	2b02      	cmp	r3, #2
 8003ba0:	d901      	bls.n	8003ba6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003ba2:	2303      	movs	r3, #3
 8003ba4:	e187      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003ba6:	4b1b      	ldr	r3, [pc, #108]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	f003 0302 	and.w	r3, r3, #2
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d1f0      	bne.n	8003b94 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0308 	and.w	r3, r3, #8
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d036      	beq.n	8003c2c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	695b      	ldr	r3, [r3, #20]
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d016      	beq.n	8003bf4 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bc6:	4b15      	ldr	r3, [pc, #84]	; (8003c1c <HAL_RCC_OscConfig+0x248>)
 8003bc8:	2201      	movs	r2, #1
 8003bca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bcc:	f7fd fa5c 	bl	8001088 <HAL_GetTick>
 8003bd0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bd2:	e008      	b.n	8003be6 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003bd4:	f7fd fa58 	bl	8001088 <HAL_GetTick>
 8003bd8:	4602      	mov	r2, r0
 8003bda:	693b      	ldr	r3, [r7, #16]
 8003bdc:	1ad3      	subs	r3, r2, r3
 8003bde:	2b02      	cmp	r3, #2
 8003be0:	d901      	bls.n	8003be6 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003be2:	2303      	movs	r3, #3
 8003be4:	e167      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003be6:	4b0b      	ldr	r3, [pc, #44]	; (8003c14 <HAL_RCC_OscConfig+0x240>)
 8003be8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bea:	f003 0302 	and.w	r3, r3, #2
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	d0f0      	beq.n	8003bd4 <HAL_RCC_OscConfig+0x200>
 8003bf2:	e01b      	b.n	8003c2c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bf4:	4b09      	ldr	r3, [pc, #36]	; (8003c1c <HAL_RCC_OscConfig+0x248>)
 8003bf6:	2200      	movs	r2, #0
 8003bf8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003bfa:	f7fd fa45 	bl	8001088 <HAL_GetTick>
 8003bfe:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c00:	e00e      	b.n	8003c20 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c02:	f7fd fa41 	bl	8001088 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	693b      	ldr	r3, [r7, #16]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	2b02      	cmp	r3, #2
 8003c0e:	d907      	bls.n	8003c20 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c10:	2303      	movs	r3, #3
 8003c12:	e150      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
 8003c14:	40023800 	.word	0x40023800
 8003c18:	42470000 	.word	0x42470000
 8003c1c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c20:	4b88      	ldr	r3, [pc, #544]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c22:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c24:	f003 0302 	and.w	r3, r3, #2
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d1ea      	bne.n	8003c02 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	f003 0304 	and.w	r3, r3, #4
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	f000 8097 	beq.w	8003d68 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c3a:	2300      	movs	r3, #0
 8003c3c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c3e:	4b81      	ldr	r3, [pc, #516]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d10f      	bne.n	8003c6a <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	60bb      	str	r3, [r7, #8]
 8003c4e:	4b7d      	ldr	r3, [pc, #500]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c52:	4a7c      	ldr	r2, [pc, #496]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c58:	6413      	str	r3, [r2, #64]	; 0x40
 8003c5a:	4b7a      	ldr	r3, [pc, #488]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c62:	60bb      	str	r3, [r7, #8]
 8003c64:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c66:	2301      	movs	r3, #1
 8003c68:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c6a:	4b77      	ldr	r3, [pc, #476]	; (8003e48 <HAL_RCC_OscConfig+0x474>)
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c72:	2b00      	cmp	r3, #0
 8003c74:	d118      	bne.n	8003ca8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c76:	4b74      	ldr	r3, [pc, #464]	; (8003e48 <HAL_RCC_OscConfig+0x474>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a73      	ldr	r2, [pc, #460]	; (8003e48 <HAL_RCC_OscConfig+0x474>)
 8003c7c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c80:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c82:	f7fd fa01 	bl	8001088 <HAL_GetTick>
 8003c86:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c88:	e008      	b.n	8003c9c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c8a:	f7fd f9fd 	bl	8001088 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	693b      	ldr	r3, [r7, #16]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	2b02      	cmp	r3, #2
 8003c96:	d901      	bls.n	8003c9c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003c98:	2303      	movs	r3, #3
 8003c9a:	e10c      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c9c:	4b6a      	ldr	r3, [pc, #424]	; (8003e48 <HAL_RCC_OscConfig+0x474>)
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ca4:	2b00      	cmp	r3, #0
 8003ca6:	d0f0      	beq.n	8003c8a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	689b      	ldr	r3, [r3, #8]
 8003cac:	2b01      	cmp	r3, #1
 8003cae:	d106      	bne.n	8003cbe <HAL_RCC_OscConfig+0x2ea>
 8003cb0:	4b64      	ldr	r3, [pc, #400]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cb2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cb4:	4a63      	ldr	r2, [pc, #396]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cb6:	f043 0301 	orr.w	r3, r3, #1
 8003cba:	6713      	str	r3, [r2, #112]	; 0x70
 8003cbc:	e01c      	b.n	8003cf8 <HAL_RCC_OscConfig+0x324>
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	689b      	ldr	r3, [r3, #8]
 8003cc2:	2b05      	cmp	r3, #5
 8003cc4:	d10c      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x30c>
 8003cc6:	4b5f      	ldr	r3, [pc, #380]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cc8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cca:	4a5e      	ldr	r2, [pc, #376]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003ccc:	f043 0304 	orr.w	r3, r3, #4
 8003cd0:	6713      	str	r3, [r2, #112]	; 0x70
 8003cd2:	4b5c      	ldr	r3, [pc, #368]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	4a5b      	ldr	r2, [pc, #364]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	f043 0301 	orr.w	r3, r3, #1
 8003cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cde:	e00b      	b.n	8003cf8 <HAL_RCC_OscConfig+0x324>
 8003ce0:	4b58      	ldr	r3, [pc, #352]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003ce2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce4:	4a57      	ldr	r2, [pc, #348]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003ce6:	f023 0301 	bic.w	r3, r3, #1
 8003cea:	6713      	str	r3, [r2, #112]	; 0x70
 8003cec:	4b55      	ldr	r3, [pc, #340]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	4a54      	ldr	r2, [pc, #336]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	f023 0304 	bic.w	r3, r3, #4
 8003cf6:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	689b      	ldr	r3, [r3, #8]
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d015      	beq.n	8003d2c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d00:	f7fd f9c2 	bl	8001088 <HAL_GetTick>
 8003d04:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d06:	e00a      	b.n	8003d1e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d08:	f7fd f9be 	bl	8001088 <HAL_GetTick>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	693b      	ldr	r3, [r7, #16]
 8003d10:	1ad3      	subs	r3, r2, r3
 8003d12:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d16:	4293      	cmp	r3, r2
 8003d18:	d901      	bls.n	8003d1e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d1a:	2303      	movs	r3, #3
 8003d1c:	e0cb      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d1e:	4b49      	ldr	r3, [pc, #292]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d22:	f003 0302 	and.w	r3, r3, #2
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d0ee      	beq.n	8003d08 <HAL_RCC_OscConfig+0x334>
 8003d2a:	e014      	b.n	8003d56 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d2c:	f7fd f9ac 	bl	8001088 <HAL_GetTick>
 8003d30:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d32:	e00a      	b.n	8003d4a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d34:	f7fd f9a8 	bl	8001088 <HAL_GetTick>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	1ad3      	subs	r3, r2, r3
 8003d3e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d901      	bls.n	8003d4a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d46:	2303      	movs	r3, #3
 8003d48:	e0b5      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d4a:	4b3e      	ldr	r3, [pc, #248]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d4e:	f003 0302 	and.w	r3, r3, #2
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d1ee      	bne.n	8003d34 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d56:	7dfb      	ldrb	r3, [r7, #23]
 8003d58:	2b01      	cmp	r3, #1
 8003d5a:	d105      	bne.n	8003d68 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d5c:	4b39      	ldr	r3, [pc, #228]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d60:	4a38      	ldr	r2, [pc, #224]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d62:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d66:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	699b      	ldr	r3, [r3, #24]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	f000 80a1 	beq.w	8003eb4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d72:	4b34      	ldr	r3, [pc, #208]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003d74:	689b      	ldr	r3, [r3, #8]
 8003d76:	f003 030c 	and.w	r3, r3, #12
 8003d7a:	2b08      	cmp	r3, #8
 8003d7c:	d05c      	beq.n	8003e38 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	699b      	ldr	r3, [r3, #24]
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d141      	bne.n	8003e0a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d86:	4b31      	ldr	r3, [pc, #196]	; (8003e4c <HAL_RCC_OscConfig+0x478>)
 8003d88:	2200      	movs	r2, #0
 8003d8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d8c:	f7fd f97c 	bl	8001088 <HAL_GetTick>
 8003d90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d92:	e008      	b.n	8003da6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003d94:	f7fd f978 	bl	8001088 <HAL_GetTick>
 8003d98:	4602      	mov	r2, r0
 8003d9a:	693b      	ldr	r3, [r7, #16]
 8003d9c:	1ad3      	subs	r3, r2, r3
 8003d9e:	2b02      	cmp	r3, #2
 8003da0:	d901      	bls.n	8003da6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003da2:	2303      	movs	r3, #3
 8003da4:	e087      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003da6:	4b27      	ldr	r3, [pc, #156]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d1f0      	bne.n	8003d94 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	69da      	ldr	r2, [r3, #28]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	6a1b      	ldr	r3, [r3, #32]
 8003dba:	431a      	orrs	r2, r3
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dc0:	019b      	lsls	r3, r3, #6
 8003dc2:	431a      	orrs	r2, r3
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dc8:	085b      	lsrs	r3, r3, #1
 8003dca:	3b01      	subs	r3, #1
 8003dcc:	041b      	lsls	r3, r3, #16
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dd4:	061b      	lsls	r3, r3, #24
 8003dd6:	491b      	ldr	r1, [pc, #108]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003dd8:	4313      	orrs	r3, r2
 8003dda:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003ddc:	4b1b      	ldr	r3, [pc, #108]	; (8003e4c <HAL_RCC_OscConfig+0x478>)
 8003dde:	2201      	movs	r2, #1
 8003de0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003de2:	f7fd f951 	bl	8001088 <HAL_GetTick>
 8003de6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003de8:	e008      	b.n	8003dfc <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003dea:	f7fd f94d 	bl	8001088 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	693b      	ldr	r3, [r7, #16]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	2b02      	cmp	r3, #2
 8003df6:	d901      	bls.n	8003dfc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003df8:	2303      	movs	r3, #3
 8003dfa:	e05c      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003dfc:	4b11      	ldr	r3, [pc, #68]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d0f0      	beq.n	8003dea <HAL_RCC_OscConfig+0x416>
 8003e08:	e054      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e0a:	4b10      	ldr	r3, [pc, #64]	; (8003e4c <HAL_RCC_OscConfig+0x478>)
 8003e0c:	2200      	movs	r2, #0
 8003e0e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e10:	f7fd f93a 	bl	8001088 <HAL_GetTick>
 8003e14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e16:	e008      	b.n	8003e2a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e18:	f7fd f936 	bl	8001088 <HAL_GetTick>
 8003e1c:	4602      	mov	r2, r0
 8003e1e:	693b      	ldr	r3, [r7, #16]
 8003e20:	1ad3      	subs	r3, r2, r3
 8003e22:	2b02      	cmp	r3, #2
 8003e24:	d901      	bls.n	8003e2a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e26:	2303      	movs	r3, #3
 8003e28:	e045      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e2a:	4b06      	ldr	r3, [pc, #24]	; (8003e44 <HAL_RCC_OscConfig+0x470>)
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d1f0      	bne.n	8003e18 <HAL_RCC_OscConfig+0x444>
 8003e36:	e03d      	b.n	8003eb4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	699b      	ldr	r3, [r3, #24]
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d107      	bne.n	8003e50 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e40:	2301      	movs	r3, #1
 8003e42:	e038      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
 8003e44:	40023800 	.word	0x40023800
 8003e48:	40007000 	.word	0x40007000
 8003e4c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e50:	4b1b      	ldr	r3, [pc, #108]	; (8003ec0 <HAL_RCC_OscConfig+0x4ec>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	2b01      	cmp	r3, #1
 8003e5c:	d028      	beq.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e68:	429a      	cmp	r2, r3
 8003e6a:	d121      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e76:	429a      	cmp	r2, r3
 8003e78:	d11a      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e7a:	68fa      	ldr	r2, [r7, #12]
 8003e7c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e80:	4013      	ands	r3, r2
 8003e82:	687a      	ldr	r2, [r7, #4]
 8003e84:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e86:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d111      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e96:	085b      	lsrs	r3, r3, #1
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d107      	bne.n	8003eb0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eaa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eac:	429a      	cmp	r2, r3
 8003eae:	d001      	beq.n	8003eb4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e000      	b.n	8003eb6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3718      	adds	r7, #24
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}
 8003ebe:	bf00      	nop
 8003ec0:	40023800 	.word	0x40023800

08003ec4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ec4:	b580      	push	{r7, lr}
 8003ec6:	b084      	sub	sp, #16
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	6078      	str	r0, [r7, #4]
 8003ecc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d101      	bne.n	8003ed8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ed4:	2301      	movs	r3, #1
 8003ed6:	e0cc      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ed8:	4b68      	ldr	r3, [pc, #416]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	f003 0307 	and.w	r3, r3, #7
 8003ee0:	683a      	ldr	r2, [r7, #0]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d90c      	bls.n	8003f00 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ee6:	4b65      	ldr	r3, [pc, #404]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ee8:	683a      	ldr	r2, [r7, #0]
 8003eea:	b2d2      	uxtb	r2, r2
 8003eec:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003eee:	4b63      	ldr	r3, [pc, #396]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0307 	and.w	r3, r3, #7
 8003ef6:	683a      	ldr	r2, [r7, #0]
 8003ef8:	429a      	cmp	r2, r3
 8003efa:	d001      	beq.n	8003f00 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003efc:	2301      	movs	r3, #1
 8003efe:	e0b8      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	f003 0302 	and.w	r3, r3, #2
 8003f08:	2b00      	cmp	r3, #0
 8003f0a:	d020      	beq.n	8003f4e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0304 	and.w	r3, r3, #4
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d005      	beq.n	8003f24 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f18:	4b59      	ldr	r3, [pc, #356]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1a:	689b      	ldr	r3, [r3, #8]
 8003f1c:	4a58      	ldr	r2, [pc, #352]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f1e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f22:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	f003 0308 	and.w	r3, r3, #8
 8003f2c:	2b00      	cmp	r3, #0
 8003f2e:	d005      	beq.n	8003f3c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f30:	4b53      	ldr	r3, [pc, #332]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f32:	689b      	ldr	r3, [r3, #8]
 8003f34:	4a52      	ldr	r2, [pc, #328]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f36:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f3a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f3c:	4b50      	ldr	r3, [pc, #320]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	689b      	ldr	r3, [r3, #8]
 8003f48:	494d      	ldr	r1, [pc, #308]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	4313      	orrs	r3, r2
 8003f4c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b00      	cmp	r3, #0
 8003f58:	d044      	beq.n	8003fe4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	685b      	ldr	r3, [r3, #4]
 8003f5e:	2b01      	cmp	r3, #1
 8003f60:	d107      	bne.n	8003f72 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f62:	4b47      	ldr	r3, [pc, #284]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d119      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f6e:	2301      	movs	r3, #1
 8003f70:	e07f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	685b      	ldr	r3, [r3, #4]
 8003f76:	2b02      	cmp	r3, #2
 8003f78:	d003      	beq.n	8003f82 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f7e:	2b03      	cmp	r3, #3
 8003f80:	d107      	bne.n	8003f92 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f82:	4b3f      	ldr	r3, [pc, #252]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d109      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e06f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f92:	4b3b      	ldr	r3, [pc, #236]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d101      	bne.n	8003fa2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e067      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fa2:	4b37      	ldr	r3, [pc, #220]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003fa4:	689b      	ldr	r3, [r3, #8]
 8003fa6:	f023 0203 	bic.w	r2, r3, #3
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	685b      	ldr	r3, [r3, #4]
 8003fae:	4934      	ldr	r1, [pc, #208]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	4313      	orrs	r3, r2
 8003fb2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fb4:	f7fd f868 	bl	8001088 <HAL_GetTick>
 8003fb8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fba:	e00a      	b.n	8003fd2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fbc:	f7fd f864 	bl	8001088 <HAL_GetTick>
 8003fc0:	4602      	mov	r2, r0
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	1ad3      	subs	r3, r2, r3
 8003fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fca:	4293      	cmp	r3, r2
 8003fcc:	d901      	bls.n	8003fd2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fce:	2303      	movs	r3, #3
 8003fd0:	e04f      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fd2:	4b2b      	ldr	r3, [pc, #172]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	f003 020c 	and.w	r2, r3, #12
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	009b      	lsls	r3, r3, #2
 8003fe0:	429a      	cmp	r2, r3
 8003fe2:	d1eb      	bne.n	8003fbc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003fe4:	4b25      	ldr	r3, [pc, #148]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f003 0307 	and.w	r3, r3, #7
 8003fec:	683a      	ldr	r2, [r7, #0]
 8003fee:	429a      	cmp	r2, r3
 8003ff0:	d20c      	bcs.n	800400c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ff2:	4b22      	ldr	r3, [pc, #136]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ff4:	683a      	ldr	r2, [r7, #0]
 8003ff6:	b2d2      	uxtb	r2, r2
 8003ff8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003ffa:	4b20      	ldr	r3, [pc, #128]	; (800407c <HAL_RCC_ClockConfig+0x1b8>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f003 0307 	and.w	r3, r3, #7
 8004002:	683a      	ldr	r2, [r7, #0]
 8004004:	429a      	cmp	r2, r3
 8004006:	d001      	beq.n	800400c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004008:	2301      	movs	r3, #1
 800400a:	e032      	b.n	8004072 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	f003 0304 	and.w	r3, r3, #4
 8004014:	2b00      	cmp	r3, #0
 8004016:	d008      	beq.n	800402a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004018:	4b19      	ldr	r3, [pc, #100]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 800401a:	689b      	ldr	r3, [r3, #8]
 800401c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	4916      	ldr	r1, [pc, #88]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	4313      	orrs	r3, r2
 8004028:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d009      	beq.n	800404a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004036:	4b12      	ldr	r3, [pc, #72]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004038:	689b      	ldr	r3, [r3, #8]
 800403a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	00db      	lsls	r3, r3, #3
 8004044:	490e      	ldr	r1, [pc, #56]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004046:	4313      	orrs	r3, r2
 8004048:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800404a:	f000 f821 	bl	8004090 <HAL_RCC_GetSysClockFreq>
 800404e:	4602      	mov	r2, r0
 8004050:	4b0b      	ldr	r3, [pc, #44]	; (8004080 <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	689b      	ldr	r3, [r3, #8]
 8004054:	091b      	lsrs	r3, r3, #4
 8004056:	f003 030f 	and.w	r3, r3, #15
 800405a:	490a      	ldr	r1, [pc, #40]	; (8004084 <HAL_RCC_ClockConfig+0x1c0>)
 800405c:	5ccb      	ldrb	r3, [r1, r3]
 800405e:	fa22 f303 	lsr.w	r3, r2, r3
 8004062:	4a09      	ldr	r2, [pc, #36]	; (8004088 <HAL_RCC_ClockConfig+0x1c4>)
 8004064:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004066:	4b09      	ldr	r3, [pc, #36]	; (800408c <HAL_RCC_ClockConfig+0x1c8>)
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	4618      	mov	r0, r3
 800406c:	f7fc ffc8 	bl	8001000 <HAL_InitTick>

  return HAL_OK;
 8004070:	2300      	movs	r3, #0
}
 8004072:	4618      	mov	r0, r3
 8004074:	3710      	adds	r7, #16
 8004076:	46bd      	mov	sp, r7
 8004078:	bd80      	pop	{r7, pc}
 800407a:	bf00      	nop
 800407c:	40023c00 	.word	0x40023c00
 8004080:	40023800 	.word	0x40023800
 8004084:	08007df4 	.word	0x08007df4
 8004088:	200003d4 	.word	0x200003d4
 800408c:	200003d8 	.word	0x200003d8

08004090 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004090:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004094:	b090      	sub	sp, #64	; 0x40
 8004096:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	637b      	str	r3, [r7, #52]	; 0x34
 800409c:	2300      	movs	r3, #0
 800409e:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040a0:	2300      	movs	r3, #0
 80040a2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040a8:	4b59      	ldr	r3, [pc, #356]	; (8004210 <HAL_RCC_GetSysClockFreq+0x180>)
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	f003 030c 	and.w	r3, r3, #12
 80040b0:	2b08      	cmp	r3, #8
 80040b2:	d00d      	beq.n	80040d0 <HAL_RCC_GetSysClockFreq+0x40>
 80040b4:	2b08      	cmp	r3, #8
 80040b6:	f200 80a1 	bhi.w	80041fc <HAL_RCC_GetSysClockFreq+0x16c>
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d002      	beq.n	80040c4 <HAL_RCC_GetSysClockFreq+0x34>
 80040be:	2b04      	cmp	r3, #4
 80040c0:	d003      	beq.n	80040ca <HAL_RCC_GetSysClockFreq+0x3a>
 80040c2:	e09b      	b.n	80041fc <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040c4:	4b53      	ldr	r3, [pc, #332]	; (8004214 <HAL_RCC_GetSysClockFreq+0x184>)
 80040c6:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80040c8:	e09b      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040ca:	4b53      	ldr	r3, [pc, #332]	; (8004218 <HAL_RCC_GetSysClockFreq+0x188>)
 80040cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040ce:	e098      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040d0:	4b4f      	ldr	r3, [pc, #316]	; (8004210 <HAL_RCC_GetSysClockFreq+0x180>)
 80040d2:	685b      	ldr	r3, [r3, #4]
 80040d4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040d8:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040da:	4b4d      	ldr	r3, [pc, #308]	; (8004210 <HAL_RCC_GetSysClockFreq+0x180>)
 80040dc:	685b      	ldr	r3, [r3, #4]
 80040de:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d028      	beq.n	8004138 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040e6:	4b4a      	ldr	r3, [pc, #296]	; (8004210 <HAL_RCC_GetSysClockFreq+0x180>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	099b      	lsrs	r3, r3, #6
 80040ec:	2200      	movs	r2, #0
 80040ee:	623b      	str	r3, [r7, #32]
 80040f0:	627a      	str	r2, [r7, #36]	; 0x24
 80040f2:	6a3b      	ldr	r3, [r7, #32]
 80040f4:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80040f8:	2100      	movs	r1, #0
 80040fa:	4b47      	ldr	r3, [pc, #284]	; (8004218 <HAL_RCC_GetSysClockFreq+0x188>)
 80040fc:	fb03 f201 	mul.w	r2, r3, r1
 8004100:	2300      	movs	r3, #0
 8004102:	fb00 f303 	mul.w	r3, r0, r3
 8004106:	4413      	add	r3, r2
 8004108:	4a43      	ldr	r2, [pc, #268]	; (8004218 <HAL_RCC_GetSysClockFreq+0x188>)
 800410a:	fba0 1202 	umull	r1, r2, r0, r2
 800410e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004110:	460a      	mov	r2, r1
 8004112:	62ba      	str	r2, [r7, #40]	; 0x28
 8004114:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004116:	4413      	add	r3, r2
 8004118:	62fb      	str	r3, [r7, #44]	; 0x2c
 800411a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800411c:	2200      	movs	r2, #0
 800411e:	61bb      	str	r3, [r7, #24]
 8004120:	61fa      	str	r2, [r7, #28]
 8004122:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004126:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800412a:	f7fc f853 	bl	80001d4 <__aeabi_uldivmod>
 800412e:	4602      	mov	r2, r0
 8004130:	460b      	mov	r3, r1
 8004132:	4613      	mov	r3, r2
 8004134:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004136:	e053      	b.n	80041e0 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004138:	4b35      	ldr	r3, [pc, #212]	; (8004210 <HAL_RCC_GetSysClockFreq+0x180>)
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	099b      	lsrs	r3, r3, #6
 800413e:	2200      	movs	r2, #0
 8004140:	613b      	str	r3, [r7, #16]
 8004142:	617a      	str	r2, [r7, #20]
 8004144:	693b      	ldr	r3, [r7, #16]
 8004146:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800414a:	f04f 0b00 	mov.w	fp, #0
 800414e:	4652      	mov	r2, sl
 8004150:	465b      	mov	r3, fp
 8004152:	f04f 0000 	mov.w	r0, #0
 8004156:	f04f 0100 	mov.w	r1, #0
 800415a:	0159      	lsls	r1, r3, #5
 800415c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004160:	0150      	lsls	r0, r2, #5
 8004162:	4602      	mov	r2, r0
 8004164:	460b      	mov	r3, r1
 8004166:	ebb2 080a 	subs.w	r8, r2, sl
 800416a:	eb63 090b 	sbc.w	r9, r3, fp
 800416e:	f04f 0200 	mov.w	r2, #0
 8004172:	f04f 0300 	mov.w	r3, #0
 8004176:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800417a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800417e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004182:	ebb2 0408 	subs.w	r4, r2, r8
 8004186:	eb63 0509 	sbc.w	r5, r3, r9
 800418a:	f04f 0200 	mov.w	r2, #0
 800418e:	f04f 0300 	mov.w	r3, #0
 8004192:	00eb      	lsls	r3, r5, #3
 8004194:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004198:	00e2      	lsls	r2, r4, #3
 800419a:	4614      	mov	r4, r2
 800419c:	461d      	mov	r5, r3
 800419e:	eb14 030a 	adds.w	r3, r4, sl
 80041a2:	603b      	str	r3, [r7, #0]
 80041a4:	eb45 030b 	adc.w	r3, r5, fp
 80041a8:	607b      	str	r3, [r7, #4]
 80041aa:	f04f 0200 	mov.w	r2, #0
 80041ae:	f04f 0300 	mov.w	r3, #0
 80041b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041b6:	4629      	mov	r1, r5
 80041b8:	028b      	lsls	r3, r1, #10
 80041ba:	4621      	mov	r1, r4
 80041bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041c0:	4621      	mov	r1, r4
 80041c2:	028a      	lsls	r2, r1, #10
 80041c4:	4610      	mov	r0, r2
 80041c6:	4619      	mov	r1, r3
 80041c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041ca:	2200      	movs	r2, #0
 80041cc:	60bb      	str	r3, [r7, #8]
 80041ce:	60fa      	str	r2, [r7, #12]
 80041d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041d4:	f7fb fffe 	bl	80001d4 <__aeabi_uldivmod>
 80041d8:	4602      	mov	r2, r0
 80041da:	460b      	mov	r3, r1
 80041dc:	4613      	mov	r3, r2
 80041de:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041e0:	4b0b      	ldr	r3, [pc, #44]	; (8004210 <HAL_RCC_GetSysClockFreq+0x180>)
 80041e2:	685b      	ldr	r3, [r3, #4]
 80041e4:	0c1b      	lsrs	r3, r3, #16
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	3301      	adds	r3, #1
 80041ec:	005b      	lsls	r3, r3, #1
 80041ee:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80041f0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80041fa:	e002      	b.n	8004202 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80041fc:	4b05      	ldr	r3, [pc, #20]	; (8004214 <HAL_RCC_GetSysClockFreq+0x184>)
 80041fe:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004200:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004202:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004204:	4618      	mov	r0, r3
 8004206:	3740      	adds	r7, #64	; 0x40
 8004208:	46bd      	mov	sp, r7
 800420a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800420e:	bf00      	nop
 8004210:	40023800 	.word	0x40023800
 8004214:	00f42400 	.word	0x00f42400
 8004218:	017d7840 	.word	0x017d7840

0800421c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800421c:	b480      	push	{r7}
 800421e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004220:	4b03      	ldr	r3, [pc, #12]	; (8004230 <HAL_RCC_GetHCLKFreq+0x14>)
 8004222:	681b      	ldr	r3, [r3, #0]
}
 8004224:	4618      	mov	r0, r3
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	200003d4 	.word	0x200003d4

08004234 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004234:	b084      	sub	sp, #16
 8004236:	b580      	push	{r7, lr}
 8004238:	b084      	sub	sp, #16
 800423a:	af00      	add	r7, sp, #0
 800423c:	6078      	str	r0, [r7, #4]
 800423e:	f107 001c 	add.w	r0, r7, #28
 8004242:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004246:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004248:	2b01      	cmp	r3, #1
 800424a:	d122      	bne.n	8004292 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004250:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	68db      	ldr	r3, [r3, #12]
 800425c:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8004260:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004264:	687a      	ldr	r2, [r7, #4]
 8004266:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68db      	ldr	r3, [r3, #12]
 800426c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004274:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004276:	2b01      	cmp	r3, #1
 8004278:	d105      	bne.n	8004286 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	68db      	ldr	r3, [r3, #12]
 800427e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004286:	6878      	ldr	r0, [r7, #4]
 8004288:	f001 fbee 	bl	8005a68 <USB_CoreReset>
 800428c:	4603      	mov	r3, r0
 800428e:	73fb      	strb	r3, [r7, #15]
 8004290:	e01a      	b.n	80042c8 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	68db      	ldr	r3, [r3, #12]
 8004296:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800429e:	6878      	ldr	r0, [r7, #4]
 80042a0:	f001 fbe2 	bl	8005a68 <USB_CoreReset>
 80042a4:	4603      	mov	r3, r0
 80042a6:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042a8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042aa:	2b00      	cmp	r3, #0
 80042ac:	d106      	bne.n	80042bc <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042b2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	639a      	str	r2, [r3, #56]	; 0x38
 80042ba:	e005      	b.n	80042c8 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042ca:	2b01      	cmp	r3, #1
 80042cc:	d10b      	bne.n	80042e6 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	689b      	ldr	r3, [r3, #8]
 80042d2:	f043 0206 	orr.w	r2, r3, #6
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f043 0220 	orr.w	r2, r3, #32
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042e6:	7bfb      	ldrb	r3, [r7, #15]
}
 80042e8:	4618      	mov	r0, r3
 80042ea:	3710      	adds	r7, #16
 80042ec:	46bd      	mov	sp, r7
 80042ee:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042f2:	b004      	add	sp, #16
 80042f4:	4770      	bx	lr
	...

080042f8 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	4613      	mov	r3, r2
 8004304:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004306:	79fb      	ldrb	r3, [r7, #7]
 8004308:	2b02      	cmp	r3, #2
 800430a:	d165      	bne.n	80043d8 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	4a41      	ldr	r2, [pc, #260]	; (8004414 <USB_SetTurnaroundTime+0x11c>)
 8004310:	4293      	cmp	r3, r2
 8004312:	d906      	bls.n	8004322 <USB_SetTurnaroundTime+0x2a>
 8004314:	68bb      	ldr	r3, [r7, #8]
 8004316:	4a40      	ldr	r2, [pc, #256]	; (8004418 <USB_SetTurnaroundTime+0x120>)
 8004318:	4293      	cmp	r3, r2
 800431a:	d202      	bcs.n	8004322 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 800431c:	230f      	movs	r3, #15
 800431e:	617b      	str	r3, [r7, #20]
 8004320:	e062      	b.n	80043e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	4a3c      	ldr	r2, [pc, #240]	; (8004418 <USB_SetTurnaroundTime+0x120>)
 8004326:	4293      	cmp	r3, r2
 8004328:	d306      	bcc.n	8004338 <USB_SetTurnaroundTime+0x40>
 800432a:	68bb      	ldr	r3, [r7, #8]
 800432c:	4a3b      	ldr	r2, [pc, #236]	; (800441c <USB_SetTurnaroundTime+0x124>)
 800432e:	4293      	cmp	r3, r2
 8004330:	d202      	bcs.n	8004338 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8004332:	230e      	movs	r3, #14
 8004334:	617b      	str	r3, [r7, #20]
 8004336:	e057      	b.n	80043e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004338:	68bb      	ldr	r3, [r7, #8]
 800433a:	4a38      	ldr	r2, [pc, #224]	; (800441c <USB_SetTurnaroundTime+0x124>)
 800433c:	4293      	cmp	r3, r2
 800433e:	d306      	bcc.n	800434e <USB_SetTurnaroundTime+0x56>
 8004340:	68bb      	ldr	r3, [r7, #8]
 8004342:	4a37      	ldr	r2, [pc, #220]	; (8004420 <USB_SetTurnaroundTime+0x128>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d202      	bcs.n	800434e <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004348:	230d      	movs	r3, #13
 800434a:	617b      	str	r3, [r7, #20]
 800434c:	e04c      	b.n	80043e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800434e:	68bb      	ldr	r3, [r7, #8]
 8004350:	4a33      	ldr	r2, [pc, #204]	; (8004420 <USB_SetTurnaroundTime+0x128>)
 8004352:	4293      	cmp	r3, r2
 8004354:	d306      	bcc.n	8004364 <USB_SetTurnaroundTime+0x6c>
 8004356:	68bb      	ldr	r3, [r7, #8]
 8004358:	4a32      	ldr	r2, [pc, #200]	; (8004424 <USB_SetTurnaroundTime+0x12c>)
 800435a:	4293      	cmp	r3, r2
 800435c:	d802      	bhi.n	8004364 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800435e:	230c      	movs	r3, #12
 8004360:	617b      	str	r3, [r7, #20]
 8004362:	e041      	b.n	80043e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004364:	68bb      	ldr	r3, [r7, #8]
 8004366:	4a2f      	ldr	r2, [pc, #188]	; (8004424 <USB_SetTurnaroundTime+0x12c>)
 8004368:	4293      	cmp	r3, r2
 800436a:	d906      	bls.n	800437a <USB_SetTurnaroundTime+0x82>
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4a2e      	ldr	r2, [pc, #184]	; (8004428 <USB_SetTurnaroundTime+0x130>)
 8004370:	4293      	cmp	r3, r2
 8004372:	d802      	bhi.n	800437a <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004374:	230b      	movs	r3, #11
 8004376:	617b      	str	r3, [r7, #20]
 8004378:	e036      	b.n	80043e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800437a:	68bb      	ldr	r3, [r7, #8]
 800437c:	4a2a      	ldr	r2, [pc, #168]	; (8004428 <USB_SetTurnaroundTime+0x130>)
 800437e:	4293      	cmp	r3, r2
 8004380:	d906      	bls.n	8004390 <USB_SetTurnaroundTime+0x98>
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	4a29      	ldr	r2, [pc, #164]	; (800442c <USB_SetTurnaroundTime+0x134>)
 8004386:	4293      	cmp	r3, r2
 8004388:	d802      	bhi.n	8004390 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800438a:	230a      	movs	r3, #10
 800438c:	617b      	str	r3, [r7, #20]
 800438e:	e02b      	b.n	80043e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8004390:	68bb      	ldr	r3, [r7, #8]
 8004392:	4a26      	ldr	r2, [pc, #152]	; (800442c <USB_SetTurnaroundTime+0x134>)
 8004394:	4293      	cmp	r3, r2
 8004396:	d906      	bls.n	80043a6 <USB_SetTurnaroundTime+0xae>
 8004398:	68bb      	ldr	r3, [r7, #8]
 800439a:	4a25      	ldr	r2, [pc, #148]	; (8004430 <USB_SetTurnaroundTime+0x138>)
 800439c:	4293      	cmp	r3, r2
 800439e:	d202      	bcs.n	80043a6 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80043a0:	2309      	movs	r3, #9
 80043a2:	617b      	str	r3, [r7, #20]
 80043a4:	e020      	b.n	80043e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80043a6:	68bb      	ldr	r3, [r7, #8]
 80043a8:	4a21      	ldr	r2, [pc, #132]	; (8004430 <USB_SetTurnaroundTime+0x138>)
 80043aa:	4293      	cmp	r3, r2
 80043ac:	d306      	bcc.n	80043bc <USB_SetTurnaroundTime+0xc4>
 80043ae:	68bb      	ldr	r3, [r7, #8]
 80043b0:	4a20      	ldr	r2, [pc, #128]	; (8004434 <USB_SetTurnaroundTime+0x13c>)
 80043b2:	4293      	cmp	r3, r2
 80043b4:	d802      	bhi.n	80043bc <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80043b6:	2308      	movs	r3, #8
 80043b8:	617b      	str	r3, [r7, #20]
 80043ba:	e015      	b.n	80043e8 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80043bc:	68bb      	ldr	r3, [r7, #8]
 80043be:	4a1d      	ldr	r2, [pc, #116]	; (8004434 <USB_SetTurnaroundTime+0x13c>)
 80043c0:	4293      	cmp	r3, r2
 80043c2:	d906      	bls.n	80043d2 <USB_SetTurnaroundTime+0xda>
 80043c4:	68bb      	ldr	r3, [r7, #8]
 80043c6:	4a1c      	ldr	r2, [pc, #112]	; (8004438 <USB_SetTurnaroundTime+0x140>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d202      	bcs.n	80043d2 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80043cc:	2307      	movs	r3, #7
 80043ce:	617b      	str	r3, [r7, #20]
 80043d0:	e00a      	b.n	80043e8 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80043d2:	2306      	movs	r3, #6
 80043d4:	617b      	str	r3, [r7, #20]
 80043d6:	e007      	b.n	80043e8 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80043d8:	79fb      	ldrb	r3, [r7, #7]
 80043da:	2b00      	cmp	r3, #0
 80043dc:	d102      	bne.n	80043e4 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80043de:	2309      	movs	r3, #9
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	e001      	b.n	80043e8 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80043e4:	2309      	movs	r3, #9
 80043e6:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	68db      	ldr	r3, [r3, #12]
 80043ec:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	68da      	ldr	r2, [r3, #12]
 80043f8:	697b      	ldr	r3, [r7, #20]
 80043fa:	029b      	lsls	r3, r3, #10
 80043fc:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004400:	431a      	orrs	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004406:	2300      	movs	r3, #0
}
 8004408:	4618      	mov	r0, r3
 800440a:	371c      	adds	r7, #28
 800440c:	46bd      	mov	sp, r7
 800440e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004412:	4770      	bx	lr
 8004414:	00d8acbf 	.word	0x00d8acbf
 8004418:	00e4e1c0 	.word	0x00e4e1c0
 800441c:	00f42400 	.word	0x00f42400
 8004420:	01067380 	.word	0x01067380
 8004424:	011a499f 	.word	0x011a499f
 8004428:	01312cff 	.word	0x01312cff
 800442c:	014ca43f 	.word	0x014ca43f
 8004430:	016e3600 	.word	0x016e3600
 8004434:	01a6ab1f 	.word	0x01a6ab1f
 8004438:	01e84800 	.word	0x01e84800

0800443c <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800443c:	b480      	push	{r7}
 800443e:	b083      	sub	sp, #12
 8004440:	af00      	add	r7, sp, #0
 8004442:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	689b      	ldr	r3, [r3, #8]
 8004448:	f043 0201 	orr.w	r2, r3, #1
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004450:	2300      	movs	r3, #0
}
 8004452:	4618      	mov	r0, r3
 8004454:	370c      	adds	r7, #12
 8004456:	46bd      	mov	sp, r7
 8004458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445c:	4770      	bx	lr

0800445e <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f023 0201 	bic.w	r2, r3, #1
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	4618      	mov	r0, r3
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800447e:	4770      	bx	lr

08004480 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004480:	b580      	push	{r7, lr}
 8004482:	b084      	sub	sp, #16
 8004484:	af00      	add	r7, sp, #0
 8004486:	6078      	str	r0, [r7, #4]
 8004488:	460b      	mov	r3, r1
 800448a:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800448c:	2300      	movs	r3, #0
 800448e:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	68db      	ldr	r3, [r3, #12]
 8004494:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800449c:	78fb      	ldrb	r3, [r7, #3]
 800449e:	2b01      	cmp	r3, #1
 80044a0:	d115      	bne.n	80044ce <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	68db      	ldr	r3, [r3, #12]
 80044a6:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044ae:	2001      	movs	r0, #1
 80044b0:	f7fc fdf6 	bl	80010a0 <HAL_Delay>
      ms++;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	3301      	adds	r3, #1
 80044b8:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80044ba:	6878      	ldr	r0, [r7, #4]
 80044bc:	f001 fa45 	bl	800594a <USB_GetMode>
 80044c0:	4603      	mov	r3, r0
 80044c2:	2b01      	cmp	r3, #1
 80044c4:	d01e      	beq.n	8004504 <USB_SetCurrentMode+0x84>
 80044c6:	68fb      	ldr	r3, [r7, #12]
 80044c8:	2b31      	cmp	r3, #49	; 0x31
 80044ca:	d9f0      	bls.n	80044ae <USB_SetCurrentMode+0x2e>
 80044cc:	e01a      	b.n	8004504 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80044ce:	78fb      	ldrb	r3, [r7, #3]
 80044d0:	2b00      	cmp	r3, #0
 80044d2:	d115      	bne.n	8004500 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	68db      	ldr	r3, [r3, #12]
 80044d8:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044e0:	2001      	movs	r0, #1
 80044e2:	f7fc fddd 	bl	80010a0 <HAL_Delay>
      ms++;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	3301      	adds	r3, #1
 80044ea:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f001 fa2c 	bl	800594a <USB_GetMode>
 80044f2:	4603      	mov	r3, r0
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d005      	beq.n	8004504 <USB_SetCurrentMode+0x84>
 80044f8:	68fb      	ldr	r3, [r7, #12]
 80044fa:	2b31      	cmp	r3, #49	; 0x31
 80044fc:	d9f0      	bls.n	80044e0 <USB_SetCurrentMode+0x60>
 80044fe:	e001      	b.n	8004504 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004500:	2301      	movs	r3, #1
 8004502:	e005      	b.n	8004510 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b32      	cmp	r3, #50	; 0x32
 8004508:	d101      	bne.n	800450e <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 800450a:	2301      	movs	r3, #1
 800450c:	e000      	b.n	8004510 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800450e:	2300      	movs	r3, #0
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	bd80      	pop	{r7, pc}

08004518 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004518:	b084      	sub	sp, #16
 800451a:	b580      	push	{r7, lr}
 800451c:	b086      	sub	sp, #24
 800451e:	af00      	add	r7, sp, #0
 8004520:	6078      	str	r0, [r7, #4]
 8004522:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004526:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 800452a:	2300      	movs	r3, #0
 800452c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004532:	2300      	movs	r3, #0
 8004534:	613b      	str	r3, [r7, #16]
 8004536:	e009      	b.n	800454c <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004538:	687a      	ldr	r2, [r7, #4]
 800453a:	693b      	ldr	r3, [r7, #16]
 800453c:	3340      	adds	r3, #64	; 0x40
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	4413      	add	r3, r2
 8004542:	2200      	movs	r2, #0
 8004544:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	3301      	adds	r3, #1
 800454a:	613b      	str	r3, [r7, #16]
 800454c:	693b      	ldr	r3, [r7, #16]
 800454e:	2b0e      	cmp	r3, #14
 8004550:	d9f2      	bls.n	8004538 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004552:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004554:	2b00      	cmp	r3, #0
 8004556:	d11c      	bne.n	8004592 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800455e:	685b      	ldr	r3, [r3, #4]
 8004560:	68fa      	ldr	r2, [r7, #12]
 8004562:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004566:	f043 0302 	orr.w	r3, r3, #2
 800456a:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004570:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	639a      	str	r2, [r3, #56]	; 0x38
 8004590:	e00b      	b.n	80045aa <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004596:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045b0:	461a      	mov	r2, r3
 80045b2:	2300      	movs	r3, #0
 80045b4:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045bc:	4619      	mov	r1, r3
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c4:	461a      	mov	r2, r3
 80045c6:	680b      	ldr	r3, [r1, #0]
 80045c8:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	d10c      	bne.n	80045ea <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80045d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d104      	bne.n	80045e0 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80045d6:	2100      	movs	r1, #0
 80045d8:	6878      	ldr	r0, [r7, #4]
 80045da:	f000 f965 	bl	80048a8 <USB_SetDevSpeed>
 80045de:	e008      	b.n	80045f2 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045e0:	2101      	movs	r1, #1
 80045e2:	6878      	ldr	r0, [r7, #4]
 80045e4:	f000 f960 	bl	80048a8 <USB_SetDevSpeed>
 80045e8:	e003      	b.n	80045f2 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045ea:	2103      	movs	r1, #3
 80045ec:	6878      	ldr	r0, [r7, #4]
 80045ee:	f000 f95b 	bl	80048a8 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045f2:	2110      	movs	r1, #16
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f8f3 	bl	80047e0 <USB_FlushTxFifo>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004604:	6878      	ldr	r0, [r7, #4]
 8004606:	f000 f91f 	bl	8004848 <USB_FlushRxFifo>
 800460a:	4603      	mov	r3, r0
 800460c:	2b00      	cmp	r3, #0
 800460e:	d001      	beq.n	8004614 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004610:	2301      	movs	r3, #1
 8004612:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800461a:	461a      	mov	r2, r3
 800461c:	2300      	movs	r3, #0
 800461e:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004626:	461a      	mov	r2, r3
 8004628:	2300      	movs	r3, #0
 800462a:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004632:	461a      	mov	r2, r3
 8004634:	2300      	movs	r3, #0
 8004636:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004638:	2300      	movs	r3, #0
 800463a:	613b      	str	r3, [r7, #16]
 800463c:	e043      	b.n	80046c6 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464a:	681b      	ldr	r3, [r3, #0]
 800464c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004650:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004654:	d118      	bne.n	8004688 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004656:	693b      	ldr	r3, [r7, #16]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d10a      	bne.n	8004672 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	015a      	lsls	r2, r3, #5
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	4413      	add	r3, r2
 8004664:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004668:	461a      	mov	r2, r3
 800466a:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800466e:	6013      	str	r3, [r2, #0]
 8004670:	e013      	b.n	800469a <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004672:	693b      	ldr	r3, [r7, #16]
 8004674:	015a      	lsls	r2, r3, #5
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	4413      	add	r3, r2
 800467a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800467e:	461a      	mov	r2, r3
 8004680:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004684:	6013      	str	r3, [r2, #0]
 8004686:	e008      	b.n	800469a <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	015a      	lsls	r2, r3, #5
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	4413      	add	r3, r2
 8004690:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004694:	461a      	mov	r2, r3
 8004696:	2300      	movs	r3, #0
 8004698:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	015a      	lsls	r2, r3, #5
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	4413      	add	r3, r2
 80046a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a6:	461a      	mov	r2, r3
 80046a8:	2300      	movs	r3, #0
 80046aa:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	015a      	lsls	r2, r3, #5
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	4413      	add	r3, r2
 80046b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b8:	461a      	mov	r2, r3
 80046ba:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046be:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046c0:	693b      	ldr	r3, [r7, #16]
 80046c2:	3301      	adds	r3, #1
 80046c4:	613b      	str	r3, [r7, #16]
 80046c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046c8:	693a      	ldr	r2, [r7, #16]
 80046ca:	429a      	cmp	r2, r3
 80046cc:	d3b7      	bcc.n	800463e <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046ce:	2300      	movs	r3, #0
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	e043      	b.n	800475c <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046d4:	693b      	ldr	r3, [r7, #16]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046e6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ea:	d118      	bne.n	800471e <USB_DevInit+0x206>
    {
      if (i == 0U)
 80046ec:	693b      	ldr	r3, [r7, #16]
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d10a      	bne.n	8004708 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046f2:	693b      	ldr	r3, [r7, #16]
 80046f4:	015a      	lsls	r2, r3, #5
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	4413      	add	r3, r2
 80046fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046fe:	461a      	mov	r2, r3
 8004700:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004704:	6013      	str	r3, [r2, #0]
 8004706:	e013      	b.n	8004730 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004708:	693b      	ldr	r3, [r7, #16]
 800470a:	015a      	lsls	r2, r3, #5
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	4413      	add	r3, r2
 8004710:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004714:	461a      	mov	r2, r3
 8004716:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800471a:	6013      	str	r3, [r2, #0]
 800471c:	e008      	b.n	8004730 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800471e:	693b      	ldr	r3, [r7, #16]
 8004720:	015a      	lsls	r2, r3, #5
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	4413      	add	r3, r2
 8004726:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800472a:	461a      	mov	r2, r3
 800472c:	2300      	movs	r3, #0
 800472e:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004730:	693b      	ldr	r3, [r7, #16]
 8004732:	015a      	lsls	r2, r3, #5
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	4413      	add	r3, r2
 8004738:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800473c:	461a      	mov	r2, r3
 800473e:	2300      	movs	r3, #0
 8004740:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800474e:	461a      	mov	r2, r3
 8004750:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004754:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004756:	693b      	ldr	r3, [r7, #16]
 8004758:	3301      	adds	r3, #1
 800475a:	613b      	str	r3, [r7, #16]
 800475c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800475e:	693a      	ldr	r2, [r7, #16]
 8004760:	429a      	cmp	r2, r3
 8004762:	d3b7      	bcc.n	80046d4 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	68fa      	ldr	r2, [r7, #12]
 800476e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004772:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004776:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	2200      	movs	r2, #0
 800477c:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004784:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004788:	2b00      	cmp	r3, #0
 800478a:	d105      	bne.n	8004798 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	f043 0210 	orr.w	r2, r3, #16
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699a      	ldr	r2, [r3, #24]
 800479c:	4b0f      	ldr	r3, [pc, #60]	; (80047dc <USB_DevInit+0x2c4>)
 800479e:	4313      	orrs	r3, r2
 80047a0:	687a      	ldr	r2, [r7, #4]
 80047a2:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d005      	beq.n	80047b6 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	f043 0208 	orr.w	r2, r3, #8
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047b6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047b8:	2b01      	cmp	r3, #1
 80047ba:	d107      	bne.n	80047cc <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	699b      	ldr	r3, [r3, #24]
 80047c0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047c4:	f043 0304 	orr.w	r3, r3, #4
 80047c8:	687a      	ldr	r2, [r7, #4]
 80047ca:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80047cc:	7dfb      	ldrb	r3, [r7, #23]
}
 80047ce:	4618      	mov	r0, r3
 80047d0:	3718      	adds	r7, #24
 80047d2:	46bd      	mov	sp, r7
 80047d4:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047d8:	b004      	add	sp, #16
 80047da:	4770      	bx	lr
 80047dc:	803c3800 	.word	0x803c3800

080047e0 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b085      	sub	sp, #20
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047ea:	2300      	movs	r3, #0
 80047ec:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	3301      	adds	r3, #1
 80047f2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	4a13      	ldr	r2, [pc, #76]	; (8004844 <USB_FlushTxFifo+0x64>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d901      	bls.n	8004800 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80047fc:	2303      	movs	r3, #3
 80047fe:	e01b      	b.n	8004838 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	2b00      	cmp	r3, #0
 8004806:	daf2      	bge.n	80047ee <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004808:	2300      	movs	r3, #0
 800480a:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	019b      	lsls	r3, r3, #6
 8004810:	f043 0220 	orr.w	r2, r3, #32
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	3301      	adds	r3, #1
 800481c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	4a08      	ldr	r2, [pc, #32]	; (8004844 <USB_FlushTxFifo+0x64>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d901      	bls.n	800482a <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004826:	2303      	movs	r3, #3
 8004828:	e006      	b.n	8004838 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	691b      	ldr	r3, [r3, #16]
 800482e:	f003 0320 	and.w	r3, r3, #32
 8004832:	2b20      	cmp	r3, #32
 8004834:	d0f0      	beq.n	8004818 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004836:	2300      	movs	r3, #0
}
 8004838:	4618      	mov	r0, r3
 800483a:	3714      	adds	r7, #20
 800483c:	46bd      	mov	sp, r7
 800483e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004842:	4770      	bx	lr
 8004844:	00030d40 	.word	0x00030d40

08004848 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004848:	b480      	push	{r7}
 800484a:	b085      	sub	sp, #20
 800484c:	af00      	add	r7, sp, #0
 800484e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004850:	2300      	movs	r3, #0
 8004852:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	3301      	adds	r3, #1
 8004858:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800485a:	68fb      	ldr	r3, [r7, #12]
 800485c:	4a11      	ldr	r2, [pc, #68]	; (80048a4 <USB_FlushRxFifo+0x5c>)
 800485e:	4293      	cmp	r3, r2
 8004860:	d901      	bls.n	8004866 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004862:	2303      	movs	r3, #3
 8004864:	e018      	b.n	8004898 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	691b      	ldr	r3, [r3, #16]
 800486a:	2b00      	cmp	r3, #0
 800486c:	daf2      	bge.n	8004854 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800486e:	2300      	movs	r3, #0
 8004870:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	2210      	movs	r2, #16
 8004876:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	3301      	adds	r3, #1
 800487c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	4a08      	ldr	r2, [pc, #32]	; (80048a4 <USB_FlushRxFifo+0x5c>)
 8004882:	4293      	cmp	r3, r2
 8004884:	d901      	bls.n	800488a <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004886:	2303      	movs	r3, #3
 8004888:	e006      	b.n	8004898 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	691b      	ldr	r3, [r3, #16]
 800488e:	f003 0310 	and.w	r3, r3, #16
 8004892:	2b10      	cmp	r3, #16
 8004894:	d0f0      	beq.n	8004878 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004896:	2300      	movs	r3, #0
}
 8004898:	4618      	mov	r0, r3
 800489a:	3714      	adds	r7, #20
 800489c:	46bd      	mov	sp, r7
 800489e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a2:	4770      	bx	lr
 80048a4:	00030d40 	.word	0x00030d40

080048a8 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b085      	sub	sp, #20
 80048ac:	af00      	add	r7, sp, #0
 80048ae:	6078      	str	r0, [r7, #4]
 80048b0:	460b      	mov	r3, r1
 80048b2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	78fb      	ldrb	r3, [r7, #3]
 80048c2:	68f9      	ldr	r1, [r7, #12]
 80048c4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048c8:	4313      	orrs	r3, r2
 80048ca:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80048cc:	2300      	movs	r3, #0
}
 80048ce:	4618      	mov	r0, r3
 80048d0:	3714      	adds	r7, #20
 80048d2:	46bd      	mov	sp, r7
 80048d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048d8:	4770      	bx	lr

080048da <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80048da:	b480      	push	{r7}
 80048dc:	b087      	sub	sp, #28
 80048de:	af00      	add	r7, sp, #0
 80048e0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80048e6:	693b      	ldr	r3, [r7, #16]
 80048e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 0306 	and.w	r3, r3, #6
 80048f2:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80048f4:	68fb      	ldr	r3, [r7, #12]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d102      	bne.n	8004900 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80048fa:	2300      	movs	r3, #0
 80048fc:	75fb      	strb	r3, [r7, #23]
 80048fe:	e00a      	b.n	8004916 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b02      	cmp	r3, #2
 8004904:	d002      	beq.n	800490c <USB_GetDevSpeed+0x32>
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	2b06      	cmp	r3, #6
 800490a:	d102      	bne.n	8004912 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 800490c:	2302      	movs	r3, #2
 800490e:	75fb      	strb	r3, [r7, #23]
 8004910:	e001      	b.n	8004916 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004912:	230f      	movs	r3, #15
 8004914:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004916:	7dfb      	ldrb	r3, [r7, #23]
}
 8004918:	4618      	mov	r0, r3
 800491a:	371c      	adds	r7, #28
 800491c:	46bd      	mov	sp, r7
 800491e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004922:	4770      	bx	lr

08004924 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004924:	b480      	push	{r7}
 8004926:	b085      	sub	sp, #20
 8004928:	af00      	add	r7, sp, #0
 800492a:	6078      	str	r0, [r7, #4]
 800492c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	781b      	ldrb	r3, [r3, #0]
 8004936:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004938:	683b      	ldr	r3, [r7, #0]
 800493a:	785b      	ldrb	r3, [r3, #1]
 800493c:	2b01      	cmp	r3, #1
 800493e:	d13a      	bne.n	80049b6 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004946:	69da      	ldr	r2, [r3, #28]
 8004948:	683b      	ldr	r3, [r7, #0]
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	f003 030f 	and.w	r3, r3, #15
 8004950:	2101      	movs	r1, #1
 8004952:	fa01 f303 	lsl.w	r3, r1, r3
 8004956:	b29b      	uxth	r3, r3
 8004958:	68f9      	ldr	r1, [r7, #12]
 800495a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800495e:	4313      	orrs	r3, r2
 8004960:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004962:	68bb      	ldr	r3, [r7, #8]
 8004964:	015a      	lsls	r2, r3, #5
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	4413      	add	r3, r2
 800496a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004974:	2b00      	cmp	r3, #0
 8004976:	d155      	bne.n	8004a24 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004978:	68bb      	ldr	r3, [r7, #8]
 800497a:	015a      	lsls	r2, r3, #5
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	4413      	add	r3, r2
 8004980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	68db      	ldr	r3, [r3, #12]
 800498a:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	791b      	ldrb	r3, [r3, #4]
 8004992:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004994:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	059b      	lsls	r3, r3, #22
 800499a:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 800499c:	4313      	orrs	r3, r2
 800499e:	68ba      	ldr	r2, [r7, #8]
 80049a0:	0151      	lsls	r1, r2, #5
 80049a2:	68fa      	ldr	r2, [r7, #12]
 80049a4:	440a      	add	r2, r1
 80049a6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049b2:	6013      	str	r3, [r2, #0]
 80049b4:	e036      	b.n	8004a24 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049bc:	69da      	ldr	r2, [r3, #28]
 80049be:	683b      	ldr	r3, [r7, #0]
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	f003 030f 	and.w	r3, r3, #15
 80049c6:	2101      	movs	r1, #1
 80049c8:	fa01 f303 	lsl.w	r3, r1, r3
 80049cc:	041b      	lsls	r3, r3, #16
 80049ce:	68f9      	ldr	r1, [r7, #12]
 80049d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049d4:	4313      	orrs	r3, r2
 80049d6:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80049d8:	68bb      	ldr	r3, [r7, #8]
 80049da:	015a      	lsls	r2, r3, #5
 80049dc:	68fb      	ldr	r3, [r7, #12]
 80049de:	4413      	add	r3, r2
 80049e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d11a      	bne.n	8004a24 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	015a      	lsls	r2, r3, #5
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	4413      	add	r3, r2
 80049f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049fa:	681a      	ldr	r2, [r3, #0]
 80049fc:	683b      	ldr	r3, [r7, #0]
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	791b      	ldrb	r3, [r3, #4]
 8004a08:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a0a:	430b      	orrs	r3, r1
 8004a0c:	4313      	orrs	r3, r2
 8004a0e:	68ba      	ldr	r2, [r7, #8]
 8004a10:	0151      	lsls	r1, r2, #5
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	440a      	add	r2, r1
 8004a16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a1e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a22:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a24:	2300      	movs	r3, #0
}
 8004a26:	4618      	mov	r0, r3
 8004a28:	3714      	adds	r7, #20
 8004a2a:	46bd      	mov	sp, r7
 8004a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a30:	4770      	bx	lr
	...

08004a34 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a34:	b480      	push	{r7}
 8004a36:	b085      	sub	sp, #20
 8004a38:	af00      	add	r7, sp, #0
 8004a3a:	6078      	str	r0, [r7, #4]
 8004a3c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a42:	683b      	ldr	r3, [r7, #0]
 8004a44:	781b      	ldrb	r3, [r3, #0]
 8004a46:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004a48:	683b      	ldr	r3, [r7, #0]
 8004a4a:	785b      	ldrb	r3, [r3, #1]
 8004a4c:	2b01      	cmp	r3, #1
 8004a4e:	d161      	bne.n	8004b14 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a50:	68bb      	ldr	r3, [r7, #8]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a66:	d11f      	bne.n	8004aa8 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	015a      	lsls	r2, r3, #5
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	4413      	add	r3, r2
 8004a70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	0151      	lsls	r1, r2, #5
 8004a7a:	68fa      	ldr	r2, [r7, #12]
 8004a7c:	440a      	add	r2, r1
 8004a7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a82:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a86:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a88:	68bb      	ldr	r3, [r7, #8]
 8004a8a:	015a      	lsls	r2, r3, #5
 8004a8c:	68fb      	ldr	r3, [r7, #12]
 8004a8e:	4413      	add	r3, r2
 8004a90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	68ba      	ldr	r2, [r7, #8]
 8004a98:	0151      	lsls	r1, r2, #5
 8004a9a:	68fa      	ldr	r2, [r7, #12]
 8004a9c:	440a      	add	r2, r1
 8004a9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aa2:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004aa6:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aae:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ab0:	683b      	ldr	r3, [r7, #0]
 8004ab2:	781b      	ldrb	r3, [r3, #0]
 8004ab4:	f003 030f 	and.w	r3, r3, #15
 8004ab8:	2101      	movs	r1, #1
 8004aba:	fa01 f303 	lsl.w	r3, r1, r3
 8004abe:	b29b      	uxth	r3, r3
 8004ac0:	43db      	mvns	r3, r3
 8004ac2:	68f9      	ldr	r1, [r7, #12]
 8004ac4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ac8:	4013      	ands	r3, r2
 8004aca:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ad2:	69da      	ldr	r2, [r3, #28]
 8004ad4:	683b      	ldr	r3, [r7, #0]
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	f003 030f 	and.w	r3, r3, #15
 8004adc:	2101      	movs	r1, #1
 8004ade:	fa01 f303 	lsl.w	r3, r1, r3
 8004ae2:	b29b      	uxth	r3, r3
 8004ae4:	43db      	mvns	r3, r3
 8004ae6:	68f9      	ldr	r1, [r7, #12]
 8004ae8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004aec:	4013      	ands	r3, r2
 8004aee:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004af0:	68bb      	ldr	r3, [r7, #8]
 8004af2:	015a      	lsls	r2, r3, #5
 8004af4:	68fb      	ldr	r3, [r7, #12]
 8004af6:	4413      	add	r3, r2
 8004af8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004afc:	681a      	ldr	r2, [r3, #0]
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	0159      	lsls	r1, r3, #5
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	440b      	add	r3, r1
 8004b06:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b0a:	4619      	mov	r1, r3
 8004b0c:	4b35      	ldr	r3, [pc, #212]	; (8004be4 <USB_DeactivateEndpoint+0x1b0>)
 8004b0e:	4013      	ands	r3, r2
 8004b10:	600b      	str	r3, [r1, #0]
 8004b12:	e060      	b.n	8004bd6 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b14:	68bb      	ldr	r3, [r7, #8]
 8004b16:	015a      	lsls	r2, r3, #5
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	4413      	add	r3, r2
 8004b1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b26:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b2a:	d11f      	bne.n	8004b6c <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	015a      	lsls	r2, r3, #5
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	4413      	add	r3, r2
 8004b34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	68ba      	ldr	r2, [r7, #8]
 8004b3c:	0151      	lsls	r1, r2, #5
 8004b3e:	68fa      	ldr	r2, [r7, #12]
 8004b40:	440a      	add	r2, r1
 8004b42:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b46:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b4a:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	015a      	lsls	r2, r3, #5
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	4413      	add	r3, r2
 8004b54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	68ba      	ldr	r2, [r7, #8]
 8004b5c:	0151      	lsls	r1, r2, #5
 8004b5e:	68fa      	ldr	r2, [r7, #12]
 8004b60:	440a      	add	r2, r1
 8004b62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b66:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b6a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b72:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b74:	683b      	ldr	r3, [r7, #0]
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	f003 030f 	and.w	r3, r3, #15
 8004b7c:	2101      	movs	r1, #1
 8004b7e:	fa01 f303 	lsl.w	r3, r1, r3
 8004b82:	041b      	lsls	r3, r3, #16
 8004b84:	43db      	mvns	r3, r3
 8004b86:	68f9      	ldr	r1, [r7, #12]
 8004b88:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b8c:	4013      	ands	r3, r2
 8004b8e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b96:	69da      	ldr	r2, [r3, #28]
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	781b      	ldrb	r3, [r3, #0]
 8004b9c:	f003 030f 	and.w	r3, r3, #15
 8004ba0:	2101      	movs	r1, #1
 8004ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8004ba6:	041b      	lsls	r3, r3, #16
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	68f9      	ldr	r1, [r7, #12]
 8004bac:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bb0:	4013      	ands	r3, r2
 8004bb2:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004bb4:	68bb      	ldr	r3, [r7, #8]
 8004bb6:	015a      	lsls	r2, r3, #5
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	4413      	add	r3, r2
 8004bbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bc0:	681a      	ldr	r2, [r3, #0]
 8004bc2:	68bb      	ldr	r3, [r7, #8]
 8004bc4:	0159      	lsls	r1, r3, #5
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	440b      	add	r3, r1
 8004bca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bce:	4619      	mov	r1, r3
 8004bd0:	4b05      	ldr	r3, [pc, #20]	; (8004be8 <USB_DeactivateEndpoint+0x1b4>)
 8004bd2:	4013      	ands	r3, r2
 8004bd4:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004bd6:	2300      	movs	r3, #0
}
 8004bd8:	4618      	mov	r0, r3
 8004bda:	3714      	adds	r7, #20
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	ec337800 	.word	0xec337800
 8004be8:	eff37800 	.word	0xeff37800

08004bec <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b08a      	sub	sp, #40	; 0x28
 8004bf0:	af02      	add	r7, sp, #8
 8004bf2:	60f8      	str	r0, [r7, #12]
 8004bf4:	60b9      	str	r1, [r7, #8]
 8004bf6:	4613      	mov	r3, r2
 8004bf8:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004bfe:	68bb      	ldr	r3, [r7, #8]
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c04:	68bb      	ldr	r3, [r7, #8]
 8004c06:	785b      	ldrb	r3, [r3, #1]
 8004c08:	2b01      	cmp	r3, #1
 8004c0a:	f040 815c 	bne.w	8004ec6 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c0e:	68bb      	ldr	r3, [r7, #8]
 8004c10:	699b      	ldr	r3, [r3, #24]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d132      	bne.n	8004c7c <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c16:	69bb      	ldr	r3, [r7, #24]
 8004c18:	015a      	lsls	r2, r3, #5
 8004c1a:	69fb      	ldr	r3, [r7, #28]
 8004c1c:	4413      	add	r3, r2
 8004c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c22:	691b      	ldr	r3, [r3, #16]
 8004c24:	69ba      	ldr	r2, [r7, #24]
 8004c26:	0151      	lsls	r1, r2, #5
 8004c28:	69fa      	ldr	r2, [r7, #28]
 8004c2a:	440a      	add	r2, r1
 8004c2c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c30:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c34:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c38:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c3a:	69bb      	ldr	r3, [r7, #24]
 8004c3c:	015a      	lsls	r2, r3, #5
 8004c3e:	69fb      	ldr	r3, [r7, #28]
 8004c40:	4413      	add	r3, r2
 8004c42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c46:	691b      	ldr	r3, [r3, #16]
 8004c48:	69ba      	ldr	r2, [r7, #24]
 8004c4a:	0151      	lsls	r1, r2, #5
 8004c4c:	69fa      	ldr	r2, [r7, #28]
 8004c4e:	440a      	add	r2, r1
 8004c50:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c58:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c5a:	69bb      	ldr	r3, [r7, #24]
 8004c5c:	015a      	lsls	r2, r3, #5
 8004c5e:	69fb      	ldr	r3, [r7, #28]
 8004c60:	4413      	add	r3, r2
 8004c62:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c66:	691b      	ldr	r3, [r3, #16]
 8004c68:	69ba      	ldr	r2, [r7, #24]
 8004c6a:	0151      	lsls	r1, r2, #5
 8004c6c:	69fa      	ldr	r2, [r7, #28]
 8004c6e:	440a      	add	r2, r1
 8004c70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c74:	0cdb      	lsrs	r3, r3, #19
 8004c76:	04db      	lsls	r3, r3, #19
 8004c78:	6113      	str	r3, [r2, #16]
 8004c7a:	e074      	b.n	8004d66 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c7c:	69bb      	ldr	r3, [r7, #24]
 8004c7e:	015a      	lsls	r2, r3, #5
 8004c80:	69fb      	ldr	r3, [r7, #28]
 8004c82:	4413      	add	r3, r2
 8004c84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c88:	691b      	ldr	r3, [r3, #16]
 8004c8a:	69ba      	ldr	r2, [r7, #24]
 8004c8c:	0151      	lsls	r1, r2, #5
 8004c8e:	69fa      	ldr	r2, [r7, #28]
 8004c90:	440a      	add	r2, r1
 8004c92:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c96:	0cdb      	lsrs	r3, r3, #19
 8004c98:	04db      	lsls	r3, r3, #19
 8004c9a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c9c:	69bb      	ldr	r3, [r7, #24]
 8004c9e:	015a      	lsls	r2, r3, #5
 8004ca0:	69fb      	ldr	r3, [r7, #28]
 8004ca2:	4413      	add	r3, r2
 8004ca4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca8:	691b      	ldr	r3, [r3, #16]
 8004caa:	69ba      	ldr	r2, [r7, #24]
 8004cac:	0151      	lsls	r1, r2, #5
 8004cae:	69fa      	ldr	r2, [r7, #28]
 8004cb0:	440a      	add	r2, r1
 8004cb2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb6:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cba:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cbe:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004cc0:	69bb      	ldr	r3, [r7, #24]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ccc:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004cce:	68bb      	ldr	r3, [r7, #8]
 8004cd0:	6999      	ldr	r1, [r3, #24]
 8004cd2:	68bb      	ldr	r3, [r7, #8]
 8004cd4:	68db      	ldr	r3, [r3, #12]
 8004cd6:	440b      	add	r3, r1
 8004cd8:	1e59      	subs	r1, r3, #1
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	68db      	ldr	r3, [r3, #12]
 8004cde:	fbb1 f3f3 	udiv	r3, r1, r3
 8004ce2:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ce4:	4b9d      	ldr	r3, [pc, #628]	; (8004f5c <USB_EPStartXfer+0x370>)
 8004ce6:	400b      	ands	r3, r1
 8004ce8:	69b9      	ldr	r1, [r7, #24]
 8004cea:	0148      	lsls	r0, r1, #5
 8004cec:	69f9      	ldr	r1, [r7, #28]
 8004cee:	4401      	add	r1, r0
 8004cf0:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004cf4:	4313      	orrs	r3, r2
 8004cf6:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004cf8:	69bb      	ldr	r3, [r7, #24]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	69fb      	ldr	r3, [r7, #28]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d04:	691a      	ldr	r2, [r3, #16]
 8004d06:	68bb      	ldr	r3, [r7, #8]
 8004d08:	699b      	ldr	r3, [r3, #24]
 8004d0a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d0e:	69b9      	ldr	r1, [r7, #24]
 8004d10:	0148      	lsls	r0, r1, #5
 8004d12:	69f9      	ldr	r1, [r7, #28]
 8004d14:	4401      	add	r1, r0
 8004d16:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d1a:	4313      	orrs	r3, r2
 8004d1c:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004d1e:	68bb      	ldr	r3, [r7, #8]
 8004d20:	791b      	ldrb	r3, [r3, #4]
 8004d22:	2b01      	cmp	r3, #1
 8004d24:	d11f      	bne.n	8004d66 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d26:	69bb      	ldr	r3, [r7, #24]
 8004d28:	015a      	lsls	r2, r3, #5
 8004d2a:	69fb      	ldr	r3, [r7, #28]
 8004d2c:	4413      	add	r3, r2
 8004d2e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d32:	691b      	ldr	r3, [r3, #16]
 8004d34:	69ba      	ldr	r2, [r7, #24]
 8004d36:	0151      	lsls	r1, r2, #5
 8004d38:	69fa      	ldr	r2, [r7, #28]
 8004d3a:	440a      	add	r2, r1
 8004d3c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d40:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004d44:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	015a      	lsls	r2, r3, #5
 8004d4a:	69fb      	ldr	r3, [r7, #28]
 8004d4c:	4413      	add	r3, r2
 8004d4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d52:	691b      	ldr	r3, [r3, #16]
 8004d54:	69ba      	ldr	r2, [r7, #24]
 8004d56:	0151      	lsls	r1, r2, #5
 8004d58:	69fa      	ldr	r2, [r7, #28]
 8004d5a:	440a      	add	r2, r1
 8004d5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d60:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d64:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004d66:	79fb      	ldrb	r3, [r7, #7]
 8004d68:	2b01      	cmp	r3, #1
 8004d6a:	d14b      	bne.n	8004e04 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d6c:	68bb      	ldr	r3, [r7, #8]
 8004d6e:	695b      	ldr	r3, [r3, #20]
 8004d70:	2b00      	cmp	r3, #0
 8004d72:	d009      	beq.n	8004d88 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d74:	69bb      	ldr	r3, [r7, #24]
 8004d76:	015a      	lsls	r2, r3, #5
 8004d78:	69fb      	ldr	r3, [r7, #28]
 8004d7a:	4413      	add	r3, r2
 8004d7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d80:	461a      	mov	r2, r3
 8004d82:	68bb      	ldr	r3, [r7, #8]
 8004d84:	695b      	ldr	r3, [r3, #20]
 8004d86:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d88:	68bb      	ldr	r3, [r7, #8]
 8004d8a:	791b      	ldrb	r3, [r3, #4]
 8004d8c:	2b01      	cmp	r3, #1
 8004d8e:	d128      	bne.n	8004de2 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d90:	69fb      	ldr	r3, [r7, #28]
 8004d92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9c:	2b00      	cmp	r3, #0
 8004d9e:	d110      	bne.n	8004dc2 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004da0:	69bb      	ldr	r3, [r7, #24]
 8004da2:	015a      	lsls	r2, r3, #5
 8004da4:	69fb      	ldr	r3, [r7, #28]
 8004da6:	4413      	add	r3, r2
 8004da8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	69ba      	ldr	r2, [r7, #24]
 8004db0:	0151      	lsls	r1, r2, #5
 8004db2:	69fa      	ldr	r2, [r7, #28]
 8004db4:	440a      	add	r2, r1
 8004db6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dba:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dbe:	6013      	str	r3, [r2, #0]
 8004dc0:	e00f      	b.n	8004de2 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	015a      	lsls	r2, r3, #5
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	4413      	add	r3, r2
 8004dca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	69ba      	ldr	r2, [r7, #24]
 8004dd2:	0151      	lsls	r1, r2, #5
 8004dd4:	69fa      	ldr	r2, [r7, #28]
 8004dd6:	440a      	add	r2, r1
 8004dd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ddc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004de0:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004de2:	69bb      	ldr	r3, [r7, #24]
 8004de4:	015a      	lsls	r2, r3, #5
 8004de6:	69fb      	ldr	r3, [r7, #28]
 8004de8:	4413      	add	r3, r2
 8004dea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	69ba      	ldr	r2, [r7, #24]
 8004df2:	0151      	lsls	r1, r2, #5
 8004df4:	69fa      	ldr	r2, [r7, #28]
 8004df6:	440a      	add	r2, r1
 8004df8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dfc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e00:	6013      	str	r3, [r2, #0]
 8004e02:	e133      	b.n	800506c <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e04:	69bb      	ldr	r3, [r7, #24]
 8004e06:	015a      	lsls	r2, r3, #5
 8004e08:	69fb      	ldr	r3, [r7, #28]
 8004e0a:	4413      	add	r3, r2
 8004e0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	69ba      	ldr	r2, [r7, #24]
 8004e14:	0151      	lsls	r1, r2, #5
 8004e16:	69fa      	ldr	r2, [r7, #28]
 8004e18:	440a      	add	r2, r1
 8004e1a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e1e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e22:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e24:	68bb      	ldr	r3, [r7, #8]
 8004e26:	791b      	ldrb	r3, [r3, #4]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d015      	beq.n	8004e58 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004e2c:	68bb      	ldr	r3, [r7, #8]
 8004e2e:	699b      	ldr	r3, [r3, #24]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	f000 811b 	beq.w	800506c <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e36:	69fb      	ldr	r3, [r7, #28]
 8004e38:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e3e:	68bb      	ldr	r3, [r7, #8]
 8004e40:	781b      	ldrb	r3, [r3, #0]
 8004e42:	f003 030f 	and.w	r3, r3, #15
 8004e46:	2101      	movs	r1, #1
 8004e48:	fa01 f303 	lsl.w	r3, r1, r3
 8004e4c:	69f9      	ldr	r1, [r7, #28]
 8004e4e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e52:	4313      	orrs	r3, r2
 8004e54:	634b      	str	r3, [r1, #52]	; 0x34
 8004e56:	e109      	b.n	800506c <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e5e:	689b      	ldr	r3, [r3, #8]
 8004e60:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d110      	bne.n	8004e8a <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e68:	69bb      	ldr	r3, [r7, #24]
 8004e6a:	015a      	lsls	r2, r3, #5
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	4413      	add	r3, r2
 8004e70:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	69ba      	ldr	r2, [r7, #24]
 8004e78:	0151      	lsls	r1, r2, #5
 8004e7a:	69fa      	ldr	r2, [r7, #28]
 8004e7c:	440a      	add	r2, r1
 8004e7e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e82:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e86:	6013      	str	r3, [r2, #0]
 8004e88:	e00f      	b.n	8004eaa <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e8a:	69bb      	ldr	r3, [r7, #24]
 8004e8c:	015a      	lsls	r2, r3, #5
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	4413      	add	r3, r2
 8004e92:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	69ba      	ldr	r2, [r7, #24]
 8004e9a:	0151      	lsls	r1, r2, #5
 8004e9c:	69fa      	ldr	r2, [r7, #28]
 8004e9e:	440a      	add	r2, r1
 8004ea0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ea4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004ea8:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004eaa:	68bb      	ldr	r3, [r7, #8]
 8004eac:	6919      	ldr	r1, [r3, #16]
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	781a      	ldrb	r2, [r3, #0]
 8004eb2:	68bb      	ldr	r3, [r7, #8]
 8004eb4:	699b      	ldr	r3, [r3, #24]
 8004eb6:	b298      	uxth	r0, r3
 8004eb8:	79fb      	ldrb	r3, [r7, #7]
 8004eba:	9300      	str	r3, [sp, #0]
 8004ebc:	4603      	mov	r3, r0
 8004ebe:	68f8      	ldr	r0, [r7, #12]
 8004ec0:	f000 fade 	bl	8005480 <USB_WritePacket>
 8004ec4:	e0d2      	b.n	800506c <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ec6:	69bb      	ldr	r3, [r7, #24]
 8004ec8:	015a      	lsls	r2, r3, #5
 8004eca:	69fb      	ldr	r3, [r7, #28]
 8004ecc:	4413      	add	r3, r2
 8004ece:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed2:	691b      	ldr	r3, [r3, #16]
 8004ed4:	69ba      	ldr	r2, [r7, #24]
 8004ed6:	0151      	lsls	r1, r2, #5
 8004ed8:	69fa      	ldr	r2, [r7, #28]
 8004eda:	440a      	add	r2, r1
 8004edc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee0:	0cdb      	lsrs	r3, r3, #19
 8004ee2:	04db      	lsls	r3, r3, #19
 8004ee4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ee6:	69bb      	ldr	r3, [r7, #24]
 8004ee8:	015a      	lsls	r2, r3, #5
 8004eea:	69fb      	ldr	r3, [r7, #28]
 8004eec:	4413      	add	r3, r2
 8004eee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ef2:	691b      	ldr	r3, [r3, #16]
 8004ef4:	69ba      	ldr	r2, [r7, #24]
 8004ef6:	0151      	lsls	r1, r2, #5
 8004ef8:	69fa      	ldr	r2, [r7, #28]
 8004efa:	440a      	add	r2, r1
 8004efc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f00:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f04:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f08:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	699b      	ldr	r3, [r3, #24]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d126      	bne.n	8004f60 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f12:	69bb      	ldr	r3, [r7, #24]
 8004f14:	015a      	lsls	r2, r3, #5
 8004f16:	69fb      	ldr	r3, [r7, #28]
 8004f18:	4413      	add	r3, r2
 8004f1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f1e:	691a      	ldr	r2, [r3, #16]
 8004f20:	68bb      	ldr	r3, [r7, #8]
 8004f22:	68db      	ldr	r3, [r3, #12]
 8004f24:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f28:	69b9      	ldr	r1, [r7, #24]
 8004f2a:	0148      	lsls	r0, r1, #5
 8004f2c:	69f9      	ldr	r1, [r7, #28]
 8004f2e:	4401      	add	r1, r0
 8004f30:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f34:	4313      	orrs	r3, r2
 8004f36:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f38:	69bb      	ldr	r3, [r7, #24]
 8004f3a:	015a      	lsls	r2, r3, #5
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	4413      	add	r3, r2
 8004f40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f44:	691b      	ldr	r3, [r3, #16]
 8004f46:	69ba      	ldr	r2, [r7, #24]
 8004f48:	0151      	lsls	r1, r2, #5
 8004f4a:	69fa      	ldr	r2, [r7, #28]
 8004f4c:	440a      	add	r2, r1
 8004f4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f52:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f56:	6113      	str	r3, [r2, #16]
 8004f58:	e03a      	b.n	8004fd0 <USB_EPStartXfer+0x3e4>
 8004f5a:	bf00      	nop
 8004f5c:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f60:	68bb      	ldr	r3, [r7, #8]
 8004f62:	699a      	ldr	r2, [r3, #24]
 8004f64:	68bb      	ldr	r3, [r7, #8]
 8004f66:	68db      	ldr	r3, [r3, #12]
 8004f68:	4413      	add	r3, r2
 8004f6a:	1e5a      	subs	r2, r3, #1
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	68db      	ldr	r3, [r3, #12]
 8004f70:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f74:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004f76:	68bb      	ldr	r3, [r7, #8]
 8004f78:	68db      	ldr	r3, [r3, #12]
 8004f7a:	8afa      	ldrh	r2, [r7, #22]
 8004f7c:	fb03 f202 	mul.w	r2, r3, r2
 8004f80:	68bb      	ldr	r3, [r7, #8]
 8004f82:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f84:	69bb      	ldr	r3, [r7, #24]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	69fb      	ldr	r3, [r7, #28]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f90:	691a      	ldr	r2, [r3, #16]
 8004f92:	8afb      	ldrh	r3, [r7, #22]
 8004f94:	04d9      	lsls	r1, r3, #19
 8004f96:	4b38      	ldr	r3, [pc, #224]	; (8005078 <USB_EPStartXfer+0x48c>)
 8004f98:	400b      	ands	r3, r1
 8004f9a:	69b9      	ldr	r1, [r7, #24]
 8004f9c:	0148      	lsls	r0, r1, #5
 8004f9e:	69f9      	ldr	r1, [r7, #28]
 8004fa0:	4401      	add	r1, r0
 8004fa2:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fa6:	4313      	orrs	r3, r2
 8004fa8:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004faa:	69bb      	ldr	r3, [r7, #24]
 8004fac:	015a      	lsls	r2, r3, #5
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	4413      	add	r3, r2
 8004fb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb6:	691a      	ldr	r2, [r3, #16]
 8004fb8:	68bb      	ldr	r3, [r7, #8]
 8004fba:	69db      	ldr	r3, [r3, #28]
 8004fbc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fc0:	69b9      	ldr	r1, [r7, #24]
 8004fc2:	0148      	lsls	r0, r1, #5
 8004fc4:	69f9      	ldr	r1, [r7, #28]
 8004fc6:	4401      	add	r1, r0
 8004fc8:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fcc:	4313      	orrs	r3, r2
 8004fce:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004fd0:	79fb      	ldrb	r3, [r7, #7]
 8004fd2:	2b01      	cmp	r3, #1
 8004fd4:	d10d      	bne.n	8004ff2 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004fd6:	68bb      	ldr	r3, [r7, #8]
 8004fd8:	691b      	ldr	r3, [r3, #16]
 8004fda:	2b00      	cmp	r3, #0
 8004fdc:	d009      	beq.n	8004ff2 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004fde:	68bb      	ldr	r3, [r7, #8]
 8004fe0:	6919      	ldr	r1, [r3, #16]
 8004fe2:	69bb      	ldr	r3, [r7, #24]
 8004fe4:	015a      	lsls	r2, r3, #5
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	4413      	add	r3, r2
 8004fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fee:	460a      	mov	r2, r1
 8004ff0:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	791b      	ldrb	r3, [r3, #4]
 8004ff6:	2b01      	cmp	r3, #1
 8004ff8:	d128      	bne.n	800504c <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005000:	689b      	ldr	r3, [r3, #8]
 8005002:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005006:	2b00      	cmp	r3, #0
 8005008:	d110      	bne.n	800502c <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800500a:	69bb      	ldr	r3, [r7, #24]
 800500c:	015a      	lsls	r2, r3, #5
 800500e:	69fb      	ldr	r3, [r7, #28]
 8005010:	4413      	add	r3, r2
 8005012:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	69ba      	ldr	r2, [r7, #24]
 800501a:	0151      	lsls	r1, r2, #5
 800501c:	69fa      	ldr	r2, [r7, #28]
 800501e:	440a      	add	r2, r1
 8005020:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005024:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005028:	6013      	str	r3, [r2, #0]
 800502a:	e00f      	b.n	800504c <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 800502c:	69bb      	ldr	r3, [r7, #24]
 800502e:	015a      	lsls	r2, r3, #5
 8005030:	69fb      	ldr	r3, [r7, #28]
 8005032:	4413      	add	r3, r2
 8005034:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	69ba      	ldr	r2, [r7, #24]
 800503c:	0151      	lsls	r1, r2, #5
 800503e:	69fa      	ldr	r2, [r7, #28]
 8005040:	440a      	add	r2, r1
 8005042:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005046:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800504a:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800504c:	69bb      	ldr	r3, [r7, #24]
 800504e:	015a      	lsls	r2, r3, #5
 8005050:	69fb      	ldr	r3, [r7, #28]
 8005052:	4413      	add	r3, r2
 8005054:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	69ba      	ldr	r2, [r7, #24]
 800505c:	0151      	lsls	r1, r2, #5
 800505e:	69fa      	ldr	r2, [r7, #28]
 8005060:	440a      	add	r2, r1
 8005062:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005066:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800506a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800506c:	2300      	movs	r3, #0
}
 800506e:	4618      	mov	r0, r3
 8005070:	3720      	adds	r7, #32
 8005072:	46bd      	mov	sp, r7
 8005074:	bd80      	pop	{r7, pc}
 8005076:	bf00      	nop
 8005078:	1ff80000 	.word	0x1ff80000

0800507c <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 800507c:	b480      	push	{r7}
 800507e:	b087      	sub	sp, #28
 8005080:	af00      	add	r7, sp, #0
 8005082:	60f8      	str	r0, [r7, #12]
 8005084:	60b9      	str	r1, [r7, #8]
 8005086:	4613      	mov	r3, r2
 8005088:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800508a:	68fb      	ldr	r3, [r7, #12]
 800508c:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800508e:	68bb      	ldr	r3, [r7, #8]
 8005090:	781b      	ldrb	r3, [r3, #0]
 8005092:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005094:	68bb      	ldr	r3, [r7, #8]
 8005096:	785b      	ldrb	r3, [r3, #1]
 8005098:	2b01      	cmp	r3, #1
 800509a:	f040 80ce 	bne.w	800523a <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 800509e:	68bb      	ldr	r3, [r7, #8]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	2b00      	cmp	r3, #0
 80050a4:	d132      	bne.n	800510c <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	015a      	lsls	r2, r3, #5
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	4413      	add	r3, r2
 80050ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050b2:	691b      	ldr	r3, [r3, #16]
 80050b4:	693a      	ldr	r2, [r7, #16]
 80050b6:	0151      	lsls	r1, r2, #5
 80050b8:	697a      	ldr	r2, [r7, #20]
 80050ba:	440a      	add	r2, r1
 80050bc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050c0:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050c4:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050c8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050ca:	693b      	ldr	r3, [r7, #16]
 80050cc:	015a      	lsls	r2, r3, #5
 80050ce:	697b      	ldr	r3, [r7, #20]
 80050d0:	4413      	add	r3, r2
 80050d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	693a      	ldr	r2, [r7, #16]
 80050da:	0151      	lsls	r1, r2, #5
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	440a      	add	r2, r1
 80050e0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050e4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050e8:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050ea:	693b      	ldr	r3, [r7, #16]
 80050ec:	015a      	lsls	r2, r3, #5
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	4413      	add	r3, r2
 80050f2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f6:	691b      	ldr	r3, [r3, #16]
 80050f8:	693a      	ldr	r2, [r7, #16]
 80050fa:	0151      	lsls	r1, r2, #5
 80050fc:	697a      	ldr	r2, [r7, #20]
 80050fe:	440a      	add	r2, r1
 8005100:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005104:	0cdb      	lsrs	r3, r3, #19
 8005106:	04db      	lsls	r3, r3, #19
 8005108:	6113      	str	r3, [r2, #16]
 800510a:	e04e      	b.n	80051aa <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800510c:	693b      	ldr	r3, [r7, #16]
 800510e:	015a      	lsls	r2, r3, #5
 8005110:	697b      	ldr	r3, [r7, #20]
 8005112:	4413      	add	r3, r2
 8005114:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005118:	691b      	ldr	r3, [r3, #16]
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	0151      	lsls	r1, r2, #5
 800511e:	697a      	ldr	r2, [r7, #20]
 8005120:	440a      	add	r2, r1
 8005122:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005126:	0cdb      	lsrs	r3, r3, #19
 8005128:	04db      	lsls	r3, r3, #19
 800512a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800512c:	693b      	ldr	r3, [r7, #16]
 800512e:	015a      	lsls	r2, r3, #5
 8005130:	697b      	ldr	r3, [r7, #20]
 8005132:	4413      	add	r3, r2
 8005134:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005138:	691b      	ldr	r3, [r3, #16]
 800513a:	693a      	ldr	r2, [r7, #16]
 800513c:	0151      	lsls	r1, r2, #5
 800513e:	697a      	ldr	r2, [r7, #20]
 8005140:	440a      	add	r2, r1
 8005142:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005146:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800514a:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800514e:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005150:	68bb      	ldr	r3, [r7, #8]
 8005152:	699a      	ldr	r2, [r3, #24]
 8005154:	68bb      	ldr	r3, [r7, #8]
 8005156:	68db      	ldr	r3, [r3, #12]
 8005158:	429a      	cmp	r2, r3
 800515a:	d903      	bls.n	8005164 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	68da      	ldr	r2, [r3, #12]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	015a      	lsls	r2, r3, #5
 8005168:	697b      	ldr	r3, [r7, #20]
 800516a:	4413      	add	r3, r2
 800516c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005170:	691b      	ldr	r3, [r3, #16]
 8005172:	693a      	ldr	r2, [r7, #16]
 8005174:	0151      	lsls	r1, r2, #5
 8005176:	697a      	ldr	r2, [r7, #20]
 8005178:	440a      	add	r2, r1
 800517a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800517e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005182:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005184:	693b      	ldr	r3, [r7, #16]
 8005186:	015a      	lsls	r2, r3, #5
 8005188:	697b      	ldr	r3, [r7, #20]
 800518a:	4413      	add	r3, r2
 800518c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005190:	691a      	ldr	r2, [r3, #16]
 8005192:	68bb      	ldr	r3, [r7, #8]
 8005194:	699b      	ldr	r3, [r3, #24]
 8005196:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800519a:	6939      	ldr	r1, [r7, #16]
 800519c:	0148      	lsls	r0, r1, #5
 800519e:	6979      	ldr	r1, [r7, #20]
 80051a0:	4401      	add	r1, r0
 80051a2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051a6:	4313      	orrs	r3, r2
 80051a8:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051aa:	79fb      	ldrb	r3, [r7, #7]
 80051ac:	2b01      	cmp	r3, #1
 80051ae:	d11e      	bne.n	80051ee <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051b0:	68bb      	ldr	r3, [r7, #8]
 80051b2:	695b      	ldr	r3, [r3, #20]
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d009      	beq.n	80051cc <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80051b8:	693b      	ldr	r3, [r7, #16]
 80051ba:	015a      	lsls	r2, r3, #5
 80051bc:	697b      	ldr	r3, [r7, #20]
 80051be:	4413      	add	r3, r2
 80051c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051c4:	461a      	mov	r2, r3
 80051c6:	68bb      	ldr	r3, [r7, #8]
 80051c8:	695b      	ldr	r3, [r3, #20]
 80051ca:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	697b      	ldr	r3, [r7, #20]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	693a      	ldr	r2, [r7, #16]
 80051dc:	0151      	lsls	r1, r2, #5
 80051de:	697a      	ldr	r2, [r7, #20]
 80051e0:	440a      	add	r2, r1
 80051e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e6:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	e097      	b.n	800531e <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051ee:	693b      	ldr	r3, [r7, #16]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	697b      	ldr	r3, [r7, #20]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	693a      	ldr	r2, [r7, #16]
 80051fe:	0151      	lsls	r1, r2, #5
 8005200:	697a      	ldr	r2, [r7, #20]
 8005202:	440a      	add	r2, r1
 8005204:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005208:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800520c:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800520e:	68bb      	ldr	r3, [r7, #8]
 8005210:	699b      	ldr	r3, [r3, #24]
 8005212:	2b00      	cmp	r3, #0
 8005214:	f000 8083 	beq.w	800531e <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005218:	697b      	ldr	r3, [r7, #20]
 800521a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800521e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005220:	68bb      	ldr	r3, [r7, #8]
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	f003 030f 	and.w	r3, r3, #15
 8005228:	2101      	movs	r1, #1
 800522a:	fa01 f303 	lsl.w	r3, r1, r3
 800522e:	6979      	ldr	r1, [r7, #20]
 8005230:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005234:	4313      	orrs	r3, r2
 8005236:	634b      	str	r3, [r1, #52]	; 0x34
 8005238:	e071      	b.n	800531e <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800523a:	693b      	ldr	r3, [r7, #16]
 800523c:	015a      	lsls	r2, r3, #5
 800523e:	697b      	ldr	r3, [r7, #20]
 8005240:	4413      	add	r3, r2
 8005242:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005246:	691b      	ldr	r3, [r3, #16]
 8005248:	693a      	ldr	r2, [r7, #16]
 800524a:	0151      	lsls	r1, r2, #5
 800524c:	697a      	ldr	r2, [r7, #20]
 800524e:	440a      	add	r2, r1
 8005250:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005254:	0cdb      	lsrs	r3, r3, #19
 8005256:	04db      	lsls	r3, r3, #19
 8005258:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800525a:	693b      	ldr	r3, [r7, #16]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	697b      	ldr	r3, [r7, #20]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005266:	691b      	ldr	r3, [r3, #16]
 8005268:	693a      	ldr	r2, [r7, #16]
 800526a:	0151      	lsls	r1, r2, #5
 800526c:	697a      	ldr	r2, [r7, #20]
 800526e:	440a      	add	r2, r1
 8005270:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005274:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005278:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800527c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800527e:	68bb      	ldr	r3, [r7, #8]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d003      	beq.n	800528e <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005286:	68bb      	ldr	r3, [r7, #8]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800528e:	68bb      	ldr	r3, [r7, #8]
 8005290:	68da      	ldr	r2, [r3, #12]
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005296:	693b      	ldr	r3, [r7, #16]
 8005298:	015a      	lsls	r2, r3, #5
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	4413      	add	r3, r2
 800529e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052a2:	691b      	ldr	r3, [r3, #16]
 80052a4:	693a      	ldr	r2, [r7, #16]
 80052a6:	0151      	lsls	r1, r2, #5
 80052a8:	697a      	ldr	r2, [r7, #20]
 80052aa:	440a      	add	r2, r1
 80052ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052b0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052b4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80052b6:	693b      	ldr	r3, [r7, #16]
 80052b8:	015a      	lsls	r2, r3, #5
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	4413      	add	r3, r2
 80052be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052c2:	691a      	ldr	r2, [r3, #16]
 80052c4:	68bb      	ldr	r3, [r7, #8]
 80052c6:	69db      	ldr	r3, [r3, #28]
 80052c8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052cc:	6939      	ldr	r1, [r7, #16]
 80052ce:	0148      	lsls	r0, r1, #5
 80052d0:	6979      	ldr	r1, [r7, #20]
 80052d2:	4401      	add	r1, r0
 80052d4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052d8:	4313      	orrs	r3, r2
 80052da:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80052dc:	79fb      	ldrb	r3, [r7, #7]
 80052de:	2b01      	cmp	r3, #1
 80052e0:	d10d      	bne.n	80052fe <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80052e2:	68bb      	ldr	r3, [r7, #8]
 80052e4:	691b      	ldr	r3, [r3, #16]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d009      	beq.n	80052fe <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80052ea:	68bb      	ldr	r3, [r7, #8]
 80052ec:	6919      	ldr	r1, [r3, #16]
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	015a      	lsls	r2, r3, #5
 80052f2:	697b      	ldr	r3, [r7, #20]
 80052f4:	4413      	add	r3, r2
 80052f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fa:	460a      	mov	r2, r1
 80052fc:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80052fe:	693b      	ldr	r3, [r7, #16]
 8005300:	015a      	lsls	r2, r3, #5
 8005302:	697b      	ldr	r3, [r7, #20]
 8005304:	4413      	add	r3, r2
 8005306:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	0151      	lsls	r1, r2, #5
 8005310:	697a      	ldr	r2, [r7, #20]
 8005312:	440a      	add	r2, r1
 8005314:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005318:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800531c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800531e:	2300      	movs	r3, #0
}
 8005320:	4618      	mov	r0, r3
 8005322:	371c      	adds	r7, #28
 8005324:	46bd      	mov	sp, r7
 8005326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800532a:	4770      	bx	lr

0800532c <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800532c:	b480      	push	{r7}
 800532e:	b087      	sub	sp, #28
 8005330:	af00      	add	r7, sp, #0
 8005332:	6078      	str	r0, [r7, #4]
 8005334:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005336:	2300      	movs	r3, #0
 8005338:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800533a:	2300      	movs	r3, #0
 800533c:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	785b      	ldrb	r3, [r3, #1]
 8005346:	2b01      	cmp	r3, #1
 8005348:	d14a      	bne.n	80053e0 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800534a:	683b      	ldr	r3, [r7, #0]
 800534c:	781b      	ldrb	r3, [r3, #0]
 800534e:	015a      	lsls	r2, r3, #5
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	4413      	add	r3, r2
 8005354:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005358:	681b      	ldr	r3, [r3, #0]
 800535a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800535e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005362:	f040 8086 	bne.w	8005472 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005366:	683b      	ldr	r3, [r7, #0]
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	015a      	lsls	r2, r3, #5
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	4413      	add	r3, r2
 8005370:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	683a      	ldr	r2, [r7, #0]
 8005378:	7812      	ldrb	r2, [r2, #0]
 800537a:	0151      	lsls	r1, r2, #5
 800537c:	693a      	ldr	r2, [r7, #16]
 800537e:	440a      	add	r2, r1
 8005380:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005384:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005388:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	781b      	ldrb	r3, [r3, #0]
 800538e:	015a      	lsls	r2, r3, #5
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	4413      	add	r3, r2
 8005394:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	683a      	ldr	r2, [r7, #0]
 800539c:	7812      	ldrb	r2, [r2, #0]
 800539e:	0151      	lsls	r1, r2, #5
 80053a0:	693a      	ldr	r2, [r7, #16]
 80053a2:	440a      	add	r2, r1
 80053a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053a8:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053ac:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	3301      	adds	r3, #1
 80053b2:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80053b4:	68fb      	ldr	r3, [r7, #12]
 80053b6:	f242 7210 	movw	r2, #10000	; 0x2710
 80053ba:	4293      	cmp	r3, r2
 80053bc:	d902      	bls.n	80053c4 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80053be:	2301      	movs	r3, #1
 80053c0:	75fb      	strb	r3, [r7, #23]
          break;
 80053c2:	e056      	b.n	8005472 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80053c4:	683b      	ldr	r3, [r7, #0]
 80053c6:	781b      	ldrb	r3, [r3, #0]
 80053c8:	015a      	lsls	r2, r3, #5
 80053ca:	693b      	ldr	r3, [r7, #16]
 80053cc:	4413      	add	r3, r2
 80053ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053d2:	681b      	ldr	r3, [r3, #0]
 80053d4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053dc:	d0e7      	beq.n	80053ae <USB_EPStopXfer+0x82>
 80053de:	e048      	b.n	8005472 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053e0:	683b      	ldr	r3, [r7, #0]
 80053e2:	781b      	ldrb	r3, [r3, #0]
 80053e4:	015a      	lsls	r2, r3, #5
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	4413      	add	r3, r2
 80053ea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053ee:	681b      	ldr	r3, [r3, #0]
 80053f0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053f4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053f8:	d13b      	bne.n	8005472 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80053fa:	683b      	ldr	r3, [r7, #0]
 80053fc:	781b      	ldrb	r3, [r3, #0]
 80053fe:	015a      	lsls	r2, r3, #5
 8005400:	693b      	ldr	r3, [r7, #16]
 8005402:	4413      	add	r3, r2
 8005404:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	683a      	ldr	r2, [r7, #0]
 800540c:	7812      	ldrb	r2, [r2, #0]
 800540e:	0151      	lsls	r1, r2, #5
 8005410:	693a      	ldr	r2, [r7, #16]
 8005412:	440a      	add	r2, r1
 8005414:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005418:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800541c:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	781b      	ldrb	r3, [r3, #0]
 8005422:	015a      	lsls	r2, r3, #5
 8005424:	693b      	ldr	r3, [r7, #16]
 8005426:	4413      	add	r3, r2
 8005428:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	683a      	ldr	r2, [r7, #0]
 8005430:	7812      	ldrb	r2, [r2, #0]
 8005432:	0151      	lsls	r1, r2, #5
 8005434:	693a      	ldr	r2, [r7, #16]
 8005436:	440a      	add	r2, r1
 8005438:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800543c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005440:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8005442:	68fb      	ldr	r3, [r7, #12]
 8005444:	3301      	adds	r3, #1
 8005446:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005448:	68fb      	ldr	r3, [r7, #12]
 800544a:	f242 7210 	movw	r2, #10000	; 0x2710
 800544e:	4293      	cmp	r3, r2
 8005450:	d902      	bls.n	8005458 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8005452:	2301      	movs	r3, #1
 8005454:	75fb      	strb	r3, [r7, #23]
          break;
 8005456:	e00c      	b.n	8005472 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	015a      	lsls	r2, r3, #5
 800545e:	693b      	ldr	r3, [r7, #16]
 8005460:	4413      	add	r3, r2
 8005462:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800546c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005470:	d0e7      	beq.n	8005442 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8005472:	7dfb      	ldrb	r3, [r7, #23]
}
 8005474:	4618      	mov	r0, r3
 8005476:	371c      	adds	r7, #28
 8005478:	46bd      	mov	sp, r7
 800547a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547e:	4770      	bx	lr

08005480 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8005480:	b480      	push	{r7}
 8005482:	b089      	sub	sp, #36	; 0x24
 8005484:	af00      	add	r7, sp, #0
 8005486:	60f8      	str	r0, [r7, #12]
 8005488:	60b9      	str	r1, [r7, #8]
 800548a:	4611      	mov	r1, r2
 800548c:	461a      	mov	r2, r3
 800548e:	460b      	mov	r3, r1
 8005490:	71fb      	strb	r3, [r7, #7]
 8005492:	4613      	mov	r3, r2
 8005494:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800549a:	68bb      	ldr	r3, [r7, #8]
 800549c:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800549e:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	d123      	bne.n	80054ee <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80054a6:	88bb      	ldrh	r3, [r7, #4]
 80054a8:	3303      	adds	r3, #3
 80054aa:	089b      	lsrs	r3, r3, #2
 80054ac:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80054ae:	2300      	movs	r3, #0
 80054b0:	61bb      	str	r3, [r7, #24]
 80054b2:	e018      	b.n	80054e6 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80054b4:	79fb      	ldrb	r3, [r7, #7]
 80054b6:	031a      	lsls	r2, r3, #12
 80054b8:	697b      	ldr	r3, [r7, #20]
 80054ba:	4413      	add	r3, r2
 80054bc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054c0:	461a      	mov	r2, r3
 80054c2:	69fb      	ldr	r3, [r7, #28]
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	6013      	str	r3, [r2, #0]
      pSrc++;
 80054c8:	69fb      	ldr	r3, [r7, #28]
 80054ca:	3301      	adds	r3, #1
 80054cc:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	3301      	adds	r3, #1
 80054d2:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	3301      	adds	r3, #1
 80054d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	3301      	adds	r3, #1
 80054de:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80054e0:	69bb      	ldr	r3, [r7, #24]
 80054e2:	3301      	adds	r3, #1
 80054e4:	61bb      	str	r3, [r7, #24]
 80054e6:	69ba      	ldr	r2, [r7, #24]
 80054e8:	693b      	ldr	r3, [r7, #16]
 80054ea:	429a      	cmp	r2, r3
 80054ec:	d3e2      	bcc.n	80054b4 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80054ee:	2300      	movs	r3, #0
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3724      	adds	r7, #36	; 0x24
 80054f4:	46bd      	mov	sp, r7
 80054f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054fa:	4770      	bx	lr

080054fc <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80054fc:	b480      	push	{r7}
 80054fe:	b08b      	sub	sp, #44	; 0x2c
 8005500:	af00      	add	r7, sp, #0
 8005502:	60f8      	str	r0, [r7, #12]
 8005504:	60b9      	str	r1, [r7, #8]
 8005506:	4613      	mov	r3, r2
 8005508:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800550a:	68fb      	ldr	r3, [r7, #12]
 800550c:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8005512:	88fb      	ldrh	r3, [r7, #6]
 8005514:	089b      	lsrs	r3, r3, #2
 8005516:	b29b      	uxth	r3, r3
 8005518:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 800551a:	88fb      	ldrh	r3, [r7, #6]
 800551c:	f003 0303 	and.w	r3, r3, #3
 8005520:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8005522:	2300      	movs	r3, #0
 8005524:	623b      	str	r3, [r7, #32]
 8005526:	e014      	b.n	8005552 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005528:	69bb      	ldr	r3, [r7, #24]
 800552a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800552e:	681a      	ldr	r2, [r3, #0]
 8005530:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005532:	601a      	str	r2, [r3, #0]
    pDest++;
 8005534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005536:	3301      	adds	r3, #1
 8005538:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800553a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553c:	3301      	adds	r3, #1
 800553e:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	3301      	adds	r3, #1
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	3301      	adds	r3, #1
 800554a:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 800554c:	6a3b      	ldr	r3, [r7, #32]
 800554e:	3301      	adds	r3, #1
 8005550:	623b      	str	r3, [r7, #32]
 8005552:	6a3a      	ldr	r2, [r7, #32]
 8005554:	697b      	ldr	r3, [r7, #20]
 8005556:	429a      	cmp	r2, r3
 8005558:	d3e6      	bcc.n	8005528 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800555a:	8bfb      	ldrh	r3, [r7, #30]
 800555c:	2b00      	cmp	r3, #0
 800555e:	d01e      	beq.n	800559e <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8005560:	2300      	movs	r3, #0
 8005562:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005564:	69bb      	ldr	r3, [r7, #24]
 8005566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800556a:	461a      	mov	r2, r3
 800556c:	f107 0310 	add.w	r3, r7, #16
 8005570:	6812      	ldr	r2, [r2, #0]
 8005572:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	6a3b      	ldr	r3, [r7, #32]
 8005578:	b2db      	uxtb	r3, r3
 800557a:	00db      	lsls	r3, r3, #3
 800557c:	fa22 f303 	lsr.w	r3, r2, r3
 8005580:	b2da      	uxtb	r2, r3
 8005582:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005584:	701a      	strb	r2, [r3, #0]
      i++;
 8005586:	6a3b      	ldr	r3, [r7, #32]
 8005588:	3301      	adds	r3, #1
 800558a:	623b      	str	r3, [r7, #32]
      pDest++;
 800558c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800558e:	3301      	adds	r3, #1
 8005590:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8005592:	8bfb      	ldrh	r3, [r7, #30]
 8005594:	3b01      	subs	r3, #1
 8005596:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005598:	8bfb      	ldrh	r3, [r7, #30]
 800559a:	2b00      	cmp	r3, #0
 800559c:	d1ea      	bne.n	8005574 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800559e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055a0:	4618      	mov	r0, r3
 80055a2:	372c      	adds	r7, #44	; 0x2c
 80055a4:	46bd      	mov	sp, r7
 80055a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055aa:	4770      	bx	lr

080055ac <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055ac:	b480      	push	{r7}
 80055ae:	b085      	sub	sp, #20
 80055b0:	af00      	add	r7, sp, #0
 80055b2:	6078      	str	r0, [r7, #4]
 80055b4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	781b      	ldrb	r3, [r3, #0]
 80055be:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055c0:	683b      	ldr	r3, [r7, #0]
 80055c2:	785b      	ldrb	r3, [r3, #1]
 80055c4:	2b01      	cmp	r3, #1
 80055c6:	d12c      	bne.n	8005622 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055c8:	68bb      	ldr	r3, [r7, #8]
 80055ca:	015a      	lsls	r2, r3, #5
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	4413      	add	r3, r2
 80055d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	2b00      	cmp	r3, #0
 80055d8:	db12      	blt.n	8005600 <USB_EPSetStall+0x54>
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	2b00      	cmp	r3, #0
 80055de:	d00f      	beq.n	8005600 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	015a      	lsls	r2, r3, #5
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	4413      	add	r3, r2
 80055e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055ec:	681b      	ldr	r3, [r3, #0]
 80055ee:	68ba      	ldr	r2, [r7, #8]
 80055f0:	0151      	lsls	r1, r2, #5
 80055f2:	68fa      	ldr	r2, [r7, #12]
 80055f4:	440a      	add	r2, r1
 80055f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80055fa:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80055fe:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005600:	68bb      	ldr	r3, [r7, #8]
 8005602:	015a      	lsls	r2, r3, #5
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	4413      	add	r3, r2
 8005608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	68ba      	ldr	r2, [r7, #8]
 8005610:	0151      	lsls	r1, r2, #5
 8005612:	68fa      	ldr	r2, [r7, #12]
 8005614:	440a      	add	r2, r1
 8005616:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800561a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800561e:	6013      	str	r3, [r2, #0]
 8005620:	e02b      	b.n	800567a <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005622:	68bb      	ldr	r3, [r7, #8]
 8005624:	015a      	lsls	r2, r3, #5
 8005626:	68fb      	ldr	r3, [r7, #12]
 8005628:	4413      	add	r3, r2
 800562a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800562e:	681b      	ldr	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	db12      	blt.n	800565a <USB_EPSetStall+0xae>
 8005634:	68bb      	ldr	r3, [r7, #8]
 8005636:	2b00      	cmp	r3, #0
 8005638:	d00f      	beq.n	800565a <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 800563a:	68bb      	ldr	r3, [r7, #8]
 800563c:	015a      	lsls	r2, r3, #5
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	4413      	add	r3, r2
 8005642:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	68ba      	ldr	r2, [r7, #8]
 800564a:	0151      	lsls	r1, r2, #5
 800564c:	68fa      	ldr	r2, [r7, #12]
 800564e:	440a      	add	r2, r1
 8005650:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005654:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005658:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800565a:	68bb      	ldr	r3, [r7, #8]
 800565c:	015a      	lsls	r2, r3, #5
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	4413      	add	r3, r2
 8005662:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	68ba      	ldr	r2, [r7, #8]
 800566a:	0151      	lsls	r1, r2, #5
 800566c:	68fa      	ldr	r2, [r7, #12]
 800566e:	440a      	add	r2, r1
 8005670:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005674:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005678:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800567a:	2300      	movs	r3, #0
}
 800567c:	4618      	mov	r0, r3
 800567e:	3714      	adds	r7, #20
 8005680:	46bd      	mov	sp, r7
 8005682:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005686:	4770      	bx	lr

08005688 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005688:	b480      	push	{r7}
 800568a:	b085      	sub	sp, #20
 800568c:	af00      	add	r7, sp, #0
 800568e:	6078      	str	r0, [r7, #4]
 8005690:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005696:	683b      	ldr	r3, [r7, #0]
 8005698:	781b      	ldrb	r3, [r3, #0]
 800569a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	785b      	ldrb	r3, [r3, #1]
 80056a0:	2b01      	cmp	r3, #1
 80056a2:	d128      	bne.n	80056f6 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80056a4:	68bb      	ldr	r3, [r7, #8]
 80056a6:	015a      	lsls	r2, r3, #5
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	4413      	add	r3, r2
 80056ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	68ba      	ldr	r2, [r7, #8]
 80056b4:	0151      	lsls	r1, r2, #5
 80056b6:	68fa      	ldr	r2, [r7, #12]
 80056b8:	440a      	add	r2, r1
 80056ba:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056be:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056c2:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80056c4:	683b      	ldr	r3, [r7, #0]
 80056c6:	791b      	ldrb	r3, [r3, #4]
 80056c8:	2b03      	cmp	r3, #3
 80056ca:	d003      	beq.n	80056d4 <USB_EPClearStall+0x4c>
 80056cc:	683b      	ldr	r3, [r7, #0]
 80056ce:	791b      	ldrb	r3, [r3, #4]
 80056d0:	2b02      	cmp	r3, #2
 80056d2:	d138      	bne.n	8005746 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	68fb      	ldr	r3, [r7, #12]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	68ba      	ldr	r2, [r7, #8]
 80056e4:	0151      	lsls	r1, r2, #5
 80056e6:	68fa      	ldr	r2, [r7, #12]
 80056e8:	440a      	add	r2, r1
 80056ea:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056f2:	6013      	str	r3, [r2, #0]
 80056f4:	e027      	b.n	8005746 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80056f6:	68bb      	ldr	r3, [r7, #8]
 80056f8:	015a      	lsls	r2, r3, #5
 80056fa:	68fb      	ldr	r3, [r7, #12]
 80056fc:	4413      	add	r3, r2
 80056fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005702:	681b      	ldr	r3, [r3, #0]
 8005704:	68ba      	ldr	r2, [r7, #8]
 8005706:	0151      	lsls	r1, r2, #5
 8005708:	68fa      	ldr	r2, [r7, #12]
 800570a:	440a      	add	r2, r1
 800570c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005710:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005714:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005716:	683b      	ldr	r3, [r7, #0]
 8005718:	791b      	ldrb	r3, [r3, #4]
 800571a:	2b03      	cmp	r3, #3
 800571c:	d003      	beq.n	8005726 <USB_EPClearStall+0x9e>
 800571e:	683b      	ldr	r3, [r7, #0]
 8005720:	791b      	ldrb	r3, [r3, #4]
 8005722:	2b02      	cmp	r3, #2
 8005724:	d10f      	bne.n	8005746 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	015a      	lsls	r2, r3, #5
 800572a:	68fb      	ldr	r3, [r7, #12]
 800572c:	4413      	add	r3, r2
 800572e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	68ba      	ldr	r2, [r7, #8]
 8005736:	0151      	lsls	r1, r2, #5
 8005738:	68fa      	ldr	r2, [r7, #12]
 800573a:	440a      	add	r2, r1
 800573c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005740:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005744:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005746:	2300      	movs	r3, #0
}
 8005748:	4618      	mov	r0, r3
 800574a:	3714      	adds	r7, #20
 800574c:	46bd      	mov	sp, r7
 800574e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005752:	4770      	bx	lr

08005754 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005754:	b480      	push	{r7}
 8005756:	b085      	sub	sp, #20
 8005758:	af00      	add	r7, sp, #0
 800575a:	6078      	str	r0, [r7, #4]
 800575c:	460b      	mov	r3, r1
 800575e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	68fa      	ldr	r2, [r7, #12]
 800576e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005772:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005776:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	78fb      	ldrb	r3, [r7, #3]
 8005782:	011b      	lsls	r3, r3, #4
 8005784:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005788:	68f9      	ldr	r1, [r7, #12]
 800578a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800578e:	4313      	orrs	r3, r2
 8005790:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005792:	2300      	movs	r3, #0
}
 8005794:	4618      	mov	r0, r3
 8005796:	3714      	adds	r7, #20
 8005798:	46bd      	mov	sp, r7
 800579a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800579e:	4770      	bx	lr

080057a0 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057a0:	b480      	push	{r7}
 80057a2:	b085      	sub	sp, #20
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	68fa      	ldr	r2, [r7, #12]
 80057b6:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80057ba:	f023 0303 	bic.w	r3, r3, #3
 80057be:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057c6:	685b      	ldr	r3, [r3, #4]
 80057c8:	68fa      	ldr	r2, [r7, #12]
 80057ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057ce:	f023 0302 	bic.w	r3, r3, #2
 80057d2:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057d4:	2300      	movs	r3, #0
}
 80057d6:	4618      	mov	r0, r3
 80057d8:	3714      	adds	r7, #20
 80057da:	46bd      	mov	sp, r7
 80057dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057e0:	4770      	bx	lr

080057e2 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057e2:	b480      	push	{r7}
 80057e4:	b085      	sub	sp, #20
 80057e6:	af00      	add	r7, sp, #0
 80057e8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057f4:	681b      	ldr	r3, [r3, #0]
 80057f6:	68fa      	ldr	r2, [r7, #12]
 80057f8:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80057fc:	f023 0303 	bic.w	r3, r3, #3
 8005800:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	68fa      	ldr	r2, [r7, #12]
 800580c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005810:	f043 0302 	orr.w	r3, r3, #2
 8005814:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005816:	2300      	movs	r3, #0
}
 8005818:	4618      	mov	r0, r3
 800581a:	3714      	adds	r7, #20
 800581c:	46bd      	mov	sp, r7
 800581e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005822:	4770      	bx	lr

08005824 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005824:	b480      	push	{r7}
 8005826:	b085      	sub	sp, #20
 8005828:	af00      	add	r7, sp, #0
 800582a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	695b      	ldr	r3, [r3, #20]
 8005830:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	699b      	ldr	r3, [r3, #24]
 8005836:	68fa      	ldr	r2, [r7, #12]
 8005838:	4013      	ands	r3, r2
 800583a:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 800583c:	68fb      	ldr	r3, [r7, #12]
}
 800583e:	4618      	mov	r0, r3
 8005840:	3714      	adds	r7, #20
 8005842:	46bd      	mov	sp, r7
 8005844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005848:	4770      	bx	lr

0800584a <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800584a:	b480      	push	{r7}
 800584c:	b085      	sub	sp, #20
 800584e:	af00      	add	r7, sp, #0
 8005850:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005856:	68fb      	ldr	r3, [r7, #12]
 8005858:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800585c:	699b      	ldr	r3, [r3, #24]
 800585e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005866:	69db      	ldr	r3, [r3, #28]
 8005868:	68ba      	ldr	r2, [r7, #8]
 800586a:	4013      	ands	r3, r2
 800586c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800586e:	68bb      	ldr	r3, [r7, #8]
 8005870:	0c1b      	lsrs	r3, r3, #16
}
 8005872:	4618      	mov	r0, r3
 8005874:	3714      	adds	r7, #20
 8005876:	46bd      	mov	sp, r7
 8005878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800587c:	4770      	bx	lr

0800587e <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800587e:	b480      	push	{r7}
 8005880:	b085      	sub	sp, #20
 8005882:	af00      	add	r7, sp, #0
 8005884:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 800588a:	68fb      	ldr	r3, [r7, #12]
 800588c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005890:	699b      	ldr	r3, [r3, #24]
 8005892:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589a:	69db      	ldr	r3, [r3, #28]
 800589c:	68ba      	ldr	r2, [r7, #8]
 800589e:	4013      	ands	r3, r2
 80058a0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80058a2:	68bb      	ldr	r3, [r7, #8]
 80058a4:	b29b      	uxth	r3, r3
}
 80058a6:	4618      	mov	r0, r3
 80058a8:	3714      	adds	r7, #20
 80058aa:	46bd      	mov	sp, r7
 80058ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b0:	4770      	bx	lr

080058b2 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80058b2:	b480      	push	{r7}
 80058b4:	b085      	sub	sp, #20
 80058b6:	af00      	add	r7, sp, #0
 80058b8:	6078      	str	r0, [r7, #4]
 80058ba:	460b      	mov	r3, r1
 80058bc:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80058c2:	78fb      	ldrb	r3, [r7, #3]
 80058c4:	015a      	lsls	r2, r3, #5
 80058c6:	68fb      	ldr	r3, [r7, #12]
 80058c8:	4413      	add	r3, r2
 80058ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058ce:	689b      	ldr	r3, [r3, #8]
 80058d0:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058d8:	695b      	ldr	r3, [r3, #20]
 80058da:	68ba      	ldr	r2, [r7, #8]
 80058dc:	4013      	ands	r3, r2
 80058de:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058e0:	68bb      	ldr	r3, [r7, #8]
}
 80058e2:	4618      	mov	r0, r3
 80058e4:	3714      	adds	r7, #20
 80058e6:	46bd      	mov	sp, r7
 80058e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058ec:	4770      	bx	lr

080058ee <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80058ee:	b480      	push	{r7}
 80058f0:	b087      	sub	sp, #28
 80058f2:	af00      	add	r7, sp, #0
 80058f4:	6078      	str	r0, [r7, #4]
 80058f6:	460b      	mov	r3, r1
 80058f8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80058fe:	697b      	ldr	r3, [r7, #20]
 8005900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005904:	691b      	ldr	r3, [r3, #16]
 8005906:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005908:	697b      	ldr	r3, [r7, #20]
 800590a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800590e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005910:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005912:	78fb      	ldrb	r3, [r7, #3]
 8005914:	f003 030f 	and.w	r3, r3, #15
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	fa22 f303 	lsr.w	r3, r2, r3
 800591e:	01db      	lsls	r3, r3, #7
 8005920:	b2db      	uxtb	r3, r3
 8005922:	693a      	ldr	r2, [r7, #16]
 8005924:	4313      	orrs	r3, r2
 8005926:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005928:	78fb      	ldrb	r3, [r7, #3]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	697b      	ldr	r3, [r7, #20]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	689b      	ldr	r3, [r3, #8]
 8005936:	693a      	ldr	r2, [r7, #16]
 8005938:	4013      	ands	r3, r2
 800593a:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 800593c:	68bb      	ldr	r3, [r7, #8]
}
 800593e:	4618      	mov	r0, r3
 8005940:	371c      	adds	r7, #28
 8005942:	46bd      	mov	sp, r7
 8005944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005948:	4770      	bx	lr

0800594a <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 800594a:	b480      	push	{r7}
 800594c:	b083      	sub	sp, #12
 800594e:	af00      	add	r7, sp, #0
 8005950:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	695b      	ldr	r3, [r3, #20]
 8005956:	f003 0301 	and.w	r3, r3, #1
}
 800595a:	4618      	mov	r0, r3
 800595c:	370c      	adds	r7, #12
 800595e:	46bd      	mov	sp, r7
 8005960:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005964:	4770      	bx	lr

08005966 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005966:	b480      	push	{r7}
 8005968:	b085      	sub	sp, #20
 800596a:	af00      	add	r7, sp, #0
 800596c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	68fa      	ldr	r2, [r7, #12]
 800597c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005980:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005984:	f023 0307 	bic.w	r3, r3, #7
 8005988:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005990:	685b      	ldr	r3, [r3, #4]
 8005992:	68fa      	ldr	r2, [r7, #12]
 8005994:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005998:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800599c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800599e:	2300      	movs	r3, #0
}
 80059a0:	4618      	mov	r0, r3
 80059a2:	3714      	adds	r7, #20
 80059a4:	46bd      	mov	sp, r7
 80059a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059aa:	4770      	bx	lr

080059ac <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80059ac:	b480      	push	{r7}
 80059ae:	b087      	sub	sp, #28
 80059b0:	af00      	add	r7, sp, #0
 80059b2:	60f8      	str	r0, [r7, #12]
 80059b4:	460b      	mov	r3, r1
 80059b6:	607a      	str	r2, [r7, #4]
 80059b8:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059be:	68fb      	ldr	r3, [r7, #12]
 80059c0:	333c      	adds	r3, #60	; 0x3c
 80059c2:	3304      	adds	r3, #4
 80059c4:	681b      	ldr	r3, [r3, #0]
 80059c6:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80059c8:	693b      	ldr	r3, [r7, #16]
 80059ca:	4a26      	ldr	r2, [pc, #152]	; (8005a64 <USB_EP0_OutStart+0xb8>)
 80059cc:	4293      	cmp	r3, r2
 80059ce:	d90a      	bls.n	80059e6 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059d0:	697b      	ldr	r3, [r7, #20]
 80059d2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059dc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059e0:	d101      	bne.n	80059e6 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80059e2:	2300      	movs	r3, #0
 80059e4:	e037      	b.n	8005a56 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80059e6:	697b      	ldr	r3, [r7, #20]
 80059e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ec:	461a      	mov	r2, r3
 80059ee:	2300      	movs	r3, #0
 80059f0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f8:	691b      	ldr	r3, [r3, #16]
 80059fa:	697a      	ldr	r2, [r7, #20]
 80059fc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a00:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a04:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005a06:	697b      	ldr	r3, [r7, #20]
 8005a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a0c:	691b      	ldr	r3, [r3, #16]
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a14:	f043 0318 	orr.w	r3, r3, #24
 8005a18:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005a1a:	697b      	ldr	r3, [r7, #20]
 8005a1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a20:	691b      	ldr	r3, [r3, #16]
 8005a22:	697a      	ldr	r2, [r7, #20]
 8005a24:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a28:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005a2c:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005a2e:	7afb      	ldrb	r3, [r7, #11]
 8005a30:	2b01      	cmp	r3, #1
 8005a32:	d10f      	bne.n	8005a54 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a3a:	461a      	mov	r2, r3
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	697a      	ldr	r2, [r7, #20]
 8005a4a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a4e:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005a52:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a54:	2300      	movs	r3, #0
}
 8005a56:	4618      	mov	r0, r3
 8005a58:	371c      	adds	r7, #28
 8005a5a:	46bd      	mov	sp, r7
 8005a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a60:	4770      	bx	lr
 8005a62:	bf00      	nop
 8005a64:	4f54300a 	.word	0x4f54300a

08005a68 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a68:	b480      	push	{r7}
 8005a6a:	b085      	sub	sp, #20
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a70:	2300      	movs	r3, #0
 8005a72:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	3301      	adds	r3, #1
 8005a78:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	4a13      	ldr	r2, [pc, #76]	; (8005acc <USB_CoreReset+0x64>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d901      	bls.n	8005a86 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a82:	2303      	movs	r3, #3
 8005a84:	e01b      	b.n	8005abe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	691b      	ldr	r3, [r3, #16]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	daf2      	bge.n	8005a74 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a8e:	2300      	movs	r3, #0
 8005a90:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	f043 0201 	orr.w	r2, r3, #1
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	3301      	adds	r3, #1
 8005aa2:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005aa4:	68fb      	ldr	r3, [r7, #12]
 8005aa6:	4a09      	ldr	r2, [pc, #36]	; (8005acc <USB_CoreReset+0x64>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d901      	bls.n	8005ab0 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005aac:	2303      	movs	r3, #3
 8005aae:	e006      	b.n	8005abe <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	691b      	ldr	r3, [r3, #16]
 8005ab4:	f003 0301 	and.w	r3, r3, #1
 8005ab8:	2b01      	cmp	r3, #1
 8005aba:	d0f0      	beq.n	8005a9e <USB_CoreReset+0x36>

  return HAL_OK;
 8005abc:	2300      	movs	r3, #0
}
 8005abe:	4618      	mov	r0, r3
 8005ac0:	3714      	adds	r7, #20
 8005ac2:	46bd      	mov	sp, r7
 8005ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ac8:	4770      	bx	lr
 8005aca:	bf00      	nop
 8005acc:	00030d40 	.word	0x00030d40

08005ad0 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
 8005ad8:	460b      	mov	r3, r1
 8005ada:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005adc:	2010      	movs	r0, #16
 8005ade:	f002 f8e1 	bl	8007ca4 <USBD_static_malloc>
 8005ae2:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005ae4:	68fb      	ldr	r3, [r7, #12]
 8005ae6:	2b00      	cmp	r3, #0
 8005ae8:	d109      	bne.n	8005afe <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	32b0      	adds	r2, #176	; 0xb0
 8005af4:	2100      	movs	r1, #0
 8005af6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005afa:	2302      	movs	r3, #2
 8005afc:	e048      	b.n	8005b90 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	32b0      	adds	r2, #176	; 0xb0
 8005b08:	68f9      	ldr	r1, [r7, #12]
 8005b0a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	32b0      	adds	r2, #176	; 0xb0
 8005b18:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	7c1b      	ldrb	r3, [r3, #16]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d10d      	bne.n	8005b46 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005b2a:	4b1b      	ldr	r3, [pc, #108]	; (8005b98 <USBD_HID_Init+0xc8>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	f003 020f 	and.w	r2, r3, #15
 8005b32:	6879      	ldr	r1, [r7, #4]
 8005b34:	4613      	mov	r3, r2
 8005b36:	009b      	lsls	r3, r3, #2
 8005b38:	4413      	add	r3, r2
 8005b3a:	009b      	lsls	r3, r3, #2
 8005b3c:	440b      	add	r3, r1
 8005b3e:	3326      	adds	r3, #38	; 0x26
 8005b40:	2207      	movs	r2, #7
 8005b42:	801a      	strh	r2, [r3, #0]
 8005b44:	e00c      	b.n	8005b60 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005b46:	4b14      	ldr	r3, [pc, #80]	; (8005b98 <USBD_HID_Init+0xc8>)
 8005b48:	781b      	ldrb	r3, [r3, #0]
 8005b4a:	f003 020f 	and.w	r2, r3, #15
 8005b4e:	6879      	ldr	r1, [r7, #4]
 8005b50:	4613      	mov	r3, r2
 8005b52:	009b      	lsls	r3, r3, #2
 8005b54:	4413      	add	r3, r2
 8005b56:	009b      	lsls	r3, r3, #2
 8005b58:	440b      	add	r3, r1
 8005b5a:	3326      	adds	r3, #38	; 0x26
 8005b5c:	220a      	movs	r2, #10
 8005b5e:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005b60:	4b0d      	ldr	r3, [pc, #52]	; (8005b98 <USBD_HID_Init+0xc8>)
 8005b62:	7819      	ldrb	r1, [r3, #0]
 8005b64:	2304      	movs	r3, #4
 8005b66:	2203      	movs	r2, #3
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	f001 ff8a 	bl	8007a82 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005b6e:	4b0a      	ldr	r3, [pc, #40]	; (8005b98 <USBD_HID_Init+0xc8>)
 8005b70:	781b      	ldrb	r3, [r3, #0]
 8005b72:	f003 020f 	and.w	r2, r3, #15
 8005b76:	6879      	ldr	r1, [r7, #4]
 8005b78:	4613      	mov	r3, r2
 8005b7a:	009b      	lsls	r3, r3, #2
 8005b7c:	4413      	add	r3, r2
 8005b7e:	009b      	lsls	r3, r3, #2
 8005b80:	440b      	add	r3, r1
 8005b82:	3324      	adds	r3, #36	; 0x24
 8005b84:	2201      	movs	r2, #1
 8005b86:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005b8e:	2300      	movs	r3, #0
}
 8005b90:	4618      	mov	r0, r3
 8005b92:	3710      	adds	r7, #16
 8005b94:	46bd      	mov	sp, r7
 8005b96:	bd80      	pop	{r7, pc}
 8005b98:	20000493 	.word	0x20000493

08005b9c <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005b9c:	b580      	push	{r7, lr}
 8005b9e:	b082      	sub	sp, #8
 8005ba0:	af00      	add	r7, sp, #0
 8005ba2:	6078      	str	r0, [r7, #4]
 8005ba4:	460b      	mov	r3, r1
 8005ba6:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005ba8:	4b1f      	ldr	r3, [pc, #124]	; (8005c28 <USBD_HID_DeInit+0x8c>)
 8005baa:	781b      	ldrb	r3, [r3, #0]
 8005bac:	4619      	mov	r1, r3
 8005bae:	6878      	ldr	r0, [r7, #4]
 8005bb0:	f001 ff8d 	bl	8007ace <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005bb4:	4b1c      	ldr	r3, [pc, #112]	; (8005c28 <USBD_HID_DeInit+0x8c>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	f003 020f 	and.w	r2, r3, #15
 8005bbc:	6879      	ldr	r1, [r7, #4]
 8005bbe:	4613      	mov	r3, r2
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	4413      	add	r3, r2
 8005bc4:	009b      	lsls	r3, r3, #2
 8005bc6:	440b      	add	r3, r1
 8005bc8:	3324      	adds	r3, #36	; 0x24
 8005bca:	2200      	movs	r2, #0
 8005bcc:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005bce:	4b16      	ldr	r3, [pc, #88]	; (8005c28 <USBD_HID_DeInit+0x8c>)
 8005bd0:	781b      	ldrb	r3, [r3, #0]
 8005bd2:	f003 020f 	and.w	r2, r3, #15
 8005bd6:	6879      	ldr	r1, [r7, #4]
 8005bd8:	4613      	mov	r3, r2
 8005bda:	009b      	lsls	r3, r3, #2
 8005bdc:	4413      	add	r3, r2
 8005bde:	009b      	lsls	r3, r3, #2
 8005be0:	440b      	add	r3, r1
 8005be2:	3326      	adds	r3, #38	; 0x26
 8005be4:	2200      	movs	r2, #0
 8005be6:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	32b0      	adds	r2, #176	; 0xb0
 8005bf2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf6:	2b00      	cmp	r3, #0
 8005bf8:	d011      	beq.n	8005c1e <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	32b0      	adds	r2, #176	; 0xb0
 8005c04:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c08:	4618      	mov	r0, r3
 8005c0a:	f002 f859 	bl	8007cc0 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	32b0      	adds	r2, #176	; 0xb0
 8005c18:	2100      	movs	r1, #0
 8005c1a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005c1e:	2300      	movs	r3, #0
}
 8005c20:	4618      	mov	r0, r3
 8005c22:	3708      	adds	r7, #8
 8005c24:	46bd      	mov	sp, r7
 8005c26:	bd80      	pop	{r7, pc}
 8005c28:	20000493 	.word	0x20000493

08005c2c <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c2c:	b580      	push	{r7, lr}
 8005c2e:	b086      	sub	sp, #24
 8005c30:	af00      	add	r7, sp, #0
 8005c32:	6078      	str	r0, [r7, #4]
 8005c34:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	32b0      	adds	r2, #176	; 0xb0
 8005c40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c44:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d101      	bne.n	8005c58 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005c54:	2303      	movs	r3, #3
 8005c56:	e0e8      	b.n	8005e2a <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c58:	683b      	ldr	r3, [r7, #0]
 8005c5a:	781b      	ldrb	r3, [r3, #0]
 8005c5c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d046      	beq.n	8005cf2 <USBD_HID_Setup+0xc6>
 8005c64:	2b20      	cmp	r3, #32
 8005c66:	f040 80d8 	bne.w	8005e1a <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	785b      	ldrb	r3, [r3, #1]
 8005c6e:	3b02      	subs	r3, #2
 8005c70:	2b09      	cmp	r3, #9
 8005c72:	d836      	bhi.n	8005ce2 <USBD_HID_Setup+0xb6>
 8005c74:	a201      	add	r2, pc, #4	; (adr r2, 8005c7c <USBD_HID_Setup+0x50>)
 8005c76:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c7a:	bf00      	nop
 8005c7c:	08005cd3 	.word	0x08005cd3
 8005c80:	08005cb3 	.word	0x08005cb3
 8005c84:	08005ce3 	.word	0x08005ce3
 8005c88:	08005ce3 	.word	0x08005ce3
 8005c8c:	08005ce3 	.word	0x08005ce3
 8005c90:	08005ce3 	.word	0x08005ce3
 8005c94:	08005ce3 	.word	0x08005ce3
 8005c98:	08005ce3 	.word	0x08005ce3
 8005c9c:	08005cc1 	.word	0x08005cc1
 8005ca0:	08005ca5 	.word	0x08005ca5
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005ca4:	683b      	ldr	r3, [r7, #0]
 8005ca6:	885b      	ldrh	r3, [r3, #2]
 8005ca8:	b2db      	uxtb	r3, r3
 8005caa:	461a      	mov	r2, r3
 8005cac:	68fb      	ldr	r3, [r7, #12]
 8005cae:	601a      	str	r2, [r3, #0]
          break;
 8005cb0:	e01e      	b.n	8005cf0 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	2201      	movs	r2, #1
 8005cb6:	4619      	mov	r1, r3
 8005cb8:	6878      	ldr	r0, [r7, #4]
 8005cba:	f001 fba5 	bl	8007408 <USBD_CtlSendData>
          break;
 8005cbe:	e017      	b.n	8005cf0 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005cc0:	683b      	ldr	r3, [r7, #0]
 8005cc2:	885b      	ldrh	r3, [r3, #2]
 8005cc4:	0a1b      	lsrs	r3, r3, #8
 8005cc6:	b29b      	uxth	r3, r3
 8005cc8:	b2db      	uxtb	r3, r3
 8005cca:	461a      	mov	r2, r3
 8005ccc:	68fb      	ldr	r3, [r7, #12]
 8005cce:	605a      	str	r2, [r3, #4]
          break;
 8005cd0:	e00e      	b.n	8005cf0 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	3304      	adds	r3, #4
 8005cd6:	2201      	movs	r2, #1
 8005cd8:	4619      	mov	r1, r3
 8005cda:	6878      	ldr	r0, [r7, #4]
 8005cdc:	f001 fb94 	bl	8007408 <USBD_CtlSendData>
          break;
 8005ce0:	e006      	b.n	8005cf0 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005ce2:	6839      	ldr	r1, [r7, #0]
 8005ce4:	6878      	ldr	r0, [r7, #4]
 8005ce6:	f001 fb1e 	bl	8007326 <USBD_CtlError>
          ret = USBD_FAIL;
 8005cea:	2303      	movs	r3, #3
 8005cec:	75fb      	strb	r3, [r7, #23]
          break;
 8005cee:	bf00      	nop
      }
      break;
 8005cf0:	e09a      	b.n	8005e28 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	785b      	ldrb	r3, [r3, #1]
 8005cf6:	2b0b      	cmp	r3, #11
 8005cf8:	f200 8086 	bhi.w	8005e08 <USBD_HID_Setup+0x1dc>
 8005cfc:	a201      	add	r2, pc, #4	; (adr r2, 8005d04 <USBD_HID_Setup+0xd8>)
 8005cfe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d02:	bf00      	nop
 8005d04:	08005d35 	.word	0x08005d35
 8005d08:	08005e17 	.word	0x08005e17
 8005d0c:	08005e09 	.word	0x08005e09
 8005d10:	08005e09 	.word	0x08005e09
 8005d14:	08005e09 	.word	0x08005e09
 8005d18:	08005e09 	.word	0x08005e09
 8005d1c:	08005d5f 	.word	0x08005d5f
 8005d20:	08005e09 	.word	0x08005e09
 8005d24:	08005e09 	.word	0x08005e09
 8005d28:	08005e09 	.word	0x08005e09
 8005d2c:	08005db7 	.word	0x08005db7
 8005d30:	08005de1 	.word	0x08005de1
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d3a:	b2db      	uxtb	r3, r3
 8005d3c:	2b03      	cmp	r3, #3
 8005d3e:	d107      	bne.n	8005d50 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d40:	f107 030a 	add.w	r3, r7, #10
 8005d44:	2202      	movs	r2, #2
 8005d46:	4619      	mov	r1, r3
 8005d48:	6878      	ldr	r0, [r7, #4]
 8005d4a:	f001 fb5d 	bl	8007408 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d4e:	e063      	b.n	8005e18 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005d50:	6839      	ldr	r1, [r7, #0]
 8005d52:	6878      	ldr	r0, [r7, #4]
 8005d54:	f001 fae7 	bl	8007326 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d58:	2303      	movs	r3, #3
 8005d5a:	75fb      	strb	r3, [r7, #23]
          break;
 8005d5c:	e05c      	b.n	8005e18 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005d5e:	683b      	ldr	r3, [r7, #0]
 8005d60:	885b      	ldrh	r3, [r3, #2]
 8005d62:	0a1b      	lsrs	r3, r3, #8
 8005d64:	b29b      	uxth	r3, r3
 8005d66:	2b22      	cmp	r3, #34	; 0x22
 8005d68:	d108      	bne.n	8005d7c <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	88db      	ldrh	r3, [r3, #6]
 8005d6e:	2b3f      	cmp	r3, #63	; 0x3f
 8005d70:	bf28      	it	cs
 8005d72:	233f      	movcs	r3, #63	; 0x3f
 8005d74:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005d76:	4b2f      	ldr	r3, [pc, #188]	; (8005e34 <USBD_HID_Setup+0x208>)
 8005d78:	613b      	str	r3, [r7, #16]
 8005d7a:	e015      	b.n	8005da8 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	885b      	ldrh	r3, [r3, #2]
 8005d80:	0a1b      	lsrs	r3, r3, #8
 8005d82:	b29b      	uxth	r3, r3
 8005d84:	2b21      	cmp	r3, #33	; 0x21
 8005d86:	d108      	bne.n	8005d9a <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005d88:	4b2b      	ldr	r3, [pc, #172]	; (8005e38 <USBD_HID_Setup+0x20c>)
 8005d8a:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	88db      	ldrh	r3, [r3, #6]
 8005d90:	2b09      	cmp	r3, #9
 8005d92:	bf28      	it	cs
 8005d94:	2309      	movcs	r3, #9
 8005d96:	82bb      	strh	r3, [r7, #20]
 8005d98:	e006      	b.n	8005da8 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005d9a:	6839      	ldr	r1, [r7, #0]
 8005d9c:	6878      	ldr	r0, [r7, #4]
 8005d9e:	f001 fac2 	bl	8007326 <USBD_CtlError>
            ret = USBD_FAIL;
 8005da2:	2303      	movs	r3, #3
 8005da4:	75fb      	strb	r3, [r7, #23]
            break;
 8005da6:	e037      	b.n	8005e18 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005da8:	8abb      	ldrh	r3, [r7, #20]
 8005daa:	461a      	mov	r2, r3
 8005dac:	6939      	ldr	r1, [r7, #16]
 8005dae:	6878      	ldr	r0, [r7, #4]
 8005db0:	f001 fb2a 	bl	8007408 <USBD_CtlSendData>
          break;
 8005db4:	e030      	b.n	8005e18 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dbc:	b2db      	uxtb	r3, r3
 8005dbe:	2b03      	cmp	r3, #3
 8005dc0:	d107      	bne.n	8005dd2 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	3308      	adds	r3, #8
 8005dc6:	2201      	movs	r2, #1
 8005dc8:	4619      	mov	r1, r3
 8005dca:	6878      	ldr	r0, [r7, #4]
 8005dcc:	f001 fb1c 	bl	8007408 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005dd0:	e022      	b.n	8005e18 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005dd2:	6839      	ldr	r1, [r7, #0]
 8005dd4:	6878      	ldr	r0, [r7, #4]
 8005dd6:	f001 faa6 	bl	8007326 <USBD_CtlError>
            ret = USBD_FAIL;
 8005dda:	2303      	movs	r3, #3
 8005ddc:	75fb      	strb	r3, [r7, #23]
          break;
 8005dde:	e01b      	b.n	8005e18 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005de6:	b2db      	uxtb	r3, r3
 8005de8:	2b03      	cmp	r3, #3
 8005dea:	d106      	bne.n	8005dfa <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	885b      	ldrh	r3, [r3, #2]
 8005df0:	b2db      	uxtb	r3, r3
 8005df2:	461a      	mov	r2, r3
 8005df4:	68fb      	ldr	r3, [r7, #12]
 8005df6:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005df8:	e00e      	b.n	8005e18 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005dfa:	6839      	ldr	r1, [r7, #0]
 8005dfc:	6878      	ldr	r0, [r7, #4]
 8005dfe:	f001 fa92 	bl	8007326 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e02:	2303      	movs	r3, #3
 8005e04:	75fb      	strb	r3, [r7, #23]
          break;
 8005e06:	e007      	b.n	8005e18 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e08:	6839      	ldr	r1, [r7, #0]
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f001 fa8b 	bl	8007326 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e10:	2303      	movs	r3, #3
 8005e12:	75fb      	strb	r3, [r7, #23]
          break;
 8005e14:	e000      	b.n	8005e18 <USBD_HID_Setup+0x1ec>
          break;
 8005e16:	bf00      	nop
      }
      break;
 8005e18:	e006      	b.n	8005e28 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005e1a:	6839      	ldr	r1, [r7, #0]
 8005e1c:	6878      	ldr	r0, [r7, #4]
 8005e1e:	f001 fa82 	bl	8007326 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e22:	2303      	movs	r3, #3
 8005e24:	75fb      	strb	r3, [r7, #23]
      break;
 8005e26:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e28:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e2a:	4618      	mov	r0, r3
 8005e2c:	3718      	adds	r7, #24
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
 8005e32:	bf00      	nop
 8005e34:	20000454 	.word	0x20000454
 8005e38:	2000043c 	.word	0x2000043c

08005e3c <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
 8005e42:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e44:	2181      	movs	r1, #129	; 0x81
 8005e46:	4809      	ldr	r0, [pc, #36]	; (8005e6c <USBD_HID_GetFSCfgDesc+0x30>)
 8005e48:	f000 fc35 	bl	80066b6 <USBD_GetEpDesc>
 8005e4c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005e4e:	68fb      	ldr	r3, [r7, #12]
 8005e50:	2b00      	cmp	r3, #0
 8005e52:	d002      	beq.n	8005e5a <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005e54:	68fb      	ldr	r3, [r7, #12]
 8005e56:	220a      	movs	r2, #10
 8005e58:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2222      	movs	r2, #34	; 0x22
 8005e5e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005e60:	4b02      	ldr	r3, [pc, #8]	; (8005e6c <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3710      	adds	r7, #16
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}
 8005e6a:	bf00      	nop
 8005e6c:	20000418 	.word	0x20000418

08005e70 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005e70:	b580      	push	{r7, lr}
 8005e72:	b084      	sub	sp, #16
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e78:	2181      	movs	r1, #129	; 0x81
 8005e7a:	4809      	ldr	r0, [pc, #36]	; (8005ea0 <USBD_HID_GetHSCfgDesc+0x30>)
 8005e7c:	f000 fc1b 	bl	80066b6 <USBD_GetEpDesc>
 8005e80:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d002      	beq.n	8005e8e <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	2207      	movs	r2, #7
 8005e8c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2222      	movs	r2, #34	; 0x22
 8005e92:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005e94:	4b02      	ldr	r3, [pc, #8]	; (8005ea0 <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005e96:	4618      	mov	r0, r3
 8005e98:	3710      	adds	r7, #16
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	bd80      	pop	{r7, pc}
 8005e9e:	bf00      	nop
 8005ea0:	20000418 	.word	0x20000418

08005ea4 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	b084      	sub	sp, #16
 8005ea8:	af00      	add	r7, sp, #0
 8005eaa:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005eac:	2181      	movs	r1, #129	; 0x81
 8005eae:	4809      	ldr	r0, [pc, #36]	; (8005ed4 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005eb0:	f000 fc01 	bl	80066b6 <USBD_GetEpDesc>
 8005eb4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005eb6:	68fb      	ldr	r3, [r7, #12]
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d002      	beq.n	8005ec2 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005ebc:	68fb      	ldr	r3, [r7, #12]
 8005ebe:	220a      	movs	r2, #10
 8005ec0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	2222      	movs	r2, #34	; 0x22
 8005ec6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005ec8:	4b02      	ldr	r3, [pc, #8]	; (8005ed4 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005eca:	4618      	mov	r0, r3
 8005ecc:	3710      	adds	r7, #16
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	20000418 	.word	0x20000418

08005ed8 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ed8:	b480      	push	{r7}
 8005eda:	b083      	sub	sp, #12
 8005edc:	af00      	add	r7, sp, #0
 8005ede:	6078      	str	r0, [r7, #4]
 8005ee0:	460b      	mov	r3, r1
 8005ee2:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	32b0      	adds	r2, #176	; 0xb0
 8005eee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005ef6:	2300      	movs	r3, #0
}
 8005ef8:	4618      	mov	r0, r3
 8005efa:	370c      	adds	r7, #12
 8005efc:	46bd      	mov	sp, r7
 8005efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f02:	4770      	bx	lr

08005f04 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005f04:	b480      	push	{r7}
 8005f06:	b083      	sub	sp, #12
 8005f08:	af00      	add	r7, sp, #0
 8005f0a:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	220a      	movs	r2, #10
 8005f10:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005f12:	4b03      	ldr	r3, [pc, #12]	; (8005f20 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005f14:	4618      	mov	r0, r3
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr
 8005f20:	20000448 	.word	0x20000448

08005f24 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	4613      	mov	r3, r2
 8005f30:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d101      	bne.n	8005f3c <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f38:	2303      	movs	r3, #3
 8005f3a:	e01f      	b.n	8005f7c <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	2200      	movs	r2, #0
 8005f40:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	2200      	movs	r2, #0
 8005f48:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2200      	movs	r2, #0
 8005f50:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f54:	68bb      	ldr	r3, [r7, #8]
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d003      	beq.n	8005f62 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f5a:	68fb      	ldr	r3, [r7, #12]
 8005f5c:	68ba      	ldr	r2, [r7, #8]
 8005f5e:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f62:	68fb      	ldr	r3, [r7, #12]
 8005f64:	2201      	movs	r2, #1
 8005f66:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f6a:	68fb      	ldr	r3, [r7, #12]
 8005f6c:	79fa      	ldrb	r2, [r7, #7]
 8005f6e:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f70:	68f8      	ldr	r0, [r7, #12]
 8005f72:	f001 fd1f 	bl	80079b4 <USBD_LL_Init>
 8005f76:	4603      	mov	r3, r0
 8005f78:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f7a:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	3718      	adds	r7, #24
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}

08005f84 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f84:	b580      	push	{r7, lr}
 8005f86:	b084      	sub	sp, #16
 8005f88:	af00      	add	r7, sp, #0
 8005f8a:	6078      	str	r0, [r7, #4]
 8005f8c:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f92:	683b      	ldr	r3, [r7, #0]
 8005f94:	2b00      	cmp	r3, #0
 8005f96:	d101      	bne.n	8005f9c <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f98:	2303      	movs	r3, #3
 8005f9a:	e025      	b.n	8005fe8 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	683a      	ldr	r2, [r7, #0]
 8005fa0:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	32ae      	adds	r2, #174	; 0xae
 8005fae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00f      	beq.n	8005fd8 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	32ae      	adds	r2, #174	; 0xae
 8005fc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc8:	f107 020e 	add.w	r2, r7, #14
 8005fcc:	4610      	mov	r0, r2
 8005fce:	4798      	blx	r3
 8005fd0:	4602      	mov	r2, r0
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005fde:	1c5a      	adds	r2, r3, #1
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005fe6:	2300      	movs	r3, #0
}
 8005fe8:	4618      	mov	r0, r3
 8005fea:	3710      	adds	r7, #16
 8005fec:	46bd      	mov	sp, r7
 8005fee:	bd80      	pop	{r7, pc}

08005ff0 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ff0:	b580      	push	{r7, lr}
 8005ff2:	b082      	sub	sp, #8
 8005ff4:	af00      	add	r7, sp, #0
 8005ff6:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005ff8:	6878      	ldr	r0, [r7, #4]
 8005ffa:	f001 fd27 	bl	8007a4c <USBD_LL_Start>
 8005ffe:	4603      	mov	r3, r0
}
 8006000:	4618      	mov	r0, r3
 8006002:	3708      	adds	r7, #8
 8006004:	46bd      	mov	sp, r7
 8006006:	bd80      	pop	{r7, pc}

08006008 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006008:	b480      	push	{r7}
 800600a:	b083      	sub	sp, #12
 800600c:	af00      	add	r7, sp, #0
 800600e:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8006010:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8006012:	4618      	mov	r0, r3
 8006014:	370c      	adds	r7, #12
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr

0800601e <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800601e:	b580      	push	{r7, lr}
 8006020:	b084      	sub	sp, #16
 8006022:	af00      	add	r7, sp, #0
 8006024:	6078      	str	r0, [r7, #4]
 8006026:	460b      	mov	r3, r1
 8006028:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800602a:	2300      	movs	r3, #0
 800602c:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006034:	2b00      	cmp	r3, #0
 8006036:	d009      	beq.n	800604c <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	78fa      	ldrb	r2, [r7, #3]
 8006042:	4611      	mov	r1, r2
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	4798      	blx	r3
 8006048:	4603      	mov	r3, r0
 800604a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800604c:	7bfb      	ldrb	r3, [r7, #15]
}
 800604e:	4618      	mov	r0, r3
 8006050:	3710      	adds	r7, #16
 8006052:	46bd      	mov	sp, r7
 8006054:	bd80      	pop	{r7, pc}

08006056 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006056:	b580      	push	{r7, lr}
 8006058:	b084      	sub	sp, #16
 800605a:	af00      	add	r7, sp, #0
 800605c:	6078      	str	r0, [r7, #4]
 800605e:	460b      	mov	r3, r1
 8006060:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006062:	2300      	movs	r3, #0
 8006064:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	78fa      	ldrb	r2, [r7, #3]
 8006070:	4611      	mov	r1, r2
 8006072:	6878      	ldr	r0, [r7, #4]
 8006074:	4798      	blx	r3
 8006076:	4603      	mov	r3, r0
 8006078:	2b00      	cmp	r3, #0
 800607a:	d001      	beq.n	8006080 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 800607c:	2303      	movs	r3, #3
 800607e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006080:	7bfb      	ldrb	r3, [r7, #15]
}
 8006082:	4618      	mov	r0, r3
 8006084:	3710      	adds	r7, #16
 8006086:	46bd      	mov	sp, r7
 8006088:	bd80      	pop	{r7, pc}

0800608a <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800608a:	b580      	push	{r7, lr}
 800608c:	b084      	sub	sp, #16
 800608e:	af00      	add	r7, sp, #0
 8006090:	6078      	str	r0, [r7, #4]
 8006092:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800609a:	6839      	ldr	r1, [r7, #0]
 800609c:	4618      	mov	r0, r3
 800609e:	f001 f908 	bl	80072b2 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2201      	movs	r2, #1
 80060a6:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80060b0:	461a      	mov	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060be:	f003 031f 	and.w	r3, r3, #31
 80060c2:	2b02      	cmp	r3, #2
 80060c4:	d01a      	beq.n	80060fc <USBD_LL_SetupStage+0x72>
 80060c6:	2b02      	cmp	r3, #2
 80060c8:	d822      	bhi.n	8006110 <USBD_LL_SetupStage+0x86>
 80060ca:	2b00      	cmp	r3, #0
 80060cc:	d002      	beq.n	80060d4 <USBD_LL_SetupStage+0x4a>
 80060ce:	2b01      	cmp	r3, #1
 80060d0:	d00a      	beq.n	80060e8 <USBD_LL_SetupStage+0x5e>
 80060d2:	e01d      	b.n	8006110 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060da:	4619      	mov	r1, r3
 80060dc:	6878      	ldr	r0, [r7, #4]
 80060de:	f000 fb5f 	bl	80067a0 <USBD_StdDevReq>
 80060e2:	4603      	mov	r3, r0
 80060e4:	73fb      	strb	r3, [r7, #15]
      break;
 80060e6:	e020      	b.n	800612a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060ee:	4619      	mov	r1, r3
 80060f0:	6878      	ldr	r0, [r7, #4]
 80060f2:	f000 fbc7 	bl	8006884 <USBD_StdItfReq>
 80060f6:	4603      	mov	r3, r0
 80060f8:	73fb      	strb	r3, [r7, #15]
      break;
 80060fa:	e016      	b.n	800612a <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006102:	4619      	mov	r1, r3
 8006104:	6878      	ldr	r0, [r7, #4]
 8006106:	f000 fc29 	bl	800695c <USBD_StdEPReq>
 800610a:	4603      	mov	r3, r0
 800610c:	73fb      	strb	r3, [r7, #15]
      break;
 800610e:	e00c      	b.n	800612a <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006116:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800611a:	b2db      	uxtb	r3, r3
 800611c:	4619      	mov	r1, r3
 800611e:	6878      	ldr	r0, [r7, #4]
 8006120:	f001 fcf4 	bl	8007b0c <USBD_LL_StallEP>
 8006124:	4603      	mov	r3, r0
 8006126:	73fb      	strb	r3, [r7, #15]
      break;
 8006128:	bf00      	nop
  }

  return ret;
 800612a:	7bfb      	ldrb	r3, [r7, #15]
}
 800612c:	4618      	mov	r0, r3
 800612e:	3710      	adds	r7, #16
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	460b      	mov	r3, r1
 800613e:	607a      	str	r2, [r7, #4]
 8006140:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8006142:	2300      	movs	r3, #0
 8006144:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006146:	7afb      	ldrb	r3, [r7, #11]
 8006148:	2b00      	cmp	r3, #0
 800614a:	d16e      	bne.n	800622a <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 800614c:	68fb      	ldr	r3, [r7, #12]
 800614e:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8006152:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006154:	68fb      	ldr	r3, [r7, #12]
 8006156:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800615a:	2b03      	cmp	r3, #3
 800615c:	f040 8098 	bne.w	8006290 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006160:	693b      	ldr	r3, [r7, #16]
 8006162:	689a      	ldr	r2, [r3, #8]
 8006164:	693b      	ldr	r3, [r7, #16]
 8006166:	68db      	ldr	r3, [r3, #12]
 8006168:	429a      	cmp	r2, r3
 800616a:	d913      	bls.n	8006194 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	1ad2      	subs	r2, r2, r3
 8006176:	693b      	ldr	r3, [r7, #16]
 8006178:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800617a:	693b      	ldr	r3, [r7, #16]
 800617c:	68da      	ldr	r2, [r3, #12]
 800617e:	693b      	ldr	r3, [r7, #16]
 8006180:	689b      	ldr	r3, [r3, #8]
 8006182:	4293      	cmp	r3, r2
 8006184:	bf28      	it	cs
 8006186:	4613      	movcs	r3, r2
 8006188:	461a      	mov	r2, r3
 800618a:	6879      	ldr	r1, [r7, #4]
 800618c:	68f8      	ldr	r0, [r7, #12]
 800618e:	f001 f967 	bl	8007460 <USBD_CtlContinueRx>
 8006192:	e07d      	b.n	8006290 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8006194:	68fb      	ldr	r3, [r7, #12]
 8006196:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800619a:	f003 031f 	and.w	r3, r3, #31
 800619e:	2b02      	cmp	r3, #2
 80061a0:	d014      	beq.n	80061cc <USBD_LL_DataOutStage+0x98>
 80061a2:	2b02      	cmp	r3, #2
 80061a4:	d81d      	bhi.n	80061e2 <USBD_LL_DataOutStage+0xae>
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	d002      	beq.n	80061b0 <USBD_LL_DataOutStage+0x7c>
 80061aa:	2b01      	cmp	r3, #1
 80061ac:	d003      	beq.n	80061b6 <USBD_LL_DataOutStage+0x82>
 80061ae:	e018      	b.n	80061e2 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80061b0:	2300      	movs	r3, #0
 80061b2:	75bb      	strb	r3, [r7, #22]
            break;
 80061b4:	e018      	b.n	80061e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80061bc:	b2db      	uxtb	r3, r3
 80061be:	4619      	mov	r1, r3
 80061c0:	68f8      	ldr	r0, [r7, #12]
 80061c2:	f000 fa5e 	bl	8006682 <USBD_CoreFindIF>
 80061c6:	4603      	mov	r3, r0
 80061c8:	75bb      	strb	r3, [r7, #22]
            break;
 80061ca:	e00d      	b.n	80061e8 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80061d2:	b2db      	uxtb	r3, r3
 80061d4:	4619      	mov	r1, r3
 80061d6:	68f8      	ldr	r0, [r7, #12]
 80061d8:	f000 fa60 	bl	800669c <USBD_CoreFindEP>
 80061dc:	4603      	mov	r3, r0
 80061de:	75bb      	strb	r3, [r7, #22]
            break;
 80061e0:	e002      	b.n	80061e8 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	75bb      	strb	r3, [r7, #22]
            break;
 80061e6:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80061e8:	7dbb      	ldrb	r3, [r7, #22]
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d119      	bne.n	8006222 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061f4:	b2db      	uxtb	r3, r3
 80061f6:	2b03      	cmp	r3, #3
 80061f8:	d113      	bne.n	8006222 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80061fa:	7dba      	ldrb	r2, [r7, #22]
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	32ae      	adds	r2, #174	; 0xae
 8006200:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006204:	691b      	ldr	r3, [r3, #16]
 8006206:	2b00      	cmp	r3, #0
 8006208:	d00b      	beq.n	8006222 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800620a:	7dba      	ldrb	r2, [r7, #22]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8006212:	7dba      	ldrb	r2, [r7, #22]
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	32ae      	adds	r2, #174	; 0xae
 8006218:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	68f8      	ldr	r0, [r7, #12]
 8006220:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8006222:	68f8      	ldr	r0, [r7, #12]
 8006224:	f001 f92d 	bl	8007482 <USBD_CtlSendStatus>
 8006228:	e032      	b.n	8006290 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800622a:	7afb      	ldrb	r3, [r7, #11]
 800622c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006230:	b2db      	uxtb	r3, r3
 8006232:	4619      	mov	r1, r3
 8006234:	68f8      	ldr	r0, [r7, #12]
 8006236:	f000 fa31 	bl	800669c <USBD_CoreFindEP>
 800623a:	4603      	mov	r3, r0
 800623c:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800623e:	7dbb      	ldrb	r3, [r7, #22]
 8006240:	2bff      	cmp	r3, #255	; 0xff
 8006242:	d025      	beq.n	8006290 <USBD_LL_DataOutStage+0x15c>
 8006244:	7dbb      	ldrb	r3, [r7, #22]
 8006246:	2b00      	cmp	r3, #0
 8006248:	d122      	bne.n	8006290 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800624a:	68fb      	ldr	r3, [r7, #12]
 800624c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006250:	b2db      	uxtb	r3, r3
 8006252:	2b03      	cmp	r3, #3
 8006254:	d117      	bne.n	8006286 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006256:	7dba      	ldrb	r2, [r7, #22]
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	32ae      	adds	r2, #174	; 0xae
 800625c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006260:	699b      	ldr	r3, [r3, #24]
 8006262:	2b00      	cmp	r3, #0
 8006264:	d00f      	beq.n	8006286 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006266:	7dba      	ldrb	r2, [r7, #22]
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800626e:	7dba      	ldrb	r2, [r7, #22]
 8006270:	68fb      	ldr	r3, [r7, #12]
 8006272:	32ae      	adds	r2, #174	; 0xae
 8006274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006278:	699b      	ldr	r3, [r3, #24]
 800627a:	7afa      	ldrb	r2, [r7, #11]
 800627c:	4611      	mov	r1, r2
 800627e:	68f8      	ldr	r0, [r7, #12]
 8006280:	4798      	blx	r3
 8006282:	4603      	mov	r3, r0
 8006284:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006286:	7dfb      	ldrb	r3, [r7, #23]
 8006288:	2b00      	cmp	r3, #0
 800628a:	d001      	beq.n	8006290 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 800628c:	7dfb      	ldrb	r3, [r7, #23]
 800628e:	e000      	b.n	8006292 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006290:	2300      	movs	r3, #0
}
 8006292:	4618      	mov	r0, r3
 8006294:	3718      	adds	r7, #24
 8006296:	46bd      	mov	sp, r7
 8006298:	bd80      	pop	{r7, pc}

0800629a <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800629a:	b580      	push	{r7, lr}
 800629c:	b086      	sub	sp, #24
 800629e:	af00      	add	r7, sp, #0
 80062a0:	60f8      	str	r0, [r7, #12]
 80062a2:	460b      	mov	r3, r1
 80062a4:	607a      	str	r2, [r7, #4]
 80062a6:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80062a8:	7afb      	ldrb	r3, [r7, #11]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d16f      	bne.n	800638e <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	3314      	adds	r3, #20
 80062b2:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062ba:	2b02      	cmp	r3, #2
 80062bc:	d15a      	bne.n	8006374 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	689a      	ldr	r2, [r3, #8]
 80062c2:	693b      	ldr	r3, [r7, #16]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	429a      	cmp	r2, r3
 80062c8:	d914      	bls.n	80062f4 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	1ad2      	subs	r2, r2, r3
 80062d4:	693b      	ldr	r3, [r7, #16]
 80062d6:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80062d8:	693b      	ldr	r3, [r7, #16]
 80062da:	689b      	ldr	r3, [r3, #8]
 80062dc:	461a      	mov	r2, r3
 80062de:	6879      	ldr	r1, [r7, #4]
 80062e0:	68f8      	ldr	r0, [r7, #12]
 80062e2:	f001 f8ac 	bl	800743e <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062e6:	2300      	movs	r3, #0
 80062e8:	2200      	movs	r2, #0
 80062ea:	2100      	movs	r1, #0
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f001 fcb7 	bl	8007c60 <USBD_LL_PrepareReceive>
 80062f2:	e03f      	b.n	8006374 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80062f4:	693b      	ldr	r3, [r7, #16]
 80062f6:	68da      	ldr	r2, [r3, #12]
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	689b      	ldr	r3, [r3, #8]
 80062fc:	429a      	cmp	r2, r3
 80062fe:	d11c      	bne.n	800633a <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	685a      	ldr	r2, [r3, #4]
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006308:	429a      	cmp	r2, r3
 800630a:	d316      	bcc.n	800633a <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	68fb      	ldr	r3, [r7, #12]
 8006312:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006316:	429a      	cmp	r2, r3
 8006318:	d20f      	bcs.n	800633a <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800631a:	2200      	movs	r2, #0
 800631c:	2100      	movs	r1, #0
 800631e:	68f8      	ldr	r0, [r7, #12]
 8006320:	f001 f88d 	bl	800743e <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	2200      	movs	r2, #0
 8006328:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800632c:	2300      	movs	r3, #0
 800632e:	2200      	movs	r2, #0
 8006330:	2100      	movs	r1, #0
 8006332:	68f8      	ldr	r0, [r7, #12]
 8006334:	f001 fc94 	bl	8007c60 <USBD_LL_PrepareReceive>
 8006338:	e01c      	b.n	8006374 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006340:	b2db      	uxtb	r3, r3
 8006342:	2b03      	cmp	r3, #3
 8006344:	d10f      	bne.n	8006366 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800634c:	68db      	ldr	r3, [r3, #12]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d009      	beq.n	8006366 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	2200      	movs	r2, #0
 8006356:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800635a:	68fb      	ldr	r3, [r7, #12]
 800635c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	68f8      	ldr	r0, [r7, #12]
 8006364:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006366:	2180      	movs	r1, #128	; 0x80
 8006368:	68f8      	ldr	r0, [r7, #12]
 800636a:	f001 fbcf 	bl	8007b0c <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	f001 f89a 	bl	80074a8 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006374:	68fb      	ldr	r3, [r7, #12]
 8006376:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800637a:	2b00      	cmp	r3, #0
 800637c:	d03a      	beq.n	80063f4 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800637e:	68f8      	ldr	r0, [r7, #12]
 8006380:	f7ff fe42 	bl	8006008 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	2200      	movs	r2, #0
 8006388:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 800638c:	e032      	b.n	80063f4 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800638e:	7afb      	ldrb	r3, [r7, #11]
 8006390:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8006394:	b2db      	uxtb	r3, r3
 8006396:	4619      	mov	r1, r3
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f97f 	bl	800669c <USBD_CoreFindEP>
 800639e:	4603      	mov	r3, r0
 80063a0:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063a2:	7dfb      	ldrb	r3, [r7, #23]
 80063a4:	2bff      	cmp	r3, #255	; 0xff
 80063a6:	d025      	beq.n	80063f4 <USBD_LL_DataInStage+0x15a>
 80063a8:	7dfb      	ldrb	r3, [r7, #23]
 80063aa:	2b00      	cmp	r3, #0
 80063ac:	d122      	bne.n	80063f4 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063b4:	b2db      	uxtb	r3, r3
 80063b6:	2b03      	cmp	r3, #3
 80063b8:	d11c      	bne.n	80063f4 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80063ba:	7dfa      	ldrb	r2, [r7, #23]
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	32ae      	adds	r2, #174	; 0xae
 80063c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063c4:	695b      	ldr	r3, [r3, #20]
 80063c6:	2b00      	cmp	r3, #0
 80063c8:	d014      	beq.n	80063f4 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80063ca:	7dfa      	ldrb	r2, [r7, #23]
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80063d2:	7dfa      	ldrb	r2, [r7, #23]
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	32ae      	adds	r2, #174	; 0xae
 80063d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063dc:	695b      	ldr	r3, [r3, #20]
 80063de:	7afa      	ldrb	r2, [r7, #11]
 80063e0:	4611      	mov	r1, r2
 80063e2:	68f8      	ldr	r0, [r7, #12]
 80063e4:	4798      	blx	r3
 80063e6:	4603      	mov	r3, r0
 80063e8:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80063ea:	7dbb      	ldrb	r3, [r7, #22]
 80063ec:	2b00      	cmp	r3, #0
 80063ee:	d001      	beq.n	80063f4 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80063f0:	7dbb      	ldrb	r3, [r7, #22]
 80063f2:	e000      	b.n	80063f6 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80063f4:	2300      	movs	r3, #0
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3718      	adds	r7, #24
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006406:	2300      	movs	r3, #0
 8006408:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	2201      	movs	r2, #1
 800640e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2200      	movs	r2, #0
 8006416:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	2200      	movs	r2, #0
 800641e:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	2200      	movs	r2, #0
 800642c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006436:	2b00      	cmp	r3, #0
 8006438:	d014      	beq.n	8006464 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800643a:	687b      	ldr	r3, [r7, #4]
 800643c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006440:	685b      	ldr	r3, [r3, #4]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d00e      	beq.n	8006464 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	687a      	ldr	r2, [r7, #4]
 8006450:	6852      	ldr	r2, [r2, #4]
 8006452:	b2d2      	uxtb	r2, r2
 8006454:	4611      	mov	r1, r2
 8006456:	6878      	ldr	r0, [r7, #4]
 8006458:	4798      	blx	r3
 800645a:	4603      	mov	r3, r0
 800645c:	2b00      	cmp	r3, #0
 800645e:	d001      	beq.n	8006464 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006460:	2303      	movs	r3, #3
 8006462:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006464:	2340      	movs	r3, #64	; 0x40
 8006466:	2200      	movs	r2, #0
 8006468:	2100      	movs	r1, #0
 800646a:	6878      	ldr	r0, [r7, #4]
 800646c:	f001 fb09 	bl	8007a82 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	2201      	movs	r2, #1
 8006474:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	2240      	movs	r2, #64	; 0x40
 800647c:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006480:	2340      	movs	r3, #64	; 0x40
 8006482:	2200      	movs	r2, #0
 8006484:	2180      	movs	r1, #128	; 0x80
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f001 fafb 	bl	8007a82 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	2201      	movs	r2, #1
 8006490:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	2240      	movs	r2, #64	; 0x40
 8006496:	621a      	str	r2, [r3, #32]

  return ret;
 8006498:	7bfb      	ldrb	r3, [r7, #15]
}
 800649a:	4618      	mov	r0, r3
 800649c:	3710      	adds	r7, #16
 800649e:	46bd      	mov	sp, r7
 80064a0:	bd80      	pop	{r7, pc}

080064a2 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80064a2:	b480      	push	{r7}
 80064a4:	b083      	sub	sp, #12
 80064a6:	af00      	add	r7, sp, #0
 80064a8:	6078      	str	r0, [r7, #4]
 80064aa:	460b      	mov	r3, r1
 80064ac:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	78fa      	ldrb	r2, [r7, #3]
 80064b2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80064b4:	2300      	movs	r3, #0
}
 80064b6:	4618      	mov	r0, r3
 80064b8:	370c      	adds	r7, #12
 80064ba:	46bd      	mov	sp, r7
 80064bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c0:	4770      	bx	lr

080064c2 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80064c2:	b480      	push	{r7}
 80064c4:	b083      	sub	sp, #12
 80064c6:	af00      	add	r7, sp, #0
 80064c8:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d0:	b2da      	uxtb	r2, r3
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2204      	movs	r2, #4
 80064dc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80064e0:	2300      	movs	r3, #0
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	370c      	adds	r7, #12
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b083      	sub	sp, #12
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064fc:	b2db      	uxtb	r3, r3
 80064fe:	2b04      	cmp	r3, #4
 8006500:	d106      	bne.n	8006510 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006508:	b2da      	uxtb	r2, r3
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8006510:	2300      	movs	r3, #0
}
 8006512:	4618      	mov	r0, r3
 8006514:	370c      	adds	r7, #12
 8006516:	46bd      	mov	sp, r7
 8006518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651c:	4770      	bx	lr

0800651e <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800651e:	b580      	push	{r7, lr}
 8006520:	b082      	sub	sp, #8
 8006522:	af00      	add	r7, sp, #0
 8006524:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800652c:	b2db      	uxtb	r3, r3
 800652e:	2b03      	cmp	r3, #3
 8006530:	d110      	bne.n	8006554 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006538:	2b00      	cmp	r3, #0
 800653a:	d00b      	beq.n	8006554 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 800653c:	687b      	ldr	r3, [r7, #4]
 800653e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006542:	69db      	ldr	r3, [r3, #28]
 8006544:	2b00      	cmp	r3, #0
 8006546:	d005      	beq.n	8006554 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654e:	69db      	ldr	r3, [r3, #28]
 8006550:	6878      	ldr	r0, [r7, #4]
 8006552:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006554:	2300      	movs	r3, #0
}
 8006556:	4618      	mov	r0, r3
 8006558:	3708      	adds	r7, #8
 800655a:	46bd      	mov	sp, r7
 800655c:	bd80      	pop	{r7, pc}

0800655e <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800655e:	b580      	push	{r7, lr}
 8006560:	b082      	sub	sp, #8
 8006562:	af00      	add	r7, sp, #0
 8006564:	6078      	str	r0, [r7, #4]
 8006566:	460b      	mov	r3, r1
 8006568:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	32ae      	adds	r2, #174	; 0xae
 8006574:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006578:	2b00      	cmp	r3, #0
 800657a:	d101      	bne.n	8006580 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 800657c:	2303      	movs	r3, #3
 800657e:	e01c      	b.n	80065ba <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006586:	b2db      	uxtb	r3, r3
 8006588:	2b03      	cmp	r3, #3
 800658a:	d115      	bne.n	80065b8 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	32ae      	adds	r2, #174	; 0xae
 8006596:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800659a:	6a1b      	ldr	r3, [r3, #32]
 800659c:	2b00      	cmp	r3, #0
 800659e:	d00b      	beq.n	80065b8 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	32ae      	adds	r2, #174	; 0xae
 80065aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ae:	6a1b      	ldr	r3, [r3, #32]
 80065b0:	78fa      	ldrb	r2, [r7, #3]
 80065b2:	4611      	mov	r1, r2
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3708      	adds	r7, #8
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}

080065c2 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80065c2:	b580      	push	{r7, lr}
 80065c4:	b082      	sub	sp, #8
 80065c6:	af00      	add	r7, sp, #0
 80065c8:	6078      	str	r0, [r7, #4]
 80065ca:	460b      	mov	r3, r1
 80065cc:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	32ae      	adds	r2, #174	; 0xae
 80065d8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065dc:	2b00      	cmp	r3, #0
 80065de:	d101      	bne.n	80065e4 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80065e0:	2303      	movs	r3, #3
 80065e2:	e01c      	b.n	800661e <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065ea:	b2db      	uxtb	r3, r3
 80065ec:	2b03      	cmp	r3, #3
 80065ee:	d115      	bne.n	800661c <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	32ae      	adds	r2, #174	; 0xae
 80065fa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	2b00      	cmp	r3, #0
 8006602:	d00b      	beq.n	800661c <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	32ae      	adds	r2, #174	; 0xae
 800660e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006612:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006614:	78fa      	ldrb	r2, [r7, #3]
 8006616:	4611      	mov	r1, r2
 8006618:	6878      	ldr	r0, [r7, #4]
 800661a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 800661c:	2300      	movs	r3, #0
}
 800661e:	4618      	mov	r0, r3
 8006620:	3708      	adds	r7, #8
 8006622:	46bd      	mov	sp, r7
 8006624:	bd80      	pop	{r7, pc}

08006626 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006626:	b480      	push	{r7}
 8006628:	b083      	sub	sp, #12
 800662a:	af00      	add	r7, sp, #0
 800662c:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800662e:	2300      	movs	r3, #0
}
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr

0800663c <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 800663c:	b580      	push	{r7, lr}
 800663e:	b084      	sub	sp, #16
 8006640:	af00      	add	r7, sp, #0
 8006642:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006644:	2300      	movs	r3, #0
 8006646:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006656:	2b00      	cmp	r3, #0
 8006658:	d00e      	beq.n	8006678 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800665a:	687b      	ldr	r3, [r7, #4]
 800665c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006660:	685b      	ldr	r3, [r3, #4]
 8006662:	687a      	ldr	r2, [r7, #4]
 8006664:	6852      	ldr	r2, [r2, #4]
 8006666:	b2d2      	uxtb	r2, r2
 8006668:	4611      	mov	r1, r2
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	4798      	blx	r3
 800666e:	4603      	mov	r3, r0
 8006670:	2b00      	cmp	r3, #0
 8006672:	d001      	beq.n	8006678 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006674:	2303      	movs	r3, #3
 8006676:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006678:	7bfb      	ldrb	r3, [r7, #15]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
 800668a:	460b      	mov	r3, r1
 800668c:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800668e:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006690:	4618      	mov	r0, r3
 8006692:	370c      	adds	r7, #12
 8006694:	46bd      	mov	sp, r7
 8006696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669a:	4770      	bx	lr

0800669c <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800669c:	b480      	push	{r7}
 800669e:	b083      	sub	sp, #12
 80066a0:	af00      	add	r7, sp, #0
 80066a2:	6078      	str	r0, [r7, #4]
 80066a4:	460b      	mov	r3, r1
 80066a6:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80066a8:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80066aa:	4618      	mov	r0, r3
 80066ac:	370c      	adds	r7, #12
 80066ae:	46bd      	mov	sp, r7
 80066b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b4:	4770      	bx	lr

080066b6 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b086      	sub	sp, #24
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	6078      	str	r0, [r7, #4]
 80066be:	460b      	mov	r3, r1
 80066c0:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80066ca:	2300      	movs	r3, #0
 80066cc:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	885b      	ldrh	r3, [r3, #2]
 80066d2:	b29a      	uxth	r2, r3
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	781b      	ldrb	r3, [r3, #0]
 80066d8:	b29b      	uxth	r3, r3
 80066da:	429a      	cmp	r2, r3
 80066dc:	d920      	bls.n	8006720 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	781b      	ldrb	r3, [r3, #0]
 80066e2:	b29b      	uxth	r3, r3
 80066e4:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80066e6:	e013      	b.n	8006710 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80066e8:	f107 030a 	add.w	r3, r7, #10
 80066ec:	4619      	mov	r1, r3
 80066ee:	6978      	ldr	r0, [r7, #20]
 80066f0:	f000 f81b 	bl	800672a <USBD_GetNextDesc>
 80066f4:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	785b      	ldrb	r3, [r3, #1]
 80066fa:	2b05      	cmp	r3, #5
 80066fc:	d108      	bne.n	8006710 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 80066fe:	697b      	ldr	r3, [r7, #20]
 8006700:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006702:	693b      	ldr	r3, [r7, #16]
 8006704:	789b      	ldrb	r3, [r3, #2]
 8006706:	78fa      	ldrb	r2, [r7, #3]
 8006708:	429a      	cmp	r2, r3
 800670a:	d008      	beq.n	800671e <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 800670c:	2300      	movs	r3, #0
 800670e:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	885b      	ldrh	r3, [r3, #2]
 8006714:	b29a      	uxth	r2, r3
 8006716:	897b      	ldrh	r3, [r7, #10]
 8006718:	429a      	cmp	r2, r3
 800671a:	d8e5      	bhi.n	80066e8 <USBD_GetEpDesc+0x32>
 800671c:	e000      	b.n	8006720 <USBD_GetEpDesc+0x6a>
          break;
 800671e:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006720:	693b      	ldr	r3, [r7, #16]
}
 8006722:	4618      	mov	r0, r3
 8006724:	3718      	adds	r7, #24
 8006726:	46bd      	mov	sp, r7
 8006728:	bd80      	pop	{r7, pc}

0800672a <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 800672a:	b480      	push	{r7}
 800672c:	b085      	sub	sp, #20
 800672e:	af00      	add	r7, sp, #0
 8006730:	6078      	str	r0, [r7, #4]
 8006732:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	881a      	ldrh	r2, [r3, #0]
 800673c:	68fb      	ldr	r3, [r7, #12]
 800673e:	781b      	ldrb	r3, [r3, #0]
 8006740:	b29b      	uxth	r3, r3
 8006742:	4413      	add	r3, r2
 8006744:	b29a      	uxth	r2, r3
 8006746:	683b      	ldr	r3, [r7, #0]
 8006748:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 800674a:	68fb      	ldr	r3, [r7, #12]
 800674c:	781b      	ldrb	r3, [r3, #0]
 800674e:	461a      	mov	r2, r3
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	4413      	add	r3, r2
 8006754:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006756:	68fb      	ldr	r3, [r7, #12]
}
 8006758:	4618      	mov	r0, r3
 800675a:	3714      	adds	r7, #20
 800675c:	46bd      	mov	sp, r7
 800675e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006762:	4770      	bx	lr

08006764 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006764:	b480      	push	{r7}
 8006766:	b087      	sub	sp, #28
 8006768:	af00      	add	r7, sp, #0
 800676a:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	781b      	ldrb	r3, [r3, #0]
 8006774:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006776:	697b      	ldr	r3, [r7, #20]
 8006778:	3301      	adds	r3, #1
 800677a:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006782:	8a3b      	ldrh	r3, [r7, #16]
 8006784:	021b      	lsls	r3, r3, #8
 8006786:	b21a      	sxth	r2, r3
 8006788:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 800678c:	4313      	orrs	r3, r2
 800678e:	b21b      	sxth	r3, r3
 8006790:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006792:	89fb      	ldrh	r3, [r7, #14]
}
 8006794:	4618      	mov	r0, r3
 8006796:	371c      	adds	r7, #28
 8006798:	46bd      	mov	sp, r7
 800679a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679e:	4770      	bx	lr

080067a0 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067a0:	b580      	push	{r7, lr}
 80067a2:	b084      	sub	sp, #16
 80067a4:	af00      	add	r7, sp, #0
 80067a6:	6078      	str	r0, [r7, #4]
 80067a8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067aa:	2300      	movs	r3, #0
 80067ac:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067ae:	683b      	ldr	r3, [r7, #0]
 80067b0:	781b      	ldrb	r3, [r3, #0]
 80067b2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067b6:	2b40      	cmp	r3, #64	; 0x40
 80067b8:	d005      	beq.n	80067c6 <USBD_StdDevReq+0x26>
 80067ba:	2b40      	cmp	r3, #64	; 0x40
 80067bc:	d857      	bhi.n	800686e <USBD_StdDevReq+0xce>
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d00f      	beq.n	80067e2 <USBD_StdDevReq+0x42>
 80067c2:	2b20      	cmp	r3, #32
 80067c4:	d153      	bne.n	800686e <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	32ae      	adds	r2, #174	; 0xae
 80067d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	6839      	ldr	r1, [r7, #0]
 80067d8:	6878      	ldr	r0, [r7, #4]
 80067da:	4798      	blx	r3
 80067dc:	4603      	mov	r3, r0
 80067de:	73fb      	strb	r3, [r7, #15]
      break;
 80067e0:	e04a      	b.n	8006878 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067e2:	683b      	ldr	r3, [r7, #0]
 80067e4:	785b      	ldrb	r3, [r3, #1]
 80067e6:	2b09      	cmp	r3, #9
 80067e8:	d83b      	bhi.n	8006862 <USBD_StdDevReq+0xc2>
 80067ea:	a201      	add	r2, pc, #4	; (adr r2, 80067f0 <USBD_StdDevReq+0x50>)
 80067ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067f0:	08006845 	.word	0x08006845
 80067f4:	08006859 	.word	0x08006859
 80067f8:	08006863 	.word	0x08006863
 80067fc:	0800684f 	.word	0x0800684f
 8006800:	08006863 	.word	0x08006863
 8006804:	08006823 	.word	0x08006823
 8006808:	08006819 	.word	0x08006819
 800680c:	08006863 	.word	0x08006863
 8006810:	0800683b 	.word	0x0800683b
 8006814:	0800682d 	.word	0x0800682d
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006818:	6839      	ldr	r1, [r7, #0]
 800681a:	6878      	ldr	r0, [r7, #4]
 800681c:	f000 fa3c 	bl	8006c98 <USBD_GetDescriptor>
          break;
 8006820:	e024      	b.n	800686c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006822:	6839      	ldr	r1, [r7, #0]
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fba1 	bl	8006f6c <USBD_SetAddress>
          break;
 800682a:	e01f      	b.n	800686c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 800682c:	6839      	ldr	r1, [r7, #0]
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f000 fbe0 	bl	8006ff4 <USBD_SetConfig>
 8006834:	4603      	mov	r3, r0
 8006836:	73fb      	strb	r3, [r7, #15]
          break;
 8006838:	e018      	b.n	800686c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 800683a:	6839      	ldr	r1, [r7, #0]
 800683c:	6878      	ldr	r0, [r7, #4]
 800683e:	f000 fc83 	bl	8007148 <USBD_GetConfig>
          break;
 8006842:	e013      	b.n	800686c <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006844:	6839      	ldr	r1, [r7, #0]
 8006846:	6878      	ldr	r0, [r7, #4]
 8006848:	f000 fcb4 	bl	80071b4 <USBD_GetStatus>
          break;
 800684c:	e00e      	b.n	800686c <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f000 fce3 	bl	800721c <USBD_SetFeature>
          break;
 8006856:	e009      	b.n	800686c <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006858:	6839      	ldr	r1, [r7, #0]
 800685a:	6878      	ldr	r0, [r7, #4]
 800685c:	f000 fd07 	bl	800726e <USBD_ClrFeature>
          break;
 8006860:	e004      	b.n	800686c <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006862:	6839      	ldr	r1, [r7, #0]
 8006864:	6878      	ldr	r0, [r7, #4]
 8006866:	f000 fd5e 	bl	8007326 <USBD_CtlError>
          break;
 800686a:	bf00      	nop
      }
      break;
 800686c:	e004      	b.n	8006878 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800686e:	6839      	ldr	r1, [r7, #0]
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fd58 	bl	8007326 <USBD_CtlError>
      break;
 8006876:	bf00      	nop
  }

  return ret;
 8006878:	7bfb      	ldrb	r3, [r7, #15]
}
 800687a:	4618      	mov	r0, r3
 800687c:	3710      	adds	r7, #16
 800687e:	46bd      	mov	sp, r7
 8006880:	bd80      	pop	{r7, pc}
 8006882:	bf00      	nop

08006884 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006884:	b580      	push	{r7, lr}
 8006886:	b084      	sub	sp, #16
 8006888:	af00      	add	r7, sp, #0
 800688a:	6078      	str	r0, [r7, #4]
 800688c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800688e:	2300      	movs	r3, #0
 8006890:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006892:	683b      	ldr	r3, [r7, #0]
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800689a:	2b40      	cmp	r3, #64	; 0x40
 800689c:	d005      	beq.n	80068aa <USBD_StdItfReq+0x26>
 800689e:	2b40      	cmp	r3, #64	; 0x40
 80068a0:	d852      	bhi.n	8006948 <USBD_StdItfReq+0xc4>
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d001      	beq.n	80068aa <USBD_StdItfReq+0x26>
 80068a6:	2b20      	cmp	r3, #32
 80068a8:	d14e      	bne.n	8006948 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	3b01      	subs	r3, #1
 80068b4:	2b02      	cmp	r3, #2
 80068b6:	d840      	bhi.n	800693a <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80068b8:	683b      	ldr	r3, [r7, #0]
 80068ba:	889b      	ldrh	r3, [r3, #4]
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	2b01      	cmp	r3, #1
 80068c0:	d836      	bhi.n	8006930 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80068c2:	683b      	ldr	r3, [r7, #0]
 80068c4:	889b      	ldrh	r3, [r3, #4]
 80068c6:	b2db      	uxtb	r3, r3
 80068c8:	4619      	mov	r1, r3
 80068ca:	6878      	ldr	r0, [r7, #4]
 80068cc:	f7ff fed9 	bl	8006682 <USBD_CoreFindIF>
 80068d0:	4603      	mov	r3, r0
 80068d2:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068d4:	7bbb      	ldrb	r3, [r7, #14]
 80068d6:	2bff      	cmp	r3, #255	; 0xff
 80068d8:	d01d      	beq.n	8006916 <USBD_StdItfReq+0x92>
 80068da:	7bbb      	ldrb	r3, [r7, #14]
 80068dc:	2b00      	cmp	r3, #0
 80068de:	d11a      	bne.n	8006916 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80068e0:	7bba      	ldrb	r2, [r7, #14]
 80068e2:	687b      	ldr	r3, [r7, #4]
 80068e4:	32ae      	adds	r2, #174	; 0xae
 80068e6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068ea:	689b      	ldr	r3, [r3, #8]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d00f      	beq.n	8006910 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80068f0:	7bba      	ldrb	r2, [r7, #14]
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80068f8:	7bba      	ldrb	r2, [r7, #14]
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	32ae      	adds	r2, #174	; 0xae
 80068fe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006902:	689b      	ldr	r3, [r3, #8]
 8006904:	6839      	ldr	r1, [r7, #0]
 8006906:	6878      	ldr	r0, [r7, #4]
 8006908:	4798      	blx	r3
 800690a:	4603      	mov	r3, r0
 800690c:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800690e:	e004      	b.n	800691a <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006910:	2303      	movs	r3, #3
 8006912:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006914:	e001      	b.n	800691a <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006916:	2303      	movs	r3, #3
 8006918:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 800691a:	683b      	ldr	r3, [r7, #0]
 800691c:	88db      	ldrh	r3, [r3, #6]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d110      	bne.n	8006944 <USBD_StdItfReq+0xc0>
 8006922:	7bfb      	ldrb	r3, [r7, #15]
 8006924:	2b00      	cmp	r3, #0
 8006926:	d10d      	bne.n	8006944 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006928:	6878      	ldr	r0, [r7, #4]
 800692a:	f000 fdaa 	bl	8007482 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800692e:	e009      	b.n	8006944 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006930:	6839      	ldr	r1, [r7, #0]
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 fcf7 	bl	8007326 <USBD_CtlError>
          break;
 8006938:	e004      	b.n	8006944 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 800693a:	6839      	ldr	r1, [r7, #0]
 800693c:	6878      	ldr	r0, [r7, #4]
 800693e:	f000 fcf2 	bl	8007326 <USBD_CtlError>
          break;
 8006942:	e000      	b.n	8006946 <USBD_StdItfReq+0xc2>
          break;
 8006944:	bf00      	nop
      }
      break;
 8006946:	e004      	b.n	8006952 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006948:	6839      	ldr	r1, [r7, #0]
 800694a:	6878      	ldr	r0, [r7, #4]
 800694c:	f000 fceb 	bl	8007326 <USBD_CtlError>
      break;
 8006950:	bf00      	nop
  }

  return ret;
 8006952:	7bfb      	ldrb	r3, [r7, #15]
}
 8006954:	4618      	mov	r0, r3
 8006956:	3710      	adds	r7, #16
 8006958:	46bd      	mov	sp, r7
 800695a:	bd80      	pop	{r7, pc}

0800695c <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	b084      	sub	sp, #16
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006966:	2300      	movs	r3, #0
 8006968:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 800696a:	683b      	ldr	r3, [r7, #0]
 800696c:	889b      	ldrh	r3, [r3, #4]
 800696e:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006970:	683b      	ldr	r3, [r7, #0]
 8006972:	781b      	ldrb	r3, [r3, #0]
 8006974:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006978:	2b40      	cmp	r3, #64	; 0x40
 800697a:	d007      	beq.n	800698c <USBD_StdEPReq+0x30>
 800697c:	2b40      	cmp	r3, #64	; 0x40
 800697e:	f200 817f 	bhi.w	8006c80 <USBD_StdEPReq+0x324>
 8006982:	2b00      	cmp	r3, #0
 8006984:	d02a      	beq.n	80069dc <USBD_StdEPReq+0x80>
 8006986:	2b20      	cmp	r3, #32
 8006988:	f040 817a 	bne.w	8006c80 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 800698c:	7bbb      	ldrb	r3, [r7, #14]
 800698e:	4619      	mov	r1, r3
 8006990:	6878      	ldr	r0, [r7, #4]
 8006992:	f7ff fe83 	bl	800669c <USBD_CoreFindEP>
 8006996:	4603      	mov	r3, r0
 8006998:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800699a:	7b7b      	ldrb	r3, [r7, #13]
 800699c:	2bff      	cmp	r3, #255	; 0xff
 800699e:	f000 8174 	beq.w	8006c8a <USBD_StdEPReq+0x32e>
 80069a2:	7b7b      	ldrb	r3, [r7, #13]
 80069a4:	2b00      	cmp	r3, #0
 80069a6:	f040 8170 	bne.w	8006c8a <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80069aa:	7b7a      	ldrb	r2, [r7, #13]
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80069b2:	7b7a      	ldrb	r2, [r7, #13]
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	32ae      	adds	r2, #174	; 0xae
 80069b8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069bc:	689b      	ldr	r3, [r3, #8]
 80069be:	2b00      	cmp	r3, #0
 80069c0:	f000 8163 	beq.w	8006c8a <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80069c4:	7b7a      	ldrb	r2, [r7, #13]
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	32ae      	adds	r2, #174	; 0xae
 80069ca:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ce:	689b      	ldr	r3, [r3, #8]
 80069d0:	6839      	ldr	r1, [r7, #0]
 80069d2:	6878      	ldr	r0, [r7, #4]
 80069d4:	4798      	blx	r3
 80069d6:	4603      	mov	r3, r0
 80069d8:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069da:	e156      	b.n	8006c8a <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069dc:	683b      	ldr	r3, [r7, #0]
 80069de:	785b      	ldrb	r3, [r3, #1]
 80069e0:	2b03      	cmp	r3, #3
 80069e2:	d008      	beq.n	80069f6 <USBD_StdEPReq+0x9a>
 80069e4:	2b03      	cmp	r3, #3
 80069e6:	f300 8145 	bgt.w	8006c74 <USBD_StdEPReq+0x318>
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	f000 809b 	beq.w	8006b26 <USBD_StdEPReq+0x1ca>
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d03c      	beq.n	8006a6e <USBD_StdEPReq+0x112>
 80069f4:	e13e      	b.n	8006c74 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80069fc:	b2db      	uxtb	r3, r3
 80069fe:	2b02      	cmp	r3, #2
 8006a00:	d002      	beq.n	8006a08 <USBD_StdEPReq+0xac>
 8006a02:	2b03      	cmp	r3, #3
 8006a04:	d016      	beq.n	8006a34 <USBD_StdEPReq+0xd8>
 8006a06:	e02c      	b.n	8006a62 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a08:	7bbb      	ldrb	r3, [r7, #14]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d00d      	beq.n	8006a2a <USBD_StdEPReq+0xce>
 8006a0e:	7bbb      	ldrb	r3, [r7, #14]
 8006a10:	2b80      	cmp	r3, #128	; 0x80
 8006a12:	d00a      	beq.n	8006a2a <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	4619      	mov	r1, r3
 8006a18:	6878      	ldr	r0, [r7, #4]
 8006a1a:	f001 f877 	bl	8007b0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a1e:	2180      	movs	r1, #128	; 0x80
 8006a20:	6878      	ldr	r0, [r7, #4]
 8006a22:	f001 f873 	bl	8007b0c <USBD_LL_StallEP>
 8006a26:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a28:	e020      	b.n	8006a6c <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006a2a:	6839      	ldr	r1, [r7, #0]
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f000 fc7a 	bl	8007326 <USBD_CtlError>
              break;
 8006a32:	e01b      	b.n	8006a6c <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a34:	683b      	ldr	r3, [r7, #0]
 8006a36:	885b      	ldrh	r3, [r3, #2]
 8006a38:	2b00      	cmp	r3, #0
 8006a3a:	d10e      	bne.n	8006a5a <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a3c:	7bbb      	ldrb	r3, [r7, #14]
 8006a3e:	2b00      	cmp	r3, #0
 8006a40:	d00b      	beq.n	8006a5a <USBD_StdEPReq+0xfe>
 8006a42:	7bbb      	ldrb	r3, [r7, #14]
 8006a44:	2b80      	cmp	r3, #128	; 0x80
 8006a46:	d008      	beq.n	8006a5a <USBD_StdEPReq+0xfe>
 8006a48:	683b      	ldr	r3, [r7, #0]
 8006a4a:	88db      	ldrh	r3, [r3, #6]
 8006a4c:	2b00      	cmp	r3, #0
 8006a4e:	d104      	bne.n	8006a5a <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a50:	7bbb      	ldrb	r3, [r7, #14]
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f001 f859 	bl	8007b0c <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a5a:	6878      	ldr	r0, [r7, #4]
 8006a5c:	f000 fd11 	bl	8007482 <USBD_CtlSendStatus>

              break;
 8006a60:	e004      	b.n	8006a6c <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006a62:	6839      	ldr	r1, [r7, #0]
 8006a64:	6878      	ldr	r0, [r7, #4]
 8006a66:	f000 fc5e 	bl	8007326 <USBD_CtlError>
              break;
 8006a6a:	bf00      	nop
          }
          break;
 8006a6c:	e107      	b.n	8006c7e <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a74:	b2db      	uxtb	r3, r3
 8006a76:	2b02      	cmp	r3, #2
 8006a78:	d002      	beq.n	8006a80 <USBD_StdEPReq+0x124>
 8006a7a:	2b03      	cmp	r3, #3
 8006a7c:	d016      	beq.n	8006aac <USBD_StdEPReq+0x150>
 8006a7e:	e04b      	b.n	8006b18 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a80:	7bbb      	ldrb	r3, [r7, #14]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d00d      	beq.n	8006aa2 <USBD_StdEPReq+0x146>
 8006a86:	7bbb      	ldrb	r3, [r7, #14]
 8006a88:	2b80      	cmp	r3, #128	; 0x80
 8006a8a:	d00a      	beq.n	8006aa2 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a8c:	7bbb      	ldrb	r3, [r7, #14]
 8006a8e:	4619      	mov	r1, r3
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f001 f83b 	bl	8007b0c <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a96:	2180      	movs	r1, #128	; 0x80
 8006a98:	6878      	ldr	r0, [r7, #4]
 8006a9a:	f001 f837 	bl	8007b0c <USBD_LL_StallEP>
 8006a9e:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006aa0:	e040      	b.n	8006b24 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006aa2:	6839      	ldr	r1, [r7, #0]
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f000 fc3e 	bl	8007326 <USBD_CtlError>
              break;
 8006aaa:	e03b      	b.n	8006b24 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	885b      	ldrh	r3, [r3, #2]
 8006ab0:	2b00      	cmp	r3, #0
 8006ab2:	d136      	bne.n	8006b22 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ab4:	7bbb      	ldrb	r3, [r7, #14]
 8006ab6:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d004      	beq.n	8006ac8 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006abe:	7bbb      	ldrb	r3, [r7, #14]
 8006ac0:	4619      	mov	r1, r3
 8006ac2:	6878      	ldr	r0, [r7, #4]
 8006ac4:	f001 f841 	bl	8007b4a <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006ac8:	6878      	ldr	r0, [r7, #4]
 8006aca:	f000 fcda 	bl	8007482 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ace:	7bbb      	ldrb	r3, [r7, #14]
 8006ad0:	4619      	mov	r1, r3
 8006ad2:	6878      	ldr	r0, [r7, #4]
 8006ad4:	f7ff fde2 	bl	800669c <USBD_CoreFindEP>
 8006ad8:	4603      	mov	r3, r0
 8006ada:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006adc:	7b7b      	ldrb	r3, [r7, #13]
 8006ade:	2bff      	cmp	r3, #255	; 0xff
 8006ae0:	d01f      	beq.n	8006b22 <USBD_StdEPReq+0x1c6>
 8006ae2:	7b7b      	ldrb	r3, [r7, #13]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d11c      	bne.n	8006b22 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006ae8:	7b7a      	ldrb	r2, [r7, #13]
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006af0:	7b7a      	ldrb	r2, [r7, #13]
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	32ae      	adds	r2, #174	; 0xae
 8006af6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006afa:	689b      	ldr	r3, [r3, #8]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d010      	beq.n	8006b22 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b00:	7b7a      	ldrb	r2, [r7, #13]
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	32ae      	adds	r2, #174	; 0xae
 8006b06:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b0a:	689b      	ldr	r3, [r3, #8]
 8006b0c:	6839      	ldr	r1, [r7, #0]
 8006b0e:	6878      	ldr	r0, [r7, #4]
 8006b10:	4798      	blx	r3
 8006b12:	4603      	mov	r3, r0
 8006b14:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006b16:	e004      	b.n	8006b22 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 fc03 	bl	8007326 <USBD_CtlError>
              break;
 8006b20:	e000      	b.n	8006b24 <USBD_StdEPReq+0x1c8>
              break;
 8006b22:	bf00      	nop
          }
          break;
 8006b24:	e0ab      	b.n	8006c7e <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b2c:	b2db      	uxtb	r3, r3
 8006b2e:	2b02      	cmp	r3, #2
 8006b30:	d002      	beq.n	8006b38 <USBD_StdEPReq+0x1dc>
 8006b32:	2b03      	cmp	r3, #3
 8006b34:	d032      	beq.n	8006b9c <USBD_StdEPReq+0x240>
 8006b36:	e097      	b.n	8006c68 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b38:	7bbb      	ldrb	r3, [r7, #14]
 8006b3a:	2b00      	cmp	r3, #0
 8006b3c:	d007      	beq.n	8006b4e <USBD_StdEPReq+0x1f2>
 8006b3e:	7bbb      	ldrb	r3, [r7, #14]
 8006b40:	2b80      	cmp	r3, #128	; 0x80
 8006b42:	d004      	beq.n	8006b4e <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006b44:	6839      	ldr	r1, [r7, #0]
 8006b46:	6878      	ldr	r0, [r7, #4]
 8006b48:	f000 fbed 	bl	8007326 <USBD_CtlError>
                break;
 8006b4c:	e091      	b.n	8006c72 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b4e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	da0b      	bge.n	8006b6e <USBD_StdEPReq+0x212>
 8006b56:	7bbb      	ldrb	r3, [r7, #14]
 8006b58:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b5c:	4613      	mov	r3, r2
 8006b5e:	009b      	lsls	r3, r3, #2
 8006b60:	4413      	add	r3, r2
 8006b62:	009b      	lsls	r3, r3, #2
 8006b64:	3310      	adds	r3, #16
 8006b66:	687a      	ldr	r2, [r7, #4]
 8006b68:	4413      	add	r3, r2
 8006b6a:	3304      	adds	r3, #4
 8006b6c:	e00b      	b.n	8006b86 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b6e:	7bbb      	ldrb	r3, [r7, #14]
 8006b70:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b74:	4613      	mov	r3, r2
 8006b76:	009b      	lsls	r3, r3, #2
 8006b78:	4413      	add	r3, r2
 8006b7a:	009b      	lsls	r3, r3, #2
 8006b7c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b80:	687a      	ldr	r2, [r7, #4]
 8006b82:	4413      	add	r3, r2
 8006b84:	3304      	adds	r3, #4
 8006b86:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	2200      	movs	r2, #0
 8006b8c:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b8e:	68bb      	ldr	r3, [r7, #8]
 8006b90:	2202      	movs	r2, #2
 8006b92:	4619      	mov	r1, r3
 8006b94:	6878      	ldr	r0, [r7, #4]
 8006b96:	f000 fc37 	bl	8007408 <USBD_CtlSendData>
              break;
 8006b9a:	e06a      	b.n	8006c72 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006b9c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006ba0:	2b00      	cmp	r3, #0
 8006ba2:	da11      	bge.n	8006bc8 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006ba4:	7bbb      	ldrb	r3, [r7, #14]
 8006ba6:	f003 020f 	and.w	r2, r3, #15
 8006baa:	6879      	ldr	r1, [r7, #4]
 8006bac:	4613      	mov	r3, r2
 8006bae:	009b      	lsls	r3, r3, #2
 8006bb0:	4413      	add	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	440b      	add	r3, r1
 8006bb6:	3324      	adds	r3, #36	; 0x24
 8006bb8:	881b      	ldrh	r3, [r3, #0]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d117      	bne.n	8006bee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006bbe:	6839      	ldr	r1, [r7, #0]
 8006bc0:	6878      	ldr	r0, [r7, #4]
 8006bc2:	f000 fbb0 	bl	8007326 <USBD_CtlError>
                  break;
 8006bc6:	e054      	b.n	8006c72 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006bc8:	7bbb      	ldrb	r3, [r7, #14]
 8006bca:	f003 020f 	and.w	r2, r3, #15
 8006bce:	6879      	ldr	r1, [r7, #4]
 8006bd0:	4613      	mov	r3, r2
 8006bd2:	009b      	lsls	r3, r3, #2
 8006bd4:	4413      	add	r3, r2
 8006bd6:	009b      	lsls	r3, r3, #2
 8006bd8:	440b      	add	r3, r1
 8006bda:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bde:	881b      	ldrh	r3, [r3, #0]
 8006be0:	2b00      	cmp	r3, #0
 8006be2:	d104      	bne.n	8006bee <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006be4:	6839      	ldr	r1, [r7, #0]
 8006be6:	6878      	ldr	r0, [r7, #4]
 8006be8:	f000 fb9d 	bl	8007326 <USBD_CtlError>
                  break;
 8006bec:	e041      	b.n	8006c72 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bee:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bf2:	2b00      	cmp	r3, #0
 8006bf4:	da0b      	bge.n	8006c0e <USBD_StdEPReq+0x2b2>
 8006bf6:	7bbb      	ldrb	r3, [r7, #14]
 8006bf8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006bfc:	4613      	mov	r3, r2
 8006bfe:	009b      	lsls	r3, r3, #2
 8006c00:	4413      	add	r3, r2
 8006c02:	009b      	lsls	r3, r3, #2
 8006c04:	3310      	adds	r3, #16
 8006c06:	687a      	ldr	r2, [r7, #4]
 8006c08:	4413      	add	r3, r2
 8006c0a:	3304      	adds	r3, #4
 8006c0c:	e00b      	b.n	8006c26 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c0e:	7bbb      	ldrb	r3, [r7, #14]
 8006c10:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c14:	4613      	mov	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	4413      	add	r3, r2
 8006c1a:	009b      	lsls	r3, r3, #2
 8006c1c:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c20:	687a      	ldr	r2, [r7, #4]
 8006c22:	4413      	add	r3, r2
 8006c24:	3304      	adds	r3, #4
 8006c26:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c28:	7bbb      	ldrb	r3, [r7, #14]
 8006c2a:	2b00      	cmp	r3, #0
 8006c2c:	d002      	beq.n	8006c34 <USBD_StdEPReq+0x2d8>
 8006c2e:	7bbb      	ldrb	r3, [r7, #14]
 8006c30:	2b80      	cmp	r3, #128	; 0x80
 8006c32:	d103      	bne.n	8006c3c <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006c34:	68bb      	ldr	r3, [r7, #8]
 8006c36:	2200      	movs	r2, #0
 8006c38:	601a      	str	r2, [r3, #0]
 8006c3a:	e00e      	b.n	8006c5a <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c3c:	7bbb      	ldrb	r3, [r7, #14]
 8006c3e:	4619      	mov	r1, r3
 8006c40:	6878      	ldr	r0, [r7, #4]
 8006c42:	f000 ffa1 	bl	8007b88 <USBD_LL_IsStallEP>
 8006c46:	4603      	mov	r3, r0
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d003      	beq.n	8006c54 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	2201      	movs	r2, #1
 8006c50:	601a      	str	r2, [r3, #0]
 8006c52:	e002      	b.n	8006c5a <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006c54:	68bb      	ldr	r3, [r7, #8]
 8006c56:	2200      	movs	r2, #0
 8006c58:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2202      	movs	r2, #2
 8006c5e:	4619      	mov	r1, r3
 8006c60:	6878      	ldr	r0, [r7, #4]
 8006c62:	f000 fbd1 	bl	8007408 <USBD_CtlSendData>
              break;
 8006c66:	e004      	b.n	8006c72 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006c68:	6839      	ldr	r1, [r7, #0]
 8006c6a:	6878      	ldr	r0, [r7, #4]
 8006c6c:	f000 fb5b 	bl	8007326 <USBD_CtlError>
              break;
 8006c70:	bf00      	nop
          }
          break;
 8006c72:	e004      	b.n	8006c7e <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fb55 	bl	8007326 <USBD_CtlError>
          break;
 8006c7c:	bf00      	nop
      }
      break;
 8006c7e:	e005      	b.n	8006c8c <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fb4f 	bl	8007326 <USBD_CtlError>
      break;
 8006c88:	e000      	b.n	8006c8c <USBD_StdEPReq+0x330>
      break;
 8006c8a:	bf00      	nop
  }

  return ret;
 8006c8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c8e:	4618      	mov	r0, r3
 8006c90:	3710      	adds	r7, #16
 8006c92:	46bd      	mov	sp, r7
 8006c94:	bd80      	pop	{r7, pc}
	...

08006c98 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c98:	b580      	push	{r7, lr}
 8006c9a:	b084      	sub	sp, #16
 8006c9c:	af00      	add	r7, sp, #0
 8006c9e:	6078      	str	r0, [r7, #4]
 8006ca0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006ca2:	2300      	movs	r3, #0
 8006ca4:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006ca6:	2300      	movs	r3, #0
 8006ca8:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006caa:	2300      	movs	r3, #0
 8006cac:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006cae:	683b      	ldr	r3, [r7, #0]
 8006cb0:	885b      	ldrh	r3, [r3, #2]
 8006cb2:	0a1b      	lsrs	r3, r3, #8
 8006cb4:	b29b      	uxth	r3, r3
 8006cb6:	3b01      	subs	r3, #1
 8006cb8:	2b06      	cmp	r3, #6
 8006cba:	f200 8128 	bhi.w	8006f0e <USBD_GetDescriptor+0x276>
 8006cbe:	a201      	add	r2, pc, #4	; (adr r2, 8006cc4 <USBD_GetDescriptor+0x2c>)
 8006cc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cc4:	08006ce1 	.word	0x08006ce1
 8006cc8:	08006cf9 	.word	0x08006cf9
 8006ccc:	08006d39 	.word	0x08006d39
 8006cd0:	08006f0f 	.word	0x08006f0f
 8006cd4:	08006f0f 	.word	0x08006f0f
 8006cd8:	08006eaf 	.word	0x08006eaf
 8006cdc:	08006edb 	.word	0x08006edb
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	687a      	ldr	r2, [r7, #4]
 8006cea:	7c12      	ldrb	r2, [r2, #16]
 8006cec:	f107 0108 	add.w	r1, r7, #8
 8006cf0:	4610      	mov	r0, r2
 8006cf2:	4798      	blx	r3
 8006cf4:	60f8      	str	r0, [r7, #12]
      break;
 8006cf6:	e112      	b.n	8006f1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	7c1b      	ldrb	r3, [r3, #16]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d10d      	bne.n	8006d1c <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d08:	f107 0208 	add.w	r2, r7, #8
 8006d0c:	4610      	mov	r0, r2
 8006d0e:	4798      	blx	r3
 8006d10:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	3301      	adds	r3, #1
 8006d16:	2202      	movs	r2, #2
 8006d18:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d1a:	e100      	b.n	8006f1e <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d22:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d24:	f107 0208 	add.w	r2, r7, #8
 8006d28:	4610      	mov	r0, r2
 8006d2a:	4798      	blx	r3
 8006d2c:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d2e:	68fb      	ldr	r3, [r7, #12]
 8006d30:	3301      	adds	r3, #1
 8006d32:	2202      	movs	r2, #2
 8006d34:	701a      	strb	r2, [r3, #0]
      break;
 8006d36:	e0f2      	b.n	8006f1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	885b      	ldrh	r3, [r3, #2]
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	2b05      	cmp	r3, #5
 8006d40:	f200 80ac 	bhi.w	8006e9c <USBD_GetDescriptor+0x204>
 8006d44:	a201      	add	r2, pc, #4	; (adr r2, 8006d4c <USBD_GetDescriptor+0xb4>)
 8006d46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d4a:	bf00      	nop
 8006d4c:	08006d65 	.word	0x08006d65
 8006d50:	08006d99 	.word	0x08006d99
 8006d54:	08006dcd 	.word	0x08006dcd
 8006d58:	08006e01 	.word	0x08006e01
 8006d5c:	08006e35 	.word	0x08006e35
 8006d60:	08006e69 	.word	0x08006e69
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d6a:	685b      	ldr	r3, [r3, #4]
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d00b      	beq.n	8006d88 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	687a      	ldr	r2, [r7, #4]
 8006d7a:	7c12      	ldrb	r2, [r2, #16]
 8006d7c:	f107 0108 	add.w	r1, r7, #8
 8006d80:	4610      	mov	r0, r2
 8006d82:	4798      	blx	r3
 8006d84:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d86:	e091      	b.n	8006eac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d88:	6839      	ldr	r1, [r7, #0]
 8006d8a:	6878      	ldr	r0, [r7, #4]
 8006d8c:	f000 facb 	bl	8007326 <USBD_CtlError>
            err++;
 8006d90:	7afb      	ldrb	r3, [r7, #11]
 8006d92:	3301      	adds	r3, #1
 8006d94:	72fb      	strb	r3, [r7, #11]
          break;
 8006d96:	e089      	b.n	8006eac <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d9e:	689b      	ldr	r3, [r3, #8]
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d00b      	beq.n	8006dbc <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	687a      	ldr	r2, [r7, #4]
 8006dae:	7c12      	ldrb	r2, [r2, #16]
 8006db0:	f107 0108 	add.w	r1, r7, #8
 8006db4:	4610      	mov	r0, r2
 8006db6:	4798      	blx	r3
 8006db8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dba:	e077      	b.n	8006eac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dbc:	6839      	ldr	r1, [r7, #0]
 8006dbe:	6878      	ldr	r0, [r7, #4]
 8006dc0:	f000 fab1 	bl	8007326 <USBD_CtlError>
            err++;
 8006dc4:	7afb      	ldrb	r3, [r7, #11]
 8006dc6:	3301      	adds	r3, #1
 8006dc8:	72fb      	strb	r3, [r7, #11]
          break;
 8006dca:	e06f      	b.n	8006eac <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dd2:	68db      	ldr	r3, [r3, #12]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d00b      	beq.n	8006df0 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	687a      	ldr	r2, [r7, #4]
 8006de2:	7c12      	ldrb	r2, [r2, #16]
 8006de4:	f107 0108 	add.w	r1, r7, #8
 8006de8:	4610      	mov	r0, r2
 8006dea:	4798      	blx	r3
 8006dec:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dee:	e05d      	b.n	8006eac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006df0:	6839      	ldr	r1, [r7, #0]
 8006df2:	6878      	ldr	r0, [r7, #4]
 8006df4:	f000 fa97 	bl	8007326 <USBD_CtlError>
            err++;
 8006df8:	7afb      	ldrb	r3, [r7, #11]
 8006dfa:	3301      	adds	r3, #1
 8006dfc:	72fb      	strb	r3, [r7, #11]
          break;
 8006dfe:	e055      	b.n	8006eac <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e06:	691b      	ldr	r3, [r3, #16]
 8006e08:	2b00      	cmp	r3, #0
 8006e0a:	d00b      	beq.n	8006e24 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	687a      	ldr	r2, [r7, #4]
 8006e16:	7c12      	ldrb	r2, [r2, #16]
 8006e18:	f107 0108 	add.w	r1, r7, #8
 8006e1c:	4610      	mov	r0, r2
 8006e1e:	4798      	blx	r3
 8006e20:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e22:	e043      	b.n	8006eac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e24:	6839      	ldr	r1, [r7, #0]
 8006e26:	6878      	ldr	r0, [r7, #4]
 8006e28:	f000 fa7d 	bl	8007326 <USBD_CtlError>
            err++;
 8006e2c:	7afb      	ldrb	r3, [r7, #11]
 8006e2e:	3301      	adds	r3, #1
 8006e30:	72fb      	strb	r3, [r7, #11]
          break;
 8006e32:	e03b      	b.n	8006eac <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e3a:	695b      	ldr	r3, [r3, #20]
 8006e3c:	2b00      	cmp	r3, #0
 8006e3e:	d00b      	beq.n	8006e58 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	687a      	ldr	r2, [r7, #4]
 8006e4a:	7c12      	ldrb	r2, [r2, #16]
 8006e4c:	f107 0108 	add.w	r1, r7, #8
 8006e50:	4610      	mov	r0, r2
 8006e52:	4798      	blx	r3
 8006e54:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e56:	e029      	b.n	8006eac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e58:	6839      	ldr	r1, [r7, #0]
 8006e5a:	6878      	ldr	r0, [r7, #4]
 8006e5c:	f000 fa63 	bl	8007326 <USBD_CtlError>
            err++;
 8006e60:	7afb      	ldrb	r3, [r7, #11]
 8006e62:	3301      	adds	r3, #1
 8006e64:	72fb      	strb	r3, [r7, #11]
          break;
 8006e66:	e021      	b.n	8006eac <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e68:	687b      	ldr	r3, [r7, #4]
 8006e6a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e6e:	699b      	ldr	r3, [r3, #24]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d00b      	beq.n	8006e8c <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	687a      	ldr	r2, [r7, #4]
 8006e7e:	7c12      	ldrb	r2, [r2, #16]
 8006e80:	f107 0108 	add.w	r1, r7, #8
 8006e84:	4610      	mov	r0, r2
 8006e86:	4798      	blx	r3
 8006e88:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e8a:	e00f      	b.n	8006eac <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e8c:	6839      	ldr	r1, [r7, #0]
 8006e8e:	6878      	ldr	r0, [r7, #4]
 8006e90:	f000 fa49 	bl	8007326 <USBD_CtlError>
            err++;
 8006e94:	7afb      	ldrb	r3, [r7, #11]
 8006e96:	3301      	adds	r3, #1
 8006e98:	72fb      	strb	r3, [r7, #11]
          break;
 8006e9a:	e007      	b.n	8006eac <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006e9c:	6839      	ldr	r1, [r7, #0]
 8006e9e:	6878      	ldr	r0, [r7, #4]
 8006ea0:	f000 fa41 	bl	8007326 <USBD_CtlError>
          err++;
 8006ea4:	7afb      	ldrb	r3, [r7, #11]
 8006ea6:	3301      	adds	r3, #1
 8006ea8:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006eaa:	bf00      	nop
      }
      break;
 8006eac:	e037      	b.n	8006f1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	7c1b      	ldrb	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d109      	bne.n	8006eca <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ebc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ebe:	f107 0208 	add.w	r2, r7, #8
 8006ec2:	4610      	mov	r0, r2
 8006ec4:	4798      	blx	r3
 8006ec6:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ec8:	e029      	b.n	8006f1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 fa2a 	bl	8007326 <USBD_CtlError>
        err++;
 8006ed2:	7afb      	ldrb	r3, [r7, #11]
 8006ed4:	3301      	adds	r3, #1
 8006ed6:	72fb      	strb	r3, [r7, #11]
      break;
 8006ed8:	e021      	b.n	8006f1e <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eda:	687b      	ldr	r3, [r7, #4]
 8006edc:	7c1b      	ldrb	r3, [r3, #16]
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d10d      	bne.n	8006efe <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eea:	f107 0208 	add.w	r2, r7, #8
 8006eee:	4610      	mov	r0, r2
 8006ef0:	4798      	blx	r3
 8006ef2:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	2207      	movs	r2, #7
 8006efa:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006efc:	e00f      	b.n	8006f1e <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006efe:	6839      	ldr	r1, [r7, #0]
 8006f00:	6878      	ldr	r0, [r7, #4]
 8006f02:	f000 fa10 	bl	8007326 <USBD_CtlError>
        err++;
 8006f06:	7afb      	ldrb	r3, [r7, #11]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f0c:	e007      	b.n	8006f1e <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f0e:	6839      	ldr	r1, [r7, #0]
 8006f10:	6878      	ldr	r0, [r7, #4]
 8006f12:	f000 fa08 	bl	8007326 <USBD_CtlError>
      err++;
 8006f16:	7afb      	ldrb	r3, [r7, #11]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	72fb      	strb	r3, [r7, #11]
      break;
 8006f1c:	bf00      	nop
  }

  if (err != 0U)
 8006f1e:	7afb      	ldrb	r3, [r7, #11]
 8006f20:	2b00      	cmp	r3, #0
 8006f22:	d11e      	bne.n	8006f62 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f24:	683b      	ldr	r3, [r7, #0]
 8006f26:	88db      	ldrh	r3, [r3, #6]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d016      	beq.n	8006f5a <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006f2c:	893b      	ldrh	r3, [r7, #8]
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d00e      	beq.n	8006f50 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006f32:	683b      	ldr	r3, [r7, #0]
 8006f34:	88da      	ldrh	r2, [r3, #6]
 8006f36:	893b      	ldrh	r3, [r7, #8]
 8006f38:	4293      	cmp	r3, r2
 8006f3a:	bf28      	it	cs
 8006f3c:	4613      	movcs	r3, r2
 8006f3e:	b29b      	uxth	r3, r3
 8006f40:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f42:	893b      	ldrh	r3, [r7, #8]
 8006f44:	461a      	mov	r2, r3
 8006f46:	68f9      	ldr	r1, [r7, #12]
 8006f48:	6878      	ldr	r0, [r7, #4]
 8006f4a:	f000 fa5d 	bl	8007408 <USBD_CtlSendData>
 8006f4e:	e009      	b.n	8006f64 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006f50:	6839      	ldr	r1, [r7, #0]
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f9e7 	bl	8007326 <USBD_CtlError>
 8006f58:	e004      	b.n	8006f64 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006f5a:	6878      	ldr	r0, [r7, #4]
 8006f5c:	f000 fa91 	bl	8007482 <USBD_CtlSendStatus>
 8006f60:	e000      	b.n	8006f64 <USBD_GetDescriptor+0x2cc>
    return;
 8006f62:	bf00      	nop
  }
}
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop

08006f6c <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f6c:	b580      	push	{r7, lr}
 8006f6e:	b084      	sub	sp, #16
 8006f70:	af00      	add	r7, sp, #0
 8006f72:	6078      	str	r0, [r7, #4]
 8006f74:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f76:	683b      	ldr	r3, [r7, #0]
 8006f78:	889b      	ldrh	r3, [r3, #4]
 8006f7a:	2b00      	cmp	r3, #0
 8006f7c:	d131      	bne.n	8006fe2 <USBD_SetAddress+0x76>
 8006f7e:	683b      	ldr	r3, [r7, #0]
 8006f80:	88db      	ldrh	r3, [r3, #6]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d12d      	bne.n	8006fe2 <USBD_SetAddress+0x76>
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	885b      	ldrh	r3, [r3, #2]
 8006f8a:	2b7f      	cmp	r3, #127	; 0x7f
 8006f8c:	d829      	bhi.n	8006fe2 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f8e:	683b      	ldr	r3, [r7, #0]
 8006f90:	885b      	ldrh	r3, [r3, #2]
 8006f92:	b2db      	uxtb	r3, r3
 8006f94:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006f98:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fa0:	b2db      	uxtb	r3, r3
 8006fa2:	2b03      	cmp	r3, #3
 8006fa4:	d104      	bne.n	8006fb0 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006fa6:	6839      	ldr	r1, [r7, #0]
 8006fa8:	6878      	ldr	r0, [r7, #4]
 8006faa:	f000 f9bc 	bl	8007326 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fae:	e01d      	b.n	8006fec <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	7bfa      	ldrb	r2, [r7, #15]
 8006fb4:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006fb8:	7bfb      	ldrb	r3, [r7, #15]
 8006fba:	4619      	mov	r1, r3
 8006fbc:	6878      	ldr	r0, [r7, #4]
 8006fbe:	f000 fe0f 	bl	8007be0 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006fc2:	6878      	ldr	r0, [r7, #4]
 8006fc4:	f000 fa5d 	bl	8007482 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006fc8:	7bfb      	ldrb	r3, [r7, #15]
 8006fca:	2b00      	cmp	r3, #0
 8006fcc:	d004      	beq.n	8006fd8 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	2202      	movs	r2, #2
 8006fd2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fd6:	e009      	b.n	8006fec <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe0:	e004      	b.n	8006fec <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fe2:	6839      	ldr	r1, [r7, #0]
 8006fe4:	6878      	ldr	r0, [r7, #4]
 8006fe6:	f000 f99e 	bl	8007326 <USBD_CtlError>
  }
}
 8006fea:	bf00      	nop
 8006fec:	bf00      	nop
 8006fee:	3710      	adds	r7, #16
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	bd80      	pop	{r7, pc}

08006ff4 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ff4:	b580      	push	{r7, lr}
 8006ff6:	b084      	sub	sp, #16
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006ffe:	2300      	movs	r3, #0
 8007000:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	885b      	ldrh	r3, [r3, #2]
 8007006:	b2da      	uxtb	r2, r3
 8007008:	4b4e      	ldr	r3, [pc, #312]	; (8007144 <USBD_SetConfig+0x150>)
 800700a:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 800700c:	4b4d      	ldr	r3, [pc, #308]	; (8007144 <USBD_SetConfig+0x150>)
 800700e:	781b      	ldrb	r3, [r3, #0]
 8007010:	2b01      	cmp	r3, #1
 8007012:	d905      	bls.n	8007020 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007014:	6839      	ldr	r1, [r7, #0]
 8007016:	6878      	ldr	r0, [r7, #4]
 8007018:	f000 f985 	bl	8007326 <USBD_CtlError>
    return USBD_FAIL;
 800701c:	2303      	movs	r3, #3
 800701e:	e08c      	b.n	800713a <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007026:	b2db      	uxtb	r3, r3
 8007028:	2b02      	cmp	r3, #2
 800702a:	d002      	beq.n	8007032 <USBD_SetConfig+0x3e>
 800702c:	2b03      	cmp	r3, #3
 800702e:	d029      	beq.n	8007084 <USBD_SetConfig+0x90>
 8007030:	e075      	b.n	800711e <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8007032:	4b44      	ldr	r3, [pc, #272]	; (8007144 <USBD_SetConfig+0x150>)
 8007034:	781b      	ldrb	r3, [r3, #0]
 8007036:	2b00      	cmp	r3, #0
 8007038:	d020      	beq.n	800707c <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800703a:	4b42      	ldr	r3, [pc, #264]	; (8007144 <USBD_SetConfig+0x150>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	461a      	mov	r2, r3
 8007040:	687b      	ldr	r3, [r7, #4]
 8007042:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007044:	4b3f      	ldr	r3, [pc, #252]	; (8007144 <USBD_SetConfig+0x150>)
 8007046:	781b      	ldrb	r3, [r3, #0]
 8007048:	4619      	mov	r1, r3
 800704a:	6878      	ldr	r0, [r7, #4]
 800704c:	f7fe ffe7 	bl	800601e <USBD_SetClassConfig>
 8007050:	4603      	mov	r3, r0
 8007052:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007054:	7bfb      	ldrb	r3, [r7, #15]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d008      	beq.n	800706c <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800705a:	6839      	ldr	r1, [r7, #0]
 800705c:	6878      	ldr	r0, [r7, #4]
 800705e:	f000 f962 	bl	8007326 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	2202      	movs	r2, #2
 8007066:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800706a:	e065      	b.n	8007138 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800706c:	6878      	ldr	r0, [r7, #4]
 800706e:	f000 fa08 	bl	8007482 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8007072:	687b      	ldr	r3, [r7, #4]
 8007074:	2203      	movs	r2, #3
 8007076:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800707a:	e05d      	b.n	8007138 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800707c:	6878      	ldr	r0, [r7, #4]
 800707e:	f000 fa00 	bl	8007482 <USBD_CtlSendStatus>
      break;
 8007082:	e059      	b.n	8007138 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007084:	4b2f      	ldr	r3, [pc, #188]	; (8007144 <USBD_SetConfig+0x150>)
 8007086:	781b      	ldrb	r3, [r3, #0]
 8007088:	2b00      	cmp	r3, #0
 800708a:	d112      	bne.n	80070b2 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	2202      	movs	r2, #2
 8007090:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8007094:	4b2b      	ldr	r3, [pc, #172]	; (8007144 <USBD_SetConfig+0x150>)
 8007096:	781b      	ldrb	r3, [r3, #0]
 8007098:	461a      	mov	r2, r3
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 800709e:	4b29      	ldr	r3, [pc, #164]	; (8007144 <USBD_SetConfig+0x150>)
 80070a0:	781b      	ldrb	r3, [r3, #0]
 80070a2:	4619      	mov	r1, r3
 80070a4:	6878      	ldr	r0, [r7, #4]
 80070a6:	f7fe ffd6 	bl	8006056 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80070aa:	6878      	ldr	r0, [r7, #4]
 80070ac:	f000 f9e9 	bl	8007482 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070b0:	e042      	b.n	8007138 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80070b2:	4b24      	ldr	r3, [pc, #144]	; (8007144 <USBD_SetConfig+0x150>)
 80070b4:	781b      	ldrb	r3, [r3, #0]
 80070b6:	461a      	mov	r2, r3
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	685b      	ldr	r3, [r3, #4]
 80070bc:	429a      	cmp	r2, r3
 80070be:	d02a      	beq.n	8007116 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	685b      	ldr	r3, [r3, #4]
 80070c4:	b2db      	uxtb	r3, r3
 80070c6:	4619      	mov	r1, r3
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7fe ffc4 	bl	8006056 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80070ce:	4b1d      	ldr	r3, [pc, #116]	; (8007144 <USBD_SetConfig+0x150>)
 80070d0:	781b      	ldrb	r3, [r3, #0]
 80070d2:	461a      	mov	r2, r3
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070d8:	4b1a      	ldr	r3, [pc, #104]	; (8007144 <USBD_SetConfig+0x150>)
 80070da:	781b      	ldrb	r3, [r3, #0]
 80070dc:	4619      	mov	r1, r3
 80070de:	6878      	ldr	r0, [r7, #4]
 80070e0:	f7fe ff9d 	bl	800601e <USBD_SetClassConfig>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d00f      	beq.n	800710e <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80070ee:	6839      	ldr	r1, [r7, #0]
 80070f0:	6878      	ldr	r0, [r7, #4]
 80070f2:	f000 f918 	bl	8007326 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	685b      	ldr	r3, [r3, #4]
 80070fa:	b2db      	uxtb	r3, r3
 80070fc:	4619      	mov	r1, r3
 80070fe:	6878      	ldr	r0, [r7, #4]
 8007100:	f7fe ffa9 	bl	8006056 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	2202      	movs	r2, #2
 8007108:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800710c:	e014      	b.n	8007138 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800710e:	6878      	ldr	r0, [r7, #4]
 8007110:	f000 f9b7 	bl	8007482 <USBD_CtlSendStatus>
      break;
 8007114:	e010      	b.n	8007138 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007116:	6878      	ldr	r0, [r7, #4]
 8007118:	f000 f9b3 	bl	8007482 <USBD_CtlSendStatus>
      break;
 800711c:	e00c      	b.n	8007138 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800711e:	6839      	ldr	r1, [r7, #0]
 8007120:	6878      	ldr	r0, [r7, #4]
 8007122:	f000 f900 	bl	8007326 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007126:	4b07      	ldr	r3, [pc, #28]	; (8007144 <USBD_SetConfig+0x150>)
 8007128:	781b      	ldrb	r3, [r3, #0]
 800712a:	4619      	mov	r1, r3
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f7fe ff92 	bl	8006056 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8007132:	2303      	movs	r3, #3
 8007134:	73fb      	strb	r3, [r7, #15]
      break;
 8007136:	bf00      	nop
  }

  return ret;
 8007138:	7bfb      	ldrb	r3, [r7, #15]
}
 800713a:	4618      	mov	r0, r3
 800713c:	3710      	adds	r7, #16
 800713e:	46bd      	mov	sp, r7
 8007140:	bd80      	pop	{r7, pc}
 8007142:	bf00      	nop
 8007144:	2000079c 	.word	0x2000079c

08007148 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b082      	sub	sp, #8
 800714c:	af00      	add	r7, sp, #0
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8007152:	683b      	ldr	r3, [r7, #0]
 8007154:	88db      	ldrh	r3, [r3, #6]
 8007156:	2b01      	cmp	r3, #1
 8007158:	d004      	beq.n	8007164 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800715a:	6839      	ldr	r1, [r7, #0]
 800715c:	6878      	ldr	r0, [r7, #4]
 800715e:	f000 f8e2 	bl	8007326 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8007162:	e023      	b.n	80071ac <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800716a:	b2db      	uxtb	r3, r3
 800716c:	2b02      	cmp	r3, #2
 800716e:	dc02      	bgt.n	8007176 <USBD_GetConfig+0x2e>
 8007170:	2b00      	cmp	r3, #0
 8007172:	dc03      	bgt.n	800717c <USBD_GetConfig+0x34>
 8007174:	e015      	b.n	80071a2 <USBD_GetConfig+0x5a>
 8007176:	2b03      	cmp	r3, #3
 8007178:	d00b      	beq.n	8007192 <USBD_GetConfig+0x4a>
 800717a:	e012      	b.n	80071a2 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	2200      	movs	r2, #0
 8007180:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	3308      	adds	r3, #8
 8007186:	2201      	movs	r2, #1
 8007188:	4619      	mov	r1, r3
 800718a:	6878      	ldr	r0, [r7, #4]
 800718c:	f000 f93c 	bl	8007408 <USBD_CtlSendData>
        break;
 8007190:	e00c      	b.n	80071ac <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	3304      	adds	r3, #4
 8007196:	2201      	movs	r2, #1
 8007198:	4619      	mov	r1, r3
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 f934 	bl	8007408 <USBD_CtlSendData>
        break;
 80071a0:	e004      	b.n	80071ac <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80071a2:	6839      	ldr	r1, [r7, #0]
 80071a4:	6878      	ldr	r0, [r7, #4]
 80071a6:	f000 f8be 	bl	8007326 <USBD_CtlError>
        break;
 80071aa:	bf00      	nop
}
 80071ac:	bf00      	nop
 80071ae:	3708      	adds	r7, #8
 80071b0:	46bd      	mov	sp, r7
 80071b2:	bd80      	pop	{r7, pc}

080071b4 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071b4:	b580      	push	{r7, lr}
 80071b6:	b082      	sub	sp, #8
 80071b8:	af00      	add	r7, sp, #0
 80071ba:	6078      	str	r0, [r7, #4]
 80071bc:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071c4:	b2db      	uxtb	r3, r3
 80071c6:	3b01      	subs	r3, #1
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d81e      	bhi.n	800720a <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80071cc:	683b      	ldr	r3, [r7, #0]
 80071ce:	88db      	ldrh	r3, [r3, #6]
 80071d0:	2b02      	cmp	r3, #2
 80071d2:	d004      	beq.n	80071de <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80071d4:	6839      	ldr	r1, [r7, #0]
 80071d6:	6878      	ldr	r0, [r7, #4]
 80071d8:	f000 f8a5 	bl	8007326 <USBD_CtlError>
        break;
 80071dc:	e01a      	b.n	8007214 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	2201      	movs	r2, #1
 80071e2:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d005      	beq.n	80071fa <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	f043 0202 	orr.w	r2, r3, #2
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	330c      	adds	r3, #12
 80071fe:	2202      	movs	r2, #2
 8007200:	4619      	mov	r1, r3
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 f900 	bl	8007408 <USBD_CtlSendData>
      break;
 8007208:	e004      	b.n	8007214 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800720a:	6839      	ldr	r1, [r7, #0]
 800720c:	6878      	ldr	r0, [r7, #4]
 800720e:	f000 f88a 	bl	8007326 <USBD_CtlError>
      break;
 8007212:	bf00      	nop
  }
}
 8007214:	bf00      	nop
 8007216:	3708      	adds	r7, #8
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}

0800721c <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b082      	sub	sp, #8
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
 8007224:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007226:	683b      	ldr	r3, [r7, #0]
 8007228:	885b      	ldrh	r3, [r3, #2]
 800722a:	2b01      	cmp	r3, #1
 800722c:	d107      	bne.n	800723e <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	2201      	movs	r2, #1
 8007232:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 f923 	bl	8007482 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 800723c:	e013      	b.n	8007266 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	885b      	ldrh	r3, [r3, #2]
 8007242:	2b02      	cmp	r3, #2
 8007244:	d10b      	bne.n	800725e <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007246:	683b      	ldr	r3, [r7, #0]
 8007248:	889b      	ldrh	r3, [r3, #4]
 800724a:	0a1b      	lsrs	r3, r3, #8
 800724c:	b29b      	uxth	r3, r3
 800724e:	b2da      	uxtb	r2, r3
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007256:	6878      	ldr	r0, [r7, #4]
 8007258:	f000 f913 	bl	8007482 <USBD_CtlSendStatus>
}
 800725c:	e003      	b.n	8007266 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800725e:	6839      	ldr	r1, [r7, #0]
 8007260:	6878      	ldr	r0, [r7, #4]
 8007262:	f000 f860 	bl	8007326 <USBD_CtlError>
}
 8007266:	bf00      	nop
 8007268:	3708      	adds	r7, #8
 800726a:	46bd      	mov	sp, r7
 800726c:	bd80      	pop	{r7, pc}

0800726e <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800726e:	b580      	push	{r7, lr}
 8007270:	b082      	sub	sp, #8
 8007272:	af00      	add	r7, sp, #0
 8007274:	6078      	str	r0, [r7, #4]
 8007276:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800727e:	b2db      	uxtb	r3, r3
 8007280:	3b01      	subs	r3, #1
 8007282:	2b02      	cmp	r3, #2
 8007284:	d80b      	bhi.n	800729e <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007286:	683b      	ldr	r3, [r7, #0]
 8007288:	885b      	ldrh	r3, [r3, #2]
 800728a:	2b01      	cmp	r3, #1
 800728c:	d10c      	bne.n	80072a8 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	2200      	movs	r2, #0
 8007292:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8007296:	6878      	ldr	r0, [r7, #4]
 8007298:	f000 f8f3 	bl	8007482 <USBD_CtlSendStatus>
      }
      break;
 800729c:	e004      	b.n	80072a8 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 800729e:	6839      	ldr	r1, [r7, #0]
 80072a0:	6878      	ldr	r0, [r7, #4]
 80072a2:	f000 f840 	bl	8007326 <USBD_CtlError>
      break;
 80072a6:	e000      	b.n	80072aa <USBD_ClrFeature+0x3c>
      break;
 80072a8:	bf00      	nop
  }
}
 80072aa:	bf00      	nop
 80072ac:	3708      	adds	r7, #8
 80072ae:	46bd      	mov	sp, r7
 80072b0:	bd80      	pop	{r7, pc}

080072b2 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b084      	sub	sp, #16
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
 80072ba:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80072bc:	683b      	ldr	r3, [r7, #0]
 80072be:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	781a      	ldrb	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	3301      	adds	r3, #1
 80072cc:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80072ce:	68fb      	ldr	r3, [r7, #12]
 80072d0:	781a      	ldrb	r2, [r3, #0]
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80072d6:	68fb      	ldr	r3, [r7, #12]
 80072d8:	3301      	adds	r3, #1
 80072da:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80072dc:	68f8      	ldr	r0, [r7, #12]
 80072de:	f7ff fa41 	bl	8006764 <SWAPBYTE>
 80072e2:	4603      	mov	r3, r0
 80072e4:	461a      	mov	r2, r3
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	3301      	adds	r3, #1
 80072ee:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	3301      	adds	r3, #1
 80072f4:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80072f6:	68f8      	ldr	r0, [r7, #12]
 80072f8:	f7ff fa34 	bl	8006764 <SWAPBYTE>
 80072fc:	4603      	mov	r3, r0
 80072fe:	461a      	mov	r2, r3
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007304:	68fb      	ldr	r3, [r7, #12]
 8007306:	3301      	adds	r3, #1
 8007308:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800730a:	68fb      	ldr	r3, [r7, #12]
 800730c:	3301      	adds	r3, #1
 800730e:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f7ff fa27 	bl	8006764 <SWAPBYTE>
 8007316:	4603      	mov	r3, r0
 8007318:	461a      	mov	r2, r3
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	80da      	strh	r2, [r3, #6]
}
 800731e:	bf00      	nop
 8007320:	3710      	adds	r7, #16
 8007322:	46bd      	mov	sp, r7
 8007324:	bd80      	pop	{r7, pc}

08007326 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007326:	b580      	push	{r7, lr}
 8007328:	b082      	sub	sp, #8
 800732a:	af00      	add	r7, sp, #0
 800732c:	6078      	str	r0, [r7, #4]
 800732e:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8007330:	2180      	movs	r1, #128	; 0x80
 8007332:	6878      	ldr	r0, [r7, #4]
 8007334:	f000 fbea 	bl	8007b0c <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007338:	2100      	movs	r1, #0
 800733a:	6878      	ldr	r0, [r7, #4]
 800733c:	f000 fbe6 	bl	8007b0c <USBD_LL_StallEP>
}
 8007340:	bf00      	nop
 8007342:	3708      	adds	r7, #8
 8007344:	46bd      	mov	sp, r7
 8007346:	bd80      	pop	{r7, pc}

08007348 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007348:	b580      	push	{r7, lr}
 800734a:	b086      	sub	sp, #24
 800734c:	af00      	add	r7, sp, #0
 800734e:	60f8      	str	r0, [r7, #12]
 8007350:	60b9      	str	r1, [r7, #8]
 8007352:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007354:	2300      	movs	r3, #0
 8007356:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	2b00      	cmp	r3, #0
 800735c:	d036      	beq.n	80073cc <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800735e:	68fb      	ldr	r3, [r7, #12]
 8007360:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8007362:	6938      	ldr	r0, [r7, #16]
 8007364:	f000 f836 	bl	80073d4 <USBD_GetLen>
 8007368:	4603      	mov	r3, r0
 800736a:	3301      	adds	r3, #1
 800736c:	b29b      	uxth	r3, r3
 800736e:	005b      	lsls	r3, r3, #1
 8007370:	b29a      	uxth	r2, r3
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007376:	7dfb      	ldrb	r3, [r7, #23]
 8007378:	68ba      	ldr	r2, [r7, #8]
 800737a:	4413      	add	r3, r2
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	7812      	ldrb	r2, [r2, #0]
 8007380:	701a      	strb	r2, [r3, #0]
  idx++;
 8007382:	7dfb      	ldrb	r3, [r7, #23]
 8007384:	3301      	adds	r3, #1
 8007386:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007388:	7dfb      	ldrb	r3, [r7, #23]
 800738a:	68ba      	ldr	r2, [r7, #8]
 800738c:	4413      	add	r3, r2
 800738e:	2203      	movs	r2, #3
 8007390:	701a      	strb	r2, [r3, #0]
  idx++;
 8007392:	7dfb      	ldrb	r3, [r7, #23]
 8007394:	3301      	adds	r3, #1
 8007396:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007398:	e013      	b.n	80073c2 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800739a:	7dfb      	ldrb	r3, [r7, #23]
 800739c:	68ba      	ldr	r2, [r7, #8]
 800739e:	4413      	add	r3, r2
 80073a0:	693a      	ldr	r2, [r7, #16]
 80073a2:	7812      	ldrb	r2, [r2, #0]
 80073a4:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80073a6:	693b      	ldr	r3, [r7, #16]
 80073a8:	3301      	adds	r3, #1
 80073aa:	613b      	str	r3, [r7, #16]
    idx++;
 80073ac:	7dfb      	ldrb	r3, [r7, #23]
 80073ae:	3301      	adds	r3, #1
 80073b0:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80073b2:	7dfb      	ldrb	r3, [r7, #23]
 80073b4:	68ba      	ldr	r2, [r7, #8]
 80073b6:	4413      	add	r3, r2
 80073b8:	2200      	movs	r2, #0
 80073ba:	701a      	strb	r2, [r3, #0]
    idx++;
 80073bc:	7dfb      	ldrb	r3, [r7, #23]
 80073be:	3301      	adds	r3, #1
 80073c0:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80073c2:	693b      	ldr	r3, [r7, #16]
 80073c4:	781b      	ldrb	r3, [r3, #0]
 80073c6:	2b00      	cmp	r3, #0
 80073c8:	d1e7      	bne.n	800739a <USBD_GetString+0x52>
 80073ca:	e000      	b.n	80073ce <USBD_GetString+0x86>
    return;
 80073cc:	bf00      	nop
  }
}
 80073ce:	3718      	adds	r7, #24
 80073d0:	46bd      	mov	sp, r7
 80073d2:	bd80      	pop	{r7, pc}

080073d4 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073d4:	b480      	push	{r7}
 80073d6:	b085      	sub	sp, #20
 80073d8:	af00      	add	r7, sp, #0
 80073da:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073dc:	2300      	movs	r3, #0
 80073de:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80073e4:	e005      	b.n	80073f2 <USBD_GetLen+0x1e>
  {
    len++;
 80073e6:	7bfb      	ldrb	r3, [r7, #15]
 80073e8:	3301      	adds	r3, #1
 80073ea:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80073ec:	68bb      	ldr	r3, [r7, #8]
 80073ee:	3301      	adds	r3, #1
 80073f0:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80073f2:	68bb      	ldr	r3, [r7, #8]
 80073f4:	781b      	ldrb	r3, [r3, #0]
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d1f5      	bne.n	80073e6 <USBD_GetLen+0x12>
  }

  return len;
 80073fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80073fc:	4618      	mov	r0, r3
 80073fe:	3714      	adds	r7, #20
 8007400:	46bd      	mov	sp, r7
 8007402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007406:	4770      	bx	lr

08007408 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007408:	b580      	push	{r7, lr}
 800740a:	b084      	sub	sp, #16
 800740c:	af00      	add	r7, sp, #0
 800740e:	60f8      	str	r0, [r7, #12]
 8007410:	60b9      	str	r1, [r7, #8]
 8007412:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	2202      	movs	r2, #2
 8007418:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 800741c:	68fb      	ldr	r3, [r7, #12]
 800741e:	687a      	ldr	r2, [r7, #4]
 8007420:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8007422:	68fb      	ldr	r3, [r7, #12]
 8007424:	687a      	ldr	r2, [r7, #4]
 8007426:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	2100      	movs	r1, #0
 800742e:	68f8      	ldr	r0, [r7, #12]
 8007430:	f000 fbf5 	bl	8007c1e <USBD_LL_Transmit>

  return USBD_OK;
 8007434:	2300      	movs	r3, #0
}
 8007436:	4618      	mov	r0, r3
 8007438:	3710      	adds	r7, #16
 800743a:	46bd      	mov	sp, r7
 800743c:	bd80      	pop	{r7, pc}

0800743e <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800743e:	b580      	push	{r7, lr}
 8007440:	b084      	sub	sp, #16
 8007442:	af00      	add	r7, sp, #0
 8007444:	60f8      	str	r0, [r7, #12]
 8007446:	60b9      	str	r1, [r7, #8]
 8007448:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	68ba      	ldr	r2, [r7, #8]
 800744e:	2100      	movs	r1, #0
 8007450:	68f8      	ldr	r0, [r7, #12]
 8007452:	f000 fbe4 	bl	8007c1e <USBD_LL_Transmit>

  return USBD_OK;
 8007456:	2300      	movs	r3, #0
}
 8007458:	4618      	mov	r0, r3
 800745a:	3710      	adds	r7, #16
 800745c:	46bd      	mov	sp, r7
 800745e:	bd80      	pop	{r7, pc}

08007460 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007460:	b580      	push	{r7, lr}
 8007462:	b084      	sub	sp, #16
 8007464:	af00      	add	r7, sp, #0
 8007466:	60f8      	str	r0, [r7, #12]
 8007468:	60b9      	str	r1, [r7, #8]
 800746a:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	68ba      	ldr	r2, [r7, #8]
 8007470:	2100      	movs	r1, #0
 8007472:	68f8      	ldr	r0, [r7, #12]
 8007474:	f000 fbf4 	bl	8007c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007478:	2300      	movs	r3, #0
}
 800747a:	4618      	mov	r0, r3
 800747c:	3710      	adds	r7, #16
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}

08007482 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8007482:	b580      	push	{r7, lr}
 8007484:	b082      	sub	sp, #8
 8007486:	af00      	add	r7, sp, #0
 8007488:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	2204      	movs	r2, #4
 800748e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8007492:	2300      	movs	r3, #0
 8007494:	2200      	movs	r2, #0
 8007496:	2100      	movs	r1, #0
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 fbc0 	bl	8007c1e <USBD_LL_Transmit>

  return USBD_OK;
 800749e:	2300      	movs	r3, #0
}
 80074a0:	4618      	mov	r0, r3
 80074a2:	3708      	adds	r7, #8
 80074a4:	46bd      	mov	sp, r7
 80074a6:	bd80      	pop	{r7, pc}

080074a8 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b082      	sub	sp, #8
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074b0:	687b      	ldr	r3, [r7, #4]
 80074b2:	2205      	movs	r2, #5
 80074b4:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074b8:	2300      	movs	r3, #0
 80074ba:	2200      	movs	r2, #0
 80074bc:	2100      	movs	r1, #0
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 fbce 	bl	8007c60 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074c4:	2300      	movs	r3, #0
}
 80074c6:	4618      	mov	r0, r3
 80074c8:	3708      	adds	r7, #8
 80074ca:	46bd      	mov	sp, r7
 80074cc:	bd80      	pop	{r7, pc}
	...

080074d0 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074d0:	b580      	push	{r7, lr}
 80074d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074d4:	2200      	movs	r2, #0
 80074d6:	490e      	ldr	r1, [pc, #56]	; (8007510 <MX_USB_DEVICE_Init+0x40>)
 80074d8:	480e      	ldr	r0, [pc, #56]	; (8007514 <MX_USB_DEVICE_Init+0x44>)
 80074da:	f7fe fd23 	bl	8005f24 <USBD_Init>
 80074de:	4603      	mov	r3, r0
 80074e0:	2b00      	cmp	r3, #0
 80074e2:	d001      	beq.n	80074e8 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074e4:	f7f9 fc4a 	bl	8000d7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80074e8:	490b      	ldr	r1, [pc, #44]	; (8007518 <MX_USB_DEVICE_Init+0x48>)
 80074ea:	480a      	ldr	r0, [pc, #40]	; (8007514 <MX_USB_DEVICE_Init+0x44>)
 80074ec:	f7fe fd4a 	bl	8005f84 <USBD_RegisterClass>
 80074f0:	4603      	mov	r3, r0
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d001      	beq.n	80074fa <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 80074f6:	f7f9 fc41 	bl	8000d7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80074fa:	4806      	ldr	r0, [pc, #24]	; (8007514 <MX_USB_DEVICE_Init+0x44>)
 80074fc:	f7fe fd78 	bl	8005ff0 <USBD_Start>
 8007500:	4603      	mov	r3, r0
 8007502:	2b00      	cmp	r3, #0
 8007504:	d001      	beq.n	800750a <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007506:	f7f9 fc39 	bl	8000d7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800750a:	bf00      	nop
 800750c:	bd80      	pop	{r7, pc}
 800750e:	bf00      	nop
 8007510:	20000494 	.word	0x20000494
 8007514:	200007a0 	.word	0x200007a0
 8007518:	200003e0 	.word	0x200003e0

0800751c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800751c:	b480      	push	{r7}
 800751e:	b083      	sub	sp, #12
 8007520:	af00      	add	r7, sp, #0
 8007522:	4603      	mov	r3, r0
 8007524:	6039      	str	r1, [r7, #0]
 8007526:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	2212      	movs	r2, #18
 800752c:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800752e:	4b03      	ldr	r3, [pc, #12]	; (800753c <USBD_FS_DeviceDescriptor+0x20>)
}
 8007530:	4618      	mov	r0, r3
 8007532:	370c      	adds	r7, #12
 8007534:	46bd      	mov	sp, r7
 8007536:	f85d 7b04 	ldr.w	r7, [sp], #4
 800753a:	4770      	bx	lr
 800753c:	200004b0 	.word	0x200004b0

08007540 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007540:	b480      	push	{r7}
 8007542:	b083      	sub	sp, #12
 8007544:	af00      	add	r7, sp, #0
 8007546:	4603      	mov	r3, r0
 8007548:	6039      	str	r1, [r7, #0]
 800754a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 800754c:	683b      	ldr	r3, [r7, #0]
 800754e:	2204      	movs	r2, #4
 8007550:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8007552:	4b03      	ldr	r3, [pc, #12]	; (8007560 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007554:	4618      	mov	r0, r3
 8007556:	370c      	adds	r7, #12
 8007558:	46bd      	mov	sp, r7
 800755a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800755e:	4770      	bx	lr
 8007560:	200004c4 	.word	0x200004c4

08007564 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007564:	b580      	push	{r7, lr}
 8007566:	b082      	sub	sp, #8
 8007568:	af00      	add	r7, sp, #0
 800756a:	4603      	mov	r3, r0
 800756c:	6039      	str	r1, [r7, #0]
 800756e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007570:	79fb      	ldrb	r3, [r7, #7]
 8007572:	2b00      	cmp	r3, #0
 8007574:	d105      	bne.n	8007582 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007576:	683a      	ldr	r2, [r7, #0]
 8007578:	4907      	ldr	r1, [pc, #28]	; (8007598 <USBD_FS_ProductStrDescriptor+0x34>)
 800757a:	4808      	ldr	r0, [pc, #32]	; (800759c <USBD_FS_ProductStrDescriptor+0x38>)
 800757c:	f7ff fee4 	bl	8007348 <USBD_GetString>
 8007580:	e004      	b.n	800758c <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	4904      	ldr	r1, [pc, #16]	; (8007598 <USBD_FS_ProductStrDescriptor+0x34>)
 8007586:	4805      	ldr	r0, [pc, #20]	; (800759c <USBD_FS_ProductStrDescriptor+0x38>)
 8007588:	f7ff fede 	bl	8007348 <USBD_GetString>
  }
  return USBD_StrDesc;
 800758c:	4b02      	ldr	r3, [pc, #8]	; (8007598 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800758e:	4618      	mov	r0, r3
 8007590:	3708      	adds	r7, #8
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20000a7c 	.word	0x20000a7c
 800759c:	08007dac 	.word	0x08007dac

080075a0 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075a0:	b580      	push	{r7, lr}
 80075a2:	b082      	sub	sp, #8
 80075a4:	af00      	add	r7, sp, #0
 80075a6:	4603      	mov	r3, r0
 80075a8:	6039      	str	r1, [r7, #0]
 80075aa:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075ac:	683a      	ldr	r2, [r7, #0]
 80075ae:	4904      	ldr	r1, [pc, #16]	; (80075c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075b0:	4804      	ldr	r0, [pc, #16]	; (80075c4 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075b2:	f7ff fec9 	bl	8007348 <USBD_GetString>
  return USBD_StrDesc;
 80075b6:	4b02      	ldr	r3, [pc, #8]	; (80075c0 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3708      	adds	r7, #8
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	20000a7c 	.word	0x20000a7c
 80075c4:	08007dc4 	.word	0x08007dc4

080075c8 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075c8:	b580      	push	{r7, lr}
 80075ca:	b082      	sub	sp, #8
 80075cc:	af00      	add	r7, sp, #0
 80075ce:	4603      	mov	r3, r0
 80075d0:	6039      	str	r1, [r7, #0]
 80075d2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	221a      	movs	r2, #26
 80075d8:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075da:	f000 f843 	bl	8007664 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075de:	4b02      	ldr	r3, [pc, #8]	; (80075e8 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075e0:	4618      	mov	r0, r3
 80075e2:	3708      	adds	r7, #8
 80075e4:	46bd      	mov	sp, r7
 80075e6:	bd80      	pop	{r7, pc}
 80075e8:	200004c8 	.word	0x200004c8

080075ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b082      	sub	sp, #8
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	4603      	mov	r3, r0
 80075f4:	6039      	str	r1, [r7, #0]
 80075f6:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80075f8:	79fb      	ldrb	r3, [r7, #7]
 80075fa:	2b00      	cmp	r3, #0
 80075fc:	d105      	bne.n	800760a <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80075fe:	683a      	ldr	r2, [r7, #0]
 8007600:	4907      	ldr	r1, [pc, #28]	; (8007620 <USBD_FS_ConfigStrDescriptor+0x34>)
 8007602:	4808      	ldr	r0, [pc, #32]	; (8007624 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007604:	f7ff fea0 	bl	8007348 <USBD_GetString>
 8007608:	e004      	b.n	8007614 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	4904      	ldr	r1, [pc, #16]	; (8007620 <USBD_FS_ConfigStrDescriptor+0x34>)
 800760e:	4805      	ldr	r0, [pc, #20]	; (8007624 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007610:	f7ff fe9a 	bl	8007348 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007614:	4b02      	ldr	r3, [pc, #8]	; (8007620 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007616:	4618      	mov	r0, r3
 8007618:	3708      	adds	r7, #8
 800761a:	46bd      	mov	sp, r7
 800761c:	bd80      	pop	{r7, pc}
 800761e:	bf00      	nop
 8007620:	20000a7c 	.word	0x20000a7c
 8007624:	08007dd8 	.word	0x08007dd8

08007628 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007628:	b580      	push	{r7, lr}
 800762a:	b082      	sub	sp, #8
 800762c:	af00      	add	r7, sp, #0
 800762e:	4603      	mov	r3, r0
 8007630:	6039      	str	r1, [r7, #0]
 8007632:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007634:	79fb      	ldrb	r3, [r7, #7]
 8007636:	2b00      	cmp	r3, #0
 8007638:	d105      	bne.n	8007646 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800763a:	683a      	ldr	r2, [r7, #0]
 800763c:	4907      	ldr	r1, [pc, #28]	; (800765c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800763e:	4808      	ldr	r0, [pc, #32]	; (8007660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007640:	f7ff fe82 	bl	8007348 <USBD_GetString>
 8007644:	e004      	b.n	8007650 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	4904      	ldr	r1, [pc, #16]	; (800765c <USBD_FS_InterfaceStrDescriptor+0x34>)
 800764a:	4805      	ldr	r0, [pc, #20]	; (8007660 <USBD_FS_InterfaceStrDescriptor+0x38>)
 800764c:	f7ff fe7c 	bl	8007348 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007650:	4b02      	ldr	r3, [pc, #8]	; (800765c <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8007652:	4618      	mov	r0, r3
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}
 800765a:	bf00      	nop
 800765c:	20000a7c 	.word	0x20000a7c
 8007660:	08007de4 	.word	0x08007de4

08007664 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007664:	b580      	push	{r7, lr}
 8007666:	b084      	sub	sp, #16
 8007668:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800766a:	4b0f      	ldr	r3, [pc, #60]	; (80076a8 <Get_SerialNum+0x44>)
 800766c:	681b      	ldr	r3, [r3, #0]
 800766e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007670:	4b0e      	ldr	r3, [pc, #56]	; (80076ac <Get_SerialNum+0x48>)
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007676:	4b0e      	ldr	r3, [pc, #56]	; (80076b0 <Get_SerialNum+0x4c>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 800767c:	68fa      	ldr	r2, [r7, #12]
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	4413      	add	r3, r2
 8007682:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	2b00      	cmp	r3, #0
 8007688:	d009      	beq.n	800769e <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800768a:	2208      	movs	r2, #8
 800768c:	4909      	ldr	r1, [pc, #36]	; (80076b4 <Get_SerialNum+0x50>)
 800768e:	68f8      	ldr	r0, [r7, #12]
 8007690:	f000 f814 	bl	80076bc <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007694:	2204      	movs	r2, #4
 8007696:	4908      	ldr	r1, [pc, #32]	; (80076b8 <Get_SerialNum+0x54>)
 8007698:	68b8      	ldr	r0, [r7, #8]
 800769a:	f000 f80f 	bl	80076bc <IntToUnicode>
  }
}
 800769e:	bf00      	nop
 80076a0:	3710      	adds	r7, #16
 80076a2:	46bd      	mov	sp, r7
 80076a4:	bd80      	pop	{r7, pc}
 80076a6:	bf00      	nop
 80076a8:	1fff7a10 	.word	0x1fff7a10
 80076ac:	1fff7a14 	.word	0x1fff7a14
 80076b0:	1fff7a18 	.word	0x1fff7a18
 80076b4:	200004ca 	.word	0x200004ca
 80076b8:	200004da 	.word	0x200004da

080076bc <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076bc:	b480      	push	{r7}
 80076be:	b087      	sub	sp, #28
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	60f8      	str	r0, [r7, #12]
 80076c4:	60b9      	str	r1, [r7, #8]
 80076c6:	4613      	mov	r3, r2
 80076c8:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076ca:	2300      	movs	r3, #0
 80076cc:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076ce:	2300      	movs	r3, #0
 80076d0:	75fb      	strb	r3, [r7, #23]
 80076d2:	e027      	b.n	8007724 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076d4:	68fb      	ldr	r3, [r7, #12]
 80076d6:	0f1b      	lsrs	r3, r3, #28
 80076d8:	2b09      	cmp	r3, #9
 80076da:	d80b      	bhi.n	80076f4 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	0f1b      	lsrs	r3, r3, #28
 80076e0:	b2da      	uxtb	r2, r3
 80076e2:	7dfb      	ldrb	r3, [r7, #23]
 80076e4:	005b      	lsls	r3, r3, #1
 80076e6:	4619      	mov	r1, r3
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	440b      	add	r3, r1
 80076ec:	3230      	adds	r2, #48	; 0x30
 80076ee:	b2d2      	uxtb	r2, r2
 80076f0:	701a      	strb	r2, [r3, #0]
 80076f2:	e00a      	b.n	800770a <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	0f1b      	lsrs	r3, r3, #28
 80076f8:	b2da      	uxtb	r2, r3
 80076fa:	7dfb      	ldrb	r3, [r7, #23]
 80076fc:	005b      	lsls	r3, r3, #1
 80076fe:	4619      	mov	r1, r3
 8007700:	68bb      	ldr	r3, [r7, #8]
 8007702:	440b      	add	r3, r1
 8007704:	3237      	adds	r2, #55	; 0x37
 8007706:	b2d2      	uxtb	r2, r2
 8007708:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	011b      	lsls	r3, r3, #4
 800770e:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007710:	7dfb      	ldrb	r3, [r7, #23]
 8007712:	005b      	lsls	r3, r3, #1
 8007714:	3301      	adds	r3, #1
 8007716:	68ba      	ldr	r2, [r7, #8]
 8007718:	4413      	add	r3, r2
 800771a:	2200      	movs	r2, #0
 800771c:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	3301      	adds	r3, #1
 8007722:	75fb      	strb	r3, [r7, #23]
 8007724:	7dfa      	ldrb	r2, [r7, #23]
 8007726:	79fb      	ldrb	r3, [r7, #7]
 8007728:	429a      	cmp	r2, r3
 800772a:	d3d3      	bcc.n	80076d4 <IntToUnicode+0x18>
  }
}
 800772c:	bf00      	nop
 800772e:	bf00      	nop
 8007730:	371c      	adds	r7, #28
 8007732:	46bd      	mov	sp, r7
 8007734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007738:	4770      	bx	lr
	...

0800773c <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 800773c:	b580      	push	{r7, lr}
 800773e:	b08a      	sub	sp, #40	; 0x28
 8007740:	af00      	add	r7, sp, #0
 8007742:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007744:	f107 0314 	add.w	r3, r7, #20
 8007748:	2200      	movs	r2, #0
 800774a:	601a      	str	r2, [r3, #0]
 800774c:	605a      	str	r2, [r3, #4]
 800774e:	609a      	str	r2, [r3, #8]
 8007750:	60da      	str	r2, [r3, #12]
 8007752:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800775c:	d13a      	bne.n	80077d4 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800775e:	2300      	movs	r3, #0
 8007760:	613b      	str	r3, [r7, #16]
 8007762:	4b1e      	ldr	r3, [pc, #120]	; (80077dc <HAL_PCD_MspInit+0xa0>)
 8007764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007766:	4a1d      	ldr	r2, [pc, #116]	; (80077dc <HAL_PCD_MspInit+0xa0>)
 8007768:	f043 0301 	orr.w	r3, r3, #1
 800776c:	6313      	str	r3, [r2, #48]	; 0x30
 800776e:	4b1b      	ldr	r3, [pc, #108]	; (80077dc <HAL_PCD_MspInit+0xa0>)
 8007770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007772:	f003 0301 	and.w	r3, r3, #1
 8007776:	613b      	str	r3, [r7, #16]
 8007778:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 800777a:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800777e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007780:	2302      	movs	r3, #2
 8007782:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007784:	2300      	movs	r3, #0
 8007786:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007788:	2303      	movs	r3, #3
 800778a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800778c:	230a      	movs	r3, #10
 800778e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007790:	f107 0314 	add.w	r3, r7, #20
 8007794:	4619      	mov	r1, r3
 8007796:	4812      	ldr	r0, [pc, #72]	; (80077e0 <HAL_PCD_MspInit+0xa4>)
 8007798:	f7fa fd1a 	bl	80021d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 800779c:	4b0f      	ldr	r3, [pc, #60]	; (80077dc <HAL_PCD_MspInit+0xa0>)
 800779e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077a0:	4a0e      	ldr	r2, [pc, #56]	; (80077dc <HAL_PCD_MspInit+0xa0>)
 80077a2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077a6:	6353      	str	r3, [r2, #52]	; 0x34
 80077a8:	2300      	movs	r3, #0
 80077aa:	60fb      	str	r3, [r7, #12]
 80077ac:	4b0b      	ldr	r3, [pc, #44]	; (80077dc <HAL_PCD_MspInit+0xa0>)
 80077ae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077b0:	4a0a      	ldr	r2, [pc, #40]	; (80077dc <HAL_PCD_MspInit+0xa0>)
 80077b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077b6:	6453      	str	r3, [r2, #68]	; 0x44
 80077b8:	4b08      	ldr	r3, [pc, #32]	; (80077dc <HAL_PCD_MspInit+0xa0>)
 80077ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077c0:	60fb      	str	r3, [r7, #12]
 80077c2:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077c4:	2200      	movs	r2, #0
 80077c6:	2100      	movs	r1, #0
 80077c8:	2043      	movs	r0, #67	; 0x43
 80077ca:	f7fa f95a 	bl	8001a82 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077ce:	2043      	movs	r0, #67	; 0x43
 80077d0:	f7fa f973 	bl	8001aba <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077d4:	bf00      	nop
 80077d6:	3728      	adds	r7, #40	; 0x28
 80077d8:	46bd      	mov	sp, r7
 80077da:	bd80      	pop	{r7, pc}
 80077dc:	40023800 	.word	0x40023800
 80077e0:	40020000 	.word	0x40020000

080077e4 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b082      	sub	sp, #8
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80077f8:	4619      	mov	r1, r3
 80077fa:	4610      	mov	r0, r2
 80077fc:	f7fe fc45 	bl	800608a <USBD_LL_SetupStage>
}
 8007800:	bf00      	nop
 8007802:	3708      	adds	r7, #8
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b082      	sub	sp, #8
 800780c:	af00      	add	r7, sp, #0
 800780e:	6078      	str	r0, [r7, #4]
 8007810:	460b      	mov	r3, r1
 8007812:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800781a:	78fa      	ldrb	r2, [r7, #3]
 800781c:	6879      	ldr	r1, [r7, #4]
 800781e:	4613      	mov	r3, r2
 8007820:	00db      	lsls	r3, r3, #3
 8007822:	4413      	add	r3, r2
 8007824:	009b      	lsls	r3, r3, #2
 8007826:	440b      	add	r3, r1
 8007828:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 800782c:	681a      	ldr	r2, [r3, #0]
 800782e:	78fb      	ldrb	r3, [r7, #3]
 8007830:	4619      	mov	r1, r3
 8007832:	f7fe fc7f 	bl	8006134 <USBD_LL_DataOutStage>
}
 8007836:	bf00      	nop
 8007838:	3708      	adds	r7, #8
 800783a:	46bd      	mov	sp, r7
 800783c:	bd80      	pop	{r7, pc}

0800783e <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800783e:	b580      	push	{r7, lr}
 8007840:	b082      	sub	sp, #8
 8007842:	af00      	add	r7, sp, #0
 8007844:	6078      	str	r0, [r7, #4]
 8007846:	460b      	mov	r3, r1
 8007848:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007850:	78fa      	ldrb	r2, [r7, #3]
 8007852:	6879      	ldr	r1, [r7, #4]
 8007854:	4613      	mov	r3, r2
 8007856:	00db      	lsls	r3, r3, #3
 8007858:	4413      	add	r3, r2
 800785a:	009b      	lsls	r3, r3, #2
 800785c:	440b      	add	r3, r1
 800785e:	334c      	adds	r3, #76	; 0x4c
 8007860:	681a      	ldr	r2, [r3, #0]
 8007862:	78fb      	ldrb	r3, [r7, #3]
 8007864:	4619      	mov	r1, r3
 8007866:	f7fe fd18 	bl	800629a <USBD_LL_DataInStage>
}
 800786a:	bf00      	nop
 800786c:	3708      	adds	r7, #8
 800786e:	46bd      	mov	sp, r7
 8007870:	bd80      	pop	{r7, pc}

08007872 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007872:	b580      	push	{r7, lr}
 8007874:	b082      	sub	sp, #8
 8007876:	af00      	add	r7, sp, #0
 8007878:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007880:	4618      	mov	r0, r3
 8007882:	f7fe fe4c 	bl	800651e <USBD_LL_SOF>
}
 8007886:	bf00      	nop
 8007888:	3708      	adds	r7, #8
 800788a:	46bd      	mov	sp, r7
 800788c:	bd80      	pop	{r7, pc}

0800788e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800788e:	b580      	push	{r7, lr}
 8007890:	b084      	sub	sp, #16
 8007892:	af00      	add	r7, sp, #0
 8007894:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007896:	2301      	movs	r3, #1
 8007898:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	68db      	ldr	r3, [r3, #12]
 800789e:	2b02      	cmp	r3, #2
 80078a0:	d001      	beq.n	80078a6 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80078a2:	f7f9 fa6b 	bl	8000d7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078ac:	7bfa      	ldrb	r2, [r7, #15]
 80078ae:	4611      	mov	r1, r2
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fe fdf6 	bl	80064a2 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fe fd9e 	bl	80063fe <USBD_LL_Reset>
}
 80078c2:	bf00      	nop
 80078c4:	3710      	adds	r7, #16
 80078c6:	46bd      	mov	sp, r7
 80078c8:	bd80      	pop	{r7, pc}
	...

080078cc <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078cc:	b580      	push	{r7, lr}
 80078ce:	b082      	sub	sp, #8
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078da:	4618      	mov	r0, r3
 80078dc:	f7fe fdf1 	bl	80064c2 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	681b      	ldr	r3, [r3, #0]
 80078e4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	687a      	ldr	r2, [r7, #4]
 80078ec:	6812      	ldr	r2, [r2, #0]
 80078ee:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078f2:	f043 0301 	orr.w	r3, r3, #1
 80078f6:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a1b      	ldr	r3, [r3, #32]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d005      	beq.n	800790c <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007900:	4b04      	ldr	r3, [pc, #16]	; (8007914 <HAL_PCD_SuspendCallback+0x48>)
 8007902:	691b      	ldr	r3, [r3, #16]
 8007904:	4a03      	ldr	r2, [pc, #12]	; (8007914 <HAL_PCD_SuspendCallback+0x48>)
 8007906:	f043 0306 	orr.w	r3, r3, #6
 800790a:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 800790c:	bf00      	nop
 800790e:	3708      	adds	r7, #8
 8007910:	46bd      	mov	sp, r7
 8007912:	bd80      	pop	{r7, pc}
 8007914:	e000ed00 	.word	0xe000ed00

08007918 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b082      	sub	sp, #8
 800791c:	af00      	add	r7, sp, #0
 800791e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007920:	687b      	ldr	r3, [r7, #4]
 8007922:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007926:	4618      	mov	r0, r3
 8007928:	f7fe fde1 	bl	80064ee <USBD_LL_Resume>
}
 800792c:	bf00      	nop
 800792e:	3708      	adds	r7, #8
 8007930:	46bd      	mov	sp, r7
 8007932:	bd80      	pop	{r7, pc}

08007934 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007934:	b580      	push	{r7, lr}
 8007936:	b082      	sub	sp, #8
 8007938:	af00      	add	r7, sp, #0
 800793a:	6078      	str	r0, [r7, #4]
 800793c:	460b      	mov	r3, r1
 800793e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007946:	78fa      	ldrb	r2, [r7, #3]
 8007948:	4611      	mov	r1, r2
 800794a:	4618      	mov	r0, r3
 800794c:	f7fe fe39 	bl	80065c2 <USBD_LL_IsoOUTIncomplete>
}
 8007950:	bf00      	nop
 8007952:	3708      	adds	r7, #8
 8007954:	46bd      	mov	sp, r7
 8007956:	bd80      	pop	{r7, pc}

08007958 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
 8007960:	460b      	mov	r3, r1
 8007962:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800796a:	78fa      	ldrb	r2, [r7, #3]
 800796c:	4611      	mov	r1, r2
 800796e:	4618      	mov	r0, r3
 8007970:	f7fe fdf5 	bl	800655e <USBD_LL_IsoINIncomplete>
}
 8007974:	bf00      	nop
 8007976:	3708      	adds	r7, #8
 8007978:	46bd      	mov	sp, r7
 800797a:	bd80      	pop	{r7, pc}

0800797c <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800797c:	b580      	push	{r7, lr}
 800797e:	b082      	sub	sp, #8
 8007980:	af00      	add	r7, sp, #0
 8007982:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800798a:	4618      	mov	r0, r3
 800798c:	f7fe fe4b 	bl	8006626 <USBD_LL_DevConnected>
}
 8007990:	bf00      	nop
 8007992:	3708      	adds	r7, #8
 8007994:	46bd      	mov	sp, r7
 8007996:	bd80      	pop	{r7, pc}

08007998 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007998:	b580      	push	{r7, lr}
 800799a:	b082      	sub	sp, #8
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079a6:	4618      	mov	r0, r3
 80079a8:	f7fe fe48 	bl	800663c <USBD_LL_DevDisconnected>
}
 80079ac:	bf00      	nop
 80079ae:	3708      	adds	r7, #8
 80079b0:	46bd      	mov	sp, r7
 80079b2:	bd80      	pop	{r7, pc}

080079b4 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	781b      	ldrb	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d13c      	bne.n	8007a3e <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079c4:	4a20      	ldr	r2, [pc, #128]	; (8007a48 <USBD_LL_Init+0x94>)
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	4a1e      	ldr	r2, [pc, #120]	; (8007a48 <USBD_LL_Init+0x94>)
 80079d0:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079d4:	4b1c      	ldr	r3, [pc, #112]	; (8007a48 <USBD_LL_Init+0x94>)
 80079d6:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80079da:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80079dc:	4b1a      	ldr	r3, [pc, #104]	; (8007a48 <USBD_LL_Init+0x94>)
 80079de:	2204      	movs	r2, #4
 80079e0:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80079e2:	4b19      	ldr	r3, [pc, #100]	; (8007a48 <USBD_LL_Init+0x94>)
 80079e4:	2202      	movs	r2, #2
 80079e6:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80079e8:	4b17      	ldr	r3, [pc, #92]	; (8007a48 <USBD_LL_Init+0x94>)
 80079ea:	2200      	movs	r2, #0
 80079ec:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80079ee:	4b16      	ldr	r3, [pc, #88]	; (8007a48 <USBD_LL_Init+0x94>)
 80079f0:	2202      	movs	r2, #2
 80079f2:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 80079f4:	4b14      	ldr	r3, [pc, #80]	; (8007a48 <USBD_LL_Init+0x94>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80079fa:	4b13      	ldr	r3, [pc, #76]	; (8007a48 <USBD_LL_Init+0x94>)
 80079fc:	2200      	movs	r2, #0
 80079fe:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a00:	4b11      	ldr	r3, [pc, #68]	; (8007a48 <USBD_LL_Init+0x94>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007a06:	4b10      	ldr	r3, [pc, #64]	; (8007a48 <USBD_LL_Init+0x94>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a0c:	4b0e      	ldr	r3, [pc, #56]	; (8007a48 <USBD_LL_Init+0x94>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a12:	480d      	ldr	r0, [pc, #52]	; (8007a48 <USBD_LL_Init+0x94>)
 8007a14:	f7fa fd78 	bl	8002508 <HAL_PCD_Init>
 8007a18:	4603      	mov	r3, r0
 8007a1a:	2b00      	cmp	r3, #0
 8007a1c:	d001      	beq.n	8007a22 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a1e:	f7f9 f9ad 	bl	8000d7c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a22:	2180      	movs	r1, #128	; 0x80
 8007a24:	4808      	ldr	r0, [pc, #32]	; (8007a48 <USBD_LL_Init+0x94>)
 8007a26:	f7fb ffb8 	bl	800399a <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a2a:	2240      	movs	r2, #64	; 0x40
 8007a2c:	2100      	movs	r1, #0
 8007a2e:	4806      	ldr	r0, [pc, #24]	; (8007a48 <USBD_LL_Init+0x94>)
 8007a30:	f7fb ff6c 	bl	800390c <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a34:	2280      	movs	r2, #128	; 0x80
 8007a36:	2101      	movs	r1, #1
 8007a38:	4803      	ldr	r0, [pc, #12]	; (8007a48 <USBD_LL_Init+0x94>)
 8007a3a:	f7fb ff67 	bl	800390c <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a3e:	2300      	movs	r3, #0
}
 8007a40:	4618      	mov	r0, r3
 8007a42:	3708      	adds	r7, #8
 8007a44:	46bd      	mov	sp, r7
 8007a46:	bd80      	pop	{r7, pc}
 8007a48:	20000c7c 	.word	0x20000c7c

08007a4c <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a54:	2300      	movs	r3, #0
 8007a56:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a58:	2300      	movs	r3, #0
 8007a5a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a5c:	687b      	ldr	r3, [r7, #4]
 8007a5e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a62:	4618      	mov	r0, r3
 8007a64:	f7fa fe6d 	bl	8002742 <HAL_PCD_Start>
 8007a68:	4603      	mov	r3, r0
 8007a6a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a6c:	7bfb      	ldrb	r3, [r7, #15]
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f000 f930 	bl	8007cd4 <USBD_Get_USB_Status>
 8007a74:	4603      	mov	r3, r0
 8007a76:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a78:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3710      	adds	r7, #16
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
 8007a8a:	4608      	mov	r0, r1
 8007a8c:	4611      	mov	r1, r2
 8007a8e:	461a      	mov	r2, r3
 8007a90:	4603      	mov	r3, r0
 8007a92:	70fb      	strb	r3, [r7, #3]
 8007a94:	460b      	mov	r3, r1
 8007a96:	70bb      	strb	r3, [r7, #2]
 8007a98:	4613      	mov	r3, r2
 8007a9a:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a9c:	2300      	movs	r3, #0
 8007a9e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007aaa:	78bb      	ldrb	r3, [r7, #2]
 8007aac:	883a      	ldrh	r2, [r7, #0]
 8007aae:	78f9      	ldrb	r1, [r7, #3]
 8007ab0:	f7fb fb3e 	bl	8003130 <HAL_PCD_EP_Open>
 8007ab4:	4603      	mov	r3, r0
 8007ab6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ab8:	7bfb      	ldrb	r3, [r7, #15]
 8007aba:	4618      	mov	r0, r3
 8007abc:	f000 f90a 	bl	8007cd4 <USBD_Get_USB_Status>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ac4:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	3710      	adds	r7, #16
 8007aca:	46bd      	mov	sp, r7
 8007acc:	bd80      	pop	{r7, pc}

08007ace <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ace:	b580      	push	{r7, lr}
 8007ad0:	b084      	sub	sp, #16
 8007ad2:	af00      	add	r7, sp, #0
 8007ad4:	6078      	str	r0, [r7, #4]
 8007ad6:	460b      	mov	r3, r1
 8007ad8:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ada:	2300      	movs	r3, #0
 8007adc:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ade:	2300      	movs	r3, #0
 8007ae0:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ae8:	78fa      	ldrb	r2, [r7, #3]
 8007aea:	4611      	mov	r1, r2
 8007aec:	4618      	mov	r0, r3
 8007aee:	f7fb fb87 	bl	8003200 <HAL_PCD_EP_Close>
 8007af2:	4603      	mov	r3, r0
 8007af4:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007af6:	7bfb      	ldrb	r3, [r7, #15]
 8007af8:	4618      	mov	r0, r3
 8007afa:	f000 f8eb 	bl	8007cd4 <USBD_Get_USB_Status>
 8007afe:	4603      	mov	r3, r0
 8007b00:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b02:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b04:	4618      	mov	r0, r3
 8007b06:	3710      	adds	r7, #16
 8007b08:	46bd      	mov	sp, r7
 8007b0a:	bd80      	pop	{r7, pc}

08007b0c <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b0c:	b580      	push	{r7, lr}
 8007b0e:	b084      	sub	sp, #16
 8007b10:	af00      	add	r7, sp, #0
 8007b12:	6078      	str	r0, [r7, #4]
 8007b14:	460b      	mov	r3, r1
 8007b16:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b18:	2300      	movs	r3, #0
 8007b1a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b26:	78fa      	ldrb	r2, [r7, #3]
 8007b28:	4611      	mov	r1, r2
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	f7fb fc47 	bl	80033be <HAL_PCD_EP_SetStall>
 8007b30:	4603      	mov	r3, r0
 8007b32:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b34:	7bfb      	ldrb	r3, [r7, #15]
 8007b36:	4618      	mov	r0, r3
 8007b38:	f000 f8cc 	bl	8007cd4 <USBD_Get_USB_Status>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b40:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b42:	4618      	mov	r0, r3
 8007b44:	3710      	adds	r7, #16
 8007b46:	46bd      	mov	sp, r7
 8007b48:	bd80      	pop	{r7, pc}

08007b4a <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b4a:	b580      	push	{r7, lr}
 8007b4c:	b084      	sub	sp, #16
 8007b4e:	af00      	add	r7, sp, #0
 8007b50:	6078      	str	r0, [r7, #4]
 8007b52:	460b      	mov	r3, r1
 8007b54:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b56:	2300      	movs	r3, #0
 8007b58:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b5a:	2300      	movs	r3, #0
 8007b5c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b64:	78fa      	ldrb	r2, [r7, #3]
 8007b66:	4611      	mov	r1, r2
 8007b68:	4618      	mov	r0, r3
 8007b6a:	f7fb fc8c 	bl	8003486 <HAL_PCD_EP_ClrStall>
 8007b6e:	4603      	mov	r3, r0
 8007b70:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b72:	7bfb      	ldrb	r3, [r7, #15]
 8007b74:	4618      	mov	r0, r3
 8007b76:	f000 f8ad 	bl	8007cd4 <USBD_Get_USB_Status>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b7e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b80:	4618      	mov	r0, r3
 8007b82:	3710      	adds	r7, #16
 8007b84:	46bd      	mov	sp, r7
 8007b86:	bd80      	pop	{r7, pc}

08007b88 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b085      	sub	sp, #20
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
 8007b90:	460b      	mov	r3, r1
 8007b92:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b9a:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007b9c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007ba0:	2b00      	cmp	r3, #0
 8007ba2:	da0b      	bge.n	8007bbc <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007ba4:	78fb      	ldrb	r3, [r7, #3]
 8007ba6:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007baa:	68f9      	ldr	r1, [r7, #12]
 8007bac:	4613      	mov	r3, r2
 8007bae:	00db      	lsls	r3, r3, #3
 8007bb0:	4413      	add	r3, r2
 8007bb2:	009b      	lsls	r3, r3, #2
 8007bb4:	440b      	add	r3, r1
 8007bb6:	333e      	adds	r3, #62	; 0x3e
 8007bb8:	781b      	ldrb	r3, [r3, #0]
 8007bba:	e00b      	b.n	8007bd4 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bbc:	78fb      	ldrb	r3, [r7, #3]
 8007bbe:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bc2:	68f9      	ldr	r1, [r7, #12]
 8007bc4:	4613      	mov	r3, r2
 8007bc6:	00db      	lsls	r3, r3, #3
 8007bc8:	4413      	add	r3, r2
 8007bca:	009b      	lsls	r3, r3, #2
 8007bcc:	440b      	add	r3, r1
 8007bce:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007bd2:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007bd4:	4618      	mov	r0, r3
 8007bd6:	3714      	adds	r7, #20
 8007bd8:	46bd      	mov	sp, r7
 8007bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bde:	4770      	bx	lr

08007be0 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007be0:	b580      	push	{r7, lr}
 8007be2:	b084      	sub	sp, #16
 8007be4:	af00      	add	r7, sp, #0
 8007be6:	6078      	str	r0, [r7, #4]
 8007be8:	460b      	mov	r3, r1
 8007bea:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bec:	2300      	movs	r3, #0
 8007bee:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bf0:	2300      	movs	r3, #0
 8007bf2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007bfa:	78fa      	ldrb	r2, [r7, #3]
 8007bfc:	4611      	mov	r1, r2
 8007bfe:	4618      	mov	r0, r3
 8007c00:	f7fb fa71 	bl	80030e6 <HAL_PCD_SetAddress>
 8007c04:	4603      	mov	r3, r0
 8007c06:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c08:	7bfb      	ldrb	r3, [r7, #15]
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f000 f862 	bl	8007cd4 <USBD_Get_USB_Status>
 8007c10:	4603      	mov	r3, r0
 8007c12:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c14:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3710      	adds	r7, #16
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}

08007c1e <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c1e:	b580      	push	{r7, lr}
 8007c20:	b086      	sub	sp, #24
 8007c22:	af00      	add	r7, sp, #0
 8007c24:	60f8      	str	r0, [r7, #12]
 8007c26:	607a      	str	r2, [r7, #4]
 8007c28:	603b      	str	r3, [r7, #0]
 8007c2a:	460b      	mov	r3, r1
 8007c2c:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c32:	2300      	movs	r3, #0
 8007c34:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c3c:	7af9      	ldrb	r1, [r7, #11]
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	687a      	ldr	r2, [r7, #4]
 8007c42:	f7fb fb72 	bl	800332a <HAL_PCD_EP_Transmit>
 8007c46:	4603      	mov	r3, r0
 8007c48:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c4a:	7dfb      	ldrb	r3, [r7, #23]
 8007c4c:	4618      	mov	r0, r3
 8007c4e:	f000 f841 	bl	8007cd4 <USBD_Get_USB_Status>
 8007c52:	4603      	mov	r3, r0
 8007c54:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c56:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c58:	4618      	mov	r0, r3
 8007c5a:	3718      	adds	r7, #24
 8007c5c:	46bd      	mov	sp, r7
 8007c5e:	bd80      	pop	{r7, pc}

08007c60 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c60:	b580      	push	{r7, lr}
 8007c62:	b086      	sub	sp, #24
 8007c64:	af00      	add	r7, sp, #0
 8007c66:	60f8      	str	r0, [r7, #12]
 8007c68:	607a      	str	r2, [r7, #4]
 8007c6a:	603b      	str	r3, [r7, #0]
 8007c6c:	460b      	mov	r3, r1
 8007c6e:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c70:	2300      	movs	r3, #0
 8007c72:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c74:	2300      	movs	r3, #0
 8007c76:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c78:	68fb      	ldr	r3, [r7, #12]
 8007c7a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c7e:	7af9      	ldrb	r1, [r7, #11]
 8007c80:	683b      	ldr	r3, [r7, #0]
 8007c82:	687a      	ldr	r2, [r7, #4]
 8007c84:	f7fb fb06 	bl	8003294 <HAL_PCD_EP_Receive>
 8007c88:	4603      	mov	r3, r0
 8007c8a:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c8c:	7dfb      	ldrb	r3, [r7, #23]
 8007c8e:	4618      	mov	r0, r3
 8007c90:	f000 f820 	bl	8007cd4 <USBD_Get_USB_Status>
 8007c94:	4603      	mov	r3, r0
 8007c96:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c98:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	3718      	adds	r7, #24
 8007c9e:	46bd      	mov	sp, r7
 8007ca0:	bd80      	pop	{r7, pc}
	...

08007ca4 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007ca4:	b480      	push	{r7}
 8007ca6:	b083      	sub	sp, #12
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007cac:	4b03      	ldr	r3, [pc, #12]	; (8007cbc <USBD_static_malloc+0x18>)
}
 8007cae:	4618      	mov	r0, r3
 8007cb0:	370c      	adds	r7, #12
 8007cb2:	46bd      	mov	sp, r7
 8007cb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cb8:	4770      	bx	lr
 8007cba:	bf00      	nop
 8007cbc:	20001188 	.word	0x20001188

08007cc0 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007cc0:	b480      	push	{r7}
 8007cc2:	b083      	sub	sp, #12
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]

}
 8007cc8:	bf00      	nop
 8007cca:	370c      	adds	r7, #12
 8007ccc:	46bd      	mov	sp, r7
 8007cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cd2:	4770      	bx	lr

08007cd4 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007cd4:	b480      	push	{r7}
 8007cd6:	b085      	sub	sp, #20
 8007cd8:	af00      	add	r7, sp, #0
 8007cda:	4603      	mov	r3, r0
 8007cdc:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cde:	2300      	movs	r3, #0
 8007ce0:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007ce2:	79fb      	ldrb	r3, [r7, #7]
 8007ce4:	2b03      	cmp	r3, #3
 8007ce6:	d817      	bhi.n	8007d18 <USBD_Get_USB_Status+0x44>
 8007ce8:	a201      	add	r2, pc, #4	; (adr r2, 8007cf0 <USBD_Get_USB_Status+0x1c>)
 8007cea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cee:	bf00      	nop
 8007cf0:	08007d01 	.word	0x08007d01
 8007cf4:	08007d07 	.word	0x08007d07
 8007cf8:	08007d0d 	.word	0x08007d0d
 8007cfc:	08007d13 	.word	0x08007d13
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d00:	2300      	movs	r3, #0
 8007d02:	73fb      	strb	r3, [r7, #15]
    break;
 8007d04:	e00b      	b.n	8007d1e <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d06:	2303      	movs	r3, #3
 8007d08:	73fb      	strb	r3, [r7, #15]
    break;
 8007d0a:	e008      	b.n	8007d1e <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d0c:	2301      	movs	r3, #1
 8007d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d10:	e005      	b.n	8007d1e <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d12:	2303      	movs	r3, #3
 8007d14:	73fb      	strb	r3, [r7, #15]
    break;
 8007d16:	e002      	b.n	8007d1e <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d18:	2303      	movs	r3, #3
 8007d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d1c:	bf00      	nop
  }
  return usb_status;
 8007d1e:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d20:	4618      	mov	r0, r3
 8007d22:	3714      	adds	r7, #20
 8007d24:	46bd      	mov	sp, r7
 8007d26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2a:	4770      	bx	lr

08007d2c <__libc_init_array>:
 8007d2c:	b570      	push	{r4, r5, r6, lr}
 8007d2e:	4d0d      	ldr	r5, [pc, #52]	; (8007d64 <__libc_init_array+0x38>)
 8007d30:	4c0d      	ldr	r4, [pc, #52]	; (8007d68 <__libc_init_array+0x3c>)
 8007d32:	1b64      	subs	r4, r4, r5
 8007d34:	10a4      	asrs	r4, r4, #2
 8007d36:	2600      	movs	r6, #0
 8007d38:	42a6      	cmp	r6, r4
 8007d3a:	d109      	bne.n	8007d50 <__libc_init_array+0x24>
 8007d3c:	4d0b      	ldr	r5, [pc, #44]	; (8007d6c <__libc_init_array+0x40>)
 8007d3e:	4c0c      	ldr	r4, [pc, #48]	; (8007d70 <__libc_init_array+0x44>)
 8007d40:	f000 f820 	bl	8007d84 <_init>
 8007d44:	1b64      	subs	r4, r4, r5
 8007d46:	10a4      	asrs	r4, r4, #2
 8007d48:	2600      	movs	r6, #0
 8007d4a:	42a6      	cmp	r6, r4
 8007d4c:	d105      	bne.n	8007d5a <__libc_init_array+0x2e>
 8007d4e:	bd70      	pop	{r4, r5, r6, pc}
 8007d50:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d54:	4798      	blx	r3
 8007d56:	3601      	adds	r6, #1
 8007d58:	e7ee      	b.n	8007d38 <__libc_init_array+0xc>
 8007d5a:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d5e:	4798      	blx	r3
 8007d60:	3601      	adds	r6, #1
 8007d62:	e7f2      	b.n	8007d4a <__libc_init_array+0x1e>
 8007d64:	08007e14 	.word	0x08007e14
 8007d68:	08007e14 	.word	0x08007e14
 8007d6c:	08007e14 	.word	0x08007e14
 8007d70:	08007e18 	.word	0x08007e18

08007d74 <memset>:
 8007d74:	4402      	add	r2, r0
 8007d76:	4603      	mov	r3, r0
 8007d78:	4293      	cmp	r3, r2
 8007d7a:	d100      	bne.n	8007d7e <memset+0xa>
 8007d7c:	4770      	bx	lr
 8007d7e:	f803 1b01 	strb.w	r1, [r3], #1
 8007d82:	e7f9      	b.n	8007d78 <memset+0x4>

08007d84 <_init>:
 8007d84:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d86:	bf00      	nop
 8007d88:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d8a:	bc08      	pop	{r3}
 8007d8c:	469e      	mov	lr, r3
 8007d8e:	4770      	bx	lr

08007d90 <_fini>:
 8007d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d92:	bf00      	nop
 8007d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d96:	bc08      	pop	{r3}
 8007d98:	469e      	mov	lr, r3
 8007d9a:	4770      	bx	lr
