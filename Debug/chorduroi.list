
chorduroi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007834  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  080079c8  080079c8  000179c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a28  08007a28  00020144  2**0
                  CONTENTS
  4 .ARM          00000008  08007a28  08007a28  00017a28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a30  08007a30  00020144  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a30  08007a30  00017a30  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a34  08007a34  00017a34  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000144  20000000  08007a38  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ae0  20000144  08007b7c  00020144  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000c24  08007b7c  00020c24  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020144  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010232  00000000  00000000  00020174  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002cfe  00000000  00000000  000303a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ce8  00000000  00000000  000330a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ba0  00000000  00000000  00033d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001982b  00000000  00000000  00034930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000109a8  00000000  00000000  0004e15b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000933a3  00000000  00000000  0005eb03  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f1ea6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003400  00000000  00000000  000f1ef8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000144 	.word	0x20000144
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080079b0 	.word	0x080079b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000148 	.word	0x20000148
 80001d0:	080079b0 	.word	0x080079b0

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <setKeyBytes>:
		}
	}
}
*/

void setKeyBytes(uint8_t* code){
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	if(HIDKeyboardReport.K1 == 0){
 80004e0:	4b1d      	ldr	r3, [pc, #116]	; (8000558 <setKeyBytes+0x80>)
 80004e2:	789b      	ldrb	r3, [r3, #2]
 80004e4:	2b00      	cmp	r3, #0
 80004e6:	d104      	bne.n	80004f2 <setKeyBytes+0x1a>
		HIDKeyboardReport.K1 = *code;
 80004e8:	687b      	ldr	r3, [r7, #4]
 80004ea:	781a      	ldrb	r2, [r3, #0]
 80004ec:	4b1a      	ldr	r3, [pc, #104]	; (8000558 <setKeyBytes+0x80>)
 80004ee:	709a      	strb	r2, [r3, #2]
	} else if(HIDKeyboardReport.K5 == 0){
		HIDKeyboardReport.K5 = *code;
	} else if(HIDKeyboardReport.K6 == 0){
		HIDKeyboardReport.K6 = *code;
	}
}
 80004f0:	e02b      	b.n	800054a <setKeyBytes+0x72>
	} else if(HIDKeyboardReport.K2 == 0){
 80004f2:	4b19      	ldr	r3, [pc, #100]	; (8000558 <setKeyBytes+0x80>)
 80004f4:	78db      	ldrb	r3, [r3, #3]
 80004f6:	2b00      	cmp	r3, #0
 80004f8:	d104      	bne.n	8000504 <setKeyBytes+0x2c>
		HIDKeyboardReport.K2 = *code;
 80004fa:	687b      	ldr	r3, [r7, #4]
 80004fc:	781a      	ldrb	r2, [r3, #0]
 80004fe:	4b16      	ldr	r3, [pc, #88]	; (8000558 <setKeyBytes+0x80>)
 8000500:	70da      	strb	r2, [r3, #3]
}
 8000502:	e022      	b.n	800054a <setKeyBytes+0x72>
	} else if(HIDKeyboardReport.K3 == 0){
 8000504:	4b14      	ldr	r3, [pc, #80]	; (8000558 <setKeyBytes+0x80>)
 8000506:	791b      	ldrb	r3, [r3, #4]
 8000508:	2b00      	cmp	r3, #0
 800050a:	d104      	bne.n	8000516 <setKeyBytes+0x3e>
		HIDKeyboardReport.K3 = *code;
 800050c:	687b      	ldr	r3, [r7, #4]
 800050e:	781a      	ldrb	r2, [r3, #0]
 8000510:	4b11      	ldr	r3, [pc, #68]	; (8000558 <setKeyBytes+0x80>)
 8000512:	711a      	strb	r2, [r3, #4]
}
 8000514:	e019      	b.n	800054a <setKeyBytes+0x72>
	} else if(HIDKeyboardReport.K4 == 0){
 8000516:	4b10      	ldr	r3, [pc, #64]	; (8000558 <setKeyBytes+0x80>)
 8000518:	795b      	ldrb	r3, [r3, #5]
 800051a:	2b00      	cmp	r3, #0
 800051c:	d104      	bne.n	8000528 <setKeyBytes+0x50>
		HIDKeyboardReport.K4 = *code;
 800051e:	687b      	ldr	r3, [r7, #4]
 8000520:	781a      	ldrb	r2, [r3, #0]
 8000522:	4b0d      	ldr	r3, [pc, #52]	; (8000558 <setKeyBytes+0x80>)
 8000524:	715a      	strb	r2, [r3, #5]
}
 8000526:	e010      	b.n	800054a <setKeyBytes+0x72>
	} else if(HIDKeyboardReport.K5 == 0){
 8000528:	4b0b      	ldr	r3, [pc, #44]	; (8000558 <setKeyBytes+0x80>)
 800052a:	799b      	ldrb	r3, [r3, #6]
 800052c:	2b00      	cmp	r3, #0
 800052e:	d104      	bne.n	800053a <setKeyBytes+0x62>
		HIDKeyboardReport.K5 = *code;
 8000530:	687b      	ldr	r3, [r7, #4]
 8000532:	781a      	ldrb	r2, [r3, #0]
 8000534:	4b08      	ldr	r3, [pc, #32]	; (8000558 <setKeyBytes+0x80>)
 8000536:	719a      	strb	r2, [r3, #6]
}
 8000538:	e007      	b.n	800054a <setKeyBytes+0x72>
	} else if(HIDKeyboardReport.K6 == 0){
 800053a:	4b07      	ldr	r3, [pc, #28]	; (8000558 <setKeyBytes+0x80>)
 800053c:	79db      	ldrb	r3, [r3, #7]
 800053e:	2b00      	cmp	r3, #0
 8000540:	d103      	bne.n	800054a <setKeyBytes+0x72>
		HIDKeyboardReport.K6 = *code;
 8000542:	687b      	ldr	r3, [r7, #4]
 8000544:	781a      	ldrb	r2, [r3, #0]
 8000546:	4b04      	ldr	r3, [pc, #16]	; (8000558 <setKeyBytes+0x80>)
 8000548:	71da      	strb	r2, [r3, #7]
}
 800054a:	bf00      	nop
 800054c:	370c      	adds	r7, #12
 800054e:	46bd      	mov	sp, r7
 8000550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000554:	4770      	bx	lr
 8000556:	bf00      	nop
 8000558:	20000160 	.word	0x20000160

0800055c <clearReport>:

// scan function for keyboard settings i.e. swtichingmouse mode

// scan for thumb-stick keys, so scans held, but sets the report to a prebuilt report mapped tot hat layer... technically with that the layer could still function normally... for mod keys... probbaly a more elegant solution for most cases... but I do like the manual mod map

void clearReport(void){
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
	HIDKeyboardReport.MOD = 0;
 8000560:	4b0c      	ldr	r3, [pc, #48]	; (8000594 <clearReport+0x38>)
 8000562:	2200      	movs	r2, #0
 8000564:	701a      	strb	r2, [r3, #0]
	HIDKeyboardReport.K1 = 0;
 8000566:	4b0b      	ldr	r3, [pc, #44]	; (8000594 <clearReport+0x38>)
 8000568:	2200      	movs	r2, #0
 800056a:	709a      	strb	r2, [r3, #2]
	HIDKeyboardReport.K2 = 0;
 800056c:	4b09      	ldr	r3, [pc, #36]	; (8000594 <clearReport+0x38>)
 800056e:	2200      	movs	r2, #0
 8000570:	70da      	strb	r2, [r3, #3]
	HIDKeyboardReport.K3 = 0;
 8000572:	4b08      	ldr	r3, [pc, #32]	; (8000594 <clearReport+0x38>)
 8000574:	2200      	movs	r2, #0
 8000576:	711a      	strb	r2, [r3, #4]
	HIDKeyboardReport.K4 = 0;
 8000578:	4b06      	ldr	r3, [pc, #24]	; (8000594 <clearReport+0x38>)
 800057a:	2200      	movs	r2, #0
 800057c:	715a      	strb	r2, [r3, #5]
	HIDKeyboardReport.K5 = 0;
 800057e:	4b05      	ldr	r3, [pc, #20]	; (8000594 <clearReport+0x38>)
 8000580:	2200      	movs	r2, #0
 8000582:	719a      	strb	r2, [r3, #6]
	HIDKeyboardReport.K6 = 0;
 8000584:	4b03      	ldr	r3, [pc, #12]	; (8000594 <clearReport+0x38>)
 8000586:	2200      	movs	r2, #0
 8000588:	71da      	strb	r2, [r3, #7]
}
 800058a:	bf00      	nop
 800058c:	46bd      	mov	sp, r7
 800058e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000592:	4770      	bx	lr
 8000594:	20000160 	.word	0x20000160

08000598 <readStick>:
} joystick;

joystick leftStick;
joystick rightStick;

void readStick(joystick* stick){
 8000598:	b580      	push	{r7, lr}
 800059a:	b084      	sub	sp, #16
 800059c:	af00      	add	r7, sp, #0
 800059e:	6078      	str	r0, [r7, #4]
	uint16_t currentX;
	uint16_t currentY;

	HAL_ADC_Start(&hadc1);
 80005a0:	4811      	ldr	r0, [pc, #68]	; (80005e8 <readStick+0x50>)
 80005a2:	f000 fc61 	bl	8000e68 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005a6:	f04f 31ff 	mov.w	r1, #4294967295
 80005aa:	480f      	ldr	r0, [pc, #60]	; (80005e8 <readStick+0x50>)
 80005ac:	f000 fd43 	bl	8001036 <HAL_ADC_PollForConversion>
	currentX = HAL_ADC_GetValue(&hadc1);
 80005b0:	480d      	ldr	r0, [pc, #52]	; (80005e8 <readStick+0x50>)
 80005b2:	f000 fdcb 	bl	800114c <HAL_ADC_GetValue>
 80005b6:	4603      	mov	r3, r0
 80005b8:	81fb      	strh	r3, [r7, #14]

	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80005ba:	f04f 31ff 	mov.w	r1, #4294967295
 80005be:	480a      	ldr	r0, [pc, #40]	; (80005e8 <readStick+0x50>)
 80005c0:	f000 fd39 	bl	8001036 <HAL_ADC_PollForConversion>
	currentY = HAL_ADC_GetValue(&hadc1);
 80005c4:	4808      	ldr	r0, [pc, #32]	; (80005e8 <readStick+0x50>)
 80005c6:	f000 fdc1 	bl	800114c <HAL_ADC_GetValue>
 80005ca:	4603      	mov	r3, r0
 80005cc:	81bb      	strh	r3, [r7, #12]

	HAL_ADC_Stop(&hadc1);
 80005ce:	4806      	ldr	r0, [pc, #24]	; (80005e8 <readStick+0x50>)
 80005d0:	f000 fcfe 	bl	8000fd0 <HAL_ADC_Stop>

	stick->xAxis = currentX;
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	89fa      	ldrh	r2, [r7, #14]
 80005d8:	805a      	strh	r2, [r3, #2]
	stick->yAxis = currentY;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	89ba      	ldrh	r2, [r7, #12]
 80005de:	801a      	strh	r2, [r3, #0]

}
 80005e0:	bf00      	nop
 80005e2:	3710      	adds	r7, #16
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000178 	.word	0x20000178

080005ec <joystickKeyPrint>:
uint8_t keycodeZero = 0x27;
uint8_t keycodeNewline = 0x28;



void joystickKeyPrint (uint16_t joystickVal){
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b084      	sub	sp, #16
 80005f0:	af00      	add	r7, sp, #0
 80005f2:	4603      	mov	r3, r0
 80005f4:	80fb      	strh	r3, [r7, #6]
	int j;

	for(j = 0; j < 16; j++){
 80005f6:	2300      	movs	r3, #0
 80005f8:	60fb      	str	r3, [r7, #12]
 80005fa:	e01b      	b.n	8000634 <joystickKeyPrint+0x48>
		if(0 != butRef[j] & joystickVal){
 80005fc:	4a35      	ldr	r2, [pc, #212]	; (80006d4 <joystickKeyPrint+0xe8>)
 80005fe:	68fb      	ldr	r3, [r7, #12]
 8000600:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000604:	2b00      	cmp	r3, #0
 8000606:	bf14      	ite	ne
 8000608:	2301      	movne	r3, #1
 800060a:	2300      	moveq	r3, #0
 800060c:	b2db      	uxtb	r3, r3
 800060e:	461a      	mov	r2, r3
 8000610:	88fb      	ldrh	r3, [r7, #6]
 8000612:	4013      	ands	r3, r2
 8000614:	2b00      	cmp	r3, #0
 8000616:	d005      	beq.n	8000624 <joystickKeyPrint+0x38>
			mapRef[j] = 1;
 8000618:	4a2f      	ldr	r2, [pc, #188]	; (80006d8 <joystickKeyPrint+0xec>)
 800061a:	68fb      	ldr	r3, [r7, #12]
 800061c:	4413      	add	r3, r2
 800061e:	2201      	movs	r2, #1
 8000620:	701a      	strb	r2, [r3, #0]
 8000622:	e004      	b.n	800062e <joystickKeyPrint+0x42>
		} else{
			mapRef[j] = 0;
 8000624:	4a2c      	ldr	r2, [pc, #176]	; (80006d8 <joystickKeyPrint+0xec>)
 8000626:	68fb      	ldr	r3, [r7, #12]
 8000628:	4413      	add	r3, r2
 800062a:	2200      	movs	r2, #0
 800062c:	701a      	strb	r2, [r3, #0]
	for(j = 0; j < 16; j++){
 800062e:	68fb      	ldr	r3, [r7, #12]
 8000630:	3301      	adds	r3, #1
 8000632:	60fb      	str	r3, [r7, #12]
 8000634:	68fb      	ldr	r3, [r7, #12]
 8000636:	2b0f      	cmp	r3, #15
 8000638:	dde0      	ble.n	80005fc <joystickKeyPrint+0x10>
		}
	}

	for(j = 4; j < 10; j++){
 800063a:	2304      	movs	r3, #4
 800063c:	60fb      	str	r3, [r7, #12]
 800063e:	e00f      	b.n	8000660 <joystickKeyPrint+0x74>
		if (mapRef[j] == 1){
 8000640:	4a25      	ldr	r2, [pc, #148]	; (80006d8 <joystickKeyPrint+0xec>)
 8000642:	68fb      	ldr	r3, [r7, #12]
 8000644:	4413      	add	r3, r2
 8000646:	781b      	ldrb	r3, [r3, #0]
 8000648:	2b01      	cmp	r3, #1
 800064a:	d103      	bne.n	8000654 <joystickKeyPrint+0x68>
			setKeyBytes(&keycodeOne);
 800064c:	4823      	ldr	r0, [pc, #140]	; (80006dc <joystickKeyPrint+0xf0>)
 800064e:	f7ff ff43 	bl	80004d8 <setKeyBytes>
 8000652:	e002      	b.n	800065a <joystickKeyPrint+0x6e>
		} else {
			setKeyBytes(&keycodeZero);
 8000654:	4822      	ldr	r0, [pc, #136]	; (80006e0 <joystickKeyPrint+0xf4>)
 8000656:	f7ff ff3f 	bl	80004d8 <setKeyBytes>
	for(j = 4; j < 10; j++){
 800065a:	68fb      	ldr	r3, [r7, #12]
 800065c:	3301      	adds	r3, #1
 800065e:	60fb      	str	r3, [r7, #12]
 8000660:	68fb      	ldr	r3, [r7, #12]
 8000662:	2b09      	cmp	r3, #9
 8000664:	ddec      	ble.n	8000640 <joystickKeyPrint+0x54>
		}
	}

	USBD_HID_SendReport(&hUsbDeviceFS, &HIDKeyboardReport, sizeof(HIDKeyboardReport));
 8000666:	2208      	movs	r2, #8
 8000668:	491e      	ldr	r1, [pc, #120]	; (80006e4 <joystickKeyPrint+0xf8>)
 800066a:	481f      	ldr	r0, [pc, #124]	; (80006e8 <joystickKeyPrint+0xfc>)
 800066c:	f005 f9cc 	bl	8005a08 <USBD_HID_SendReport>

		HAL_Delay(NESS_DELAY);
 8000670:	2012      	movs	r0, #18
 8000672:	f000 fb91 	bl	8000d98 <HAL_Delay>

		for(j = 10; j < 16; j++){
 8000676:	230a      	movs	r3, #10
 8000678:	60fb      	str	r3, [r7, #12]
 800067a:	e00f      	b.n	800069c <joystickKeyPrint+0xb0>
				if (mapRef[j] == 1){
 800067c:	4a16      	ldr	r2, [pc, #88]	; (80006d8 <joystickKeyPrint+0xec>)
 800067e:	68fb      	ldr	r3, [r7, #12]
 8000680:	4413      	add	r3, r2
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b01      	cmp	r3, #1
 8000686:	d103      	bne.n	8000690 <joystickKeyPrint+0xa4>
					setKeyBytes(&keycodeOne);
 8000688:	4814      	ldr	r0, [pc, #80]	; (80006dc <joystickKeyPrint+0xf0>)
 800068a:	f7ff ff25 	bl	80004d8 <setKeyBytes>
 800068e:	e002      	b.n	8000696 <joystickKeyPrint+0xaa>
				} else {
					setKeyBytes(&keycodeZero);
 8000690:	4813      	ldr	r0, [pc, #76]	; (80006e0 <joystickKeyPrint+0xf4>)
 8000692:	f7ff ff21 	bl	80004d8 <setKeyBytes>
		for(j = 10; j < 16; j++){
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3301      	adds	r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2b0f      	cmp	r3, #15
 80006a0:	ddec      	ble.n	800067c <joystickKeyPrint+0x90>
				}
		}
		USBD_HID_SendReport(&hUsbDeviceFS, &HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80006a2:	2208      	movs	r2, #8
 80006a4:	490f      	ldr	r1, [pc, #60]	; (80006e4 <joystickKeyPrint+0xf8>)
 80006a6:	4810      	ldr	r0, [pc, #64]	; (80006e8 <joystickKeyPrint+0xfc>)
 80006a8:	f005 f9ae 	bl	8005a08 <USBD_HID_SendReport>

		HAL_Delay(NESS_DELAY);
 80006ac:	2012      	movs	r0, #18
 80006ae:	f000 fb73 	bl	8000d98 <HAL_Delay>
		clearReport();
 80006b2:	f7ff ff53 	bl	800055c <clearReport>
		setKeyBytes(&keycodeNewline);
 80006b6:	480d      	ldr	r0, [pc, #52]	; (80006ec <joystickKeyPrint+0x100>)
 80006b8:	f7ff ff0e 	bl	80004d8 <setKeyBytes>
		USBD_HID_SendReport(&hUsbDeviceFS, &HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80006bc:	2208      	movs	r2, #8
 80006be:	4909      	ldr	r1, [pc, #36]	; (80006e4 <joystickKeyPrint+0xf8>)
 80006c0:	4809      	ldr	r0, [pc, #36]	; (80006e8 <joystickKeyPrint+0xfc>)
 80006c2:	f005 f9a1 	bl	8005a08 <USBD_HID_SendReport>
		HAL_Delay(NESS_DELAY);
 80006c6:	2012      	movs	r0, #18
 80006c8:	f000 fb66 	bl	8000d98 <HAL_Delay>
}
 80006cc:	bf00      	nop
 80006ce:	3710      	adds	r7, #16
 80006d0:	46bd      	mov	sp, r7
 80006d2:	bd80      	pop	{r7, pc}
 80006d4:	20000000 	.word	0x20000000
 80006d8:	20000168 	.word	0x20000168
 80006dc:	20000022 	.word	0x20000022
 80006e0:	20000023 	.word	0x20000023
 80006e4:	20000160 	.word	0x20000160
 80006e8:	20000228 	.word	0x20000228
 80006ec:	20000024 	.word	0x20000024

080006f0 <testMain>:

void testMain(joystick* stick){
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
	readStick(stick);
 80006f8:	6878      	ldr	r0, [r7, #4]
 80006fa:	f7ff ff4d 	bl	8000598 <readStick>

	uint16_t valX = stick->xAxis;
 80006fe:	687b      	ldr	r3, [r7, #4]
 8000700:	885b      	ldrh	r3, [r3, #2]
 8000702:	81fb      	strh	r3, [r7, #14]
	uint16_t valY = stick->yAxis;
 8000704:	687b      	ldr	r3, [r7, #4]
 8000706:	881b      	ldrh	r3, [r3, #0]
 8000708:	81bb      	strh	r3, [r7, #12]
	joystickKeyPrint(valX);
 800070a:	89fb      	ldrh	r3, [r7, #14]
 800070c:	4618      	mov	r0, r3
 800070e:	f7ff ff6d 	bl	80005ec <joystickKeyPrint>
	joystickKeyPrint(valY);
 8000712:	89bb      	ldrh	r3, [r7, #12]
 8000714:	4618      	mov	r0, r3
 8000716:	f7ff ff69 	bl	80005ec <joystickKeyPrint>
	HAL_Delay(1500);
 800071a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800071e:	f000 fb3b 	bl	8000d98 <HAL_Delay>
}
 8000722:	bf00      	nop
 8000724:	3710      	adds	r7, #16
 8000726:	46bd      	mov	sp, r7
 8000728:	bd80      	pop	{r7, pc}
	...

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fabf 	bl	8000cb4 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f819 	bl	800076c <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073a:	f000 f91d 	bl	8000978 <MX_GPIO_Init>
  MX_ADC1_Init();
 800073e:	f000 f87f 	bl	8000840 <MX_ADC1_Init>
  MX_DMA_Init();
 8000742:	f000 f8f9 	bl	8000938 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 8000746:	f006 fcd9 	bl	80070fc <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  testMain(&testStick);
 800074a:	463b      	mov	r3, r7
 800074c:	4618      	mov	r0, r3
 800074e:	f7ff ffcf 	bl	80006f0 <testMain>
	  		} else{
				setHeld(1, 0);
			}

*/
	  USBD_HID_SendReport(&hUsbDeviceFS, &HIDKeyboardReport, sizeof(HIDKeyboardReport));
 8000752:	2208      	movs	r2, #8
 8000754:	4903      	ldr	r1, [pc, #12]	; (8000764 <main+0x38>)
 8000756:	4804      	ldr	r0, [pc, #16]	; (8000768 <main+0x3c>)
 8000758:	f005 f956 	bl	8005a08 <USBD_HID_SendReport>
  	  clearReport();
 800075c:	f7ff fefe 	bl	800055c <clearReport>
	  testMain(&testStick);
 8000760:	e7f3      	b.n	800074a <main+0x1e>
 8000762:	bf00      	nop
 8000764:	20000160 	.word	0x20000160
 8000768:	20000228 	.word	0x20000228

0800076c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800076c:	b580      	push	{r7, lr}
 800076e:	b094      	sub	sp, #80	; 0x50
 8000770:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000772:	f107 0320 	add.w	r3, r7, #32
 8000776:	2230      	movs	r2, #48	; 0x30
 8000778:	2100      	movs	r1, #0
 800077a:	4618      	mov	r0, r3
 800077c:	f007 f910 	bl	80079a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000780:	f107 030c 	add.w	r3, r7, #12
 8000784:	2200      	movs	r2, #0
 8000786:	601a      	str	r2, [r3, #0]
 8000788:	605a      	str	r2, [r3, #4]
 800078a:	609a      	str	r2, [r3, #8]
 800078c:	60da      	str	r2, [r3, #12]
 800078e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000790:	2300      	movs	r3, #0
 8000792:	60bb      	str	r3, [r7, #8]
 8000794:	4b28      	ldr	r3, [pc, #160]	; (8000838 <SystemClock_Config+0xcc>)
 8000796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000798:	4a27      	ldr	r2, [pc, #156]	; (8000838 <SystemClock_Config+0xcc>)
 800079a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079e:	6413      	str	r3, [r2, #64]	; 0x40
 80007a0:	4b25      	ldr	r3, [pc, #148]	; (8000838 <SystemClock_Config+0xcc>)
 80007a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a8:	60bb      	str	r3, [r7, #8]
 80007aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007ac:	2300      	movs	r3, #0
 80007ae:	607b      	str	r3, [r7, #4]
 80007b0:	4b22      	ldr	r3, [pc, #136]	; (800083c <SystemClock_Config+0xd0>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b8:	4a20      	ldr	r2, [pc, #128]	; (800083c <SystemClock_Config+0xd0>)
 80007ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007be:	6013      	str	r3, [r2, #0]
 80007c0:	4b1e      	ldr	r3, [pc, #120]	; (800083c <SystemClock_Config+0xd0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c8:	607b      	str	r3, [r7, #4]
 80007ca:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007cc:	2301      	movs	r3, #1
 80007ce:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007d0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d6:	2302      	movs	r3, #2
 80007d8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007da:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007de:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80007e0:	230f      	movs	r3, #15
 80007e2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80007e4:	2390      	movs	r3, #144	; 0x90
 80007e6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e8:	2302      	movs	r3, #2
 80007ea:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80007ec:	2305      	movs	r3, #5
 80007ee:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007f0:	f107 0320 	add.w	r3, r7, #32
 80007f4:	4618      	mov	r0, r3
 80007f6:	f002 fed3 	bl	80035a0 <HAL_RCC_OscConfig>
 80007fa:	4603      	mov	r3, r0
 80007fc:	2b00      	cmp	r3, #0
 80007fe:	d001      	beq.n	8000804 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000800:	f000 f938 	bl	8000a74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000804:	230f      	movs	r3, #15
 8000806:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000808:	2301      	movs	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000814:	2300      	movs	r3, #0
 8000816:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000818:	f107 030c 	add.w	r3, r7, #12
 800081c:	2100      	movs	r1, #0
 800081e:	4618      	mov	r0, r3
 8000820:	f003 f936 	bl	8003a90 <HAL_RCC_ClockConfig>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d001      	beq.n	800082e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800082a:	f000 f923 	bl	8000a74 <Error_Handler>
  }
}
 800082e:	bf00      	nop
 8000830:	3750      	adds	r7, #80	; 0x50
 8000832:	46bd      	mov	sp, r7
 8000834:	bd80      	pop	{r7, pc}
 8000836:	bf00      	nop
 8000838:	40023800 	.word	0x40023800
 800083c:	40007000 	.word	0x40007000

08000840 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000840:	b580      	push	{r7, lr}
 8000842:	b084      	sub	sp, #16
 8000844:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000846:	463b      	mov	r3, r7
 8000848:	2200      	movs	r2, #0
 800084a:	601a      	str	r2, [r3, #0]
 800084c:	605a      	str	r2, [r3, #4]
 800084e:	609a      	str	r2, [r3, #8]
 8000850:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000852:	4b36      	ldr	r3, [pc, #216]	; (800092c <MX_ADC1_Init+0xec>)
 8000854:	4a36      	ldr	r2, [pc, #216]	; (8000930 <MX_ADC1_Init+0xf0>)
 8000856:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000858:	4b34      	ldr	r3, [pc, #208]	; (800092c <MX_ADC1_Init+0xec>)
 800085a:	2200      	movs	r2, #0
 800085c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800085e:	4b33      	ldr	r3, [pc, #204]	; (800092c <MX_ADC1_Init+0xec>)
 8000860:	2200      	movs	r2, #0
 8000862:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000864:	4b31      	ldr	r3, [pc, #196]	; (800092c <MX_ADC1_Init+0xec>)
 8000866:	2201      	movs	r2, #1
 8000868:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 800086a:	4b30      	ldr	r3, [pc, #192]	; (800092c <MX_ADC1_Init+0xec>)
 800086c:	2201      	movs	r2, #1
 800086e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000870:	4b2e      	ldr	r3, [pc, #184]	; (800092c <MX_ADC1_Init+0xec>)
 8000872:	2200      	movs	r2, #0
 8000874:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000878:	4b2c      	ldr	r3, [pc, #176]	; (800092c <MX_ADC1_Init+0xec>)
 800087a:	2200      	movs	r2, #0
 800087c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800087e:	4b2b      	ldr	r3, [pc, #172]	; (800092c <MX_ADC1_Init+0xec>)
 8000880:	4a2c      	ldr	r2, [pc, #176]	; (8000934 <MX_ADC1_Init+0xf4>)
 8000882:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000884:	4b29      	ldr	r3, [pc, #164]	; (800092c <MX_ADC1_Init+0xec>)
 8000886:	2200      	movs	r2, #0
 8000888:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 800088a:	4b28      	ldr	r3, [pc, #160]	; (800092c <MX_ADC1_Init+0xec>)
 800088c:	2204      	movs	r2, #4
 800088e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000890:	4b26      	ldr	r3, [pc, #152]	; (800092c <MX_ADC1_Init+0xec>)
 8000892:	2200      	movs	r2, #0
 8000894:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000898:	4b24      	ldr	r3, [pc, #144]	; (800092c <MX_ADC1_Init+0xec>)
 800089a:	2201      	movs	r2, #1
 800089c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800089e:	4823      	ldr	r0, [pc, #140]	; (800092c <MX_ADC1_Init+0xec>)
 80008a0:	f000 fa9e 	bl	8000de0 <HAL_ADC_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008aa:	f000 f8e3 	bl	8000a74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80008ae:	2300      	movs	r3, #0
 80008b0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008b2:	2301      	movs	r3, #1
 80008b4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008b6:	2300      	movs	r3, #0
 80008b8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008ba:	463b      	mov	r3, r7
 80008bc:	4619      	mov	r1, r3
 80008be:	481b      	ldr	r0, [pc, #108]	; (800092c <MX_ADC1_Init+0xec>)
 80008c0:	f000 fc52 	bl	8001168 <HAL_ADC_ConfigChannel>
 80008c4:	4603      	mov	r3, r0
 80008c6:	2b00      	cmp	r3, #0
 80008c8:	d001      	beq.n	80008ce <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008ca:	f000 f8d3 	bl	8000a74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 80008ce:	2301      	movs	r3, #1
 80008d0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80008d2:	2302      	movs	r3, #2
 80008d4:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d6:	463b      	mov	r3, r7
 80008d8:	4619      	mov	r1, r3
 80008da:	4814      	ldr	r0, [pc, #80]	; (800092c <MX_ADC1_Init+0xec>)
 80008dc:	f000 fc44 	bl	8001168 <HAL_ADC_ConfigChannel>
 80008e0:	4603      	mov	r3, r0
 80008e2:	2b00      	cmp	r3, #0
 80008e4:	d001      	beq.n	80008ea <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80008e6:	f000 f8c5 	bl	8000a74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 80008ea:	2302      	movs	r3, #2
 80008ec:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 80008ee:	2303      	movs	r3, #3
 80008f0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008f2:	463b      	mov	r3, r7
 80008f4:	4619      	mov	r1, r3
 80008f6:	480d      	ldr	r0, [pc, #52]	; (800092c <MX_ADC1_Init+0xec>)
 80008f8:	f000 fc36 	bl	8001168 <HAL_ADC_ConfigChannel>
 80008fc:	4603      	mov	r3, r0
 80008fe:	2b00      	cmp	r3, #0
 8000900:	d001      	beq.n	8000906 <MX_ADC1_Init+0xc6>
  {
    Error_Handler();
 8000902:	f000 f8b7 	bl	8000a74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000906:	2303      	movs	r3, #3
 8000908:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 800090a:	2304      	movs	r3, #4
 800090c:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800090e:	463b      	mov	r3, r7
 8000910:	4619      	mov	r1, r3
 8000912:	4806      	ldr	r0, [pc, #24]	; (800092c <MX_ADC1_Init+0xec>)
 8000914:	f000 fc28 	bl	8001168 <HAL_ADC_ConfigChannel>
 8000918:	4603      	mov	r3, r0
 800091a:	2b00      	cmp	r3, #0
 800091c:	d001      	beq.n	8000922 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 800091e:	f000 f8a9 	bl	8000a74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000922:	bf00      	nop
 8000924:	3710      	adds	r7, #16
 8000926:	46bd      	mov	sp, r7
 8000928:	bd80      	pop	{r7, pc}
 800092a:	bf00      	nop
 800092c:	20000178 	.word	0x20000178
 8000930:	40012000 	.word	0x40012000
 8000934:	0f000001 	.word	0x0f000001

08000938 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	b082      	sub	sp, #8
 800093c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 800093e:	2300      	movs	r3, #0
 8000940:	607b      	str	r3, [r7, #4]
 8000942:	4b0c      	ldr	r3, [pc, #48]	; (8000974 <MX_DMA_Init+0x3c>)
 8000944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000946:	4a0b      	ldr	r2, [pc, #44]	; (8000974 <MX_DMA_Init+0x3c>)
 8000948:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800094c:	6313      	str	r3, [r2, #48]	; 0x30
 800094e:	4b09      	ldr	r3, [pc, #36]	; (8000974 <MX_DMA_Init+0x3c>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 800095a:	2200      	movs	r2, #0
 800095c:	2100      	movs	r1, #0
 800095e:	2038      	movs	r0, #56	; 0x38
 8000960:	f000 fefb 	bl	800175a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000964:	2038      	movs	r0, #56	; 0x38
 8000966:	f000 ff14 	bl	8001792 <HAL_NVIC_EnableIRQ>

}
 800096a:	bf00      	nop
 800096c:	3708      	adds	r7, #8
 800096e:	46bd      	mov	sp, r7
 8000970:	bd80      	pop	{r7, pc}
 8000972:	bf00      	nop
 8000974:	40023800 	.word	0x40023800

08000978 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000978:	b580      	push	{r7, lr}
 800097a:	b08a      	sub	sp, #40	; 0x28
 800097c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	2200      	movs	r2, #0
 8000984:	601a      	str	r2, [r3, #0]
 8000986:	605a      	str	r2, [r3, #4]
 8000988:	609a      	str	r2, [r3, #8]
 800098a:	60da      	str	r2, [r3, #12]
 800098c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	613b      	str	r3, [r7, #16]
 8000992:	4b34      	ldr	r3, [pc, #208]	; (8000a64 <MX_GPIO_Init+0xec>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a33      	ldr	r2, [pc, #204]	; (8000a64 <MX_GPIO_Init+0xec>)
 8000998:	f043 0304 	orr.w	r3, r3, #4
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b31      	ldr	r3, [pc, #196]	; (8000a64 <MX_GPIO_Init+0xec>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0304 	and.w	r3, r3, #4
 80009a6:	613b      	str	r3, [r7, #16]
 80009a8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80009aa:	2300      	movs	r3, #0
 80009ac:	60fb      	str	r3, [r7, #12]
 80009ae:	4b2d      	ldr	r3, [pc, #180]	; (8000a64 <MX_GPIO_Init+0xec>)
 80009b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b2:	4a2c      	ldr	r2, [pc, #176]	; (8000a64 <MX_GPIO_Init+0xec>)
 80009b4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009b8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ba:	4b2a      	ldr	r3, [pc, #168]	; (8000a64 <MX_GPIO_Init+0xec>)
 80009bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009c2:	60fb      	str	r3, [r7, #12]
 80009c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009c6:	2300      	movs	r3, #0
 80009c8:	60bb      	str	r3, [r7, #8]
 80009ca:	4b26      	ldr	r3, [pc, #152]	; (8000a64 <MX_GPIO_Init+0xec>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	4a25      	ldr	r2, [pc, #148]	; (8000a64 <MX_GPIO_Init+0xec>)
 80009d0:	f043 0301 	orr.w	r3, r3, #1
 80009d4:	6313      	str	r3, [r2, #48]	; 0x30
 80009d6:	4b23      	ldr	r3, [pc, #140]	; (8000a64 <MX_GPIO_Init+0xec>)
 80009d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009da:	f003 0301 	and.w	r3, r3, #1
 80009de:	60bb      	str	r3, [r7, #8]
 80009e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009e2:	2300      	movs	r3, #0
 80009e4:	607b      	str	r3, [r7, #4]
 80009e6:	4b1f      	ldr	r3, [pc, #124]	; (8000a64 <MX_GPIO_Init+0xec>)
 80009e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ea:	4a1e      	ldr	r2, [pc, #120]	; (8000a64 <MX_GPIO_Init+0xec>)
 80009ec:	f043 0302 	orr.w	r3, r3, #2
 80009f0:	6313      	str	r3, [r2, #48]	; 0x30
 80009f2:	4b1c      	ldr	r3, [pc, #112]	; (8000a64 <MX_GPIO_Init+0xec>)
 80009f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f6:	f003 0302 	and.w	r3, r3, #2
 80009fa:	607b      	str	r3, [r7, #4]
 80009fc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009fe:	2200      	movs	r2, #0
 8000a00:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a04:	4818      	ldr	r0, [pc, #96]	; (8000a68 <MX_GPIO_Init+0xf0>)
 8000a06:	f001 fb4d 	bl	80020a4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a0e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a10:	2301      	movs	r3, #1
 8000a12:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a14:	2300      	movs	r3, #0
 8000a16:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a18:	2300      	movs	r3, #0
 8000a1a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a1c:	f107 0314 	add.w	r3, r7, #20
 8000a20:	4619      	mov	r1, r3
 8000a22:	4811      	ldr	r0, [pc, #68]	; (8000a68 <MX_GPIO_Init+0xf0>)
 8000a24:	f001 f9ba 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000a28:	23f0      	movs	r3, #240	; 0xf0
 8000a2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a30:	2302      	movs	r3, #2
 8000a32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a34:	f107 0314 	add.w	r3, r7, #20
 8000a38:	4619      	mov	r1, r3
 8000a3a:	480c      	ldr	r0, [pc, #48]	; (8000a6c <MX_GPIO_Init+0xf4>)
 8000a3c:	f001 f9ae 	bl	8001d9c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB15 PB3 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000a40:	f248 73ff 	movw	r3, #34815	; 0x87ff
 8000a44:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_15|GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a46:	2300      	movs	r3, #0
 8000a48:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a4a:	2302      	movs	r3, #2
 8000a4c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a4e:	f107 0314 	add.w	r3, r7, #20
 8000a52:	4619      	mov	r1, r3
 8000a54:	4806      	ldr	r0, [pc, #24]	; (8000a70 <MX_GPIO_Init+0xf8>)
 8000a56:	f001 f9a1 	bl	8001d9c <HAL_GPIO_Init>

}
 8000a5a:	bf00      	nop
 8000a5c:	3728      	adds	r7, #40	; 0x28
 8000a5e:	46bd      	mov	sp, r7
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40023800 	.word	0x40023800
 8000a68:	40020800 	.word	0x40020800
 8000a6c:	40020000 	.word	0x40020000
 8000a70:	40020400 	.word	0x40020400

08000a74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a74:	b480      	push	{r7}
 8000a76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a78:	b672      	cpsid	i
}
 8000a7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a7c:	e7fe      	b.n	8000a7c <Error_Handler+0x8>
	...

08000a80 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a80:	b480      	push	{r7}
 8000a82:	b083      	sub	sp, #12
 8000a84:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a86:	2300      	movs	r3, #0
 8000a88:	607b      	str	r3, [r7, #4]
 8000a8a:	4b10      	ldr	r3, [pc, #64]	; (8000acc <HAL_MspInit+0x4c>)
 8000a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a8e:	4a0f      	ldr	r2, [pc, #60]	; (8000acc <HAL_MspInit+0x4c>)
 8000a90:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a94:	6453      	str	r3, [r2, #68]	; 0x44
 8000a96:	4b0d      	ldr	r3, [pc, #52]	; (8000acc <HAL_MspInit+0x4c>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a9e:	607b      	str	r3, [r7, #4]
 8000aa0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aa2:	2300      	movs	r3, #0
 8000aa4:	603b      	str	r3, [r7, #0]
 8000aa6:	4b09      	ldr	r3, [pc, #36]	; (8000acc <HAL_MspInit+0x4c>)
 8000aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aaa:	4a08      	ldr	r2, [pc, #32]	; (8000acc <HAL_MspInit+0x4c>)
 8000aac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab0:	6413      	str	r3, [r2, #64]	; 0x40
 8000ab2:	4b06      	ldr	r3, [pc, #24]	; (8000acc <HAL_MspInit+0x4c>)
 8000ab4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000aba:	603b      	str	r3, [r7, #0]
 8000abc:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000abe:	bf00      	nop
 8000ac0:	370c      	adds	r7, #12
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac8:	4770      	bx	lr
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800

08000ad0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad0:	b580      	push	{r7, lr}
 8000ad2:	b08a      	sub	sp, #40	; 0x28
 8000ad4:	af00      	add	r7, sp, #0
 8000ad6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ad8:	f107 0314 	add.w	r3, r7, #20
 8000adc:	2200      	movs	r2, #0
 8000ade:	601a      	str	r2, [r3, #0]
 8000ae0:	605a      	str	r2, [r3, #4]
 8000ae2:	609a      	str	r2, [r3, #8]
 8000ae4:	60da      	str	r2, [r3, #12]
 8000ae6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4a2f      	ldr	r2, [pc, #188]	; (8000bac <HAL_ADC_MspInit+0xdc>)
 8000aee:	4293      	cmp	r3, r2
 8000af0:	d157      	bne.n	8000ba2 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000af2:	2300      	movs	r3, #0
 8000af4:	613b      	str	r3, [r7, #16]
 8000af6:	4b2e      	ldr	r3, [pc, #184]	; (8000bb0 <HAL_ADC_MspInit+0xe0>)
 8000af8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000afa:	4a2d      	ldr	r2, [pc, #180]	; (8000bb0 <HAL_ADC_MspInit+0xe0>)
 8000afc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b00:	6453      	str	r3, [r2, #68]	; 0x44
 8000b02:	4b2b      	ldr	r3, [pc, #172]	; (8000bb0 <HAL_ADC_MspInit+0xe0>)
 8000b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b06:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b0a:	613b      	str	r3, [r7, #16]
 8000b0c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b0e:	2300      	movs	r3, #0
 8000b10:	60fb      	str	r3, [r7, #12]
 8000b12:	4b27      	ldr	r3, [pc, #156]	; (8000bb0 <HAL_ADC_MspInit+0xe0>)
 8000b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b16:	4a26      	ldr	r2, [pc, #152]	; (8000bb0 <HAL_ADC_MspInit+0xe0>)
 8000b18:	f043 0301 	orr.w	r3, r3, #1
 8000b1c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b1e:	4b24      	ldr	r3, [pc, #144]	; (8000bb0 <HAL_ADC_MspInit+0xe0>)
 8000b20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b22:	f003 0301 	and.w	r3, r3, #1
 8000b26:	60fb      	str	r3, [r7, #12]
 8000b28:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000b2a:	230f      	movs	r3, #15
 8000b2c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b2e:	2303      	movs	r3, #3
 8000b30:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b32:	2300      	movs	r3, #0
 8000b34:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b36:	f107 0314 	add.w	r3, r7, #20
 8000b3a:	4619      	mov	r1, r3
 8000b3c:	481d      	ldr	r0, [pc, #116]	; (8000bb4 <HAL_ADC_MspInit+0xe4>)
 8000b3e:	f001 f92d 	bl	8001d9c <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000b42:	4b1d      	ldr	r3, [pc, #116]	; (8000bb8 <HAL_ADC_MspInit+0xe8>)
 8000b44:	4a1d      	ldr	r2, [pc, #116]	; (8000bbc <HAL_ADC_MspInit+0xec>)
 8000b46:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000b48:	4b1b      	ldr	r3, [pc, #108]	; (8000bb8 <HAL_ADC_MspInit+0xe8>)
 8000b4a:	2200      	movs	r2, #0
 8000b4c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000b4e:	4b1a      	ldr	r3, [pc, #104]	; (8000bb8 <HAL_ADC_MspInit+0xe8>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000b54:	4b18      	ldr	r3, [pc, #96]	; (8000bb8 <HAL_ADC_MspInit+0xe8>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000b5a:	4b17      	ldr	r3, [pc, #92]	; (8000bb8 <HAL_ADC_MspInit+0xe8>)
 8000b5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000b60:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000b62:	4b15      	ldr	r3, [pc, #84]	; (8000bb8 <HAL_ADC_MspInit+0xe8>)
 8000b64:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8000b68:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000b6a:	4b13      	ldr	r3, [pc, #76]	; (8000bb8 <HAL_ADC_MspInit+0xe8>)
 8000b6c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000b70:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000b72:	4b11      	ldr	r3, [pc, #68]	; (8000bb8 <HAL_ADC_MspInit+0xe8>)
 8000b74:	f44f 7280 	mov.w	r2, #256	; 0x100
 8000b78:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000b7a:	4b0f      	ldr	r3, [pc, #60]	; (8000bb8 <HAL_ADC_MspInit+0xe8>)
 8000b7c:	2200      	movs	r2, #0
 8000b7e:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000b80:	4b0d      	ldr	r3, [pc, #52]	; (8000bb8 <HAL_ADC_MspInit+0xe8>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000b86:	480c      	ldr	r0, [pc, #48]	; (8000bb8 <HAL_ADC_MspInit+0xe8>)
 8000b88:	f000 fe1e 	bl	80017c8 <HAL_DMA_Init>
 8000b8c:	4603      	mov	r3, r0
 8000b8e:	2b00      	cmp	r3, #0
 8000b90:	d001      	beq.n	8000b96 <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000b92:	f7ff ff6f 	bl	8000a74 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	4a07      	ldr	r2, [pc, #28]	; (8000bb8 <HAL_ADC_MspInit+0xe8>)
 8000b9a:	639a      	str	r2, [r3, #56]	; 0x38
 8000b9c:	4a06      	ldr	r2, [pc, #24]	; (8000bb8 <HAL_ADC_MspInit+0xe8>)
 8000b9e:	687b      	ldr	r3, [r7, #4]
 8000ba0:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000ba2:	bf00      	nop
 8000ba4:	3728      	adds	r7, #40	; 0x28
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	bd80      	pop	{r7, pc}
 8000baa:	bf00      	nop
 8000bac:	40012000 	.word	0x40012000
 8000bb0:	40023800 	.word	0x40023800
 8000bb4:	40020000 	.word	0x40020000
 8000bb8:	200001c0 	.word	0x200001c0
 8000bbc:	40026410 	.word	0x40026410

08000bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000bc4:	e7fe      	b.n	8000bc4 <NMI_Handler+0x4>

08000bc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000bc6:	b480      	push	{r7}
 8000bc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000bca:	e7fe      	b.n	8000bca <HardFault_Handler+0x4>

08000bcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000bcc:	b480      	push	{r7}
 8000bce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bd0:	e7fe      	b.n	8000bd0 <MemManage_Handler+0x4>

08000bd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bd2:	b480      	push	{r7}
 8000bd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bd6:	e7fe      	b.n	8000bd6 <BusFault_Handler+0x4>

08000bd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bdc:	e7fe      	b.n	8000bdc <UsageFault_Handler+0x4>

08000bde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000bde:	b480      	push	{r7}
 8000be0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000be2:	bf00      	nop
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr

08000bec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000bec:	b480      	push	{r7}
 8000bee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000bf0:	bf00      	nop
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bf8:	4770      	bx	lr

08000bfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000bfa:	b480      	push	{r7}
 8000bfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000bfe:	bf00      	nop
 8000c00:	46bd      	mov	sp, r7
 8000c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c06:	4770      	bx	lr

08000c08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c0c:	f000 f8a4 	bl	8000d58 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c10:	bf00      	nop
 8000c12:	bd80      	pop	{r7, pc}

08000c14 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000c14:	b580      	push	{r7, lr}
 8000c16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000c18:	4802      	ldr	r0, [pc, #8]	; (8000c24 <DMA2_Stream0_IRQHandler+0x10>)
 8000c1a:	f000 fe83 	bl	8001924 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000c1e:	bf00      	nop
 8000c20:	bd80      	pop	{r7, pc}
 8000c22:	bf00      	nop
 8000c24:	200001c0 	.word	0x200001c0

08000c28 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000c28:	b580      	push	{r7, lr}
 8000c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000c2c:	4802      	ldr	r0, [pc, #8]	; (8000c38 <OTG_FS_IRQHandler+0x10>)
 8000c2e:	f001 fba2 	bl	8002376 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}
 8000c36:	bf00      	nop
 8000c38:	20000704 	.word	0x20000704

08000c3c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000c3c:	b480      	push	{r7}
 8000c3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000c40:	4b06      	ldr	r3, [pc, #24]	; (8000c5c <SystemInit+0x20>)
 8000c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000c46:	4a05      	ldr	r2, [pc, #20]	; (8000c5c <SystemInit+0x20>)
 8000c48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000c4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000c50:	bf00      	nop
 8000c52:	46bd      	mov	sp, r7
 8000c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c58:	4770      	bx	lr
 8000c5a:	bf00      	nop
 8000c5c:	e000ed00 	.word	0xe000ed00

08000c60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000c60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000c64:	480d      	ldr	r0, [pc, #52]	; (8000c9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000c66:	490e      	ldr	r1, [pc, #56]	; (8000ca0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000c68:	4a0e      	ldr	r2, [pc, #56]	; (8000ca4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000c6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000c6c:	e002      	b.n	8000c74 <LoopCopyDataInit>

08000c6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000c6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000c70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000c72:	3304      	adds	r3, #4

08000c74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c78:	d3f9      	bcc.n	8000c6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ca8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c7c:	4c0b      	ldr	r4, [pc, #44]	; (8000cac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c80:	e001      	b.n	8000c86 <LoopFillZerobss>

08000c82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c84:	3204      	adds	r2, #4

08000c86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c88:	d3fb      	bcc.n	8000c82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c8a:	f7ff ffd7 	bl	8000c3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c8e:	f006 fe63 	bl	8007958 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c92:	f7ff fd4b 	bl	800072c <main>
  bx  lr    
 8000c96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c98:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ca0:	20000144 	.word	0x20000144
  ldr r2, =_sidata
 8000ca4:	08007a38 	.word	0x08007a38
  ldr r2, =_sbss
 8000ca8:	20000144 	.word	0x20000144
  ldr r4, =_ebss
 8000cac:	20000c24 	.word	0x20000c24

08000cb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000cb0:	e7fe      	b.n	8000cb0 <ADC_IRQHandler>
	...

08000cb4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000cb8:	4b0e      	ldr	r3, [pc, #56]	; (8000cf4 <HAL_Init+0x40>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	4a0d      	ldr	r2, [pc, #52]	; (8000cf4 <HAL_Init+0x40>)
 8000cbe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000cc2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <HAL_Init+0x40>)
 8000cc6:	681b      	ldr	r3, [r3, #0]
 8000cc8:	4a0a      	ldr	r2, [pc, #40]	; (8000cf4 <HAL_Init+0x40>)
 8000cca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000cce:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000cd0:	4b08      	ldr	r3, [pc, #32]	; (8000cf4 <HAL_Init+0x40>)
 8000cd2:	681b      	ldr	r3, [r3, #0]
 8000cd4:	4a07      	ldr	r2, [pc, #28]	; (8000cf4 <HAL_Init+0x40>)
 8000cd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000cda:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000cdc:	2003      	movs	r0, #3
 8000cde:	f000 fd31 	bl	8001744 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ce2:	200f      	movs	r0, #15
 8000ce4:	f000 f808 	bl	8000cf8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ce8:	f7ff feca 	bl	8000a80 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000cec:	2300      	movs	r3, #0
}
 8000cee:	4618      	mov	r0, r3
 8000cf0:	bd80      	pop	{r7, pc}
 8000cf2:	bf00      	nop
 8000cf4:	40023c00 	.word	0x40023c00

08000cf8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000cf8:	b580      	push	{r7, lr}
 8000cfa:	b082      	sub	sp, #8
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000d00:	4b12      	ldr	r3, [pc, #72]	; (8000d4c <HAL_InitTick+0x54>)
 8000d02:	681a      	ldr	r2, [r3, #0]
 8000d04:	4b12      	ldr	r3, [pc, #72]	; (8000d50 <HAL_InitTick+0x58>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	4619      	mov	r1, r3
 8000d0a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d0e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000d12:	fbb2 f3f3 	udiv	r3, r2, r3
 8000d16:	4618      	mov	r0, r3
 8000d18:	f000 fd49 	bl	80017ae <HAL_SYSTICK_Config>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000d22:	2301      	movs	r3, #1
 8000d24:	e00e      	b.n	8000d44 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d26:	687b      	ldr	r3, [r7, #4]
 8000d28:	2b0f      	cmp	r3, #15
 8000d2a:	d80a      	bhi.n	8000d42 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	6879      	ldr	r1, [r7, #4]
 8000d30:	f04f 30ff 	mov.w	r0, #4294967295
 8000d34:	f000 fd11 	bl	800175a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000d38:	4a06      	ldr	r2, [pc, #24]	; (8000d54 <HAL_InitTick+0x5c>)
 8000d3a:	687b      	ldr	r3, [r7, #4]
 8000d3c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000d3e:	2300      	movs	r3, #0
 8000d40:	e000      	b.n	8000d44 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000d42:	2301      	movs	r3, #1
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3708      	adds	r7, #8
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	20000028 	.word	0x20000028
 8000d50:	20000030 	.word	0x20000030
 8000d54:	2000002c 	.word	0x2000002c

08000d58 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000d58:	b480      	push	{r7}
 8000d5a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000d5c:	4b06      	ldr	r3, [pc, #24]	; (8000d78 <HAL_IncTick+0x20>)
 8000d5e:	781b      	ldrb	r3, [r3, #0]
 8000d60:	461a      	mov	r2, r3
 8000d62:	4b06      	ldr	r3, [pc, #24]	; (8000d7c <HAL_IncTick+0x24>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	4413      	add	r3, r2
 8000d68:	4a04      	ldr	r2, [pc, #16]	; (8000d7c <HAL_IncTick+0x24>)
 8000d6a:	6013      	str	r3, [r2, #0]
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d74:	4770      	bx	lr
 8000d76:	bf00      	nop
 8000d78:	20000030 	.word	0x20000030
 8000d7c:	20000220 	.word	0x20000220

08000d80 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  return uwTick;
 8000d84:	4b03      	ldr	r3, [pc, #12]	; (8000d94 <HAL_GetTick+0x14>)
 8000d86:	681b      	ldr	r3, [r3, #0]
}
 8000d88:	4618      	mov	r0, r3
 8000d8a:	46bd      	mov	sp, r7
 8000d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d90:	4770      	bx	lr
 8000d92:	bf00      	nop
 8000d94:	20000220 	.word	0x20000220

08000d98 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b084      	sub	sp, #16
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000da0:	f7ff ffee 	bl	8000d80 <HAL_GetTick>
 8000da4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000db0:	d005      	beq.n	8000dbe <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000db2:	4b0a      	ldr	r3, [pc, #40]	; (8000ddc <HAL_Delay+0x44>)
 8000db4:	781b      	ldrb	r3, [r3, #0]
 8000db6:	461a      	mov	r2, r3
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	4413      	add	r3, r2
 8000dbc:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000dbe:	bf00      	nop
 8000dc0:	f7ff ffde 	bl	8000d80 <HAL_GetTick>
 8000dc4:	4602      	mov	r2, r0
 8000dc6:	68bb      	ldr	r3, [r7, #8]
 8000dc8:	1ad3      	subs	r3, r2, r3
 8000dca:	68fa      	ldr	r2, [r7, #12]
 8000dcc:	429a      	cmp	r2, r3
 8000dce:	d8f7      	bhi.n	8000dc0 <HAL_Delay+0x28>
  {
  }
}
 8000dd0:	bf00      	nop
 8000dd2:	bf00      	nop
 8000dd4:	3710      	adds	r7, #16
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000030 	.word	0x20000030

08000de0 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	b084      	sub	sp, #16
 8000de4:	af00      	add	r7, sp, #0
 8000de6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000de8:	2300      	movs	r3, #0
 8000dea:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	2b00      	cmp	r3, #0
 8000df0:	d101      	bne.n	8000df6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000df2:	2301      	movs	r3, #1
 8000df4:	e033      	b.n	8000e5e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000df6:	687b      	ldr	r3, [r7, #4]
 8000df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d109      	bne.n	8000e12 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000dfe:	6878      	ldr	r0, [r7, #4]
 8000e00:	f7ff fe66 	bl	8000ad0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	2200      	movs	r2, #0
 8000e08:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000e0a:	687b      	ldr	r3, [r7, #4]
 8000e0c:	2200      	movs	r2, #0
 8000e0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e16:	f003 0310 	and.w	r3, r3, #16
 8000e1a:	2b00      	cmp	r3, #0
 8000e1c:	d118      	bne.n	8000e50 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e22:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000e26:	f023 0302 	bic.w	r3, r3, #2
 8000e2a:	f043 0202 	orr.w	r2, r3, #2
 8000e2e:	687b      	ldr	r3, [r7, #4]
 8000e30:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000e32:	6878      	ldr	r0, [r7, #4]
 8000e34:	f000 faba 	bl	80013ac <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e42:	f023 0303 	bic.w	r3, r3, #3
 8000e46:	f043 0201 	orr.w	r2, r3, #1
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	641a      	str	r2, [r3, #64]	; 0x40
 8000e4e:	e001      	b.n	8000e54 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000e50:	2301      	movs	r3, #1
 8000e52:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	2200      	movs	r2, #0
 8000e58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000e5c:	7bfb      	ldrb	r3, [r7, #15]
}
 8000e5e:	4618      	mov	r0, r3
 8000e60:	3710      	adds	r7, #16
 8000e62:	46bd      	mov	sp, r7
 8000e64:	bd80      	pop	{r7, pc}
	...

08000e68 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000e68:	b480      	push	{r7}
 8000e6a:	b085      	sub	sp, #20
 8000e6c:	af00      	add	r7, sp, #0
 8000e6e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000e70:	2300      	movs	r3, #0
 8000e72:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e7a:	2b01      	cmp	r3, #1
 8000e7c:	d101      	bne.n	8000e82 <HAL_ADC_Start+0x1a>
 8000e7e:	2302      	movs	r3, #2
 8000e80:	e097      	b.n	8000fb2 <HAL_ADC_Start+0x14a>
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2201      	movs	r2, #1
 8000e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000e8a:	687b      	ldr	r3, [r7, #4]
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	689b      	ldr	r3, [r3, #8]
 8000e90:	f003 0301 	and.w	r3, r3, #1
 8000e94:	2b01      	cmp	r3, #1
 8000e96:	d018      	beq.n	8000eca <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000e98:	687b      	ldr	r3, [r7, #4]
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	689a      	ldr	r2, [r3, #8]
 8000e9e:	687b      	ldr	r3, [r7, #4]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	f042 0201 	orr.w	r2, r2, #1
 8000ea6:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000ea8:	4b45      	ldr	r3, [pc, #276]	; (8000fc0 <HAL_ADC_Start+0x158>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	4a45      	ldr	r2, [pc, #276]	; (8000fc4 <HAL_ADC_Start+0x15c>)
 8000eae:	fba2 2303 	umull	r2, r3, r2, r3
 8000eb2:	0c9a      	lsrs	r2, r3, #18
 8000eb4:	4613      	mov	r3, r2
 8000eb6:	005b      	lsls	r3, r3, #1
 8000eb8:	4413      	add	r3, r2
 8000eba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ebc:	e002      	b.n	8000ec4 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000ebe:	68bb      	ldr	r3, [r7, #8]
 8000ec0:	3b01      	subs	r3, #1
 8000ec2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000ec4:	68bb      	ldr	r3, [r7, #8]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d1f9      	bne.n	8000ebe <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	689b      	ldr	r3, [r3, #8]
 8000ed0:	f003 0301 	and.w	r3, r3, #1
 8000ed4:	2b01      	cmp	r3, #1
 8000ed6:	d15f      	bne.n	8000f98 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000ed8:	687b      	ldr	r3, [r7, #4]
 8000eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000edc:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000ee0:	f023 0301 	bic.w	r3, r3, #1
 8000ee4:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000eec:	687b      	ldr	r3, [r7, #4]
 8000eee:	681b      	ldr	r3, [r3, #0]
 8000ef0:	685b      	ldr	r3, [r3, #4]
 8000ef2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000ef6:	2b00      	cmp	r3, #0
 8000ef8:	d007      	beq.n	8000f0a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000efe:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000f02:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000f06:	687b      	ldr	r3, [r7, #4]
 8000f08:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f0e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000f12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000f16:	d106      	bne.n	8000f26 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1c:	f023 0206 	bic.w	r2, r3, #6
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	645a      	str	r2, [r3, #68]	; 0x44
 8000f24:	e002      	b.n	8000f2c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	2200      	movs	r2, #0
 8000f2a:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	2200      	movs	r2, #0
 8000f30:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f34:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <HAL_ADC_Start+0x160>)
 8000f36:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000f40:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000f42:	68fb      	ldr	r3, [r7, #12]
 8000f44:	685b      	ldr	r3, [r3, #4]
 8000f46:	f003 031f 	and.w	r3, r3, #31
 8000f4a:	2b00      	cmp	r3, #0
 8000f4c:	d10f      	bne.n	8000f6e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	689b      	ldr	r3, [r3, #8]
 8000f54:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d129      	bne.n	8000fb0 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f5c:	687b      	ldr	r3, [r7, #4]
 8000f5e:	681b      	ldr	r3, [r3, #0]
 8000f60:	689a      	ldr	r2, [r3, #8]
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	681b      	ldr	r3, [r3, #0]
 8000f66:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f6a:	609a      	str	r2, [r3, #8]
 8000f6c:	e020      	b.n	8000fb0 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	4a16      	ldr	r2, [pc, #88]	; (8000fcc <HAL_ADC_Start+0x164>)
 8000f74:	4293      	cmp	r3, r2
 8000f76:	d11b      	bne.n	8000fb0 <HAL_ADC_Start+0x148>
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	689b      	ldr	r3, [r3, #8]
 8000f7e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000f82:	2b00      	cmp	r3, #0
 8000f84:	d114      	bne.n	8000fb0 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000f86:	687b      	ldr	r3, [r7, #4]
 8000f88:	681b      	ldr	r3, [r3, #0]
 8000f8a:	689a      	ldr	r2, [r3, #8]
 8000f8c:	687b      	ldr	r3, [r7, #4]
 8000f8e:	681b      	ldr	r3, [r3, #0]
 8000f90:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000f94:	609a      	str	r2, [r3, #8]
 8000f96:	e00b      	b.n	8000fb0 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f98:	687b      	ldr	r3, [r7, #4]
 8000f9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f9c:	f043 0210 	orr.w	r2, r3, #16
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fa8:	f043 0201 	orr.w	r2, r3, #1
 8000fac:	687b      	ldr	r3, [r7, #4]
 8000fae:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000fb0:	2300      	movs	r3, #0
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3714      	adds	r7, #20
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fbc:	4770      	bx	lr
 8000fbe:	bf00      	nop
 8000fc0:	20000028 	.word	0x20000028
 8000fc4:	431bde83 	.word	0x431bde83
 8000fc8:	40012300 	.word	0x40012300
 8000fcc:	40012000 	.word	0x40012000

08000fd0 <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000fd0:	b480      	push	{r7}
 8000fd2:	b083      	sub	sp, #12
 8000fd4:	af00      	add	r7, sp, #0
 8000fd6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000fd8:	687b      	ldr	r3, [r7, #4]
 8000fda:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000fde:	2b01      	cmp	r3, #1
 8000fe0:	d101      	bne.n	8000fe6 <HAL_ADC_Stop+0x16>
 8000fe2:	2302      	movs	r3, #2
 8000fe4:	e021      	b.n	800102a <HAL_ADC_Stop+0x5a>
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	2201      	movs	r2, #1
 8000fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000fee:	687b      	ldr	r3, [r7, #4]
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	689a      	ldr	r2, [r3, #8]
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	681b      	ldr	r3, [r3, #0]
 8000ff8:	f022 0201 	bic.w	r2, r2, #1
 8000ffc:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	689b      	ldr	r3, [r3, #8]
 8001004:	f003 0301 	and.w	r3, r3, #1
 8001008:	2b00      	cmp	r3, #0
 800100a:	d109      	bne.n	8001020 <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001014:	f023 0301 	bic.w	r3, r3, #1
 8001018:	f043 0201 	orr.w	r2, r3, #1
 800101c:	687b      	ldr	r3, [r7, #4]
 800101e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001020:	687b      	ldr	r3, [r7, #4]
 8001022:	2200      	movs	r2, #0
 8001024:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001028:	2300      	movs	r3, #0
}
 800102a:	4618      	mov	r0, r3
 800102c:	370c      	adds	r7, #12
 800102e:	46bd      	mov	sp, r7
 8001030:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001034:	4770      	bx	lr

08001036 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001036:	b580      	push	{r7, lr}
 8001038:	b084      	sub	sp, #16
 800103a:	af00      	add	r7, sp, #0
 800103c:	6078      	str	r0, [r7, #4]
 800103e:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8001040:	2300      	movs	r3, #0
 8001042:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	689b      	ldr	r3, [r3, #8]
 800104a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800104e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001052:	d113      	bne.n	800107c <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	681b      	ldr	r3, [r3, #0]
 8001058:	689b      	ldr	r3, [r3, #8]
 800105a:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800105e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001062:	d10b      	bne.n	800107c <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001068:	f043 0220 	orr.w	r2, r3, #32
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8001070:	687b      	ldr	r3, [r7, #4]
 8001072:	2200      	movs	r2, #0
 8001074:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8001078:	2301      	movs	r3, #1
 800107a:	e063      	b.n	8001144 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800107c:	f7ff fe80 	bl	8000d80 <HAL_GetTick>
 8001080:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001082:	e021      	b.n	80010c8 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8001084:	683b      	ldr	r3, [r7, #0]
 8001086:	f1b3 3fff 	cmp.w	r3, #4294967295
 800108a:	d01d      	beq.n	80010c8 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	2b00      	cmp	r3, #0
 8001090:	d007      	beq.n	80010a2 <HAL_ADC_PollForConversion+0x6c>
 8001092:	f7ff fe75 	bl	8000d80 <HAL_GetTick>
 8001096:	4602      	mov	r2, r0
 8001098:	68fb      	ldr	r3, [r7, #12]
 800109a:	1ad3      	subs	r3, r2, r3
 800109c:	683a      	ldr	r2, [r7, #0]
 800109e:	429a      	cmp	r2, r3
 80010a0:	d212      	bcs.n	80010c8 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010a2:	687b      	ldr	r3, [r7, #4]
 80010a4:	681b      	ldr	r3, [r3, #0]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	f003 0302 	and.w	r3, r3, #2
 80010ac:	2b02      	cmp	r3, #2
 80010ae:	d00b      	beq.n	80010c8 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b4:	f043 0204 	orr.w	r2, r3, #4
 80010b8:	687b      	ldr	r3, [r7, #4]
 80010ba:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	2200      	movs	r2, #0
 80010c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80010c4:	2303      	movs	r3, #3
 80010c6:	e03d      	b.n	8001144 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80010c8:	687b      	ldr	r3, [r7, #4]
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f003 0302 	and.w	r3, r3, #2
 80010d2:	2b02      	cmp	r3, #2
 80010d4:	d1d6      	bne.n	8001084 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f06f 0212 	mvn.w	r2, #18
 80010de:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010e4:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010ec:	687b      	ldr	r3, [r7, #4]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	689b      	ldr	r3, [r3, #8]
 80010f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d123      	bne.n	8001142 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80010fa:	687b      	ldr	r3, [r7, #4]
 80010fc:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80010fe:	2b00      	cmp	r3, #0
 8001100:	d11f      	bne.n	8001142 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001108:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800110c:	2b00      	cmp	r3, #0
 800110e:	d006      	beq.n	800111e <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001110:	687b      	ldr	r3, [r7, #4]
 8001112:	681b      	ldr	r3, [r3, #0]
 8001114:	689b      	ldr	r3, [r3, #8]
 8001116:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800111a:	2b00      	cmp	r3, #0
 800111c:	d111      	bne.n	8001142 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001122:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001132:	2b00      	cmp	r3, #0
 8001134:	d105      	bne.n	8001142 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800113a:	f043 0201 	orr.w	r2, r3, #1
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001142:	2300      	movs	r3, #0
}
 8001144:	4618      	mov	r0, r3
 8001146:	3710      	adds	r7, #16
 8001148:	46bd      	mov	sp, r7
 800114a:	bd80      	pop	{r7, pc}

0800114c <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800114c:	b480      	push	{r7}
 800114e:	b083      	sub	sp, #12
 8001150:	af00      	add	r7, sp, #0
 8001152:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800115a:	4618      	mov	r0, r3
 800115c:	370c      	adds	r7, #12
 800115e:	46bd      	mov	sp, r7
 8001160:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001164:	4770      	bx	lr
	...

08001168 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001168:	b480      	push	{r7}
 800116a:	b085      	sub	sp, #20
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
 8001170:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8001172:	2300      	movs	r3, #0
 8001174:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800117c:	2b01      	cmp	r3, #1
 800117e:	d101      	bne.n	8001184 <HAL_ADC_ConfigChannel+0x1c>
 8001180:	2302      	movs	r3, #2
 8001182:	e105      	b.n	8001390 <HAL_ADC_ConfigChannel+0x228>
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	2201      	movs	r2, #1
 8001188:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800118c:	683b      	ldr	r3, [r7, #0]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	2b09      	cmp	r3, #9
 8001192:	d925      	bls.n	80011e0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	68d9      	ldr	r1, [r3, #12]
 800119a:	683b      	ldr	r3, [r7, #0]
 800119c:	681b      	ldr	r3, [r3, #0]
 800119e:	b29b      	uxth	r3, r3
 80011a0:	461a      	mov	r2, r3
 80011a2:	4613      	mov	r3, r2
 80011a4:	005b      	lsls	r3, r3, #1
 80011a6:	4413      	add	r3, r2
 80011a8:	3b1e      	subs	r3, #30
 80011aa:	2207      	movs	r2, #7
 80011ac:	fa02 f303 	lsl.w	r3, r2, r3
 80011b0:	43da      	mvns	r2, r3
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	400a      	ands	r2, r1
 80011b8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	68d9      	ldr	r1, [r3, #12]
 80011c0:	683b      	ldr	r3, [r7, #0]
 80011c2:	689a      	ldr	r2, [r3, #8]
 80011c4:	683b      	ldr	r3, [r7, #0]
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	b29b      	uxth	r3, r3
 80011ca:	4618      	mov	r0, r3
 80011cc:	4603      	mov	r3, r0
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4403      	add	r3, r0
 80011d2:	3b1e      	subs	r3, #30
 80011d4:	409a      	lsls	r2, r3
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	430a      	orrs	r2, r1
 80011dc:	60da      	str	r2, [r3, #12]
 80011de:	e022      	b.n	8001226 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	6919      	ldr	r1, [r3, #16]
 80011e6:	683b      	ldr	r3, [r7, #0]
 80011e8:	681b      	ldr	r3, [r3, #0]
 80011ea:	b29b      	uxth	r3, r3
 80011ec:	461a      	mov	r2, r3
 80011ee:	4613      	mov	r3, r2
 80011f0:	005b      	lsls	r3, r3, #1
 80011f2:	4413      	add	r3, r2
 80011f4:	2207      	movs	r2, #7
 80011f6:	fa02 f303 	lsl.w	r3, r2, r3
 80011fa:	43da      	mvns	r2, r3
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	400a      	ands	r2, r1
 8001202:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	6919      	ldr	r1, [r3, #16]
 800120a:	683b      	ldr	r3, [r7, #0]
 800120c:	689a      	ldr	r2, [r3, #8]
 800120e:	683b      	ldr	r3, [r7, #0]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	b29b      	uxth	r3, r3
 8001214:	4618      	mov	r0, r3
 8001216:	4603      	mov	r3, r0
 8001218:	005b      	lsls	r3, r3, #1
 800121a:	4403      	add	r3, r0
 800121c:	409a      	lsls	r2, r3
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	430a      	orrs	r2, r1
 8001224:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001226:	683b      	ldr	r3, [r7, #0]
 8001228:	685b      	ldr	r3, [r3, #4]
 800122a:	2b06      	cmp	r3, #6
 800122c:	d824      	bhi.n	8001278 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	681b      	ldr	r3, [r3, #0]
 8001232:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	685a      	ldr	r2, [r3, #4]
 8001238:	4613      	mov	r3, r2
 800123a:	009b      	lsls	r3, r3, #2
 800123c:	4413      	add	r3, r2
 800123e:	3b05      	subs	r3, #5
 8001240:	221f      	movs	r2, #31
 8001242:	fa02 f303 	lsl.w	r3, r2, r3
 8001246:	43da      	mvns	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	400a      	ands	r2, r1
 800124e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	b29b      	uxth	r3, r3
 800125c:	4618      	mov	r0, r3
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	685a      	ldr	r2, [r3, #4]
 8001262:	4613      	mov	r3, r2
 8001264:	009b      	lsls	r3, r3, #2
 8001266:	4413      	add	r3, r2
 8001268:	3b05      	subs	r3, #5
 800126a:	fa00 f203 	lsl.w	r2, r0, r3
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	430a      	orrs	r2, r1
 8001274:	635a      	str	r2, [r3, #52]	; 0x34
 8001276:	e04c      	b.n	8001312 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	2b0c      	cmp	r3, #12
 800127e:	d824      	bhi.n	80012ca <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001286:	683b      	ldr	r3, [r7, #0]
 8001288:	685a      	ldr	r2, [r3, #4]
 800128a:	4613      	mov	r3, r2
 800128c:	009b      	lsls	r3, r3, #2
 800128e:	4413      	add	r3, r2
 8001290:	3b23      	subs	r3, #35	; 0x23
 8001292:	221f      	movs	r2, #31
 8001294:	fa02 f303 	lsl.w	r3, r2, r3
 8001298:	43da      	mvns	r2, r3
 800129a:	687b      	ldr	r3, [r7, #4]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	400a      	ands	r2, r1
 80012a0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80012a8:	683b      	ldr	r3, [r7, #0]
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	b29b      	uxth	r3, r3
 80012ae:	4618      	mov	r0, r3
 80012b0:	683b      	ldr	r3, [r7, #0]
 80012b2:	685a      	ldr	r2, [r3, #4]
 80012b4:	4613      	mov	r3, r2
 80012b6:	009b      	lsls	r3, r3, #2
 80012b8:	4413      	add	r3, r2
 80012ba:	3b23      	subs	r3, #35	; 0x23
 80012bc:	fa00 f203 	lsl.w	r2, r0, r3
 80012c0:	687b      	ldr	r3, [r7, #4]
 80012c2:	681b      	ldr	r3, [r3, #0]
 80012c4:	430a      	orrs	r2, r1
 80012c6:	631a      	str	r2, [r3, #48]	; 0x30
 80012c8:	e023      	b.n	8001312 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	681b      	ldr	r3, [r3, #0]
 80012ce:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012d0:	683b      	ldr	r3, [r7, #0]
 80012d2:	685a      	ldr	r2, [r3, #4]
 80012d4:	4613      	mov	r3, r2
 80012d6:	009b      	lsls	r3, r3, #2
 80012d8:	4413      	add	r3, r2
 80012da:	3b41      	subs	r3, #65	; 0x41
 80012dc:	221f      	movs	r2, #31
 80012de:	fa02 f303 	lsl.w	r3, r2, r3
 80012e2:	43da      	mvns	r2, r3
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	400a      	ands	r2, r1
 80012ea:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80012f2:	683b      	ldr	r3, [r7, #0]
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	b29b      	uxth	r3, r3
 80012f8:	4618      	mov	r0, r3
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	685a      	ldr	r2, [r3, #4]
 80012fe:	4613      	mov	r3, r2
 8001300:	009b      	lsls	r3, r3, #2
 8001302:	4413      	add	r3, r2
 8001304:	3b41      	subs	r3, #65	; 0x41
 8001306:	fa00 f203 	lsl.w	r2, r0, r3
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	430a      	orrs	r2, r1
 8001310:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001312:	4b22      	ldr	r3, [pc, #136]	; (800139c <HAL_ADC_ConfigChannel+0x234>)
 8001314:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001316:	687b      	ldr	r3, [r7, #4]
 8001318:	681b      	ldr	r3, [r3, #0]
 800131a:	4a21      	ldr	r2, [pc, #132]	; (80013a0 <HAL_ADC_ConfigChannel+0x238>)
 800131c:	4293      	cmp	r3, r2
 800131e:	d109      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x1cc>
 8001320:	683b      	ldr	r3, [r7, #0]
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	2b12      	cmp	r3, #18
 8001326:	d105      	bne.n	8001334 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001328:	68fb      	ldr	r3, [r7, #12]
 800132a:	685b      	ldr	r3, [r3, #4]
 800132c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	4a19      	ldr	r2, [pc, #100]	; (80013a0 <HAL_ADC_ConfigChannel+0x238>)
 800133a:	4293      	cmp	r3, r2
 800133c:	d123      	bne.n	8001386 <HAL_ADC_ConfigChannel+0x21e>
 800133e:	683b      	ldr	r3, [r7, #0]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	2b10      	cmp	r3, #16
 8001344:	d003      	beq.n	800134e <HAL_ADC_ConfigChannel+0x1e6>
 8001346:	683b      	ldr	r3, [r7, #0]
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	2b11      	cmp	r3, #17
 800134c:	d11b      	bne.n	8001386 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800134e:	68fb      	ldr	r3, [r7, #12]
 8001350:	685b      	ldr	r3, [r3, #4]
 8001352:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001356:	68fb      	ldr	r3, [r7, #12]
 8001358:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800135a:	683b      	ldr	r3, [r7, #0]
 800135c:	681b      	ldr	r3, [r3, #0]
 800135e:	2b10      	cmp	r3, #16
 8001360:	d111      	bne.n	8001386 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001362:	4b10      	ldr	r3, [pc, #64]	; (80013a4 <HAL_ADC_ConfigChannel+0x23c>)
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	4a10      	ldr	r2, [pc, #64]	; (80013a8 <HAL_ADC_ConfigChannel+0x240>)
 8001368:	fba2 2303 	umull	r2, r3, r2, r3
 800136c:	0c9a      	lsrs	r2, r3, #18
 800136e:	4613      	mov	r3, r2
 8001370:	009b      	lsls	r3, r3, #2
 8001372:	4413      	add	r3, r2
 8001374:	005b      	lsls	r3, r3, #1
 8001376:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001378:	e002      	b.n	8001380 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800137a:	68bb      	ldr	r3, [r7, #8]
 800137c:	3b01      	subs	r3, #1
 800137e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001380:	68bb      	ldr	r3, [r7, #8]
 8001382:	2b00      	cmp	r3, #0
 8001384:	d1f9      	bne.n	800137a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001386:	687b      	ldr	r3, [r7, #4]
 8001388:	2200      	movs	r2, #0
 800138a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
}
 8001390:	4618      	mov	r0, r3
 8001392:	3714      	adds	r7, #20
 8001394:	46bd      	mov	sp, r7
 8001396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800139a:	4770      	bx	lr
 800139c:	40012300 	.word	0x40012300
 80013a0:	40012000 	.word	0x40012000
 80013a4:	20000028 	.word	0x20000028
 80013a8:	431bde83 	.word	0x431bde83

080013ac <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80013ac:	b480      	push	{r7}
 80013ae:	b085      	sub	sp, #20
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80013b4:	4b79      	ldr	r3, [pc, #484]	; (800159c <ADC_Init+0x1f0>)
 80013b6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80013b8:	68fb      	ldr	r3, [r7, #12]
 80013ba:	685b      	ldr	r3, [r3, #4]
 80013bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80013c4:	68fb      	ldr	r3, [r7, #12]
 80013c6:	685a      	ldr	r2, [r3, #4]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	685b      	ldr	r3, [r3, #4]
 80013cc:	431a      	orrs	r2, r3
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	685a      	ldr	r2, [r3, #4]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80013e0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	6859      	ldr	r1, [r3, #4]
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	691b      	ldr	r3, [r3, #16]
 80013ec:	021a      	lsls	r2, r3, #8
 80013ee:	687b      	ldr	r3, [r7, #4]
 80013f0:	681b      	ldr	r3, [r3, #0]
 80013f2:	430a      	orrs	r2, r1
 80013f4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	685a      	ldr	r2, [r3, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001404:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	6859      	ldr	r1, [r3, #4]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	689a      	ldr	r2, [r3, #8]
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	430a      	orrs	r2, r1
 8001416:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	689a      	ldr	r2, [r3, #8]
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	681b      	ldr	r3, [r3, #0]
 8001422:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001426:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001428:	687b      	ldr	r3, [r7, #4]
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	6899      	ldr	r1, [r3, #8]
 800142e:	687b      	ldr	r3, [r7, #4]
 8001430:	68da      	ldr	r2, [r3, #12]
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	430a      	orrs	r2, r1
 8001438:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800143e:	4a58      	ldr	r2, [pc, #352]	; (80015a0 <ADC_Init+0x1f4>)
 8001440:	4293      	cmp	r3, r2
 8001442:	d022      	beq.n	800148a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	689a      	ldr	r2, [r3, #8]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001452:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6899      	ldr	r1, [r3, #8]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	430a      	orrs	r2, r1
 8001464:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	689a      	ldr	r2, [r3, #8]
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001474:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	6899      	ldr	r1, [r3, #8]
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	430a      	orrs	r2, r1
 8001486:	609a      	str	r2, [r3, #8]
 8001488:	e00f      	b.n	80014aa <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	689a      	ldr	r2, [r3, #8]
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001498:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	689a      	ldr	r2, [r3, #8]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80014a8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	689a      	ldr	r2, [r3, #8]
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	f022 0202 	bic.w	r2, r2, #2
 80014b8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6899      	ldr	r1, [r3, #8]
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	7e1b      	ldrb	r3, [r3, #24]
 80014c4:	005a      	lsls	r2, r3, #1
 80014c6:	687b      	ldr	r3, [r7, #4]
 80014c8:	681b      	ldr	r3, [r3, #0]
 80014ca:	430a      	orrs	r2, r1
 80014cc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80014d4:	2b00      	cmp	r3, #0
 80014d6:	d01b      	beq.n	8001510 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	685a      	ldr	r2, [r3, #4]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80014e6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80014e8:	687b      	ldr	r3, [r7, #4]
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	685a      	ldr	r2, [r3, #4]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	681b      	ldr	r3, [r3, #0]
 80014f2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80014f6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	681b      	ldr	r3, [r3, #0]
 80014fc:	6859      	ldr	r1, [r3, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001502:	3b01      	subs	r3, #1
 8001504:	035a      	lsls	r2, r3, #13
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	430a      	orrs	r2, r1
 800150c:	605a      	str	r2, [r3, #4]
 800150e:	e007      	b.n	8001520 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	685a      	ldr	r2, [r3, #4]
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800151e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001520:	687b      	ldr	r3, [r7, #4]
 8001522:	681b      	ldr	r3, [r3, #0]
 8001524:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	681b      	ldr	r3, [r3, #0]
 800152a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800152e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	681b      	ldr	r3, [r3, #0]
 8001534:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	69db      	ldr	r3, [r3, #28]
 800153a:	3b01      	subs	r3, #1
 800153c:	051a      	lsls	r2, r3, #20
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	430a      	orrs	r2, r1
 8001544:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	689a      	ldr	r2, [r3, #8]
 800154c:	687b      	ldr	r3, [r7, #4]
 800154e:	681b      	ldr	r3, [r3, #0]
 8001550:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001554:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6899      	ldr	r1, [r3, #8]
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001562:	025a      	lsls	r2, r3, #9
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	430a      	orrs	r2, r1
 800156a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	689a      	ldr	r2, [r3, #8]
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800157a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	6899      	ldr	r1, [r3, #8]
 8001582:	687b      	ldr	r3, [r7, #4]
 8001584:	695b      	ldr	r3, [r3, #20]
 8001586:	029a      	lsls	r2, r3, #10
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	681b      	ldr	r3, [r3, #0]
 800158c:	430a      	orrs	r2, r1
 800158e:	609a      	str	r2, [r3, #8]
}
 8001590:	bf00      	nop
 8001592:	3714      	adds	r7, #20
 8001594:	46bd      	mov	sp, r7
 8001596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800159a:	4770      	bx	lr
 800159c:	40012300 	.word	0x40012300
 80015a0:	0f000001 	.word	0x0f000001

080015a4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80015a4:	b480      	push	{r7}
 80015a6:	b085      	sub	sp, #20
 80015a8:	af00      	add	r7, sp, #0
 80015aa:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	f003 0307 	and.w	r3, r3, #7
 80015b2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80015b4:	4b0c      	ldr	r3, [pc, #48]	; (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015b6:	68db      	ldr	r3, [r3, #12]
 80015b8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80015ba:	68ba      	ldr	r2, [r7, #8]
 80015bc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80015c0:	4013      	ands	r3, r2
 80015c2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80015c4:	68fb      	ldr	r3, [r7, #12]
 80015c6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80015c8:	68bb      	ldr	r3, [r7, #8]
 80015ca:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80015cc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80015d0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80015d4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80015d6:	4a04      	ldr	r2, [pc, #16]	; (80015e8 <__NVIC_SetPriorityGrouping+0x44>)
 80015d8:	68bb      	ldr	r3, [r7, #8]
 80015da:	60d3      	str	r3, [r2, #12]
}
 80015dc:	bf00      	nop
 80015de:	3714      	adds	r7, #20
 80015e0:	46bd      	mov	sp, r7
 80015e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015e6:	4770      	bx	lr
 80015e8:	e000ed00 	.word	0xe000ed00

080015ec <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80015ec:	b480      	push	{r7}
 80015ee:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80015f0:	4b04      	ldr	r3, [pc, #16]	; (8001604 <__NVIC_GetPriorityGrouping+0x18>)
 80015f2:	68db      	ldr	r3, [r3, #12]
 80015f4:	0a1b      	lsrs	r3, r3, #8
 80015f6:	f003 0307 	and.w	r3, r3, #7
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	46bd      	mov	sp, r7
 80015fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001602:	4770      	bx	lr
 8001604:	e000ed00 	.word	0xe000ed00

08001608 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001608:	b480      	push	{r7}
 800160a:	b083      	sub	sp, #12
 800160c:	af00      	add	r7, sp, #0
 800160e:	4603      	mov	r3, r0
 8001610:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001612:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001616:	2b00      	cmp	r3, #0
 8001618:	db0b      	blt.n	8001632 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800161a:	79fb      	ldrb	r3, [r7, #7]
 800161c:	f003 021f 	and.w	r2, r3, #31
 8001620:	4907      	ldr	r1, [pc, #28]	; (8001640 <__NVIC_EnableIRQ+0x38>)
 8001622:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001626:	095b      	lsrs	r3, r3, #5
 8001628:	2001      	movs	r0, #1
 800162a:	fa00 f202 	lsl.w	r2, r0, r2
 800162e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001632:	bf00      	nop
 8001634:	370c      	adds	r7, #12
 8001636:	46bd      	mov	sp, r7
 8001638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163c:	4770      	bx	lr
 800163e:	bf00      	nop
 8001640:	e000e100 	.word	0xe000e100

08001644 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001644:	b480      	push	{r7}
 8001646:	b083      	sub	sp, #12
 8001648:	af00      	add	r7, sp, #0
 800164a:	4603      	mov	r3, r0
 800164c:	6039      	str	r1, [r7, #0]
 800164e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001650:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001654:	2b00      	cmp	r3, #0
 8001656:	db0a      	blt.n	800166e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001658:	683b      	ldr	r3, [r7, #0]
 800165a:	b2da      	uxtb	r2, r3
 800165c:	490c      	ldr	r1, [pc, #48]	; (8001690 <__NVIC_SetPriority+0x4c>)
 800165e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001662:	0112      	lsls	r2, r2, #4
 8001664:	b2d2      	uxtb	r2, r2
 8001666:	440b      	add	r3, r1
 8001668:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800166c:	e00a      	b.n	8001684 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800166e:	683b      	ldr	r3, [r7, #0]
 8001670:	b2da      	uxtb	r2, r3
 8001672:	4908      	ldr	r1, [pc, #32]	; (8001694 <__NVIC_SetPriority+0x50>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	f003 030f 	and.w	r3, r3, #15
 800167a:	3b04      	subs	r3, #4
 800167c:	0112      	lsls	r2, r2, #4
 800167e:	b2d2      	uxtb	r2, r2
 8001680:	440b      	add	r3, r1
 8001682:	761a      	strb	r2, [r3, #24]
}
 8001684:	bf00      	nop
 8001686:	370c      	adds	r7, #12
 8001688:	46bd      	mov	sp, r7
 800168a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800168e:	4770      	bx	lr
 8001690:	e000e100 	.word	0xe000e100
 8001694:	e000ed00 	.word	0xe000ed00

08001698 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001698:	b480      	push	{r7}
 800169a:	b089      	sub	sp, #36	; 0x24
 800169c:	af00      	add	r7, sp, #0
 800169e:	60f8      	str	r0, [r7, #12]
 80016a0:	60b9      	str	r1, [r7, #8]
 80016a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80016a4:	68fb      	ldr	r3, [r7, #12]
 80016a6:	f003 0307 	and.w	r3, r3, #7
 80016aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80016ac:	69fb      	ldr	r3, [r7, #28]
 80016ae:	f1c3 0307 	rsb	r3, r3, #7
 80016b2:	2b04      	cmp	r3, #4
 80016b4:	bf28      	it	cs
 80016b6:	2304      	movcs	r3, #4
 80016b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80016ba:	69fb      	ldr	r3, [r7, #28]
 80016bc:	3304      	adds	r3, #4
 80016be:	2b06      	cmp	r3, #6
 80016c0:	d902      	bls.n	80016c8 <NVIC_EncodePriority+0x30>
 80016c2:	69fb      	ldr	r3, [r7, #28]
 80016c4:	3b03      	subs	r3, #3
 80016c6:	e000      	b.n	80016ca <NVIC_EncodePriority+0x32>
 80016c8:	2300      	movs	r3, #0
 80016ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016cc:	f04f 32ff 	mov.w	r2, #4294967295
 80016d0:	69bb      	ldr	r3, [r7, #24]
 80016d2:	fa02 f303 	lsl.w	r3, r2, r3
 80016d6:	43da      	mvns	r2, r3
 80016d8:	68bb      	ldr	r3, [r7, #8]
 80016da:	401a      	ands	r2, r3
 80016dc:	697b      	ldr	r3, [r7, #20]
 80016de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80016e0:	f04f 31ff 	mov.w	r1, #4294967295
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	fa01 f303 	lsl.w	r3, r1, r3
 80016ea:	43d9      	mvns	r1, r3
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80016f0:	4313      	orrs	r3, r2
         );
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3724      	adds	r7, #36	; 0x24
 80016f6:	46bd      	mov	sp, r7
 80016f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016fc:	4770      	bx	lr
	...

08001700 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	3b01      	subs	r3, #1
 800170c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001710:	d301      	bcc.n	8001716 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001712:	2301      	movs	r3, #1
 8001714:	e00f      	b.n	8001736 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001716:	4a0a      	ldr	r2, [pc, #40]	; (8001740 <SysTick_Config+0x40>)
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	3b01      	subs	r3, #1
 800171c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800171e:	210f      	movs	r1, #15
 8001720:	f04f 30ff 	mov.w	r0, #4294967295
 8001724:	f7ff ff8e 	bl	8001644 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001728:	4b05      	ldr	r3, [pc, #20]	; (8001740 <SysTick_Config+0x40>)
 800172a:	2200      	movs	r2, #0
 800172c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800172e:	4b04      	ldr	r3, [pc, #16]	; (8001740 <SysTick_Config+0x40>)
 8001730:	2207      	movs	r2, #7
 8001732:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001734:	2300      	movs	r3, #0
}
 8001736:	4618      	mov	r0, r3
 8001738:	3708      	adds	r7, #8
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	e000e010 	.word	0xe000e010

08001744 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	b082      	sub	sp, #8
 8001748:	af00      	add	r7, sp, #0
 800174a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800174c:	6878      	ldr	r0, [r7, #4]
 800174e:	f7ff ff29 	bl	80015a4 <__NVIC_SetPriorityGrouping>
}
 8001752:	bf00      	nop
 8001754:	3708      	adds	r7, #8
 8001756:	46bd      	mov	sp, r7
 8001758:	bd80      	pop	{r7, pc}

0800175a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800175a:	b580      	push	{r7, lr}
 800175c:	b086      	sub	sp, #24
 800175e:	af00      	add	r7, sp, #0
 8001760:	4603      	mov	r3, r0
 8001762:	60b9      	str	r1, [r7, #8]
 8001764:	607a      	str	r2, [r7, #4]
 8001766:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001768:	2300      	movs	r3, #0
 800176a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800176c:	f7ff ff3e 	bl	80015ec <__NVIC_GetPriorityGrouping>
 8001770:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001772:	687a      	ldr	r2, [r7, #4]
 8001774:	68b9      	ldr	r1, [r7, #8]
 8001776:	6978      	ldr	r0, [r7, #20]
 8001778:	f7ff ff8e 	bl	8001698 <NVIC_EncodePriority>
 800177c:	4602      	mov	r2, r0
 800177e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001782:	4611      	mov	r1, r2
 8001784:	4618      	mov	r0, r3
 8001786:	f7ff ff5d 	bl	8001644 <__NVIC_SetPriority>
}
 800178a:	bf00      	nop
 800178c:	3718      	adds	r7, #24
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}

08001792 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001792:	b580      	push	{r7, lr}
 8001794:	b082      	sub	sp, #8
 8001796:	af00      	add	r7, sp, #0
 8001798:	4603      	mov	r3, r0
 800179a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800179c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a0:	4618      	mov	r0, r3
 80017a2:	f7ff ff31 	bl	8001608 <__NVIC_EnableIRQ>
}
 80017a6:	bf00      	nop
 80017a8:	3708      	adds	r7, #8
 80017aa:	46bd      	mov	sp, r7
 80017ac:	bd80      	pop	{r7, pc}

080017ae <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80017ae:	b580      	push	{r7, lr}
 80017b0:	b082      	sub	sp, #8
 80017b2:	af00      	add	r7, sp, #0
 80017b4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80017b6:	6878      	ldr	r0, [r7, #4]
 80017b8:	f7ff ffa2 	bl	8001700 <SysTick_Config>
 80017bc:	4603      	mov	r3, r0
}
 80017be:	4618      	mov	r0, r3
 80017c0:	3708      	adds	r7, #8
 80017c2:	46bd      	mov	sp, r7
 80017c4:	bd80      	pop	{r7, pc}
	...

080017c8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	b086      	sub	sp, #24
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80017d0:	2300      	movs	r3, #0
 80017d2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80017d4:	f7ff fad4 	bl	8000d80 <HAL_GetTick>
 80017d8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	2b00      	cmp	r3, #0
 80017de:	d101      	bne.n	80017e4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80017e0:	2301      	movs	r3, #1
 80017e2:	e099      	b.n	8001918 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	2202      	movs	r2, #2
 80017e8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	2200      	movs	r2, #0
 80017f0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	681a      	ldr	r2, [r3, #0]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	f022 0201 	bic.w	r2, r2, #1
 8001802:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001804:	e00f      	b.n	8001826 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001806:	f7ff fabb 	bl	8000d80 <HAL_GetTick>
 800180a:	4602      	mov	r2, r0
 800180c:	693b      	ldr	r3, [r7, #16]
 800180e:	1ad3      	subs	r3, r2, r3
 8001810:	2b05      	cmp	r3, #5
 8001812:	d908      	bls.n	8001826 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	2220      	movs	r2, #32
 8001818:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2203      	movs	r2, #3
 800181e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001822:	2303      	movs	r3, #3
 8001824:	e078      	b.n	8001918 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	681b      	ldr	r3, [r3, #0]
 800182c:	f003 0301 	and.w	r3, r3, #1
 8001830:	2b00      	cmp	r3, #0
 8001832:	d1e8      	bne.n	8001806 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	681b      	ldr	r3, [r3, #0]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 800183c:	697a      	ldr	r2, [r7, #20]
 800183e:	4b38      	ldr	r3, [pc, #224]	; (8001920 <HAL_DMA_Init+0x158>)
 8001840:	4013      	ands	r3, r2
 8001842:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	685a      	ldr	r2, [r3, #4]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001852:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	691b      	ldr	r3, [r3, #16]
 8001858:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800185e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	699b      	ldr	r3, [r3, #24]
 8001864:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001866:	687b      	ldr	r3, [r7, #4]
 8001868:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800186a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800186c:	687b      	ldr	r3, [r7, #4]
 800186e:	6a1b      	ldr	r3, [r3, #32]
 8001870:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001872:	697a      	ldr	r2, [r7, #20]
 8001874:	4313      	orrs	r3, r2
 8001876:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800187c:	2b04      	cmp	r3, #4
 800187e:	d107      	bne.n	8001890 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001888:	4313      	orrs	r3, r2
 800188a:	697a      	ldr	r2, [r7, #20]
 800188c:	4313      	orrs	r3, r2
 800188e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	697a      	ldr	r2, [r7, #20]
 8001896:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	695b      	ldr	r3, [r3, #20]
 800189e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80018a0:	697b      	ldr	r3, [r7, #20]
 80018a2:	f023 0307 	bic.w	r3, r3, #7
 80018a6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018ac:	697a      	ldr	r2, [r7, #20]
 80018ae:	4313      	orrs	r3, r2
 80018b0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80018b6:	2b04      	cmp	r3, #4
 80018b8:	d117      	bne.n	80018ea <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80018be:	697a      	ldr	r2, [r7, #20]
 80018c0:	4313      	orrs	r3, r2
 80018c2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80018c8:	2b00      	cmp	r3, #0
 80018ca:	d00e      	beq.n	80018ea <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f000 f9e9 	bl	8001ca4 <DMA_CheckFifoParam>
 80018d2:	4603      	mov	r3, r0
 80018d4:	2b00      	cmp	r3, #0
 80018d6:	d008      	beq.n	80018ea <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80018d8:	687b      	ldr	r3, [r7, #4]
 80018da:	2240      	movs	r2, #64	; 0x40
 80018dc:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	2201      	movs	r2, #1
 80018e2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 80018e6:	2301      	movs	r3, #1
 80018e8:	e016      	b.n	8001918 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	681b      	ldr	r3, [r3, #0]
 80018ee:	697a      	ldr	r2, [r7, #20]
 80018f0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f000 f9a0 	bl	8001c38 <DMA_CalcBaseAndBitshift>
 80018f8:	4603      	mov	r3, r0
 80018fa:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001900:	223f      	movs	r2, #63	; 0x3f
 8001902:	409a      	lsls	r2, r3
 8001904:	68fb      	ldr	r3, [r7, #12]
 8001906:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	2200      	movs	r2, #0
 800190c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	2201      	movs	r2, #1
 8001912:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001916:	2300      	movs	r3, #0
}
 8001918:	4618      	mov	r0, r3
 800191a:	3718      	adds	r7, #24
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}
 8001920:	f010803f 	.word	0xf010803f

08001924 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	b086      	sub	sp, #24
 8001928:	af00      	add	r7, sp, #0
 800192a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800192c:	2300      	movs	r3, #0
 800192e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001930:	4b8e      	ldr	r3, [pc, #568]	; (8001b6c <HAL_DMA_IRQHandler+0x248>)
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	4a8e      	ldr	r2, [pc, #568]	; (8001b70 <HAL_DMA_IRQHandler+0x24c>)
 8001936:	fba2 2303 	umull	r2, r3, r2, r3
 800193a:	0a9b      	lsrs	r3, r3, #10
 800193c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001942:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001944:	693b      	ldr	r3, [r7, #16]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800194e:	2208      	movs	r2, #8
 8001950:	409a      	lsls	r2, r3
 8001952:	68fb      	ldr	r3, [r7, #12]
 8001954:	4013      	ands	r3, r2
 8001956:	2b00      	cmp	r3, #0
 8001958:	d01a      	beq.n	8001990 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	681b      	ldr	r3, [r3, #0]
 8001960:	f003 0304 	and.w	r3, r3, #4
 8001964:	2b00      	cmp	r3, #0
 8001966:	d013      	beq.n	8001990 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681a      	ldr	r2, [r3, #0]
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	f022 0204 	bic.w	r2, r2, #4
 8001976:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197c:	2208      	movs	r2, #8
 800197e:	409a      	lsls	r2, r3
 8001980:	693b      	ldr	r3, [r7, #16]
 8001982:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001988:	f043 0201 	orr.w	r2, r3, #1
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001994:	2201      	movs	r2, #1
 8001996:	409a      	lsls	r2, r3
 8001998:	68fb      	ldr	r3, [r7, #12]
 800199a:	4013      	ands	r3, r2
 800199c:	2b00      	cmp	r3, #0
 800199e:	d012      	beq.n	80019c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	695b      	ldr	r3, [r3, #20]
 80019a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80019aa:	2b00      	cmp	r3, #0
 80019ac:	d00b      	beq.n	80019c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019b2:	2201      	movs	r2, #1
 80019b4:	409a      	lsls	r2, r3
 80019b6:	693b      	ldr	r3, [r7, #16]
 80019b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80019ba:	687b      	ldr	r3, [r7, #4]
 80019bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019be:	f043 0202 	orr.w	r2, r3, #2
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019ca:	2204      	movs	r2, #4
 80019cc:	409a      	lsls	r2, r3
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	4013      	ands	r3, r2
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d012      	beq.n	80019fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	681b      	ldr	r3, [r3, #0]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f003 0302 	and.w	r3, r3, #2
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d00b      	beq.n	80019fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019e8:	2204      	movs	r2, #4
 80019ea:	409a      	lsls	r2, r3
 80019ec:	693b      	ldr	r3, [r7, #16]
 80019ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80019f4:	f043 0204 	orr.w	r2, r3, #4
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a00:	2210      	movs	r2, #16
 8001a02:	409a      	lsls	r2, r3
 8001a04:	68fb      	ldr	r3, [r7, #12]
 8001a06:	4013      	ands	r3, r2
 8001a08:	2b00      	cmp	r3, #0
 8001a0a:	d043      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681b      	ldr	r3, [r3, #0]
 8001a12:	f003 0308 	and.w	r3, r3, #8
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	d03c      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a1e:	2210      	movs	r2, #16
 8001a20:	409a      	lsls	r2, r3
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	681b      	ldr	r3, [r3, #0]
 8001a2c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001a30:	2b00      	cmp	r3, #0
 8001a32:	d018      	beq.n	8001a66 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001a34:	687b      	ldr	r3, [r7, #4]
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	681b      	ldr	r3, [r3, #0]
 8001a3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d108      	bne.n	8001a54 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a46:	2b00      	cmp	r3, #0
 8001a48:	d024      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4e:	6878      	ldr	r0, [r7, #4]
 8001a50:	4798      	blx	r3
 8001a52:	e01f      	b.n	8001a94 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d01b      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	4798      	blx	r3
 8001a64:	e016      	b.n	8001a94 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001a70:	2b00      	cmp	r3, #0
 8001a72:	d107      	bne.n	8001a84 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	681a      	ldr	r2, [r3, #0]
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	f022 0208 	bic.w	r2, r2, #8
 8001a82:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d003      	beq.n	8001a94 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	6878      	ldr	r0, [r7, #4]
 8001a92:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001a94:	687b      	ldr	r3, [r7, #4]
 8001a96:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001a98:	2220      	movs	r2, #32
 8001a9a:	409a      	lsls	r2, r3
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	4013      	ands	r3, r2
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	f000 808f 	beq.w	8001bc4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	681b      	ldr	r3, [r3, #0]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	f003 0310 	and.w	r3, r3, #16
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	f000 8087 	beq.w	8001bc4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001aba:	2220      	movs	r2, #32
 8001abc:	409a      	lsls	r2, r3
 8001abe:	693b      	ldr	r3, [r7, #16]
 8001ac0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ac8:	b2db      	uxtb	r3, r3
 8001aca:	2b05      	cmp	r3, #5
 8001acc:	d136      	bne.n	8001b3c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	687b      	ldr	r3, [r7, #4]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f022 0216 	bic.w	r2, r2, #22
 8001adc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	695a      	ldr	r2, [r3, #20]
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	681b      	ldr	r3, [r3, #0]
 8001ae8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001aec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d103      	bne.n	8001afe <HAL_DMA_IRQHandler+0x1da>
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001afa:	2b00      	cmp	r3, #0
 8001afc:	d007      	beq.n	8001b0e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	681b      	ldr	r3, [r3, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	f022 0208 	bic.w	r2, r2, #8
 8001b0c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b12:	223f      	movs	r2, #63	; 0x3f
 8001b14:	409a      	lsls	r2, r3
 8001b16:	693b      	ldr	r3, [r7, #16]
 8001b18:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	2201      	movs	r2, #1
 8001b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b22:	687b      	ldr	r3, [r7, #4]
 8001b24:	2200      	movs	r2, #0
 8001b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d07e      	beq.n	8001c30 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	4798      	blx	r3
        }
        return;
 8001b3a:	e079      	b.n	8001c30 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d01d      	beq.n	8001b86 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001b54:	2b00      	cmp	r3, #0
 8001b56:	d10d      	bne.n	8001b74 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d031      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001b60:	687b      	ldr	r3, [r7, #4]
 8001b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b64:	6878      	ldr	r0, [r7, #4]
 8001b66:	4798      	blx	r3
 8001b68:	e02c      	b.n	8001bc4 <HAL_DMA_IRQHandler+0x2a0>
 8001b6a:	bf00      	nop
 8001b6c:	20000028 	.word	0x20000028
 8001b70:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d023      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001b80:	6878      	ldr	r0, [r7, #4]
 8001b82:	4798      	blx	r3
 8001b84:	e01e      	b.n	8001bc4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001b86:	687b      	ldr	r3, [r7, #4]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	681b      	ldr	r3, [r3, #0]
 8001b8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001b90:	2b00      	cmp	r3, #0
 8001b92:	d10f      	bne.n	8001bb4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	681a      	ldr	r2, [r3, #0]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f022 0210 	bic.w	r2, r2, #16
 8001ba2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	2200      	movs	r2, #0
 8001bb0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bb8:	2b00      	cmp	r3, #0
 8001bba:	d003      	beq.n	8001bc4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bc8:	2b00      	cmp	r3, #0
 8001bca:	d032      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d022      	beq.n	8001c1e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	2205      	movs	r2, #5
 8001bdc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001be0:	687b      	ldr	r3, [r7, #4]
 8001be2:	681b      	ldr	r3, [r3, #0]
 8001be4:	681a      	ldr	r2, [r3, #0]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	f022 0201 	bic.w	r2, r2, #1
 8001bee:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001bf0:	68bb      	ldr	r3, [r7, #8]
 8001bf2:	3301      	adds	r3, #1
 8001bf4:	60bb      	str	r3, [r7, #8]
 8001bf6:	697a      	ldr	r2, [r7, #20]
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d307      	bcc.n	8001c0c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	681b      	ldr	r3, [r3, #0]
 8001c02:	f003 0301 	and.w	r3, r3, #1
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d1f2      	bne.n	8001bf0 <HAL_DMA_IRQHandler+0x2cc>
 8001c0a:	e000      	b.n	8001c0e <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001c0c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2201      	movs	r2, #1
 8001c12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d005      	beq.n	8001c32 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001c2a:	6878      	ldr	r0, [r7, #4]
 8001c2c:	4798      	blx	r3
 8001c2e:	e000      	b.n	8001c32 <HAL_DMA_IRQHandler+0x30e>
        return;
 8001c30:	bf00      	nop
    }
  }
}
 8001c32:	3718      	adds	r7, #24
 8001c34:	46bd      	mov	sp, r7
 8001c36:	bd80      	pop	{r7, pc}

08001c38 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b085      	sub	sp, #20
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	b2db      	uxtb	r3, r3
 8001c46:	3b10      	subs	r3, #16
 8001c48:	4a14      	ldr	r2, [pc, #80]	; (8001c9c <DMA_CalcBaseAndBitshift+0x64>)
 8001c4a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c4e:	091b      	lsrs	r3, r3, #4
 8001c50:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8001c52:	4a13      	ldr	r2, [pc, #76]	; (8001ca0 <DMA_CalcBaseAndBitshift+0x68>)
 8001c54:	68fb      	ldr	r3, [r7, #12]
 8001c56:	4413      	add	r3, r2
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	2b03      	cmp	r3, #3
 8001c64:	d909      	bls.n	8001c7a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c6e:	f023 0303 	bic.w	r3, r3, #3
 8001c72:	1d1a      	adds	r2, r3, #4
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	659a      	str	r2, [r3, #88]	; 0x58
 8001c78:	e007      	b.n	8001c8a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8001c82:	f023 0303 	bic.w	r3, r3, #3
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3714      	adds	r7, #20
 8001c92:	46bd      	mov	sp, r7
 8001c94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c98:	4770      	bx	lr
 8001c9a:	bf00      	nop
 8001c9c:	aaaaaaab 	.word	0xaaaaaaab
 8001ca0:	08007a20 	.word	0x08007a20

08001ca4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	b085      	sub	sp, #20
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001cac:	2300      	movs	r3, #0
 8001cae:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cb4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	699b      	ldr	r3, [r3, #24]
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d11f      	bne.n	8001cfe <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b03      	cmp	r3, #3
 8001cc2:	d856      	bhi.n	8001d72 <DMA_CheckFifoParam+0xce>
 8001cc4:	a201      	add	r2, pc, #4	; (adr r2, 8001ccc <DMA_CheckFifoParam+0x28>)
 8001cc6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001cca:	bf00      	nop
 8001ccc:	08001cdd 	.word	0x08001cdd
 8001cd0:	08001cef 	.word	0x08001cef
 8001cd4:	08001cdd 	.word	0x08001cdd
 8001cd8:	08001d73 	.word	0x08001d73
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ce0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001ce4:	2b00      	cmp	r3, #0
 8001ce6:	d046      	beq.n	8001d76 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8001ce8:	2301      	movs	r3, #1
 8001cea:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cec:	e043      	b.n	8001d76 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001cf2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001cf6:	d140      	bne.n	8001d7a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8001cf8:	2301      	movs	r3, #1
 8001cfa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001cfc:	e03d      	b.n	8001d7a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	699b      	ldr	r3, [r3, #24]
 8001d02:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8001d06:	d121      	bne.n	8001d4c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8001d08:	68bb      	ldr	r3, [r7, #8]
 8001d0a:	2b03      	cmp	r3, #3
 8001d0c:	d837      	bhi.n	8001d7e <DMA_CheckFifoParam+0xda>
 8001d0e:	a201      	add	r2, pc, #4	; (adr r2, 8001d14 <DMA_CheckFifoParam+0x70>)
 8001d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d14:	08001d25 	.word	0x08001d25
 8001d18:	08001d2b 	.word	0x08001d2b
 8001d1c:	08001d25 	.word	0x08001d25
 8001d20:	08001d3d 	.word	0x08001d3d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8001d24:	2301      	movs	r3, #1
 8001d26:	73fb      	strb	r3, [r7, #15]
      break;
 8001d28:	e030      	b.n	8001d8c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d2e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d025      	beq.n	8001d82 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8001d36:	2301      	movs	r3, #1
 8001d38:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8001d3a:	e022      	b.n	8001d82 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d40:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8001d44:	d11f      	bne.n	8001d86 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8001d46:	2301      	movs	r3, #1
 8001d48:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8001d4a:	e01c      	b.n	8001d86 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	2b02      	cmp	r3, #2
 8001d50:	d903      	bls.n	8001d5a <DMA_CheckFifoParam+0xb6>
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	2b03      	cmp	r3, #3
 8001d56:	d003      	beq.n	8001d60 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8001d58:	e018      	b.n	8001d8c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8001d5a:	2301      	movs	r3, #1
 8001d5c:	73fb      	strb	r3, [r7, #15]
      break;
 8001d5e:	e015      	b.n	8001d8c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001d64:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	d00e      	beq.n	8001d8a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	73fb      	strb	r3, [r7, #15]
      break;
 8001d70:	e00b      	b.n	8001d8a <DMA_CheckFifoParam+0xe6>
      break;
 8001d72:	bf00      	nop
 8001d74:	e00a      	b.n	8001d8c <DMA_CheckFifoParam+0xe8>
      break;
 8001d76:	bf00      	nop
 8001d78:	e008      	b.n	8001d8c <DMA_CheckFifoParam+0xe8>
      break;
 8001d7a:	bf00      	nop
 8001d7c:	e006      	b.n	8001d8c <DMA_CheckFifoParam+0xe8>
      break;
 8001d7e:	bf00      	nop
 8001d80:	e004      	b.n	8001d8c <DMA_CheckFifoParam+0xe8>
      break;
 8001d82:	bf00      	nop
 8001d84:	e002      	b.n	8001d8c <DMA_CheckFifoParam+0xe8>
      break;   
 8001d86:	bf00      	nop
 8001d88:	e000      	b.n	8001d8c <DMA_CheckFifoParam+0xe8>
      break;
 8001d8a:	bf00      	nop
    }
  } 
  
  return status; 
 8001d8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8001d8e:	4618      	mov	r0, r3
 8001d90:	3714      	adds	r7, #20
 8001d92:	46bd      	mov	sp, r7
 8001d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d98:	4770      	bx	lr
 8001d9a:	bf00      	nop

08001d9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b089      	sub	sp, #36	; 0x24
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	6078      	str	r0, [r7, #4]
 8001da4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001da6:	2300      	movs	r3, #0
 8001da8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001daa:	2300      	movs	r3, #0
 8001dac:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001dae:	2300      	movs	r3, #0
 8001db0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001db2:	2300      	movs	r3, #0
 8001db4:	61fb      	str	r3, [r7, #28]
 8001db6:	e159      	b.n	800206c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001db8:	2201      	movs	r2, #1
 8001dba:	69fb      	ldr	r3, [r7, #28]
 8001dbc:	fa02 f303 	lsl.w	r3, r2, r3
 8001dc0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001dc2:	683b      	ldr	r3, [r7, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	697a      	ldr	r2, [r7, #20]
 8001dc8:	4013      	ands	r3, r2
 8001dca:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001dcc:	693a      	ldr	r2, [r7, #16]
 8001dce:	697b      	ldr	r3, [r7, #20]
 8001dd0:	429a      	cmp	r2, r3
 8001dd2:	f040 8148 	bne.w	8002066 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f003 0303 	and.w	r3, r3, #3
 8001dde:	2b01      	cmp	r3, #1
 8001de0:	d005      	beq.n	8001dee <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001dea:	2b02      	cmp	r3, #2
 8001dec:	d130      	bne.n	8001e50 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	689b      	ldr	r3, [r3, #8]
 8001df2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	005b      	lsls	r3, r3, #1
 8001df8:	2203      	movs	r2, #3
 8001dfa:	fa02 f303 	lsl.w	r3, r2, r3
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	68da      	ldr	r2, [r3, #12]
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	005b      	lsls	r3, r3, #1
 8001e0e:	fa02 f303 	lsl.w	r3, r2, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4313      	orrs	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	69ba      	ldr	r2, [r7, #24]
 8001e1c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001e24:	2201      	movs	r2, #1
 8001e26:	69fb      	ldr	r3, [r7, #28]
 8001e28:	fa02 f303 	lsl.w	r3, r2, r3
 8001e2c:	43db      	mvns	r3, r3
 8001e2e:	69ba      	ldr	r2, [r7, #24]
 8001e30:	4013      	ands	r3, r2
 8001e32:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001e34:	683b      	ldr	r3, [r7, #0]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	091b      	lsrs	r3, r3, #4
 8001e3a:	f003 0201 	and.w	r2, r3, #1
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	fa02 f303 	lsl.w	r3, r2, r3
 8001e44:	69ba      	ldr	r2, [r7, #24]
 8001e46:	4313      	orrs	r3, r2
 8001e48:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	69ba      	ldr	r2, [r7, #24]
 8001e4e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	685b      	ldr	r3, [r3, #4]
 8001e54:	f003 0303 	and.w	r3, r3, #3
 8001e58:	2b03      	cmp	r3, #3
 8001e5a:	d017      	beq.n	8001e8c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	005b      	lsls	r3, r3, #1
 8001e66:	2203      	movs	r2, #3
 8001e68:	fa02 f303 	lsl.w	r3, r2, r3
 8001e6c:	43db      	mvns	r3, r3
 8001e6e:	69ba      	ldr	r2, [r7, #24]
 8001e70:	4013      	ands	r3, r2
 8001e72:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	689a      	ldr	r2, [r3, #8]
 8001e78:	69fb      	ldr	r3, [r7, #28]
 8001e7a:	005b      	lsls	r3, r3, #1
 8001e7c:	fa02 f303 	lsl.w	r3, r2, r3
 8001e80:	69ba      	ldr	r2, [r7, #24]
 8001e82:	4313      	orrs	r3, r2
 8001e84:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	69ba      	ldr	r2, [r7, #24]
 8001e8a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	685b      	ldr	r3, [r3, #4]
 8001e90:	f003 0303 	and.w	r3, r3, #3
 8001e94:	2b02      	cmp	r3, #2
 8001e96:	d123      	bne.n	8001ee0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001e98:	69fb      	ldr	r3, [r7, #28]
 8001e9a:	08da      	lsrs	r2, r3, #3
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3208      	adds	r2, #8
 8001ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001ea6:	69fb      	ldr	r3, [r7, #28]
 8001ea8:	f003 0307 	and.w	r3, r3, #7
 8001eac:	009b      	lsls	r3, r3, #2
 8001eae:	220f      	movs	r2, #15
 8001eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001eb4:	43db      	mvns	r3, r3
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4013      	ands	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	691a      	ldr	r2, [r3, #16]
 8001ec0:	69fb      	ldr	r3, [r7, #28]
 8001ec2:	f003 0307 	and.w	r3, r3, #7
 8001ec6:	009b      	lsls	r3, r3, #2
 8001ec8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ecc:	69ba      	ldr	r2, [r7, #24]
 8001ece:	4313      	orrs	r3, r2
 8001ed0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001ed2:	69fb      	ldr	r3, [r7, #28]
 8001ed4:	08da      	lsrs	r2, r3, #3
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	3208      	adds	r2, #8
 8001eda:	69b9      	ldr	r1, [r7, #24]
 8001edc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001ee0:	687b      	ldr	r3, [r7, #4]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001ee6:	69fb      	ldr	r3, [r7, #28]
 8001ee8:	005b      	lsls	r3, r3, #1
 8001eea:	2203      	movs	r2, #3
 8001eec:	fa02 f303 	lsl.w	r3, r2, r3
 8001ef0:	43db      	mvns	r3, r3
 8001ef2:	69ba      	ldr	r2, [r7, #24]
 8001ef4:	4013      	ands	r3, r2
 8001ef6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	685b      	ldr	r3, [r3, #4]
 8001efc:	f003 0203 	and.w	r2, r3, #3
 8001f00:	69fb      	ldr	r3, [r7, #28]
 8001f02:	005b      	lsls	r3, r3, #1
 8001f04:	fa02 f303 	lsl.w	r3, r2, r3
 8001f08:	69ba      	ldr	r2, [r7, #24]
 8001f0a:	4313      	orrs	r3, r2
 8001f0c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	69ba      	ldr	r2, [r7, #24]
 8001f12:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001f14:	683b      	ldr	r3, [r7, #0]
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	f000 80a2 	beq.w	8002066 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	60fb      	str	r3, [r7, #12]
 8001f26:	4b57      	ldr	r3, [pc, #348]	; (8002084 <HAL_GPIO_Init+0x2e8>)
 8001f28:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f2a:	4a56      	ldr	r2, [pc, #344]	; (8002084 <HAL_GPIO_Init+0x2e8>)
 8001f2c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001f30:	6453      	str	r3, [r2, #68]	; 0x44
 8001f32:	4b54      	ldr	r3, [pc, #336]	; (8002084 <HAL_GPIO_Init+0x2e8>)
 8001f34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f36:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001f3a:	60fb      	str	r3, [r7, #12]
 8001f3c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001f3e:	4a52      	ldr	r2, [pc, #328]	; (8002088 <HAL_GPIO_Init+0x2ec>)
 8001f40:	69fb      	ldr	r3, [r7, #28]
 8001f42:	089b      	lsrs	r3, r3, #2
 8001f44:	3302      	adds	r3, #2
 8001f46:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001f4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001f4c:	69fb      	ldr	r3, [r7, #28]
 8001f4e:	f003 0303 	and.w	r3, r3, #3
 8001f52:	009b      	lsls	r3, r3, #2
 8001f54:	220f      	movs	r2, #15
 8001f56:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5a:	43db      	mvns	r3, r3
 8001f5c:	69ba      	ldr	r2, [r7, #24]
 8001f5e:	4013      	ands	r3, r2
 8001f60:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	4a49      	ldr	r2, [pc, #292]	; (800208c <HAL_GPIO_Init+0x2f0>)
 8001f66:	4293      	cmp	r3, r2
 8001f68:	d019      	beq.n	8001f9e <HAL_GPIO_Init+0x202>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	4a48      	ldr	r2, [pc, #288]	; (8002090 <HAL_GPIO_Init+0x2f4>)
 8001f6e:	4293      	cmp	r3, r2
 8001f70:	d013      	beq.n	8001f9a <HAL_GPIO_Init+0x1fe>
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	4a47      	ldr	r2, [pc, #284]	; (8002094 <HAL_GPIO_Init+0x2f8>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d00d      	beq.n	8001f96 <HAL_GPIO_Init+0x1fa>
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	4a46      	ldr	r2, [pc, #280]	; (8002098 <HAL_GPIO_Init+0x2fc>)
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d007      	beq.n	8001f92 <HAL_GPIO_Init+0x1f6>
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	4a45      	ldr	r2, [pc, #276]	; (800209c <HAL_GPIO_Init+0x300>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d101      	bne.n	8001f8e <HAL_GPIO_Init+0x1f2>
 8001f8a:	2304      	movs	r3, #4
 8001f8c:	e008      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f8e:	2307      	movs	r3, #7
 8001f90:	e006      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f92:	2303      	movs	r3, #3
 8001f94:	e004      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f96:	2302      	movs	r3, #2
 8001f98:	e002      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e000      	b.n	8001fa0 <HAL_GPIO_Init+0x204>
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	69fa      	ldr	r2, [r7, #28]
 8001fa2:	f002 0203 	and.w	r2, r2, #3
 8001fa6:	0092      	lsls	r2, r2, #2
 8001fa8:	4093      	lsls	r3, r2
 8001faa:	69ba      	ldr	r2, [r7, #24]
 8001fac:	4313      	orrs	r3, r2
 8001fae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001fb0:	4935      	ldr	r1, [pc, #212]	; (8002088 <HAL_GPIO_Init+0x2ec>)
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	089b      	lsrs	r3, r3, #2
 8001fb6:	3302      	adds	r3, #2
 8001fb8:	69ba      	ldr	r2, [r7, #24]
 8001fba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001fbe:	4b38      	ldr	r3, [pc, #224]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8001fc0:	689b      	ldr	r3, [r3, #8]
 8001fc2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fc4:	693b      	ldr	r3, [r7, #16]
 8001fc6:	43db      	mvns	r3, r3
 8001fc8:	69ba      	ldr	r2, [r7, #24]
 8001fca:	4013      	ands	r3, r2
 8001fcc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001fce:	683b      	ldr	r3, [r7, #0]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d003      	beq.n	8001fe2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001fda:	69ba      	ldr	r2, [r7, #24]
 8001fdc:	693b      	ldr	r3, [r7, #16]
 8001fde:	4313      	orrs	r3, r2
 8001fe0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001fe2:	4a2f      	ldr	r2, [pc, #188]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001fe8:	4b2d      	ldr	r3, [pc, #180]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8001fea:	68db      	ldr	r3, [r3, #12]
 8001fec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	43db      	mvns	r3, r3
 8001ff2:	69ba      	ldr	r2, [r7, #24]
 8001ff4:	4013      	ands	r3, r2
 8001ff6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001ff8:	683b      	ldr	r3, [r7, #0]
 8001ffa:	685b      	ldr	r3, [r3, #4]
 8001ffc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002000:	2b00      	cmp	r3, #0
 8002002:	d003      	beq.n	800200c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002004:	69ba      	ldr	r2, [r7, #24]
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	4313      	orrs	r3, r2
 800200a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800200c:	4a24      	ldr	r2, [pc, #144]	; (80020a0 <HAL_GPIO_Init+0x304>)
 800200e:	69bb      	ldr	r3, [r7, #24]
 8002010:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002012:	4b23      	ldr	r3, [pc, #140]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8002014:	685b      	ldr	r3, [r3, #4]
 8002016:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002018:	693b      	ldr	r3, [r7, #16]
 800201a:	43db      	mvns	r3, r3
 800201c:	69ba      	ldr	r2, [r7, #24]
 800201e:	4013      	ands	r3, r2
 8002020:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002022:	683b      	ldr	r3, [r7, #0]
 8002024:	685b      	ldr	r3, [r3, #4]
 8002026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800202a:	2b00      	cmp	r3, #0
 800202c:	d003      	beq.n	8002036 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800202e:	69ba      	ldr	r2, [r7, #24]
 8002030:	693b      	ldr	r3, [r7, #16]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002036:	4a1a      	ldr	r2, [pc, #104]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8002038:	69bb      	ldr	r3, [r7, #24]
 800203a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800203c:	4b18      	ldr	r3, [pc, #96]	; (80020a0 <HAL_GPIO_Init+0x304>)
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002042:	693b      	ldr	r3, [r7, #16]
 8002044:	43db      	mvns	r3, r3
 8002046:	69ba      	ldr	r2, [r7, #24]
 8002048:	4013      	ands	r3, r2
 800204a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800204c:	683b      	ldr	r3, [r7, #0]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002054:	2b00      	cmp	r3, #0
 8002056:	d003      	beq.n	8002060 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002058:	69ba      	ldr	r2, [r7, #24]
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4313      	orrs	r3, r2
 800205e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002060:	4a0f      	ldr	r2, [pc, #60]	; (80020a0 <HAL_GPIO_Init+0x304>)
 8002062:	69bb      	ldr	r3, [r7, #24]
 8002064:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002066:	69fb      	ldr	r3, [r7, #28]
 8002068:	3301      	adds	r3, #1
 800206a:	61fb      	str	r3, [r7, #28]
 800206c:	69fb      	ldr	r3, [r7, #28]
 800206e:	2b0f      	cmp	r3, #15
 8002070:	f67f aea2 	bls.w	8001db8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002074:	bf00      	nop
 8002076:	bf00      	nop
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002080:	4770      	bx	lr
 8002082:	bf00      	nop
 8002084:	40023800 	.word	0x40023800
 8002088:	40013800 	.word	0x40013800
 800208c:	40020000 	.word	0x40020000
 8002090:	40020400 	.word	0x40020400
 8002094:	40020800 	.word	0x40020800
 8002098:	40020c00 	.word	0x40020c00
 800209c:	40021000 	.word	0x40021000
 80020a0:	40013c00 	.word	0x40013c00

080020a4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80020a4:	b480      	push	{r7}
 80020a6:	b083      	sub	sp, #12
 80020a8:	af00      	add	r7, sp, #0
 80020aa:	6078      	str	r0, [r7, #4]
 80020ac:	460b      	mov	r3, r1
 80020ae:	807b      	strh	r3, [r7, #2]
 80020b0:	4613      	mov	r3, r2
 80020b2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80020b4:	787b      	ldrb	r3, [r7, #1]
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d003      	beq.n	80020c2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80020ba:	887a      	ldrh	r2, [r7, #2]
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80020c0:	e003      	b.n	80020ca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80020c2:	887b      	ldrh	r3, [r7, #2]
 80020c4:	041a      	lsls	r2, r3, #16
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	619a      	str	r2, [r3, #24]
}
 80020ca:	bf00      	nop
 80020cc:	370c      	adds	r7, #12
 80020ce:	46bd      	mov	sp, r7
 80020d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d4:	4770      	bx	lr

080020d6 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80020d6:	b5f0      	push	{r4, r5, r6, r7, lr}
 80020d8:	b08f      	sub	sp, #60	; 0x3c
 80020da:	af0a      	add	r7, sp, #40	; 0x28
 80020dc:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	2b00      	cmp	r3, #0
 80020e2:	d101      	bne.n	80020e8 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80020e4:	2301      	movs	r3, #1
 80020e6:	e10f      	b.n	8002308 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80020f4:	b2db      	uxtb	r3, r3
 80020f6:	2b00      	cmp	r3, #0
 80020f8:	d106      	bne.n	8002108 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	2200      	movs	r2, #0
 80020fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002102:	6878      	ldr	r0, [r7, #4]
 8002104:	f005 f930 	bl	8007368 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002108:	687b      	ldr	r3, [r7, #4]
 800210a:	2203      	movs	r2, #3
 800210c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002110:	68bb      	ldr	r3, [r7, #8]
 8002112:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002118:	2b00      	cmp	r3, #0
 800211a:	d102      	bne.n	8002122 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	2200      	movs	r2, #0
 8002120:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f001 ff7f 	bl	800402a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	603b      	str	r3, [r7, #0]
 8002132:	687e      	ldr	r6, [r7, #4]
 8002134:	466d      	mov	r5, sp
 8002136:	f106 0410 	add.w	r4, r6, #16
 800213a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800213c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800213e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002140:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002142:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002146:	e885 0003 	stmia.w	r5, {r0, r1}
 800214a:	1d33      	adds	r3, r6, #4
 800214c:	cb0e      	ldmia	r3, {r1, r2, r3}
 800214e:	6838      	ldr	r0, [r7, #0]
 8002150:	f001 fe56 	bl	8003e00 <USB_CoreInit>
 8002154:	4603      	mov	r3, r0
 8002156:	2b00      	cmp	r3, #0
 8002158:	d005      	beq.n	8002166 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800215a:	687b      	ldr	r3, [r7, #4]
 800215c:	2202      	movs	r2, #2
 800215e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002162:	2301      	movs	r3, #1
 8002164:	e0d0      	b.n	8002308 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	2100      	movs	r1, #0
 800216c:	4618      	mov	r0, r3
 800216e:	f001 ff6d 	bl	800404c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002172:	2300      	movs	r3, #0
 8002174:	73fb      	strb	r3, [r7, #15]
 8002176:	e04a      	b.n	800220e <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002178:	7bfa      	ldrb	r2, [r7, #15]
 800217a:	6879      	ldr	r1, [r7, #4]
 800217c:	4613      	mov	r3, r2
 800217e:	00db      	lsls	r3, r3, #3
 8002180:	4413      	add	r3, r2
 8002182:	009b      	lsls	r3, r3, #2
 8002184:	440b      	add	r3, r1
 8002186:	333d      	adds	r3, #61	; 0x3d
 8002188:	2201      	movs	r2, #1
 800218a:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800218c:	7bfa      	ldrb	r2, [r7, #15]
 800218e:	6879      	ldr	r1, [r7, #4]
 8002190:	4613      	mov	r3, r2
 8002192:	00db      	lsls	r3, r3, #3
 8002194:	4413      	add	r3, r2
 8002196:	009b      	lsls	r3, r3, #2
 8002198:	440b      	add	r3, r1
 800219a:	333c      	adds	r3, #60	; 0x3c
 800219c:	7bfa      	ldrb	r2, [r7, #15]
 800219e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80021a0:	7bfa      	ldrb	r2, [r7, #15]
 80021a2:	7bfb      	ldrb	r3, [r7, #15]
 80021a4:	b298      	uxth	r0, r3
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	4613      	mov	r3, r2
 80021aa:	00db      	lsls	r3, r3, #3
 80021ac:	4413      	add	r3, r2
 80021ae:	009b      	lsls	r3, r3, #2
 80021b0:	440b      	add	r3, r1
 80021b2:	3344      	adds	r3, #68	; 0x44
 80021b4:	4602      	mov	r2, r0
 80021b6:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80021b8:	7bfa      	ldrb	r2, [r7, #15]
 80021ba:	6879      	ldr	r1, [r7, #4]
 80021bc:	4613      	mov	r3, r2
 80021be:	00db      	lsls	r3, r3, #3
 80021c0:	4413      	add	r3, r2
 80021c2:	009b      	lsls	r3, r3, #2
 80021c4:	440b      	add	r3, r1
 80021c6:	3340      	adds	r3, #64	; 0x40
 80021c8:	2200      	movs	r2, #0
 80021ca:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80021cc:	7bfa      	ldrb	r2, [r7, #15]
 80021ce:	6879      	ldr	r1, [r7, #4]
 80021d0:	4613      	mov	r3, r2
 80021d2:	00db      	lsls	r3, r3, #3
 80021d4:	4413      	add	r3, r2
 80021d6:	009b      	lsls	r3, r3, #2
 80021d8:	440b      	add	r3, r1
 80021da:	3348      	adds	r3, #72	; 0x48
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80021e0:	7bfa      	ldrb	r2, [r7, #15]
 80021e2:	6879      	ldr	r1, [r7, #4]
 80021e4:	4613      	mov	r3, r2
 80021e6:	00db      	lsls	r3, r3, #3
 80021e8:	4413      	add	r3, r2
 80021ea:	009b      	lsls	r3, r3, #2
 80021ec:	440b      	add	r3, r1
 80021ee:	334c      	adds	r3, #76	; 0x4c
 80021f0:	2200      	movs	r2, #0
 80021f2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80021f4:	7bfa      	ldrb	r2, [r7, #15]
 80021f6:	6879      	ldr	r1, [r7, #4]
 80021f8:	4613      	mov	r3, r2
 80021fa:	00db      	lsls	r3, r3, #3
 80021fc:	4413      	add	r3, r2
 80021fe:	009b      	lsls	r3, r3, #2
 8002200:	440b      	add	r3, r1
 8002202:	3354      	adds	r3, #84	; 0x54
 8002204:	2200      	movs	r2, #0
 8002206:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002208:	7bfb      	ldrb	r3, [r7, #15]
 800220a:	3301      	adds	r3, #1
 800220c:	73fb      	strb	r3, [r7, #15]
 800220e:	7bfa      	ldrb	r2, [r7, #15]
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	685b      	ldr	r3, [r3, #4]
 8002214:	429a      	cmp	r2, r3
 8002216:	d3af      	bcc.n	8002178 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002218:	2300      	movs	r3, #0
 800221a:	73fb      	strb	r3, [r7, #15]
 800221c:	e044      	b.n	80022a8 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800221e:	7bfa      	ldrb	r2, [r7, #15]
 8002220:	6879      	ldr	r1, [r7, #4]
 8002222:	4613      	mov	r3, r2
 8002224:	00db      	lsls	r3, r3, #3
 8002226:	4413      	add	r3, r2
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	440b      	add	r3, r1
 800222c:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8002230:	2200      	movs	r2, #0
 8002232:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002234:	7bfa      	ldrb	r2, [r7, #15]
 8002236:	6879      	ldr	r1, [r7, #4]
 8002238:	4613      	mov	r3, r2
 800223a:	00db      	lsls	r3, r3, #3
 800223c:	4413      	add	r3, r2
 800223e:	009b      	lsls	r3, r3, #2
 8002240:	440b      	add	r3, r1
 8002242:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002246:	7bfa      	ldrb	r2, [r7, #15]
 8002248:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800224a:	7bfa      	ldrb	r2, [r7, #15]
 800224c:	6879      	ldr	r1, [r7, #4]
 800224e:	4613      	mov	r3, r2
 8002250:	00db      	lsls	r3, r3, #3
 8002252:	4413      	add	r3, r2
 8002254:	009b      	lsls	r3, r3, #2
 8002256:	440b      	add	r3, r1
 8002258:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800225c:	2200      	movs	r2, #0
 800225e:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002260:	7bfa      	ldrb	r2, [r7, #15]
 8002262:	6879      	ldr	r1, [r7, #4]
 8002264:	4613      	mov	r3, r2
 8002266:	00db      	lsls	r3, r3, #3
 8002268:	4413      	add	r3, r2
 800226a:	009b      	lsls	r3, r3, #2
 800226c:	440b      	add	r3, r1
 800226e:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8002272:	2200      	movs	r2, #0
 8002274:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002276:	7bfa      	ldrb	r2, [r7, #15]
 8002278:	6879      	ldr	r1, [r7, #4]
 800227a:	4613      	mov	r3, r2
 800227c:	00db      	lsls	r3, r3, #3
 800227e:	4413      	add	r3, r2
 8002280:	009b      	lsls	r3, r3, #2
 8002282:	440b      	add	r3, r1
 8002284:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800228c:	7bfa      	ldrb	r2, [r7, #15]
 800228e:	6879      	ldr	r1, [r7, #4]
 8002290:	4613      	mov	r3, r2
 8002292:	00db      	lsls	r3, r3, #3
 8002294:	4413      	add	r3, r2
 8002296:	009b      	lsls	r3, r3, #2
 8002298:	440b      	add	r3, r1
 800229a:	f503 7325 	add.w	r3, r3, #660	; 0x294
 800229e:	2200      	movs	r2, #0
 80022a0:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022a2:	7bfb      	ldrb	r3, [r7, #15]
 80022a4:	3301      	adds	r3, #1
 80022a6:	73fb      	strb	r3, [r7, #15]
 80022a8:	7bfa      	ldrb	r2, [r7, #15]
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	685b      	ldr	r3, [r3, #4]
 80022ae:	429a      	cmp	r2, r3
 80022b0:	d3b5      	bcc.n	800221e <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	681b      	ldr	r3, [r3, #0]
 80022b6:	603b      	str	r3, [r7, #0]
 80022b8:	687e      	ldr	r6, [r7, #4]
 80022ba:	466d      	mov	r5, sp
 80022bc:	f106 0410 	add.w	r4, r6, #16
 80022c0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022c4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022c8:	e894 0003 	ldmia.w	r4, {r0, r1}
 80022cc:	e885 0003 	stmia.w	r5, {r0, r1}
 80022d0:	1d33      	adds	r3, r6, #4
 80022d2:	cb0e      	ldmia	r3, {r1, r2, r3}
 80022d4:	6838      	ldr	r0, [r7, #0]
 80022d6:	f001 ff05 	bl	80040e4 <USB_DevInit>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d005      	beq.n	80022ec <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	2202      	movs	r2, #2
 80022e4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80022e8:	2301      	movs	r3, #1
 80022ea:	e00d      	b.n	8002308 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	2200      	movs	r2, #0
 80022f0:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2201      	movs	r2, #1
 80022f8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	4618      	mov	r0, r3
 8002302:	f003 f854 	bl	80053ae <USB_DevDisconnect>

  return HAL_OK;
 8002306:	2300      	movs	r3, #0
}
 8002308:	4618      	mov	r0, r3
 800230a:	3714      	adds	r7, #20
 800230c:	46bd      	mov	sp, r7
 800230e:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002310 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002310:	b580      	push	{r7, lr}
 8002312:	b084      	sub	sp, #16
 8002314:	af00      	add	r7, sp, #0
 8002316:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002324:	2b01      	cmp	r3, #1
 8002326:	d101      	bne.n	800232c <HAL_PCD_Start+0x1c>
 8002328:	2302      	movs	r3, #2
 800232a:	e020      	b.n	800236e <HAL_PCD_Start+0x5e>
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	2201      	movs	r2, #1
 8002330:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002338:	2b01      	cmp	r3, #1
 800233a:	d109      	bne.n	8002350 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002340:	2b01      	cmp	r3, #1
 8002342:	d005      	beq.n	8002350 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002348:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4618      	mov	r0, r3
 8002356:	f001 fe57 	bl	8004008 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	4618      	mov	r0, r3
 8002360:	f003 f804 	bl	800536c <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002364:	687b      	ldr	r3, [r7, #4]
 8002366:	2200      	movs	r2, #0
 8002368:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800236c:	2300      	movs	r3, #0
}
 800236e:	4618      	mov	r0, r3
 8002370:	3710      	adds	r7, #16
 8002372:	46bd      	mov	sp, r7
 8002374:	bd80      	pop	{r7, pc}

08002376 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002376:	b590      	push	{r4, r7, lr}
 8002378:	b08d      	sub	sp, #52	; 0x34
 800237a:	af00      	add	r7, sp, #0
 800237c:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002384:	6a3b      	ldr	r3, [r7, #32]
 8002386:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	4618      	mov	r0, r3
 800238e:	f003 f8c2 	bl	8005516 <USB_GetMode>
 8002392:	4603      	mov	r3, r0
 8002394:	2b00      	cmp	r3, #0
 8002396:	f040 848a 	bne.w	8002cae <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	4618      	mov	r0, r3
 80023a0:	f003 f826 	bl	80053f0 <USB_ReadInterrupts>
 80023a4:	4603      	mov	r3, r0
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	f000 8480 	beq.w	8002cac <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023b2:	689b      	ldr	r3, [r3, #8]
 80023b4:	0a1b      	lsrs	r3, r3, #8
 80023b6:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80023c0:	687b      	ldr	r3, [r7, #4]
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	4618      	mov	r0, r3
 80023c6:	f003 f813 	bl	80053f0 <USB_ReadInterrupts>
 80023ca:	4603      	mov	r3, r0
 80023cc:	f003 0302 	and.w	r3, r3, #2
 80023d0:	2b02      	cmp	r3, #2
 80023d2:	d107      	bne.n	80023e4 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	695a      	ldr	r2, [r3, #20]
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f002 0202 	and.w	r2, r2, #2
 80023e2:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	4618      	mov	r0, r3
 80023ea:	f003 f801 	bl	80053f0 <USB_ReadInterrupts>
 80023ee:	4603      	mov	r3, r0
 80023f0:	f003 0310 	and.w	r3, r3, #16
 80023f4:	2b10      	cmp	r3, #16
 80023f6:	d161      	bne.n	80024bc <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	699a      	ldr	r2, [r3, #24]
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f022 0210 	bic.w	r2, r2, #16
 8002406:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002408:	6a3b      	ldr	r3, [r7, #32]
 800240a:	6a1b      	ldr	r3, [r3, #32]
 800240c:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800240e:	69bb      	ldr	r3, [r7, #24]
 8002410:	f003 020f 	and.w	r2, r3, #15
 8002414:	4613      	mov	r3, r2
 8002416:	00db      	lsls	r3, r3, #3
 8002418:	4413      	add	r3, r2
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	4413      	add	r3, r2
 8002424:	3304      	adds	r3, #4
 8002426:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002428:	69bb      	ldr	r3, [r7, #24]
 800242a:	0c5b      	lsrs	r3, r3, #17
 800242c:	f003 030f 	and.w	r3, r3, #15
 8002430:	2b02      	cmp	r3, #2
 8002432:	d124      	bne.n	800247e <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002434:	69ba      	ldr	r2, [r7, #24]
 8002436:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 800243a:	4013      	ands	r3, r2
 800243c:	2b00      	cmp	r3, #0
 800243e:	d035      	beq.n	80024ac <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002444:	69bb      	ldr	r3, [r7, #24]
 8002446:	091b      	lsrs	r3, r3, #4
 8002448:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800244a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800244e:	b29b      	uxth	r3, r3
 8002450:	461a      	mov	r2, r3
 8002452:	6a38      	ldr	r0, [r7, #32]
 8002454:	f002 fe38 	bl	80050c8 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002458:	697b      	ldr	r3, [r7, #20]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	69bb      	ldr	r3, [r7, #24]
 800245e:	091b      	lsrs	r3, r3, #4
 8002460:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002464:	441a      	add	r2, r3
 8002466:	697b      	ldr	r3, [r7, #20]
 8002468:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800246a:	697b      	ldr	r3, [r7, #20]
 800246c:	6a1a      	ldr	r2, [r3, #32]
 800246e:	69bb      	ldr	r3, [r7, #24]
 8002470:	091b      	lsrs	r3, r3, #4
 8002472:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002476:	441a      	add	r2, r3
 8002478:	697b      	ldr	r3, [r7, #20]
 800247a:	621a      	str	r2, [r3, #32]
 800247c:	e016      	b.n	80024ac <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 800247e:	69bb      	ldr	r3, [r7, #24]
 8002480:	0c5b      	lsrs	r3, r3, #17
 8002482:	f003 030f 	and.w	r3, r3, #15
 8002486:	2b06      	cmp	r3, #6
 8002488:	d110      	bne.n	80024ac <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002490:	2208      	movs	r2, #8
 8002492:	4619      	mov	r1, r3
 8002494:	6a38      	ldr	r0, [r7, #32]
 8002496:	f002 fe17 	bl	80050c8 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 800249a:	697b      	ldr	r3, [r7, #20]
 800249c:	6a1a      	ldr	r2, [r3, #32]
 800249e:	69bb      	ldr	r3, [r7, #24]
 80024a0:	091b      	lsrs	r3, r3, #4
 80024a2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80024a6:	441a      	add	r2, r3
 80024a8:	697b      	ldr	r3, [r7, #20]
 80024aa:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	699a      	ldr	r2, [r3, #24]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f042 0210 	orr.w	r2, r2, #16
 80024ba:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	4618      	mov	r0, r3
 80024c2:	f002 ff95 	bl	80053f0 <USB_ReadInterrupts>
 80024c6:	4603      	mov	r3, r0
 80024c8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024cc:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80024d0:	f040 80a7 	bne.w	8002622 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 80024d4:	2300      	movs	r3, #0
 80024d6:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	4618      	mov	r0, r3
 80024de:	f002 ff9a 	bl	8005416 <USB_ReadDevAllOutEpInterrupt>
 80024e2:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 80024e4:	e099      	b.n	800261a <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 80024e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	2b00      	cmp	r3, #0
 80024ee:	f000 808e 	beq.w	800260e <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f8:	b2d2      	uxtb	r2, r2
 80024fa:	4611      	mov	r1, r2
 80024fc:	4618      	mov	r0, r3
 80024fe:	f002 ffbe 	bl	800547e <USB_ReadDevOutEPInterrupt>
 8002502:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	f003 0301 	and.w	r3, r3, #1
 800250a:	2b00      	cmp	r3, #0
 800250c:	d00c      	beq.n	8002528 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800250e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002510:	015a      	lsls	r2, r3, #5
 8002512:	69fb      	ldr	r3, [r7, #28]
 8002514:	4413      	add	r3, r2
 8002516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800251a:	461a      	mov	r2, r3
 800251c:	2301      	movs	r3, #1
 800251e:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002520:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002522:	6878      	ldr	r0, [r7, #4]
 8002524:	f000 feaa 	bl	800327c <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002528:	693b      	ldr	r3, [r7, #16]
 800252a:	f003 0308 	and.w	r3, r3, #8
 800252e:	2b00      	cmp	r3, #0
 8002530:	d00c      	beq.n	800254c <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002532:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002534:	015a      	lsls	r2, r3, #5
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	4413      	add	r3, r2
 800253a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800253e:	461a      	mov	r2, r3
 8002540:	2308      	movs	r3, #8
 8002542:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002544:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002546:	6878      	ldr	r0, [r7, #4]
 8002548:	f000 ff80 	bl	800344c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800254c:	693b      	ldr	r3, [r7, #16]
 800254e:	f003 0310 	and.w	r3, r3, #16
 8002552:	2b00      	cmp	r3, #0
 8002554:	d008      	beq.n	8002568 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002556:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002558:	015a      	lsls	r2, r3, #5
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	4413      	add	r3, r2
 800255e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002562:	461a      	mov	r2, r3
 8002564:	2310      	movs	r3, #16
 8002566:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002568:	693b      	ldr	r3, [r7, #16]
 800256a:	f003 0302 	and.w	r3, r3, #2
 800256e:	2b00      	cmp	r3, #0
 8002570:	d030      	beq.n	80025d4 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002572:	6a3b      	ldr	r3, [r7, #32]
 8002574:	695b      	ldr	r3, [r3, #20]
 8002576:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800257a:	2b80      	cmp	r3, #128	; 0x80
 800257c:	d109      	bne.n	8002592 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 800257e:	69fb      	ldr	r3, [r7, #28]
 8002580:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	69fa      	ldr	r2, [r7, #28]
 8002588:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800258c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002590:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002592:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002594:	4613      	mov	r3, r2
 8002596:	00db      	lsls	r3, r3, #3
 8002598:	4413      	add	r3, r2
 800259a:	009b      	lsls	r3, r3, #2
 800259c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	4413      	add	r3, r2
 80025a4:	3304      	adds	r3, #4
 80025a6:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80025a8:	697b      	ldr	r3, [r7, #20]
 80025aa:	78db      	ldrb	r3, [r3, #3]
 80025ac:	2b01      	cmp	r3, #1
 80025ae:	d108      	bne.n	80025c2 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80025b0:	697b      	ldr	r3, [r7, #20]
 80025b2:	2200      	movs	r2, #0
 80025b4:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	4619      	mov	r1, r3
 80025bc:	6878      	ldr	r0, [r7, #4]
 80025be:	f004 ffcf 	bl	8007560 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 80025c2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025c4:	015a      	lsls	r2, r3, #5
 80025c6:	69fb      	ldr	r3, [r7, #28]
 80025c8:	4413      	add	r3, r2
 80025ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ce:	461a      	mov	r2, r3
 80025d0:	2302      	movs	r3, #2
 80025d2:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80025d4:	693b      	ldr	r3, [r7, #16]
 80025d6:	f003 0320 	and.w	r3, r3, #32
 80025da:	2b00      	cmp	r3, #0
 80025dc:	d008      	beq.n	80025f0 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80025de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025e0:	015a      	lsls	r2, r3, #5
 80025e2:	69fb      	ldr	r3, [r7, #28]
 80025e4:	4413      	add	r3, r2
 80025e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80025ea:	461a      	mov	r2, r3
 80025ec:	2320      	movs	r3, #32
 80025ee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 80025f0:	693b      	ldr	r3, [r7, #16]
 80025f2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d009      	beq.n	800260e <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 80025fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025fc:	015a      	lsls	r2, r3, #5
 80025fe:	69fb      	ldr	r3, [r7, #28]
 8002600:	4413      	add	r3, r2
 8002602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002606:	461a      	mov	r2, r3
 8002608:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800260c:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 800260e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002610:	3301      	adds	r3, #1
 8002612:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002614:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002616:	085b      	lsrs	r3, r3, #1
 8002618:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 800261a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800261c:	2b00      	cmp	r3, #0
 800261e:	f47f af62 	bne.w	80024e6 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4618      	mov	r0, r3
 8002628:	f002 fee2 	bl	80053f0 <USB_ReadInterrupts>
 800262c:	4603      	mov	r3, r0
 800262e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002632:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002636:	f040 80db 	bne.w	80027f0 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	4618      	mov	r0, r3
 8002640:	f002 ff03 	bl	800544a <USB_ReadDevAllInEpInterrupt>
 8002644:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002646:	2300      	movs	r3, #0
 8002648:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 800264a:	e0cd      	b.n	80027e8 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 800264c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800264e:	f003 0301 	and.w	r3, r3, #1
 8002652:	2b00      	cmp	r3, #0
 8002654:	f000 80c2 	beq.w	80027dc <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f002 ff29 	bl	80054ba <USB_ReadDevInEPInterrupt>
 8002668:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	f003 0301 	and.w	r3, r3, #1
 8002670:	2b00      	cmp	r3, #0
 8002672:	d057      	beq.n	8002724 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002674:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002676:	f003 030f 	and.w	r3, r3, #15
 800267a:	2201      	movs	r2, #1
 800267c:	fa02 f303 	lsl.w	r3, r2, r3
 8002680:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002682:	69fb      	ldr	r3, [r7, #28]
 8002684:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800268a:	68fb      	ldr	r3, [r7, #12]
 800268c:	43db      	mvns	r3, r3
 800268e:	69f9      	ldr	r1, [r7, #28]
 8002690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002694:	4013      	ands	r3, r2
 8002696:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002698:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800269a:	015a      	lsls	r2, r3, #5
 800269c:	69fb      	ldr	r3, [r7, #28]
 800269e:	4413      	add	r3, r2
 80026a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80026a4:	461a      	mov	r2, r3
 80026a6:	2301      	movs	r3, #1
 80026a8:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	691b      	ldr	r3, [r3, #16]
 80026ae:	2b01      	cmp	r3, #1
 80026b0:	d132      	bne.n	8002718 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 80026b2:	6879      	ldr	r1, [r7, #4]
 80026b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026b6:	4613      	mov	r3, r2
 80026b8:	00db      	lsls	r3, r3, #3
 80026ba:	4413      	add	r3, r2
 80026bc:	009b      	lsls	r3, r3, #2
 80026be:	440b      	add	r3, r1
 80026c0:	334c      	adds	r3, #76	; 0x4c
 80026c2:	6819      	ldr	r1, [r3, #0]
 80026c4:	6878      	ldr	r0, [r7, #4]
 80026c6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026c8:	4613      	mov	r3, r2
 80026ca:	00db      	lsls	r3, r3, #3
 80026cc:	4413      	add	r3, r2
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	4403      	add	r3, r0
 80026d2:	3348      	adds	r3, #72	; 0x48
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	4419      	add	r1, r3
 80026d8:	6878      	ldr	r0, [r7, #4]
 80026da:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026dc:	4613      	mov	r3, r2
 80026de:	00db      	lsls	r3, r3, #3
 80026e0:	4413      	add	r3, r2
 80026e2:	009b      	lsls	r3, r3, #2
 80026e4:	4403      	add	r3, r0
 80026e6:	334c      	adds	r3, #76	; 0x4c
 80026e8:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 80026ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ec:	2b00      	cmp	r3, #0
 80026ee:	d113      	bne.n	8002718 <HAL_PCD_IRQHandler+0x3a2>
 80026f0:	6879      	ldr	r1, [r7, #4]
 80026f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80026f4:	4613      	mov	r3, r2
 80026f6:	00db      	lsls	r3, r3, #3
 80026f8:	4413      	add	r3, r2
 80026fa:	009b      	lsls	r3, r3, #2
 80026fc:	440b      	add	r3, r1
 80026fe:	3354      	adds	r3, #84	; 0x54
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	2b00      	cmp	r3, #0
 8002704:	d108      	bne.n	8002718 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002706:	687b      	ldr	r3, [r7, #4]
 8002708:	6818      	ldr	r0, [r3, #0]
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002710:	461a      	mov	r2, r3
 8002712:	2101      	movs	r1, #1
 8002714:	f002 ff30 	bl	8005578 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271a:	b2db      	uxtb	r3, r3
 800271c:	4619      	mov	r1, r3
 800271e:	6878      	ldr	r0, [r7, #4]
 8002720:	f004 fea3 	bl	800746a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	f003 0308 	and.w	r3, r3, #8
 800272a:	2b00      	cmp	r3, #0
 800272c:	d008      	beq.n	8002740 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 800272e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002730:	015a      	lsls	r2, r3, #5
 8002732:	69fb      	ldr	r3, [r7, #28]
 8002734:	4413      	add	r3, r2
 8002736:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800273a:	461a      	mov	r2, r3
 800273c:	2308      	movs	r3, #8
 800273e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	f003 0310 	and.w	r3, r3, #16
 8002746:	2b00      	cmp	r3, #0
 8002748:	d008      	beq.n	800275c <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 800274a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800274c:	015a      	lsls	r2, r3, #5
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	4413      	add	r3, r2
 8002752:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002756:	461a      	mov	r2, r3
 8002758:	2310      	movs	r3, #16
 800275a:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 800275c:	693b      	ldr	r3, [r7, #16]
 800275e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002762:	2b00      	cmp	r3, #0
 8002764:	d008      	beq.n	8002778 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002766:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002768:	015a      	lsls	r2, r3, #5
 800276a:	69fb      	ldr	r3, [r7, #28]
 800276c:	4413      	add	r3, r2
 800276e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002772:	461a      	mov	r2, r3
 8002774:	2340      	movs	r3, #64	; 0x40
 8002776:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002778:	693b      	ldr	r3, [r7, #16]
 800277a:	f003 0302 	and.w	r3, r3, #2
 800277e:	2b00      	cmp	r3, #0
 8002780:	d023      	beq.n	80027ca <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002782:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002784:	6a38      	ldr	r0, [r7, #32]
 8002786:	f001 fe11 	bl	80043ac <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 800278a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800278c:	4613      	mov	r3, r2
 800278e:	00db      	lsls	r3, r3, #3
 8002790:	4413      	add	r3, r2
 8002792:	009b      	lsls	r3, r3, #2
 8002794:	3338      	adds	r3, #56	; 0x38
 8002796:	687a      	ldr	r2, [r7, #4]
 8002798:	4413      	add	r3, r2
 800279a:	3304      	adds	r3, #4
 800279c:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	78db      	ldrb	r3, [r3, #3]
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d108      	bne.n	80027b8 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 80027a6:	697b      	ldr	r3, [r7, #20]
 80027a8:	2200      	movs	r2, #0
 80027aa:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 80027ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ae:	b2db      	uxtb	r3, r3
 80027b0:	4619      	mov	r1, r3
 80027b2:	6878      	ldr	r0, [r7, #4]
 80027b4:	f004 fee6 	bl	8007584 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 80027b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027ba:	015a      	lsls	r2, r3, #5
 80027bc:	69fb      	ldr	r3, [r7, #28]
 80027be:	4413      	add	r3, r2
 80027c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80027c4:	461a      	mov	r2, r3
 80027c6:	2302      	movs	r3, #2
 80027c8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 80027ca:	693b      	ldr	r3, [r7, #16]
 80027cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 80027d4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fcc3 	bl	8003162 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 80027dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027de:	3301      	adds	r3, #1
 80027e0:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 80027e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e4:	085b      	lsrs	r3, r3, #1
 80027e6:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 80027e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	f47f af2e 	bne.w	800264c <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f002 fdfb 	bl	80053f0 <USB_ReadInterrupts>
 80027fa:	4603      	mov	r3, r0
 80027fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002800:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002804:	d122      	bne.n	800284c <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002806:	69fb      	ldr	r3, [r7, #28]
 8002808:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800280c:	685b      	ldr	r3, [r3, #4]
 800280e:	69fa      	ldr	r2, [r7, #28]
 8002810:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002814:	f023 0301 	bic.w	r3, r3, #1
 8002818:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002820:	2b01      	cmp	r3, #1
 8002822:	d108      	bne.n	8002836 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	2200      	movs	r2, #0
 8002828:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800282c:	2100      	movs	r1, #0
 800282e:	6878      	ldr	r0, [r7, #4]
 8002830:	f000 feaa 	bl	8003588 <HAL_PCDEx_LPM_Callback>
 8002834:	e002      	b.n	800283c <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002836:	6878      	ldr	r0, [r7, #4]
 8002838:	f004 fe84 	bl	8007544 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	695a      	ldr	r2, [r3, #20]
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 800284a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4618      	mov	r0, r3
 8002852:	f002 fdcd 	bl	80053f0 <USB_ReadInterrupts>
 8002856:	4603      	mov	r3, r0
 8002858:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800285c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002860:	d112      	bne.n	8002888 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002862:	69fb      	ldr	r3, [r7, #28]
 8002864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002868:	689b      	ldr	r3, [r3, #8]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b01      	cmp	r3, #1
 8002870:	d102      	bne.n	8002878 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002872:	6878      	ldr	r0, [r7, #4]
 8002874:	f004 fe40 	bl	80074f8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	695a      	ldr	r2, [r3, #20]
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002886:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	4618      	mov	r0, r3
 800288e:	f002 fdaf 	bl	80053f0 <USB_ReadInterrupts>
 8002892:	4603      	mov	r3, r0
 8002894:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002898:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800289c:	f040 80b7 	bne.w	8002a0e <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 80028a0:	69fb      	ldr	r3, [r7, #28]
 80028a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80028a6:	685b      	ldr	r3, [r3, #4]
 80028a8:	69fa      	ldr	r2, [r7, #28]
 80028aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80028ae:	f023 0301 	bic.w	r3, r3, #1
 80028b2:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	681b      	ldr	r3, [r3, #0]
 80028b8:	2110      	movs	r1, #16
 80028ba:	4618      	mov	r0, r3
 80028bc:	f001 fd76 	bl	80043ac <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028c0:	2300      	movs	r3, #0
 80028c2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80028c4:	e046      	b.n	8002954 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 80028c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028c8:	015a      	lsls	r2, r3, #5
 80028ca:	69fb      	ldr	r3, [r7, #28]
 80028cc:	4413      	add	r3, r2
 80028ce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028d2:	461a      	mov	r2, r3
 80028d4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80028d8:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80028da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028dc:	015a      	lsls	r2, r3, #5
 80028de:	69fb      	ldr	r3, [r7, #28]
 80028e0:	4413      	add	r3, r2
 80028e2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80028e6:	681b      	ldr	r3, [r3, #0]
 80028e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80028ea:	0151      	lsls	r1, r2, #5
 80028ec:	69fa      	ldr	r2, [r7, #28]
 80028ee:	440a      	add	r2, r1
 80028f0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80028f4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80028f8:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 80028fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80028fc:	015a      	lsls	r2, r3, #5
 80028fe:	69fb      	ldr	r3, [r7, #28]
 8002900:	4413      	add	r3, r2
 8002902:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002906:	461a      	mov	r2, r3
 8002908:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800290c:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 800290e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002910:	015a      	lsls	r2, r3, #5
 8002912:	69fb      	ldr	r3, [r7, #28]
 8002914:	4413      	add	r3, r2
 8002916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800291e:	0151      	lsls	r1, r2, #5
 8002920:	69fa      	ldr	r2, [r7, #28]
 8002922:	440a      	add	r2, r1
 8002924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002928:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800292c:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 800292e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002930:	015a      	lsls	r2, r3, #5
 8002932:	69fb      	ldr	r3, [r7, #28]
 8002934:	4413      	add	r3, r2
 8002936:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800293e:	0151      	lsls	r1, r2, #5
 8002940:	69fa      	ldr	r2, [r7, #28]
 8002942:	440a      	add	r2, r1
 8002944:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002948:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800294c:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800294e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002950:	3301      	adds	r3, #1
 8002952:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	685b      	ldr	r3, [r3, #4]
 8002958:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800295a:	429a      	cmp	r2, r3
 800295c:	d3b3      	bcc.n	80028c6 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 800295e:	69fb      	ldr	r3, [r7, #28]
 8002960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002964:	69db      	ldr	r3, [r3, #28]
 8002966:	69fa      	ldr	r2, [r7, #28]
 8002968:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800296c:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002970:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002976:	2b00      	cmp	r3, #0
 8002978:	d016      	beq.n	80029a8 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 800297a:	69fb      	ldr	r3, [r7, #28]
 800297c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002980:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002984:	69fa      	ldr	r2, [r7, #28]
 8002986:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800298a:	f043 030b 	orr.w	r3, r3, #11
 800298e:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002992:	69fb      	ldr	r3, [r7, #28]
 8002994:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	69fa      	ldr	r2, [r7, #28]
 800299c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029a0:	f043 030b 	orr.w	r3, r3, #11
 80029a4:	6453      	str	r3, [r2, #68]	; 0x44
 80029a6:	e015      	b.n	80029d4 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 80029a8:	69fb      	ldr	r3, [r7, #28]
 80029aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029ae:	695b      	ldr	r3, [r3, #20]
 80029b0:	69fa      	ldr	r2, [r7, #28]
 80029b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029b6:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80029ba:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80029be:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80029c0:	69fb      	ldr	r3, [r7, #28]
 80029c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c6:	691b      	ldr	r3, [r3, #16]
 80029c8:	69fa      	ldr	r2, [r7, #28]
 80029ca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ce:	f043 030b 	orr.w	r3, r3, #11
 80029d2:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80029d4:	69fb      	ldr	r3, [r7, #28]
 80029d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	69fa      	ldr	r2, [r7, #28]
 80029de:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029e2:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80029e6:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	6818      	ldr	r0, [r3, #0]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	691b      	ldr	r3, [r3, #16]
 80029f0:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80029f8:	461a      	mov	r2, r3
 80029fa:	f002 fdbd 	bl	8005578 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	695a      	ldr	r2, [r3, #20]
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002a0c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4618      	mov	r0, r3
 8002a14:	f002 fcec 	bl	80053f0 <USB_ReadInterrupts>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a1e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002a22:	d124      	bne.n	8002a6e <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	681b      	ldr	r3, [r3, #0]
 8002a28:	4618      	mov	r0, r3
 8002a2a:	f002 fd82 	bl	8005532 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4618      	mov	r0, r3
 8002a34:	f001 fd37 	bl	80044a6 <USB_GetDevSpeed>
 8002a38:	4603      	mov	r3, r0
 8002a3a:	461a      	mov	r2, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681c      	ldr	r4, [r3, #0]
 8002a44:	f001 f9d0 	bl	8003de8 <HAL_RCC_GetHCLKFreq>
 8002a48:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002a4e:	b2db      	uxtb	r3, r3
 8002a50:	461a      	mov	r2, r3
 8002a52:	4620      	mov	r0, r4
 8002a54:	f001 fa36 	bl	8003ec4 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002a58:	6878      	ldr	r0, [r7, #4]
 8002a5a:	f004 fd2e 	bl	80074ba <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	695a      	ldr	r2, [r3, #20]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002a6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f002 fcbc 	bl	80053f0 <USB_ReadInterrupts>
 8002a78:	4603      	mov	r3, r0
 8002a7a:	f003 0308 	and.w	r3, r3, #8
 8002a7e:	2b08      	cmp	r3, #8
 8002a80:	d10a      	bne.n	8002a98 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f004 fd0b 	bl	800749e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	695a      	ldr	r2, [r3, #20]
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f002 0208 	and.w	r2, r2, #8
 8002a96:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	4618      	mov	r0, r3
 8002a9e:	f002 fca7 	bl	80053f0 <USB_ReadInterrupts>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002aa8:	2b80      	cmp	r3, #128	; 0x80
 8002aaa:	d122      	bne.n	8002af2 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002aac:	6a3b      	ldr	r3, [r7, #32]
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ab4:	6a3b      	ldr	r3, [r7, #32]
 8002ab6:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ab8:	2301      	movs	r3, #1
 8002aba:	627b      	str	r3, [r7, #36]	; 0x24
 8002abc:	e014      	b.n	8002ae8 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002abe:	6879      	ldr	r1, [r7, #4]
 8002ac0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	00db      	lsls	r3, r3, #3
 8002ac6:	4413      	add	r3, r2
 8002ac8:	009b      	lsls	r3, r3, #2
 8002aca:	440b      	add	r3, r1
 8002acc:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002ad0:	781b      	ldrb	r3, [r3, #0]
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d105      	bne.n	8002ae2 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	4619      	mov	r1, r3
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f000 fb0f 	bl	8003100 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ae2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ae4:	3301      	adds	r3, #1
 8002ae6:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	685b      	ldr	r3, [r3, #4]
 8002aec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002aee:	429a      	cmp	r2, r3
 8002af0:	d3e5      	bcc.n	8002abe <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002af2:	687b      	ldr	r3, [r7, #4]
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f002 fc7a 	bl	80053f0 <USB_ReadInterrupts>
 8002afc:	4603      	mov	r3, r0
 8002afe:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b02:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b06:	d13b      	bne.n	8002b80 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b08:	2301      	movs	r3, #1
 8002b0a:	627b      	str	r3, [r7, #36]	; 0x24
 8002b0c:	e02b      	b.n	8002b66 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002b0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b10:	015a      	lsls	r2, r3, #5
 8002b12:	69fb      	ldr	r3, [r7, #28]
 8002b14:	4413      	add	r3, r2
 8002b16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b1e:	6879      	ldr	r1, [r7, #4]
 8002b20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b22:	4613      	mov	r3, r2
 8002b24:	00db      	lsls	r3, r3, #3
 8002b26:	4413      	add	r3, r2
 8002b28:	009b      	lsls	r3, r3, #2
 8002b2a:	440b      	add	r3, r1
 8002b2c:	3340      	adds	r3, #64	; 0x40
 8002b2e:	781b      	ldrb	r3, [r3, #0]
 8002b30:	2b01      	cmp	r3, #1
 8002b32:	d115      	bne.n	8002b60 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002b34:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	da12      	bge.n	8002b60 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002b3a:	6879      	ldr	r1, [r7, #4]
 8002b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b3e:	4613      	mov	r3, r2
 8002b40:	00db      	lsls	r3, r3, #3
 8002b42:	4413      	add	r3, r2
 8002b44:	009b      	lsls	r3, r3, #2
 8002b46:	440b      	add	r3, r1
 8002b48:	333f      	adds	r3, #63	; 0x3f
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002b4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b50:	b2db      	uxtb	r3, r3
 8002b52:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002b56:	b2db      	uxtb	r3, r3
 8002b58:	4619      	mov	r1, r3
 8002b5a:	6878      	ldr	r0, [r7, #4]
 8002b5c:	f000 fad0 	bl	8003100 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b62:	3301      	adds	r3, #1
 8002b64:	627b      	str	r3, [r7, #36]	; 0x24
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b6c:	429a      	cmp	r2, r3
 8002b6e:	d3ce      	bcc.n	8002b0e <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	681b      	ldr	r3, [r3, #0]
 8002b74:	695a      	ldr	r2, [r3, #20]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002b7e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4618      	mov	r0, r3
 8002b86:	f002 fc33 	bl	80053f0 <USB_ReadInterrupts>
 8002b8a:	4603      	mov	r3, r0
 8002b8c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b90:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002b94:	d155      	bne.n	8002c42 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002b96:	2301      	movs	r3, #1
 8002b98:	627b      	str	r3, [r7, #36]	; 0x24
 8002b9a:	e045      	b.n	8002c28 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002b9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b9e:	015a      	lsls	r2, r3, #5
 8002ba0:	69fb      	ldr	r3, [r7, #28]
 8002ba2:	4413      	add	r3, r2
 8002ba4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bac:	6879      	ldr	r1, [r7, #4]
 8002bae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bb0:	4613      	mov	r3, r2
 8002bb2:	00db      	lsls	r3, r3, #3
 8002bb4:	4413      	add	r3, r2
 8002bb6:	009b      	lsls	r3, r3, #2
 8002bb8:	440b      	add	r3, r1
 8002bba:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002bbe:	781b      	ldrb	r3, [r3, #0]
 8002bc0:	2b01      	cmp	r3, #1
 8002bc2:	d12e      	bne.n	8002c22 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bc4:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	da2b      	bge.n	8002c22 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002bca:	69bb      	ldr	r3, [r7, #24]
 8002bcc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8002bd6:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002bda:	429a      	cmp	r2, r3
 8002bdc:	d121      	bne.n	8002c22 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002bde:	6879      	ldr	r1, [r7, #4]
 8002be0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002be2:	4613      	mov	r3, r2
 8002be4:	00db      	lsls	r3, r3, #3
 8002be6:	4413      	add	r3, r2
 8002be8:	009b      	lsls	r3, r3, #2
 8002bea:	440b      	add	r3, r1
 8002bec:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002bf0:	2201      	movs	r2, #1
 8002bf2:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8002bf4:	6a3b      	ldr	r3, [r7, #32]
 8002bf6:	699b      	ldr	r3, [r3, #24]
 8002bf8:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002bfc:	6a3b      	ldr	r3, [r7, #32]
 8002bfe:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002c00:	6a3b      	ldr	r3, [r7, #32]
 8002c02:	695b      	ldr	r3, [r3, #20]
 8002c04:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d10a      	bne.n	8002c22 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c12:	685b      	ldr	r3, [r3, #4]
 8002c14:	69fa      	ldr	r2, [r7, #28]
 8002c16:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002c1e:	6053      	str	r3, [r2, #4]
            break;
 8002c20:	e007      	b.n	8002c32 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002c22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c24:	3301      	adds	r3, #1
 8002c26:	627b      	str	r3, [r7, #36]	; 0x24
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	685b      	ldr	r3, [r3, #4]
 8002c2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c2e:	429a      	cmp	r2, r3
 8002c30:	d3b4      	bcc.n	8002b9c <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695a      	ldr	r2, [r3, #20]
 8002c38:	687b      	ldr	r3, [r7, #4]
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002c40:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	4618      	mov	r0, r3
 8002c48:	f002 fbd2 	bl	80053f0 <USB_ReadInterrupts>
 8002c4c:	4603      	mov	r3, r0
 8002c4e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002c52:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c56:	d10a      	bne.n	8002c6e <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002c58:	6878      	ldr	r0, [r7, #4]
 8002c5a:	f004 fca5 	bl	80075a8 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	695a      	ldr	r2, [r3, #20]
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002c6c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	4618      	mov	r0, r3
 8002c74:	f002 fbbc 	bl	80053f0 <USB_ReadInterrupts>
 8002c78:	4603      	mov	r3, r0
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d115      	bne.n	8002cae <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002c8a:	69bb      	ldr	r3, [r7, #24]
 8002c8c:	f003 0304 	and.w	r3, r3, #4
 8002c90:	2b00      	cmp	r3, #0
 8002c92:	d002      	beq.n	8002c9a <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 8002c94:	6878      	ldr	r0, [r7, #4]
 8002c96:	f004 fc95 	bl	80075c4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	6859      	ldr	r1, [r3, #4]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	69ba      	ldr	r2, [r7, #24]
 8002ca6:	430a      	orrs	r2, r1
 8002ca8:	605a      	str	r2, [r3, #4]
 8002caa:	e000      	b.n	8002cae <HAL_PCD_IRQHandler+0x938>
      return;
 8002cac:	bf00      	nop
    }
  }
}
 8002cae:	3734      	adds	r7, #52	; 0x34
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd90      	pop	{r4, r7, pc}

08002cb4 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
 8002cbc:	460b      	mov	r3, r1
 8002cbe:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d101      	bne.n	8002cce <HAL_PCD_SetAddress+0x1a>
 8002cca:	2302      	movs	r3, #2
 8002ccc:	e013      	b.n	8002cf6 <HAL_PCD_SetAddress+0x42>
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2201      	movs	r2, #1
 8002cd2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	78fa      	ldrb	r2, [r7, #3]
 8002cda:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	78fa      	ldrb	r2, [r7, #3]
 8002ce4:	4611      	mov	r1, r2
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f002 fb1a 	bl	8005320 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002cf4:	2300      	movs	r3, #0
}
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	3708      	adds	r7, #8
 8002cfa:	46bd      	mov	sp, r7
 8002cfc:	bd80      	pop	{r7, pc}

08002cfe <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002cfe:	b580      	push	{r7, lr}
 8002d00:	b084      	sub	sp, #16
 8002d02:	af00      	add	r7, sp, #0
 8002d04:	6078      	str	r0, [r7, #4]
 8002d06:	4608      	mov	r0, r1
 8002d08:	4611      	mov	r1, r2
 8002d0a:	461a      	mov	r2, r3
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	70fb      	strb	r3, [r7, #3]
 8002d10:	460b      	mov	r3, r1
 8002d12:	803b      	strh	r3, [r7, #0]
 8002d14:	4613      	mov	r3, r2
 8002d16:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002d18:	2300      	movs	r3, #0
 8002d1a:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002d1c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002d20:	2b00      	cmp	r3, #0
 8002d22:	da0f      	bge.n	8002d44 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002d24:	78fb      	ldrb	r3, [r7, #3]
 8002d26:	f003 020f 	and.w	r2, r3, #15
 8002d2a:	4613      	mov	r3, r2
 8002d2c:	00db      	lsls	r3, r3, #3
 8002d2e:	4413      	add	r3, r2
 8002d30:	009b      	lsls	r3, r3, #2
 8002d32:	3338      	adds	r3, #56	; 0x38
 8002d34:	687a      	ldr	r2, [r7, #4]
 8002d36:	4413      	add	r3, r2
 8002d38:	3304      	adds	r3, #4
 8002d3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2201      	movs	r2, #1
 8002d40:	705a      	strb	r2, [r3, #1]
 8002d42:	e00f      	b.n	8002d64 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002d44:	78fb      	ldrb	r3, [r7, #3]
 8002d46:	f003 020f 	and.w	r2, r3, #15
 8002d4a:	4613      	mov	r3, r2
 8002d4c:	00db      	lsls	r3, r3, #3
 8002d4e:	4413      	add	r3, r2
 8002d50:	009b      	lsls	r3, r3, #2
 8002d52:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d56:	687a      	ldr	r2, [r7, #4]
 8002d58:	4413      	add	r3, r2
 8002d5a:	3304      	adds	r3, #4
 8002d5c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	2200      	movs	r2, #0
 8002d62:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 8002d64:	78fb      	ldrb	r3, [r7, #3]
 8002d66:	f003 030f 	and.w	r3, r3, #15
 8002d6a:	b2da      	uxtb	r2, r3
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002d70:	883a      	ldrh	r2, [r7, #0]
 8002d72:	68fb      	ldr	r3, [r7, #12]
 8002d74:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	78ba      	ldrb	r2, [r7, #2]
 8002d7a:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002d7c:	68fb      	ldr	r3, [r7, #12]
 8002d7e:	785b      	ldrb	r3, [r3, #1]
 8002d80:	2b00      	cmp	r3, #0
 8002d82:	d004      	beq.n	8002d8e <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	781b      	ldrb	r3, [r3, #0]
 8002d88:	b29a      	uxth	r2, r3
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002d8e:	78bb      	ldrb	r3, [r7, #2]
 8002d90:	2b02      	cmp	r3, #2
 8002d92:	d102      	bne.n	8002d9a <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	2200      	movs	r2, #0
 8002d98:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_PCD_EP_Open+0xaa>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e00e      	b.n	8002dc6 <HAL_PCD_EP_Open+0xc8>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	68f9      	ldr	r1, [r7, #12]
 8002db6:	4618      	mov	r0, r3
 8002db8:	f001 fb9a 	bl	80044f0 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8002dc4:	7afb      	ldrb	r3, [r7, #11]
}
 8002dc6:	4618      	mov	r0, r3
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}

08002dce <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
 8002dd6:	460b      	mov	r3, r1
 8002dd8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002dda:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	da0f      	bge.n	8002e02 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002de2:	78fb      	ldrb	r3, [r7, #3]
 8002de4:	f003 020f 	and.w	r2, r3, #15
 8002de8:	4613      	mov	r3, r2
 8002dea:	00db      	lsls	r3, r3, #3
 8002dec:	4413      	add	r3, r2
 8002dee:	009b      	lsls	r3, r3, #2
 8002df0:	3338      	adds	r3, #56	; 0x38
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	4413      	add	r3, r2
 8002df6:	3304      	adds	r3, #4
 8002df8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	2201      	movs	r2, #1
 8002dfe:	705a      	strb	r2, [r3, #1]
 8002e00:	e00f      	b.n	8002e22 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e02:	78fb      	ldrb	r3, [r7, #3]
 8002e04:	f003 020f 	and.w	r2, r3, #15
 8002e08:	4613      	mov	r3, r2
 8002e0a:	00db      	lsls	r3, r3, #3
 8002e0c:	4413      	add	r3, r2
 8002e0e:	009b      	lsls	r3, r3, #2
 8002e10:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e14:	687a      	ldr	r2, [r7, #4]
 8002e16:	4413      	add	r3, r2
 8002e18:	3304      	adds	r3, #4
 8002e1a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8002e22:	78fb      	ldrb	r3, [r7, #3]
 8002e24:	f003 030f 	and.w	r3, r3, #15
 8002e28:	b2da      	uxtb	r2, r3
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002e34:	2b01      	cmp	r3, #1
 8002e36:	d101      	bne.n	8002e3c <HAL_PCD_EP_Close+0x6e>
 8002e38:	2302      	movs	r3, #2
 8002e3a:	e00e      	b.n	8002e5a <HAL_PCD_EP_Close+0x8c>
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	2201      	movs	r2, #1
 8002e40:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	68f9      	ldr	r1, [r7, #12]
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f001 fbd8 	bl	8004600 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2200      	movs	r2, #0
 8002e54:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002e58:	2300      	movs	r3, #0
}
 8002e5a:	4618      	mov	r0, r3
 8002e5c:	3710      	adds	r7, #16
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	60f8      	str	r0, [r7, #12]
 8002e6a:	607a      	str	r2, [r7, #4]
 8002e6c:	603b      	str	r3, [r7, #0]
 8002e6e:	460b      	mov	r3, r1
 8002e70:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002e72:	7afb      	ldrb	r3, [r7, #11]
 8002e74:	f003 020f 	and.w	r2, r3, #15
 8002e78:	4613      	mov	r3, r2
 8002e7a:	00db      	lsls	r3, r3, #3
 8002e7c:	4413      	add	r3, r2
 8002e7e:	009b      	lsls	r3, r3, #2
 8002e80:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002e84:	68fa      	ldr	r2, [r7, #12]
 8002e86:	4413      	add	r3, r2
 8002e88:	3304      	adds	r3, #4
 8002e8a:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002e8c:	697b      	ldr	r3, [r7, #20]
 8002e8e:	687a      	ldr	r2, [r7, #4]
 8002e90:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002e92:	697b      	ldr	r3, [r7, #20]
 8002e94:	683a      	ldr	r2, [r7, #0]
 8002e96:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002e98:	697b      	ldr	r3, [r7, #20]
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002e9e:	697b      	ldr	r3, [r7, #20]
 8002ea0:	2200      	movs	r2, #0
 8002ea2:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ea4:	7afb      	ldrb	r3, [r7, #11]
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	b2da      	uxtb	r2, r3
 8002eac:	697b      	ldr	r3, [r7, #20]
 8002eae:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	691b      	ldr	r3, [r3, #16]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d102      	bne.n	8002ebe <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002eb8:	687a      	ldr	r2, [r7, #4]
 8002eba:	697b      	ldr	r3, [r7, #20]
 8002ebc:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002ebe:	7afb      	ldrb	r3, [r7, #11]
 8002ec0:	f003 030f 	and.w	r3, r3, #15
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	d109      	bne.n	8002edc <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002ec8:	68fb      	ldr	r3, [r7, #12]
 8002eca:	6818      	ldr	r0, [r3, #0]
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	b2db      	uxtb	r3, r3
 8002ed2:	461a      	mov	r2, r3
 8002ed4:	6979      	ldr	r1, [r7, #20]
 8002ed6:	f001 feb7 	bl	8004c48 <USB_EP0StartXfer>
 8002eda:	e008      	b.n	8002eee <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	6818      	ldr	r0, [r3, #0]
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	691b      	ldr	r3, [r3, #16]
 8002ee4:	b2db      	uxtb	r3, r3
 8002ee6:	461a      	mov	r2, r3
 8002ee8:	6979      	ldr	r1, [r7, #20]
 8002eea:	f001 fc65 	bl	80047b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002eee:	2300      	movs	r3, #0
}
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	3718      	adds	r7, #24
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b086      	sub	sp, #24
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	60f8      	str	r0, [r7, #12]
 8002f00:	607a      	str	r2, [r7, #4]
 8002f02:	603b      	str	r3, [r7, #0]
 8002f04:	460b      	mov	r3, r1
 8002f06:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002f08:	7afb      	ldrb	r3, [r7, #11]
 8002f0a:	f003 020f 	and.w	r2, r3, #15
 8002f0e:	4613      	mov	r3, r2
 8002f10:	00db      	lsls	r3, r3, #3
 8002f12:	4413      	add	r3, r2
 8002f14:	009b      	lsls	r3, r3, #2
 8002f16:	3338      	adds	r3, #56	; 0x38
 8002f18:	68fa      	ldr	r2, [r7, #12]
 8002f1a:	4413      	add	r3, r2
 8002f1c:	3304      	adds	r3, #4
 8002f1e:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8002f26:	697b      	ldr	r3, [r7, #20]
 8002f28:	683a      	ldr	r2, [r7, #0]
 8002f2a:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	2200      	movs	r2, #0
 8002f30:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8002f32:	697b      	ldr	r3, [r7, #20]
 8002f34:	2201      	movs	r2, #1
 8002f36:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002f38:	7afb      	ldrb	r3, [r7, #11]
 8002f3a:	f003 030f 	and.w	r3, r3, #15
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	697b      	ldr	r3, [r7, #20]
 8002f42:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	691b      	ldr	r3, [r3, #16]
 8002f48:	2b01      	cmp	r3, #1
 8002f4a:	d102      	bne.n	8002f52 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002f4c:	687a      	ldr	r2, [r7, #4]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002f52:	7afb      	ldrb	r3, [r7, #11]
 8002f54:	f003 030f 	and.w	r3, r3, #15
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d109      	bne.n	8002f70 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f5c:	68fb      	ldr	r3, [r7, #12]
 8002f5e:	6818      	ldr	r0, [r3, #0]
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	691b      	ldr	r3, [r3, #16]
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	6979      	ldr	r1, [r7, #20]
 8002f6a:	f001 fe6d 	bl	8004c48 <USB_EP0StartXfer>
 8002f6e:	e008      	b.n	8002f82 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	6818      	ldr	r0, [r3, #0]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	691b      	ldr	r3, [r3, #16]
 8002f78:	b2db      	uxtb	r3, r3
 8002f7a:	461a      	mov	r2, r3
 8002f7c:	6979      	ldr	r1, [r7, #20]
 8002f7e:	f001 fc1b 	bl	80047b8 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002f82:	2300      	movs	r3, #0
}
 8002f84:	4618      	mov	r0, r3
 8002f86:	3718      	adds	r7, #24
 8002f88:	46bd      	mov	sp, r7
 8002f8a:	bd80      	pop	{r7, pc}

08002f8c <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002f8c:	b580      	push	{r7, lr}
 8002f8e:	b084      	sub	sp, #16
 8002f90:	af00      	add	r7, sp, #0
 8002f92:	6078      	str	r0, [r7, #4]
 8002f94:	460b      	mov	r3, r1
 8002f96:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002f98:	78fb      	ldrb	r3, [r7, #3]
 8002f9a:	f003 020f 	and.w	r2, r3, #15
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	429a      	cmp	r2, r3
 8002fa4:	d901      	bls.n	8002faa <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8002fa6:	2301      	movs	r3, #1
 8002fa8:	e050      	b.n	800304c <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002faa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	da0f      	bge.n	8002fd2 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002fb2:	78fb      	ldrb	r3, [r7, #3]
 8002fb4:	f003 020f 	and.w	r2, r3, #15
 8002fb8:	4613      	mov	r3, r2
 8002fba:	00db      	lsls	r3, r3, #3
 8002fbc:	4413      	add	r3, r2
 8002fbe:	009b      	lsls	r3, r3, #2
 8002fc0:	3338      	adds	r3, #56	; 0x38
 8002fc2:	687a      	ldr	r2, [r7, #4]
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3304      	adds	r3, #4
 8002fc8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	705a      	strb	r2, [r3, #1]
 8002fd0:	e00d      	b.n	8002fee <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8002fd2:	78fa      	ldrb	r2, [r7, #3]
 8002fd4:	4613      	mov	r3, r2
 8002fd6:	00db      	lsls	r3, r3, #3
 8002fd8:	4413      	add	r3, r2
 8002fda:	009b      	lsls	r3, r3, #2
 8002fdc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002fe0:	687a      	ldr	r2, [r7, #4]
 8002fe2:	4413      	add	r3, r2
 8002fe4:	3304      	adds	r3, #4
 8002fe6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	2200      	movs	r2, #0
 8002fec:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2201      	movs	r2, #1
 8002ff2:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002ff4:	78fb      	ldrb	r3, [r7, #3]
 8002ff6:	f003 030f 	and.w	r3, r3, #15
 8002ffa:	b2da      	uxtb	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003006:	2b01      	cmp	r3, #1
 8003008:	d101      	bne.n	800300e <HAL_PCD_EP_SetStall+0x82>
 800300a:	2302      	movs	r3, #2
 800300c:	e01e      	b.n	800304c <HAL_PCD_EP_SetStall+0xc0>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	2201      	movs	r2, #1
 8003012:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	68f9      	ldr	r1, [r7, #12]
 800301c:	4618      	mov	r0, r3
 800301e:	f002 f8ab 	bl	8005178 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003022:	78fb      	ldrb	r3, [r7, #3]
 8003024:	f003 030f 	and.w	r3, r3, #15
 8003028:	2b00      	cmp	r3, #0
 800302a:	d10a      	bne.n	8003042 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	6818      	ldr	r0, [r3, #0]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	b2d9      	uxtb	r1, r3
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800303c:	461a      	mov	r2, r3
 800303e:	f002 fa9b 	bl	8005578 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	2200      	movs	r2, #0
 8003046:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800304a:	2300      	movs	r3, #0
}
 800304c:	4618      	mov	r0, r3
 800304e:	3710      	adds	r7, #16
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}

08003054 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003054:	b580      	push	{r7, lr}
 8003056:	b084      	sub	sp, #16
 8003058:	af00      	add	r7, sp, #0
 800305a:	6078      	str	r0, [r7, #4]
 800305c:	460b      	mov	r3, r1
 800305e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8003060:	78fb      	ldrb	r3, [r7, #3]
 8003062:	f003 020f 	and.w	r2, r3, #15
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	429a      	cmp	r2, r3
 800306c:	d901      	bls.n	8003072 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 800306e:	2301      	movs	r3, #1
 8003070:	e042      	b.n	80030f8 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003072:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003076:	2b00      	cmp	r3, #0
 8003078:	da0f      	bge.n	800309a <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800307a:	78fb      	ldrb	r3, [r7, #3]
 800307c:	f003 020f 	and.w	r2, r3, #15
 8003080:	4613      	mov	r3, r2
 8003082:	00db      	lsls	r3, r3, #3
 8003084:	4413      	add	r3, r2
 8003086:	009b      	lsls	r3, r3, #2
 8003088:	3338      	adds	r3, #56	; 0x38
 800308a:	687a      	ldr	r2, [r7, #4]
 800308c:	4413      	add	r3, r2
 800308e:	3304      	adds	r3, #4
 8003090:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	2201      	movs	r2, #1
 8003096:	705a      	strb	r2, [r3, #1]
 8003098:	e00f      	b.n	80030ba <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800309a:	78fb      	ldrb	r3, [r7, #3]
 800309c:	f003 020f 	and.w	r2, r3, #15
 80030a0:	4613      	mov	r3, r2
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	009b      	lsls	r3, r3, #2
 80030a8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	4413      	add	r3, r2
 80030b0:	3304      	adds	r3, #4
 80030b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2200      	movs	r2, #0
 80030b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	2200      	movs	r2, #0
 80030be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80030c0:	78fb      	ldrb	r3, [r7, #3]
 80030c2:	f003 030f 	and.w	r3, r3, #15
 80030c6:	b2da      	uxtb	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80030d2:	2b01      	cmp	r3, #1
 80030d4:	d101      	bne.n	80030da <HAL_PCD_EP_ClrStall+0x86>
 80030d6:	2302      	movs	r3, #2
 80030d8:	e00e      	b.n	80030f8 <HAL_PCD_EP_ClrStall+0xa4>
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	2201      	movs	r2, #1
 80030de:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68f9      	ldr	r1, [r7, #12]
 80030e8:	4618      	mov	r0, r3
 80030ea:	f002 f8b3 	bl	8005254 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	2200      	movs	r2, #0
 80030f2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80030f6:	2300      	movs	r3, #0
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b084      	sub	sp, #16
 8003104:	af00      	add	r7, sp, #0
 8003106:	6078      	str	r0, [r7, #4]
 8003108:	460b      	mov	r3, r1
 800310a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800310c:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003110:	2b00      	cmp	r3, #0
 8003112:	da0c      	bge.n	800312e <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003114:	78fb      	ldrb	r3, [r7, #3]
 8003116:	f003 020f 	and.w	r2, r3, #15
 800311a:	4613      	mov	r3, r2
 800311c:	00db      	lsls	r3, r3, #3
 800311e:	4413      	add	r3, r2
 8003120:	009b      	lsls	r3, r3, #2
 8003122:	3338      	adds	r3, #56	; 0x38
 8003124:	687a      	ldr	r2, [r7, #4]
 8003126:	4413      	add	r3, r2
 8003128:	3304      	adds	r3, #4
 800312a:	60fb      	str	r3, [r7, #12]
 800312c:	e00c      	b.n	8003148 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800312e:	78fb      	ldrb	r3, [r7, #3]
 8003130:	f003 020f 	and.w	r2, r3, #15
 8003134:	4613      	mov	r3, r2
 8003136:	00db      	lsls	r3, r3, #3
 8003138:	4413      	add	r3, r2
 800313a:	009b      	lsls	r3, r3, #2
 800313c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003140:	687a      	ldr	r2, [r7, #4]
 8003142:	4413      	add	r3, r2
 8003144:	3304      	adds	r3, #4
 8003146:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	68f9      	ldr	r1, [r7, #12]
 800314e:	4618      	mov	r0, r3
 8003150:	f001 fed2 	bl	8004ef8 <USB_EPStopXfer>
 8003154:	4603      	mov	r3, r0
 8003156:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003158:	7afb      	ldrb	r3, [r7, #11]
}
 800315a:	4618      	mov	r0, r3
 800315c:	3710      	adds	r7, #16
 800315e:	46bd      	mov	sp, r7
 8003160:	bd80      	pop	{r7, pc}

08003162 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003162:	b580      	push	{r7, lr}
 8003164:	b08a      	sub	sp, #40	; 0x28
 8003166:	af02      	add	r7, sp, #8
 8003168:	6078      	str	r0, [r7, #4]
 800316a:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003172:	697b      	ldr	r3, [r7, #20]
 8003174:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8003176:	683a      	ldr	r2, [r7, #0]
 8003178:	4613      	mov	r3, r2
 800317a:	00db      	lsls	r3, r3, #3
 800317c:	4413      	add	r3, r2
 800317e:	009b      	lsls	r3, r3, #2
 8003180:	3338      	adds	r3, #56	; 0x38
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	4413      	add	r3, r2
 8003186:	3304      	adds	r3, #4
 8003188:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	6a1a      	ldr	r2, [r3, #32]
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	699b      	ldr	r3, [r3, #24]
 8003192:	429a      	cmp	r2, r3
 8003194:	d901      	bls.n	800319a <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003196:	2301      	movs	r3, #1
 8003198:	e06c      	b.n	8003274 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	699a      	ldr	r2, [r3, #24]
 800319e:	68fb      	ldr	r3, [r7, #12]
 80031a0:	6a1b      	ldr	r3, [r3, #32]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	68db      	ldr	r3, [r3, #12]
 80031aa:	69fa      	ldr	r2, [r7, #28]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d902      	bls.n	80031b6 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	3303      	adds	r3, #3
 80031ba:	089b      	lsrs	r3, r3, #2
 80031bc:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80031be:	e02b      	b.n	8003218 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	699a      	ldr	r2, [r3, #24]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	1ad3      	subs	r3, r2, r3
 80031ca:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	68db      	ldr	r3, [r3, #12]
 80031d0:	69fa      	ldr	r2, [r7, #28]
 80031d2:	429a      	cmp	r2, r3
 80031d4:	d902      	bls.n	80031dc <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	68db      	ldr	r3, [r3, #12]
 80031da:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80031dc:	69fb      	ldr	r3, [r7, #28]
 80031de:	3303      	adds	r3, #3
 80031e0:	089b      	lsrs	r3, r3, #2
 80031e2:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	6919      	ldr	r1, [r3, #16]
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	b2da      	uxtb	r2, r3
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80031f4:	b2db      	uxtb	r3, r3
 80031f6:	9300      	str	r3, [sp, #0]
 80031f8:	4603      	mov	r3, r0
 80031fa:	6978      	ldr	r0, [r7, #20]
 80031fc:	f001 ff26 	bl	800504c <USB_WritePacket>

    ep->xfer_buff  += len;
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	691a      	ldr	r2, [r3, #16]
 8003204:	69fb      	ldr	r3, [r7, #28]
 8003206:	441a      	add	r2, r3
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	6a1a      	ldr	r2, [r3, #32]
 8003210:	69fb      	ldr	r3, [r7, #28]
 8003212:	441a      	add	r2, r3
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	015a      	lsls	r2, r3, #5
 800321c:	693b      	ldr	r3, [r7, #16]
 800321e:	4413      	add	r3, r2
 8003220:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	b29b      	uxth	r3, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	429a      	cmp	r2, r3
 800322c:	d809      	bhi.n	8003242 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	6a1a      	ldr	r2, [r3, #32]
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003236:	429a      	cmp	r2, r3
 8003238:	d203      	bcs.n	8003242 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	699b      	ldr	r3, [r3, #24]
 800323e:	2b00      	cmp	r3, #0
 8003240:	d1be      	bne.n	80031c0 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	699a      	ldr	r2, [r3, #24]
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	6a1b      	ldr	r3, [r3, #32]
 800324a:	429a      	cmp	r2, r3
 800324c:	d811      	bhi.n	8003272 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800324e:	683b      	ldr	r3, [r7, #0]
 8003250:	f003 030f 	and.w	r3, r3, #15
 8003254:	2201      	movs	r2, #1
 8003256:	fa02 f303 	lsl.w	r3, r2, r3
 800325a:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800325c:	693b      	ldr	r3, [r7, #16]
 800325e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003262:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003264:	68bb      	ldr	r3, [r7, #8]
 8003266:	43db      	mvns	r3, r3
 8003268:	6939      	ldr	r1, [r7, #16]
 800326a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800326e:	4013      	ands	r3, r2
 8003270:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8003272:	2300      	movs	r3, #0
}
 8003274:	4618      	mov	r0, r3
 8003276:	3720      	adds	r7, #32
 8003278:	46bd      	mov	sp, r7
 800327a:	bd80      	pop	{r7, pc}

0800327c <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800327c:	b580      	push	{r7, lr}
 800327e:	b088      	sub	sp, #32
 8003280:	af00      	add	r7, sp, #0
 8003282:	6078      	str	r0, [r7, #4]
 8003284:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	333c      	adds	r3, #60	; 0x3c
 8003294:	3304      	adds	r3, #4
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800329a:	683b      	ldr	r3, [r7, #0]
 800329c:	015a      	lsls	r2, r3, #5
 800329e:	69bb      	ldr	r3, [r7, #24]
 80032a0:	4413      	add	r3, r2
 80032a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032a6:	689b      	ldr	r3, [r3, #8]
 80032a8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	691b      	ldr	r3, [r3, #16]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d17b      	bne.n	80033aa <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80032b2:	693b      	ldr	r3, [r7, #16]
 80032b4:	f003 0308 	and.w	r3, r3, #8
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d015      	beq.n	80032e8 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	4a61      	ldr	r2, [pc, #388]	; (8003444 <PCD_EP_OutXfrComplete_int+0x1c8>)
 80032c0:	4293      	cmp	r3, r2
 80032c2:	f240 80b9 	bls.w	8003438 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80032c6:	693b      	ldr	r3, [r7, #16]
 80032c8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	f000 80b3 	beq.w	8003438 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80032d2:	683b      	ldr	r3, [r7, #0]
 80032d4:	015a      	lsls	r2, r3, #5
 80032d6:	69bb      	ldr	r3, [r7, #24]
 80032d8:	4413      	add	r3, r2
 80032da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032de:	461a      	mov	r2, r3
 80032e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80032e4:	6093      	str	r3, [r2, #8]
 80032e6:	e0a7      	b.n	8003438 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80032e8:	693b      	ldr	r3, [r7, #16]
 80032ea:	f003 0320 	and.w	r3, r3, #32
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d009      	beq.n	8003306 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	015a      	lsls	r2, r3, #5
 80032f6:	69bb      	ldr	r3, [r7, #24]
 80032f8:	4413      	add	r3, r2
 80032fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80032fe:	461a      	mov	r2, r3
 8003300:	2320      	movs	r3, #32
 8003302:	6093      	str	r3, [r2, #8]
 8003304:	e098      	b.n	8003438 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003306:	693b      	ldr	r3, [r7, #16]
 8003308:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800330c:	2b00      	cmp	r3, #0
 800330e:	f040 8093 	bne.w	8003438 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003312:	697b      	ldr	r3, [r7, #20]
 8003314:	4a4b      	ldr	r2, [pc, #300]	; (8003444 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003316:	4293      	cmp	r3, r2
 8003318:	d90f      	bls.n	800333a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003320:	2b00      	cmp	r3, #0
 8003322:	d00a      	beq.n	800333a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	015a      	lsls	r2, r3, #5
 8003328:	69bb      	ldr	r3, [r7, #24]
 800332a:	4413      	add	r3, r2
 800332c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003330:	461a      	mov	r2, r3
 8003332:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003336:	6093      	str	r3, [r2, #8]
 8003338:	e07e      	b.n	8003438 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800333a:	683a      	ldr	r2, [r7, #0]
 800333c:	4613      	mov	r3, r2
 800333e:	00db      	lsls	r3, r3, #3
 8003340:	4413      	add	r3, r2
 8003342:	009b      	lsls	r3, r3, #2
 8003344:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003348:	687a      	ldr	r2, [r7, #4]
 800334a:	4413      	add	r3, r2
 800334c:	3304      	adds	r3, #4
 800334e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	69da      	ldr	r2, [r3, #28]
 8003354:	683b      	ldr	r3, [r7, #0]
 8003356:	0159      	lsls	r1, r3, #5
 8003358:	69bb      	ldr	r3, [r7, #24]
 800335a:	440b      	add	r3, r1
 800335c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003360:	691b      	ldr	r3, [r3, #16]
 8003362:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003366:	1ad2      	subs	r2, r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 800336c:	683b      	ldr	r3, [r7, #0]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d114      	bne.n	800339c <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	699b      	ldr	r3, [r3, #24]
 8003376:	2b00      	cmp	r3, #0
 8003378:	d109      	bne.n	800338e <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	6818      	ldr	r0, [r3, #0]
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003384:	461a      	mov	r2, r3
 8003386:	2101      	movs	r1, #1
 8003388:	f002 f8f6 	bl	8005578 <USB_EP0_OutStart>
 800338c:	e006      	b.n	800339c <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	691a      	ldr	r2, [r3, #16]
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	6a1b      	ldr	r3, [r3, #32]
 8003396:	441a      	add	r2, r3
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800339c:	683b      	ldr	r3, [r7, #0]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	4619      	mov	r1, r3
 80033a2:	6878      	ldr	r0, [r7, #4]
 80033a4:	f004 f846 	bl	8007434 <HAL_PCD_DataOutStageCallback>
 80033a8:	e046      	b.n	8003438 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80033aa:	697b      	ldr	r3, [r7, #20]
 80033ac:	4a26      	ldr	r2, [pc, #152]	; (8003448 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d124      	bne.n	80033fc <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80033b2:	693b      	ldr	r3, [r7, #16]
 80033b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d00a      	beq.n	80033d2 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80033bc:	683b      	ldr	r3, [r7, #0]
 80033be:	015a      	lsls	r2, r3, #5
 80033c0:	69bb      	ldr	r3, [r7, #24]
 80033c2:	4413      	add	r3, r2
 80033c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033c8:	461a      	mov	r2, r3
 80033ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80033ce:	6093      	str	r3, [r2, #8]
 80033d0:	e032      	b.n	8003438 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 80033d2:	693b      	ldr	r3, [r7, #16]
 80033d4:	f003 0320 	and.w	r3, r3, #32
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d008      	beq.n	80033ee <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	015a      	lsls	r2, r3, #5
 80033e0:	69bb      	ldr	r3, [r7, #24]
 80033e2:	4413      	add	r3, r2
 80033e4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80033e8:	461a      	mov	r2, r3
 80033ea:	2320      	movs	r3, #32
 80033ec:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80033ee:	683b      	ldr	r3, [r7, #0]
 80033f0:	b2db      	uxtb	r3, r3
 80033f2:	4619      	mov	r1, r3
 80033f4:	6878      	ldr	r0, [r7, #4]
 80033f6:	f004 f81d 	bl	8007434 <HAL_PCD_DataOutStageCallback>
 80033fa:	e01d      	b.n	8003438 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d114      	bne.n	800342c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003402:	6879      	ldr	r1, [r7, #4]
 8003404:	683a      	ldr	r2, [r7, #0]
 8003406:	4613      	mov	r3, r2
 8003408:	00db      	lsls	r3, r3, #3
 800340a:	4413      	add	r3, r2
 800340c:	009b      	lsls	r3, r3, #2
 800340e:	440b      	add	r3, r1
 8003410:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	2b00      	cmp	r3, #0
 8003418:	d108      	bne.n	800342c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	6818      	ldr	r0, [r3, #0]
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003424:	461a      	mov	r2, r3
 8003426:	2100      	movs	r1, #0
 8003428:	f002 f8a6 	bl	8005578 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800342c:	683b      	ldr	r3, [r7, #0]
 800342e:	b2db      	uxtb	r3, r3
 8003430:	4619      	mov	r1, r3
 8003432:	6878      	ldr	r0, [r7, #4]
 8003434:	f003 fffe 	bl	8007434 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003438:	2300      	movs	r3, #0
}
 800343a:	4618      	mov	r0, r3
 800343c:	3720      	adds	r7, #32
 800343e:	46bd      	mov	sp, r7
 8003440:	bd80      	pop	{r7, pc}
 8003442:	bf00      	nop
 8003444:	4f54300a 	.word	0x4f54300a
 8003448:	4f54310a 	.word	0x4f54310a

0800344c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800344c:	b580      	push	{r7, lr}
 800344e:	b086      	sub	sp, #24
 8003450:	af00      	add	r7, sp, #0
 8003452:	6078      	str	r0, [r7, #4]
 8003454:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800345c:	697b      	ldr	r3, [r7, #20]
 800345e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003460:	697b      	ldr	r3, [r7, #20]
 8003462:	333c      	adds	r3, #60	; 0x3c
 8003464:	3304      	adds	r3, #4
 8003466:	681b      	ldr	r3, [r3, #0]
 8003468:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	015a      	lsls	r2, r3, #5
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	4413      	add	r3, r2
 8003472:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	4a15      	ldr	r2, [pc, #84]	; (80034d4 <PCD_EP_OutSetupPacket_int+0x88>)
 800347e:	4293      	cmp	r3, r2
 8003480:	d90e      	bls.n	80034a0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003488:	2b00      	cmp	r3, #0
 800348a:	d009      	beq.n	80034a0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	015a      	lsls	r2, r3, #5
 8003490:	693b      	ldr	r3, [r7, #16]
 8003492:	4413      	add	r3, r2
 8003494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003498:	461a      	mov	r2, r3
 800349a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800349e:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80034a0:	6878      	ldr	r0, [r7, #4]
 80034a2:	f003 ffb5 	bl	8007410 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	4a0a      	ldr	r2, [pc, #40]	; (80034d4 <PCD_EP_OutSetupPacket_int+0x88>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d90c      	bls.n	80034c8 <PCD_EP_OutSetupPacket_int+0x7c>
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	691b      	ldr	r3, [r3, #16]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d108      	bne.n	80034c8 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80034c0:	461a      	mov	r2, r3
 80034c2:	2101      	movs	r1, #1
 80034c4:	f002 f858 	bl	8005578 <USB_EP0_OutStart>
  }

  return HAL_OK;
 80034c8:	2300      	movs	r3, #0
}
 80034ca:	4618      	mov	r0, r3
 80034cc:	3718      	adds	r7, #24
 80034ce:	46bd      	mov	sp, r7
 80034d0:	bd80      	pop	{r7, pc}
 80034d2:	bf00      	nop
 80034d4:	4f54300a 	.word	0x4f54300a

080034d8 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 80034d8:	b480      	push	{r7}
 80034da:	b085      	sub	sp, #20
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
 80034e0:	460b      	mov	r3, r1
 80034e2:	70fb      	strb	r3, [r7, #3]
 80034e4:	4613      	mov	r3, r2
 80034e6:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034ee:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 80034f0:	78fb      	ldrb	r3, [r7, #3]
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d107      	bne.n	8003506 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 80034f6:	883b      	ldrh	r3, [r7, #0]
 80034f8:	0419      	lsls	r1, r3, #16
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	68ba      	ldr	r2, [r7, #8]
 8003500:	430a      	orrs	r2, r1
 8003502:	629a      	str	r2, [r3, #40]	; 0x28
 8003504:	e028      	b.n	8003558 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800350c:	0c1b      	lsrs	r3, r3, #16
 800350e:	68ba      	ldr	r2, [r7, #8]
 8003510:	4413      	add	r3, r2
 8003512:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003514:	2300      	movs	r3, #0
 8003516:	73fb      	strb	r3, [r7, #15]
 8003518:	e00d      	b.n	8003536 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	7bfb      	ldrb	r3, [r7, #15]
 8003520:	3340      	adds	r3, #64	; 0x40
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	4413      	add	r3, r2
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	68ba      	ldr	r2, [r7, #8]
 800352c:	4413      	add	r3, r2
 800352e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003530:	7bfb      	ldrb	r3, [r7, #15]
 8003532:	3301      	adds	r3, #1
 8003534:	73fb      	strb	r3, [r7, #15]
 8003536:	7bfa      	ldrb	r2, [r7, #15]
 8003538:	78fb      	ldrb	r3, [r7, #3]
 800353a:	3b01      	subs	r3, #1
 800353c:	429a      	cmp	r2, r3
 800353e:	d3ec      	bcc.n	800351a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003540:	883b      	ldrh	r3, [r7, #0]
 8003542:	0418      	lsls	r0, r3, #16
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	6819      	ldr	r1, [r3, #0]
 8003548:	78fb      	ldrb	r3, [r7, #3]
 800354a:	3b01      	subs	r3, #1
 800354c:	68ba      	ldr	r2, [r7, #8]
 800354e:	4302      	orrs	r2, r0
 8003550:	3340      	adds	r3, #64	; 0x40
 8003552:	009b      	lsls	r3, r3, #2
 8003554:	440b      	add	r3, r1
 8003556:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003558:	2300      	movs	r3, #0
}
 800355a:	4618      	mov	r0, r3
 800355c:	3714      	adds	r7, #20
 800355e:	46bd      	mov	sp, r7
 8003560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003564:	4770      	bx	lr

08003566 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003566:	b480      	push	{r7}
 8003568:	b083      	sub	sp, #12
 800356a:	af00      	add	r7, sp, #0
 800356c:	6078      	str	r0, [r7, #4]
 800356e:	460b      	mov	r3, r1
 8003570:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	887a      	ldrh	r2, [r7, #2]
 8003578:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 800357a:	2300      	movs	r3, #0
}
 800357c:	4618      	mov	r0, r3
 800357e:	370c      	adds	r7, #12
 8003580:	46bd      	mov	sp, r7
 8003582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003586:	4770      	bx	lr

08003588 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	6078      	str	r0, [r7, #4]
 8003590:	460b      	mov	r3, r1
 8003592:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003594:	bf00      	nop
 8003596:	370c      	adds	r7, #12
 8003598:	46bd      	mov	sp, r7
 800359a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359e:	4770      	bx	lr

080035a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e267      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d075      	beq.n	80036aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035be:	4b88      	ldr	r3, [pc, #544]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d00c      	beq.n	80035e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ca:	4b85      	ldr	r3, [pc, #532]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d112      	bne.n	80035fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d6:	4b82      	ldr	r3, [pc, #520]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80035de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80035e2:	d10b      	bne.n	80035fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	4b7e      	ldr	r3, [pc, #504]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d05b      	beq.n	80036a8 <HAL_RCC_OscConfig+0x108>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d157      	bne.n	80036a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e242      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003604:	d106      	bne.n	8003614 <HAL_RCC_OscConfig+0x74>
 8003606:	4b76      	ldr	r3, [pc, #472]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a75      	ldr	r2, [pc, #468]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e01d      	b.n	8003650 <HAL_RCC_OscConfig+0xb0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800361c:	d10c      	bne.n	8003638 <HAL_RCC_OscConfig+0x98>
 800361e:	4b70      	ldr	r3, [pc, #448]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a6f      	ldr	r2, [pc, #444]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003624:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	4b6d      	ldr	r3, [pc, #436]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a6c      	ldr	r2, [pc, #432]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e00b      	b.n	8003650 <HAL_RCC_OscConfig+0xb0>
 8003638:	4b69      	ldr	r3, [pc, #420]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a68      	ldr	r2, [pc, #416]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 800363e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b66      	ldr	r3, [pc, #408]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a65      	ldr	r2, [pc, #404]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 800364a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800364e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d013      	beq.n	8003680 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7fd fb92 	bl	8000d80 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003660:	f7fd fb8e 	bl	8000d80 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	; 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e207      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003672:	4b5b      	ldr	r3, [pc, #364]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0xc0>
 800367e:	e014      	b.n	80036aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003680:	f7fd fb7e 	bl	8000d80 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003688:	f7fd fb7a 	bl	8000d80 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	; 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e1f3      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369a:	4b51      	ldr	r3, [pc, #324]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0xe8>
 80036a6:	e000      	b.n	80036aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d063      	beq.n	800377e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036b6:	4b4a      	ldr	r3, [pc, #296]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036c2:	4b47      	ldr	r3, [pc, #284]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d11c      	bne.n	8003708 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ce:	4b44      	ldr	r3, [pc, #272]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d116      	bne.n	8003708 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036da:	4b41      	ldr	r3, [pc, #260]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_RCC_OscConfig+0x152>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d001      	beq.n	80036f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e1c7      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f2:	4b3b      	ldr	r3, [pc, #236]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4937      	ldr	r1, [pc, #220]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003702:	4313      	orrs	r3, r2
 8003704:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003706:	e03a      	b.n	800377e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d020      	beq.n	8003752 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003710:	4b34      	ldr	r3, [pc, #208]	; (80037e4 <HAL_RCC_OscConfig+0x244>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7fd fb33 	bl	8000d80 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800371e:	f7fd fb2f 	bl	8000d80 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e1a8      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003730:	4b2b      	ldr	r3, [pc, #172]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373c:	4b28      	ldr	r3, [pc, #160]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4925      	ldr	r1, [pc, #148]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 800374c:	4313      	orrs	r3, r2
 800374e:	600b      	str	r3, [r1, #0]
 8003750:	e015      	b.n	800377e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003752:	4b24      	ldr	r3, [pc, #144]	; (80037e4 <HAL_RCC_OscConfig+0x244>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7fd fb12 	bl	8000d80 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003760:	f7fd fb0e 	bl	8000d80 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e187      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003772:	4b1b      	ldr	r3, [pc, #108]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d036      	beq.n	80037f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d016      	beq.n	80037c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003792:	4b15      	ldr	r3, [pc, #84]	; (80037e8 <HAL_RCC_OscConfig+0x248>)
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003798:	f7fd faf2 	bl	8000d80 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037a0:	f7fd faee 	bl	8000d80 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e167      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b2:	4b0b      	ldr	r3, [pc, #44]	; (80037e0 <HAL_RCC_OscConfig+0x240>)
 80037b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x200>
 80037be:	e01b      	b.n	80037f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c0:	4b09      	ldr	r3, [pc, #36]	; (80037e8 <HAL_RCC_OscConfig+0x248>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c6:	f7fd fadb 	bl	8000d80 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	e00e      	b.n	80037ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037ce:	f7fd fad7 	bl	8000d80 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d907      	bls.n	80037ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e150      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
 80037e0:	40023800 	.word	0x40023800
 80037e4:	42470000 	.word	0x42470000
 80037e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ec:	4b88      	ldr	r3, [pc, #544]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80037ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ea      	bne.n	80037ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8097 	beq.w	8003934 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003806:	2300      	movs	r3, #0
 8003808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800380a:	4b81      	ldr	r3, [pc, #516]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800380e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10f      	bne.n	8003836 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	4b7d      	ldr	r3, [pc, #500]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800381e:	4a7c      	ldr	r2, [pc, #496]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003820:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003824:	6413      	str	r3, [r2, #64]	; 0x40
 8003826:	4b7a      	ldr	r3, [pc, #488]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800382a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003836:	4b77      	ldr	r3, [pc, #476]	; (8003a14 <HAL_RCC_OscConfig+0x474>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d118      	bne.n	8003874 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003842:	4b74      	ldr	r3, [pc, #464]	; (8003a14 <HAL_RCC_OscConfig+0x474>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a73      	ldr	r2, [pc, #460]	; (8003a14 <HAL_RCC_OscConfig+0x474>)
 8003848:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800384c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384e:	f7fd fa97 	bl	8000d80 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003856:	f7fd fa93 	bl	8000d80 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e10c      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003868:	4b6a      	ldr	r3, [pc, #424]	; (8003a14 <HAL_RCC_OscConfig+0x474>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f0      	beq.n	8003856 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d106      	bne.n	800388a <HAL_RCC_OscConfig+0x2ea>
 800387c:	4b64      	ldr	r3, [pc, #400]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003880:	4a63      	ldr	r2, [pc, #396]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6713      	str	r3, [r2, #112]	; 0x70
 8003888:	e01c      	b.n	80038c4 <HAL_RCC_OscConfig+0x324>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b05      	cmp	r3, #5
 8003890:	d10c      	bne.n	80038ac <HAL_RCC_OscConfig+0x30c>
 8003892:	4b5f      	ldr	r3, [pc, #380]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003896:	4a5e      	ldr	r2, [pc, #376]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003898:	f043 0304 	orr.w	r3, r3, #4
 800389c:	6713      	str	r3, [r2, #112]	; 0x70
 800389e:	4b5c      	ldr	r3, [pc, #368]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038a2:	4a5b      	ldr	r2, [pc, #364]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6713      	str	r3, [r2, #112]	; 0x70
 80038aa:	e00b      	b.n	80038c4 <HAL_RCC_OscConfig+0x324>
 80038ac:	4b58      	ldr	r3, [pc, #352]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	4a57      	ldr	r2, [pc, #348]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	6713      	str	r3, [r2, #112]	; 0x70
 80038b8:	4b55      	ldr	r3, [pc, #340]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038bc:	4a54      	ldr	r2, [pc, #336]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038be:	f023 0304 	bic.w	r3, r3, #4
 80038c2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d015      	beq.n	80038f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038cc:	f7fd fa58 	bl	8000d80 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80038d4:	f7fd fa54 	bl	8000d80 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	; 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e0cb      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ea:	4b49      	ldr	r3, [pc, #292]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0ee      	beq.n	80038d4 <HAL_RCC_OscConfig+0x334>
 80038f6:	e014      	b.n	8003922 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f8:	f7fd fa42 	bl	8000d80 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003900:	f7fd fa3e 	bl	8000d80 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	; 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e0b5      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003916:	4b3e      	ldr	r3, [pc, #248]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1ee      	bne.n	8003900 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003922:	7dfb      	ldrb	r3, [r7, #23]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d105      	bne.n	8003934 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003928:	4b39      	ldr	r3, [pc, #228]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	4a38      	ldr	r2, [pc, #224]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 800392e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003932:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 80a1 	beq.w	8003a80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800393e:	4b34      	ldr	r3, [pc, #208]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b08      	cmp	r3, #8
 8003948:	d05c      	beq.n	8003a04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d141      	bne.n	80039d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003952:	4b31      	ldr	r3, [pc, #196]	; (8003a18 <HAL_RCC_OscConfig+0x478>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7fd fa12 	bl	8000d80 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003960:	f7fd fa0e 	bl	8000d80 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e087      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	4b27      	ldr	r3, [pc, #156]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69da      	ldr	r2, [r3, #28]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800398c:	019b      	lsls	r3, r3, #6
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003994:	085b      	lsrs	r3, r3, #1
 8003996:	3b01      	subs	r3, #1
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039a0:	061b      	lsls	r3, r3, #24
 80039a2:	491b      	ldr	r1, [pc, #108]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a8:	4b1b      	ldr	r3, [pc, #108]	; (8003a18 <HAL_RCC_OscConfig+0x478>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ae:	f7fd f9e7 	bl	8000d80 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039b6:	f7fd f9e3 	bl	8000d80 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e05c      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c8:	4b11      	ldr	r3, [pc, #68]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x416>
 80039d4:	e054      	b.n	8003a80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d6:	4b10      	ldr	r3, [pc, #64]	; (8003a18 <HAL_RCC_OscConfig+0x478>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039dc:	f7fd f9d0 	bl	8000d80 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e4:	f7fd f9cc 	bl	8000d80 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e045      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	4b06      	ldr	r3, [pc, #24]	; (8003a10 <HAL_RCC_OscConfig+0x470>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x444>
 8003a02:	e03d      	b.n	8003a80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e038      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40007000 	.word	0x40007000
 8003a18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	; (8003a8c <HAL_RCC_OscConfig+0x4ec>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d028      	beq.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d121      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d11a      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d111      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a62:	085b      	lsrs	r3, r3, #1
 8003a64:	3b01      	subs	r3, #1
 8003a66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d107      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023800 	.word	0x40023800

08003a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0cc      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa4:	4b68      	ldr	r3, [pc, #416]	; (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d90c      	bls.n	8003acc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab2:	4b65      	ldr	r3, [pc, #404]	; (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b63      	ldr	r3, [pc, #396]	; (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0b8      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d020      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae4:	4b59      	ldr	r3, [pc, #356]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	4a58      	ldr	r2, [pc, #352]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003aee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003afc:	4b53      	ldr	r3, [pc, #332]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4a52      	ldr	r2, [pc, #328]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b08:	4b50      	ldr	r3, [pc, #320]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	494d      	ldr	r1, [pc, #308]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d044      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2e:	4b47      	ldr	r3, [pc, #284]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d119      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e07f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d003      	beq.n	8003b4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d107      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4e:	4b3f      	ldr	r3, [pc, #252]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d109      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e06f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5e:	4b3b      	ldr	r3, [pc, #236]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e067      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b6e:	4b37      	ldr	r3, [pc, #220]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f023 0203 	bic.w	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	4934      	ldr	r1, [pc, #208]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b80:	f7fd f8fe 	bl	8000d80 <HAL_GetTick>
 8003b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	e00a      	b.n	8003b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b88:	f7fd f8fa 	bl	8000d80 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e04f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	4b2b      	ldr	r3, [pc, #172]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 020c 	and.w	r2, r3, #12
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d1eb      	bne.n	8003b88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb0:	4b25      	ldr	r3, [pc, #148]	; (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d20c      	bcs.n	8003bd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bbe:	4b22      	ldr	r3, [pc, #136]	; (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc6:	4b20      	ldr	r3, [pc, #128]	; (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e032      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be4:	4b19      	ldr	r3, [pc, #100]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4916      	ldr	r1, [pc, #88]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c02:	4b12      	ldr	r3, [pc, #72]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	490e      	ldr	r1, [pc, #56]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c16:	f000 f821 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	; (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	490a      	ldr	r1, [pc, #40]	; (8003c50 <HAL_RCC_ClockConfig+0x1c0>)
 8003c28:	5ccb      	ldrb	r3, [r1, r3]
 8003c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2e:	4a09      	ldr	r2, [pc, #36]	; (8003c54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c32:	4b09      	ldr	r3, [pc, #36]	; (8003c58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7fd f85e 	bl	8000cf8 <HAL_InitTick>

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40023c00 	.word	0x40023c00
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	08007a10 	.word	0x08007a10
 8003c54:	20000028 	.word	0x20000028
 8003c58:	2000002c 	.word	0x2000002c

08003c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c60:	b090      	sub	sp, #64	; 0x40
 8003c62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	637b      	str	r3, [r7, #52]	; 0x34
 8003c68:	2300      	movs	r3, #0
 8003c6a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c74:	4b59      	ldr	r3, [pc, #356]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d00d      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0x40>
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	f200 80a1 	bhi.w	8003dc8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <HAL_RCC_GetSysClockFreq+0x34>
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c8e:	e09b      	b.n	8003dc8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c90:	4b53      	ldr	r3, [pc, #332]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003c92:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003c94:	e09b      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c96:	4b53      	ldr	r3, [pc, #332]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003c98:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003c9a:	e098      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c9c:	4b4f      	ldr	r3, [pc, #316]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003ca4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ca6:	4b4d      	ldr	r3, [pc, #308]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d028      	beq.n	8003d04 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb2:	4b4a      	ldr	r3, [pc, #296]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	099b      	lsrs	r3, r3, #6
 8003cb8:	2200      	movs	r2, #0
 8003cba:	623b      	str	r3, [r7, #32]
 8003cbc:	627a      	str	r2, [r7, #36]	; 0x24
 8003cbe:	6a3b      	ldr	r3, [r7, #32]
 8003cc0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cc4:	2100      	movs	r1, #0
 8003cc6:	4b47      	ldr	r3, [pc, #284]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cc8:	fb03 f201 	mul.w	r2, r3, r1
 8003ccc:	2300      	movs	r3, #0
 8003cce:	fb00 f303 	mul.w	r3, r0, r3
 8003cd2:	4413      	add	r3, r2
 8003cd4:	4a43      	ldr	r2, [pc, #268]	; (8003de4 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cd6:	fba0 1202 	umull	r1, r2, r0, r2
 8003cda:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003cdc:	460a      	mov	r2, r1
 8003cde:	62ba      	str	r2, [r7, #40]	; 0x28
 8003ce0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003ce2:	4413      	add	r3, r2
 8003ce4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ce6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ce8:	2200      	movs	r2, #0
 8003cea:	61bb      	str	r3, [r7, #24]
 8003cec:	61fa      	str	r2, [r7, #28]
 8003cee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cf2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003cf6:	f7fc fa6d 	bl	80001d4 <__aeabi_uldivmod>
 8003cfa:	4602      	mov	r2, r0
 8003cfc:	460b      	mov	r3, r1
 8003cfe:	4613      	mov	r3, r2
 8003d00:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d02:	e053      	b.n	8003dac <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d04:	4b35      	ldr	r3, [pc, #212]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8003d06:	685b      	ldr	r3, [r3, #4]
 8003d08:	099b      	lsrs	r3, r3, #6
 8003d0a:	2200      	movs	r2, #0
 8003d0c:	613b      	str	r3, [r7, #16]
 8003d0e:	617a      	str	r2, [r7, #20]
 8003d10:	693b      	ldr	r3, [r7, #16]
 8003d12:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d16:	f04f 0b00 	mov.w	fp, #0
 8003d1a:	4652      	mov	r2, sl
 8003d1c:	465b      	mov	r3, fp
 8003d1e:	f04f 0000 	mov.w	r0, #0
 8003d22:	f04f 0100 	mov.w	r1, #0
 8003d26:	0159      	lsls	r1, r3, #5
 8003d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d2c:	0150      	lsls	r0, r2, #5
 8003d2e:	4602      	mov	r2, r0
 8003d30:	460b      	mov	r3, r1
 8003d32:	ebb2 080a 	subs.w	r8, r2, sl
 8003d36:	eb63 090b 	sbc.w	r9, r3, fp
 8003d3a:	f04f 0200 	mov.w	r2, #0
 8003d3e:	f04f 0300 	mov.w	r3, #0
 8003d42:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d46:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d4a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d4e:	ebb2 0408 	subs.w	r4, r2, r8
 8003d52:	eb63 0509 	sbc.w	r5, r3, r9
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	f04f 0300 	mov.w	r3, #0
 8003d5e:	00eb      	lsls	r3, r5, #3
 8003d60:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d64:	00e2      	lsls	r2, r4, #3
 8003d66:	4614      	mov	r4, r2
 8003d68:	461d      	mov	r5, r3
 8003d6a:	eb14 030a 	adds.w	r3, r4, sl
 8003d6e:	603b      	str	r3, [r7, #0]
 8003d70:	eb45 030b 	adc.w	r3, r5, fp
 8003d74:	607b      	str	r3, [r7, #4]
 8003d76:	f04f 0200 	mov.w	r2, #0
 8003d7a:	f04f 0300 	mov.w	r3, #0
 8003d7e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003d82:	4629      	mov	r1, r5
 8003d84:	028b      	lsls	r3, r1, #10
 8003d86:	4621      	mov	r1, r4
 8003d88:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003d8c:	4621      	mov	r1, r4
 8003d8e:	028a      	lsls	r2, r1, #10
 8003d90:	4610      	mov	r0, r2
 8003d92:	4619      	mov	r1, r3
 8003d94:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d96:	2200      	movs	r2, #0
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	60fa      	str	r2, [r7, #12]
 8003d9c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003da0:	f7fc fa18 	bl	80001d4 <__aeabi_uldivmod>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4613      	mov	r3, r2
 8003daa:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003dac:	4b0b      	ldr	r3, [pc, #44]	; (8003ddc <HAL_RCC_GetSysClockFreq+0x180>)
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	0c1b      	lsrs	r3, r3, #16
 8003db2:	f003 0303 	and.w	r3, r3, #3
 8003db6:	3301      	adds	r3, #1
 8003db8:	005b      	lsls	r3, r3, #1
 8003dba:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003dbc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003dc0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dc4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dc6:	e002      	b.n	8003dce <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003dc8:	4b05      	ldr	r3, [pc, #20]	; (8003de0 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dca:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dcc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003dd0:	4618      	mov	r0, r3
 8003dd2:	3740      	adds	r7, #64	; 0x40
 8003dd4:	46bd      	mov	sp, r7
 8003dd6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003dda:	bf00      	nop
 8003ddc:	40023800 	.word	0x40023800
 8003de0:	00f42400 	.word	0x00f42400
 8003de4:	017d7840 	.word	0x017d7840

08003de8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003dec:	4b03      	ldr	r3, [pc, #12]	; (8003dfc <HAL_RCC_GetHCLKFreq+0x14>)
 8003dee:	681b      	ldr	r3, [r3, #0]
}
 8003df0:	4618      	mov	r0, r3
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
 8003dfa:	bf00      	nop
 8003dfc:	20000028 	.word	0x20000028

08003e00 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003e00:	b084      	sub	sp, #16
 8003e02:	b580      	push	{r7, lr}
 8003e04:	b084      	sub	sp, #16
 8003e06:	af00      	add	r7, sp, #0
 8003e08:	6078      	str	r0, [r7, #4]
 8003e0a:	f107 001c 	add.w	r0, r7, #28
 8003e0e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003e12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003e14:	2b01      	cmp	r3, #1
 8003e16:	d122      	bne.n	8003e5e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e1c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	68db      	ldr	r3, [r3, #12]
 8003e28:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003e2c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003e30:	687a      	ldr	r2, [r7, #4]
 8003e32:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	68db      	ldr	r3, [r3, #12]
 8003e38:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003e40:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003e42:	2b01      	cmp	r3, #1
 8003e44:	d105      	bne.n	8003e52 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e52:	6878      	ldr	r0, [r7, #4]
 8003e54:	f001 fbee 	bl	8005634 <USB_CoreReset>
 8003e58:	4603      	mov	r3, r0
 8003e5a:	73fb      	strb	r3, [r7, #15]
 8003e5c:	e01a      	b.n	8003e94 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	68db      	ldr	r3, [r3, #12]
 8003e62:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003e6a:	6878      	ldr	r0, [r7, #4]
 8003e6c:	f001 fbe2 	bl	8005634 <USB_CoreReset>
 8003e70:	4603      	mov	r3, r0
 8003e72:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 8003e74:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d106      	bne.n	8003e88 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e7e:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	639a      	str	r2, [r3, #56]	; 0x38
 8003e86:	e005      	b.n	8003e94 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e8c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8003e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003e96:	2b01      	cmp	r3, #1
 8003e98:	d10b      	bne.n	8003eb2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	689b      	ldr	r3, [r3, #8]
 8003e9e:	f043 0206 	orr.w	r2, r3, #6
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	689b      	ldr	r3, [r3, #8]
 8003eaa:	f043 0220 	orr.w	r2, r3, #32
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8003eb2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3710      	adds	r7, #16
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003ebe:	b004      	add	sp, #16
 8003ec0:	4770      	bx	lr
	...

08003ec4 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8003ec4:	b480      	push	{r7}
 8003ec6:	b087      	sub	sp, #28
 8003ec8:	af00      	add	r7, sp, #0
 8003eca:	60f8      	str	r0, [r7, #12]
 8003ecc:	60b9      	str	r1, [r7, #8]
 8003ece:	4613      	mov	r3, r2
 8003ed0:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8003ed2:	79fb      	ldrb	r3, [r7, #7]
 8003ed4:	2b02      	cmp	r3, #2
 8003ed6:	d165      	bne.n	8003fa4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	4a41      	ldr	r2, [pc, #260]	; (8003fe0 <USB_SetTurnaroundTime+0x11c>)
 8003edc:	4293      	cmp	r3, r2
 8003ede:	d906      	bls.n	8003eee <USB_SetTurnaroundTime+0x2a>
 8003ee0:	68bb      	ldr	r3, [r7, #8]
 8003ee2:	4a40      	ldr	r2, [pc, #256]	; (8003fe4 <USB_SetTurnaroundTime+0x120>)
 8003ee4:	4293      	cmp	r3, r2
 8003ee6:	d202      	bcs.n	8003eee <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003ee8:	230f      	movs	r3, #15
 8003eea:	617b      	str	r3, [r7, #20]
 8003eec:	e062      	b.n	8003fb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003eee:	68bb      	ldr	r3, [r7, #8]
 8003ef0:	4a3c      	ldr	r2, [pc, #240]	; (8003fe4 <USB_SetTurnaroundTime+0x120>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d306      	bcc.n	8003f04 <USB_SetTurnaroundTime+0x40>
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	4a3b      	ldr	r2, [pc, #236]	; (8003fe8 <USB_SetTurnaroundTime+0x124>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d202      	bcs.n	8003f04 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003efe:	230e      	movs	r3, #14
 8003f00:	617b      	str	r3, [r7, #20]
 8003f02:	e057      	b.n	8003fb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8003f04:	68bb      	ldr	r3, [r7, #8]
 8003f06:	4a38      	ldr	r2, [pc, #224]	; (8003fe8 <USB_SetTurnaroundTime+0x124>)
 8003f08:	4293      	cmp	r3, r2
 8003f0a:	d306      	bcc.n	8003f1a <USB_SetTurnaroundTime+0x56>
 8003f0c:	68bb      	ldr	r3, [r7, #8]
 8003f0e:	4a37      	ldr	r2, [pc, #220]	; (8003fec <USB_SetTurnaroundTime+0x128>)
 8003f10:	4293      	cmp	r3, r2
 8003f12:	d202      	bcs.n	8003f1a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8003f14:	230d      	movs	r3, #13
 8003f16:	617b      	str	r3, [r7, #20]
 8003f18:	e04c      	b.n	8003fb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003f1a:	68bb      	ldr	r3, [r7, #8]
 8003f1c:	4a33      	ldr	r2, [pc, #204]	; (8003fec <USB_SetTurnaroundTime+0x128>)
 8003f1e:	4293      	cmp	r3, r2
 8003f20:	d306      	bcc.n	8003f30 <USB_SetTurnaroundTime+0x6c>
 8003f22:	68bb      	ldr	r3, [r7, #8]
 8003f24:	4a32      	ldr	r2, [pc, #200]	; (8003ff0 <USB_SetTurnaroundTime+0x12c>)
 8003f26:	4293      	cmp	r3, r2
 8003f28:	d802      	bhi.n	8003f30 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003f2a:	230c      	movs	r3, #12
 8003f2c:	617b      	str	r3, [r7, #20]
 8003f2e:	e041      	b.n	8003fb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003f30:	68bb      	ldr	r3, [r7, #8]
 8003f32:	4a2f      	ldr	r2, [pc, #188]	; (8003ff0 <USB_SetTurnaroundTime+0x12c>)
 8003f34:	4293      	cmp	r3, r2
 8003f36:	d906      	bls.n	8003f46 <USB_SetTurnaroundTime+0x82>
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	4a2e      	ldr	r2, [pc, #184]	; (8003ff4 <USB_SetTurnaroundTime+0x130>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d802      	bhi.n	8003f46 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003f40:	230b      	movs	r3, #11
 8003f42:	617b      	str	r3, [r7, #20]
 8003f44:	e036      	b.n	8003fb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8003f46:	68bb      	ldr	r3, [r7, #8]
 8003f48:	4a2a      	ldr	r2, [pc, #168]	; (8003ff4 <USB_SetTurnaroundTime+0x130>)
 8003f4a:	4293      	cmp	r3, r2
 8003f4c:	d906      	bls.n	8003f5c <USB_SetTurnaroundTime+0x98>
 8003f4e:	68bb      	ldr	r3, [r7, #8]
 8003f50:	4a29      	ldr	r2, [pc, #164]	; (8003ff8 <USB_SetTurnaroundTime+0x134>)
 8003f52:	4293      	cmp	r3, r2
 8003f54:	d802      	bhi.n	8003f5c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8003f56:	230a      	movs	r3, #10
 8003f58:	617b      	str	r3, [r7, #20]
 8003f5a:	e02b      	b.n	8003fb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003f5c:	68bb      	ldr	r3, [r7, #8]
 8003f5e:	4a26      	ldr	r2, [pc, #152]	; (8003ff8 <USB_SetTurnaroundTime+0x134>)
 8003f60:	4293      	cmp	r3, r2
 8003f62:	d906      	bls.n	8003f72 <USB_SetTurnaroundTime+0xae>
 8003f64:	68bb      	ldr	r3, [r7, #8]
 8003f66:	4a25      	ldr	r2, [pc, #148]	; (8003ffc <USB_SetTurnaroundTime+0x138>)
 8003f68:	4293      	cmp	r3, r2
 8003f6a:	d202      	bcs.n	8003f72 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003f6c:	2309      	movs	r3, #9
 8003f6e:	617b      	str	r3, [r7, #20]
 8003f70:	e020      	b.n	8003fb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 8003f72:	68bb      	ldr	r3, [r7, #8]
 8003f74:	4a21      	ldr	r2, [pc, #132]	; (8003ffc <USB_SetTurnaroundTime+0x138>)
 8003f76:	4293      	cmp	r3, r2
 8003f78:	d306      	bcc.n	8003f88 <USB_SetTurnaroundTime+0xc4>
 8003f7a:	68bb      	ldr	r3, [r7, #8]
 8003f7c:	4a20      	ldr	r2, [pc, #128]	; (8004000 <USB_SetTurnaroundTime+0x13c>)
 8003f7e:	4293      	cmp	r3, r2
 8003f80:	d802      	bhi.n	8003f88 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 8003f82:	2308      	movs	r3, #8
 8003f84:	617b      	str	r3, [r7, #20]
 8003f86:	e015      	b.n	8003fb4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003f88:	68bb      	ldr	r3, [r7, #8]
 8003f8a:	4a1d      	ldr	r2, [pc, #116]	; (8004000 <USB_SetTurnaroundTime+0x13c>)
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d906      	bls.n	8003f9e <USB_SetTurnaroundTime+0xda>
 8003f90:	68bb      	ldr	r3, [r7, #8]
 8003f92:	4a1c      	ldr	r2, [pc, #112]	; (8004004 <USB_SetTurnaroundTime+0x140>)
 8003f94:	4293      	cmp	r3, r2
 8003f96:	d202      	bcs.n	8003f9e <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003f98:	2307      	movs	r3, #7
 8003f9a:	617b      	str	r3, [r7, #20]
 8003f9c:	e00a      	b.n	8003fb4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003f9e:	2306      	movs	r3, #6
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	e007      	b.n	8003fb4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8003fa4:	79fb      	ldrb	r3, [r7, #7]
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d102      	bne.n	8003fb0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003faa:	2309      	movs	r3, #9
 8003fac:	617b      	str	r3, [r7, #20]
 8003fae:	e001      	b.n	8003fb4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003fb0:	2309      	movs	r3, #9
 8003fb2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	68da      	ldr	r2, [r3, #12]
 8003fc4:	697b      	ldr	r3, [r7, #20]
 8003fc6:	029b      	lsls	r3, r3, #10
 8003fc8:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003fcc:	431a      	orrs	r2, r3
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8003fd2:	2300      	movs	r3, #0
}
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	371c      	adds	r7, #28
 8003fd8:	46bd      	mov	sp, r7
 8003fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fde:	4770      	bx	lr
 8003fe0:	00d8acbf 	.word	0x00d8acbf
 8003fe4:	00e4e1c0 	.word	0x00e4e1c0
 8003fe8:	00f42400 	.word	0x00f42400
 8003fec:	01067380 	.word	0x01067380
 8003ff0:	011a499f 	.word	0x011a499f
 8003ff4:	01312cff 	.word	0x01312cff
 8003ff8:	014ca43f 	.word	0x014ca43f
 8003ffc:	016e3600 	.word	0x016e3600
 8004000:	01a6ab1f 	.word	0x01a6ab1f
 8004004:	01e84800 	.word	0x01e84800

08004008 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004008:	b480      	push	{r7}
 800400a:	b083      	sub	sp, #12
 800400c:	af00      	add	r7, sp, #0
 800400e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	689b      	ldr	r3, [r3, #8]
 8004014:	f043 0201 	orr.w	r2, r3, #1
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800401c:	2300      	movs	r3, #0
}
 800401e:	4618      	mov	r0, r3
 8004020:	370c      	adds	r7, #12
 8004022:	46bd      	mov	sp, r7
 8004024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004028:	4770      	bx	lr

0800402a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800402a:	b480      	push	{r7}
 800402c:	b083      	sub	sp, #12
 800402e:	af00      	add	r7, sp, #0
 8004030:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f023 0201 	bic.w	r2, r3, #1
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800403e:	2300      	movs	r3, #0
}
 8004040:	4618      	mov	r0, r3
 8004042:	370c      	adds	r7, #12
 8004044:	46bd      	mov	sp, r7
 8004046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800404a:	4770      	bx	lr

0800404c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800404c:	b580      	push	{r7, lr}
 800404e:	b084      	sub	sp, #16
 8004050:	af00      	add	r7, sp, #0
 8004052:	6078      	str	r0, [r7, #4]
 8004054:	460b      	mov	r3, r1
 8004056:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004058:	2300      	movs	r3, #0
 800405a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	68db      	ldr	r3, [r3, #12]
 8004060:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004068:	78fb      	ldrb	r3, [r7, #3]
 800406a:	2b01      	cmp	r3, #1
 800406c:	d115      	bne.n	800409a <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	68db      	ldr	r3, [r3, #12]
 8004072:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 800407a:	2001      	movs	r0, #1
 800407c:	f7fc fe8c 	bl	8000d98 <HAL_Delay>
      ms++;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	3301      	adds	r3, #1
 8004084:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f001 fa45 	bl	8005516 <USB_GetMode>
 800408c:	4603      	mov	r3, r0
 800408e:	2b01      	cmp	r3, #1
 8004090:	d01e      	beq.n	80040d0 <USB_SetCurrentMode+0x84>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	2b31      	cmp	r3, #49	; 0x31
 8004096:	d9f0      	bls.n	800407a <USB_SetCurrentMode+0x2e>
 8004098:	e01a      	b.n	80040d0 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 800409a:	78fb      	ldrb	r3, [r7, #3]
 800409c:	2b00      	cmp	r3, #0
 800409e:	d115      	bne.n	80040cc <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	68db      	ldr	r3, [r3, #12]
 80040a4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80040ac:	2001      	movs	r0, #1
 80040ae:	f7fc fe73 	bl	8000d98 <HAL_Delay>
      ms++;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	3301      	adds	r3, #1
 80040b6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f001 fa2c 	bl	8005516 <USB_GetMode>
 80040be:	4603      	mov	r3, r0
 80040c0:	2b00      	cmp	r3, #0
 80040c2:	d005      	beq.n	80040d0 <USB_SetCurrentMode+0x84>
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2b31      	cmp	r3, #49	; 0x31
 80040c8:	d9f0      	bls.n	80040ac <USB_SetCurrentMode+0x60>
 80040ca:	e001      	b.n	80040d0 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80040cc:	2301      	movs	r3, #1
 80040ce:	e005      	b.n	80040dc <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2b32      	cmp	r3, #50	; 0x32
 80040d4:	d101      	bne.n	80040da <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e000      	b.n	80040dc <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80040da:	2300      	movs	r3, #0
}
 80040dc:	4618      	mov	r0, r3
 80040de:	3710      	adds	r7, #16
 80040e0:	46bd      	mov	sp, r7
 80040e2:	bd80      	pop	{r7, pc}

080040e4 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80040e4:	b084      	sub	sp, #16
 80040e6:	b580      	push	{r7, lr}
 80040e8:	b086      	sub	sp, #24
 80040ea:	af00      	add	r7, sp, #0
 80040ec:	6078      	str	r0, [r7, #4]
 80040ee:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80040f2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80040f6:	2300      	movs	r3, #0
 80040f8:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80040fe:	2300      	movs	r3, #0
 8004100:	613b      	str	r3, [r7, #16]
 8004102:	e009      	b.n	8004118 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004104:	687a      	ldr	r2, [r7, #4]
 8004106:	693b      	ldr	r3, [r7, #16]
 8004108:	3340      	adds	r3, #64	; 0x40
 800410a:	009b      	lsls	r3, r3, #2
 800410c:	4413      	add	r3, r2
 800410e:	2200      	movs	r2, #0
 8004110:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004112:	693b      	ldr	r3, [r7, #16]
 8004114:	3301      	adds	r3, #1
 8004116:	613b      	str	r3, [r7, #16]
 8004118:	693b      	ldr	r3, [r7, #16]
 800411a:	2b0e      	cmp	r3, #14
 800411c:	d9f2      	bls.n	8004104 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800411e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d11c      	bne.n	800415e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800412a:	685b      	ldr	r3, [r3, #4]
 800412c:	68fa      	ldr	r2, [r7, #12]
 800412e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004132:	f043 0302 	orr.w	r3, r3, #2
 8004136:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800413c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004148:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004154:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	639a      	str	r2, [r3, #56]	; 0x38
 800415c:	e00b      	b.n	8004176 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004162:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800416e:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800417c:	461a      	mov	r2, r3
 800417e:	2300      	movs	r3, #0
 8004180:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004188:	4619      	mov	r1, r3
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004190:	461a      	mov	r2, r3
 8004192:	680b      	ldr	r3, [r1, #0]
 8004194:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004198:	2b01      	cmp	r3, #1
 800419a:	d10c      	bne.n	80041b6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 800419c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d104      	bne.n	80041ac <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80041a2:	2100      	movs	r1, #0
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	f000 f965 	bl	8004474 <USB_SetDevSpeed>
 80041aa:	e008      	b.n	80041be <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80041ac:	2101      	movs	r1, #1
 80041ae:	6878      	ldr	r0, [r7, #4]
 80041b0:	f000 f960 	bl	8004474 <USB_SetDevSpeed>
 80041b4:	e003      	b.n	80041be <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80041b6:	2103      	movs	r1, #3
 80041b8:	6878      	ldr	r0, [r7, #4]
 80041ba:	f000 f95b 	bl	8004474 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80041be:	2110      	movs	r1, #16
 80041c0:	6878      	ldr	r0, [r7, #4]
 80041c2:	f000 f8f3 	bl	80043ac <USB_FlushTxFifo>
 80041c6:	4603      	mov	r3, r0
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d001      	beq.n	80041d0 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80041cc:	2301      	movs	r3, #1
 80041ce:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	f000 f91f 	bl	8004414 <USB_FlushRxFifo>
 80041d6:	4603      	mov	r3, r0
 80041d8:	2b00      	cmp	r3, #0
 80041da:	d001      	beq.n	80041e0 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041e6:	461a      	mov	r2, r3
 80041e8:	2300      	movs	r3, #0
 80041ea:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041f2:	461a      	mov	r2, r3
 80041f4:	2300      	movs	r3, #0
 80041f6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80041fe:	461a      	mov	r2, r3
 8004200:	2300      	movs	r3, #0
 8004202:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004204:	2300      	movs	r3, #0
 8004206:	613b      	str	r3, [r7, #16]
 8004208:	e043      	b.n	8004292 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800420a:	693b      	ldr	r3, [r7, #16]
 800420c:	015a      	lsls	r2, r3, #5
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	4413      	add	r3, r2
 8004212:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800421c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004220:	d118      	bne.n	8004254 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004222:	693b      	ldr	r3, [r7, #16]
 8004224:	2b00      	cmp	r3, #0
 8004226:	d10a      	bne.n	800423e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	015a      	lsls	r2, r3, #5
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	4413      	add	r3, r2
 8004230:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004234:	461a      	mov	r2, r3
 8004236:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800423a:	6013      	str	r3, [r2, #0]
 800423c:	e013      	b.n	8004266 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800423e:	693b      	ldr	r3, [r7, #16]
 8004240:	015a      	lsls	r2, r3, #5
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	4413      	add	r3, r2
 8004246:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800424a:	461a      	mov	r2, r3
 800424c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004250:	6013      	str	r3, [r2, #0]
 8004252:	e008      	b.n	8004266 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004254:	693b      	ldr	r3, [r7, #16]
 8004256:	015a      	lsls	r2, r3, #5
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	4413      	add	r3, r2
 800425c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004260:	461a      	mov	r2, r3
 8004262:	2300      	movs	r3, #0
 8004264:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004266:	693b      	ldr	r3, [r7, #16]
 8004268:	015a      	lsls	r2, r3, #5
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	4413      	add	r3, r2
 800426e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004272:	461a      	mov	r2, r3
 8004274:	2300      	movs	r3, #0
 8004276:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004278:	693b      	ldr	r3, [r7, #16]
 800427a:	015a      	lsls	r2, r3, #5
 800427c:	68fb      	ldr	r3, [r7, #12]
 800427e:	4413      	add	r3, r2
 8004280:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004284:	461a      	mov	r2, r3
 8004286:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 800428a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	3301      	adds	r3, #1
 8004290:	613b      	str	r3, [r7, #16]
 8004292:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004294:	693a      	ldr	r2, [r7, #16]
 8004296:	429a      	cmp	r2, r3
 8004298:	d3b7      	bcc.n	800420a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 800429a:	2300      	movs	r3, #0
 800429c:	613b      	str	r3, [r7, #16]
 800429e:	e043      	b.n	8004328 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80042a0:	693b      	ldr	r3, [r7, #16]
 80042a2:	015a      	lsls	r2, r3, #5
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	4413      	add	r3, r2
 80042a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80042b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80042b6:	d118      	bne.n	80042ea <USB_DevInit+0x206>
    {
      if (i == 0U)
 80042b8:	693b      	ldr	r3, [r7, #16]
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d10a      	bne.n	80042d4 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80042be:	693b      	ldr	r3, [r7, #16]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ca:	461a      	mov	r2, r3
 80042cc:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80042d0:	6013      	str	r3, [r2, #0]
 80042d2:	e013      	b.n	80042fc <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80042d4:	693b      	ldr	r3, [r7, #16]
 80042d6:	015a      	lsls	r2, r3, #5
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	4413      	add	r3, r2
 80042dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042e0:	461a      	mov	r2, r3
 80042e2:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80042e6:	6013      	str	r3, [r2, #0]
 80042e8:	e008      	b.n	80042fc <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80042ea:	693b      	ldr	r3, [r7, #16]
 80042ec:	015a      	lsls	r2, r3, #5
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4413      	add	r3, r2
 80042f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042f6:	461a      	mov	r2, r3
 80042f8:	2300      	movs	r3, #0
 80042fa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80042fc:	693b      	ldr	r3, [r7, #16]
 80042fe:	015a      	lsls	r2, r3, #5
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	4413      	add	r3, r2
 8004304:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004308:	461a      	mov	r2, r3
 800430a:	2300      	movs	r3, #0
 800430c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800430e:	693b      	ldr	r3, [r7, #16]
 8004310:	015a      	lsls	r2, r3, #5
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	4413      	add	r3, r2
 8004316:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800431a:	461a      	mov	r2, r3
 800431c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004320:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004322:	693b      	ldr	r3, [r7, #16]
 8004324:	3301      	adds	r3, #1
 8004326:	613b      	str	r3, [r7, #16]
 8004328:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800432a:	693a      	ldr	r2, [r7, #16]
 800432c:	429a      	cmp	r2, r3
 800432e:	d3b7      	bcc.n	80042a0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004336:	691b      	ldr	r3, [r3, #16]
 8004338:	68fa      	ldr	r2, [r7, #12]
 800433a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800433e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004342:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2200      	movs	r2, #0
 8004348:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004350:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	2b00      	cmp	r3, #0
 8004356:	d105      	bne.n	8004364 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	699b      	ldr	r3, [r3, #24]
 800435c:	f043 0210 	orr.w	r2, r3, #16
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	699a      	ldr	r2, [r3, #24]
 8004368:	4b0f      	ldr	r3, [pc, #60]	; (80043a8 <USB_DevInit+0x2c4>)
 800436a:	4313      	orrs	r3, r2
 800436c:	687a      	ldr	r2, [r7, #4]
 800436e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004370:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004372:	2b00      	cmp	r3, #0
 8004374:	d005      	beq.n	8004382 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	699b      	ldr	r3, [r3, #24]
 800437a:	f043 0208 	orr.w	r2, r3, #8
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004382:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004384:	2b01      	cmp	r3, #1
 8004386:	d107      	bne.n	8004398 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	699b      	ldr	r3, [r3, #24]
 800438c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004390:	f043 0304 	orr.w	r3, r3, #4
 8004394:	687a      	ldr	r2, [r7, #4]
 8004396:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004398:	7dfb      	ldrb	r3, [r7, #23]
}
 800439a:	4618      	mov	r0, r3
 800439c:	3718      	adds	r7, #24
 800439e:	46bd      	mov	sp, r7
 80043a0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80043a4:	b004      	add	sp, #16
 80043a6:	4770      	bx	lr
 80043a8:	803c3800 	.word	0x803c3800

080043ac <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]
 80043b4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80043b6:	2300      	movs	r3, #0
 80043b8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	3301      	adds	r3, #1
 80043be:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	4a13      	ldr	r2, [pc, #76]	; (8004410 <USB_FlushTxFifo+0x64>)
 80043c4:	4293      	cmp	r3, r2
 80043c6:	d901      	bls.n	80043cc <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80043c8:	2303      	movs	r3, #3
 80043ca:	e01b      	b.n	8004404 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	691b      	ldr	r3, [r3, #16]
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	daf2      	bge.n	80043ba <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80043d4:	2300      	movs	r3, #0
 80043d6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80043d8:	683b      	ldr	r3, [r7, #0]
 80043da:	019b      	lsls	r3, r3, #6
 80043dc:	f043 0220 	orr.w	r2, r3, #32
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	3301      	adds	r3, #1
 80043e8:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	4a08      	ldr	r2, [pc, #32]	; (8004410 <USB_FlushTxFifo+0x64>)
 80043ee:	4293      	cmp	r3, r2
 80043f0:	d901      	bls.n	80043f6 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e006      	b.n	8004404 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	691b      	ldr	r3, [r3, #16]
 80043fa:	f003 0320 	and.w	r3, r3, #32
 80043fe:	2b20      	cmp	r3, #32
 8004400:	d0f0      	beq.n	80043e4 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004402:	2300      	movs	r3, #0
}
 8004404:	4618      	mov	r0, r3
 8004406:	3714      	adds	r7, #20
 8004408:	46bd      	mov	sp, r7
 800440a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800440e:	4770      	bx	lr
 8004410:	00030d40 	.word	0x00030d40

08004414 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004414:	b480      	push	{r7}
 8004416:	b085      	sub	sp, #20
 8004418:	af00      	add	r7, sp, #0
 800441a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800441c:	2300      	movs	r3, #0
 800441e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	3301      	adds	r3, #1
 8004424:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	4a11      	ldr	r2, [pc, #68]	; (8004470 <USB_FlushRxFifo+0x5c>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d901      	bls.n	8004432 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800442e:	2303      	movs	r3, #3
 8004430:	e018      	b.n	8004464 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	691b      	ldr	r3, [r3, #16]
 8004436:	2b00      	cmp	r3, #0
 8004438:	daf2      	bge.n	8004420 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800443a:	2300      	movs	r3, #0
 800443c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	2210      	movs	r2, #16
 8004442:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	3301      	adds	r3, #1
 8004448:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	4a08      	ldr	r2, [pc, #32]	; (8004470 <USB_FlushRxFifo+0x5c>)
 800444e:	4293      	cmp	r3, r2
 8004450:	d901      	bls.n	8004456 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004452:	2303      	movs	r3, #3
 8004454:	e006      	b.n	8004464 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	691b      	ldr	r3, [r3, #16]
 800445a:	f003 0310 	and.w	r3, r3, #16
 800445e:	2b10      	cmp	r3, #16
 8004460:	d0f0      	beq.n	8004444 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004462:	2300      	movs	r3, #0
}
 8004464:	4618      	mov	r0, r3
 8004466:	3714      	adds	r7, #20
 8004468:	46bd      	mov	sp, r7
 800446a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800446e:	4770      	bx	lr
 8004470:	00030d40 	.word	0x00030d40

08004474 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004474:	b480      	push	{r7}
 8004476:	b085      	sub	sp, #20
 8004478:	af00      	add	r7, sp, #0
 800447a:	6078      	str	r0, [r7, #4]
 800447c:	460b      	mov	r3, r1
 800447e:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800448a:	681a      	ldr	r2, [r3, #0]
 800448c:	78fb      	ldrb	r3, [r7, #3]
 800448e:	68f9      	ldr	r1, [r7, #12]
 8004490:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004494:	4313      	orrs	r3, r2
 8004496:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004498:	2300      	movs	r3, #0
}
 800449a:	4618      	mov	r0, r3
 800449c:	3714      	adds	r7, #20
 800449e:	46bd      	mov	sp, r7
 80044a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a4:	4770      	bx	lr

080044a6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80044a6:	b480      	push	{r7}
 80044a8:	b087      	sub	sp, #28
 80044aa:	af00      	add	r7, sp, #0
 80044ac:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80044b2:	693b      	ldr	r3, [r7, #16]
 80044b4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044b8:	689b      	ldr	r3, [r3, #8]
 80044ba:	f003 0306 	and.w	r3, r3, #6
 80044be:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d102      	bne.n	80044cc <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 80044c6:	2300      	movs	r3, #0
 80044c8:	75fb      	strb	r3, [r7, #23]
 80044ca:	e00a      	b.n	80044e2 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2b02      	cmp	r3, #2
 80044d0:	d002      	beq.n	80044d8 <USB_GetDevSpeed+0x32>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b06      	cmp	r3, #6
 80044d6:	d102      	bne.n	80044de <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 80044d8:	2302      	movs	r3, #2
 80044da:	75fb      	strb	r3, [r7, #23]
 80044dc:	e001      	b.n	80044e2 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 80044de:	230f      	movs	r3, #15
 80044e0:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 80044e2:	7dfb      	ldrb	r3, [r7, #23]
}
 80044e4:	4618      	mov	r0, r3
 80044e6:	371c      	adds	r7, #28
 80044e8:	46bd      	mov	sp, r7
 80044ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ee:	4770      	bx	lr

080044f0 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80044f0:	b480      	push	{r7}
 80044f2:	b085      	sub	sp, #20
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
 80044f8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004504:	683b      	ldr	r3, [r7, #0]
 8004506:	785b      	ldrb	r3, [r3, #1]
 8004508:	2b01      	cmp	r3, #1
 800450a:	d13a      	bne.n	8004582 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004512:	69da      	ldr	r2, [r3, #28]
 8004514:	683b      	ldr	r3, [r7, #0]
 8004516:	781b      	ldrb	r3, [r3, #0]
 8004518:	f003 030f 	and.w	r3, r3, #15
 800451c:	2101      	movs	r1, #1
 800451e:	fa01 f303 	lsl.w	r3, r1, r3
 8004522:	b29b      	uxth	r3, r3
 8004524:	68f9      	ldr	r1, [r7, #12]
 8004526:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800452a:	4313      	orrs	r3, r2
 800452c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800452e:	68bb      	ldr	r3, [r7, #8]
 8004530:	015a      	lsls	r2, r3, #5
 8004532:	68fb      	ldr	r3, [r7, #12]
 8004534:	4413      	add	r3, r2
 8004536:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004540:	2b00      	cmp	r3, #0
 8004542:	d155      	bne.n	80045f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004544:	68bb      	ldr	r3, [r7, #8]
 8004546:	015a      	lsls	r2, r3, #5
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	4413      	add	r3, r2
 800454c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004550:	681a      	ldr	r2, [r3, #0]
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800455a:	683b      	ldr	r3, [r7, #0]
 800455c:	791b      	ldrb	r3, [r3, #4]
 800455e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004560:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004562:	68bb      	ldr	r3, [r7, #8]
 8004564:	059b      	lsls	r3, r3, #22
 8004566:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004568:	4313      	orrs	r3, r2
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	0151      	lsls	r1, r2, #5
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	440a      	add	r2, r1
 8004572:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004576:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800457a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800457e:	6013      	str	r3, [r2, #0]
 8004580:	e036      	b.n	80045f0 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004588:	69da      	ldr	r2, [r3, #28]
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	781b      	ldrb	r3, [r3, #0]
 800458e:	f003 030f 	and.w	r3, r3, #15
 8004592:	2101      	movs	r1, #1
 8004594:	fa01 f303 	lsl.w	r3, r1, r3
 8004598:	041b      	lsls	r3, r3, #16
 800459a:	68f9      	ldr	r1, [r7, #12]
 800459c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80045a0:	4313      	orrs	r3, r2
 80045a2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	015a      	lsls	r2, r3, #5
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	4413      	add	r3, r2
 80045ac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d11a      	bne.n	80045f0 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045ba:	68bb      	ldr	r3, [r7, #8]
 80045bc:	015a      	lsls	r2, r3, #5
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	4413      	add	r3, r2
 80045c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045c6:	681a      	ldr	r2, [r3, #0]
 80045c8:	683b      	ldr	r3, [r7, #0]
 80045ca:	68db      	ldr	r3, [r3, #12]
 80045cc:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	791b      	ldrb	r3, [r3, #4]
 80045d4:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80045d6:	430b      	orrs	r3, r1
 80045d8:	4313      	orrs	r3, r2
 80045da:	68ba      	ldr	r2, [r7, #8]
 80045dc:	0151      	lsls	r1, r2, #5
 80045de:	68fa      	ldr	r2, [r7, #12]
 80045e0:	440a      	add	r2, r1
 80045e2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045e6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045ea:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80045ee:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 80045f0:	2300      	movs	r3, #0
}
 80045f2:	4618      	mov	r0, r3
 80045f4:	3714      	adds	r7, #20
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
	...

08004600 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004600:	b480      	push	{r7}
 8004602:	b085      	sub	sp, #20
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
 8004608:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800460e:	683b      	ldr	r3, [r7, #0]
 8004610:	781b      	ldrb	r3, [r3, #0]
 8004612:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004614:	683b      	ldr	r3, [r7, #0]
 8004616:	785b      	ldrb	r3, [r3, #1]
 8004618:	2b01      	cmp	r3, #1
 800461a:	d161      	bne.n	80046e0 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800461c:	68bb      	ldr	r3, [r7, #8]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800462e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004632:	d11f      	bne.n	8004674 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004634:	68bb      	ldr	r3, [r7, #8]
 8004636:	015a      	lsls	r2, r3, #5
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	4413      	add	r3, r2
 800463c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004640:	681b      	ldr	r3, [r3, #0]
 8004642:	68ba      	ldr	r2, [r7, #8]
 8004644:	0151      	lsls	r1, r2, #5
 8004646:	68fa      	ldr	r2, [r7, #12]
 8004648:	440a      	add	r2, r1
 800464a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800464e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004652:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	015a      	lsls	r2, r3, #5
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	4413      	add	r3, r2
 800465c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	68ba      	ldr	r2, [r7, #8]
 8004664:	0151      	lsls	r1, r2, #5
 8004666:	68fa      	ldr	r2, [r7, #12]
 8004668:	440a      	add	r2, r1
 800466a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800466e:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004672:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800467a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800467c:	683b      	ldr	r3, [r7, #0]
 800467e:	781b      	ldrb	r3, [r3, #0]
 8004680:	f003 030f 	and.w	r3, r3, #15
 8004684:	2101      	movs	r1, #1
 8004686:	fa01 f303 	lsl.w	r3, r1, r3
 800468a:	b29b      	uxth	r3, r3
 800468c:	43db      	mvns	r3, r3
 800468e:	68f9      	ldr	r1, [r7, #12]
 8004690:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004694:	4013      	ands	r3, r2
 8004696:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800469e:	69da      	ldr	r2, [r3, #28]
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	781b      	ldrb	r3, [r3, #0]
 80046a4:	f003 030f 	and.w	r3, r3, #15
 80046a8:	2101      	movs	r1, #1
 80046aa:	fa01 f303 	lsl.w	r3, r1, r3
 80046ae:	b29b      	uxth	r3, r3
 80046b0:	43db      	mvns	r3, r3
 80046b2:	68f9      	ldr	r1, [r7, #12]
 80046b4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80046b8:	4013      	ands	r3, r2
 80046ba:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 80046bc:	68bb      	ldr	r3, [r7, #8]
 80046be:	015a      	lsls	r2, r3, #5
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	4413      	add	r3, r2
 80046c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c8:	681a      	ldr	r2, [r3, #0]
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	0159      	lsls	r1, r3, #5
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	440b      	add	r3, r1
 80046d2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046d6:	4619      	mov	r1, r3
 80046d8:	4b35      	ldr	r3, [pc, #212]	; (80047b0 <USB_DeactivateEndpoint+0x1b0>)
 80046da:	4013      	ands	r3, r2
 80046dc:	600b      	str	r3, [r1, #0]
 80046de:	e060      	b.n	80047a2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046f6:	d11f      	bne.n	8004738 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80046f8:	68bb      	ldr	r3, [r7, #8]
 80046fa:	015a      	lsls	r2, r3, #5
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	4413      	add	r3, r2
 8004700:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68ba      	ldr	r2, [r7, #8]
 8004708:	0151      	lsls	r1, r2, #5
 800470a:	68fa      	ldr	r2, [r7, #12]
 800470c:	440a      	add	r2, r1
 800470e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004712:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004716:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004718:	68bb      	ldr	r3, [r7, #8]
 800471a:	015a      	lsls	r2, r3, #5
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	4413      	add	r3, r2
 8004720:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	68ba      	ldr	r2, [r7, #8]
 8004728:	0151      	lsls	r1, r2, #5
 800472a:	68fa      	ldr	r2, [r7, #12]
 800472c:	440a      	add	r2, r1
 800472e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004732:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004736:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800473e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	781b      	ldrb	r3, [r3, #0]
 8004744:	f003 030f 	and.w	r3, r3, #15
 8004748:	2101      	movs	r1, #1
 800474a:	fa01 f303 	lsl.w	r3, r1, r3
 800474e:	041b      	lsls	r3, r3, #16
 8004750:	43db      	mvns	r3, r3
 8004752:	68f9      	ldr	r1, [r7, #12]
 8004754:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004758:	4013      	ands	r3, r2
 800475a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004762:	69da      	ldr	r2, [r3, #28]
 8004764:	683b      	ldr	r3, [r7, #0]
 8004766:	781b      	ldrb	r3, [r3, #0]
 8004768:	f003 030f 	and.w	r3, r3, #15
 800476c:	2101      	movs	r1, #1
 800476e:	fa01 f303 	lsl.w	r3, r1, r3
 8004772:	041b      	lsls	r3, r3, #16
 8004774:	43db      	mvns	r3, r3
 8004776:	68f9      	ldr	r1, [r7, #12]
 8004778:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800477c:	4013      	ands	r3, r2
 800477e:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	015a      	lsls	r2, r3, #5
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	4413      	add	r3, r2
 8004788:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800478c:	681a      	ldr	r2, [r3, #0]
 800478e:	68bb      	ldr	r3, [r7, #8]
 8004790:	0159      	lsls	r1, r3, #5
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	440b      	add	r3, r1
 8004796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479a:	4619      	mov	r1, r3
 800479c:	4b05      	ldr	r3, [pc, #20]	; (80047b4 <USB_DeactivateEndpoint+0x1b4>)
 800479e:	4013      	ands	r3, r2
 80047a0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3714      	adds	r7, #20
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr
 80047b0:	ec337800 	.word	0xec337800
 80047b4:	eff37800 	.word	0xeff37800

080047b8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80047b8:	b580      	push	{r7, lr}
 80047ba:	b08a      	sub	sp, #40	; 0x28
 80047bc:	af02      	add	r7, sp, #8
 80047be:	60f8      	str	r0, [r7, #12]
 80047c0:	60b9      	str	r1, [r7, #8]
 80047c2:	4613      	mov	r3, r2
 80047c4:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047c6:	68fb      	ldr	r3, [r7, #12]
 80047c8:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	781b      	ldrb	r3, [r3, #0]
 80047ce:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 80047d0:	68bb      	ldr	r3, [r7, #8]
 80047d2:	785b      	ldrb	r3, [r3, #1]
 80047d4:	2b01      	cmp	r3, #1
 80047d6:	f040 815c 	bne.w	8004a92 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	699b      	ldr	r3, [r3, #24]
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d132      	bne.n	8004848 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80047e2:	69bb      	ldr	r3, [r7, #24]
 80047e4:	015a      	lsls	r2, r3, #5
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	4413      	add	r3, r2
 80047ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80047ee:	691b      	ldr	r3, [r3, #16]
 80047f0:	69ba      	ldr	r2, [r7, #24]
 80047f2:	0151      	lsls	r1, r2, #5
 80047f4:	69fa      	ldr	r2, [r7, #28]
 80047f6:	440a      	add	r2, r1
 80047f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80047fc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004800:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004804:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004806:	69bb      	ldr	r3, [r7, #24]
 8004808:	015a      	lsls	r2, r3, #5
 800480a:	69fb      	ldr	r3, [r7, #28]
 800480c:	4413      	add	r3, r2
 800480e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004812:	691b      	ldr	r3, [r3, #16]
 8004814:	69ba      	ldr	r2, [r7, #24]
 8004816:	0151      	lsls	r1, r2, #5
 8004818:	69fa      	ldr	r2, [r7, #28]
 800481a:	440a      	add	r2, r1
 800481c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004820:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004824:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004826:	69bb      	ldr	r3, [r7, #24]
 8004828:	015a      	lsls	r2, r3, #5
 800482a:	69fb      	ldr	r3, [r7, #28]
 800482c:	4413      	add	r3, r2
 800482e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004832:	691b      	ldr	r3, [r3, #16]
 8004834:	69ba      	ldr	r2, [r7, #24]
 8004836:	0151      	lsls	r1, r2, #5
 8004838:	69fa      	ldr	r2, [r7, #28]
 800483a:	440a      	add	r2, r1
 800483c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004840:	0cdb      	lsrs	r3, r3, #19
 8004842:	04db      	lsls	r3, r3, #19
 8004844:	6113      	str	r3, [r2, #16]
 8004846:	e074      	b.n	8004932 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004848:	69bb      	ldr	r3, [r7, #24]
 800484a:	015a      	lsls	r2, r3, #5
 800484c:	69fb      	ldr	r3, [r7, #28]
 800484e:	4413      	add	r3, r2
 8004850:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004854:	691b      	ldr	r3, [r3, #16]
 8004856:	69ba      	ldr	r2, [r7, #24]
 8004858:	0151      	lsls	r1, r2, #5
 800485a:	69fa      	ldr	r2, [r7, #28]
 800485c:	440a      	add	r2, r1
 800485e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004862:	0cdb      	lsrs	r3, r3, #19
 8004864:	04db      	lsls	r3, r3, #19
 8004866:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004868:	69bb      	ldr	r3, [r7, #24]
 800486a:	015a      	lsls	r2, r3, #5
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	4413      	add	r3, r2
 8004870:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	0151      	lsls	r1, r2, #5
 800487a:	69fa      	ldr	r2, [r7, #28]
 800487c:	440a      	add	r2, r1
 800487e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004882:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004886:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800488a:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800488c:	69bb      	ldr	r3, [r7, #24]
 800488e:	015a      	lsls	r2, r3, #5
 8004890:	69fb      	ldr	r3, [r7, #28]
 8004892:	4413      	add	r3, r2
 8004894:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004898:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 800489a:	68bb      	ldr	r3, [r7, #8]
 800489c:	6999      	ldr	r1, [r3, #24]
 800489e:	68bb      	ldr	r3, [r7, #8]
 80048a0:	68db      	ldr	r3, [r3, #12]
 80048a2:	440b      	add	r3, r1
 80048a4:	1e59      	subs	r1, r3, #1
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	68db      	ldr	r3, [r3, #12]
 80048aa:	fbb1 f3f3 	udiv	r3, r1, r3
 80048ae:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 80048b0:	4b9d      	ldr	r3, [pc, #628]	; (8004b28 <USB_EPStartXfer+0x370>)
 80048b2:	400b      	ands	r3, r1
 80048b4:	69b9      	ldr	r1, [r7, #24]
 80048b6:	0148      	lsls	r0, r1, #5
 80048b8:	69f9      	ldr	r1, [r7, #28]
 80048ba:	4401      	add	r1, r0
 80048bc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048c0:	4313      	orrs	r3, r2
 80048c2:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80048c4:	69bb      	ldr	r3, [r7, #24]
 80048c6:	015a      	lsls	r2, r3, #5
 80048c8:	69fb      	ldr	r3, [r7, #28]
 80048ca:	4413      	add	r3, r2
 80048cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048d0:	691a      	ldr	r2, [r3, #16]
 80048d2:	68bb      	ldr	r3, [r7, #8]
 80048d4:	699b      	ldr	r3, [r3, #24]
 80048d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80048da:	69b9      	ldr	r1, [r7, #24]
 80048dc:	0148      	lsls	r0, r1, #5
 80048de:	69f9      	ldr	r1, [r7, #28]
 80048e0:	4401      	add	r1, r0
 80048e2:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80048e6:	4313      	orrs	r3, r2
 80048e8:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 80048ea:	68bb      	ldr	r3, [r7, #8]
 80048ec:	791b      	ldrb	r3, [r3, #4]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d11f      	bne.n	8004932 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 80048f2:	69bb      	ldr	r3, [r7, #24]
 80048f4:	015a      	lsls	r2, r3, #5
 80048f6:	69fb      	ldr	r3, [r7, #28]
 80048f8:	4413      	add	r3, r2
 80048fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048fe:	691b      	ldr	r3, [r3, #16]
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	0151      	lsls	r1, r2, #5
 8004904:	69fa      	ldr	r2, [r7, #28]
 8004906:	440a      	add	r2, r1
 8004908:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800490c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004910:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004912:	69bb      	ldr	r3, [r7, #24]
 8004914:	015a      	lsls	r2, r3, #5
 8004916:	69fb      	ldr	r3, [r7, #28]
 8004918:	4413      	add	r3, r2
 800491a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800491e:	691b      	ldr	r3, [r3, #16]
 8004920:	69ba      	ldr	r2, [r7, #24]
 8004922:	0151      	lsls	r1, r2, #5
 8004924:	69fa      	ldr	r2, [r7, #28]
 8004926:	440a      	add	r2, r1
 8004928:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800492c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004930:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004932:	79fb      	ldrb	r3, [r7, #7]
 8004934:	2b01      	cmp	r3, #1
 8004936:	d14b      	bne.n	80049d0 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004938:	68bb      	ldr	r3, [r7, #8]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	2b00      	cmp	r3, #0
 800493e:	d009      	beq.n	8004954 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004940:	69bb      	ldr	r3, [r7, #24]
 8004942:	015a      	lsls	r2, r3, #5
 8004944:	69fb      	ldr	r3, [r7, #28]
 8004946:	4413      	add	r3, r2
 8004948:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800494c:	461a      	mov	r2, r3
 800494e:	68bb      	ldr	r3, [r7, #8]
 8004950:	695b      	ldr	r3, [r3, #20]
 8004952:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	791b      	ldrb	r3, [r3, #4]
 8004958:	2b01      	cmp	r3, #1
 800495a:	d128      	bne.n	80049ae <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800495c:	69fb      	ldr	r3, [r7, #28]
 800495e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004968:	2b00      	cmp	r3, #0
 800496a:	d110      	bne.n	800498e <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800496c:	69bb      	ldr	r3, [r7, #24]
 800496e:	015a      	lsls	r2, r3, #5
 8004970:	69fb      	ldr	r3, [r7, #28]
 8004972:	4413      	add	r3, r2
 8004974:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	69ba      	ldr	r2, [r7, #24]
 800497c:	0151      	lsls	r1, r2, #5
 800497e:	69fa      	ldr	r2, [r7, #28]
 8004980:	440a      	add	r2, r1
 8004982:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004986:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800498a:	6013      	str	r3, [r2, #0]
 800498c:	e00f      	b.n	80049ae <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800498e:	69bb      	ldr	r3, [r7, #24]
 8004990:	015a      	lsls	r2, r3, #5
 8004992:	69fb      	ldr	r3, [r7, #28]
 8004994:	4413      	add	r3, r2
 8004996:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	69ba      	ldr	r2, [r7, #24]
 800499e:	0151      	lsls	r1, r2, #5
 80049a0:	69fa      	ldr	r2, [r7, #28]
 80049a2:	440a      	add	r2, r1
 80049a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ac:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049ae:	69bb      	ldr	r3, [r7, #24]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	69fb      	ldr	r3, [r7, #28]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	69ba      	ldr	r2, [r7, #24]
 80049be:	0151      	lsls	r1, r2, #5
 80049c0:	69fa      	ldr	r2, [r7, #28]
 80049c2:	440a      	add	r2, r1
 80049c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049c8:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	e133      	b.n	8004c38 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	69fb      	ldr	r3, [r7, #28]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	69ba      	ldr	r2, [r7, #24]
 80049e0:	0151      	lsls	r1, r2, #5
 80049e2:	69fa      	ldr	r2, [r7, #28]
 80049e4:	440a      	add	r2, r1
 80049e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049ea:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80049ee:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80049f0:	68bb      	ldr	r3, [r7, #8]
 80049f2:	791b      	ldrb	r3, [r3, #4]
 80049f4:	2b01      	cmp	r3, #1
 80049f6:	d015      	beq.n	8004a24 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	699b      	ldr	r3, [r3, #24]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	f000 811b 	beq.w	8004c38 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004a02:	69fb      	ldr	r3, [r7, #28]
 8004a04:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a08:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	f003 030f 	and.w	r3, r3, #15
 8004a12:	2101      	movs	r1, #1
 8004a14:	fa01 f303 	lsl.w	r3, r1, r3
 8004a18:	69f9      	ldr	r1, [r7, #28]
 8004a1a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	634b      	str	r3, [r1, #52]	; 0x34
 8004a22:	e109      	b.n	8004c38 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004a24:	69fb      	ldr	r3, [r7, #28]
 8004a26:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a2a:	689b      	ldr	r3, [r3, #8]
 8004a2c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d110      	bne.n	8004a56 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	015a      	lsls	r2, r3, #5
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	4413      	add	r3, r2
 8004a3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	69ba      	ldr	r2, [r7, #24]
 8004a44:	0151      	lsls	r1, r2, #5
 8004a46:	69fa      	ldr	r2, [r7, #28]
 8004a48:	440a      	add	r2, r1
 8004a4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a4e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004a52:	6013      	str	r3, [r2, #0]
 8004a54:	e00f      	b.n	8004a76 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004a56:	69bb      	ldr	r3, [r7, #24]
 8004a58:	015a      	lsls	r2, r3, #5
 8004a5a:	69fb      	ldr	r3, [r7, #28]
 8004a5c:	4413      	add	r3, r2
 8004a5e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	0151      	lsls	r1, r2, #5
 8004a68:	69fa      	ldr	r2, [r7, #28]
 8004a6a:	440a      	add	r2, r1
 8004a6c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a74:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	6919      	ldr	r1, [r3, #16]
 8004a7a:	68bb      	ldr	r3, [r7, #8]
 8004a7c:	781a      	ldrb	r2, [r3, #0]
 8004a7e:	68bb      	ldr	r3, [r7, #8]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	b298      	uxth	r0, r3
 8004a84:	79fb      	ldrb	r3, [r7, #7]
 8004a86:	9300      	str	r3, [sp, #0]
 8004a88:	4603      	mov	r3, r0
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 fade 	bl	800504c <USB_WritePacket>
 8004a90:	e0d2      	b.n	8004c38 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004a92:	69bb      	ldr	r3, [r7, #24]
 8004a94:	015a      	lsls	r2, r3, #5
 8004a96:	69fb      	ldr	r3, [r7, #28]
 8004a98:	4413      	add	r3, r2
 8004a9a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	0151      	lsls	r1, r2, #5
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	440a      	add	r2, r1
 8004aa8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004aac:	0cdb      	lsrs	r3, r3, #19
 8004aae:	04db      	lsls	r3, r3, #19
 8004ab0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ab2:	69bb      	ldr	r3, [r7, #24]
 8004ab4:	015a      	lsls	r2, r3, #5
 8004ab6:	69fb      	ldr	r3, [r7, #28]
 8004ab8:	4413      	add	r3, r2
 8004aba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004abe:	691b      	ldr	r3, [r3, #16]
 8004ac0:	69ba      	ldr	r2, [r7, #24]
 8004ac2:	0151      	lsls	r1, r2, #5
 8004ac4:	69fa      	ldr	r2, [r7, #28]
 8004ac6:	440a      	add	r2, r1
 8004ac8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004acc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004ad0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004ad4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004ad6:	68bb      	ldr	r3, [r7, #8]
 8004ad8:	699b      	ldr	r3, [r3, #24]
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d126      	bne.n	8004b2c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004ade:	69bb      	ldr	r3, [r7, #24]
 8004ae0:	015a      	lsls	r2, r3, #5
 8004ae2:	69fb      	ldr	r3, [r7, #28]
 8004ae4:	4413      	add	r3, r2
 8004ae6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004aea:	691a      	ldr	r2, [r3, #16]
 8004aec:	68bb      	ldr	r3, [r7, #8]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004af4:	69b9      	ldr	r1, [r7, #24]
 8004af6:	0148      	lsls	r0, r1, #5
 8004af8:	69f9      	ldr	r1, [r7, #28]
 8004afa:	4401      	add	r1, r0
 8004afc:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b00:	4313      	orrs	r3, r2
 8004b02:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004b04:	69bb      	ldr	r3, [r7, #24]
 8004b06:	015a      	lsls	r2, r3, #5
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	4413      	add	r3, r2
 8004b0c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b10:	691b      	ldr	r3, [r3, #16]
 8004b12:	69ba      	ldr	r2, [r7, #24]
 8004b14:	0151      	lsls	r1, r2, #5
 8004b16:	69fa      	ldr	r2, [r7, #28]
 8004b18:	440a      	add	r2, r1
 8004b1a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b1e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004b22:	6113      	str	r3, [r2, #16]
 8004b24:	e03a      	b.n	8004b9c <USB_EPStartXfer+0x3e4>
 8004b26:	bf00      	nop
 8004b28:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004b2c:	68bb      	ldr	r3, [r7, #8]
 8004b2e:	699a      	ldr	r2, [r3, #24]
 8004b30:	68bb      	ldr	r3, [r7, #8]
 8004b32:	68db      	ldr	r3, [r3, #12]
 8004b34:	4413      	add	r3, r2
 8004b36:	1e5a      	subs	r2, r3, #1
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	68db      	ldr	r3, [r3, #12]
 8004b3c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b40:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004b42:	68bb      	ldr	r3, [r7, #8]
 8004b44:	68db      	ldr	r3, [r3, #12]
 8004b46:	8afa      	ldrh	r2, [r7, #22]
 8004b48:	fb03 f202 	mul.w	r2, r3, r2
 8004b4c:	68bb      	ldr	r3, [r7, #8]
 8004b4e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004b50:	69bb      	ldr	r3, [r7, #24]
 8004b52:	015a      	lsls	r2, r3, #5
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	4413      	add	r3, r2
 8004b58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b5c:	691a      	ldr	r2, [r3, #16]
 8004b5e:	8afb      	ldrh	r3, [r7, #22]
 8004b60:	04d9      	lsls	r1, r3, #19
 8004b62:	4b38      	ldr	r3, [pc, #224]	; (8004c44 <USB_EPStartXfer+0x48c>)
 8004b64:	400b      	ands	r3, r1
 8004b66:	69b9      	ldr	r1, [r7, #24]
 8004b68:	0148      	lsls	r0, r1, #5
 8004b6a:	69f9      	ldr	r1, [r7, #28]
 8004b6c:	4401      	add	r1, r0
 8004b6e:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b72:	4313      	orrs	r3, r2
 8004b74:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004b76:	69bb      	ldr	r3, [r7, #24]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b82:	691a      	ldr	r2, [r3, #16]
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	69db      	ldr	r3, [r3, #28]
 8004b88:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004b8c:	69b9      	ldr	r1, [r7, #24]
 8004b8e:	0148      	lsls	r0, r1, #5
 8004b90:	69f9      	ldr	r1, [r7, #28]
 8004b92:	4401      	add	r1, r0
 8004b94:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004b98:	4313      	orrs	r3, r2
 8004b9a:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004b9c:	79fb      	ldrb	r3, [r7, #7]
 8004b9e:	2b01      	cmp	r3, #1
 8004ba0:	d10d      	bne.n	8004bbe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	691b      	ldr	r3, [r3, #16]
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d009      	beq.n	8004bbe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004baa:	68bb      	ldr	r3, [r7, #8]
 8004bac:	6919      	ldr	r1, [r3, #16]
 8004bae:	69bb      	ldr	r3, [r7, #24]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	69fb      	ldr	r3, [r7, #28]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bba:	460a      	mov	r2, r1
 8004bbc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004bbe:	68bb      	ldr	r3, [r7, #8]
 8004bc0:	791b      	ldrb	r3, [r3, #4]
 8004bc2:	2b01      	cmp	r3, #1
 8004bc4:	d128      	bne.n	8004c18 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004bc6:	69fb      	ldr	r3, [r7, #28]
 8004bc8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bcc:	689b      	ldr	r3, [r3, #8]
 8004bce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d110      	bne.n	8004bf8 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8004bd6:	69bb      	ldr	r3, [r7, #24]
 8004bd8:	015a      	lsls	r2, r3, #5
 8004bda:	69fb      	ldr	r3, [r7, #28]
 8004bdc:	4413      	add	r3, r2
 8004bde:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	69ba      	ldr	r2, [r7, #24]
 8004be6:	0151      	lsls	r1, r2, #5
 8004be8:	69fa      	ldr	r2, [r7, #28]
 8004bea:	440a      	add	r2, r1
 8004bec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bf0:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004bf4:	6013      	str	r3, [r2, #0]
 8004bf6:	e00f      	b.n	8004c18 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004bf8:	69bb      	ldr	r3, [r7, #24]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	69fa      	ldr	r2, [r7, #28]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c12:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c16:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004c18:	69bb      	ldr	r3, [r7, #24]
 8004c1a:	015a      	lsls	r2, r3, #5
 8004c1c:	69fb      	ldr	r3, [r7, #28]
 8004c1e:	4413      	add	r3, r2
 8004c20:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	69ba      	ldr	r2, [r7, #24]
 8004c28:	0151      	lsls	r1, r2, #5
 8004c2a:	69fa      	ldr	r2, [r7, #28]
 8004c2c:	440a      	add	r2, r1
 8004c2e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c32:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004c36:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004c38:	2300      	movs	r3, #0
}
 8004c3a:	4618      	mov	r0, r3
 8004c3c:	3720      	adds	r7, #32
 8004c3e:	46bd      	mov	sp, r7
 8004c40:	bd80      	pop	{r7, pc}
 8004c42:	bf00      	nop
 8004c44:	1ff80000 	.word	0x1ff80000

08004c48 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004c48:	b480      	push	{r7}
 8004c4a:	b087      	sub	sp, #28
 8004c4c:	af00      	add	r7, sp, #0
 8004c4e:	60f8      	str	r0, [r7, #12]
 8004c50:	60b9      	str	r1, [r7, #8]
 8004c52:	4613      	mov	r3, r2
 8004c54:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004c5a:	68bb      	ldr	r3, [r7, #8]
 8004c5c:	781b      	ldrb	r3, [r3, #0]
 8004c5e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c60:	68bb      	ldr	r3, [r7, #8]
 8004c62:	785b      	ldrb	r3, [r3, #1]
 8004c64:	2b01      	cmp	r3, #1
 8004c66:	f040 80ce 	bne.w	8004e06 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c6a:	68bb      	ldr	r3, [r7, #8]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d132      	bne.n	8004cd8 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c72:	693b      	ldr	r3, [r7, #16]
 8004c74:	015a      	lsls	r2, r3, #5
 8004c76:	697b      	ldr	r3, [r7, #20]
 8004c78:	4413      	add	r3, r2
 8004c7a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c7e:	691b      	ldr	r3, [r3, #16]
 8004c80:	693a      	ldr	r2, [r7, #16]
 8004c82:	0151      	lsls	r1, r2, #5
 8004c84:	697a      	ldr	r2, [r7, #20]
 8004c86:	440a      	add	r2, r1
 8004c88:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c8c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c90:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c94:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c96:	693b      	ldr	r3, [r7, #16]
 8004c98:	015a      	lsls	r2, r3, #5
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	4413      	add	r3, r2
 8004c9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ca2:	691b      	ldr	r3, [r3, #16]
 8004ca4:	693a      	ldr	r2, [r7, #16]
 8004ca6:	0151      	lsls	r1, r2, #5
 8004ca8:	697a      	ldr	r2, [r7, #20]
 8004caa:	440a      	add	r2, r1
 8004cac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cb0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cb4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	015a      	lsls	r2, r3, #5
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	4413      	add	r3, r2
 8004cbe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cc2:	691b      	ldr	r3, [r3, #16]
 8004cc4:	693a      	ldr	r2, [r7, #16]
 8004cc6:	0151      	lsls	r1, r2, #5
 8004cc8:	697a      	ldr	r2, [r7, #20]
 8004cca:	440a      	add	r2, r1
 8004ccc:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cd0:	0cdb      	lsrs	r3, r3, #19
 8004cd2:	04db      	lsls	r3, r3, #19
 8004cd4:	6113      	str	r3, [r2, #16]
 8004cd6:	e04e      	b.n	8004d76 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004cd8:	693b      	ldr	r3, [r7, #16]
 8004cda:	015a      	lsls	r2, r3, #5
 8004cdc:	697b      	ldr	r3, [r7, #20]
 8004cde:	4413      	add	r3, r2
 8004ce0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ce4:	691b      	ldr	r3, [r3, #16]
 8004ce6:	693a      	ldr	r2, [r7, #16]
 8004ce8:	0151      	lsls	r1, r2, #5
 8004cea:	697a      	ldr	r2, [r7, #20]
 8004cec:	440a      	add	r2, r1
 8004cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf2:	0cdb      	lsrs	r3, r3, #19
 8004cf4:	04db      	lsls	r3, r3, #19
 8004cf6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004cf8:	693b      	ldr	r3, [r7, #16]
 8004cfa:	015a      	lsls	r2, r3, #5
 8004cfc:	697b      	ldr	r3, [r7, #20]
 8004cfe:	4413      	add	r3, r2
 8004d00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d04:	691b      	ldr	r3, [r3, #16]
 8004d06:	693a      	ldr	r2, [r7, #16]
 8004d08:	0151      	lsls	r1, r2, #5
 8004d0a:	697a      	ldr	r2, [r7, #20]
 8004d0c:	440a      	add	r2, r1
 8004d0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d12:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004d16:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004d1a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004d1c:	68bb      	ldr	r3, [r7, #8]
 8004d1e:	699a      	ldr	r2, [r3, #24]
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	68db      	ldr	r3, [r3, #12]
 8004d24:	429a      	cmp	r2, r3
 8004d26:	d903      	bls.n	8004d30 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004d28:	68bb      	ldr	r3, [r7, #8]
 8004d2a:	68da      	ldr	r2, [r3, #12]
 8004d2c:	68bb      	ldr	r3, [r7, #8]
 8004d2e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004d30:	693b      	ldr	r3, [r7, #16]
 8004d32:	015a      	lsls	r2, r3, #5
 8004d34:	697b      	ldr	r3, [r7, #20]
 8004d36:	4413      	add	r3, r2
 8004d38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	693a      	ldr	r2, [r7, #16]
 8004d40:	0151      	lsls	r1, r2, #5
 8004d42:	697a      	ldr	r2, [r7, #20]
 8004d44:	440a      	add	r2, r1
 8004d46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d4a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004d4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d50:	693b      	ldr	r3, [r7, #16]
 8004d52:	015a      	lsls	r2, r3, #5
 8004d54:	697b      	ldr	r3, [r7, #20]
 8004d56:	4413      	add	r3, r2
 8004d58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5c:	691a      	ldr	r2, [r3, #16]
 8004d5e:	68bb      	ldr	r3, [r7, #8]
 8004d60:	699b      	ldr	r3, [r3, #24]
 8004d62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d66:	6939      	ldr	r1, [r7, #16]
 8004d68:	0148      	lsls	r0, r1, #5
 8004d6a:	6979      	ldr	r1, [r7, #20]
 8004d6c:	4401      	add	r1, r0
 8004d6e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d72:	4313      	orrs	r3, r2
 8004d74:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004d76:	79fb      	ldrb	r3, [r7, #7]
 8004d78:	2b01      	cmp	r3, #1
 8004d7a:	d11e      	bne.n	8004dba <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	695b      	ldr	r3, [r3, #20]
 8004d80:	2b00      	cmp	r3, #0
 8004d82:	d009      	beq.n	8004d98 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	015a      	lsls	r2, r3, #5
 8004d88:	697b      	ldr	r3, [r7, #20]
 8004d8a:	4413      	add	r3, r2
 8004d8c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d90:	461a      	mov	r2, r3
 8004d92:	68bb      	ldr	r3, [r7, #8]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004d98:	693b      	ldr	r3, [r7, #16]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	697b      	ldr	r3, [r7, #20]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	693a      	ldr	r2, [r7, #16]
 8004da8:	0151      	lsls	r1, r2, #5
 8004daa:	697a      	ldr	r2, [r7, #20]
 8004dac:	440a      	add	r2, r1
 8004dae:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004db2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004db6:	6013      	str	r3, [r2, #0]
 8004db8:	e097      	b.n	8004eea <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	015a      	lsls	r2, r3, #5
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	4413      	add	r3, r2
 8004dc2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	693a      	ldr	r2, [r7, #16]
 8004dca:	0151      	lsls	r1, r2, #5
 8004dcc:	697a      	ldr	r2, [r7, #20]
 8004dce:	440a      	add	r2, r1
 8004dd0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dd4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004dd8:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004dda:	68bb      	ldr	r3, [r7, #8]
 8004ddc:	699b      	ldr	r3, [r3, #24]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	f000 8083 	beq.w	8004eea <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004de4:	697b      	ldr	r3, [r7, #20]
 8004de6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004dec:	68bb      	ldr	r3, [r7, #8]
 8004dee:	781b      	ldrb	r3, [r3, #0]
 8004df0:	f003 030f 	and.w	r3, r3, #15
 8004df4:	2101      	movs	r1, #1
 8004df6:	fa01 f303 	lsl.w	r3, r1, r3
 8004dfa:	6979      	ldr	r1, [r7, #20]
 8004dfc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e00:	4313      	orrs	r3, r2
 8004e02:	634b      	str	r3, [r1, #52]	; 0x34
 8004e04:	e071      	b.n	8004eea <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004e06:	693b      	ldr	r3, [r7, #16]
 8004e08:	015a      	lsls	r2, r3, #5
 8004e0a:	697b      	ldr	r3, [r7, #20]
 8004e0c:	4413      	add	r3, r2
 8004e0e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e12:	691b      	ldr	r3, [r3, #16]
 8004e14:	693a      	ldr	r2, [r7, #16]
 8004e16:	0151      	lsls	r1, r2, #5
 8004e18:	697a      	ldr	r2, [r7, #20]
 8004e1a:	440a      	add	r2, r1
 8004e1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e20:	0cdb      	lsrs	r3, r3, #19
 8004e22:	04db      	lsls	r3, r3, #19
 8004e24:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004e26:	693b      	ldr	r3, [r7, #16]
 8004e28:	015a      	lsls	r2, r3, #5
 8004e2a:	697b      	ldr	r3, [r7, #20]
 8004e2c:	4413      	add	r3, r2
 8004e2e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	693a      	ldr	r2, [r7, #16]
 8004e36:	0151      	lsls	r1, r2, #5
 8004e38:	697a      	ldr	r2, [r7, #20]
 8004e3a:	440a      	add	r2, r1
 8004e3c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e40:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004e44:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004e48:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	699b      	ldr	r3, [r3, #24]
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d003      	beq.n	8004e5a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8004e52:	68bb      	ldr	r3, [r7, #8]
 8004e54:	68da      	ldr	r2, [r3, #12]
 8004e56:	68bb      	ldr	r3, [r7, #8]
 8004e58:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004e5a:	68bb      	ldr	r3, [r7, #8]
 8004e5c:	68da      	ldr	r2, [r3, #12]
 8004e5e:	68bb      	ldr	r3, [r7, #8]
 8004e60:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004e62:	693b      	ldr	r3, [r7, #16]
 8004e64:	015a      	lsls	r2, r3, #5
 8004e66:	697b      	ldr	r3, [r7, #20]
 8004e68:	4413      	add	r3, r2
 8004e6a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e6e:	691b      	ldr	r3, [r3, #16]
 8004e70:	693a      	ldr	r2, [r7, #16]
 8004e72:	0151      	lsls	r1, r2, #5
 8004e74:	697a      	ldr	r2, [r7, #20]
 8004e76:	440a      	add	r2, r1
 8004e78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e7c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004e80:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 8004e82:	693b      	ldr	r3, [r7, #16]
 8004e84:	015a      	lsls	r2, r3, #5
 8004e86:	697b      	ldr	r3, [r7, #20]
 8004e88:	4413      	add	r3, r2
 8004e8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e8e:	691a      	ldr	r2, [r3, #16]
 8004e90:	68bb      	ldr	r3, [r7, #8]
 8004e92:	69db      	ldr	r3, [r3, #28]
 8004e94:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004e98:	6939      	ldr	r1, [r7, #16]
 8004e9a:	0148      	lsls	r0, r1, #5
 8004e9c:	6979      	ldr	r1, [r7, #20]
 8004e9e:	4401      	add	r1, r0
 8004ea0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004ea8:	79fb      	ldrb	r3, [r7, #7]
 8004eaa:	2b01      	cmp	r3, #1
 8004eac:	d10d      	bne.n	8004eca <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004eae:	68bb      	ldr	r3, [r7, #8]
 8004eb0:	691b      	ldr	r3, [r3, #16]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d009      	beq.n	8004eca <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	6919      	ldr	r1, [r3, #16]
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ec6:	460a      	mov	r2, r1
 8004ec8:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004eca:	693b      	ldr	r3, [r7, #16]
 8004ecc:	015a      	lsls	r2, r3, #5
 8004ece:	697b      	ldr	r3, [r7, #20]
 8004ed0:	4413      	add	r3, r2
 8004ed2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	693a      	ldr	r2, [r7, #16]
 8004eda:	0151      	lsls	r1, r2, #5
 8004edc:	697a      	ldr	r2, [r7, #20]
 8004ede:	440a      	add	r2, r1
 8004ee0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ee4:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004ee8:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004eea:	2300      	movs	r3, #0
}
 8004eec:	4618      	mov	r0, r3
 8004eee:	371c      	adds	r7, #28
 8004ef0:	46bd      	mov	sp, r7
 8004ef2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef6:	4770      	bx	lr

08004ef8 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004ef8:	b480      	push	{r7}
 8004efa:	b087      	sub	sp, #28
 8004efc:	af00      	add	r7, sp, #0
 8004efe:	6078      	str	r0, [r7, #4]
 8004f00:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004f02:	2300      	movs	r3, #0
 8004f04:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8004f06:	2300      	movs	r3, #0
 8004f08:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	785b      	ldrb	r3, [r3, #1]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d14a      	bne.n	8004fac <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004f16:	683b      	ldr	r3, [r7, #0]
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	015a      	lsls	r2, r3, #5
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	4413      	add	r3, r2
 8004f20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f2e:	f040 8086 	bne.w	800503e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8004f32:	683b      	ldr	r3, [r7, #0]
 8004f34:	781b      	ldrb	r3, [r3, #0]
 8004f36:	015a      	lsls	r2, r3, #5
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	4413      	add	r3, r2
 8004f3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	683a      	ldr	r2, [r7, #0]
 8004f44:	7812      	ldrb	r2, [r2, #0]
 8004f46:	0151      	lsls	r1, r2, #5
 8004f48:	693a      	ldr	r2, [r7, #16]
 8004f4a:	440a      	add	r2, r1
 8004f4c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f50:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004f54:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8004f56:	683b      	ldr	r3, [r7, #0]
 8004f58:	781b      	ldrb	r3, [r3, #0]
 8004f5a:	015a      	lsls	r2, r3, #5
 8004f5c:	693b      	ldr	r3, [r7, #16]
 8004f5e:	4413      	add	r3, r2
 8004f60:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	683a      	ldr	r2, [r7, #0]
 8004f68:	7812      	ldrb	r2, [r2, #0]
 8004f6a:	0151      	lsls	r1, r2, #5
 8004f6c:	693a      	ldr	r2, [r7, #16]
 8004f6e:	440a      	add	r2, r1
 8004f70:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004f78:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	3301      	adds	r3, #1
 8004f7e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	f242 7210 	movw	r2, #10000	; 0x2710
 8004f86:	4293      	cmp	r3, r2
 8004f88:	d902      	bls.n	8004f90 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004f8a:	2301      	movs	r3, #1
 8004f8c:	75fb      	strb	r3, [r7, #23]
          break;
 8004f8e:	e056      	b.n	800503e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004f90:	683b      	ldr	r3, [r7, #0]
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	015a      	lsls	r2, r3, #5
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	4413      	add	r3, r2
 8004f9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f9e:	681b      	ldr	r3, [r3, #0]
 8004fa0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fa4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fa8:	d0e7      	beq.n	8004f7a <USB_EPStopXfer+0x82>
 8004faa:	e048      	b.n	800503e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004fac:	683b      	ldr	r3, [r7, #0]
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	015a      	lsls	r2, r3, #5
 8004fb2:	693b      	ldr	r3, [r7, #16]
 8004fb4:	4413      	add	r3, r2
 8004fb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004fc0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004fc4:	d13b      	bne.n	800503e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8004fc6:	683b      	ldr	r3, [r7, #0]
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	015a      	lsls	r2, r3, #5
 8004fcc:	693b      	ldr	r3, [r7, #16]
 8004fce:	4413      	add	r3, r2
 8004fd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	683a      	ldr	r2, [r7, #0]
 8004fd8:	7812      	ldrb	r2, [r2, #0]
 8004fda:	0151      	lsls	r1, r2, #5
 8004fdc:	693a      	ldr	r2, [r7, #16]
 8004fde:	440a      	add	r2, r1
 8004fe0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fe4:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004fe8:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	781b      	ldrb	r3, [r3, #0]
 8004fee:	015a      	lsls	r2, r3, #5
 8004ff0:	693b      	ldr	r3, [r7, #16]
 8004ff2:	4413      	add	r3, r2
 8004ff4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	683a      	ldr	r2, [r7, #0]
 8004ffc:	7812      	ldrb	r2, [r2, #0]
 8004ffe:	0151      	lsls	r1, r2, #5
 8005000:	693a      	ldr	r2, [r7, #16]
 8005002:	440a      	add	r2, r1
 8005004:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005008:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800500c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800500e:	68fb      	ldr	r3, [r7, #12]
 8005010:	3301      	adds	r3, #1
 8005012:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	f242 7210 	movw	r2, #10000	; 0x2710
 800501a:	4293      	cmp	r3, r2
 800501c:	d902      	bls.n	8005024 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	75fb      	strb	r3, [r7, #23]
          break;
 8005022:	e00c      	b.n	800503e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005024:	683b      	ldr	r3, [r7, #0]
 8005026:	781b      	ldrb	r3, [r3, #0]
 8005028:	015a      	lsls	r2, r3, #5
 800502a:	693b      	ldr	r3, [r7, #16]
 800502c:	4413      	add	r3, r2
 800502e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005038:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800503c:	d0e7      	beq.n	800500e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800503e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005040:	4618      	mov	r0, r3
 8005042:	371c      	adds	r7, #28
 8005044:	46bd      	mov	sp, r7
 8005046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504a:	4770      	bx	lr

0800504c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800504c:	b480      	push	{r7}
 800504e:	b089      	sub	sp, #36	; 0x24
 8005050:	af00      	add	r7, sp, #0
 8005052:	60f8      	str	r0, [r7, #12]
 8005054:	60b9      	str	r1, [r7, #8]
 8005056:	4611      	mov	r1, r2
 8005058:	461a      	mov	r2, r3
 800505a:	460b      	mov	r3, r1
 800505c:	71fb      	strb	r3, [r7, #7]
 800505e:	4613      	mov	r3, r2
 8005060:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 800506a:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 800506e:	2b00      	cmp	r3, #0
 8005070:	d123      	bne.n	80050ba <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 8005072:	88bb      	ldrh	r3, [r7, #4]
 8005074:	3303      	adds	r3, #3
 8005076:	089b      	lsrs	r3, r3, #2
 8005078:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 800507a:	2300      	movs	r3, #0
 800507c:	61bb      	str	r3, [r7, #24]
 800507e:	e018      	b.n	80050b2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8005080:	79fb      	ldrb	r3, [r7, #7]
 8005082:	031a      	lsls	r2, r3, #12
 8005084:	697b      	ldr	r3, [r7, #20]
 8005086:	4413      	add	r3, r2
 8005088:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800508c:	461a      	mov	r2, r3
 800508e:	69fb      	ldr	r3, [r7, #28]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005094:	69fb      	ldr	r3, [r7, #28]
 8005096:	3301      	adds	r3, #1
 8005098:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800509a:	69fb      	ldr	r3, [r7, #28]
 800509c:	3301      	adds	r3, #1
 800509e:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050a0:	69fb      	ldr	r3, [r7, #28]
 80050a2:	3301      	adds	r3, #1
 80050a4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80050a6:	69fb      	ldr	r3, [r7, #28]
 80050a8:	3301      	adds	r3, #1
 80050aa:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80050ac:	69bb      	ldr	r3, [r7, #24]
 80050ae:	3301      	adds	r3, #1
 80050b0:	61bb      	str	r3, [r7, #24]
 80050b2:	69ba      	ldr	r2, [r7, #24]
 80050b4:	693b      	ldr	r3, [r7, #16]
 80050b6:	429a      	cmp	r2, r3
 80050b8:	d3e2      	bcc.n	8005080 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80050ba:	2300      	movs	r3, #0
}
 80050bc:	4618      	mov	r0, r3
 80050be:	3724      	adds	r7, #36	; 0x24
 80050c0:	46bd      	mov	sp, r7
 80050c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050c6:	4770      	bx	lr

080050c8 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80050c8:	b480      	push	{r7}
 80050ca:	b08b      	sub	sp, #44	; 0x2c
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	60f8      	str	r0, [r7, #12]
 80050d0:	60b9      	str	r1, [r7, #8]
 80050d2:	4613      	mov	r3, r2
 80050d4:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80050da:	68bb      	ldr	r3, [r7, #8]
 80050dc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80050de:	88fb      	ldrh	r3, [r7, #6]
 80050e0:	089b      	lsrs	r3, r3, #2
 80050e2:	b29b      	uxth	r3, r3
 80050e4:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80050e6:	88fb      	ldrh	r3, [r7, #6]
 80050e8:	f003 0303 	and.w	r3, r3, #3
 80050ec:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80050ee:	2300      	movs	r3, #0
 80050f0:	623b      	str	r3, [r7, #32]
 80050f2:	e014      	b.n	800511e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80050f4:	69bb      	ldr	r3, [r7, #24]
 80050f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050fe:	601a      	str	r2, [r3, #0]
    pDest++;
 8005100:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005102:	3301      	adds	r3, #1
 8005104:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005106:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005108:	3301      	adds	r3, #1
 800510a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800510c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510e:	3301      	adds	r3, #1
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005112:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005114:	3301      	adds	r3, #1
 8005116:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005118:	6a3b      	ldr	r3, [r7, #32]
 800511a:	3301      	adds	r3, #1
 800511c:	623b      	str	r3, [r7, #32]
 800511e:	6a3a      	ldr	r2, [r7, #32]
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	429a      	cmp	r2, r3
 8005124:	d3e6      	bcc.n	80050f4 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005126:	8bfb      	ldrh	r3, [r7, #30]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d01e      	beq.n	800516a <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800512c:	2300      	movs	r3, #0
 800512e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005130:	69bb      	ldr	r3, [r7, #24]
 8005132:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005136:	461a      	mov	r2, r3
 8005138:	f107 0310 	add.w	r3, r7, #16
 800513c:	6812      	ldr	r2, [r2, #0]
 800513e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005140:	693a      	ldr	r2, [r7, #16]
 8005142:	6a3b      	ldr	r3, [r7, #32]
 8005144:	b2db      	uxtb	r3, r3
 8005146:	00db      	lsls	r3, r3, #3
 8005148:	fa22 f303 	lsr.w	r3, r2, r3
 800514c:	b2da      	uxtb	r2, r3
 800514e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005150:	701a      	strb	r2, [r3, #0]
      i++;
 8005152:	6a3b      	ldr	r3, [r7, #32]
 8005154:	3301      	adds	r3, #1
 8005156:	623b      	str	r3, [r7, #32]
      pDest++;
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	3301      	adds	r3, #1
 800515c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800515e:	8bfb      	ldrh	r3, [r7, #30]
 8005160:	3b01      	subs	r3, #1
 8005162:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8005164:	8bfb      	ldrh	r3, [r7, #30]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d1ea      	bne.n	8005140 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 800516a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800516c:	4618      	mov	r0, r3
 800516e:	372c      	adds	r7, #44	; 0x2c
 8005170:	46bd      	mov	sp, r7
 8005172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005176:	4770      	bx	lr

08005178 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005178:	b480      	push	{r7}
 800517a:	b085      	sub	sp, #20
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
 8005180:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 800518c:	683b      	ldr	r3, [r7, #0]
 800518e:	785b      	ldrb	r3, [r3, #1]
 8005190:	2b01      	cmp	r3, #1
 8005192:	d12c      	bne.n	80051ee <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005194:	68bb      	ldr	r3, [r7, #8]
 8005196:	015a      	lsls	r2, r3, #5
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	4413      	add	r3, r2
 800519c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	db12      	blt.n	80051cc <USB_EPSetStall+0x54>
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d00f      	beq.n	80051cc <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80051ac:	68bb      	ldr	r3, [r7, #8]
 80051ae:	015a      	lsls	r2, r3, #5
 80051b0:	68fb      	ldr	r3, [r7, #12]
 80051b2:	4413      	add	r3, r2
 80051b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68ba      	ldr	r2, [r7, #8]
 80051bc:	0151      	lsls	r1, r2, #5
 80051be:	68fa      	ldr	r2, [r7, #12]
 80051c0:	440a      	add	r2, r1
 80051c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051c6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80051ca:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80051cc:	68bb      	ldr	r3, [r7, #8]
 80051ce:	015a      	lsls	r2, r3, #5
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	4413      	add	r3, r2
 80051d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	68ba      	ldr	r2, [r7, #8]
 80051dc:	0151      	lsls	r1, r2, #5
 80051de:	68fa      	ldr	r2, [r7, #12]
 80051e0:	440a      	add	r2, r1
 80051e2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051e6:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80051ea:	6013      	str	r3, [r2, #0]
 80051ec:	e02b      	b.n	8005246 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	015a      	lsls	r2, r3, #5
 80051f2:	68fb      	ldr	r3, [r7, #12]
 80051f4:	4413      	add	r3, r2
 80051f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	2b00      	cmp	r3, #0
 80051fe:	db12      	blt.n	8005226 <USB_EPSetStall+0xae>
 8005200:	68bb      	ldr	r3, [r7, #8]
 8005202:	2b00      	cmp	r3, #0
 8005204:	d00f      	beq.n	8005226 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005206:	68bb      	ldr	r3, [r7, #8]
 8005208:	015a      	lsls	r2, r3, #5
 800520a:	68fb      	ldr	r3, [r7, #12]
 800520c:	4413      	add	r3, r2
 800520e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	68ba      	ldr	r2, [r7, #8]
 8005216:	0151      	lsls	r1, r2, #5
 8005218:	68fa      	ldr	r2, [r7, #12]
 800521a:	440a      	add	r2, r1
 800521c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005220:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005224:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005226:	68bb      	ldr	r3, [r7, #8]
 8005228:	015a      	lsls	r2, r3, #5
 800522a:	68fb      	ldr	r3, [r7, #12]
 800522c:	4413      	add	r3, r2
 800522e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	68ba      	ldr	r2, [r7, #8]
 8005236:	0151      	lsls	r1, r2, #5
 8005238:	68fa      	ldr	r2, [r7, #12]
 800523a:	440a      	add	r2, r1
 800523c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005240:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005244:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005246:	2300      	movs	r3, #0
}
 8005248:	4618      	mov	r0, r3
 800524a:	3714      	adds	r7, #20
 800524c:	46bd      	mov	sp, r7
 800524e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005252:	4770      	bx	lr

08005254 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005254:	b480      	push	{r7}
 8005256:	b085      	sub	sp, #20
 8005258:	af00      	add	r7, sp, #0
 800525a:	6078      	str	r0, [r7, #4]
 800525c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005262:	683b      	ldr	r3, [r7, #0]
 8005264:	781b      	ldrb	r3, [r3, #0]
 8005266:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	785b      	ldrb	r3, [r3, #1]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d128      	bne.n	80052c2 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8005270:	68bb      	ldr	r3, [r7, #8]
 8005272:	015a      	lsls	r2, r3, #5
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	4413      	add	r3, r2
 8005278:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	68ba      	ldr	r2, [r7, #8]
 8005280:	0151      	lsls	r1, r2, #5
 8005282:	68fa      	ldr	r2, [r7, #12]
 8005284:	440a      	add	r2, r1
 8005286:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800528a:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 800528e:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005290:	683b      	ldr	r3, [r7, #0]
 8005292:	791b      	ldrb	r3, [r3, #4]
 8005294:	2b03      	cmp	r3, #3
 8005296:	d003      	beq.n	80052a0 <USB_EPClearStall+0x4c>
 8005298:	683b      	ldr	r3, [r7, #0]
 800529a:	791b      	ldrb	r3, [r3, #4]
 800529c:	2b02      	cmp	r3, #2
 800529e:	d138      	bne.n	8005312 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052a0:	68bb      	ldr	r3, [r7, #8]
 80052a2:	015a      	lsls	r2, r3, #5
 80052a4:	68fb      	ldr	r3, [r7, #12]
 80052a6:	4413      	add	r3, r2
 80052a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80052ac:	681b      	ldr	r3, [r3, #0]
 80052ae:	68ba      	ldr	r2, [r7, #8]
 80052b0:	0151      	lsls	r1, r2, #5
 80052b2:	68fa      	ldr	r2, [r7, #12]
 80052b4:	440a      	add	r2, r1
 80052b6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80052ba:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	e027      	b.n	8005312 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80052c2:	68bb      	ldr	r3, [r7, #8]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	68fb      	ldr	r3, [r7, #12]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	68ba      	ldr	r2, [r7, #8]
 80052d2:	0151      	lsls	r1, r2, #5
 80052d4:	68fa      	ldr	r2, [r7, #12]
 80052d6:	440a      	add	r2, r1
 80052d8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052dc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80052e0:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	791b      	ldrb	r3, [r3, #4]
 80052e6:	2b03      	cmp	r3, #3
 80052e8:	d003      	beq.n	80052f2 <USB_EPClearStall+0x9e>
 80052ea:	683b      	ldr	r3, [r7, #0]
 80052ec:	791b      	ldrb	r3, [r3, #4]
 80052ee:	2b02      	cmp	r3, #2
 80052f0:	d10f      	bne.n	8005312 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	68ba      	ldr	r2, [r7, #8]
 8005302:	0151      	lsls	r1, r2, #5
 8005304:	68fa      	ldr	r2, [r7, #12]
 8005306:	440a      	add	r2, r1
 8005308:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800530c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005310:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005312:	2300      	movs	r3, #0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3714      	adds	r7, #20
 8005318:	46bd      	mov	sp, r7
 800531a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800531e:	4770      	bx	lr

08005320 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005320:	b480      	push	{r7}
 8005322:	b085      	sub	sp, #20
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
 8005328:	460b      	mov	r3, r1
 800532a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005330:	68fb      	ldr	r3, [r7, #12]
 8005332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	68fa      	ldr	r2, [r7, #12]
 800533a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800533e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005342:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800534a:	681a      	ldr	r2, [r3, #0]
 800534c:	78fb      	ldrb	r3, [r7, #3]
 800534e:	011b      	lsls	r3, r3, #4
 8005350:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005354:	68f9      	ldr	r1, [r7, #12]
 8005356:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800535a:	4313      	orrs	r3, r2
 800535c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800535e:	2300      	movs	r3, #0
}
 8005360:	4618      	mov	r0, r3
 8005362:	3714      	adds	r7, #20
 8005364:	46bd      	mov	sp, r7
 8005366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800536a:	4770      	bx	lr

0800536c <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 800536c:	b480      	push	{r7}
 800536e:	b085      	sub	sp, #20
 8005370:	af00      	add	r7, sp, #0
 8005372:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800537e:	681b      	ldr	r3, [r3, #0]
 8005380:	68fa      	ldr	r2, [r7, #12]
 8005382:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005386:	f023 0303 	bic.w	r3, r3, #3
 800538a:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 800538c:	68fb      	ldr	r3, [r7, #12]
 800538e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005392:	685b      	ldr	r3, [r3, #4]
 8005394:	68fa      	ldr	r2, [r7, #12]
 8005396:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800539a:	f023 0302 	bic.w	r3, r3, #2
 800539e:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053a0:	2300      	movs	r3, #0
}
 80053a2:	4618      	mov	r0, r3
 80053a4:	3714      	adds	r7, #20
 80053a6:	46bd      	mov	sp, r7
 80053a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ac:	4770      	bx	lr

080053ae <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80053ae:	b480      	push	{r7}
 80053b0:	b085      	sub	sp, #20
 80053b2:	af00      	add	r7, sp, #0
 80053b4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	68fa      	ldr	r2, [r7, #12]
 80053c4:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80053c8:	f023 0303 	bic.w	r3, r3, #3
 80053cc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80053ce:	68fb      	ldr	r3, [r7, #12]
 80053d0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80053d4:	685b      	ldr	r3, [r3, #4]
 80053d6:	68fa      	ldr	r2, [r7, #12]
 80053d8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80053dc:	f043 0302 	orr.w	r3, r3, #2
 80053e0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80053e2:	2300      	movs	r3, #0
}
 80053e4:	4618      	mov	r0, r3
 80053e6:	3714      	adds	r7, #20
 80053e8:	46bd      	mov	sp, r7
 80053ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ee:	4770      	bx	lr

080053f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 80053f0:	b480      	push	{r7}
 80053f2:	b085      	sub	sp, #20
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	695b      	ldr	r3, [r3, #20]
 80053fc:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	699b      	ldr	r3, [r3, #24]
 8005402:	68fa      	ldr	r2, [r7, #12]
 8005404:	4013      	ands	r3, r2
 8005406:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005408:	68fb      	ldr	r3, [r7, #12]
}
 800540a:	4618      	mov	r0, r3
 800540c:	3714      	adds	r7, #20
 800540e:	46bd      	mov	sp, r7
 8005410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005414:	4770      	bx	lr

08005416 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005416:	b480      	push	{r7}
 8005418:	b085      	sub	sp, #20
 800541a:	af00      	add	r7, sp, #0
 800541c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005428:	699b      	ldr	r3, [r3, #24]
 800542a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800542c:	68fb      	ldr	r3, [r7, #12]
 800542e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005432:	69db      	ldr	r3, [r3, #28]
 8005434:	68ba      	ldr	r2, [r7, #8]
 8005436:	4013      	ands	r3, r2
 8005438:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800543a:	68bb      	ldr	r3, [r7, #8]
 800543c:	0c1b      	lsrs	r3, r3, #16
}
 800543e:	4618      	mov	r0, r3
 8005440:	3714      	adds	r7, #20
 8005442:	46bd      	mov	sp, r7
 8005444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005448:	4770      	bx	lr

0800544a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800544a:	b480      	push	{r7}
 800544c:	b085      	sub	sp, #20
 800544e:	af00      	add	r7, sp, #0
 8005450:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800545c:	699b      	ldr	r3, [r3, #24]
 800545e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005466:	69db      	ldr	r3, [r3, #28]
 8005468:	68ba      	ldr	r2, [r7, #8]
 800546a:	4013      	ands	r3, r2
 800546c:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 800546e:	68bb      	ldr	r3, [r7, #8]
 8005470:	b29b      	uxth	r3, r3
}
 8005472:	4618      	mov	r0, r3
 8005474:	3714      	adds	r7, #20
 8005476:	46bd      	mov	sp, r7
 8005478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800547c:	4770      	bx	lr

0800547e <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 800547e:	b480      	push	{r7}
 8005480:	b085      	sub	sp, #20
 8005482:	af00      	add	r7, sp, #0
 8005484:	6078      	str	r0, [r7, #4]
 8005486:	460b      	mov	r3, r1
 8005488:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 800548e:	78fb      	ldrb	r3, [r7, #3]
 8005490:	015a      	lsls	r2, r3, #5
 8005492:	68fb      	ldr	r3, [r7, #12]
 8005494:	4413      	add	r3, r2
 8005496:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800549a:	689b      	ldr	r3, [r3, #8]
 800549c:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054a4:	695b      	ldr	r3, [r3, #20]
 80054a6:	68ba      	ldr	r2, [r7, #8]
 80054a8:	4013      	ands	r3, r2
 80054aa:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80054ac:	68bb      	ldr	r3, [r7, #8]
}
 80054ae:	4618      	mov	r0, r3
 80054b0:	3714      	adds	r7, #20
 80054b2:	46bd      	mov	sp, r7
 80054b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b8:	4770      	bx	lr

080054ba <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80054ba:	b480      	push	{r7}
 80054bc:	b087      	sub	sp, #28
 80054be:	af00      	add	r7, sp, #0
 80054c0:	6078      	str	r0, [r7, #4]
 80054c2:	460b      	mov	r3, r1
 80054c4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 80054ca:	697b      	ldr	r3, [r7, #20]
 80054cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054d0:	691b      	ldr	r3, [r3, #16]
 80054d2:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 80054d4:	697b      	ldr	r3, [r7, #20]
 80054d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80054da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054dc:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 80054de:	78fb      	ldrb	r3, [r7, #3]
 80054e0:	f003 030f 	and.w	r3, r3, #15
 80054e4:	68fa      	ldr	r2, [r7, #12]
 80054e6:	fa22 f303 	lsr.w	r3, r2, r3
 80054ea:	01db      	lsls	r3, r3, #7
 80054ec:	b2db      	uxtb	r3, r3
 80054ee:	693a      	ldr	r2, [r7, #16]
 80054f0:	4313      	orrs	r3, r2
 80054f2:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 80054f4:	78fb      	ldrb	r3, [r7, #3]
 80054f6:	015a      	lsls	r2, r3, #5
 80054f8:	697b      	ldr	r3, [r7, #20]
 80054fa:	4413      	add	r3, r2
 80054fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005500:	689b      	ldr	r3, [r3, #8]
 8005502:	693a      	ldr	r2, [r7, #16]
 8005504:	4013      	ands	r3, r2
 8005506:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005508:	68bb      	ldr	r3, [r7, #8]
}
 800550a:	4618      	mov	r0, r3
 800550c:	371c      	adds	r7, #28
 800550e:	46bd      	mov	sp, r7
 8005510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005514:	4770      	bx	lr

08005516 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005516:	b480      	push	{r7}
 8005518:	b083      	sub	sp, #12
 800551a:	af00      	add	r7, sp, #0
 800551c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	695b      	ldr	r3, [r3, #20]
 8005522:	f003 0301 	and.w	r3, r3, #1
}
 8005526:	4618      	mov	r0, r3
 8005528:	370c      	adds	r7, #12
 800552a:	46bd      	mov	sp, r7
 800552c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005530:	4770      	bx	lr

08005532 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005532:	b480      	push	{r7}
 8005534:	b085      	sub	sp, #20
 8005536:	af00      	add	r7, sp, #0
 8005538:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68fa      	ldr	r2, [r7, #12]
 8005548:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800554c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005550:	f023 0307 	bic.w	r3, r3, #7
 8005554:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005556:	68fb      	ldr	r3, [r7, #12]
 8005558:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800555c:	685b      	ldr	r3, [r3, #4]
 800555e:	68fa      	ldr	r2, [r7, #12]
 8005560:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005568:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800556a:	2300      	movs	r3, #0
}
 800556c:	4618      	mov	r0, r3
 800556e:	3714      	adds	r7, #20
 8005570:	46bd      	mov	sp, r7
 8005572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005576:	4770      	bx	lr

08005578 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005578:	b480      	push	{r7}
 800557a:	b087      	sub	sp, #28
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	460b      	mov	r3, r1
 8005582:	607a      	str	r2, [r7, #4]
 8005584:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005586:	68fb      	ldr	r3, [r7, #12]
 8005588:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 800558a:	68fb      	ldr	r3, [r7, #12]
 800558c:	333c      	adds	r3, #60	; 0x3c
 800558e:	3304      	adds	r3, #4
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005594:	693b      	ldr	r3, [r7, #16]
 8005596:	4a26      	ldr	r2, [pc, #152]	; (8005630 <USB_EP0_OutStart+0xb8>)
 8005598:	4293      	cmp	r3, r2
 800559a:	d90a      	bls.n	80055b2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800559c:	697b      	ldr	r3, [r7, #20]
 800559e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80055a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80055ac:	d101      	bne.n	80055b2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80055ae:	2300      	movs	r3, #0
 80055b0:	e037      	b.n	8005622 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80055b2:	697b      	ldr	r3, [r7, #20]
 80055b4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055b8:	461a      	mov	r2, r3
 80055ba:	2300      	movs	r3, #0
 80055bc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055be:	697b      	ldr	r3, [r7, #20]
 80055c0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055c4:	691b      	ldr	r3, [r3, #16]
 80055c6:	697a      	ldr	r2, [r7, #20]
 80055c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055cc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055d0:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 80055d2:	697b      	ldr	r3, [r7, #20]
 80055d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055d8:	691b      	ldr	r3, [r3, #16]
 80055da:	697a      	ldr	r2, [r7, #20]
 80055dc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055e0:	f043 0318 	orr.w	r3, r3, #24
 80055e4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 80055e6:	697b      	ldr	r3, [r7, #20]
 80055e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ec:	691b      	ldr	r3, [r3, #16]
 80055ee:	697a      	ldr	r2, [r7, #20]
 80055f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f4:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 80055f8:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 80055fa:	7afb      	ldrb	r3, [r7, #11]
 80055fc:	2b01      	cmp	r3, #1
 80055fe:	d10f      	bne.n	8005620 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005600:	697b      	ldr	r3, [r7, #20]
 8005602:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005606:	461a      	mov	r2, r3
 8005608:	687b      	ldr	r3, [r7, #4]
 800560a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 800560c:	697b      	ldr	r3, [r7, #20]
 800560e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	697a      	ldr	r2, [r7, #20]
 8005616:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800561a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 800561e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005620:	2300      	movs	r3, #0
}
 8005622:	4618      	mov	r0, r3
 8005624:	371c      	adds	r7, #28
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr
 800562e:	bf00      	nop
 8005630:	4f54300a 	.word	0x4f54300a

08005634 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005634:	b480      	push	{r7}
 8005636:	b085      	sub	sp, #20
 8005638:	af00      	add	r7, sp, #0
 800563a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	3301      	adds	r3, #1
 8005644:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	4a13      	ldr	r2, [pc, #76]	; (8005698 <USB_CoreReset+0x64>)
 800564a:	4293      	cmp	r3, r2
 800564c:	d901      	bls.n	8005652 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800564e:	2303      	movs	r3, #3
 8005650:	e01b      	b.n	800568a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	2b00      	cmp	r3, #0
 8005658:	daf2      	bge.n	8005640 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 800565a:	2300      	movs	r3, #0
 800565c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	691b      	ldr	r3, [r3, #16]
 8005662:	f043 0201 	orr.w	r2, r3, #1
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	3301      	adds	r3, #1
 800566e:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	4a09      	ldr	r2, [pc, #36]	; (8005698 <USB_CoreReset+0x64>)
 8005674:	4293      	cmp	r3, r2
 8005676:	d901      	bls.n	800567c <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005678:	2303      	movs	r3, #3
 800567a:	e006      	b.n	800568a <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	691b      	ldr	r3, [r3, #16]
 8005680:	f003 0301 	and.w	r3, r3, #1
 8005684:	2b01      	cmp	r3, #1
 8005686:	d0f0      	beq.n	800566a <USB_CoreReset+0x36>

  return HAL_OK;
 8005688:	2300      	movs	r3, #0
}
 800568a:	4618      	mov	r0, r3
 800568c:	3714      	adds	r7, #20
 800568e:	46bd      	mov	sp, r7
 8005690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005694:	4770      	bx	lr
 8005696:	bf00      	nop
 8005698:	00030d40 	.word	0x00030d40

0800569c <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800569c:	b580      	push	{r7, lr}
 800569e:	b084      	sub	sp, #16
 80056a0:	af00      	add	r7, sp, #0
 80056a2:	6078      	str	r0, [r7, #4]
 80056a4:	460b      	mov	r3, r1
 80056a6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 80056a8:	2010      	movs	r0, #16
 80056aa:	f002 f911 	bl	80078d0 <USBD_static_malloc>
 80056ae:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d109      	bne.n	80056ca <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	32b0      	adds	r2, #176	; 0xb0
 80056c0:	2100      	movs	r1, #0
 80056c2:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 80056c6:	2302      	movs	r3, #2
 80056c8:	e048      	b.n	800575c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	32b0      	adds	r2, #176	; 0xb0
 80056d4:	68f9      	ldr	r1, [r7, #12]
 80056d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	32b0      	adds	r2, #176	; 0xb0
 80056e4:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	7c1b      	ldrb	r3, [r3, #16]
 80056f2:	2b00      	cmp	r3, #0
 80056f4:	d10d      	bne.n	8005712 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 80056f6:	4b1b      	ldr	r3, [pc, #108]	; (8005764 <USBD_HID_Init+0xc8>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	f003 020f 	and.w	r2, r3, #15
 80056fe:	6879      	ldr	r1, [r7, #4]
 8005700:	4613      	mov	r3, r2
 8005702:	009b      	lsls	r3, r3, #2
 8005704:	4413      	add	r3, r2
 8005706:	009b      	lsls	r3, r3, #2
 8005708:	440b      	add	r3, r1
 800570a:	3326      	adds	r3, #38	; 0x26
 800570c:	2207      	movs	r2, #7
 800570e:	801a      	strh	r2, [r3, #0]
 8005710:	e00c      	b.n	800572c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005712:	4b14      	ldr	r3, [pc, #80]	; (8005764 <USBD_HID_Init+0xc8>)
 8005714:	781b      	ldrb	r3, [r3, #0]
 8005716:	f003 020f 	and.w	r2, r3, #15
 800571a:	6879      	ldr	r1, [r7, #4]
 800571c:	4613      	mov	r3, r2
 800571e:	009b      	lsls	r3, r3, #2
 8005720:	4413      	add	r3, r2
 8005722:	009b      	lsls	r3, r3, #2
 8005724:	440b      	add	r3, r1
 8005726:	3326      	adds	r3, #38	; 0x26
 8005728:	220a      	movs	r2, #10
 800572a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 800572c:	4b0d      	ldr	r3, [pc, #52]	; (8005764 <USBD_HID_Init+0xc8>)
 800572e:	7819      	ldrb	r1, [r3, #0]
 8005730:	2304      	movs	r3, #4
 8005732:	2203      	movs	r2, #3
 8005734:	6878      	ldr	r0, [r7, #4]
 8005736:	f001 ffba 	bl	80076ae <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 800573a:	4b0a      	ldr	r3, [pc, #40]	; (8005764 <USBD_HID_Init+0xc8>)
 800573c:	781b      	ldrb	r3, [r3, #0]
 800573e:	f003 020f 	and.w	r2, r3, #15
 8005742:	6879      	ldr	r1, [r7, #4]
 8005744:	4613      	mov	r3, r2
 8005746:	009b      	lsls	r3, r3, #2
 8005748:	4413      	add	r3, r2
 800574a:	009b      	lsls	r3, r3, #2
 800574c:	440b      	add	r3, r1
 800574e:	3324      	adds	r3, #36	; 0x24
 8005750:	2201      	movs	r2, #1
 8005752:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	2200      	movs	r2, #0
 8005758:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800575a:	2300      	movs	r3, #0
}
 800575c:	4618      	mov	r0, r3
 800575e:	3710      	adds	r7, #16
 8005760:	46bd      	mov	sp, r7
 8005762:	bd80      	pop	{r7, pc}
 8005764:	200000f2 	.word	0x200000f2

08005768 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005768:	b580      	push	{r7, lr}
 800576a:	b082      	sub	sp, #8
 800576c:	af00      	add	r7, sp, #0
 800576e:	6078      	str	r0, [r7, #4]
 8005770:	460b      	mov	r3, r1
 8005772:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005774:	4b1f      	ldr	r3, [pc, #124]	; (80057f4 <USBD_HID_DeInit+0x8c>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	4619      	mov	r1, r3
 800577a:	6878      	ldr	r0, [r7, #4]
 800577c:	f001 ffbd 	bl	80076fa <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005780:	4b1c      	ldr	r3, [pc, #112]	; (80057f4 <USBD_HID_DeInit+0x8c>)
 8005782:	781b      	ldrb	r3, [r3, #0]
 8005784:	f003 020f 	and.w	r2, r3, #15
 8005788:	6879      	ldr	r1, [r7, #4]
 800578a:	4613      	mov	r3, r2
 800578c:	009b      	lsls	r3, r3, #2
 800578e:	4413      	add	r3, r2
 8005790:	009b      	lsls	r3, r3, #2
 8005792:	440b      	add	r3, r1
 8005794:	3324      	adds	r3, #36	; 0x24
 8005796:	2200      	movs	r2, #0
 8005798:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 800579a:	4b16      	ldr	r3, [pc, #88]	; (80057f4 <USBD_HID_DeInit+0x8c>)
 800579c:	781b      	ldrb	r3, [r3, #0]
 800579e:	f003 020f 	and.w	r2, r3, #15
 80057a2:	6879      	ldr	r1, [r7, #4]
 80057a4:	4613      	mov	r3, r2
 80057a6:	009b      	lsls	r3, r3, #2
 80057a8:	4413      	add	r3, r2
 80057aa:	009b      	lsls	r3, r3, #2
 80057ac:	440b      	add	r3, r1
 80057ae:	3326      	adds	r3, #38	; 0x26
 80057b0:	2200      	movs	r2, #0
 80057b2:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	32b0      	adds	r2, #176	; 0xb0
 80057be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057c2:	2b00      	cmp	r3, #0
 80057c4:	d011      	beq.n	80057ea <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	32b0      	adds	r2, #176	; 0xb0
 80057d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f002 f889 	bl	80078ec <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	32b0      	adds	r2, #176	; 0xb0
 80057e4:	2100      	movs	r1, #0
 80057e6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 80057ea:	2300      	movs	r3, #0
}
 80057ec:	4618      	mov	r0, r3
 80057ee:	3708      	adds	r7, #8
 80057f0:	46bd      	mov	sp, r7
 80057f2:	bd80      	pop	{r7, pc}
 80057f4:	200000f2 	.word	0x200000f2

080057f8 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80057f8:	b580      	push	{r7, lr}
 80057fa:	b086      	sub	sp, #24
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]
 8005800:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	32b0      	adds	r2, #176	; 0xb0
 800580c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005810:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005812:	2300      	movs	r3, #0
 8005814:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d101      	bne.n	8005824 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005820:	2303      	movs	r3, #3
 8005822:	e0e8      	b.n	80059f6 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	781b      	ldrb	r3, [r3, #0]
 8005828:	f003 0360 	and.w	r3, r3, #96	; 0x60
 800582c:	2b00      	cmp	r3, #0
 800582e:	d046      	beq.n	80058be <USBD_HID_Setup+0xc6>
 8005830:	2b20      	cmp	r3, #32
 8005832:	f040 80d8 	bne.w	80059e6 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005836:	683b      	ldr	r3, [r7, #0]
 8005838:	785b      	ldrb	r3, [r3, #1]
 800583a:	3b02      	subs	r3, #2
 800583c:	2b09      	cmp	r3, #9
 800583e:	d836      	bhi.n	80058ae <USBD_HID_Setup+0xb6>
 8005840:	a201      	add	r2, pc, #4	; (adr r2, 8005848 <USBD_HID_Setup+0x50>)
 8005842:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005846:	bf00      	nop
 8005848:	0800589f 	.word	0x0800589f
 800584c:	0800587f 	.word	0x0800587f
 8005850:	080058af 	.word	0x080058af
 8005854:	080058af 	.word	0x080058af
 8005858:	080058af 	.word	0x080058af
 800585c:	080058af 	.word	0x080058af
 8005860:	080058af 	.word	0x080058af
 8005864:	080058af 	.word	0x080058af
 8005868:	0800588d 	.word	0x0800588d
 800586c:	08005871 	.word	0x08005871
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005870:	683b      	ldr	r3, [r7, #0]
 8005872:	885b      	ldrh	r3, [r3, #2]
 8005874:	b2db      	uxtb	r3, r3
 8005876:	461a      	mov	r2, r3
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	601a      	str	r2, [r3, #0]
          break;
 800587c:	e01e      	b.n	80058bc <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2201      	movs	r2, #1
 8005882:	4619      	mov	r1, r3
 8005884:	6878      	ldr	r0, [r7, #4]
 8005886:	f001 fbd5 	bl	8007034 <USBD_CtlSendData>
          break;
 800588a:	e017      	b.n	80058bc <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 800588c:	683b      	ldr	r3, [r7, #0]
 800588e:	885b      	ldrh	r3, [r3, #2]
 8005890:	0a1b      	lsrs	r3, r3, #8
 8005892:	b29b      	uxth	r3, r3
 8005894:	b2db      	uxtb	r3, r3
 8005896:	461a      	mov	r2, r3
 8005898:	68fb      	ldr	r3, [r7, #12]
 800589a:	605a      	str	r2, [r3, #4]
          break;
 800589c:	e00e      	b.n	80058bc <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800589e:	68fb      	ldr	r3, [r7, #12]
 80058a0:	3304      	adds	r3, #4
 80058a2:	2201      	movs	r2, #1
 80058a4:	4619      	mov	r1, r3
 80058a6:	6878      	ldr	r0, [r7, #4]
 80058a8:	f001 fbc4 	bl	8007034 <USBD_CtlSendData>
          break;
 80058ac:	e006      	b.n	80058bc <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 80058ae:	6839      	ldr	r1, [r7, #0]
 80058b0:	6878      	ldr	r0, [r7, #4]
 80058b2:	f001 fb4e 	bl	8006f52 <USBD_CtlError>
          ret = USBD_FAIL;
 80058b6:	2303      	movs	r3, #3
 80058b8:	75fb      	strb	r3, [r7, #23]
          break;
 80058ba:	bf00      	nop
      }
      break;
 80058bc:	e09a      	b.n	80059f4 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80058be:	683b      	ldr	r3, [r7, #0]
 80058c0:	785b      	ldrb	r3, [r3, #1]
 80058c2:	2b0b      	cmp	r3, #11
 80058c4:	f200 8086 	bhi.w	80059d4 <USBD_HID_Setup+0x1dc>
 80058c8:	a201      	add	r2, pc, #4	; (adr r2, 80058d0 <USBD_HID_Setup+0xd8>)
 80058ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80058ce:	bf00      	nop
 80058d0:	08005901 	.word	0x08005901
 80058d4:	080059e3 	.word	0x080059e3
 80058d8:	080059d5 	.word	0x080059d5
 80058dc:	080059d5 	.word	0x080059d5
 80058e0:	080059d5 	.word	0x080059d5
 80058e4:	080059d5 	.word	0x080059d5
 80058e8:	0800592b 	.word	0x0800592b
 80058ec:	080059d5 	.word	0x080059d5
 80058f0:	080059d5 	.word	0x080059d5
 80058f4:	080059d5 	.word	0x080059d5
 80058f8:	08005983 	.word	0x08005983
 80058fc:	080059ad 	.word	0x080059ad
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005906:	b2db      	uxtb	r3, r3
 8005908:	2b03      	cmp	r3, #3
 800590a:	d107      	bne.n	800591c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 800590c:	f107 030a 	add.w	r3, r7, #10
 8005910:	2202      	movs	r2, #2
 8005912:	4619      	mov	r1, r3
 8005914:	6878      	ldr	r0, [r7, #4]
 8005916:	f001 fb8d 	bl	8007034 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800591a:	e063      	b.n	80059e4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800591c:	6839      	ldr	r1, [r7, #0]
 800591e:	6878      	ldr	r0, [r7, #4]
 8005920:	f001 fb17 	bl	8006f52 <USBD_CtlError>
            ret = USBD_FAIL;
 8005924:	2303      	movs	r3, #3
 8005926:	75fb      	strb	r3, [r7, #23]
          break;
 8005928:	e05c      	b.n	80059e4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 800592a:	683b      	ldr	r3, [r7, #0]
 800592c:	885b      	ldrh	r3, [r3, #2]
 800592e:	0a1b      	lsrs	r3, r3, #8
 8005930:	b29b      	uxth	r3, r3
 8005932:	2b22      	cmp	r3, #34	; 0x22
 8005934:	d108      	bne.n	8005948 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005936:	683b      	ldr	r3, [r7, #0]
 8005938:	88db      	ldrh	r3, [r3, #6]
 800593a:	2b4a      	cmp	r3, #74	; 0x4a
 800593c:	bf28      	it	cs
 800593e:	234a      	movcs	r3, #74	; 0x4a
 8005940:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005942:	4b2f      	ldr	r3, [pc, #188]	; (8005a00 <USBD_HID_Setup+0x208>)
 8005944:	613b      	str	r3, [r7, #16]
 8005946:	e015      	b.n	8005974 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005948:	683b      	ldr	r3, [r7, #0]
 800594a:	885b      	ldrh	r3, [r3, #2]
 800594c:	0a1b      	lsrs	r3, r3, #8
 800594e:	b29b      	uxth	r3, r3
 8005950:	2b21      	cmp	r3, #33	; 0x21
 8005952:	d108      	bne.n	8005966 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005954:	4b2b      	ldr	r3, [pc, #172]	; (8005a04 <USBD_HID_Setup+0x20c>)
 8005956:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	88db      	ldrh	r3, [r3, #6]
 800595c:	2b09      	cmp	r3, #9
 800595e:	bf28      	it	cs
 8005960:	2309      	movcs	r3, #9
 8005962:	82bb      	strh	r3, [r7, #20]
 8005964:	e006      	b.n	8005974 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005966:	6839      	ldr	r1, [r7, #0]
 8005968:	6878      	ldr	r0, [r7, #4]
 800596a:	f001 faf2 	bl	8006f52 <USBD_CtlError>
            ret = USBD_FAIL;
 800596e:	2303      	movs	r3, #3
 8005970:	75fb      	strb	r3, [r7, #23]
            break;
 8005972:	e037      	b.n	80059e4 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005974:	8abb      	ldrh	r3, [r7, #20]
 8005976:	461a      	mov	r2, r3
 8005978:	6939      	ldr	r1, [r7, #16]
 800597a:	6878      	ldr	r0, [r7, #4]
 800597c:	f001 fb5a 	bl	8007034 <USBD_CtlSendData>
          break;
 8005980:	e030      	b.n	80059e4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005988:	b2db      	uxtb	r3, r3
 800598a:	2b03      	cmp	r3, #3
 800598c:	d107      	bne.n	800599e <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	3308      	adds	r3, #8
 8005992:	2201      	movs	r2, #1
 8005994:	4619      	mov	r1, r3
 8005996:	6878      	ldr	r0, [r7, #4]
 8005998:	f001 fb4c 	bl	8007034 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800599c:	e022      	b.n	80059e4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800599e:	6839      	ldr	r1, [r7, #0]
 80059a0:	6878      	ldr	r0, [r7, #4]
 80059a2:	f001 fad6 	bl	8006f52 <USBD_CtlError>
            ret = USBD_FAIL;
 80059a6:	2303      	movs	r3, #3
 80059a8:	75fb      	strb	r3, [r7, #23]
          break;
 80059aa:	e01b      	b.n	80059e4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80059b2:	b2db      	uxtb	r3, r3
 80059b4:	2b03      	cmp	r3, #3
 80059b6:	d106      	bne.n	80059c6 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80059b8:	683b      	ldr	r3, [r7, #0]
 80059ba:	885b      	ldrh	r3, [r3, #2]
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	461a      	mov	r2, r3
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80059c4:	e00e      	b.n	80059e4 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80059c6:	6839      	ldr	r1, [r7, #0]
 80059c8:	6878      	ldr	r0, [r7, #4]
 80059ca:	f001 fac2 	bl	8006f52 <USBD_CtlError>
            ret = USBD_FAIL;
 80059ce:	2303      	movs	r3, #3
 80059d0:	75fb      	strb	r3, [r7, #23]
          break;
 80059d2:	e007      	b.n	80059e4 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80059d4:	6839      	ldr	r1, [r7, #0]
 80059d6:	6878      	ldr	r0, [r7, #4]
 80059d8:	f001 fabb 	bl	8006f52 <USBD_CtlError>
          ret = USBD_FAIL;
 80059dc:	2303      	movs	r3, #3
 80059de:	75fb      	strb	r3, [r7, #23]
          break;
 80059e0:	e000      	b.n	80059e4 <USBD_HID_Setup+0x1ec>
          break;
 80059e2:	bf00      	nop
      }
      break;
 80059e4:	e006      	b.n	80059f4 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80059e6:	6839      	ldr	r1, [r7, #0]
 80059e8:	6878      	ldr	r0, [r7, #4]
 80059ea:	f001 fab2 	bl	8006f52 <USBD_CtlError>
      ret = USBD_FAIL;
 80059ee:	2303      	movs	r3, #3
 80059f0:	75fb      	strb	r3, [r7, #23]
      break;
 80059f2:	bf00      	nop
  }

  return (uint8_t)ret;
 80059f4:	7dfb      	ldrb	r3, [r7, #23]
}
 80059f6:	4618      	mov	r0, r3
 80059f8:	3718      	adds	r7, #24
 80059fa:	46bd      	mov	sp, r7
 80059fc:	bd80      	pop	{r7, pc}
 80059fe:	bf00      	nop
 8005a00:	200000a8 	.word	0x200000a8
 8005a04:	20000090 	.word	0x20000090

08005a08 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005a08:	b580      	push	{r7, lr}
 8005a0a:	b086      	sub	sp, #24
 8005a0c:	af00      	add	r7, sp, #0
 8005a0e:	60f8      	str	r0, [r7, #12]
 8005a10:	60b9      	str	r1, [r7, #8]
 8005a12:	4613      	mov	r3, r2
 8005a14:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	32b0      	adds	r2, #176	; 0xb0
 8005a20:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a24:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	2b00      	cmp	r3, #0
 8005a2a:	d101      	bne.n	8005a30 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005a2c:	2303      	movs	r3, #3
 8005a2e:	e014      	b.n	8005a5a <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a36:	b2db      	uxtb	r3, r3
 8005a38:	2b03      	cmp	r3, #3
 8005a3a:	d10d      	bne.n	8005a58 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8005a3c:	697b      	ldr	r3, [r7, #20]
 8005a3e:	7b1b      	ldrb	r3, [r3, #12]
 8005a40:	2b00      	cmp	r3, #0
 8005a42:	d109      	bne.n	8005a58 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	2201      	movs	r2, #1
 8005a48:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005a4a:	4b06      	ldr	r3, [pc, #24]	; (8005a64 <USBD_HID_SendReport+0x5c>)
 8005a4c:	7819      	ldrb	r1, [r3, #0]
 8005a4e:	88fb      	ldrh	r3, [r7, #6]
 8005a50:	68ba      	ldr	r2, [r7, #8]
 8005a52:	68f8      	ldr	r0, [r7, #12]
 8005a54:	f001 fef9 	bl	800784a <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005a58:	2300      	movs	r3, #0
}
 8005a5a:	4618      	mov	r0, r3
 8005a5c:	3718      	adds	r7, #24
 8005a5e:	46bd      	mov	sp, r7
 8005a60:	bd80      	pop	{r7, pc}
 8005a62:	bf00      	nop
 8005a64:	200000f2 	.word	0x200000f2

08005a68 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b084      	sub	sp, #16
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005a70:	2181      	movs	r1, #129	; 0x81
 8005a72:	4809      	ldr	r0, [pc, #36]	; (8005a98 <USBD_HID_GetFSCfgDesc+0x30>)
 8005a74:	f000 fc35 	bl	80062e2 <USBD_GetEpDesc>
 8005a78:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	2b00      	cmp	r3, #0
 8005a7e:	d002      	beq.n	8005a86 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	220a      	movs	r2, #10
 8005a84:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	2222      	movs	r2, #34	; 0x22
 8005a8a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005a8c:	4b02      	ldr	r3, [pc, #8]	; (8005a98 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005a8e:	4618      	mov	r0, r3
 8005a90:	3710      	adds	r7, #16
 8005a92:	46bd      	mov	sp, r7
 8005a94:	bd80      	pop	{r7, pc}
 8005a96:	bf00      	nop
 8005a98:	2000006c 	.word	0x2000006c

08005a9c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005a9c:	b580      	push	{r7, lr}
 8005a9e:	b084      	sub	sp, #16
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005aa4:	2181      	movs	r1, #129	; 0x81
 8005aa6:	4809      	ldr	r0, [pc, #36]	; (8005acc <USBD_HID_GetHSCfgDesc+0x30>)
 8005aa8:	f000 fc1b 	bl	80062e2 <USBD_GetEpDesc>
 8005aac:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005aae:	68fb      	ldr	r3, [r7, #12]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d002      	beq.n	8005aba <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	2207      	movs	r2, #7
 8005ab8:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	2222      	movs	r2, #34	; 0x22
 8005abe:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005ac0:	4b02      	ldr	r3, [pc, #8]	; (8005acc <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}
 8005aca:	bf00      	nop
 8005acc:	2000006c 	.word	0x2000006c

08005ad0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005ad0:	b580      	push	{r7, lr}
 8005ad2:	b084      	sub	sp, #16
 8005ad4:	af00      	add	r7, sp, #0
 8005ad6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005ad8:	2181      	movs	r1, #129	; 0x81
 8005ada:	4809      	ldr	r0, [pc, #36]	; (8005b00 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005adc:	f000 fc01 	bl	80062e2 <USBD_GetEpDesc>
 8005ae0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d002      	beq.n	8005aee <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005ae8:	68fb      	ldr	r3, [r7, #12]
 8005aea:	220a      	movs	r2, #10
 8005aec:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	2222      	movs	r2, #34	; 0x22
 8005af2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005af4:	4b02      	ldr	r3, [pc, #8]	; (8005b00 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005af6:	4618      	mov	r0, r3
 8005af8:	3710      	adds	r7, #16
 8005afa:	46bd      	mov	sp, r7
 8005afc:	bd80      	pop	{r7, pc}
 8005afe:	bf00      	nop
 8005b00:	2000006c 	.word	0x2000006c

08005b04 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005b04:	b480      	push	{r7}
 8005b06:	b083      	sub	sp, #12
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	32b0      	adds	r2, #176	; 0xb0
 8005b1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b1e:	2200      	movs	r2, #0
 8005b20:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005b22:	2300      	movs	r3, #0
}
 8005b24:	4618      	mov	r0, r3
 8005b26:	370c      	adds	r7, #12
 8005b28:	46bd      	mov	sp, r7
 8005b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b2e:	4770      	bx	lr

08005b30 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	220a      	movs	r2, #10
 8005b3c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005b3e:	4b03      	ldr	r3, [pc, #12]	; (8005b4c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005b40:	4618      	mov	r0, r3
 8005b42:	370c      	adds	r7, #12
 8005b44:	46bd      	mov	sp, r7
 8005b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b4a:	4770      	bx	lr
 8005b4c:	2000009c 	.word	0x2000009c

08005b50 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	60f8      	str	r0, [r7, #12]
 8005b58:	60b9      	str	r1, [r7, #8]
 8005b5a:	4613      	mov	r3, r2
 8005b5c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	2b00      	cmp	r3, #0
 8005b62:	d101      	bne.n	8005b68 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005b64:	2303      	movs	r3, #3
 8005b66:	e01f      	b.n	8005ba8 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	2200      	movs	r2, #0
 8005b74:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005b78:	68fb      	ldr	r3, [r7, #12]
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005b80:	68bb      	ldr	r3, [r7, #8]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d003      	beq.n	8005b8e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	68ba      	ldr	r2, [r7, #8]
 8005b8a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2201      	movs	r2, #1
 8005b92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005b96:	68fb      	ldr	r3, [r7, #12]
 8005b98:	79fa      	ldrb	r2, [r7, #7]
 8005b9a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005b9c:	68f8      	ldr	r0, [r7, #12]
 8005b9e:	f001 fd1f 	bl	80075e0 <USBD_LL_Init>
 8005ba2:	4603      	mov	r3, r0
 8005ba4:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005ba6:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ba8:	4618      	mov	r0, r3
 8005baa:	3718      	adds	r7, #24
 8005bac:	46bd      	mov	sp, r7
 8005bae:	bd80      	pop	{r7, pc}

08005bb0 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005bb0:	b580      	push	{r7, lr}
 8005bb2:	b084      	sub	sp, #16
 8005bb4:	af00      	add	r7, sp, #0
 8005bb6:	6078      	str	r0, [r7, #4]
 8005bb8:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d101      	bne.n	8005bc8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005bc4:	2303      	movs	r3, #3
 8005bc6:	e025      	b.n	8005c14 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	683a      	ldr	r2, [r7, #0]
 8005bcc:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	32ae      	adds	r2, #174	; 0xae
 8005bda:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d00f      	beq.n	8005c04 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	32ae      	adds	r2, #174	; 0xae
 8005bee:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bf2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005bf4:	f107 020e 	add.w	r2, r7, #14
 8005bf8:	4610      	mov	r0, r2
 8005bfa:	4798      	blx	r3
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005c0a:	1c5a      	adds	r2, r3, #1
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005c12:	2300      	movs	r3, #0
}
 8005c14:	4618      	mov	r0, r3
 8005c16:	3710      	adds	r7, #16
 8005c18:	46bd      	mov	sp, r7
 8005c1a:	bd80      	pop	{r7, pc}

08005c1c <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005c1c:	b580      	push	{r7, lr}
 8005c1e:	b082      	sub	sp, #8
 8005c20:	af00      	add	r7, sp, #0
 8005c22:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8005c24:	6878      	ldr	r0, [r7, #4]
 8005c26:	f001 fd27 	bl	8007678 <USBD_LL_Start>
 8005c2a:	4603      	mov	r3, r0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}

08005c34 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8005c34:	b480      	push	{r7}
 8005c36:	b083      	sub	sp, #12
 8005c38:	af00      	add	r7, sp, #0
 8005c3a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005c3c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005c3e:	4618      	mov	r0, r3
 8005c40:	370c      	adds	r7, #12
 8005c42:	46bd      	mov	sp, r7
 8005c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c48:	4770      	bx	lr

08005c4a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c4a:	b580      	push	{r7, lr}
 8005c4c:	b084      	sub	sp, #16
 8005c4e:	af00      	add	r7, sp, #0
 8005c50:	6078      	str	r0, [r7, #4]
 8005c52:	460b      	mov	r3, r1
 8005c54:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c56:	2300      	movs	r3, #0
 8005c58:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d009      	beq.n	8005c78 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	78fa      	ldrb	r2, [r7, #3]
 8005c6e:	4611      	mov	r1, r2
 8005c70:	6878      	ldr	r0, [r7, #4]
 8005c72:	4798      	blx	r3
 8005c74:	4603      	mov	r3, r0
 8005c76:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c78:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c7a:	4618      	mov	r0, r3
 8005c7c:	3710      	adds	r7, #16
 8005c7e:	46bd      	mov	sp, r7
 8005c80:	bd80      	pop	{r7, pc}

08005c82 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005c82:	b580      	push	{r7, lr}
 8005c84:	b084      	sub	sp, #16
 8005c86:	af00      	add	r7, sp, #0
 8005c88:	6078      	str	r0, [r7, #4]
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c8e:	2300      	movs	r3, #0
 8005c90:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c98:	685b      	ldr	r3, [r3, #4]
 8005c9a:	78fa      	ldrb	r2, [r7, #3]
 8005c9c:	4611      	mov	r1, r2
 8005c9e:	6878      	ldr	r0, [r7, #4]
 8005ca0:	4798      	blx	r3
 8005ca2:	4603      	mov	r3, r0
 8005ca4:	2b00      	cmp	r3, #0
 8005ca6:	d001      	beq.n	8005cac <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005ca8:	2303      	movs	r3, #3
 8005caa:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005cac:	7bfb      	ldrb	r3, [r7, #15]
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	3710      	adds	r7, #16
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}

08005cb6 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8005cb6:	b580      	push	{r7, lr}
 8005cb8:	b084      	sub	sp, #16
 8005cba:	af00      	add	r7, sp, #0
 8005cbc:	6078      	str	r0, [r7, #4]
 8005cbe:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005cc6:	6839      	ldr	r1, [r7, #0]
 8005cc8:	4618      	mov	r0, r3
 8005cca:	f001 f908 	bl	8006ede <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005cce:	687b      	ldr	r3, [r7, #4]
 8005cd0:	2201      	movs	r2, #1
 8005cd2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005cdc:	461a      	mov	r2, r3
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8005ce4:	687b      	ldr	r3, [r7, #4]
 8005ce6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005cea:	f003 031f 	and.w	r3, r3, #31
 8005cee:	2b02      	cmp	r3, #2
 8005cf0:	d01a      	beq.n	8005d28 <USBD_LL_SetupStage+0x72>
 8005cf2:	2b02      	cmp	r3, #2
 8005cf4:	d822      	bhi.n	8005d3c <USBD_LL_SetupStage+0x86>
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d002      	beq.n	8005d00 <USBD_LL_SetupStage+0x4a>
 8005cfa:	2b01      	cmp	r3, #1
 8005cfc:	d00a      	beq.n	8005d14 <USBD_LL_SetupStage+0x5e>
 8005cfe:	e01d      	b.n	8005d3c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d06:	4619      	mov	r1, r3
 8005d08:	6878      	ldr	r0, [r7, #4]
 8005d0a:	f000 fb5f 	bl	80063cc <USBD_StdDevReq>
 8005d0e:	4603      	mov	r3, r0
 8005d10:	73fb      	strb	r3, [r7, #15]
      break;
 8005d12:	e020      	b.n	8005d56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d1a:	4619      	mov	r1, r3
 8005d1c:	6878      	ldr	r0, [r7, #4]
 8005d1e:	f000 fbc7 	bl	80064b0 <USBD_StdItfReq>
 8005d22:	4603      	mov	r3, r0
 8005d24:	73fb      	strb	r3, [r7, #15]
      break;
 8005d26:	e016      	b.n	8005d56 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005d2e:	4619      	mov	r1, r3
 8005d30:	6878      	ldr	r0, [r7, #4]
 8005d32:	f000 fc29 	bl	8006588 <USBD_StdEPReq>
 8005d36:	4603      	mov	r3, r0
 8005d38:	73fb      	strb	r3, [r7, #15]
      break;
 8005d3a:	e00c      	b.n	8005d56 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005d42:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	4619      	mov	r1, r3
 8005d4a:	6878      	ldr	r0, [r7, #4]
 8005d4c:	f001 fcf4 	bl	8007738 <USBD_LL_StallEP>
 8005d50:	4603      	mov	r3, r0
 8005d52:	73fb      	strb	r3, [r7, #15]
      break;
 8005d54:	bf00      	nop
  }

  return ret;
 8005d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d58:	4618      	mov	r0, r3
 8005d5a:	3710      	adds	r7, #16
 8005d5c:	46bd      	mov	sp, r7
 8005d5e:	bd80      	pop	{r7, pc}

08005d60 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005d60:	b580      	push	{r7, lr}
 8005d62:	b086      	sub	sp, #24
 8005d64:	af00      	add	r7, sp, #0
 8005d66:	60f8      	str	r0, [r7, #12]
 8005d68:	460b      	mov	r3, r1
 8005d6a:	607a      	str	r2, [r7, #4]
 8005d6c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005d6e:	2300      	movs	r3, #0
 8005d70:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8005d72:	7afb      	ldrb	r3, [r7, #11]
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d16e      	bne.n	8005e56 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005d7e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005d86:	2b03      	cmp	r3, #3
 8005d88:	f040 8098 	bne.w	8005ebc <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005d8c:	693b      	ldr	r3, [r7, #16]
 8005d8e:	689a      	ldr	r2, [r3, #8]
 8005d90:	693b      	ldr	r3, [r7, #16]
 8005d92:	68db      	ldr	r3, [r3, #12]
 8005d94:	429a      	cmp	r2, r3
 8005d96:	d913      	bls.n	8005dc0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	689a      	ldr	r2, [r3, #8]
 8005d9c:	693b      	ldr	r3, [r7, #16]
 8005d9e:	68db      	ldr	r3, [r3, #12]
 8005da0:	1ad2      	subs	r2, r2, r3
 8005da2:	693b      	ldr	r3, [r7, #16]
 8005da4:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8005da6:	693b      	ldr	r3, [r7, #16]
 8005da8:	68da      	ldr	r2, [r3, #12]
 8005daa:	693b      	ldr	r3, [r7, #16]
 8005dac:	689b      	ldr	r3, [r3, #8]
 8005dae:	4293      	cmp	r3, r2
 8005db0:	bf28      	it	cs
 8005db2:	4613      	movcs	r3, r2
 8005db4:	461a      	mov	r2, r3
 8005db6:	6879      	ldr	r1, [r7, #4]
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f001 f967 	bl	800708c <USBD_CtlContinueRx>
 8005dbe:	e07d      	b.n	8005ebc <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005dc6:	f003 031f 	and.w	r3, r3, #31
 8005dca:	2b02      	cmp	r3, #2
 8005dcc:	d014      	beq.n	8005df8 <USBD_LL_DataOutStage+0x98>
 8005dce:	2b02      	cmp	r3, #2
 8005dd0:	d81d      	bhi.n	8005e0e <USBD_LL_DataOutStage+0xae>
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d002      	beq.n	8005ddc <USBD_LL_DataOutStage+0x7c>
 8005dd6:	2b01      	cmp	r3, #1
 8005dd8:	d003      	beq.n	8005de2 <USBD_LL_DataOutStage+0x82>
 8005dda:	e018      	b.n	8005e0e <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	75bb      	strb	r3, [r7, #22]
            break;
 8005de0:	e018      	b.n	8005e14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005de8:	b2db      	uxtb	r3, r3
 8005dea:	4619      	mov	r1, r3
 8005dec:	68f8      	ldr	r0, [r7, #12]
 8005dee:	f000 fa5e 	bl	80062ae <USBD_CoreFindIF>
 8005df2:	4603      	mov	r3, r0
 8005df4:	75bb      	strb	r3, [r7, #22]
            break;
 8005df6:	e00d      	b.n	8005e14 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005df8:	68fb      	ldr	r3, [r7, #12]
 8005dfa:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005dfe:	b2db      	uxtb	r3, r3
 8005e00:	4619      	mov	r1, r3
 8005e02:	68f8      	ldr	r0, [r7, #12]
 8005e04:	f000 fa60 	bl	80062c8 <USBD_CoreFindEP>
 8005e08:	4603      	mov	r3, r0
 8005e0a:	75bb      	strb	r3, [r7, #22]
            break;
 8005e0c:	e002      	b.n	8005e14 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005e0e:	2300      	movs	r3, #0
 8005e10:	75bb      	strb	r3, [r7, #22]
            break;
 8005e12:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8005e14:	7dbb      	ldrb	r3, [r7, #22]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d119      	bne.n	8005e4e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e20:	b2db      	uxtb	r3, r3
 8005e22:	2b03      	cmp	r3, #3
 8005e24:	d113      	bne.n	8005e4e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8005e26:	7dba      	ldrb	r2, [r7, #22]
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	32ae      	adds	r2, #174	; 0xae
 8005e2c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e30:	691b      	ldr	r3, [r3, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	d00b      	beq.n	8005e4e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8005e36:	7dba      	ldrb	r2, [r7, #22]
 8005e38:	68fb      	ldr	r3, [r7, #12]
 8005e3a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005e3e:	7dba      	ldrb	r2, [r7, #22]
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	32ae      	adds	r2, #174	; 0xae
 8005e44:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	68f8      	ldr	r0, [r7, #12]
 8005e4c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005e4e:	68f8      	ldr	r0, [r7, #12]
 8005e50:	f001 f92d 	bl	80070ae <USBD_CtlSendStatus>
 8005e54:	e032      	b.n	8005ebc <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8005e56:	7afb      	ldrb	r3, [r7, #11]
 8005e58:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005e5c:	b2db      	uxtb	r3, r3
 8005e5e:	4619      	mov	r1, r3
 8005e60:	68f8      	ldr	r0, [r7, #12]
 8005e62:	f000 fa31 	bl	80062c8 <USBD_CoreFindEP>
 8005e66:	4603      	mov	r3, r0
 8005e68:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e6a:	7dbb      	ldrb	r3, [r7, #22]
 8005e6c:	2bff      	cmp	r3, #255	; 0xff
 8005e6e:	d025      	beq.n	8005ebc <USBD_LL_DataOutStage+0x15c>
 8005e70:	7dbb      	ldrb	r3, [r7, #22]
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d122      	bne.n	8005ebc <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005e76:	68fb      	ldr	r3, [r7, #12]
 8005e78:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e7c:	b2db      	uxtb	r3, r3
 8005e7e:	2b03      	cmp	r3, #3
 8005e80:	d117      	bne.n	8005eb2 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8005e82:	7dba      	ldrb	r2, [r7, #22]
 8005e84:	68fb      	ldr	r3, [r7, #12]
 8005e86:	32ae      	adds	r2, #174	; 0xae
 8005e88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e8c:	699b      	ldr	r3, [r3, #24]
 8005e8e:	2b00      	cmp	r3, #0
 8005e90:	d00f      	beq.n	8005eb2 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8005e92:	7dba      	ldrb	r2, [r7, #22]
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005e9a:	7dba      	ldrb	r2, [r7, #22]
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	32ae      	adds	r2, #174	; 0xae
 8005ea0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	7afa      	ldrb	r2, [r7, #11]
 8005ea8:	4611      	mov	r1, r2
 8005eaa:	68f8      	ldr	r0, [r7, #12]
 8005eac:	4798      	blx	r3
 8005eae:	4603      	mov	r3, r0
 8005eb0:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8005eb2:	7dfb      	ldrb	r3, [r7, #23]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	d001      	beq.n	8005ebc <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005eb8:	7dfb      	ldrb	r3, [r7, #23]
 8005eba:	e000      	b.n	8005ebe <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005ebc:	2300      	movs	r3, #0
}
 8005ebe:	4618      	mov	r0, r3
 8005ec0:	3718      	adds	r7, #24
 8005ec2:	46bd      	mov	sp, r7
 8005ec4:	bd80      	pop	{r7, pc}

08005ec6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8005ec6:	b580      	push	{r7, lr}
 8005ec8:	b086      	sub	sp, #24
 8005eca:	af00      	add	r7, sp, #0
 8005ecc:	60f8      	str	r0, [r7, #12]
 8005ece:	460b      	mov	r3, r1
 8005ed0:	607a      	str	r2, [r7, #4]
 8005ed2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8005ed4:	7afb      	ldrb	r3, [r7, #11]
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d16f      	bne.n	8005fba <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005eda:	68fb      	ldr	r3, [r7, #12]
 8005edc:	3314      	adds	r3, #20
 8005ede:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8005ee6:	2b02      	cmp	r3, #2
 8005ee8:	d15a      	bne.n	8005fa0 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005eea:	693b      	ldr	r3, [r7, #16]
 8005eec:	689a      	ldr	r2, [r3, #8]
 8005eee:	693b      	ldr	r3, [r7, #16]
 8005ef0:	68db      	ldr	r3, [r3, #12]
 8005ef2:	429a      	cmp	r2, r3
 8005ef4:	d914      	bls.n	8005f20 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	689a      	ldr	r2, [r3, #8]
 8005efa:	693b      	ldr	r3, [r7, #16]
 8005efc:	68db      	ldr	r3, [r3, #12]
 8005efe:	1ad2      	subs	r2, r2, r3
 8005f00:	693b      	ldr	r3, [r7, #16]
 8005f02:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8005f04:	693b      	ldr	r3, [r7, #16]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	461a      	mov	r2, r3
 8005f0a:	6879      	ldr	r1, [r7, #4]
 8005f0c:	68f8      	ldr	r0, [r7, #12]
 8005f0e:	f001 f8ac 	bl	800706a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f12:	2300      	movs	r3, #0
 8005f14:	2200      	movs	r2, #0
 8005f16:	2100      	movs	r1, #0
 8005f18:	68f8      	ldr	r0, [r7, #12]
 8005f1a:	f001 fcb7 	bl	800788c <USBD_LL_PrepareReceive>
 8005f1e:	e03f      	b.n	8005fa0 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005f20:	693b      	ldr	r3, [r7, #16]
 8005f22:	68da      	ldr	r2, [r3, #12]
 8005f24:	693b      	ldr	r3, [r7, #16]
 8005f26:	689b      	ldr	r3, [r3, #8]
 8005f28:	429a      	cmp	r2, r3
 8005f2a:	d11c      	bne.n	8005f66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005f2c:	693b      	ldr	r3, [r7, #16]
 8005f2e:	685a      	ldr	r2, [r3, #4]
 8005f30:	693b      	ldr	r3, [r7, #16]
 8005f32:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8005f34:	429a      	cmp	r2, r3
 8005f36:	d316      	bcc.n	8005f66 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005f38:	693b      	ldr	r3, [r7, #16]
 8005f3a:	685a      	ldr	r2, [r3, #4]
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8005f42:	429a      	cmp	r2, r3
 8005f44:	d20f      	bcs.n	8005f66 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8005f46:	2200      	movs	r2, #0
 8005f48:	2100      	movs	r1, #0
 8005f4a:	68f8      	ldr	r0, [r7, #12]
 8005f4c:	f001 f88d 	bl	800706a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005f58:	2300      	movs	r3, #0
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2100      	movs	r1, #0
 8005f5e:	68f8      	ldr	r0, [r7, #12]
 8005f60:	f001 fc94 	bl	800788c <USBD_LL_PrepareReceive>
 8005f64:	e01c      	b.n	8005fa0 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005f6c:	b2db      	uxtb	r3, r3
 8005f6e:	2b03      	cmp	r3, #3
 8005f70:	d10f      	bne.n	8005f92 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f78:	68db      	ldr	r3, [r3, #12]
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d009      	beq.n	8005f92 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005f7e:	68fb      	ldr	r3, [r7, #12]
 8005f80:	2200      	movs	r2, #0
 8005f82:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005f8c:	68db      	ldr	r3, [r3, #12]
 8005f8e:	68f8      	ldr	r0, [r7, #12]
 8005f90:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8005f92:	2180      	movs	r1, #128	; 0x80
 8005f94:	68f8      	ldr	r0, [r7, #12]
 8005f96:	f001 fbcf 	bl	8007738 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005f9a:	68f8      	ldr	r0, [r7, #12]
 8005f9c:	f001 f89a 	bl	80070d4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	d03a      	beq.n	8006020 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005faa:	68f8      	ldr	r0, [r7, #12]
 8005fac:	f7ff fe42 	bl	8005c34 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005fb0:	68fb      	ldr	r3, [r7, #12]
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005fb8:	e032      	b.n	8006020 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005fba:	7afb      	ldrb	r3, [r7, #11]
 8005fbc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005fc0:	b2db      	uxtb	r3, r3
 8005fc2:	4619      	mov	r1, r3
 8005fc4:	68f8      	ldr	r0, [r7, #12]
 8005fc6:	f000 f97f 	bl	80062c8 <USBD_CoreFindEP>
 8005fca:	4603      	mov	r3, r0
 8005fcc:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005fce:	7dfb      	ldrb	r3, [r7, #23]
 8005fd0:	2bff      	cmp	r3, #255	; 0xff
 8005fd2:	d025      	beq.n	8006020 <USBD_LL_DataInStage+0x15a>
 8005fd4:	7dfb      	ldrb	r3, [r7, #23]
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d122      	bne.n	8006020 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fe0:	b2db      	uxtb	r3, r3
 8005fe2:	2b03      	cmp	r3, #3
 8005fe4:	d11c      	bne.n	8006020 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8005fe6:	7dfa      	ldrb	r2, [r7, #23]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	32ae      	adds	r2, #174	; 0xae
 8005fec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ff0:	695b      	ldr	r3, [r3, #20]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d014      	beq.n	8006020 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8005ff6:	7dfa      	ldrb	r2, [r7, #23]
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005ffe:	7dfa      	ldrb	r2, [r7, #23]
 8006000:	68fb      	ldr	r3, [r7, #12]
 8006002:	32ae      	adds	r2, #174	; 0xae
 8006004:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006008:	695b      	ldr	r3, [r3, #20]
 800600a:	7afa      	ldrb	r2, [r7, #11]
 800600c:	4611      	mov	r1, r2
 800600e:	68f8      	ldr	r0, [r7, #12]
 8006010:	4798      	blx	r3
 8006012:	4603      	mov	r3, r0
 8006014:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006016:	7dbb      	ldrb	r3, [r7, #22]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d001      	beq.n	8006020 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 800601c:	7dbb      	ldrb	r3, [r7, #22]
 800601e:	e000      	b.n	8006022 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006020:	2300      	movs	r3, #0
}
 8006022:	4618      	mov	r0, r3
 8006024:	3718      	adds	r7, #24
 8006026:	46bd      	mov	sp, r7
 8006028:	bd80      	pop	{r7, pc}

0800602a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006032:	2300      	movs	r3, #0
 8006034:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	2201      	movs	r2, #1
 800603a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	2200      	movs	r2, #0
 8006042:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2200      	movs	r2, #0
 800604a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2200      	movs	r2, #0
 8006050:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800605c:	687b      	ldr	r3, [r7, #4]
 800605e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006062:	2b00      	cmp	r3, #0
 8006064:	d014      	beq.n	8006090 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	2b00      	cmp	r3, #0
 8006070:	d00e      	beq.n	8006090 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	687a      	ldr	r2, [r7, #4]
 800607c:	6852      	ldr	r2, [r2, #4]
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	4611      	mov	r1, r2
 8006082:	6878      	ldr	r0, [r7, #4]
 8006084:	4798      	blx	r3
 8006086:	4603      	mov	r3, r0
 8006088:	2b00      	cmp	r3, #0
 800608a:	d001      	beq.n	8006090 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800608c:	2303      	movs	r3, #3
 800608e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006090:	2340      	movs	r3, #64	; 0x40
 8006092:	2200      	movs	r2, #0
 8006094:	2100      	movs	r1, #0
 8006096:	6878      	ldr	r0, [r7, #4]
 8006098:	f001 fb09 	bl	80076ae <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	2201      	movs	r2, #1
 80060a0:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2240      	movs	r2, #64	; 0x40
 80060a8:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 80060ac:	2340      	movs	r3, #64	; 0x40
 80060ae:	2200      	movs	r2, #0
 80060b0:	2180      	movs	r1, #128	; 0x80
 80060b2:	6878      	ldr	r0, [r7, #4]
 80060b4:	f001 fafb 	bl	80076ae <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	2201      	movs	r2, #1
 80060bc:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	2240      	movs	r2, #64	; 0x40
 80060c2:	621a      	str	r2, [r3, #32]

  return ret;
 80060c4:	7bfb      	ldrb	r3, [r7, #15]
}
 80060c6:	4618      	mov	r0, r3
 80060c8:	3710      	adds	r7, #16
 80060ca:	46bd      	mov	sp, r7
 80060cc:	bd80      	pop	{r7, pc}

080060ce <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80060ce:	b480      	push	{r7}
 80060d0:	b083      	sub	sp, #12
 80060d2:	af00      	add	r7, sp, #0
 80060d4:	6078      	str	r0, [r7, #4]
 80060d6:	460b      	mov	r3, r1
 80060d8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	78fa      	ldrb	r2, [r7, #3]
 80060de:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80060e0:	2300      	movs	r3, #0
}
 80060e2:	4618      	mov	r0, r3
 80060e4:	370c      	adds	r7, #12
 80060e6:	46bd      	mov	sp, r7
 80060e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060ec:	4770      	bx	lr

080060ee <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80060ee:	b480      	push	{r7}
 80060f0:	b083      	sub	sp, #12
 80060f2:	af00      	add	r7, sp, #0
 80060f4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060fc:	b2da      	uxtb	r2, r3
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	2204      	movs	r2, #4
 8006108:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 800610c:	2300      	movs	r3, #0
}
 800610e:	4618      	mov	r0, r3
 8006110:	370c      	adds	r7, #12
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr

0800611a <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b04      	cmp	r3, #4
 800612c:	d106      	bne.n	800613c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006134:	b2da      	uxtb	r2, r3
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	370c      	adds	r7, #12
 8006142:	46bd      	mov	sp, r7
 8006144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006148:	4770      	bx	lr

0800614a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800614a:	b580      	push	{r7, lr}
 800614c:	b082      	sub	sp, #8
 800614e:	af00      	add	r7, sp, #0
 8006150:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006158:	b2db      	uxtb	r3, r3
 800615a:	2b03      	cmp	r3, #3
 800615c:	d110      	bne.n	8006180 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006164:	2b00      	cmp	r3, #0
 8006166:	d00b      	beq.n	8006180 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800616e:	69db      	ldr	r3, [r3, #28]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d005      	beq.n	8006180 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800617a:	69db      	ldr	r3, [r3, #28]
 800617c:	6878      	ldr	r0, [r7, #4]
 800617e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006180:	2300      	movs	r3, #0
}
 8006182:	4618      	mov	r0, r3
 8006184:	3708      	adds	r7, #8
 8006186:	46bd      	mov	sp, r7
 8006188:	bd80      	pop	{r7, pc}

0800618a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800618a:	b580      	push	{r7, lr}
 800618c:	b082      	sub	sp, #8
 800618e:	af00      	add	r7, sp, #0
 8006190:	6078      	str	r0, [r7, #4]
 8006192:	460b      	mov	r3, r1
 8006194:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006196:	687b      	ldr	r3, [r7, #4]
 8006198:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	32ae      	adds	r2, #174	; 0xae
 80061a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e01c      	b.n	80061e6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d115      	bne.n	80061e4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80061b8:	687b      	ldr	r3, [r7, #4]
 80061ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	32ae      	adds	r2, #174	; 0xae
 80061c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061c6:	6a1b      	ldr	r3, [r3, #32]
 80061c8:	2b00      	cmp	r3, #0
 80061ca:	d00b      	beq.n	80061e4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80061cc:	687b      	ldr	r3, [r7, #4]
 80061ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	32ae      	adds	r2, #174	; 0xae
 80061d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061da:	6a1b      	ldr	r3, [r3, #32]
 80061dc:	78fa      	ldrb	r2, [r7, #3]
 80061de:	4611      	mov	r1, r2
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80061e4:	2300      	movs	r3, #0
}
 80061e6:	4618      	mov	r0, r3
 80061e8:	3708      	adds	r7, #8
 80061ea:	46bd      	mov	sp, r7
 80061ec:	bd80      	pop	{r7, pc}

080061ee <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80061ee:	b580      	push	{r7, lr}
 80061f0:	b082      	sub	sp, #8
 80061f2:	af00      	add	r7, sp, #0
 80061f4:	6078      	str	r0, [r7, #4]
 80061f6:	460b      	mov	r3, r1
 80061f8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	32ae      	adds	r2, #174	; 0xae
 8006204:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006208:	2b00      	cmp	r3, #0
 800620a:	d101      	bne.n	8006210 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 800620c:	2303      	movs	r3, #3
 800620e:	e01c      	b.n	800624a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006216:	b2db      	uxtb	r3, r3
 8006218:	2b03      	cmp	r3, #3
 800621a:	d115      	bne.n	8006248 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	32ae      	adds	r2, #174	; 0xae
 8006226:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800622a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00b      	beq.n	8006248 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	32ae      	adds	r2, #174	; 0xae
 800623a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800623e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006240:	78fa      	ldrb	r2, [r7, #3]
 8006242:	4611      	mov	r1, r2
 8006244:	6878      	ldr	r0, [r7, #4]
 8006246:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006248:	2300      	movs	r3, #0
}
 800624a:	4618      	mov	r0, r3
 800624c:	3708      	adds	r7, #8
 800624e:	46bd      	mov	sp, r7
 8006250:	bd80      	pop	{r7, pc}

08006252 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800625a:	2300      	movs	r3, #0
}
 800625c:	4618      	mov	r0, r3
 800625e:	370c      	adds	r7, #12
 8006260:	46bd      	mov	sp, r7
 8006262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006266:	4770      	bx	lr

08006268 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b084      	sub	sp, #16
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006270:	2300      	movs	r3, #0
 8006272:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	2201      	movs	r2, #1
 8006278:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00e      	beq.n	80062a4 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800628c:	685b      	ldr	r3, [r3, #4]
 800628e:	687a      	ldr	r2, [r7, #4]
 8006290:	6852      	ldr	r2, [r2, #4]
 8006292:	b2d2      	uxtb	r2, r2
 8006294:	4611      	mov	r1, r2
 8006296:	6878      	ldr	r0, [r7, #4]
 8006298:	4798      	blx	r3
 800629a:	4603      	mov	r3, r0
 800629c:	2b00      	cmp	r3, #0
 800629e:	d001      	beq.n	80062a4 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 80062a0:	2303      	movs	r3, #3
 80062a2:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80062a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80062a6:	4618      	mov	r0, r3
 80062a8:	3710      	adds	r7, #16
 80062aa:	46bd      	mov	sp, r7
 80062ac:	bd80      	pop	{r7, pc}

080062ae <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80062ae:	b480      	push	{r7}
 80062b0:	b083      	sub	sp, #12
 80062b2:	af00      	add	r7, sp, #0
 80062b4:	6078      	str	r0, [r7, #4]
 80062b6:	460b      	mov	r3, r1
 80062b8:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80062ba:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80062bc:	4618      	mov	r0, r3
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr

080062c8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80062c8:	b480      	push	{r7}
 80062ca:	b083      	sub	sp, #12
 80062cc:	af00      	add	r7, sp, #0
 80062ce:	6078      	str	r0, [r7, #4]
 80062d0:	460b      	mov	r3, r1
 80062d2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80062d4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80062d6:	4618      	mov	r0, r3
 80062d8:	370c      	adds	r7, #12
 80062da:	46bd      	mov	sp, r7
 80062dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e0:	4770      	bx	lr

080062e2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80062e2:	b580      	push	{r7, lr}
 80062e4:	b086      	sub	sp, #24
 80062e6:	af00      	add	r7, sp, #0
 80062e8:	6078      	str	r0, [r7, #4]
 80062ea:	460b      	mov	r3, r1
 80062ec:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80062f6:	2300      	movs	r3, #0
 80062f8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	885b      	ldrh	r3, [r3, #2]
 80062fe:	b29a      	uxth	r2, r3
 8006300:	68fb      	ldr	r3, [r7, #12]
 8006302:	781b      	ldrb	r3, [r3, #0]
 8006304:	b29b      	uxth	r3, r3
 8006306:	429a      	cmp	r2, r3
 8006308:	d920      	bls.n	800634c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	781b      	ldrb	r3, [r3, #0]
 800630e:	b29b      	uxth	r3, r3
 8006310:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006312:	e013      	b.n	800633c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006314:	f107 030a 	add.w	r3, r7, #10
 8006318:	4619      	mov	r1, r3
 800631a:	6978      	ldr	r0, [r7, #20]
 800631c:	f000 f81b 	bl	8006356 <USBD_GetNextDesc>
 8006320:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006322:	697b      	ldr	r3, [r7, #20]
 8006324:	785b      	ldrb	r3, [r3, #1]
 8006326:	2b05      	cmp	r3, #5
 8006328:	d108      	bne.n	800633c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800632a:	697b      	ldr	r3, [r7, #20]
 800632c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800632e:	693b      	ldr	r3, [r7, #16]
 8006330:	789b      	ldrb	r3, [r3, #2]
 8006332:	78fa      	ldrb	r2, [r7, #3]
 8006334:	429a      	cmp	r2, r3
 8006336:	d008      	beq.n	800634a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006338:	2300      	movs	r3, #0
 800633a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800633c:	68fb      	ldr	r3, [r7, #12]
 800633e:	885b      	ldrh	r3, [r3, #2]
 8006340:	b29a      	uxth	r2, r3
 8006342:	897b      	ldrh	r3, [r7, #10]
 8006344:	429a      	cmp	r2, r3
 8006346:	d8e5      	bhi.n	8006314 <USBD_GetEpDesc+0x32>
 8006348:	e000      	b.n	800634c <USBD_GetEpDesc+0x6a>
          break;
 800634a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800634c:	693b      	ldr	r3, [r7, #16]
}
 800634e:	4618      	mov	r0, r3
 8006350:	3718      	adds	r7, #24
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}

08006356 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006356:	b480      	push	{r7}
 8006358:	b085      	sub	sp, #20
 800635a:	af00      	add	r7, sp, #0
 800635c:	6078      	str	r0, [r7, #4]
 800635e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006364:	683b      	ldr	r3, [r7, #0]
 8006366:	881a      	ldrh	r2, [r3, #0]
 8006368:	68fb      	ldr	r3, [r7, #12]
 800636a:	781b      	ldrb	r3, [r3, #0]
 800636c:	b29b      	uxth	r3, r3
 800636e:	4413      	add	r3, r2
 8006370:	b29a      	uxth	r2, r3
 8006372:	683b      	ldr	r3, [r7, #0]
 8006374:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006376:	68fb      	ldr	r3, [r7, #12]
 8006378:	781b      	ldrb	r3, [r3, #0]
 800637a:	461a      	mov	r2, r3
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	4413      	add	r3, r2
 8006380:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006382:	68fb      	ldr	r3, [r7, #12]
}
 8006384:	4618      	mov	r0, r3
 8006386:	3714      	adds	r7, #20
 8006388:	46bd      	mov	sp, r7
 800638a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638e:	4770      	bx	lr

08006390 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006390:	b480      	push	{r7}
 8006392:	b087      	sub	sp, #28
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800639c:	697b      	ldr	r3, [r7, #20]
 800639e:	781b      	ldrb	r3, [r3, #0]
 80063a0:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 80063a2:	697b      	ldr	r3, [r7, #20]
 80063a4:	3301      	adds	r3, #1
 80063a6:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 80063a8:	697b      	ldr	r3, [r7, #20]
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 80063ae:	8a3b      	ldrh	r3, [r7, #16]
 80063b0:	021b      	lsls	r3, r3, #8
 80063b2:	b21a      	sxth	r2, r3
 80063b4:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	b21b      	sxth	r3, r3
 80063bc:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 80063be:	89fb      	ldrh	r3, [r7, #14]
}
 80063c0:	4618      	mov	r0, r3
 80063c2:	371c      	adds	r7, #28
 80063c4:	46bd      	mov	sp, r7
 80063c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ca:	4770      	bx	lr

080063cc <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80063cc:	b580      	push	{r7, lr}
 80063ce:	b084      	sub	sp, #16
 80063d0:	af00      	add	r7, sp, #0
 80063d2:	6078      	str	r0, [r7, #4]
 80063d4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80063d6:	2300      	movs	r3, #0
 80063d8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80063da:	683b      	ldr	r3, [r7, #0]
 80063dc:	781b      	ldrb	r3, [r3, #0]
 80063de:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80063e2:	2b40      	cmp	r3, #64	; 0x40
 80063e4:	d005      	beq.n	80063f2 <USBD_StdDevReq+0x26>
 80063e6:	2b40      	cmp	r3, #64	; 0x40
 80063e8:	d857      	bhi.n	800649a <USBD_StdDevReq+0xce>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d00f      	beq.n	800640e <USBD_StdDevReq+0x42>
 80063ee:	2b20      	cmp	r3, #32
 80063f0:	d153      	bne.n	800649a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	32ae      	adds	r2, #174	; 0xae
 80063fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006400:	689b      	ldr	r3, [r3, #8]
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	4798      	blx	r3
 8006408:	4603      	mov	r3, r0
 800640a:	73fb      	strb	r3, [r7, #15]
      break;
 800640c:	e04a      	b.n	80064a4 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800640e:	683b      	ldr	r3, [r7, #0]
 8006410:	785b      	ldrb	r3, [r3, #1]
 8006412:	2b09      	cmp	r3, #9
 8006414:	d83b      	bhi.n	800648e <USBD_StdDevReq+0xc2>
 8006416:	a201      	add	r2, pc, #4	; (adr r2, 800641c <USBD_StdDevReq+0x50>)
 8006418:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800641c:	08006471 	.word	0x08006471
 8006420:	08006485 	.word	0x08006485
 8006424:	0800648f 	.word	0x0800648f
 8006428:	0800647b 	.word	0x0800647b
 800642c:	0800648f 	.word	0x0800648f
 8006430:	0800644f 	.word	0x0800644f
 8006434:	08006445 	.word	0x08006445
 8006438:	0800648f 	.word	0x0800648f
 800643c:	08006467 	.word	0x08006467
 8006440:	08006459 	.word	0x08006459
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006444:	6839      	ldr	r1, [r7, #0]
 8006446:	6878      	ldr	r0, [r7, #4]
 8006448:	f000 fa3c 	bl	80068c4 <USBD_GetDescriptor>
          break;
 800644c:	e024      	b.n	8006498 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800644e:	6839      	ldr	r1, [r7, #0]
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f000 fba1 	bl	8006b98 <USBD_SetAddress>
          break;
 8006456:	e01f      	b.n	8006498 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006458:	6839      	ldr	r1, [r7, #0]
 800645a:	6878      	ldr	r0, [r7, #4]
 800645c:	f000 fbe0 	bl	8006c20 <USBD_SetConfig>
 8006460:	4603      	mov	r3, r0
 8006462:	73fb      	strb	r3, [r7, #15]
          break;
 8006464:	e018      	b.n	8006498 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006466:	6839      	ldr	r1, [r7, #0]
 8006468:	6878      	ldr	r0, [r7, #4]
 800646a:	f000 fc83 	bl	8006d74 <USBD_GetConfig>
          break;
 800646e:	e013      	b.n	8006498 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006470:	6839      	ldr	r1, [r7, #0]
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f000 fcb4 	bl	8006de0 <USBD_GetStatus>
          break;
 8006478:	e00e      	b.n	8006498 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800647a:	6839      	ldr	r1, [r7, #0]
 800647c:	6878      	ldr	r0, [r7, #4]
 800647e:	f000 fce3 	bl	8006e48 <USBD_SetFeature>
          break;
 8006482:	e009      	b.n	8006498 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	6878      	ldr	r0, [r7, #4]
 8006488:	f000 fd07 	bl	8006e9a <USBD_ClrFeature>
          break;
 800648c:	e004      	b.n	8006498 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800648e:	6839      	ldr	r1, [r7, #0]
 8006490:	6878      	ldr	r0, [r7, #4]
 8006492:	f000 fd5e 	bl	8006f52 <USBD_CtlError>
          break;
 8006496:	bf00      	nop
      }
      break;
 8006498:	e004      	b.n	80064a4 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800649a:	6839      	ldr	r1, [r7, #0]
 800649c:	6878      	ldr	r0, [r7, #4]
 800649e:	f000 fd58 	bl	8006f52 <USBD_CtlError>
      break;
 80064a2:	bf00      	nop
  }

  return ret;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop

080064b0 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064b0:	b580      	push	{r7, lr}
 80064b2:	b084      	sub	sp, #16
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
 80064b8:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80064ba:	2300      	movs	r3, #0
 80064bc:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80064be:	683b      	ldr	r3, [r7, #0]
 80064c0:	781b      	ldrb	r3, [r3, #0]
 80064c2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80064c6:	2b40      	cmp	r3, #64	; 0x40
 80064c8:	d005      	beq.n	80064d6 <USBD_StdItfReq+0x26>
 80064ca:	2b40      	cmp	r3, #64	; 0x40
 80064cc:	d852      	bhi.n	8006574 <USBD_StdItfReq+0xc4>
 80064ce:	2b00      	cmp	r3, #0
 80064d0:	d001      	beq.n	80064d6 <USBD_StdItfReq+0x26>
 80064d2:	2b20      	cmp	r3, #32
 80064d4:	d14e      	bne.n	8006574 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064dc:	b2db      	uxtb	r3, r3
 80064de:	3b01      	subs	r3, #1
 80064e0:	2b02      	cmp	r3, #2
 80064e2:	d840      	bhi.n	8006566 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	889b      	ldrh	r3, [r3, #4]
 80064e8:	b2db      	uxtb	r3, r3
 80064ea:	2b01      	cmp	r3, #1
 80064ec:	d836      	bhi.n	800655c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80064ee:	683b      	ldr	r3, [r7, #0]
 80064f0:	889b      	ldrh	r3, [r3, #4]
 80064f2:	b2db      	uxtb	r3, r3
 80064f4:	4619      	mov	r1, r3
 80064f6:	6878      	ldr	r0, [r7, #4]
 80064f8:	f7ff fed9 	bl	80062ae <USBD_CoreFindIF>
 80064fc:	4603      	mov	r3, r0
 80064fe:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006500:	7bbb      	ldrb	r3, [r7, #14]
 8006502:	2bff      	cmp	r3, #255	; 0xff
 8006504:	d01d      	beq.n	8006542 <USBD_StdItfReq+0x92>
 8006506:	7bbb      	ldrb	r3, [r7, #14]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d11a      	bne.n	8006542 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 800650c:	7bba      	ldrb	r2, [r7, #14]
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	32ae      	adds	r2, #174	; 0xae
 8006512:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006516:	689b      	ldr	r3, [r3, #8]
 8006518:	2b00      	cmp	r3, #0
 800651a:	d00f      	beq.n	800653c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 800651c:	7bba      	ldrb	r2, [r7, #14]
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006524:	7bba      	ldrb	r2, [r7, #14]
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	32ae      	adds	r2, #174	; 0xae
 800652a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800652e:	689b      	ldr	r3, [r3, #8]
 8006530:	6839      	ldr	r1, [r7, #0]
 8006532:	6878      	ldr	r0, [r7, #4]
 8006534:	4798      	blx	r3
 8006536:	4603      	mov	r3, r0
 8006538:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800653a:	e004      	b.n	8006546 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800653c:	2303      	movs	r3, #3
 800653e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006540:	e001      	b.n	8006546 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006542:	2303      	movs	r3, #3
 8006544:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006546:	683b      	ldr	r3, [r7, #0]
 8006548:	88db      	ldrh	r3, [r3, #6]
 800654a:	2b00      	cmp	r3, #0
 800654c:	d110      	bne.n	8006570 <USBD_StdItfReq+0xc0>
 800654e:	7bfb      	ldrb	r3, [r7, #15]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10d      	bne.n	8006570 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006554:	6878      	ldr	r0, [r7, #4]
 8006556:	f000 fdaa 	bl	80070ae <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800655a:	e009      	b.n	8006570 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800655c:	6839      	ldr	r1, [r7, #0]
 800655e:	6878      	ldr	r0, [r7, #4]
 8006560:	f000 fcf7 	bl	8006f52 <USBD_CtlError>
          break;
 8006564:	e004      	b.n	8006570 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006566:	6839      	ldr	r1, [r7, #0]
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f000 fcf2 	bl	8006f52 <USBD_CtlError>
          break;
 800656e:	e000      	b.n	8006572 <USBD_StdItfReq+0xc2>
          break;
 8006570:	bf00      	nop
      }
      break;
 8006572:	e004      	b.n	800657e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006574:	6839      	ldr	r1, [r7, #0]
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fceb 	bl	8006f52 <USBD_CtlError>
      break;
 800657c:	bf00      	nop
  }

  return ret;
 800657e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006580:	4618      	mov	r0, r3
 8006582:	3710      	adds	r7, #16
 8006584:	46bd      	mov	sp, r7
 8006586:	bd80      	pop	{r7, pc}

08006588 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b084      	sub	sp, #16
 800658c:	af00      	add	r7, sp, #0
 800658e:	6078      	str	r0, [r7, #4]
 8006590:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006592:	2300      	movs	r3, #0
 8006594:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006596:	683b      	ldr	r3, [r7, #0]
 8006598:	889b      	ldrh	r3, [r3, #4]
 800659a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800659c:	683b      	ldr	r3, [r7, #0]
 800659e:	781b      	ldrb	r3, [r3, #0]
 80065a0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80065a4:	2b40      	cmp	r3, #64	; 0x40
 80065a6:	d007      	beq.n	80065b8 <USBD_StdEPReq+0x30>
 80065a8:	2b40      	cmp	r3, #64	; 0x40
 80065aa:	f200 817f 	bhi.w	80068ac <USBD_StdEPReq+0x324>
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d02a      	beq.n	8006608 <USBD_StdEPReq+0x80>
 80065b2:	2b20      	cmp	r3, #32
 80065b4:	f040 817a 	bne.w	80068ac <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 80065b8:	7bbb      	ldrb	r3, [r7, #14]
 80065ba:	4619      	mov	r1, r3
 80065bc:	6878      	ldr	r0, [r7, #4]
 80065be:	f7ff fe83 	bl	80062c8 <USBD_CoreFindEP>
 80065c2:	4603      	mov	r3, r0
 80065c4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065c6:	7b7b      	ldrb	r3, [r7, #13]
 80065c8:	2bff      	cmp	r3, #255	; 0xff
 80065ca:	f000 8174 	beq.w	80068b6 <USBD_StdEPReq+0x32e>
 80065ce:	7b7b      	ldrb	r3, [r7, #13]
 80065d0:	2b00      	cmp	r3, #0
 80065d2:	f040 8170 	bne.w	80068b6 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80065d6:	7b7a      	ldrb	r2, [r7, #13]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80065de:	7b7a      	ldrb	r2, [r7, #13]
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	32ae      	adds	r2, #174	; 0xae
 80065e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e8:	689b      	ldr	r3, [r3, #8]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	f000 8163 	beq.w	80068b6 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80065f0:	7b7a      	ldrb	r2, [r7, #13]
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	32ae      	adds	r2, #174	; 0xae
 80065f6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	6839      	ldr	r1, [r7, #0]
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	4798      	blx	r3
 8006602:	4603      	mov	r3, r0
 8006604:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006606:	e156      	b.n	80068b6 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006608:	683b      	ldr	r3, [r7, #0]
 800660a:	785b      	ldrb	r3, [r3, #1]
 800660c:	2b03      	cmp	r3, #3
 800660e:	d008      	beq.n	8006622 <USBD_StdEPReq+0x9a>
 8006610:	2b03      	cmp	r3, #3
 8006612:	f300 8145 	bgt.w	80068a0 <USBD_StdEPReq+0x318>
 8006616:	2b00      	cmp	r3, #0
 8006618:	f000 809b 	beq.w	8006752 <USBD_StdEPReq+0x1ca>
 800661c:	2b01      	cmp	r3, #1
 800661e:	d03c      	beq.n	800669a <USBD_StdEPReq+0x112>
 8006620:	e13e      	b.n	80068a0 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006628:	b2db      	uxtb	r3, r3
 800662a:	2b02      	cmp	r3, #2
 800662c:	d002      	beq.n	8006634 <USBD_StdEPReq+0xac>
 800662e:	2b03      	cmp	r3, #3
 8006630:	d016      	beq.n	8006660 <USBD_StdEPReq+0xd8>
 8006632:	e02c      	b.n	800668e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006634:	7bbb      	ldrb	r3, [r7, #14]
 8006636:	2b00      	cmp	r3, #0
 8006638:	d00d      	beq.n	8006656 <USBD_StdEPReq+0xce>
 800663a:	7bbb      	ldrb	r3, [r7, #14]
 800663c:	2b80      	cmp	r3, #128	; 0x80
 800663e:	d00a      	beq.n	8006656 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006640:	7bbb      	ldrb	r3, [r7, #14]
 8006642:	4619      	mov	r1, r3
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f001 f877 	bl	8007738 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800664a:	2180      	movs	r1, #128	; 0x80
 800664c:	6878      	ldr	r0, [r7, #4]
 800664e:	f001 f873 	bl	8007738 <USBD_LL_StallEP>
 8006652:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006654:	e020      	b.n	8006698 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006656:	6839      	ldr	r1, [r7, #0]
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f000 fc7a 	bl	8006f52 <USBD_CtlError>
              break;
 800665e:	e01b      	b.n	8006698 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	885b      	ldrh	r3, [r3, #2]
 8006664:	2b00      	cmp	r3, #0
 8006666:	d10e      	bne.n	8006686 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006668:	7bbb      	ldrb	r3, [r7, #14]
 800666a:	2b00      	cmp	r3, #0
 800666c:	d00b      	beq.n	8006686 <USBD_StdEPReq+0xfe>
 800666e:	7bbb      	ldrb	r3, [r7, #14]
 8006670:	2b80      	cmp	r3, #128	; 0x80
 8006672:	d008      	beq.n	8006686 <USBD_StdEPReq+0xfe>
 8006674:	683b      	ldr	r3, [r7, #0]
 8006676:	88db      	ldrh	r3, [r3, #6]
 8006678:	2b00      	cmp	r3, #0
 800667a:	d104      	bne.n	8006686 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 800667c:	7bbb      	ldrb	r3, [r7, #14]
 800667e:	4619      	mov	r1, r3
 8006680:	6878      	ldr	r0, [r7, #4]
 8006682:	f001 f859 	bl	8007738 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006686:	6878      	ldr	r0, [r7, #4]
 8006688:	f000 fd11 	bl	80070ae <USBD_CtlSendStatus>

              break;
 800668c:	e004      	b.n	8006698 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 800668e:	6839      	ldr	r1, [r7, #0]
 8006690:	6878      	ldr	r0, [r7, #4]
 8006692:	f000 fc5e 	bl	8006f52 <USBD_CtlError>
              break;
 8006696:	bf00      	nop
          }
          break;
 8006698:	e107      	b.n	80068aa <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 800669a:	687b      	ldr	r3, [r7, #4]
 800669c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066a0:	b2db      	uxtb	r3, r3
 80066a2:	2b02      	cmp	r3, #2
 80066a4:	d002      	beq.n	80066ac <USBD_StdEPReq+0x124>
 80066a6:	2b03      	cmp	r3, #3
 80066a8:	d016      	beq.n	80066d8 <USBD_StdEPReq+0x150>
 80066aa:	e04b      	b.n	8006744 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80066ac:	7bbb      	ldrb	r3, [r7, #14]
 80066ae:	2b00      	cmp	r3, #0
 80066b0:	d00d      	beq.n	80066ce <USBD_StdEPReq+0x146>
 80066b2:	7bbb      	ldrb	r3, [r7, #14]
 80066b4:	2b80      	cmp	r3, #128	; 0x80
 80066b6:	d00a      	beq.n	80066ce <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 80066b8:	7bbb      	ldrb	r3, [r7, #14]
 80066ba:	4619      	mov	r1, r3
 80066bc:	6878      	ldr	r0, [r7, #4]
 80066be:	f001 f83b 	bl	8007738 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 80066c2:	2180      	movs	r1, #128	; 0x80
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f001 f837 	bl	8007738 <USBD_LL_StallEP>
 80066ca:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80066cc:	e040      	b.n	8006750 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 80066ce:	6839      	ldr	r1, [r7, #0]
 80066d0:	6878      	ldr	r0, [r7, #4]
 80066d2:	f000 fc3e 	bl	8006f52 <USBD_CtlError>
              break;
 80066d6:	e03b      	b.n	8006750 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80066d8:	683b      	ldr	r3, [r7, #0]
 80066da:	885b      	ldrh	r3, [r3, #2]
 80066dc:	2b00      	cmp	r3, #0
 80066de:	d136      	bne.n	800674e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 80066e0:	7bbb      	ldrb	r3, [r7, #14]
 80066e2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80066e6:	2b00      	cmp	r3, #0
 80066e8:	d004      	beq.n	80066f4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 80066ea:	7bbb      	ldrb	r3, [r7, #14]
 80066ec:	4619      	mov	r1, r3
 80066ee:	6878      	ldr	r0, [r7, #4]
 80066f0:	f001 f841 	bl	8007776 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 80066f4:	6878      	ldr	r0, [r7, #4]
 80066f6:	f000 fcda 	bl	80070ae <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 80066fa:	7bbb      	ldrb	r3, [r7, #14]
 80066fc:	4619      	mov	r1, r3
 80066fe:	6878      	ldr	r0, [r7, #4]
 8006700:	f7ff fde2 	bl	80062c8 <USBD_CoreFindEP>
 8006704:	4603      	mov	r3, r0
 8006706:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006708:	7b7b      	ldrb	r3, [r7, #13]
 800670a:	2bff      	cmp	r3, #255	; 0xff
 800670c:	d01f      	beq.n	800674e <USBD_StdEPReq+0x1c6>
 800670e:	7b7b      	ldrb	r3, [r7, #13]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d11c      	bne.n	800674e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006714:	7b7a      	ldrb	r2, [r7, #13]
 8006716:	687b      	ldr	r3, [r7, #4]
 8006718:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 800671c:	7b7a      	ldrb	r2, [r7, #13]
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	32ae      	adds	r2, #174	; 0xae
 8006722:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006726:	689b      	ldr	r3, [r3, #8]
 8006728:	2b00      	cmp	r3, #0
 800672a:	d010      	beq.n	800674e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 800672c:	7b7a      	ldrb	r2, [r7, #13]
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	32ae      	adds	r2, #174	; 0xae
 8006732:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006736:	689b      	ldr	r3, [r3, #8]
 8006738:	6839      	ldr	r1, [r7, #0]
 800673a:	6878      	ldr	r0, [r7, #4]
 800673c:	4798      	blx	r3
 800673e:	4603      	mov	r3, r0
 8006740:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006742:	e004      	b.n	800674e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006744:	6839      	ldr	r1, [r7, #0]
 8006746:	6878      	ldr	r0, [r7, #4]
 8006748:	f000 fc03 	bl	8006f52 <USBD_CtlError>
              break;
 800674c:	e000      	b.n	8006750 <USBD_StdEPReq+0x1c8>
              break;
 800674e:	bf00      	nop
          }
          break;
 8006750:	e0ab      	b.n	80068aa <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006752:	687b      	ldr	r3, [r7, #4]
 8006754:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006758:	b2db      	uxtb	r3, r3
 800675a:	2b02      	cmp	r3, #2
 800675c:	d002      	beq.n	8006764 <USBD_StdEPReq+0x1dc>
 800675e:	2b03      	cmp	r3, #3
 8006760:	d032      	beq.n	80067c8 <USBD_StdEPReq+0x240>
 8006762:	e097      	b.n	8006894 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006764:	7bbb      	ldrb	r3, [r7, #14]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d007      	beq.n	800677a <USBD_StdEPReq+0x1f2>
 800676a:	7bbb      	ldrb	r3, [r7, #14]
 800676c:	2b80      	cmp	r3, #128	; 0x80
 800676e:	d004      	beq.n	800677a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006770:	6839      	ldr	r1, [r7, #0]
 8006772:	6878      	ldr	r0, [r7, #4]
 8006774:	f000 fbed 	bl	8006f52 <USBD_CtlError>
                break;
 8006778:	e091      	b.n	800689e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800677a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800677e:	2b00      	cmp	r3, #0
 8006780:	da0b      	bge.n	800679a <USBD_StdEPReq+0x212>
 8006782:	7bbb      	ldrb	r3, [r7, #14]
 8006784:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006788:	4613      	mov	r3, r2
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	009b      	lsls	r3, r3, #2
 8006790:	3310      	adds	r3, #16
 8006792:	687a      	ldr	r2, [r7, #4]
 8006794:	4413      	add	r3, r2
 8006796:	3304      	adds	r3, #4
 8006798:	e00b      	b.n	80067b2 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800679a:	7bbb      	ldrb	r3, [r7, #14]
 800679c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80067a0:	4613      	mov	r3, r2
 80067a2:	009b      	lsls	r3, r3, #2
 80067a4:	4413      	add	r3, r2
 80067a6:	009b      	lsls	r3, r3, #2
 80067a8:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80067ac:	687a      	ldr	r2, [r7, #4]
 80067ae:	4413      	add	r3, r2
 80067b0:	3304      	adds	r3, #4
 80067b2:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 80067b4:	68bb      	ldr	r3, [r7, #8]
 80067b6:	2200      	movs	r2, #0
 80067b8:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2202      	movs	r2, #2
 80067be:	4619      	mov	r1, r3
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 fc37 	bl	8007034 <USBD_CtlSendData>
              break;
 80067c6:	e06a      	b.n	800689e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 80067c8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	da11      	bge.n	80067f4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 80067d0:	7bbb      	ldrb	r3, [r7, #14]
 80067d2:	f003 020f 	and.w	r2, r3, #15
 80067d6:	6879      	ldr	r1, [r7, #4]
 80067d8:	4613      	mov	r3, r2
 80067da:	009b      	lsls	r3, r3, #2
 80067dc:	4413      	add	r3, r2
 80067de:	009b      	lsls	r3, r3, #2
 80067e0:	440b      	add	r3, r1
 80067e2:	3324      	adds	r3, #36	; 0x24
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	2b00      	cmp	r3, #0
 80067e8:	d117      	bne.n	800681a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 80067ea:	6839      	ldr	r1, [r7, #0]
 80067ec:	6878      	ldr	r0, [r7, #4]
 80067ee:	f000 fbb0 	bl	8006f52 <USBD_CtlError>
                  break;
 80067f2:	e054      	b.n	800689e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 80067f4:	7bbb      	ldrb	r3, [r7, #14]
 80067f6:	f003 020f 	and.w	r2, r3, #15
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	4613      	mov	r3, r2
 80067fe:	009b      	lsls	r3, r3, #2
 8006800:	4413      	add	r3, r2
 8006802:	009b      	lsls	r3, r3, #2
 8006804:	440b      	add	r3, r1
 8006806:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 800680a:	881b      	ldrh	r3, [r3, #0]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d104      	bne.n	800681a <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006810:	6839      	ldr	r1, [r7, #0]
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f000 fb9d 	bl	8006f52 <USBD_CtlError>
                  break;
 8006818:	e041      	b.n	800689e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 800681a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800681e:	2b00      	cmp	r3, #0
 8006820:	da0b      	bge.n	800683a <USBD_StdEPReq+0x2b2>
 8006822:	7bbb      	ldrb	r3, [r7, #14]
 8006824:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006828:	4613      	mov	r3, r2
 800682a:	009b      	lsls	r3, r3, #2
 800682c:	4413      	add	r3, r2
 800682e:	009b      	lsls	r3, r3, #2
 8006830:	3310      	adds	r3, #16
 8006832:	687a      	ldr	r2, [r7, #4]
 8006834:	4413      	add	r3, r2
 8006836:	3304      	adds	r3, #4
 8006838:	e00b      	b.n	8006852 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 800683a:	7bbb      	ldrb	r3, [r7, #14]
 800683c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006840:	4613      	mov	r3, r2
 8006842:	009b      	lsls	r3, r3, #2
 8006844:	4413      	add	r3, r2
 8006846:	009b      	lsls	r3, r3, #2
 8006848:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 800684c:	687a      	ldr	r2, [r7, #4]
 800684e:	4413      	add	r3, r2
 8006850:	3304      	adds	r3, #4
 8006852:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006854:	7bbb      	ldrb	r3, [r7, #14]
 8006856:	2b00      	cmp	r3, #0
 8006858:	d002      	beq.n	8006860 <USBD_StdEPReq+0x2d8>
 800685a:	7bbb      	ldrb	r3, [r7, #14]
 800685c:	2b80      	cmp	r3, #128	; 0x80
 800685e:	d103      	bne.n	8006868 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006860:	68bb      	ldr	r3, [r7, #8]
 8006862:	2200      	movs	r2, #0
 8006864:	601a      	str	r2, [r3, #0]
 8006866:	e00e      	b.n	8006886 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006868:	7bbb      	ldrb	r3, [r7, #14]
 800686a:	4619      	mov	r1, r3
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 ffa1 	bl	80077b4 <USBD_LL_IsStallEP>
 8006872:	4603      	mov	r3, r0
 8006874:	2b00      	cmp	r3, #0
 8006876:	d003      	beq.n	8006880 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	2201      	movs	r2, #1
 800687c:	601a      	str	r2, [r3, #0]
 800687e:	e002      	b.n	8006886 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006880:	68bb      	ldr	r3, [r7, #8]
 8006882:	2200      	movs	r2, #0
 8006884:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006886:	68bb      	ldr	r3, [r7, #8]
 8006888:	2202      	movs	r2, #2
 800688a:	4619      	mov	r1, r3
 800688c:	6878      	ldr	r0, [r7, #4]
 800688e:	f000 fbd1 	bl	8007034 <USBD_CtlSendData>
              break;
 8006892:	e004      	b.n	800689e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006894:	6839      	ldr	r1, [r7, #0]
 8006896:	6878      	ldr	r0, [r7, #4]
 8006898:	f000 fb5b 	bl	8006f52 <USBD_CtlError>
              break;
 800689c:	bf00      	nop
          }
          break;
 800689e:	e004      	b.n	80068aa <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 80068a0:	6839      	ldr	r1, [r7, #0]
 80068a2:	6878      	ldr	r0, [r7, #4]
 80068a4:	f000 fb55 	bl	8006f52 <USBD_CtlError>
          break;
 80068a8:	bf00      	nop
      }
      break;
 80068aa:	e005      	b.n	80068b8 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 80068ac:	6839      	ldr	r1, [r7, #0]
 80068ae:	6878      	ldr	r0, [r7, #4]
 80068b0:	f000 fb4f 	bl	8006f52 <USBD_CtlError>
      break;
 80068b4:	e000      	b.n	80068b8 <USBD_StdEPReq+0x330>
      break;
 80068b6:	bf00      	nop
  }

  return ret;
 80068b8:	7bfb      	ldrb	r3, [r7, #15]
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	3710      	adds	r7, #16
 80068be:	46bd      	mov	sp, r7
 80068c0:	bd80      	pop	{r7, pc}
	...

080068c4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b084      	sub	sp, #16
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
 80068cc:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80068ce:	2300      	movs	r3, #0
 80068d0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 80068d2:	2300      	movs	r3, #0
 80068d4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	885b      	ldrh	r3, [r3, #2]
 80068de:	0a1b      	lsrs	r3, r3, #8
 80068e0:	b29b      	uxth	r3, r3
 80068e2:	3b01      	subs	r3, #1
 80068e4:	2b06      	cmp	r3, #6
 80068e6:	f200 8128 	bhi.w	8006b3a <USBD_GetDescriptor+0x276>
 80068ea:	a201      	add	r2, pc, #4	; (adr r2, 80068f0 <USBD_GetDescriptor+0x2c>)
 80068ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068f0:	0800690d 	.word	0x0800690d
 80068f4:	08006925 	.word	0x08006925
 80068f8:	08006965 	.word	0x08006965
 80068fc:	08006b3b 	.word	0x08006b3b
 8006900:	08006b3b 	.word	0x08006b3b
 8006904:	08006adb 	.word	0x08006adb
 8006908:	08006b07 	.word	0x08006b07
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006912:	681b      	ldr	r3, [r3, #0]
 8006914:	687a      	ldr	r2, [r7, #4]
 8006916:	7c12      	ldrb	r2, [r2, #16]
 8006918:	f107 0108 	add.w	r1, r7, #8
 800691c:	4610      	mov	r0, r2
 800691e:	4798      	blx	r3
 8006920:	60f8      	str	r0, [r7, #12]
      break;
 8006922:	e112      	b.n	8006b4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	7c1b      	ldrb	r3, [r3, #16]
 8006928:	2b00      	cmp	r3, #0
 800692a:	d10d      	bne.n	8006948 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006934:	f107 0208 	add.w	r2, r7, #8
 8006938:	4610      	mov	r0, r2
 800693a:	4798      	blx	r3
 800693c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	3301      	adds	r3, #1
 8006942:	2202      	movs	r2, #2
 8006944:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006946:	e100      	b.n	8006b4a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800694e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006950:	f107 0208 	add.w	r2, r7, #8
 8006954:	4610      	mov	r0, r2
 8006956:	4798      	blx	r3
 8006958:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	3301      	adds	r3, #1
 800695e:	2202      	movs	r2, #2
 8006960:	701a      	strb	r2, [r3, #0]
      break;
 8006962:	e0f2      	b.n	8006b4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006964:	683b      	ldr	r3, [r7, #0]
 8006966:	885b      	ldrh	r3, [r3, #2]
 8006968:	b2db      	uxtb	r3, r3
 800696a:	2b05      	cmp	r3, #5
 800696c:	f200 80ac 	bhi.w	8006ac8 <USBD_GetDescriptor+0x204>
 8006970:	a201      	add	r2, pc, #4	; (adr r2, 8006978 <USBD_GetDescriptor+0xb4>)
 8006972:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006976:	bf00      	nop
 8006978:	08006991 	.word	0x08006991
 800697c:	080069c5 	.word	0x080069c5
 8006980:	080069f9 	.word	0x080069f9
 8006984:	08006a2d 	.word	0x08006a2d
 8006988:	08006a61 	.word	0x08006a61
 800698c:	08006a95 	.word	0x08006a95
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	2b00      	cmp	r3, #0
 800699a:	d00b      	beq.n	80069b4 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069a2:	685b      	ldr	r3, [r3, #4]
 80069a4:	687a      	ldr	r2, [r7, #4]
 80069a6:	7c12      	ldrb	r2, [r2, #16]
 80069a8:	f107 0108 	add.w	r1, r7, #8
 80069ac:	4610      	mov	r0, r2
 80069ae:	4798      	blx	r3
 80069b0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069b2:	e091      	b.n	8006ad8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069b4:	6839      	ldr	r1, [r7, #0]
 80069b6:	6878      	ldr	r0, [r7, #4]
 80069b8:	f000 facb 	bl	8006f52 <USBD_CtlError>
            err++;
 80069bc:	7afb      	ldrb	r3, [r7, #11]
 80069be:	3301      	adds	r3, #1
 80069c0:	72fb      	strb	r3, [r7, #11]
          break;
 80069c2:	e089      	b.n	8006ad8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80069c4:	687b      	ldr	r3, [r7, #4]
 80069c6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069ca:	689b      	ldr	r3, [r3, #8]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	d00b      	beq.n	80069e8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069d6:	689b      	ldr	r3, [r3, #8]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	7c12      	ldrb	r2, [r2, #16]
 80069dc:	f107 0108 	add.w	r1, r7, #8
 80069e0:	4610      	mov	r0, r2
 80069e2:	4798      	blx	r3
 80069e4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80069e6:	e077      	b.n	8006ad8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80069e8:	6839      	ldr	r1, [r7, #0]
 80069ea:	6878      	ldr	r0, [r7, #4]
 80069ec:	f000 fab1 	bl	8006f52 <USBD_CtlError>
            err++;
 80069f0:	7afb      	ldrb	r3, [r7, #11]
 80069f2:	3301      	adds	r3, #1
 80069f4:	72fb      	strb	r3, [r7, #11]
          break;
 80069f6:	e06f      	b.n	8006ad8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80069fe:	68db      	ldr	r3, [r3, #12]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d00b      	beq.n	8006a1c <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a0a:	68db      	ldr	r3, [r3, #12]
 8006a0c:	687a      	ldr	r2, [r7, #4]
 8006a0e:	7c12      	ldrb	r2, [r2, #16]
 8006a10:	f107 0108 	add.w	r1, r7, #8
 8006a14:	4610      	mov	r0, r2
 8006a16:	4798      	blx	r3
 8006a18:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a1a:	e05d      	b.n	8006ad8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a1c:	6839      	ldr	r1, [r7, #0]
 8006a1e:	6878      	ldr	r0, [r7, #4]
 8006a20:	f000 fa97 	bl	8006f52 <USBD_CtlError>
            err++;
 8006a24:	7afb      	ldrb	r3, [r7, #11]
 8006a26:	3301      	adds	r3, #1
 8006a28:	72fb      	strb	r3, [r7, #11]
          break;
 8006a2a:	e055      	b.n	8006ad8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006a2c:	687b      	ldr	r3, [r7, #4]
 8006a2e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a32:	691b      	ldr	r3, [r3, #16]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d00b      	beq.n	8006a50 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a3e:	691b      	ldr	r3, [r3, #16]
 8006a40:	687a      	ldr	r2, [r7, #4]
 8006a42:	7c12      	ldrb	r2, [r2, #16]
 8006a44:	f107 0108 	add.w	r1, r7, #8
 8006a48:	4610      	mov	r0, r2
 8006a4a:	4798      	blx	r3
 8006a4c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a4e:	e043      	b.n	8006ad8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a50:	6839      	ldr	r1, [r7, #0]
 8006a52:	6878      	ldr	r0, [r7, #4]
 8006a54:	f000 fa7d 	bl	8006f52 <USBD_CtlError>
            err++;
 8006a58:	7afb      	ldrb	r3, [r7, #11]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	72fb      	strb	r3, [r7, #11]
          break;
 8006a5e:	e03b      	b.n	8006ad8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006a60:	687b      	ldr	r3, [r7, #4]
 8006a62:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a66:	695b      	ldr	r3, [r3, #20]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d00b      	beq.n	8006a84 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a72:	695b      	ldr	r3, [r3, #20]
 8006a74:	687a      	ldr	r2, [r7, #4]
 8006a76:	7c12      	ldrb	r2, [r2, #16]
 8006a78:	f107 0108 	add.w	r1, r7, #8
 8006a7c:	4610      	mov	r0, r2
 8006a7e:	4798      	blx	r3
 8006a80:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006a82:	e029      	b.n	8006ad8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006a84:	6839      	ldr	r1, [r7, #0]
 8006a86:	6878      	ldr	r0, [r7, #4]
 8006a88:	f000 fa63 	bl	8006f52 <USBD_CtlError>
            err++;
 8006a8c:	7afb      	ldrb	r3, [r7, #11]
 8006a8e:	3301      	adds	r3, #1
 8006a90:	72fb      	strb	r3, [r7, #11]
          break;
 8006a92:	e021      	b.n	8006ad8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006a9a:	699b      	ldr	r3, [r3, #24]
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d00b      	beq.n	8006ab8 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006aa6:	699b      	ldr	r3, [r3, #24]
 8006aa8:	687a      	ldr	r2, [r7, #4]
 8006aaa:	7c12      	ldrb	r2, [r2, #16]
 8006aac:	f107 0108 	add.w	r1, r7, #8
 8006ab0:	4610      	mov	r0, r2
 8006ab2:	4798      	blx	r3
 8006ab4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006ab6:	e00f      	b.n	8006ad8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006ab8:	6839      	ldr	r1, [r7, #0]
 8006aba:	6878      	ldr	r0, [r7, #4]
 8006abc:	f000 fa49 	bl	8006f52 <USBD_CtlError>
            err++;
 8006ac0:	7afb      	ldrb	r3, [r7, #11]
 8006ac2:	3301      	adds	r3, #1
 8006ac4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ac6:	e007      	b.n	8006ad8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ac8:	6839      	ldr	r1, [r7, #0]
 8006aca:	6878      	ldr	r0, [r7, #4]
 8006acc:	f000 fa41 	bl	8006f52 <USBD_CtlError>
          err++;
 8006ad0:	7afb      	ldrb	r3, [r7, #11]
 8006ad2:	3301      	adds	r3, #1
 8006ad4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006ad6:	bf00      	nop
      }
      break;
 8006ad8:	e037      	b.n	8006b4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	7c1b      	ldrb	r3, [r3, #16]
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d109      	bne.n	8006af6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ae8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006aea:	f107 0208 	add.w	r2, r7, #8
 8006aee:	4610      	mov	r0, r2
 8006af0:	4798      	blx	r3
 8006af2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006af4:	e029      	b.n	8006b4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006af6:	6839      	ldr	r1, [r7, #0]
 8006af8:	6878      	ldr	r0, [r7, #4]
 8006afa:	f000 fa2a 	bl	8006f52 <USBD_CtlError>
        err++;
 8006afe:	7afb      	ldrb	r3, [r7, #11]
 8006b00:	3301      	adds	r3, #1
 8006b02:	72fb      	strb	r3, [r7, #11]
      break;
 8006b04:	e021      	b.n	8006b4a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	7c1b      	ldrb	r3, [r3, #16]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10d      	bne.n	8006b2a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006b14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006b16:	f107 0208 	add.w	r2, r7, #8
 8006b1a:	4610      	mov	r0, r2
 8006b1c:	4798      	blx	r3
 8006b1e:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006b20:	68fb      	ldr	r3, [r7, #12]
 8006b22:	3301      	adds	r3, #1
 8006b24:	2207      	movs	r2, #7
 8006b26:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006b28:	e00f      	b.n	8006b4a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006b2a:	6839      	ldr	r1, [r7, #0]
 8006b2c:	6878      	ldr	r0, [r7, #4]
 8006b2e:	f000 fa10 	bl	8006f52 <USBD_CtlError>
        err++;
 8006b32:	7afb      	ldrb	r3, [r7, #11]
 8006b34:	3301      	adds	r3, #1
 8006b36:	72fb      	strb	r3, [r7, #11]
      break;
 8006b38:	e007      	b.n	8006b4a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006b3a:	6839      	ldr	r1, [r7, #0]
 8006b3c:	6878      	ldr	r0, [r7, #4]
 8006b3e:	f000 fa08 	bl	8006f52 <USBD_CtlError>
      err++;
 8006b42:	7afb      	ldrb	r3, [r7, #11]
 8006b44:	3301      	adds	r3, #1
 8006b46:	72fb      	strb	r3, [r7, #11]
      break;
 8006b48:	bf00      	nop
  }

  if (err != 0U)
 8006b4a:	7afb      	ldrb	r3, [r7, #11]
 8006b4c:	2b00      	cmp	r3, #0
 8006b4e:	d11e      	bne.n	8006b8e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	88db      	ldrh	r3, [r3, #6]
 8006b54:	2b00      	cmp	r3, #0
 8006b56:	d016      	beq.n	8006b86 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006b58:	893b      	ldrh	r3, [r7, #8]
 8006b5a:	2b00      	cmp	r3, #0
 8006b5c:	d00e      	beq.n	8006b7c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	88da      	ldrh	r2, [r3, #6]
 8006b62:	893b      	ldrh	r3, [r7, #8]
 8006b64:	4293      	cmp	r3, r2
 8006b66:	bf28      	it	cs
 8006b68:	4613      	movcs	r3, r2
 8006b6a:	b29b      	uxth	r3, r3
 8006b6c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006b6e:	893b      	ldrh	r3, [r7, #8]
 8006b70:	461a      	mov	r2, r3
 8006b72:	68f9      	ldr	r1, [r7, #12]
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fa5d 	bl	8007034 <USBD_CtlSendData>
 8006b7a:	e009      	b.n	8006b90 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006b7c:	6839      	ldr	r1, [r7, #0]
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 f9e7 	bl	8006f52 <USBD_CtlError>
 8006b84:	e004      	b.n	8006b90 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fa91 	bl	80070ae <USBD_CtlSendStatus>
 8006b8c:	e000      	b.n	8006b90 <USBD_GetDescriptor+0x2cc>
    return;
 8006b8e:	bf00      	nop
  }
}
 8006b90:	3710      	adds	r7, #16
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
 8006b96:	bf00      	nop

08006b98 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b084      	sub	sp, #16
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	6078      	str	r0, [r7, #4]
 8006ba0:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006ba2:	683b      	ldr	r3, [r7, #0]
 8006ba4:	889b      	ldrh	r3, [r3, #4]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d131      	bne.n	8006c0e <USBD_SetAddress+0x76>
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	88db      	ldrh	r3, [r3, #6]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d12d      	bne.n	8006c0e <USBD_SetAddress+0x76>
 8006bb2:	683b      	ldr	r3, [r7, #0]
 8006bb4:	885b      	ldrh	r3, [r3, #2]
 8006bb6:	2b7f      	cmp	r3, #127	; 0x7f
 8006bb8:	d829      	bhi.n	8006c0e <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006bba:	683b      	ldr	r3, [r7, #0]
 8006bbc:	885b      	ldrh	r3, [r3, #2]
 8006bbe:	b2db      	uxtb	r3, r3
 8006bc0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006bc4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006bcc:	b2db      	uxtb	r3, r3
 8006bce:	2b03      	cmp	r3, #3
 8006bd0:	d104      	bne.n	8006bdc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006bd2:	6839      	ldr	r1, [r7, #0]
 8006bd4:	6878      	ldr	r0, [r7, #4]
 8006bd6:	f000 f9bc 	bl	8006f52 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006bda:	e01d      	b.n	8006c18 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	7bfa      	ldrb	r2, [r7, #15]
 8006be0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006be4:	7bfb      	ldrb	r3, [r7, #15]
 8006be6:	4619      	mov	r1, r3
 8006be8:	6878      	ldr	r0, [r7, #4]
 8006bea:	f000 fe0f 	bl	800780c <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fa5d 	bl	80070ae <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006bf4:	7bfb      	ldrb	r3, [r7, #15]
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d004      	beq.n	8006c04 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2202      	movs	r2, #2
 8006bfe:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c02:	e009      	b.n	8006c18 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	2201      	movs	r2, #1
 8006c08:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006c0c:	e004      	b.n	8006c18 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006c0e:	6839      	ldr	r1, [r7, #0]
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f99e 	bl	8006f52 <USBD_CtlError>
  }
}
 8006c16:	bf00      	nop
 8006c18:	bf00      	nop
 8006c1a:	3710      	adds	r7, #16
 8006c1c:	46bd      	mov	sp, r7
 8006c1e:	bd80      	pop	{r7, pc}

08006c20 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c20:	b580      	push	{r7, lr}
 8006c22:	b084      	sub	sp, #16
 8006c24:	af00      	add	r7, sp, #0
 8006c26:	6078      	str	r0, [r7, #4]
 8006c28:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006c2e:	683b      	ldr	r3, [r7, #0]
 8006c30:	885b      	ldrh	r3, [r3, #2]
 8006c32:	b2da      	uxtb	r2, r3
 8006c34:	4b4e      	ldr	r3, [pc, #312]	; (8006d70 <USBD_SetConfig+0x150>)
 8006c36:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006c38:	4b4d      	ldr	r3, [pc, #308]	; (8006d70 <USBD_SetConfig+0x150>)
 8006c3a:	781b      	ldrb	r3, [r3, #0]
 8006c3c:	2b01      	cmp	r3, #1
 8006c3e:	d905      	bls.n	8006c4c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006c40:	6839      	ldr	r1, [r7, #0]
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 f985 	bl	8006f52 <USBD_CtlError>
    return USBD_FAIL;
 8006c48:	2303      	movs	r3, #3
 8006c4a:	e08c      	b.n	8006d66 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c52:	b2db      	uxtb	r3, r3
 8006c54:	2b02      	cmp	r3, #2
 8006c56:	d002      	beq.n	8006c5e <USBD_SetConfig+0x3e>
 8006c58:	2b03      	cmp	r3, #3
 8006c5a:	d029      	beq.n	8006cb0 <USBD_SetConfig+0x90>
 8006c5c:	e075      	b.n	8006d4a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006c5e:	4b44      	ldr	r3, [pc, #272]	; (8006d70 <USBD_SetConfig+0x150>)
 8006c60:	781b      	ldrb	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d020      	beq.n	8006ca8 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8006c66:	4b42      	ldr	r3, [pc, #264]	; (8006d70 <USBD_SetConfig+0x150>)
 8006c68:	781b      	ldrb	r3, [r3, #0]
 8006c6a:	461a      	mov	r2, r3
 8006c6c:	687b      	ldr	r3, [r7, #4]
 8006c6e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006c70:	4b3f      	ldr	r3, [pc, #252]	; (8006d70 <USBD_SetConfig+0x150>)
 8006c72:	781b      	ldrb	r3, [r3, #0]
 8006c74:	4619      	mov	r1, r3
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f7fe ffe7 	bl	8005c4a <USBD_SetClassConfig>
 8006c7c:	4603      	mov	r3, r0
 8006c7e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006c80:	7bfb      	ldrb	r3, [r7, #15]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d008      	beq.n	8006c98 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8006c86:	6839      	ldr	r1, [r7, #0]
 8006c88:	6878      	ldr	r0, [r7, #4]
 8006c8a:	f000 f962 	bl	8006f52 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	2202      	movs	r2, #2
 8006c92:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006c96:	e065      	b.n	8006d64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006c98:	6878      	ldr	r0, [r7, #4]
 8006c9a:	f000 fa08 	bl	80070ae <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2203      	movs	r2, #3
 8006ca2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006ca6:	e05d      	b.n	8006d64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006ca8:	6878      	ldr	r0, [r7, #4]
 8006caa:	f000 fa00 	bl	80070ae <USBD_CtlSendStatus>
      break;
 8006cae:	e059      	b.n	8006d64 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006cb0:	4b2f      	ldr	r3, [pc, #188]	; (8006d70 <USBD_SetConfig+0x150>)
 8006cb2:	781b      	ldrb	r3, [r3, #0]
 8006cb4:	2b00      	cmp	r3, #0
 8006cb6:	d112      	bne.n	8006cde <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	2202      	movs	r2, #2
 8006cbc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006cc0:	4b2b      	ldr	r3, [pc, #172]	; (8006d70 <USBD_SetConfig+0x150>)
 8006cc2:	781b      	ldrb	r3, [r3, #0]
 8006cc4:	461a      	mov	r2, r3
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006cca:	4b29      	ldr	r3, [pc, #164]	; (8006d70 <USBD_SetConfig+0x150>)
 8006ccc:	781b      	ldrb	r3, [r3, #0]
 8006cce:	4619      	mov	r1, r3
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f7fe ffd6 	bl	8005c82 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8006cd6:	6878      	ldr	r0, [r7, #4]
 8006cd8:	f000 f9e9 	bl	80070ae <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006cdc:	e042      	b.n	8006d64 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006cde:	4b24      	ldr	r3, [pc, #144]	; (8006d70 <USBD_SetConfig+0x150>)
 8006ce0:	781b      	ldrb	r3, [r3, #0]
 8006ce2:	461a      	mov	r2, r3
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	685b      	ldr	r3, [r3, #4]
 8006ce8:	429a      	cmp	r2, r3
 8006cea:	d02a      	beq.n	8006d42 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	b2db      	uxtb	r3, r3
 8006cf2:	4619      	mov	r1, r3
 8006cf4:	6878      	ldr	r0, [r7, #4]
 8006cf6:	f7fe ffc4 	bl	8005c82 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006cfa:	4b1d      	ldr	r3, [pc, #116]	; (8006d70 <USBD_SetConfig+0x150>)
 8006cfc:	781b      	ldrb	r3, [r3, #0]
 8006cfe:	461a      	mov	r2, r3
 8006d00:	687b      	ldr	r3, [r7, #4]
 8006d02:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006d04:	4b1a      	ldr	r3, [pc, #104]	; (8006d70 <USBD_SetConfig+0x150>)
 8006d06:	781b      	ldrb	r3, [r3, #0]
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7fe ff9d 	bl	8005c4a <USBD_SetClassConfig>
 8006d10:	4603      	mov	r3, r0
 8006d12:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8006d14:	7bfb      	ldrb	r3, [r7, #15]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d00f      	beq.n	8006d3a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006d1a:	6839      	ldr	r1, [r7, #0]
 8006d1c:	6878      	ldr	r0, [r7, #4]
 8006d1e:	f000 f918 	bl	8006f52 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	685b      	ldr	r3, [r3, #4]
 8006d26:	b2db      	uxtb	r3, r3
 8006d28:	4619      	mov	r1, r3
 8006d2a:	6878      	ldr	r0, [r7, #4]
 8006d2c:	f7fe ffa9 	bl	8005c82 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	2202      	movs	r2, #2
 8006d34:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006d38:	e014      	b.n	8006d64 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006d3a:	6878      	ldr	r0, [r7, #4]
 8006d3c:	f000 f9b7 	bl	80070ae <USBD_CtlSendStatus>
      break;
 8006d40:	e010      	b.n	8006d64 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006d42:	6878      	ldr	r0, [r7, #4]
 8006d44:	f000 f9b3 	bl	80070ae <USBD_CtlSendStatus>
      break;
 8006d48:	e00c      	b.n	8006d64 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006d4a:	6839      	ldr	r1, [r7, #0]
 8006d4c:	6878      	ldr	r0, [r7, #4]
 8006d4e:	f000 f900 	bl	8006f52 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006d52:	4b07      	ldr	r3, [pc, #28]	; (8006d70 <USBD_SetConfig+0x150>)
 8006d54:	781b      	ldrb	r3, [r3, #0]
 8006d56:	4619      	mov	r1, r3
 8006d58:	6878      	ldr	r0, [r7, #4]
 8006d5a:	f7fe ff92 	bl	8005c82 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006d5e:	2303      	movs	r3, #3
 8006d60:	73fb      	strb	r3, [r7, #15]
      break;
 8006d62:	bf00      	nop
  }

  return ret;
 8006d64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d66:	4618      	mov	r0, r3
 8006d68:	3710      	adds	r7, #16
 8006d6a:	46bd      	mov	sp, r7
 8006d6c:	bd80      	pop	{r7, pc}
 8006d6e:	bf00      	nop
 8006d70:	20000224 	.word	0x20000224

08006d74 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d74:	b580      	push	{r7, lr}
 8006d76:	b082      	sub	sp, #8
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
 8006d7c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006d7e:	683b      	ldr	r3, [r7, #0]
 8006d80:	88db      	ldrh	r3, [r3, #6]
 8006d82:	2b01      	cmp	r3, #1
 8006d84:	d004      	beq.n	8006d90 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8006d86:	6839      	ldr	r1, [r7, #0]
 8006d88:	6878      	ldr	r0, [r7, #4]
 8006d8a:	f000 f8e2 	bl	8006f52 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006d8e:	e023      	b.n	8006dd8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006d96:	b2db      	uxtb	r3, r3
 8006d98:	2b02      	cmp	r3, #2
 8006d9a:	dc02      	bgt.n	8006da2 <USBD_GetConfig+0x2e>
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	dc03      	bgt.n	8006da8 <USBD_GetConfig+0x34>
 8006da0:	e015      	b.n	8006dce <USBD_GetConfig+0x5a>
 8006da2:	2b03      	cmp	r3, #3
 8006da4:	d00b      	beq.n	8006dbe <USBD_GetConfig+0x4a>
 8006da6:	e012      	b.n	8006dce <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2200      	movs	r2, #0
 8006dac:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	3308      	adds	r3, #8
 8006db2:	2201      	movs	r2, #1
 8006db4:	4619      	mov	r1, r3
 8006db6:	6878      	ldr	r0, [r7, #4]
 8006db8:	f000 f93c 	bl	8007034 <USBD_CtlSendData>
        break;
 8006dbc:	e00c      	b.n	8006dd8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	3304      	adds	r3, #4
 8006dc2:	2201      	movs	r2, #1
 8006dc4:	4619      	mov	r1, r3
 8006dc6:	6878      	ldr	r0, [r7, #4]
 8006dc8:	f000 f934 	bl	8007034 <USBD_CtlSendData>
        break;
 8006dcc:	e004      	b.n	8006dd8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006dce:	6839      	ldr	r1, [r7, #0]
 8006dd0:	6878      	ldr	r0, [r7, #4]
 8006dd2:	f000 f8be 	bl	8006f52 <USBD_CtlError>
        break;
 8006dd6:	bf00      	nop
}
 8006dd8:	bf00      	nop
 8006dda:	3708      	adds	r7, #8
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}

08006de0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006de0:	b580      	push	{r7, lr}
 8006de2:	b082      	sub	sp, #8
 8006de4:	af00      	add	r7, sp, #0
 8006de6:	6078      	str	r0, [r7, #4]
 8006de8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006df0:	b2db      	uxtb	r3, r3
 8006df2:	3b01      	subs	r3, #1
 8006df4:	2b02      	cmp	r3, #2
 8006df6:	d81e      	bhi.n	8006e36 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	88db      	ldrh	r3, [r3, #6]
 8006dfc:	2b02      	cmp	r3, #2
 8006dfe:	d004      	beq.n	8006e0a <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006e00:	6839      	ldr	r1, [r7, #0]
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f8a5 	bl	8006f52 <USBD_CtlError>
        break;
 8006e08:	e01a      	b.n	8006e40 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	2201      	movs	r2, #1
 8006e0e:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d005      	beq.n	8006e26 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	f043 0202 	orr.w	r2, r3, #2
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	330c      	adds	r3, #12
 8006e2a:	2202      	movs	r2, #2
 8006e2c:	4619      	mov	r1, r3
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 f900 	bl	8007034 <USBD_CtlSendData>
      break;
 8006e34:	e004      	b.n	8006e40 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8006e36:	6839      	ldr	r1, [r7, #0]
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f000 f88a 	bl	8006f52 <USBD_CtlError>
      break;
 8006e3e:	bf00      	nop
  }
}
 8006e40:	bf00      	nop
 8006e42:	3708      	adds	r7, #8
 8006e44:	46bd      	mov	sp, r7
 8006e46:	bd80      	pop	{r7, pc}

08006e48 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e48:	b580      	push	{r7, lr}
 8006e4a:	b082      	sub	sp, #8
 8006e4c:	af00      	add	r7, sp, #0
 8006e4e:	6078      	str	r0, [r7, #4]
 8006e50:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006e52:	683b      	ldr	r3, [r7, #0]
 8006e54:	885b      	ldrh	r3, [r3, #2]
 8006e56:	2b01      	cmp	r3, #1
 8006e58:	d107      	bne.n	8006e6a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	2201      	movs	r2, #1
 8006e5e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8006e62:	6878      	ldr	r0, [r7, #4]
 8006e64:	f000 f923 	bl	80070ae <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006e68:	e013      	b.n	8006e92 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	885b      	ldrh	r3, [r3, #2]
 8006e6e:	2b02      	cmp	r3, #2
 8006e70:	d10b      	bne.n	8006e8a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	889b      	ldrh	r3, [r3, #4]
 8006e76:	0a1b      	lsrs	r3, r3, #8
 8006e78:	b29b      	uxth	r3, r3
 8006e7a:	b2da      	uxtb	r2, r3
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8006e82:	6878      	ldr	r0, [r7, #4]
 8006e84:	f000 f913 	bl	80070ae <USBD_CtlSendStatus>
}
 8006e88:	e003      	b.n	8006e92 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006e8a:	6839      	ldr	r1, [r7, #0]
 8006e8c:	6878      	ldr	r0, [r7, #4]
 8006e8e:	f000 f860 	bl	8006f52 <USBD_CtlError>
}
 8006e92:	bf00      	nop
 8006e94:	3708      	adds	r7, #8
 8006e96:	46bd      	mov	sp, r7
 8006e98:	bd80      	pop	{r7, pc}

08006e9a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006e9a:	b580      	push	{r7, lr}
 8006e9c:	b082      	sub	sp, #8
 8006e9e:	af00      	add	r7, sp, #0
 8006ea0:	6078      	str	r0, [r7, #4]
 8006ea2:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006eaa:	b2db      	uxtb	r3, r3
 8006eac:	3b01      	subs	r3, #1
 8006eae:	2b02      	cmp	r3, #2
 8006eb0:	d80b      	bhi.n	8006eca <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8006eb2:	683b      	ldr	r3, [r7, #0]
 8006eb4:	885b      	ldrh	r3, [r3, #2]
 8006eb6:	2b01      	cmp	r3, #1
 8006eb8:	d10c      	bne.n	8006ed4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	2200      	movs	r2, #0
 8006ebe:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 f8f3 	bl	80070ae <USBD_CtlSendStatus>
      }
      break;
 8006ec8:	e004      	b.n	8006ed4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006eca:	6839      	ldr	r1, [r7, #0]
 8006ecc:	6878      	ldr	r0, [r7, #4]
 8006ece:	f000 f840 	bl	8006f52 <USBD_CtlError>
      break;
 8006ed2:	e000      	b.n	8006ed6 <USBD_ClrFeature+0x3c>
      break;
 8006ed4:	bf00      	nop
  }
}
 8006ed6:	bf00      	nop
 8006ed8:	3708      	adds	r7, #8
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}

08006ede <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006ede:	b580      	push	{r7, lr}
 8006ee0:	b084      	sub	sp, #16
 8006ee2:	af00      	add	r7, sp, #0
 8006ee4:	6078      	str	r0, [r7, #4]
 8006ee6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006ee8:	683b      	ldr	r3, [r7, #0]
 8006eea:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	781a      	ldrb	r2, [r3, #0]
 8006ef0:	687b      	ldr	r3, [r7, #4]
 8006ef2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	3301      	adds	r3, #1
 8006ef8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	781a      	ldrb	r2, [r3, #0]
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	705a      	strb	r2, [r3, #1]

  pbuff++;
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	3301      	adds	r3, #1
 8006f06:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006f08:	68f8      	ldr	r0, [r7, #12]
 8006f0a:	f7ff fa41 	bl	8006390 <SWAPBYTE>
 8006f0e:	4603      	mov	r3, r0
 8006f10:	461a      	mov	r2, r3
 8006f12:	687b      	ldr	r3, [r7, #4]
 8006f14:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8006f16:	68fb      	ldr	r3, [r7, #12]
 8006f18:	3301      	adds	r3, #1
 8006f1a:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f1c:	68fb      	ldr	r3, [r7, #12]
 8006f1e:	3301      	adds	r3, #1
 8006f20:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8006f22:	68f8      	ldr	r0, [r7, #12]
 8006f24:	f7ff fa34 	bl	8006390 <SWAPBYTE>
 8006f28:	4603      	mov	r3, r0
 8006f2a:	461a      	mov	r2, r3
 8006f2c:	687b      	ldr	r3, [r7, #4]
 8006f2e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	3301      	adds	r3, #1
 8006f34:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006f36:	68fb      	ldr	r3, [r7, #12]
 8006f38:	3301      	adds	r3, #1
 8006f3a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006f3c:	68f8      	ldr	r0, [r7, #12]
 8006f3e:	f7ff fa27 	bl	8006390 <SWAPBYTE>
 8006f42:	4603      	mov	r3, r0
 8006f44:	461a      	mov	r2, r3
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	80da      	strh	r2, [r3, #6]
}
 8006f4a:	bf00      	nop
 8006f4c:	3710      	adds	r7, #16
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	bd80      	pop	{r7, pc}

08006f52 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f52:	b580      	push	{r7, lr}
 8006f54:	b082      	sub	sp, #8
 8006f56:	af00      	add	r7, sp, #0
 8006f58:	6078      	str	r0, [r7, #4]
 8006f5a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006f5c:	2180      	movs	r1, #128	; 0x80
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 fbea 	bl	8007738 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8006f64:	2100      	movs	r1, #0
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fbe6 	bl	8007738 <USBD_LL_StallEP>
}
 8006f6c:	bf00      	nop
 8006f6e:	3708      	adds	r7, #8
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	60b9      	str	r1, [r7, #8]
 8006f7e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006f80:	2300      	movs	r3, #0
 8006f82:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d036      	beq.n	8006ff8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006f8e:	6938      	ldr	r0, [r7, #16]
 8006f90:	f000 f836 	bl	8007000 <USBD_GetLen>
 8006f94:	4603      	mov	r3, r0
 8006f96:	3301      	adds	r3, #1
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	005b      	lsls	r3, r3, #1
 8006f9c:	b29a      	uxth	r2, r3
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8006fa2:	7dfb      	ldrb	r3, [r7, #23]
 8006fa4:	68ba      	ldr	r2, [r7, #8]
 8006fa6:	4413      	add	r3, r2
 8006fa8:	687a      	ldr	r2, [r7, #4]
 8006faa:	7812      	ldrb	r2, [r2, #0]
 8006fac:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fae:	7dfb      	ldrb	r3, [r7, #23]
 8006fb0:	3301      	adds	r3, #1
 8006fb2:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8006fb4:	7dfb      	ldrb	r3, [r7, #23]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	4413      	add	r3, r2
 8006fba:	2203      	movs	r2, #3
 8006fbc:	701a      	strb	r2, [r3, #0]
  idx++;
 8006fbe:	7dfb      	ldrb	r3, [r7, #23]
 8006fc0:	3301      	adds	r3, #1
 8006fc2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8006fc4:	e013      	b.n	8006fee <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8006fc6:	7dfb      	ldrb	r3, [r7, #23]
 8006fc8:	68ba      	ldr	r2, [r7, #8]
 8006fca:	4413      	add	r3, r2
 8006fcc:	693a      	ldr	r2, [r7, #16]
 8006fce:	7812      	ldrb	r2, [r2, #0]
 8006fd0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	3301      	adds	r3, #1
 8006fd6:	613b      	str	r3, [r7, #16]
    idx++;
 8006fd8:	7dfb      	ldrb	r3, [r7, #23]
 8006fda:	3301      	adds	r3, #1
 8006fdc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006fde:	7dfb      	ldrb	r3, [r7, #23]
 8006fe0:	68ba      	ldr	r2, [r7, #8]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	2200      	movs	r2, #0
 8006fe6:	701a      	strb	r2, [r3, #0]
    idx++;
 8006fe8:	7dfb      	ldrb	r3, [r7, #23]
 8006fea:	3301      	adds	r3, #1
 8006fec:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d1e7      	bne.n	8006fc6 <USBD_GetString+0x52>
 8006ff6:	e000      	b.n	8006ffa <USBD_GetString+0x86>
    return;
 8006ff8:	bf00      	nop
  }
}
 8006ffa:	3718      	adds	r7, #24
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8007000:	b480      	push	{r7}
 8007002:	b085      	sub	sp, #20
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007008:	2300      	movs	r3, #0
 800700a:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8007010:	e005      	b.n	800701e <USBD_GetLen+0x1e>
  {
    len++;
 8007012:	7bfb      	ldrb	r3, [r7, #15]
 8007014:	3301      	adds	r3, #1
 8007016:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007018:	68bb      	ldr	r3, [r7, #8]
 800701a:	3301      	adds	r3, #1
 800701c:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800701e:	68bb      	ldr	r3, [r7, #8]
 8007020:	781b      	ldrb	r3, [r3, #0]
 8007022:	2b00      	cmp	r3, #0
 8007024:	d1f5      	bne.n	8007012 <USBD_GetLen+0x12>
  }

  return len;
 8007026:	7bfb      	ldrb	r3, [r7, #15]
}
 8007028:	4618      	mov	r0, r3
 800702a:	3714      	adds	r7, #20
 800702c:	46bd      	mov	sp, r7
 800702e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007032:	4770      	bx	lr

08007034 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007034:	b580      	push	{r7, lr}
 8007036:	b084      	sub	sp, #16
 8007038:	af00      	add	r7, sp, #0
 800703a:	60f8      	str	r0, [r7, #12]
 800703c:	60b9      	str	r1, [r7, #8]
 800703e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007040:	68fb      	ldr	r3, [r7, #12]
 8007042:	2202      	movs	r2, #2
 8007044:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	687a      	ldr	r2, [r7, #4]
 800704c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	687a      	ldr	r2, [r7, #4]
 8007052:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	68ba      	ldr	r2, [r7, #8]
 8007058:	2100      	movs	r1, #0
 800705a:	68f8      	ldr	r0, [r7, #12]
 800705c:	f000 fbf5 	bl	800784a <USBD_LL_Transmit>

  return USBD_OK;
 8007060:	2300      	movs	r3, #0
}
 8007062:	4618      	mov	r0, r3
 8007064:	3710      	adds	r7, #16
 8007066:	46bd      	mov	sp, r7
 8007068:	bd80      	pop	{r7, pc}

0800706a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800706a:	b580      	push	{r7, lr}
 800706c:	b084      	sub	sp, #16
 800706e:	af00      	add	r7, sp, #0
 8007070:	60f8      	str	r0, [r7, #12]
 8007072:	60b9      	str	r1, [r7, #8]
 8007074:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	68ba      	ldr	r2, [r7, #8]
 800707a:	2100      	movs	r1, #0
 800707c:	68f8      	ldr	r0, [r7, #12]
 800707e:	f000 fbe4 	bl	800784a <USBD_LL_Transmit>

  return USBD_OK;
 8007082:	2300      	movs	r3, #0
}
 8007084:	4618      	mov	r0, r3
 8007086:	3710      	adds	r7, #16
 8007088:	46bd      	mov	sp, r7
 800708a:	bd80      	pop	{r7, pc}

0800708c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800708c:	b580      	push	{r7, lr}
 800708e:	b084      	sub	sp, #16
 8007090:	af00      	add	r7, sp, #0
 8007092:	60f8      	str	r0, [r7, #12]
 8007094:	60b9      	str	r1, [r7, #8]
 8007096:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	68ba      	ldr	r2, [r7, #8]
 800709c:	2100      	movs	r1, #0
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f000 fbf4 	bl	800788c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070a4:	2300      	movs	r3, #0
}
 80070a6:	4618      	mov	r0, r3
 80070a8:	3710      	adds	r7, #16
 80070aa:	46bd      	mov	sp, r7
 80070ac:	bd80      	pop	{r7, pc}

080070ae <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 80070ae:	b580      	push	{r7, lr}
 80070b0:	b082      	sub	sp, #8
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	2204      	movs	r2, #4
 80070ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80070be:	2300      	movs	r3, #0
 80070c0:	2200      	movs	r2, #0
 80070c2:	2100      	movs	r1, #0
 80070c4:	6878      	ldr	r0, [r7, #4]
 80070c6:	f000 fbc0 	bl	800784a <USBD_LL_Transmit>

  return USBD_OK;
 80070ca:	2300      	movs	r3, #0
}
 80070cc:	4618      	mov	r0, r3
 80070ce:	3708      	adds	r7, #8
 80070d0:	46bd      	mov	sp, r7
 80070d2:	bd80      	pop	{r7, pc}

080070d4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80070d4:	b580      	push	{r7, lr}
 80070d6:	b082      	sub	sp, #8
 80070d8:	af00      	add	r7, sp, #0
 80070da:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	2205      	movs	r2, #5
 80070e0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80070e4:	2300      	movs	r3, #0
 80070e6:	2200      	movs	r2, #0
 80070e8:	2100      	movs	r1, #0
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f000 fbce 	bl	800788c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80070f0:	2300      	movs	r3, #0
}
 80070f2:	4618      	mov	r0, r3
 80070f4:	3708      	adds	r7, #8
 80070f6:	46bd      	mov	sp, r7
 80070f8:	bd80      	pop	{r7, pc}
	...

080070fc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8007100:	2200      	movs	r2, #0
 8007102:	490e      	ldr	r1, [pc, #56]	; (800713c <MX_USB_DEVICE_Init+0x40>)
 8007104:	480e      	ldr	r0, [pc, #56]	; (8007140 <MX_USB_DEVICE_Init+0x44>)
 8007106:	f7fe fd23 	bl	8005b50 <USBD_Init>
 800710a:	4603      	mov	r3, r0
 800710c:	2b00      	cmp	r3, #0
 800710e:	d001      	beq.n	8007114 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8007110:	f7f9 fcb0 	bl	8000a74 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007114:	490b      	ldr	r1, [pc, #44]	; (8007144 <MX_USB_DEVICE_Init+0x48>)
 8007116:	480a      	ldr	r0, [pc, #40]	; (8007140 <MX_USB_DEVICE_Init+0x44>)
 8007118:	f7fe fd4a 	bl	8005bb0 <USBD_RegisterClass>
 800711c:	4603      	mov	r3, r0
 800711e:	2b00      	cmp	r3, #0
 8007120:	d001      	beq.n	8007126 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007122:	f7f9 fca7 	bl	8000a74 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007126:	4806      	ldr	r0, [pc, #24]	; (8007140 <MX_USB_DEVICE_Init+0x44>)
 8007128:	f7fe fd78 	bl	8005c1c <USBD_Start>
 800712c:	4603      	mov	r3, r0
 800712e:	2b00      	cmp	r3, #0
 8007130:	d001      	beq.n	8007136 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007132:	f7f9 fc9f 	bl	8000a74 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007136:	bf00      	nop
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	200000f4 	.word	0x200000f4
 8007140:	20000228 	.word	0x20000228
 8007144:	20000034 	.word	0x20000034

08007148 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007148:	b480      	push	{r7}
 800714a:	b083      	sub	sp, #12
 800714c:	af00      	add	r7, sp, #0
 800714e:	4603      	mov	r3, r0
 8007150:	6039      	str	r1, [r7, #0]
 8007152:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	2212      	movs	r2, #18
 8007158:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800715a:	4b03      	ldr	r3, [pc, #12]	; (8007168 <USBD_FS_DeviceDescriptor+0x20>)
}
 800715c:	4618      	mov	r0, r3
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr
 8007168:	20000110 	.word	0x20000110

0800716c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	4603      	mov	r3, r0
 8007174:	6039      	str	r1, [r7, #0]
 8007176:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007178:	683b      	ldr	r3, [r7, #0]
 800717a:	2204      	movs	r2, #4
 800717c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800717e:	4b03      	ldr	r3, [pc, #12]	; (800718c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007180:	4618      	mov	r0, r3
 8007182:	370c      	adds	r7, #12
 8007184:	46bd      	mov	sp, r7
 8007186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718a:	4770      	bx	lr
 800718c:	20000124 	.word	0x20000124

08007190 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007190:	b580      	push	{r7, lr}
 8007192:	b082      	sub	sp, #8
 8007194:	af00      	add	r7, sp, #0
 8007196:	4603      	mov	r3, r0
 8007198:	6039      	str	r1, [r7, #0]
 800719a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800719c:	79fb      	ldrb	r3, [r7, #7]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d105      	bne.n	80071ae <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071a2:	683a      	ldr	r2, [r7, #0]
 80071a4:	4907      	ldr	r1, [pc, #28]	; (80071c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80071a6:	4808      	ldr	r0, [pc, #32]	; (80071c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80071a8:	f7ff fee4 	bl	8006f74 <USBD_GetString>
 80071ac:	e004      	b.n	80071b8 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 80071ae:	683a      	ldr	r2, [r7, #0]
 80071b0:	4904      	ldr	r1, [pc, #16]	; (80071c4 <USBD_FS_ProductStrDescriptor+0x34>)
 80071b2:	4805      	ldr	r0, [pc, #20]	; (80071c8 <USBD_FS_ProductStrDescriptor+0x38>)
 80071b4:	f7ff fede 	bl	8006f74 <USBD_GetString>
  }
  return USBD_StrDesc;
 80071b8:	4b02      	ldr	r3, [pc, #8]	; (80071c4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 80071ba:	4618      	mov	r0, r3
 80071bc:	3708      	adds	r7, #8
 80071be:	46bd      	mov	sp, r7
 80071c0:	bd80      	pop	{r7, pc}
 80071c2:	bf00      	nop
 80071c4:	20000504 	.word	0x20000504
 80071c8:	080079c8 	.word	0x080079c8

080071cc <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b082      	sub	sp, #8
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	4603      	mov	r3, r0
 80071d4:	6039      	str	r1, [r7, #0]
 80071d6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80071d8:	683a      	ldr	r2, [r7, #0]
 80071da:	4904      	ldr	r1, [pc, #16]	; (80071ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80071dc:	4804      	ldr	r0, [pc, #16]	; (80071f0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80071de:	f7ff fec9 	bl	8006f74 <USBD_GetString>
  return USBD_StrDesc;
 80071e2:	4b02      	ldr	r3, [pc, #8]	; (80071ec <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80071e4:	4618      	mov	r0, r3
 80071e6:	3708      	adds	r7, #8
 80071e8:	46bd      	mov	sp, r7
 80071ea:	bd80      	pop	{r7, pc}
 80071ec:	20000504 	.word	0x20000504
 80071f0:	080079e0 	.word	0x080079e0

080071f4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b082      	sub	sp, #8
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	4603      	mov	r3, r0
 80071fc:	6039      	str	r1, [r7, #0]
 80071fe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	221a      	movs	r2, #26
 8007204:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007206:	f000 f843 	bl	8007290 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 800720a:	4b02      	ldr	r3, [pc, #8]	; (8007214 <USBD_FS_SerialStrDescriptor+0x20>)
}
 800720c:	4618      	mov	r0, r3
 800720e:	3708      	adds	r7, #8
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}
 8007214:	20000128 	.word	0x20000128

08007218 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b082      	sub	sp, #8
 800721c:	af00      	add	r7, sp, #0
 800721e:	4603      	mov	r3, r0
 8007220:	6039      	str	r1, [r7, #0]
 8007222:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007224:	79fb      	ldrb	r3, [r7, #7]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d105      	bne.n	8007236 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800722a:	683a      	ldr	r2, [r7, #0]
 800722c:	4907      	ldr	r1, [pc, #28]	; (800724c <USBD_FS_ConfigStrDescriptor+0x34>)
 800722e:	4808      	ldr	r0, [pc, #32]	; (8007250 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007230:	f7ff fea0 	bl	8006f74 <USBD_GetString>
 8007234:	e004      	b.n	8007240 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007236:	683a      	ldr	r2, [r7, #0]
 8007238:	4904      	ldr	r1, [pc, #16]	; (800724c <USBD_FS_ConfigStrDescriptor+0x34>)
 800723a:	4805      	ldr	r0, [pc, #20]	; (8007250 <USBD_FS_ConfigStrDescriptor+0x38>)
 800723c:	f7ff fe9a 	bl	8006f74 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007240:	4b02      	ldr	r3, [pc, #8]	; (800724c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007242:	4618      	mov	r0, r3
 8007244:	3708      	adds	r7, #8
 8007246:	46bd      	mov	sp, r7
 8007248:	bd80      	pop	{r7, pc}
 800724a:	bf00      	nop
 800724c:	20000504 	.word	0x20000504
 8007250:	080079f4 	.word	0x080079f4

08007254 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
 800725a:	4603      	mov	r3, r0
 800725c:	6039      	str	r1, [r7, #0]
 800725e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007260:	79fb      	ldrb	r3, [r7, #7]
 8007262:	2b00      	cmp	r3, #0
 8007264:	d105      	bne.n	8007272 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007266:	683a      	ldr	r2, [r7, #0]
 8007268:	4907      	ldr	r1, [pc, #28]	; (8007288 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800726a:	4808      	ldr	r0, [pc, #32]	; (800728c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800726c:	f7ff fe82 	bl	8006f74 <USBD_GetString>
 8007270:	e004      	b.n	800727c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007272:	683a      	ldr	r2, [r7, #0]
 8007274:	4904      	ldr	r1, [pc, #16]	; (8007288 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007276:	4805      	ldr	r0, [pc, #20]	; (800728c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007278:	f7ff fe7c 	bl	8006f74 <USBD_GetString>
  }
  return USBD_StrDesc;
 800727c:	4b02      	ldr	r3, [pc, #8]	; (8007288 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	20000504 	.word	0x20000504
 800728c:	08007a00 	.word	0x08007a00

08007290 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007290:	b580      	push	{r7, lr}
 8007292:	b084      	sub	sp, #16
 8007294:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007296:	4b0f      	ldr	r3, [pc, #60]	; (80072d4 <Get_SerialNum+0x44>)
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800729c:	4b0e      	ldr	r3, [pc, #56]	; (80072d8 <Get_SerialNum+0x48>)
 800729e:	681b      	ldr	r3, [r3, #0]
 80072a0:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 80072a2:	4b0e      	ldr	r3, [pc, #56]	; (80072dc <Get_SerialNum+0x4c>)
 80072a4:	681b      	ldr	r3, [r3, #0]
 80072a6:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 80072a8:	68fa      	ldr	r2, [r7, #12]
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	4413      	add	r3, r2
 80072ae:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b00      	cmp	r3, #0
 80072b4:	d009      	beq.n	80072ca <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 80072b6:	2208      	movs	r2, #8
 80072b8:	4909      	ldr	r1, [pc, #36]	; (80072e0 <Get_SerialNum+0x50>)
 80072ba:	68f8      	ldr	r0, [r7, #12]
 80072bc:	f000 f814 	bl	80072e8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80072c0:	2204      	movs	r2, #4
 80072c2:	4908      	ldr	r1, [pc, #32]	; (80072e4 <Get_SerialNum+0x54>)
 80072c4:	68b8      	ldr	r0, [r7, #8]
 80072c6:	f000 f80f 	bl	80072e8 <IntToUnicode>
  }
}
 80072ca:	bf00      	nop
 80072cc:	3710      	adds	r7, #16
 80072ce:	46bd      	mov	sp, r7
 80072d0:	bd80      	pop	{r7, pc}
 80072d2:	bf00      	nop
 80072d4:	1fff7a10 	.word	0x1fff7a10
 80072d8:	1fff7a14 	.word	0x1fff7a14
 80072dc:	1fff7a18 	.word	0x1fff7a18
 80072e0:	2000012a 	.word	0x2000012a
 80072e4:	2000013a 	.word	0x2000013a

080072e8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b087      	sub	sp, #28
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	60f8      	str	r0, [r7, #12]
 80072f0:	60b9      	str	r1, [r7, #8]
 80072f2:	4613      	mov	r3, r2
 80072f4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80072f6:	2300      	movs	r3, #0
 80072f8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80072fa:	2300      	movs	r3, #0
 80072fc:	75fb      	strb	r3, [r7, #23]
 80072fe:	e027      	b.n	8007350 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	0f1b      	lsrs	r3, r3, #28
 8007304:	2b09      	cmp	r3, #9
 8007306:	d80b      	bhi.n	8007320 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	0f1b      	lsrs	r3, r3, #28
 800730c:	b2da      	uxtb	r2, r3
 800730e:	7dfb      	ldrb	r3, [r7, #23]
 8007310:	005b      	lsls	r3, r3, #1
 8007312:	4619      	mov	r1, r3
 8007314:	68bb      	ldr	r3, [r7, #8]
 8007316:	440b      	add	r3, r1
 8007318:	3230      	adds	r2, #48	; 0x30
 800731a:	b2d2      	uxtb	r2, r2
 800731c:	701a      	strb	r2, [r3, #0]
 800731e:	e00a      	b.n	8007336 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007320:	68fb      	ldr	r3, [r7, #12]
 8007322:	0f1b      	lsrs	r3, r3, #28
 8007324:	b2da      	uxtb	r2, r3
 8007326:	7dfb      	ldrb	r3, [r7, #23]
 8007328:	005b      	lsls	r3, r3, #1
 800732a:	4619      	mov	r1, r3
 800732c:	68bb      	ldr	r3, [r7, #8]
 800732e:	440b      	add	r3, r1
 8007330:	3237      	adds	r2, #55	; 0x37
 8007332:	b2d2      	uxtb	r2, r2
 8007334:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	011b      	lsls	r3, r3, #4
 800733a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800733c:	7dfb      	ldrb	r3, [r7, #23]
 800733e:	005b      	lsls	r3, r3, #1
 8007340:	3301      	adds	r3, #1
 8007342:	68ba      	ldr	r2, [r7, #8]
 8007344:	4413      	add	r3, r2
 8007346:	2200      	movs	r2, #0
 8007348:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800734a:	7dfb      	ldrb	r3, [r7, #23]
 800734c:	3301      	adds	r3, #1
 800734e:	75fb      	strb	r3, [r7, #23]
 8007350:	7dfa      	ldrb	r2, [r7, #23]
 8007352:	79fb      	ldrb	r3, [r7, #7]
 8007354:	429a      	cmp	r2, r3
 8007356:	d3d3      	bcc.n	8007300 <IntToUnicode+0x18>
  }
}
 8007358:	bf00      	nop
 800735a:	bf00      	nop
 800735c:	371c      	adds	r7, #28
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr
	...

08007368 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007368:	b580      	push	{r7, lr}
 800736a:	b08a      	sub	sp, #40	; 0x28
 800736c:	af00      	add	r7, sp, #0
 800736e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007370:	f107 0314 	add.w	r3, r7, #20
 8007374:	2200      	movs	r2, #0
 8007376:	601a      	str	r2, [r3, #0]
 8007378:	605a      	str	r2, [r3, #4]
 800737a:	609a      	str	r2, [r3, #8]
 800737c:	60da      	str	r2, [r3, #12]
 800737e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007388:	d13a      	bne.n	8007400 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800738a:	2300      	movs	r3, #0
 800738c:	613b      	str	r3, [r7, #16]
 800738e:	4b1e      	ldr	r3, [pc, #120]	; (8007408 <HAL_PCD_MspInit+0xa0>)
 8007390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007392:	4a1d      	ldr	r2, [pc, #116]	; (8007408 <HAL_PCD_MspInit+0xa0>)
 8007394:	f043 0301 	orr.w	r3, r3, #1
 8007398:	6313      	str	r3, [r2, #48]	; 0x30
 800739a:	4b1b      	ldr	r3, [pc, #108]	; (8007408 <HAL_PCD_MspInit+0xa0>)
 800739c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800739e:	f003 0301 	and.w	r3, r3, #1
 80073a2:	613b      	str	r3, [r7, #16]
 80073a4:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 80073a6:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 80073aa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ac:	2302      	movs	r3, #2
 80073ae:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b0:	2300      	movs	r3, #0
 80073b2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073b4:	2303      	movs	r3, #3
 80073b6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 80073b8:	230a      	movs	r3, #10
 80073ba:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80073bc:	f107 0314 	add.w	r3, r7, #20
 80073c0:	4619      	mov	r1, r3
 80073c2:	4812      	ldr	r0, [pc, #72]	; (800740c <HAL_PCD_MspInit+0xa4>)
 80073c4:	f7fa fcea 	bl	8001d9c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80073c8:	4b0f      	ldr	r3, [pc, #60]	; (8007408 <HAL_PCD_MspInit+0xa0>)
 80073ca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80073cc:	4a0e      	ldr	r2, [pc, #56]	; (8007408 <HAL_PCD_MspInit+0xa0>)
 80073ce:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80073d2:	6353      	str	r3, [r2, #52]	; 0x34
 80073d4:	2300      	movs	r3, #0
 80073d6:	60fb      	str	r3, [r7, #12]
 80073d8:	4b0b      	ldr	r3, [pc, #44]	; (8007408 <HAL_PCD_MspInit+0xa0>)
 80073da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073dc:	4a0a      	ldr	r2, [pc, #40]	; (8007408 <HAL_PCD_MspInit+0xa0>)
 80073de:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80073e2:	6453      	str	r3, [r2, #68]	; 0x44
 80073e4:	4b08      	ldr	r3, [pc, #32]	; (8007408 <HAL_PCD_MspInit+0xa0>)
 80073e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073e8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80073ec:	60fb      	str	r3, [r7, #12]
 80073ee:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80073f0:	2200      	movs	r2, #0
 80073f2:	2100      	movs	r1, #0
 80073f4:	2043      	movs	r0, #67	; 0x43
 80073f6:	f7fa f9b0 	bl	800175a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80073fa:	2043      	movs	r0, #67	; 0x43
 80073fc:	f7fa f9c9 	bl	8001792 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007400:	bf00      	nop
 8007402:	3728      	adds	r7, #40	; 0x28
 8007404:	46bd      	mov	sp, r7
 8007406:	bd80      	pop	{r7, pc}
 8007408:	40023800 	.word	0x40023800
 800740c:	40020000 	.word	0x40020000

08007410 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007410:	b580      	push	{r7, lr}
 8007412:	b082      	sub	sp, #8
 8007414:	af00      	add	r7, sp, #0
 8007416:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007424:	4619      	mov	r1, r3
 8007426:	4610      	mov	r0, r2
 8007428:	f7fe fc45 	bl	8005cb6 <USBD_LL_SetupStage>
}
 800742c:	bf00      	nop
 800742e:	3708      	adds	r7, #8
 8007430:	46bd      	mov	sp, r7
 8007432:	bd80      	pop	{r7, pc}

08007434 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b082      	sub	sp, #8
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	460b      	mov	r3, r1
 800743e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007446:	78fa      	ldrb	r2, [r7, #3]
 8007448:	6879      	ldr	r1, [r7, #4]
 800744a:	4613      	mov	r3, r2
 800744c:	00db      	lsls	r3, r3, #3
 800744e:	4413      	add	r3, r2
 8007450:	009b      	lsls	r3, r3, #2
 8007452:	440b      	add	r3, r1
 8007454:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007458:	681a      	ldr	r2, [r3, #0]
 800745a:	78fb      	ldrb	r3, [r7, #3]
 800745c:	4619      	mov	r1, r3
 800745e:	f7fe fc7f 	bl	8005d60 <USBD_LL_DataOutStage>
}
 8007462:	bf00      	nop
 8007464:	3708      	adds	r7, #8
 8007466:	46bd      	mov	sp, r7
 8007468:	bd80      	pop	{r7, pc}

0800746a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800746a:	b580      	push	{r7, lr}
 800746c:	b082      	sub	sp, #8
 800746e:	af00      	add	r7, sp, #0
 8007470:	6078      	str	r0, [r7, #4]
 8007472:	460b      	mov	r3, r1
 8007474:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800747c:	78fa      	ldrb	r2, [r7, #3]
 800747e:	6879      	ldr	r1, [r7, #4]
 8007480:	4613      	mov	r3, r2
 8007482:	00db      	lsls	r3, r3, #3
 8007484:	4413      	add	r3, r2
 8007486:	009b      	lsls	r3, r3, #2
 8007488:	440b      	add	r3, r1
 800748a:	334c      	adds	r3, #76	; 0x4c
 800748c:	681a      	ldr	r2, [r3, #0]
 800748e:	78fb      	ldrb	r3, [r7, #3]
 8007490:	4619      	mov	r1, r3
 8007492:	f7fe fd18 	bl	8005ec6 <USBD_LL_DataInStage>
}
 8007496:	bf00      	nop
 8007498:	3708      	adds	r7, #8
 800749a:	46bd      	mov	sp, r7
 800749c:	bd80      	pop	{r7, pc}

0800749e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800749e:	b580      	push	{r7, lr}
 80074a0:	b082      	sub	sp, #8
 80074a2:	af00      	add	r7, sp, #0
 80074a4:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074ac:	4618      	mov	r0, r3
 80074ae:	f7fe fe4c 	bl	800614a <USBD_LL_SOF>
}
 80074b2:	bf00      	nop
 80074b4:	3708      	adds	r7, #8
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b084      	sub	sp, #16
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80074c2:	2301      	movs	r3, #1
 80074c4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	68db      	ldr	r3, [r3, #12]
 80074ca:	2b02      	cmp	r3, #2
 80074cc:	d001      	beq.n	80074d2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80074ce:	f7f9 fad1 	bl	8000a74 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074d8:	7bfa      	ldrb	r2, [r7, #15]
 80074da:	4611      	mov	r1, r2
 80074dc:	4618      	mov	r0, r3
 80074de:	f7fe fdf6 	bl	80060ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80074e8:	4618      	mov	r0, r3
 80074ea:	f7fe fd9e 	bl	800602a <USBD_LL_Reset>
}
 80074ee:	bf00      	nop
 80074f0:	3710      	adds	r7, #16
 80074f2:	46bd      	mov	sp, r7
 80074f4:	bd80      	pop	{r7, pc}
	...

080074f8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80074f8:	b580      	push	{r7, lr}
 80074fa:	b082      	sub	sp, #8
 80074fc:	af00      	add	r7, sp, #0
 80074fe:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007506:	4618      	mov	r0, r3
 8007508:	f7fe fdf1 	bl	80060ee <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	681b      	ldr	r3, [r3, #0]
 8007510:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	687a      	ldr	r2, [r7, #4]
 8007518:	6812      	ldr	r2, [r2, #0]
 800751a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 800751e:	f043 0301 	orr.w	r3, r3, #1
 8007522:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	6a1b      	ldr	r3, [r3, #32]
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800752c:	4b04      	ldr	r3, [pc, #16]	; (8007540 <HAL_PCD_SuspendCallback+0x48>)
 800752e:	691b      	ldr	r3, [r3, #16]
 8007530:	4a03      	ldr	r2, [pc, #12]	; (8007540 <HAL_PCD_SuspendCallback+0x48>)
 8007532:	f043 0306 	orr.w	r3, r3, #6
 8007536:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007538:	bf00      	nop
 800753a:	3708      	adds	r7, #8
 800753c:	46bd      	mov	sp, r7
 800753e:	bd80      	pop	{r7, pc}
 8007540:	e000ed00 	.word	0xe000ed00

08007544 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007544:	b580      	push	{r7, lr}
 8007546:	b082      	sub	sp, #8
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800754c:	687b      	ldr	r3, [r7, #4]
 800754e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007552:	4618      	mov	r0, r3
 8007554:	f7fe fde1 	bl	800611a <USBD_LL_Resume>
}
 8007558:	bf00      	nop
 800755a:	3708      	adds	r7, #8
 800755c:	46bd      	mov	sp, r7
 800755e:	bd80      	pop	{r7, pc}

08007560 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007560:	b580      	push	{r7, lr}
 8007562:	b082      	sub	sp, #8
 8007564:	af00      	add	r7, sp, #0
 8007566:	6078      	str	r0, [r7, #4]
 8007568:	460b      	mov	r3, r1
 800756a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800756c:	687b      	ldr	r3, [r7, #4]
 800756e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007572:	78fa      	ldrb	r2, [r7, #3]
 8007574:	4611      	mov	r1, r2
 8007576:	4618      	mov	r0, r3
 8007578:	f7fe fe39 	bl	80061ee <USBD_LL_IsoOUTIncomplete>
}
 800757c:	bf00      	nop
 800757e:	3708      	adds	r7, #8
 8007580:	46bd      	mov	sp, r7
 8007582:	bd80      	pop	{r7, pc}

08007584 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007584:	b580      	push	{r7, lr}
 8007586:	b082      	sub	sp, #8
 8007588:	af00      	add	r7, sp, #0
 800758a:	6078      	str	r0, [r7, #4]
 800758c:	460b      	mov	r3, r1
 800758e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007596:	78fa      	ldrb	r2, [r7, #3]
 8007598:	4611      	mov	r1, r2
 800759a:	4618      	mov	r0, r3
 800759c:	f7fe fdf5 	bl	800618a <USBD_LL_IsoINIncomplete>
}
 80075a0:	bf00      	nop
 80075a2:	3708      	adds	r7, #8
 80075a4:	46bd      	mov	sp, r7
 80075a6:	bd80      	pop	{r7, pc}

080075a8 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075a8:	b580      	push	{r7, lr}
 80075aa:	b082      	sub	sp, #8
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075b6:	4618      	mov	r0, r3
 80075b8:	f7fe fe4b 	bl	8006252 <USBD_LL_DevConnected>
}
 80075bc:	bf00      	nop
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80075cc:	687b      	ldr	r3, [r7, #4]
 80075ce:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80075d2:	4618      	mov	r0, r3
 80075d4:	f7fe fe48 	bl	8006268 <USBD_LL_DevDisconnected>
}
 80075d8:	bf00      	nop
 80075da:	3708      	adds	r7, #8
 80075dc:	46bd      	mov	sp, r7
 80075de:	bd80      	pop	{r7, pc}

080075e0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80075e0:	b580      	push	{r7, lr}
 80075e2:	b082      	sub	sp, #8
 80075e4:	af00      	add	r7, sp, #0
 80075e6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	781b      	ldrb	r3, [r3, #0]
 80075ec:	2b00      	cmp	r3, #0
 80075ee:	d13c      	bne.n	800766a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80075f0:	4a20      	ldr	r2, [pc, #128]	; (8007674 <USBD_LL_Init+0x94>)
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	4a1e      	ldr	r2, [pc, #120]	; (8007674 <USBD_LL_Init+0x94>)
 80075fc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007600:	4b1c      	ldr	r3, [pc, #112]	; (8007674 <USBD_LL_Init+0x94>)
 8007602:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007606:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007608:	4b1a      	ldr	r3, [pc, #104]	; (8007674 <USBD_LL_Init+0x94>)
 800760a:	2204      	movs	r2, #4
 800760c:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800760e:	4b19      	ldr	r3, [pc, #100]	; (8007674 <USBD_LL_Init+0x94>)
 8007610:	2202      	movs	r2, #2
 8007612:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007614:	4b17      	ldr	r3, [pc, #92]	; (8007674 <USBD_LL_Init+0x94>)
 8007616:	2200      	movs	r2, #0
 8007618:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 800761a:	4b16      	ldr	r3, [pc, #88]	; (8007674 <USBD_LL_Init+0x94>)
 800761c:	2202      	movs	r2, #2
 800761e:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007620:	4b14      	ldr	r3, [pc, #80]	; (8007674 <USBD_LL_Init+0x94>)
 8007622:	2200      	movs	r2, #0
 8007624:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007626:	4b13      	ldr	r3, [pc, #76]	; (8007674 <USBD_LL_Init+0x94>)
 8007628:	2200      	movs	r2, #0
 800762a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 800762c:	4b11      	ldr	r3, [pc, #68]	; (8007674 <USBD_LL_Init+0x94>)
 800762e:	2200      	movs	r2, #0
 8007630:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007632:	4b10      	ldr	r3, [pc, #64]	; (8007674 <USBD_LL_Init+0x94>)
 8007634:	2200      	movs	r2, #0
 8007636:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007638:	4b0e      	ldr	r3, [pc, #56]	; (8007674 <USBD_LL_Init+0x94>)
 800763a:	2200      	movs	r2, #0
 800763c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800763e:	480d      	ldr	r0, [pc, #52]	; (8007674 <USBD_LL_Init+0x94>)
 8007640:	f7fa fd49 	bl	80020d6 <HAL_PCD_Init>
 8007644:	4603      	mov	r3, r0
 8007646:	2b00      	cmp	r3, #0
 8007648:	d001      	beq.n	800764e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 800764a:	f7f9 fa13 	bl	8000a74 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 800764e:	2180      	movs	r1, #128	; 0x80
 8007650:	4808      	ldr	r0, [pc, #32]	; (8007674 <USBD_LL_Init+0x94>)
 8007652:	f7fb ff88 	bl	8003566 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007656:	2240      	movs	r2, #64	; 0x40
 8007658:	2100      	movs	r1, #0
 800765a:	4806      	ldr	r0, [pc, #24]	; (8007674 <USBD_LL_Init+0x94>)
 800765c:	f7fb ff3c 	bl	80034d8 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007660:	2280      	movs	r2, #128	; 0x80
 8007662:	2101      	movs	r1, #1
 8007664:	4803      	ldr	r0, [pc, #12]	; (8007674 <USBD_LL_Init+0x94>)
 8007666:	f7fb ff37 	bl	80034d8 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 800766a:	2300      	movs	r3, #0
}
 800766c:	4618      	mov	r0, r3
 800766e:	3708      	adds	r7, #8
 8007670:	46bd      	mov	sp, r7
 8007672:	bd80      	pop	{r7, pc}
 8007674:	20000704 	.word	0x20000704

08007678 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007678:	b580      	push	{r7, lr}
 800767a:	b084      	sub	sp, #16
 800767c:	af00      	add	r7, sp, #0
 800767e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007680:	2300      	movs	r3, #0
 8007682:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007684:	2300      	movs	r3, #0
 8007686:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800768e:	4618      	mov	r0, r3
 8007690:	f7fa fe3e 	bl	8002310 <HAL_PCD_Start>
 8007694:	4603      	mov	r3, r0
 8007696:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007698:	7bfb      	ldrb	r3, [r7, #15]
 800769a:	4618      	mov	r0, r3
 800769c:	f000 f930 	bl	8007900 <USBD_Get_USB_Status>
 80076a0:	4603      	mov	r3, r0
 80076a2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076a4:	7bbb      	ldrb	r3, [r7, #14]
}
 80076a6:	4618      	mov	r0, r3
 80076a8:	3710      	adds	r7, #16
 80076aa:	46bd      	mov	sp, r7
 80076ac:	bd80      	pop	{r7, pc}

080076ae <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 80076ae:	b580      	push	{r7, lr}
 80076b0:	b084      	sub	sp, #16
 80076b2:	af00      	add	r7, sp, #0
 80076b4:	6078      	str	r0, [r7, #4]
 80076b6:	4608      	mov	r0, r1
 80076b8:	4611      	mov	r1, r2
 80076ba:	461a      	mov	r2, r3
 80076bc:	4603      	mov	r3, r0
 80076be:	70fb      	strb	r3, [r7, #3]
 80076c0:	460b      	mov	r3, r1
 80076c2:	70bb      	strb	r3, [r7, #2]
 80076c4:	4613      	mov	r3, r2
 80076c6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80076c8:	2300      	movs	r3, #0
 80076ca:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80076cc:	2300      	movs	r3, #0
 80076ce:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80076d6:	78bb      	ldrb	r3, [r7, #2]
 80076d8:	883a      	ldrh	r2, [r7, #0]
 80076da:	78f9      	ldrb	r1, [r7, #3]
 80076dc:	f7fb fb0f 	bl	8002cfe <HAL_PCD_EP_Open>
 80076e0:	4603      	mov	r3, r0
 80076e2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80076e4:	7bfb      	ldrb	r3, [r7, #15]
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 f90a 	bl	8007900 <USBD_Get_USB_Status>
 80076ec:	4603      	mov	r3, r0
 80076ee:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80076f0:	7bbb      	ldrb	r3, [r7, #14]
}
 80076f2:	4618      	mov	r0, r3
 80076f4:	3710      	adds	r7, #16
 80076f6:	46bd      	mov	sp, r7
 80076f8:	bd80      	pop	{r7, pc}

080076fa <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80076fa:	b580      	push	{r7, lr}
 80076fc:	b084      	sub	sp, #16
 80076fe:	af00      	add	r7, sp, #0
 8007700:	6078      	str	r0, [r7, #4]
 8007702:	460b      	mov	r3, r1
 8007704:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007706:	2300      	movs	r3, #0
 8007708:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800770a:	2300      	movs	r3, #0
 800770c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007714:	78fa      	ldrb	r2, [r7, #3]
 8007716:	4611      	mov	r1, r2
 8007718:	4618      	mov	r0, r3
 800771a:	f7fb fb58 	bl	8002dce <HAL_PCD_EP_Close>
 800771e:	4603      	mov	r3, r0
 8007720:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007722:	7bfb      	ldrb	r3, [r7, #15]
 8007724:	4618      	mov	r0, r3
 8007726:	f000 f8eb 	bl	8007900 <USBD_Get_USB_Status>
 800772a:	4603      	mov	r3, r0
 800772c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800772e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007730:	4618      	mov	r0, r3
 8007732:	3710      	adds	r7, #16
 8007734:	46bd      	mov	sp, r7
 8007736:	bd80      	pop	{r7, pc}

08007738 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007738:	b580      	push	{r7, lr}
 800773a:	b084      	sub	sp, #16
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007744:	2300      	movs	r3, #0
 8007746:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007748:	2300      	movs	r3, #0
 800774a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007752:	78fa      	ldrb	r2, [r7, #3]
 8007754:	4611      	mov	r1, r2
 8007756:	4618      	mov	r0, r3
 8007758:	f7fb fc18 	bl	8002f8c <HAL_PCD_EP_SetStall>
 800775c:	4603      	mov	r3, r0
 800775e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007760:	7bfb      	ldrb	r3, [r7, #15]
 8007762:	4618      	mov	r0, r3
 8007764:	f000 f8cc 	bl	8007900 <USBD_Get_USB_Status>
 8007768:	4603      	mov	r3, r0
 800776a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800776c:	7bbb      	ldrb	r3, [r7, #14]
}
 800776e:	4618      	mov	r0, r3
 8007770:	3710      	adds	r7, #16
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}

08007776 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007776:	b580      	push	{r7, lr}
 8007778:	b084      	sub	sp, #16
 800777a:	af00      	add	r7, sp, #0
 800777c:	6078      	str	r0, [r7, #4]
 800777e:	460b      	mov	r3, r1
 8007780:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007782:	2300      	movs	r3, #0
 8007784:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007786:	2300      	movs	r3, #0
 8007788:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007790:	78fa      	ldrb	r2, [r7, #3]
 8007792:	4611      	mov	r1, r2
 8007794:	4618      	mov	r0, r3
 8007796:	f7fb fc5d 	bl	8003054 <HAL_PCD_EP_ClrStall>
 800779a:	4603      	mov	r3, r0
 800779c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800779e:	7bfb      	ldrb	r3, [r7, #15]
 80077a0:	4618      	mov	r0, r3
 80077a2:	f000 f8ad 	bl	8007900 <USBD_Get_USB_Status>
 80077a6:	4603      	mov	r3, r0
 80077a8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80077aa:	7bbb      	ldrb	r3, [r7, #14]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	3710      	adds	r7, #16
 80077b0:	46bd      	mov	sp, r7
 80077b2:	bd80      	pop	{r7, pc}

080077b4 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80077b4:	b480      	push	{r7}
 80077b6:	b085      	sub	sp, #20
 80077b8:	af00      	add	r7, sp, #0
 80077ba:	6078      	str	r0, [r7, #4]
 80077bc:	460b      	mov	r3, r1
 80077be:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80077c6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80077c8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	da0b      	bge.n	80077e8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80077d0:	78fb      	ldrb	r3, [r7, #3]
 80077d2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077d6:	68f9      	ldr	r1, [r7, #12]
 80077d8:	4613      	mov	r3, r2
 80077da:	00db      	lsls	r3, r3, #3
 80077dc:	4413      	add	r3, r2
 80077de:	009b      	lsls	r3, r3, #2
 80077e0:	440b      	add	r3, r1
 80077e2:	333e      	adds	r3, #62	; 0x3e
 80077e4:	781b      	ldrb	r3, [r3, #0]
 80077e6:	e00b      	b.n	8007800 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80077e8:	78fb      	ldrb	r3, [r7, #3]
 80077ea:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80077ee:	68f9      	ldr	r1, [r7, #12]
 80077f0:	4613      	mov	r3, r2
 80077f2:	00db      	lsls	r3, r3, #3
 80077f4:	4413      	add	r3, r2
 80077f6:	009b      	lsls	r3, r3, #2
 80077f8:	440b      	add	r3, r1
 80077fa:	f203 237e 	addw	r3, r3, #638	; 0x27e
 80077fe:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007800:	4618      	mov	r0, r3
 8007802:	3714      	adds	r7, #20
 8007804:	46bd      	mov	sp, r7
 8007806:	f85d 7b04 	ldr.w	r7, [sp], #4
 800780a:	4770      	bx	lr

0800780c <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	b084      	sub	sp, #16
 8007810:	af00      	add	r7, sp, #0
 8007812:	6078      	str	r0, [r7, #4]
 8007814:	460b      	mov	r3, r1
 8007816:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007818:	2300      	movs	r3, #0
 800781a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800781c:	2300      	movs	r3, #0
 800781e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007826:	78fa      	ldrb	r2, [r7, #3]
 8007828:	4611      	mov	r1, r2
 800782a:	4618      	mov	r0, r3
 800782c:	f7fb fa42 	bl	8002cb4 <HAL_PCD_SetAddress>
 8007830:	4603      	mov	r3, r0
 8007832:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007834:	7bfb      	ldrb	r3, [r7, #15]
 8007836:	4618      	mov	r0, r3
 8007838:	f000 f862 	bl	8007900 <USBD_Get_USB_Status>
 800783c:	4603      	mov	r3, r0
 800783e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007840:	7bbb      	ldrb	r3, [r7, #14]
}
 8007842:	4618      	mov	r0, r3
 8007844:	3710      	adds	r7, #16
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b086      	sub	sp, #24
 800784e:	af00      	add	r7, sp, #0
 8007850:	60f8      	str	r0, [r7, #12]
 8007852:	607a      	str	r2, [r7, #4]
 8007854:	603b      	str	r3, [r7, #0]
 8007856:	460b      	mov	r3, r1
 8007858:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800785a:	2300      	movs	r3, #0
 800785c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800785e:	2300      	movs	r3, #0
 8007860:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007868:	7af9      	ldrb	r1, [r7, #11]
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	687a      	ldr	r2, [r7, #4]
 800786e:	f7fb fb43 	bl	8002ef8 <HAL_PCD_EP_Transmit>
 8007872:	4603      	mov	r3, r0
 8007874:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007876:	7dfb      	ldrb	r3, [r7, #23]
 8007878:	4618      	mov	r0, r3
 800787a:	f000 f841 	bl	8007900 <USBD_Get_USB_Status>
 800787e:	4603      	mov	r3, r0
 8007880:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007882:	7dbb      	ldrb	r3, [r7, #22]
}
 8007884:	4618      	mov	r0, r3
 8007886:	3718      	adds	r7, #24
 8007888:	46bd      	mov	sp, r7
 800788a:	bd80      	pop	{r7, pc}

0800788c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 800788c:	b580      	push	{r7, lr}
 800788e:	b086      	sub	sp, #24
 8007890:	af00      	add	r7, sp, #0
 8007892:	60f8      	str	r0, [r7, #12]
 8007894:	607a      	str	r2, [r7, #4]
 8007896:	603b      	str	r3, [r7, #0]
 8007898:	460b      	mov	r3, r1
 800789a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800789c:	2300      	movs	r3, #0
 800789e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80078a0:	2300      	movs	r3, #0
 80078a2:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 80078a4:	68fb      	ldr	r3, [r7, #12]
 80078a6:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80078aa:	7af9      	ldrb	r1, [r7, #11]
 80078ac:	683b      	ldr	r3, [r7, #0]
 80078ae:	687a      	ldr	r2, [r7, #4]
 80078b0:	f7fb fad7 	bl	8002e62 <HAL_PCD_EP_Receive>
 80078b4:	4603      	mov	r3, r0
 80078b6:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80078b8:	7dfb      	ldrb	r3, [r7, #23]
 80078ba:	4618      	mov	r0, r3
 80078bc:	f000 f820 	bl	8007900 <USBD_Get_USB_Status>
 80078c0:	4603      	mov	r3, r0
 80078c2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 80078c4:	7dbb      	ldrb	r3, [r7, #22]
}
 80078c6:	4618      	mov	r0, r3
 80078c8:	3718      	adds	r7, #24
 80078ca:	46bd      	mov	sp, r7
 80078cc:	bd80      	pop	{r7, pc}
	...

080078d0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 80078d0:	b480      	push	{r7}
 80078d2:	b083      	sub	sp, #12
 80078d4:	af00      	add	r7, sp, #0
 80078d6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 80078d8:	4b03      	ldr	r3, [pc, #12]	; (80078e8 <USBD_static_malloc+0x18>)
}
 80078da:	4618      	mov	r0, r3
 80078dc:	370c      	adds	r7, #12
 80078de:	46bd      	mov	sp, r7
 80078e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e4:	4770      	bx	lr
 80078e6:	bf00      	nop
 80078e8:	20000c10 	.word	0x20000c10

080078ec <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 80078ec:	b480      	push	{r7}
 80078ee:	b083      	sub	sp, #12
 80078f0:	af00      	add	r7, sp, #0
 80078f2:	6078      	str	r0, [r7, #4]

}
 80078f4:	bf00      	nop
 80078f6:	370c      	adds	r7, #12
 80078f8:	46bd      	mov	sp, r7
 80078fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078fe:	4770      	bx	lr

08007900 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007900:	b480      	push	{r7}
 8007902:	b085      	sub	sp, #20
 8007904:	af00      	add	r7, sp, #0
 8007906:	4603      	mov	r3, r0
 8007908:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800790a:	2300      	movs	r3, #0
 800790c:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800790e:	79fb      	ldrb	r3, [r7, #7]
 8007910:	2b03      	cmp	r3, #3
 8007912:	d817      	bhi.n	8007944 <USBD_Get_USB_Status+0x44>
 8007914:	a201      	add	r2, pc, #4	; (adr r2, 800791c <USBD_Get_USB_Status+0x1c>)
 8007916:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800791a:	bf00      	nop
 800791c:	0800792d 	.word	0x0800792d
 8007920:	08007933 	.word	0x08007933
 8007924:	08007939 	.word	0x08007939
 8007928:	0800793f 	.word	0x0800793f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 800792c:	2300      	movs	r3, #0
 800792e:	73fb      	strb	r3, [r7, #15]
    break;
 8007930:	e00b      	b.n	800794a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007932:	2303      	movs	r3, #3
 8007934:	73fb      	strb	r3, [r7, #15]
    break;
 8007936:	e008      	b.n	800794a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007938:	2301      	movs	r3, #1
 800793a:	73fb      	strb	r3, [r7, #15]
    break;
 800793c:	e005      	b.n	800794a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 800793e:	2303      	movs	r3, #3
 8007940:	73fb      	strb	r3, [r7, #15]
    break;
 8007942:	e002      	b.n	800794a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007944:	2303      	movs	r3, #3
 8007946:	73fb      	strb	r3, [r7, #15]
    break;
 8007948:	bf00      	nop
  }
  return usb_status;
 800794a:	7bfb      	ldrb	r3, [r7, #15]
}
 800794c:	4618      	mov	r0, r3
 800794e:	3714      	adds	r7, #20
 8007950:	46bd      	mov	sp, r7
 8007952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007956:	4770      	bx	lr

08007958 <__libc_init_array>:
 8007958:	b570      	push	{r4, r5, r6, lr}
 800795a:	4d0d      	ldr	r5, [pc, #52]	; (8007990 <__libc_init_array+0x38>)
 800795c:	4c0d      	ldr	r4, [pc, #52]	; (8007994 <__libc_init_array+0x3c>)
 800795e:	1b64      	subs	r4, r4, r5
 8007960:	10a4      	asrs	r4, r4, #2
 8007962:	2600      	movs	r6, #0
 8007964:	42a6      	cmp	r6, r4
 8007966:	d109      	bne.n	800797c <__libc_init_array+0x24>
 8007968:	4d0b      	ldr	r5, [pc, #44]	; (8007998 <__libc_init_array+0x40>)
 800796a:	4c0c      	ldr	r4, [pc, #48]	; (800799c <__libc_init_array+0x44>)
 800796c:	f000 f820 	bl	80079b0 <_init>
 8007970:	1b64      	subs	r4, r4, r5
 8007972:	10a4      	asrs	r4, r4, #2
 8007974:	2600      	movs	r6, #0
 8007976:	42a6      	cmp	r6, r4
 8007978:	d105      	bne.n	8007986 <__libc_init_array+0x2e>
 800797a:	bd70      	pop	{r4, r5, r6, pc}
 800797c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007980:	4798      	blx	r3
 8007982:	3601      	adds	r6, #1
 8007984:	e7ee      	b.n	8007964 <__libc_init_array+0xc>
 8007986:	f855 3b04 	ldr.w	r3, [r5], #4
 800798a:	4798      	blx	r3
 800798c:	3601      	adds	r6, #1
 800798e:	e7f2      	b.n	8007976 <__libc_init_array+0x1e>
 8007990:	08007a30 	.word	0x08007a30
 8007994:	08007a30 	.word	0x08007a30
 8007998:	08007a30 	.word	0x08007a30
 800799c:	08007a34 	.word	0x08007a34

080079a0 <memset>:
 80079a0:	4402      	add	r2, r0
 80079a2:	4603      	mov	r3, r0
 80079a4:	4293      	cmp	r3, r2
 80079a6:	d100      	bne.n	80079aa <memset+0xa>
 80079a8:	4770      	bx	lr
 80079aa:	f803 1b01 	strb.w	r1, [r3], #1
 80079ae:	e7f9      	b.n	80079a4 <memset+0x4>

080079b0 <_init>:
 80079b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079b2:	bf00      	nop
 80079b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079b6:	bc08      	pop	{r3}
 80079b8:	469e      	mov	lr, r3
 80079ba:	4770      	bx	lr

080079bc <_fini>:
 80079bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079be:	bf00      	nop
 80079c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80079c2:	bc08      	pop	{r3}
 80079c4:	469e      	mov	lr, r3
 80079c6:	4770      	bx	lr
