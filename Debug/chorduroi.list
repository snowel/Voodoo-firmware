
chorduroi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f1c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  080070b0  080070b0  000170b0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007108  08007108  00020150  2**0
                  CONTENTS
  4 .ARM          00000008  08007108  08007108  00017108  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007110  08007110  00020150  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007110  08007110  00017110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007114  08007114  00017114  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000150  20000000  08007118  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000ab0  20000150  08007268  00020150  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000c00  08007268  00020c00  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020150  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ecd4  00000000  00000000  00020180  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029d7  00000000  00000000  0002ee54  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c18  00000000  00000000  00031830  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ae0  00000000  00000000  00032448  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000191c5  00000000  00000000  00032f28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f7d4  00000000  00000000  0004c0ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009217a  00000000  00000000  0005b8c1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eda3b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003084  00000000  00000000  000eda8c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000150 	.word	0x20000150
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007098 	.word	0x08007098

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000154 	.word	0x20000154
 80001d0:	08007098 	.word	0x08007098

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <checkPins>:

//struggling with arryas of pins and ports, this is my cheesy solution

uint8_t pinStates[NUMBER_OF_KEYS];

void checkPins(void){
 80004d8:	b580      	push	{r7, lr}
 80004da:	af00      	add	r7, sp, #0
	pinStates[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 80004dc:	f44f 7100 	mov.w	r1, #512	; 0x200
 80004e0:	481c      	ldr	r0, [pc, #112]	; (8000554 <checkPins+0x7c>)
 80004e2:	f001 f93b 	bl	800175c <HAL_GPIO_ReadPin>
 80004e6:	4603      	mov	r3, r0
 80004e8:	461a      	mov	r2, r3
 80004ea:	4b1b      	ldr	r3, [pc, #108]	; (8000558 <checkPins+0x80>)
 80004ec:	701a      	strb	r2, [r3, #0]
	pinStates[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 80004ee:	f44f 7180 	mov.w	r1, #256	; 0x100
 80004f2:	4818      	ldr	r0, [pc, #96]	; (8000554 <checkPins+0x7c>)
 80004f4:	f001 f932 	bl	800175c <HAL_GPIO_ReadPin>
 80004f8:	4603      	mov	r3, r0
 80004fa:	461a      	mov	r2, r3
 80004fc:	4b16      	ldr	r3, [pc, #88]	; (8000558 <checkPins+0x80>)
 80004fe:	705a      	strb	r2, [r3, #1]
	pinStates[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8000500:	2180      	movs	r1, #128	; 0x80
 8000502:	4814      	ldr	r0, [pc, #80]	; (8000554 <checkPins+0x7c>)
 8000504:	f001 f92a 	bl	800175c <HAL_GPIO_ReadPin>
 8000508:	4603      	mov	r3, r0
 800050a:	461a      	mov	r2, r3
 800050c:	4b12      	ldr	r3, [pc, #72]	; (8000558 <checkPins+0x80>)
 800050e:	709a      	strb	r2, [r3, #2]
	pinStates[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8000510:	2140      	movs	r1, #64	; 0x40
 8000512:	4810      	ldr	r0, [pc, #64]	; (8000554 <checkPins+0x7c>)
 8000514:	f001 f922 	bl	800175c <HAL_GPIO_ReadPin>
 8000518:	4603      	mov	r3, r0
 800051a:	461a      	mov	r2, r3
 800051c:	4b0e      	ldr	r3, [pc, #56]	; (8000558 <checkPins+0x80>)
 800051e:	70da      	strb	r2, [r3, #3]
	pinStates[4] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000520:	2120      	movs	r1, #32
 8000522:	480c      	ldr	r0, [pc, #48]	; (8000554 <checkPins+0x7c>)
 8000524:	f001 f91a 	bl	800175c <HAL_GPIO_ReadPin>
 8000528:	4603      	mov	r3, r0
 800052a:	461a      	mov	r2, r3
 800052c:	4b0a      	ldr	r3, [pc, #40]	; (8000558 <checkPins+0x80>)
 800052e:	711a      	strb	r2, [r3, #4]
	pinStates[5] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000530:	2110      	movs	r1, #16
 8000532:	4808      	ldr	r0, [pc, #32]	; (8000554 <checkPins+0x7c>)
 8000534:	f001 f912 	bl	800175c <HAL_GPIO_ReadPin>
 8000538:	4603      	mov	r3, r0
 800053a:	461a      	mov	r2, r3
 800053c:	4b06      	ldr	r3, [pc, #24]	; (8000558 <checkPins+0x80>)
 800053e:	715a      	strb	r2, [r3, #5]
	pinStates[6] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_3);
 8000540:	2108      	movs	r1, #8
 8000542:	4804      	ldr	r0, [pc, #16]	; (8000554 <checkPins+0x7c>)
 8000544:	f001 f90a 	bl	800175c <HAL_GPIO_ReadPin>
 8000548:	4603      	mov	r3, r0
 800054a:	461a      	mov	r2, r3
 800054c:	4b02      	ldr	r3, [pc, #8]	; (8000558 <checkPins+0x80>)
 800054e:	719a      	strb	r2, [r3, #6]
}
 8000550:	bf00      	nop
 8000552:	bd80      	pop	{r7, pc}
 8000554:	40020400 	.word	0x40020400
 8000558:	20000170 	.word	0x20000170

0800055c <checkLayer>:
uint8_t* pKeyLayer;
int layerNum;



void checkLayer(void){// Will probbaly end up setting the pointers to the mod and layer here
 800055c:	b480      	push	{r7}
 800055e:	af00      	add	r7, sp, #0
	layerNum = 1;
 8000560:	4b06      	ldr	r3, [pc, #24]	; (800057c <checkLayer+0x20>)
 8000562:	2201      	movs	r2, #1
 8000564:	601a      	str	r2, [r3, #0]
	pModLayer = &modKeyLayer1[0];
 8000566:	4b06      	ldr	r3, [pc, #24]	; (8000580 <checkLayer+0x24>)
 8000568:	4a06      	ldr	r2, [pc, #24]	; (8000584 <checkLayer+0x28>)
 800056a:	601a      	str	r2, [r3, #0]
	pKeyLayer = &keyLayer1[0];
 800056c:	4b06      	ldr	r3, [pc, #24]	; (8000588 <checkLayer+0x2c>)
 800056e:	4a07      	ldr	r2, [pc, #28]	; (800058c <checkLayer+0x30>)
 8000570:	601a      	str	r2, [r3, #0]
}
 8000572:	bf00      	nop
 8000574:	46bd      	mov	sp, r7
 8000576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057a:	4770      	bx	lr
 800057c:	200001b0 	.word	0x200001b0
 8000580:	200001a8 	.word	0x200001a8
 8000584:	20000000 	.word	0x20000000
 8000588:	200001ac 	.word	0x200001ac
 800058c:	2000000c 	.word	0x2000000c

08000590 <setModByte>:
/*
void setModByte(uint8_t* code){
	HIDKeyboardReport[0] = HIDKeyboardReport[0] | *code;
}
*/
void setModByte(uint8_t* code){
 8000590:	b480      	push	{r7}
 8000592:	b083      	sub	sp, #12
 8000594:	af00      	add	r7, sp, #0
 8000596:	6078      	str	r0, [r7, #4]
	HIDKeyboardReport.MOD = HIDKeyboardReport.MOD | *code;
 8000598:	4b06      	ldr	r3, [pc, #24]	; (80005b4 <setModByte+0x24>)
 800059a:	781a      	ldrb	r2, [r3, #0]
 800059c:	687b      	ldr	r3, [r7, #4]
 800059e:	781b      	ldrb	r3, [r3, #0]
 80005a0:	4313      	orrs	r3, r2
 80005a2:	b2da      	uxtb	r2, r3
 80005a4:	4b03      	ldr	r3, [pc, #12]	; (80005b4 <setModByte+0x24>)
 80005a6:	701a      	strb	r2, [r3, #0]
}
 80005a8:	bf00      	nop
 80005aa:	370c      	adds	r7, #12
 80005ac:	46bd      	mov	sp, r7
 80005ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005b2:	4770      	bx	lr
 80005b4:	200001a0 	.word	0x200001a0

080005b8 <setKeyBytes>:
		}
	}
}
*/

void setKeyBytes(uint8_t* code){
 80005b8:	b480      	push	{r7}
 80005ba:	b083      	sub	sp, #12
 80005bc:	af00      	add	r7, sp, #0
 80005be:	6078      	str	r0, [r7, #4]
	if(HIDKeyboardReport.K1 == 0){
 80005c0:	4b1d      	ldr	r3, [pc, #116]	; (8000638 <setKeyBytes+0x80>)
 80005c2:	789b      	ldrb	r3, [r3, #2]
 80005c4:	2b00      	cmp	r3, #0
 80005c6:	d104      	bne.n	80005d2 <setKeyBytes+0x1a>
		HIDKeyboardReport.K1 = *code;
 80005c8:	687b      	ldr	r3, [r7, #4]
 80005ca:	781a      	ldrb	r2, [r3, #0]
 80005cc:	4b1a      	ldr	r3, [pc, #104]	; (8000638 <setKeyBytes+0x80>)
 80005ce:	709a      	strb	r2, [r3, #2]
	} else if(HIDKeyboardReport.K5 == 0){
		HIDKeyboardReport.K5 = *code;
	} else if(HIDKeyboardReport.K6 == 0){
		HIDKeyboardReport.K6 = *code;
	}
}
 80005d0:	e02b      	b.n	800062a <setKeyBytes+0x72>
	} else if(HIDKeyboardReport.K2 == 0){
 80005d2:	4b19      	ldr	r3, [pc, #100]	; (8000638 <setKeyBytes+0x80>)
 80005d4:	78db      	ldrb	r3, [r3, #3]
 80005d6:	2b00      	cmp	r3, #0
 80005d8:	d104      	bne.n	80005e4 <setKeyBytes+0x2c>
		HIDKeyboardReport.K2 = *code;
 80005da:	687b      	ldr	r3, [r7, #4]
 80005dc:	781a      	ldrb	r2, [r3, #0]
 80005de:	4b16      	ldr	r3, [pc, #88]	; (8000638 <setKeyBytes+0x80>)
 80005e0:	70da      	strb	r2, [r3, #3]
}
 80005e2:	e022      	b.n	800062a <setKeyBytes+0x72>
	} else if(HIDKeyboardReport.K3 == 0){
 80005e4:	4b14      	ldr	r3, [pc, #80]	; (8000638 <setKeyBytes+0x80>)
 80005e6:	791b      	ldrb	r3, [r3, #4]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d104      	bne.n	80005f6 <setKeyBytes+0x3e>
		HIDKeyboardReport.K3 = *code;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	781a      	ldrb	r2, [r3, #0]
 80005f0:	4b11      	ldr	r3, [pc, #68]	; (8000638 <setKeyBytes+0x80>)
 80005f2:	711a      	strb	r2, [r3, #4]
}
 80005f4:	e019      	b.n	800062a <setKeyBytes+0x72>
	} else if(HIDKeyboardReport.K4 == 0){
 80005f6:	4b10      	ldr	r3, [pc, #64]	; (8000638 <setKeyBytes+0x80>)
 80005f8:	795b      	ldrb	r3, [r3, #5]
 80005fa:	2b00      	cmp	r3, #0
 80005fc:	d104      	bne.n	8000608 <setKeyBytes+0x50>
		HIDKeyboardReport.K4 = *code;
 80005fe:	687b      	ldr	r3, [r7, #4]
 8000600:	781a      	ldrb	r2, [r3, #0]
 8000602:	4b0d      	ldr	r3, [pc, #52]	; (8000638 <setKeyBytes+0x80>)
 8000604:	715a      	strb	r2, [r3, #5]
}
 8000606:	e010      	b.n	800062a <setKeyBytes+0x72>
	} else if(HIDKeyboardReport.K5 == 0){
 8000608:	4b0b      	ldr	r3, [pc, #44]	; (8000638 <setKeyBytes+0x80>)
 800060a:	799b      	ldrb	r3, [r3, #6]
 800060c:	2b00      	cmp	r3, #0
 800060e:	d104      	bne.n	800061a <setKeyBytes+0x62>
		HIDKeyboardReport.K5 = *code;
 8000610:	687b      	ldr	r3, [r7, #4]
 8000612:	781a      	ldrb	r2, [r3, #0]
 8000614:	4b08      	ldr	r3, [pc, #32]	; (8000638 <setKeyBytes+0x80>)
 8000616:	719a      	strb	r2, [r3, #6]
}
 8000618:	e007      	b.n	800062a <setKeyBytes+0x72>
	} else if(HIDKeyboardReport.K6 == 0){
 800061a:	4b07      	ldr	r3, [pc, #28]	; (8000638 <setKeyBytes+0x80>)
 800061c:	79db      	ldrb	r3, [r3, #7]
 800061e:	2b00      	cmp	r3, #0
 8000620:	d103      	bne.n	800062a <setKeyBytes+0x72>
		HIDKeyboardReport.K6 = *code;
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	781a      	ldrb	r2, [r3, #0]
 8000626:	4b04      	ldr	r3, [pc, #16]	; (8000638 <setKeyBytes+0x80>)
 8000628:	71da      	strb	r2, [r3, #7]
}
 800062a:	bf00      	nop
 800062c:	370c      	adds	r7, #12
 800062e:	46bd      	mov	sp, r7
 8000630:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000634:	4770      	bx	lr
 8000636:	bf00      	nop
 8000638:	200001a0 	.word	0x200001a0

0800063c <setReport>:

void setReport(int keypress, uint8_t * modArray, uint8_t * keyArray){
 800063c:	b580      	push	{r7, lr}
 800063e:	b086      	sub	sp, #24
 8000640:	af00      	add	r7, sp, #0
 8000642:	60f8      	str	r0, [r7, #12]
 8000644:	60b9      	str	r1, [r7, #8]
 8000646:	607a      	str	r2, [r7, #4]
	uint8_t * modcode = modArray + keypress;
 8000648:	68fb      	ldr	r3, [r7, #12]
 800064a:	68ba      	ldr	r2, [r7, #8]
 800064c:	4413      	add	r3, r2
 800064e:	617b      	str	r3, [r7, #20]
	//	uint8_t * modcode = &modKeyLayer1[keypress];
	uint8_t * keycode = keyArray + keypress;
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	687a      	ldr	r2, [r7, #4]
 8000654:	4413      	add	r3, r2
 8000656:	613b      	str	r3, [r7, #16]
	//	uint8_t * keycode = &keyLayer1[keypress]; if only one layer, makes mores ense to by amature mind

	setKeyBytes(keycode);
 8000658:	6938      	ldr	r0, [r7, #16]
 800065a:	f7ff ffad 	bl	80005b8 <setKeyBytes>
	setModByte(modcode);
 800065e:	6978      	ldr	r0, [r7, #20]
 8000660:	f7ff ff96 	bl	8000590 <setModByte>
}
 8000664:	bf00      	nop
 8000666:	3718      	adds	r7, #24
 8000668:	46bd      	mov	sp, r7
 800066a:	bd80      	pop	{r7, pc}

0800066c <setHeld>:

void setHeld(int keypress, int layerNumber){
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
 8000674:	6039      	str	r1, [r7, #0]
	isHold[keypress] = layerNumber;
 8000676:	4905      	ldr	r1, [pc, #20]	; (800068c <setHeld+0x20>)
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	683a      	ldr	r2, [r7, #0]
 800067c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8000680:	bf00      	nop
 8000682:	370c      	adds	r7, #12
 8000684:	46bd      	mov	sp, r7
 8000686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800068a:	4770      	bx	lr
 800068c:	20000178 	.word	0x20000178

08000690 <setHeldReport>:

void setHeldReport(int keypress){
 8000690:	b580      	push	{r7, lr}
 8000692:	b088      	sub	sp, #32
 8000694:	af00      	add	r7, sp, #0
 8000696:	6078      	str	r0, [r7, #4]
	int holdLayer = isHold[keypress];//if isHold[0] then the key is not held, else it's the numebr of the layer it was pressed down in
 8000698:	4a0f      	ldr	r2, [pc, #60]	; (80006d8 <setHeldReport+0x48>)
 800069a:	687b      	ldr	r3, [r7, #4]
 800069c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006a0:	61fb      	str	r3, [r7, #28]

//	uint8_t ** relLayer = layers[layerRef];
//	uint8_t * relMods = *relLayer;
//	uint8_t * relKeys = *relLayer + 1;

	int modArrayIndex = (holdLayer * 2) - 2;
 80006a2:	69fb      	ldr	r3, [r7, #28]
 80006a4:	3b01      	subs	r3, #1
 80006a6:	005b      	lsls	r3, r3, #1
 80006a8:	61bb      	str	r3, [r7, #24]
	int keyArrayIndex = (holdLayer * 2) -1;
 80006aa:	69fb      	ldr	r3, [r7, #28]
 80006ac:	005b      	lsls	r3, r3, #1
 80006ae:	3b01      	subs	r3, #1
 80006b0:	617b      	str	r3, [r7, #20]

	uint8_t * relMods = testLayerRef[modArrayIndex];
 80006b2:	4a0a      	ldr	r2, [pc, #40]	; (80006dc <setHeldReport+0x4c>)
 80006b4:	69bb      	ldr	r3, [r7, #24]
 80006b6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006ba:	613b      	str	r3, [r7, #16]
	uint8_t * relKeys = testLayerRef[keyArrayIndex];
 80006bc:	4a07      	ldr	r2, [pc, #28]	; (80006dc <setHeldReport+0x4c>)
 80006be:	697b      	ldr	r3, [r7, #20]
 80006c0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80006c4:	60fb      	str	r3, [r7, #12]


	setReport(keypress, relMods, relKeys);
 80006c6:	68fa      	ldr	r2, [r7, #12]
 80006c8:	6939      	ldr	r1, [r7, #16]
 80006ca:	6878      	ldr	r0, [r7, #4]
 80006cc:	f7ff ffb6 	bl	800063c <setReport>

}
 80006d0:	bf00      	nop
 80006d2:	3720      	adds	r7, #32
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000178 	.word	0x20000178
 80006dc:	20000030 	.word	0x20000030

080006e0 <scanKeys>:

void scanKeys(){
 80006e0:	b580      	push	{r7, lr}
 80006e2:	af00      	add	r7, sp, #0
	for(i = 0; i < NUMBER_OF_KEYS; i++){
 80006e4:	4b1d      	ldr	r3, [pc, #116]	; (800075c <scanKeys+0x7c>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	601a      	str	r2, [r3, #0]
 80006ea:	e02f      	b.n	800074c <scanKeys+0x6c>
		//Origiina if condiditoin was: GPIO_PIN_RESET == HAL_GPIO_ReadPin(keyPorts[i]/, keyPins[i])
		if(pinStates[i] == 0){
 80006ec:	4b1b      	ldr	r3, [pc, #108]	; (800075c <scanKeys+0x7c>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	4a1b      	ldr	r2, [pc, #108]	; (8000760 <scanKeys+0x80>)
 80006f2:	5cd3      	ldrb	r3, [r2, r3]
 80006f4:	2b00      	cmp	r3, #0
 80006f6:	d11e      	bne.n	8000736 <scanKeys+0x56>
			switch(isHold[i]){
 80006f8:	4b18      	ldr	r3, [pc, #96]	; (800075c <scanKeys+0x7c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a19      	ldr	r2, [pc, #100]	; (8000764 <scanKeys+0x84>)
 80006fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000702:	2b00      	cmp	r3, #0
 8000704:	d111      	bne.n	800072a <scanKeys+0x4a>
			case 0: setReport(i, pModLayer, pKeyLayer);
 8000706:	4b15      	ldr	r3, [pc, #84]	; (800075c <scanKeys+0x7c>)
 8000708:	681b      	ldr	r3, [r3, #0]
 800070a:	4a17      	ldr	r2, [pc, #92]	; (8000768 <scanKeys+0x88>)
 800070c:	6811      	ldr	r1, [r2, #0]
 800070e:	4a17      	ldr	r2, [pc, #92]	; (800076c <scanKeys+0x8c>)
 8000710:	6812      	ldr	r2, [r2, #0]
 8000712:	4618      	mov	r0, r3
 8000714:	f7ff ff92 	bl	800063c <setReport>
					setHeld(i, layerNum);//TODO  LayerNum in layer check funct
 8000718:	4b10      	ldr	r3, [pc, #64]	; (800075c <scanKeys+0x7c>)
 800071a:	681b      	ldr	r3, [r3, #0]
 800071c:	4a14      	ldr	r2, [pc, #80]	; (8000770 <scanKeys+0x90>)
 800071e:	6812      	ldr	r2, [r2, #0]
 8000720:	4611      	mov	r1, r2
 8000722:	4618      	mov	r0, r3
 8000724:	f7ff ffa2 	bl	800066c <setHeld>
				break;
 8000728:	e00b      	b.n	8000742 <scanKeys+0x62>
			default: setHeldReport(i);
 800072a:	4b0c      	ldr	r3, [pc, #48]	; (800075c <scanKeys+0x7c>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	4618      	mov	r0, r3
 8000730:	f7ff ffae 	bl	8000690 <setHeldReport>
				break;
 8000734:	e005      	b.n	8000742 <scanKeys+0x62>
			}

		} else {// add a check? else if (isHold[1] != 0)?? not sure what's best practice
			setHeld(i, 0);
 8000736:	4b09      	ldr	r3, [pc, #36]	; (800075c <scanKeys+0x7c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	2100      	movs	r1, #0
 800073c:	4618      	mov	r0, r3
 800073e:	f7ff ff95 	bl	800066c <setHeld>
	for(i = 0; i < NUMBER_OF_KEYS; i++){
 8000742:	4b06      	ldr	r3, [pc, #24]	; (800075c <scanKeys+0x7c>)
 8000744:	681b      	ldr	r3, [r3, #0]
 8000746:	3301      	adds	r3, #1
 8000748:	4a04      	ldr	r2, [pc, #16]	; (800075c <scanKeys+0x7c>)
 800074a:	6013      	str	r3, [r2, #0]
 800074c:	4b03      	ldr	r3, [pc, #12]	; (800075c <scanKeys+0x7c>)
 800074e:	681b      	ldr	r3, [r3, #0]
 8000750:	2b06      	cmp	r3, #6
 8000752:	ddcb      	ble.n	80006ec <scanKeys+0xc>
		}
	}
}
 8000754:	bf00      	nop
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	2000016c 	.word	0x2000016c
 8000760:	20000170 	.word	0x20000170
 8000764:	20000178 	.word	0x20000178
 8000768:	200001a8 	.word	0x200001a8
 800076c:	200001ac 	.word	0x200001ac
 8000770:	200001b0 	.word	0x200001b0

08000774 <clearReport>:

void clearReport(void){
 8000774:	b480      	push	{r7}
 8000776:	af00      	add	r7, sp, #0
	HIDKeyboardReport.MOD = 0;
 8000778:	4b0c      	ldr	r3, [pc, #48]	; (80007ac <clearReport+0x38>)
 800077a:	2200      	movs	r2, #0
 800077c:	701a      	strb	r2, [r3, #0]
	HIDKeyboardReport.K1 = 0;
 800077e:	4b0b      	ldr	r3, [pc, #44]	; (80007ac <clearReport+0x38>)
 8000780:	2200      	movs	r2, #0
 8000782:	709a      	strb	r2, [r3, #2]
	HIDKeyboardReport.K2 = 0;
 8000784:	4b09      	ldr	r3, [pc, #36]	; (80007ac <clearReport+0x38>)
 8000786:	2200      	movs	r2, #0
 8000788:	70da      	strb	r2, [r3, #3]
	HIDKeyboardReport.K3 = 0;
 800078a:	4b08      	ldr	r3, [pc, #32]	; (80007ac <clearReport+0x38>)
 800078c:	2200      	movs	r2, #0
 800078e:	711a      	strb	r2, [r3, #4]
	HIDKeyboardReport.K4 = 0;
 8000790:	4b06      	ldr	r3, [pc, #24]	; (80007ac <clearReport+0x38>)
 8000792:	2200      	movs	r2, #0
 8000794:	715a      	strb	r2, [r3, #5]
	HIDKeyboardReport.K5 = 0;
 8000796:	4b05      	ldr	r3, [pc, #20]	; (80007ac <clearReport+0x38>)
 8000798:	2200      	movs	r2, #0
 800079a:	719a      	strb	r2, [r3, #6]
	HIDKeyboardReport.K6 = 0;
 800079c:	4b03      	ldr	r3, [pc, #12]	; (80007ac <clearReport+0x38>)
 800079e:	2200      	movs	r2, #0
 80007a0:	71da      	strb	r2, [r3, #7]
}
 80007a2:	bf00      	nop
 80007a4:	46bd      	mov	sp, r7
 80007a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80007aa:	4770      	bx	lr
 80007ac:	200001a0 	.word	0x200001a0

080007b0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007b0:	b580      	push	{r7, lr}
 80007b2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007b4:	f000 fa44 	bl	8000c40 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007b8:	f000 f818 	bl	80007ec <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007bc:	f000 f8d2 	bl	8000964 <MX_GPIO_Init>
  MX_ADC1_Init();
 80007c0:	f000 f87e 	bl	80008c0 <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 80007c4:	f006 f80e 	bl	80067e4 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  checkLayer();
 80007c8:	f7ff fec8 	bl	800055c <checkLayer>
	  checkPins();
 80007cc:	f7ff fe84 	bl	80004d8 <checkPins>
	  scanKeys();
 80007d0:	f7ff ff86 	bl	80006e0 <scanKeys>
	  		} else{
				setHeld(1, 0);
			}

*/
	  USBD_HID_SendReport(&hUsbDeviceFS, &HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80007d4:	2208      	movs	r2, #8
 80007d6:	4903      	ldr	r1, [pc, #12]	; (80007e4 <main+0x34>)
 80007d8:	4803      	ldr	r0, [pc, #12]	; (80007e8 <main+0x38>)
 80007da:	f004 fc89 	bl	80050f0 <USBD_HID_SendReport>
  	  clearReport();
 80007de:	f7ff ffc9 	bl	8000774 <clearReport>
	  checkLayer();
 80007e2:	e7f1      	b.n	80007c8 <main+0x18>
 80007e4:	200001a0 	.word	0x200001a0
 80007e8:	20000204 	.word	0x20000204

080007ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b094      	sub	sp, #80	; 0x50
 80007f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007f2:	f107 0320 	add.w	r3, r7, #32
 80007f6:	2230      	movs	r2, #48	; 0x30
 80007f8:	2100      	movs	r1, #0
 80007fa:	4618      	mov	r0, r3
 80007fc:	f006 fc44 	bl	8007088 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000800:	f107 030c 	add.w	r3, r7, #12
 8000804:	2200      	movs	r2, #0
 8000806:	601a      	str	r2, [r3, #0]
 8000808:	605a      	str	r2, [r3, #4]
 800080a:	609a      	str	r2, [r3, #8]
 800080c:	60da      	str	r2, [r3, #12]
 800080e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000810:	2300      	movs	r3, #0
 8000812:	60bb      	str	r3, [r7, #8]
 8000814:	4b28      	ldr	r3, [pc, #160]	; (80008b8 <SystemClock_Config+0xcc>)
 8000816:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000818:	4a27      	ldr	r2, [pc, #156]	; (80008b8 <SystemClock_Config+0xcc>)
 800081a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800081e:	6413      	str	r3, [r2, #64]	; 0x40
 8000820:	4b25      	ldr	r3, [pc, #148]	; (80008b8 <SystemClock_Config+0xcc>)
 8000822:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000824:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000828:	60bb      	str	r3, [r7, #8]
 800082a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 800082c:	2300      	movs	r3, #0
 800082e:	607b      	str	r3, [r7, #4]
 8000830:	4b22      	ldr	r3, [pc, #136]	; (80008bc <SystemClock_Config+0xd0>)
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000838:	4a20      	ldr	r2, [pc, #128]	; (80008bc <SystemClock_Config+0xd0>)
 800083a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800083e:	6013      	str	r3, [r2, #0]
 8000840:	4b1e      	ldr	r3, [pc, #120]	; (80008bc <SystemClock_Config+0xd0>)
 8000842:	681b      	ldr	r3, [r3, #0]
 8000844:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000848:	607b      	str	r3, [r7, #4]
 800084a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800084c:	2301      	movs	r3, #1
 800084e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000850:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000854:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000856:	2302      	movs	r3, #2
 8000858:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800085a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800085e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000860:	230f      	movs	r3, #15
 8000862:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000864:	2390      	movs	r3, #144	; 0x90
 8000866:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000868:	2302      	movs	r3, #2
 800086a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 800086c:	2305      	movs	r3, #5
 800086e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000870:	f107 0320 	add.w	r3, r7, #32
 8000874:	4618      	mov	r0, r3
 8000876:	f002 fa07 	bl	8002c88 <HAL_RCC_OscConfig>
 800087a:	4603      	mov	r3, r0
 800087c:	2b00      	cmp	r3, #0
 800087e:	d001      	beq.n	8000884 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000880:	f000 f8fc 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000884:	230f      	movs	r3, #15
 8000886:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000888:	2301      	movs	r3, #1
 800088a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800088c:	2300      	movs	r3, #0
 800088e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000890:	2300      	movs	r3, #0
 8000892:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000894:	2300      	movs	r3, #0
 8000896:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000898:	f107 030c 	add.w	r3, r7, #12
 800089c:	2100      	movs	r1, #0
 800089e:	4618      	mov	r0, r3
 80008a0:	f002 fc6a 	bl	8003178 <HAL_RCC_ClockConfig>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <SystemClock_Config+0xc2>
  {
    Error_Handler();
 80008aa:	f000 f8e7 	bl	8000a7c <Error_Handler>
  }
}
 80008ae:	bf00      	nop
 80008b0:	3750      	adds	r7, #80	; 0x50
 80008b2:	46bd      	mov	sp, r7
 80008b4:	bd80      	pop	{r7, pc}
 80008b6:	bf00      	nop
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40007000 	.word	0x40007000

080008c0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80008c0:	b580      	push	{r7, lr}
 80008c2:	b084      	sub	sp, #16
 80008c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80008c6:	463b      	mov	r3, r7
 80008c8:	2200      	movs	r2, #0
 80008ca:	601a      	str	r2, [r3, #0]
 80008cc:	605a      	str	r2, [r3, #4]
 80008ce:	609a      	str	r2, [r3, #8]
 80008d0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008d2:	4b21      	ldr	r3, [pc, #132]	; (8000958 <MX_ADC1_Init+0x98>)
 80008d4:	4a21      	ldr	r2, [pc, #132]	; (800095c <MX_ADC1_Init+0x9c>)
 80008d6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008d8:	4b1f      	ldr	r3, [pc, #124]	; (8000958 <MX_ADC1_Init+0x98>)
 80008da:	2200      	movs	r2, #0
 80008dc:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008de:	4b1e      	ldr	r3, [pc, #120]	; (8000958 <MX_ADC1_Init+0x98>)
 80008e0:	2200      	movs	r2, #0
 80008e2:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80008e4:	4b1c      	ldr	r3, [pc, #112]	; (8000958 <MX_ADC1_Init+0x98>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008ea:	4b1b      	ldr	r3, [pc, #108]	; (8000958 <MX_ADC1_Init+0x98>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008f0:	4b19      	ldr	r3, [pc, #100]	; (8000958 <MX_ADC1_Init+0x98>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f8:	4b17      	ldr	r3, [pc, #92]	; (8000958 <MX_ADC1_Init+0x98>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008fe:	4b16      	ldr	r3, [pc, #88]	; (8000958 <MX_ADC1_Init+0x98>)
 8000900:	4a17      	ldr	r2, [pc, #92]	; (8000960 <MX_ADC1_Init+0xa0>)
 8000902:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000904:	4b14      	ldr	r3, [pc, #80]	; (8000958 <MX_ADC1_Init+0x98>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800090a:	4b13      	ldr	r3, [pc, #76]	; (8000958 <MX_ADC1_Init+0x98>)
 800090c:	2201      	movs	r2, #1
 800090e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000910:	4b11      	ldr	r3, [pc, #68]	; (8000958 <MX_ADC1_Init+0x98>)
 8000912:	2200      	movs	r2, #0
 8000914:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000918:	4b0f      	ldr	r3, [pc, #60]	; (8000958 <MX_ADC1_Init+0x98>)
 800091a:	2201      	movs	r2, #1
 800091c:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800091e:	480e      	ldr	r0, [pc, #56]	; (8000958 <MX_ADC1_Init+0x98>)
 8000920:	f000 fa24 	bl	8000d6c <HAL_ADC_Init>
 8000924:	4603      	mov	r3, r0
 8000926:	2b00      	cmp	r3, #0
 8000928:	d001      	beq.n	800092e <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800092a:	f000 f8a7 	bl	8000a7c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800092e:	2302      	movs	r3, #2
 8000930:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000932:	2301      	movs	r3, #1
 8000934:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000936:	2300      	movs	r3, #0
 8000938:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800093a:	463b      	mov	r3, r7
 800093c:	4619      	mov	r1, r3
 800093e:	4806      	ldr	r0, [pc, #24]	; (8000958 <MX_ADC1_Init+0x98>)
 8000940:	f000 fa58 	bl	8000df4 <HAL_ADC_ConfigChannel>
 8000944:	4603      	mov	r3, r0
 8000946:	2b00      	cmp	r3, #0
 8000948:	d001      	beq.n	800094e <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800094a:	f000 f897 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800094e:	bf00      	nop
 8000950:	3710      	adds	r7, #16
 8000952:	46bd      	mov	sp, r7
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	200001b4 	.word	0x200001b4
 800095c:	40012000 	.word	0x40012000
 8000960:	0f000001 	.word	0x0f000001

08000964 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b08a      	sub	sp, #40	; 0x28
 8000968:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800096a:	f107 0314 	add.w	r3, r7, #20
 800096e:	2200      	movs	r2, #0
 8000970:	601a      	str	r2, [r3, #0]
 8000972:	605a      	str	r2, [r3, #4]
 8000974:	609a      	str	r2, [r3, #8]
 8000976:	60da      	str	r2, [r3, #12]
 8000978:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800097a:	2300      	movs	r3, #0
 800097c:	613b      	str	r3, [r7, #16]
 800097e:	4b3b      	ldr	r3, [pc, #236]	; (8000a6c <MX_GPIO_Init+0x108>)
 8000980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000982:	4a3a      	ldr	r2, [pc, #232]	; (8000a6c <MX_GPIO_Init+0x108>)
 8000984:	f043 0304 	orr.w	r3, r3, #4
 8000988:	6313      	str	r3, [r2, #48]	; 0x30
 800098a:	4b38      	ldr	r3, [pc, #224]	; (8000a6c <MX_GPIO_Init+0x108>)
 800098c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800098e:	f003 0304 	and.w	r3, r3, #4
 8000992:	613b      	str	r3, [r7, #16]
 8000994:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
 800099a:	4b34      	ldr	r3, [pc, #208]	; (8000a6c <MX_GPIO_Init+0x108>)
 800099c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800099e:	4a33      	ldr	r2, [pc, #204]	; (8000a6c <MX_GPIO_Init+0x108>)
 80009a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80009a4:	6313      	str	r3, [r2, #48]	; 0x30
 80009a6:	4b31      	ldr	r3, [pc, #196]	; (8000a6c <MX_GPIO_Init+0x108>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80009ae:	60fb      	str	r3, [r7, #12]
 80009b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009b2:	2300      	movs	r3, #0
 80009b4:	60bb      	str	r3, [r7, #8]
 80009b6:	4b2d      	ldr	r3, [pc, #180]	; (8000a6c <MX_GPIO_Init+0x108>)
 80009b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ba:	4a2c      	ldr	r2, [pc, #176]	; (8000a6c <MX_GPIO_Init+0x108>)
 80009bc:	f043 0301 	orr.w	r3, r3, #1
 80009c0:	6313      	str	r3, [r2, #48]	; 0x30
 80009c2:	4b2a      	ldr	r3, [pc, #168]	; (8000a6c <MX_GPIO_Init+0x108>)
 80009c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c6:	f003 0301 	and.w	r3, r3, #1
 80009ca:	60bb      	str	r3, [r7, #8]
 80009cc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009ce:	2300      	movs	r3, #0
 80009d0:	607b      	str	r3, [r7, #4]
 80009d2:	4b26      	ldr	r3, [pc, #152]	; (8000a6c <MX_GPIO_Init+0x108>)
 80009d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009d6:	4a25      	ldr	r2, [pc, #148]	; (8000a6c <MX_GPIO_Init+0x108>)
 80009d8:	f043 0302 	orr.w	r3, r3, #2
 80009dc:	6313      	str	r3, [r2, #48]	; 0x30
 80009de:	4b23      	ldr	r3, [pc, #140]	; (8000a6c <MX_GPIO_Init+0x108>)
 80009e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009e2:	f003 0302 	and.w	r3, r3, #2
 80009e6:	607b      	str	r3, [r7, #4]
 80009e8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 80009ea:	2200      	movs	r2, #0
 80009ec:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80009f0:	481f      	ldr	r0, [pc, #124]	; (8000a70 <MX_GPIO_Init+0x10c>)
 80009f2:	f000 fecb 	bl	800178c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80009f6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009fa:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fc:	2301      	movs	r3, #1
 80009fe:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a08:	f107 0314 	add.w	r3, r7, #20
 8000a0c:	4619      	mov	r1, r3
 8000a0e:	4818      	ldr	r0, [pc, #96]	; (8000a70 <MX_GPIO_Init+0x10c>)
 8000a10:	f000 fd20 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_T_key_Pin R_T_key_Pin R_I_Pin L_r_Pin
                           L_m_Pin */
  GPIO_InitStruct.Pin = L_T_key_Pin|R_T_key_Pin|R_I_Pin|L_r_Pin
 8000a14:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 8000a18:	617b      	str	r3, [r7, #20]
                          |L_m_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a22:	f107 0314 	add.w	r3, r7, #20
 8000a26:	4619      	mov	r1, r3
 8000a28:	4812      	ldr	r0, [pc, #72]	; (8000a74 <MX_GPIO_Init+0x110>)
 8000a2a:	f000 fd13 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_M_Pin R_R_Pin R_P_Pin L_i_Pin
                           L_p_Pin */
  GPIO_InitStruct.Pin = R_M_Pin|R_R_Pin|R_P_Pin|L_i_Pin
 8000a2e:	f248 4307 	movw	r3, #33799	; 0x8407
 8000a32:	617b      	str	r3, [r7, #20]
                          |L_p_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000a38:	2302      	movs	r3, #2
 8000a3a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 0314 	add.w	r3, r7, #20
 8000a40:	4619      	mov	r1, r3
 8000a42:	480d      	ldr	r0, [pc, #52]	; (8000a78 <MX_GPIO_Init+0x114>)
 8000a44:	f000 fd06 	bl	8001454 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 8000a48:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 8000a4c:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a4e:	2300      	movs	r3, #0
 8000a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a52:	2301      	movs	r3, #1
 8000a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a56:	f107 0314 	add.w	r3, r7, #20
 8000a5a:	4619      	mov	r1, r3
 8000a5c:	4806      	ldr	r0, [pc, #24]	; (8000a78 <MX_GPIO_Init+0x114>)
 8000a5e:	f000 fcf9 	bl	8001454 <HAL_GPIO_Init>

}
 8000a62:	bf00      	nop
 8000a64:	3728      	adds	r7, #40	; 0x28
 8000a66:	46bd      	mov	sp, r7
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020800 	.word	0x40020800
 8000a74:	40020000 	.word	0x40020000
 8000a78:	40020400 	.word	0x40020400

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b480      	push	{r7}
 8000a8a:	b083      	sub	sp, #12
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000ac6:	bf00      	nop
 8000ac8:	370c      	adds	r7, #12
 8000aca:	46bd      	mov	sp, r7
 8000acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad0:	4770      	bx	lr
 8000ad2:	bf00      	nop
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a17      	ldr	r2, [pc, #92]	; (8000b54 <HAL_ADC_MspInit+0x7c>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d127      	bne.n	8000b4a <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b16      	ldr	r3, [pc, #88]	; (8000b58 <HAL_ADC_MspInit+0x80>)
 8000b00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b02:	4a15      	ldr	r2, [pc, #84]	; (8000b58 <HAL_ADC_MspInit+0x80>)
 8000b04:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000b08:	6453      	str	r3, [r2, #68]	; 0x44
 8000b0a:	4b13      	ldr	r3, [pc, #76]	; (8000b58 <HAL_ADC_MspInit+0x80>)
 8000b0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b0e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b16:	2300      	movs	r3, #0
 8000b18:	60fb      	str	r3, [r7, #12]
 8000b1a:	4b0f      	ldr	r3, [pc, #60]	; (8000b58 <HAL_ADC_MspInit+0x80>)
 8000b1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b1e:	4a0e      	ldr	r2, [pc, #56]	; (8000b58 <HAL_ADC_MspInit+0x80>)
 8000b20:	f043 0301 	orr.w	r3, r3, #1
 8000b24:	6313      	str	r3, [r2, #48]	; 0x30
 8000b26:	4b0c      	ldr	r3, [pc, #48]	; (8000b58 <HAL_ADC_MspInit+0x80>)
 8000b28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b2a:	f003 0301 	and.w	r3, r3, #1
 8000b2e:	60fb      	str	r3, [r7, #12]
 8000b30:	68fb      	ldr	r3, [r7, #12]
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = TR_UP_Pin|RT_LR_Pin|LT_LR_Pin|LT_UD_Pin;
 8000b32:	231e      	movs	r3, #30
 8000b34:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b36:	2303      	movs	r3, #3
 8000b38:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3a:	2300      	movs	r3, #0
 8000b3c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b3e:	f107 0314 	add.w	r3, r7, #20
 8000b42:	4619      	mov	r1, r3
 8000b44:	4805      	ldr	r0, [pc, #20]	; (8000b5c <HAL_ADC_MspInit+0x84>)
 8000b46:	f000 fc85 	bl	8001454 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b4a:	bf00      	nop
 8000b4c:	3728      	adds	r7, #40	; 0x28
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	bd80      	pop	{r7, pc}
 8000b52:	bf00      	nop
 8000b54:	40012000 	.word	0x40012000
 8000b58:	40023800 	.word	0x40023800
 8000b5c:	40020000 	.word	0x40020000

08000b60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b64:	e7fe      	b.n	8000b64 <NMI_Handler+0x4>

08000b66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b66:	b480      	push	{r7}
 8000b68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b6a:	e7fe      	b.n	8000b6a <HardFault_Handler+0x4>

08000b6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b6c:	b480      	push	{r7}
 8000b6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b70:	e7fe      	b.n	8000b70 <MemManage_Handler+0x4>

08000b72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b72:	b480      	push	{r7}
 8000b74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b76:	e7fe      	b.n	8000b76 <BusFault_Handler+0x4>

08000b78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b78:	b480      	push	{r7}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b7c:	e7fe      	b.n	8000b7c <UsageFault_Handler+0x4>

08000b7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b7e:	b480      	push	{r7}
 8000b80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b82:	bf00      	nop
 8000b84:	46bd      	mov	sp, r7
 8000b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b8a:	4770      	bx	lr

08000b8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b8c:	b480      	push	{r7}
 8000b8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b90:	bf00      	nop
 8000b92:	46bd      	mov	sp, r7
 8000b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b98:	4770      	bx	lr

08000b9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b9a:	b480      	push	{r7}
 8000b9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b9e:	bf00      	nop
 8000ba0:	46bd      	mov	sp, r7
 8000ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba6:	4770      	bx	lr

08000ba8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000bac:	f000 f89a 	bl	8000ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000bb0:	bf00      	nop
 8000bb2:	bd80      	pop	{r7, pc}

08000bb4 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000bb8:	4802      	ldr	r0, [pc, #8]	; (8000bc4 <OTG_FS_IRQHandler+0x10>)
 8000bba:	f000 ff50 	bl	8001a5e <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000bbe:	bf00      	nop
 8000bc0:	bd80      	pop	{r7, pc}
 8000bc2:	bf00      	nop
 8000bc4:	200006e0 	.word	0x200006e0

08000bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000bc8:	b480      	push	{r7}
 8000bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000bcc:	4b06      	ldr	r3, [pc, #24]	; (8000be8 <SystemInit+0x20>)
 8000bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000bd2:	4a05      	ldr	r2, [pc, #20]	; (8000be8 <SystemInit+0x20>)
 8000bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bdc:	bf00      	nop
 8000bde:	46bd      	mov	sp, r7
 8000be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be4:	4770      	bx	lr
 8000be6:	bf00      	nop
 8000be8:	e000ed00 	.word	0xe000ed00

08000bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000c24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bf0:	480d      	ldr	r0, [pc, #52]	; (8000c28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bf2:	490e      	ldr	r1, [pc, #56]	; (8000c2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bf4:	4a0e      	ldr	r2, [pc, #56]	; (8000c30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bf8:	e002      	b.n	8000c00 <LoopCopyDataInit>

08000bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bfe:	3304      	adds	r3, #4

08000c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000c04:	d3f9      	bcc.n	8000bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000c06:	4a0b      	ldr	r2, [pc, #44]	; (8000c34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000c08:	4c0b      	ldr	r4, [pc, #44]	; (8000c38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000c0c:	e001      	b.n	8000c12 <LoopFillZerobss>

08000c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000c10:	3204      	adds	r2, #4

08000c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000c14:	d3fb      	bcc.n	8000c0e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000c16:	f7ff ffd7 	bl	8000bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000c1a:	f006 fa11 	bl	8007040 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000c1e:	f7ff fdc7 	bl	80007b0 <main>
  bx  lr    
 8000c22:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000c24:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000c2c:	20000150 	.word	0x20000150
  ldr r2, =_sidata
 8000c30:	08007118 	.word	0x08007118
  ldr r2, =_sbss
 8000c34:	20000150 	.word	0x20000150
  ldr r4, =_ebss
 8000c38:	20000c00 	.word	0x20000c00

08000c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c3c:	e7fe      	b.n	8000c3c <ADC_IRQHandler>
	...

08000c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c44:	4b0e      	ldr	r3, [pc, #56]	; (8000c80 <HAL_Init+0x40>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a0d      	ldr	r2, [pc, #52]	; (8000c80 <HAL_Init+0x40>)
 8000c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c50:	4b0b      	ldr	r3, [pc, #44]	; (8000c80 <HAL_Init+0x40>)
 8000c52:	681b      	ldr	r3, [r3, #0]
 8000c54:	4a0a      	ldr	r2, [pc, #40]	; (8000c80 <HAL_Init+0x40>)
 8000c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c5c:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <HAL_Init+0x40>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <HAL_Init+0x40>)
 8000c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c68:	2003      	movs	r0, #3
 8000c6a:	f000 fbb1 	bl	80013d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c6e:	200f      	movs	r0, #15
 8000c70:	f000 f808 	bl	8000c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c74:	f7ff ff08 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c78:	2300      	movs	r3, #0
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	40023c00 	.word	0x40023c00

08000c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c84:	b580      	push	{r7, lr}
 8000c86:	b082      	sub	sp, #8
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c8c:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <HAL_InitTick+0x54>)
 8000c8e:	681a      	ldr	r2, [r3, #0]
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <HAL_InitTick+0x58>)
 8000c92:	781b      	ldrb	r3, [r3, #0]
 8000c94:	4619      	mov	r1, r3
 8000c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ca2:	4618      	mov	r0, r3
 8000ca4:	f000 fbc9 	bl	800143a <HAL_SYSTICK_Config>
 8000ca8:	4603      	mov	r3, r0
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d001      	beq.n	8000cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000cae:	2301      	movs	r3, #1
 8000cb0:	e00e      	b.n	8000cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	2b0f      	cmp	r3, #15
 8000cb6:	d80a      	bhi.n	8000cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000cb8:	2200      	movs	r2, #0
 8000cba:	6879      	ldr	r1, [r7, #4]
 8000cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8000cc0:	f000 fb91 	bl	80013e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000cc4:	4a06      	ldr	r2, [pc, #24]	; (8000ce0 <HAL_InitTick+0x5c>)
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000cca:	2300      	movs	r3, #0
 8000ccc:	e000      	b.n	8000cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000cce:	2301      	movs	r3, #1
}
 8000cd0:	4618      	mov	r0, r3
 8000cd2:	3708      	adds	r7, #8
 8000cd4:	46bd      	mov	sp, r7
 8000cd6:	bd80      	pop	{r7, pc}
 8000cd8:	20000040 	.word	0x20000040
 8000cdc:	20000048 	.word	0x20000048
 8000ce0:	20000044 	.word	0x20000044

08000ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ce4:	b480      	push	{r7}
 8000ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000ce8:	4b06      	ldr	r3, [pc, #24]	; (8000d04 <HAL_IncTick+0x20>)
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	461a      	mov	r2, r3
 8000cee:	4b06      	ldr	r3, [pc, #24]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	4413      	add	r3, r2
 8000cf4:	4a04      	ldr	r2, [pc, #16]	; (8000d08 <HAL_IncTick+0x24>)
 8000cf6:	6013      	str	r3, [r2, #0]
}
 8000cf8:	bf00      	nop
 8000cfa:	46bd      	mov	sp, r7
 8000cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d00:	4770      	bx	lr
 8000d02:	bf00      	nop
 8000d04:	20000048 	.word	0x20000048
 8000d08:	200001fc 	.word	0x200001fc

08000d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000d0c:	b480      	push	{r7}
 8000d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8000d10:	4b03      	ldr	r3, [pc, #12]	; (8000d20 <HAL_GetTick+0x14>)
 8000d12:	681b      	ldr	r3, [r3, #0]
}
 8000d14:	4618      	mov	r0, r3
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr
 8000d1e:	bf00      	nop
 8000d20:	200001fc 	.word	0x200001fc

08000d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b084      	sub	sp, #16
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000d2c:	f7ff ffee 	bl	8000d0c <HAL_GetTick>
 8000d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d32:	687b      	ldr	r3, [r7, #4]
 8000d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d36:	68fb      	ldr	r3, [r7, #12]
 8000d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d3c:	d005      	beq.n	8000d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d3e:	4b0a      	ldr	r3, [pc, #40]	; (8000d68 <HAL_Delay+0x44>)
 8000d40:	781b      	ldrb	r3, [r3, #0]
 8000d42:	461a      	mov	r2, r3
 8000d44:	68fb      	ldr	r3, [r7, #12]
 8000d46:	4413      	add	r3, r2
 8000d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d4a:	bf00      	nop
 8000d4c:	f7ff ffde 	bl	8000d0c <HAL_GetTick>
 8000d50:	4602      	mov	r2, r0
 8000d52:	68bb      	ldr	r3, [r7, #8]
 8000d54:	1ad3      	subs	r3, r2, r3
 8000d56:	68fa      	ldr	r2, [r7, #12]
 8000d58:	429a      	cmp	r2, r3
 8000d5a:	d8f7      	bhi.n	8000d4c <HAL_Delay+0x28>
  {
  }
}
 8000d5c:	bf00      	nop
 8000d5e:	bf00      	nop
 8000d60:	3710      	adds	r7, #16
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bd80      	pop	{r7, pc}
 8000d66:	bf00      	nop
 8000d68:	20000048 	.word	0x20000048

08000d6c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d6c:	b580      	push	{r7, lr}
 8000d6e:	b084      	sub	sp, #16
 8000d70:	af00      	add	r7, sp, #0
 8000d72:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d101      	bne.n	8000d82 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d7e:	2301      	movs	r3, #1
 8000d80:	e033      	b.n	8000dea <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d82:	687b      	ldr	r3, [r7, #4]
 8000d84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d86:	2b00      	cmp	r3, #0
 8000d88:	d109      	bne.n	8000d9e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d8a:	6878      	ldr	r0, [r7, #4]
 8000d8c:	f7ff fea4 	bl	8000ad8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d90:	687b      	ldr	r3, [r7, #4]
 8000d92:	2200      	movs	r2, #0
 8000d94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	2200      	movs	r2, #0
 8000d9a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d9e:	687b      	ldr	r3, [r7, #4]
 8000da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000da2:	f003 0310 	and.w	r3, r3, #16
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d118      	bne.n	8000ddc <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dae:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000db2:	f023 0302 	bic.w	r3, r3, #2
 8000db6:	f043 0202 	orr.w	r2, r3, #2
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000dbe:	6878      	ldr	r0, [r7, #4]
 8000dc0:	f000 f93a 	bl	8001038 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000dc4:	687b      	ldr	r3, [r7, #4]
 8000dc6:	2200      	movs	r2, #0
 8000dc8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dce:	f023 0303 	bic.w	r3, r3, #3
 8000dd2:	f043 0201 	orr.w	r2, r3, #1
 8000dd6:	687b      	ldr	r3, [r7, #4]
 8000dd8:	641a      	str	r2, [r3, #64]	; 0x40
 8000dda:	e001      	b.n	8000de0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000ddc:	2301      	movs	r3, #1
 8000dde:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000de0:	687b      	ldr	r3, [r7, #4]
 8000de2:	2200      	movs	r2, #0
 8000de4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dea:	4618      	mov	r0, r3
 8000dec:	3710      	adds	r7, #16
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8000df4:	b480      	push	{r7}
 8000df6:	b085      	sub	sp, #20
 8000df8:	af00      	add	r7, sp, #0
 8000dfa:	6078      	str	r0, [r7, #4]
 8000dfc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8000dfe:	2300      	movs	r3, #0
 8000e00:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000e08:	2b01      	cmp	r3, #1
 8000e0a:	d101      	bne.n	8000e10 <HAL_ADC_ConfigChannel+0x1c>
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	e105      	b.n	800101c <HAL_ADC_ConfigChannel+0x228>
 8000e10:	687b      	ldr	r3, [r7, #4]
 8000e12:	2201      	movs	r2, #1
 8000e14:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8000e18:	683b      	ldr	r3, [r7, #0]
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	2b09      	cmp	r3, #9
 8000e1e:	d925      	bls.n	8000e6c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8000e20:	687b      	ldr	r3, [r7, #4]
 8000e22:	681b      	ldr	r3, [r3, #0]
 8000e24:	68d9      	ldr	r1, [r3, #12]
 8000e26:	683b      	ldr	r3, [r7, #0]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	b29b      	uxth	r3, r3
 8000e2c:	461a      	mov	r2, r3
 8000e2e:	4613      	mov	r3, r2
 8000e30:	005b      	lsls	r3, r3, #1
 8000e32:	4413      	add	r3, r2
 8000e34:	3b1e      	subs	r3, #30
 8000e36:	2207      	movs	r2, #7
 8000e38:	fa02 f303 	lsl.w	r3, r2, r3
 8000e3c:	43da      	mvns	r2, r3
 8000e3e:	687b      	ldr	r3, [r7, #4]
 8000e40:	681b      	ldr	r3, [r3, #0]
 8000e42:	400a      	ands	r2, r1
 8000e44:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	68d9      	ldr	r1, [r3, #12]
 8000e4c:	683b      	ldr	r3, [r7, #0]
 8000e4e:	689a      	ldr	r2, [r3, #8]
 8000e50:	683b      	ldr	r3, [r7, #0]
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	b29b      	uxth	r3, r3
 8000e56:	4618      	mov	r0, r3
 8000e58:	4603      	mov	r3, r0
 8000e5a:	005b      	lsls	r3, r3, #1
 8000e5c:	4403      	add	r3, r0
 8000e5e:	3b1e      	subs	r3, #30
 8000e60:	409a      	lsls	r2, r3
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	430a      	orrs	r2, r1
 8000e68:	60da      	str	r2, [r3, #12]
 8000e6a:	e022      	b.n	8000eb2 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8000e6c:	687b      	ldr	r3, [r7, #4]
 8000e6e:	681b      	ldr	r3, [r3, #0]
 8000e70:	6919      	ldr	r1, [r3, #16]
 8000e72:	683b      	ldr	r3, [r7, #0]
 8000e74:	681b      	ldr	r3, [r3, #0]
 8000e76:	b29b      	uxth	r3, r3
 8000e78:	461a      	mov	r2, r3
 8000e7a:	4613      	mov	r3, r2
 8000e7c:	005b      	lsls	r3, r3, #1
 8000e7e:	4413      	add	r3, r2
 8000e80:	2207      	movs	r2, #7
 8000e82:	fa02 f303 	lsl.w	r3, r2, r3
 8000e86:	43da      	mvns	r2, r3
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	681b      	ldr	r3, [r3, #0]
 8000e8c:	400a      	ands	r2, r1
 8000e8e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8000e90:	687b      	ldr	r3, [r7, #4]
 8000e92:	681b      	ldr	r3, [r3, #0]
 8000e94:	6919      	ldr	r1, [r3, #16]
 8000e96:	683b      	ldr	r3, [r7, #0]
 8000e98:	689a      	ldr	r2, [r3, #8]
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	681b      	ldr	r3, [r3, #0]
 8000e9e:	b29b      	uxth	r3, r3
 8000ea0:	4618      	mov	r0, r3
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	005b      	lsls	r3, r3, #1
 8000ea6:	4403      	add	r3, r0
 8000ea8:	409a      	lsls	r2, r3
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	430a      	orrs	r2, r1
 8000eb0:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000eb2:	683b      	ldr	r3, [r7, #0]
 8000eb4:	685b      	ldr	r3, [r3, #4]
 8000eb6:	2b06      	cmp	r3, #6
 8000eb8:	d824      	bhi.n	8000f04 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8000eba:	687b      	ldr	r3, [r7, #4]
 8000ebc:	681b      	ldr	r3, [r3, #0]
 8000ebe:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ec0:	683b      	ldr	r3, [r7, #0]
 8000ec2:	685a      	ldr	r2, [r3, #4]
 8000ec4:	4613      	mov	r3, r2
 8000ec6:	009b      	lsls	r3, r3, #2
 8000ec8:	4413      	add	r3, r2
 8000eca:	3b05      	subs	r3, #5
 8000ecc:	221f      	movs	r2, #31
 8000ece:	fa02 f303 	lsl.w	r3, r2, r3
 8000ed2:	43da      	mvns	r2, r3
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	400a      	ands	r2, r1
 8000eda:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	681b      	ldr	r3, [r3, #0]
 8000ee0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8000ee2:	683b      	ldr	r3, [r7, #0]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	b29b      	uxth	r3, r3
 8000ee8:	4618      	mov	r0, r3
 8000eea:	683b      	ldr	r3, [r7, #0]
 8000eec:	685a      	ldr	r2, [r3, #4]
 8000eee:	4613      	mov	r3, r2
 8000ef0:	009b      	lsls	r3, r3, #2
 8000ef2:	4413      	add	r3, r2
 8000ef4:	3b05      	subs	r3, #5
 8000ef6:	fa00 f203 	lsl.w	r2, r0, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	681b      	ldr	r3, [r3, #0]
 8000efe:	430a      	orrs	r2, r1
 8000f00:	635a      	str	r2, [r3, #52]	; 0x34
 8000f02:	e04c      	b.n	8000f9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	2b0c      	cmp	r3, #12
 8000f0a:	d824      	bhi.n	8000f56 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8000f0c:	687b      	ldr	r3, [r7, #4]
 8000f0e:	681b      	ldr	r3, [r3, #0]
 8000f10:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f12:	683b      	ldr	r3, [r7, #0]
 8000f14:	685a      	ldr	r2, [r3, #4]
 8000f16:	4613      	mov	r3, r2
 8000f18:	009b      	lsls	r3, r3, #2
 8000f1a:	4413      	add	r3, r2
 8000f1c:	3b23      	subs	r3, #35	; 0x23
 8000f1e:	221f      	movs	r2, #31
 8000f20:	fa02 f303 	lsl.w	r3, r2, r3
 8000f24:	43da      	mvns	r2, r3
 8000f26:	687b      	ldr	r3, [r7, #4]
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	400a      	ands	r2, r1
 8000f2c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8000f34:	683b      	ldr	r3, [r7, #0]
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	b29b      	uxth	r3, r3
 8000f3a:	4618      	mov	r0, r3
 8000f3c:	683b      	ldr	r3, [r7, #0]
 8000f3e:	685a      	ldr	r2, [r3, #4]
 8000f40:	4613      	mov	r3, r2
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	4413      	add	r3, r2
 8000f46:	3b23      	subs	r3, #35	; 0x23
 8000f48:	fa00 f203 	lsl.w	r2, r0, r3
 8000f4c:	687b      	ldr	r3, [r7, #4]
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	430a      	orrs	r2, r1
 8000f52:	631a      	str	r2, [r3, #48]	; 0x30
 8000f54:	e023      	b.n	8000f9e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	681b      	ldr	r3, [r3, #0]
 8000f5a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f5c:	683b      	ldr	r3, [r7, #0]
 8000f5e:	685a      	ldr	r2, [r3, #4]
 8000f60:	4613      	mov	r3, r2
 8000f62:	009b      	lsls	r3, r3, #2
 8000f64:	4413      	add	r3, r2
 8000f66:	3b41      	subs	r3, #65	; 0x41
 8000f68:	221f      	movs	r2, #31
 8000f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8000f6e:	43da      	mvns	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	400a      	ands	r2, r1
 8000f76:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8000f7e:	683b      	ldr	r3, [r7, #0]
 8000f80:	681b      	ldr	r3, [r3, #0]
 8000f82:	b29b      	uxth	r3, r3
 8000f84:	4618      	mov	r0, r3
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	685a      	ldr	r2, [r3, #4]
 8000f8a:	4613      	mov	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	4413      	add	r3, r2
 8000f90:	3b41      	subs	r3, #65	; 0x41
 8000f92:	fa00 f203 	lsl.w	r2, r0, r3
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	430a      	orrs	r2, r1
 8000f9c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000f9e:	4b22      	ldr	r3, [pc, #136]	; (8001028 <HAL_ADC_ConfigChannel+0x234>)
 8000fa0:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	4a21      	ldr	r2, [pc, #132]	; (800102c <HAL_ADC_ConfigChannel+0x238>)
 8000fa8:	4293      	cmp	r3, r2
 8000faa:	d109      	bne.n	8000fc0 <HAL_ADC_ConfigChannel+0x1cc>
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	681b      	ldr	r3, [r3, #0]
 8000fb0:	2b12      	cmp	r3, #18
 8000fb2:	d105      	bne.n	8000fc0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8000fb4:	68fb      	ldr	r3, [r7, #12]
 8000fb6:	685b      	ldr	r3, [r3, #4]
 8000fb8:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8000fbc:	68fb      	ldr	r3, [r7, #12]
 8000fbe:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	4a19      	ldr	r2, [pc, #100]	; (800102c <HAL_ADC_ConfigChannel+0x238>)
 8000fc6:	4293      	cmp	r3, r2
 8000fc8:	d123      	bne.n	8001012 <HAL_ADC_ConfigChannel+0x21e>
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	681b      	ldr	r3, [r3, #0]
 8000fce:	2b10      	cmp	r3, #16
 8000fd0:	d003      	beq.n	8000fda <HAL_ADC_ConfigChannel+0x1e6>
 8000fd2:	683b      	ldr	r3, [r7, #0]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	2b11      	cmp	r3, #17
 8000fd8:	d11b      	bne.n	8001012 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8000fda:	68fb      	ldr	r3, [r7, #12]
 8000fdc:	685b      	ldr	r3, [r3, #4]
 8000fde:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8000fe2:	68fb      	ldr	r3, [r7, #12]
 8000fe4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8000fe6:	683b      	ldr	r3, [r7, #0]
 8000fe8:	681b      	ldr	r3, [r3, #0]
 8000fea:	2b10      	cmp	r3, #16
 8000fec:	d111      	bne.n	8001012 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8000fee:	4b10      	ldr	r3, [pc, #64]	; (8001030 <HAL_ADC_ConfigChannel+0x23c>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	4a10      	ldr	r2, [pc, #64]	; (8001034 <HAL_ADC_ConfigChannel+0x240>)
 8000ff4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ff8:	0c9a      	lsrs	r2, r3, #18
 8000ffa:	4613      	mov	r3, r2
 8000ffc:	009b      	lsls	r3, r3, #2
 8000ffe:	4413      	add	r3, r2
 8001000:	005b      	lsls	r3, r3, #1
 8001002:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8001004:	e002      	b.n	800100c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8001006:	68bb      	ldr	r3, [r7, #8]
 8001008:	3b01      	subs	r3, #1
 800100a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 800100c:	68bb      	ldr	r3, [r7, #8]
 800100e:	2b00      	cmp	r3, #0
 8001010:	d1f9      	bne.n	8001006 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001012:	687b      	ldr	r3, [r7, #4]
 8001014:	2200      	movs	r2, #0
 8001016:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800101a:	2300      	movs	r3, #0
}
 800101c:	4618      	mov	r0, r3
 800101e:	3714      	adds	r7, #20
 8001020:	46bd      	mov	sp, r7
 8001022:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001026:	4770      	bx	lr
 8001028:	40012300 	.word	0x40012300
 800102c:	40012000 	.word	0x40012000
 8001030:	20000040 	.word	0x20000040
 8001034:	431bde83 	.word	0x431bde83

08001038 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001038:	b480      	push	{r7}
 800103a:	b085      	sub	sp, #20
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001040:	4b79      	ldr	r3, [pc, #484]	; (8001228 <ADC_Init+0x1f0>)
 8001042:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	685b      	ldr	r3, [r3, #4]
 8001048:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800104c:	68fb      	ldr	r3, [r7, #12]
 800104e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001050:	68fb      	ldr	r3, [r7, #12]
 8001052:	685a      	ldr	r2, [r3, #4]
 8001054:	687b      	ldr	r3, [r7, #4]
 8001056:	685b      	ldr	r3, [r3, #4]
 8001058:	431a      	orrs	r2, r3
 800105a:	68fb      	ldr	r3, [r7, #12]
 800105c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	685a      	ldr	r2, [r3, #4]
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	681b      	ldr	r3, [r3, #0]
 8001068:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800106c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	681b      	ldr	r3, [r3, #0]
 8001072:	6859      	ldr	r1, [r3, #4]
 8001074:	687b      	ldr	r3, [r7, #4]
 8001076:	691b      	ldr	r3, [r3, #16]
 8001078:	021a      	lsls	r2, r3, #8
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	430a      	orrs	r2, r1
 8001080:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	681b      	ldr	r3, [r3, #0]
 8001086:	685a      	ldr	r2, [r3, #4]
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	681b      	ldr	r3, [r3, #0]
 800108c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001090:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	681b      	ldr	r3, [r3, #0]
 8001096:	6859      	ldr	r1, [r3, #4]
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689a      	ldr	r2, [r3, #8]
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	681b      	ldr	r3, [r3, #0]
 80010a0:	430a      	orrs	r2, r1
 80010a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	689a      	ldr	r2, [r3, #8]
 80010aa:	687b      	ldr	r3, [r7, #4]
 80010ac:	681b      	ldr	r3, [r3, #0]
 80010ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80010b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80010b4:	687b      	ldr	r3, [r7, #4]
 80010b6:	681b      	ldr	r3, [r3, #0]
 80010b8:	6899      	ldr	r1, [r3, #8]
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	68da      	ldr	r2, [r3, #12]
 80010be:	687b      	ldr	r3, [r7, #4]
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	430a      	orrs	r2, r1
 80010c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80010ca:	4a58      	ldr	r2, [pc, #352]	; (800122c <ADC_Init+0x1f4>)
 80010cc:	4293      	cmp	r3, r2
 80010ce:	d022      	beq.n	8001116 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80010d0:	687b      	ldr	r3, [r7, #4]
 80010d2:	681b      	ldr	r3, [r3, #0]
 80010d4:	689a      	ldr	r2, [r3, #8]
 80010d6:	687b      	ldr	r3, [r7, #4]
 80010d8:	681b      	ldr	r3, [r3, #0]
 80010da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80010de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	6899      	ldr	r1, [r3, #8]
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	430a      	orrs	r2, r1
 80010f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80010f2:	687b      	ldr	r3, [r7, #4]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001100:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001102:	687b      	ldr	r3, [r7, #4]
 8001104:	681b      	ldr	r3, [r3, #0]
 8001106:	6899      	ldr	r1, [r3, #8]
 8001108:	687b      	ldr	r3, [r7, #4]
 800110a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	430a      	orrs	r2, r1
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	e00f      	b.n	8001136 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	689a      	ldr	r2, [r3, #8]
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001124:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	689a      	ldr	r2, [r3, #8]
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001134:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	681b      	ldr	r3, [r3, #0]
 800113a:	689a      	ldr	r2, [r3, #8]
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	f022 0202 	bic.w	r2, r2, #2
 8001144:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	6899      	ldr	r1, [r3, #8]
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	7e1b      	ldrb	r3, [r3, #24]
 8001150:	005a      	lsls	r2, r3, #1
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	430a      	orrs	r2, r1
 8001158:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001160:	2b00      	cmp	r3, #0
 8001162:	d01b      	beq.n	800119c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	685a      	ldr	r2, [r3, #4]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001172:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	685a      	ldr	r2, [r3, #4]
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001182:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001184:	687b      	ldr	r3, [r7, #4]
 8001186:	681b      	ldr	r3, [r3, #0]
 8001188:	6859      	ldr	r1, [r3, #4]
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800118e:	3b01      	subs	r3, #1
 8001190:	035a      	lsls	r2, r3, #13
 8001192:	687b      	ldr	r3, [r7, #4]
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	430a      	orrs	r2, r1
 8001198:	605a      	str	r2, [r3, #4]
 800119a:	e007      	b.n	80011ac <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	681b      	ldr	r3, [r3, #0]
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80011aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80011b2:	687b      	ldr	r3, [r7, #4]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80011ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	69db      	ldr	r3, [r3, #28]
 80011c6:	3b01      	subs	r3, #1
 80011c8:	051a      	lsls	r2, r3, #20
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	689a      	ldr	r2, [r3, #8]
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80011e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	6899      	ldr	r1, [r3, #8]
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80011ee:	025a      	lsls	r2, r3, #9
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	681b      	ldr	r3, [r3, #0]
 80011f4:	430a      	orrs	r2, r1
 80011f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	689a      	ldr	r2, [r3, #8]
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001206:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	6899      	ldr	r1, [r3, #8]
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	695b      	ldr	r3, [r3, #20]
 8001212:	029a      	lsls	r2, r3, #10
 8001214:	687b      	ldr	r3, [r7, #4]
 8001216:	681b      	ldr	r3, [r3, #0]
 8001218:	430a      	orrs	r2, r1
 800121a:	609a      	str	r2, [r3, #8]
}
 800121c:	bf00      	nop
 800121e:	3714      	adds	r7, #20
 8001220:	46bd      	mov	sp, r7
 8001222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001226:	4770      	bx	lr
 8001228:	40012300 	.word	0x40012300
 800122c:	0f000001 	.word	0x0f000001

08001230 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001230:	b480      	push	{r7}
 8001232:	b085      	sub	sp, #20
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	f003 0307 	and.w	r3, r3, #7
 800123e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001242:	68db      	ldr	r3, [r3, #12]
 8001244:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001246:	68ba      	ldr	r2, [r7, #8]
 8001248:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800124c:	4013      	ands	r3, r2
 800124e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001250:	68fb      	ldr	r3, [r7, #12]
 8001252:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001254:	68bb      	ldr	r3, [r7, #8]
 8001256:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001258:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800125c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001260:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001262:	4a04      	ldr	r2, [pc, #16]	; (8001274 <__NVIC_SetPriorityGrouping+0x44>)
 8001264:	68bb      	ldr	r3, [r7, #8]
 8001266:	60d3      	str	r3, [r2, #12]
}
 8001268:	bf00      	nop
 800126a:	3714      	adds	r7, #20
 800126c:	46bd      	mov	sp, r7
 800126e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001272:	4770      	bx	lr
 8001274:	e000ed00 	.word	0xe000ed00

08001278 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001278:	b480      	push	{r7}
 800127a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800127c:	4b04      	ldr	r3, [pc, #16]	; (8001290 <__NVIC_GetPriorityGrouping+0x18>)
 800127e:	68db      	ldr	r3, [r3, #12]
 8001280:	0a1b      	lsrs	r3, r3, #8
 8001282:	f003 0307 	and.w	r3, r3, #7
}
 8001286:	4618      	mov	r0, r3
 8001288:	46bd      	mov	sp, r7
 800128a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800128e:	4770      	bx	lr
 8001290:	e000ed00 	.word	0xe000ed00

08001294 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001294:	b480      	push	{r7}
 8001296:	b083      	sub	sp, #12
 8001298:	af00      	add	r7, sp, #0
 800129a:	4603      	mov	r3, r0
 800129c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800129e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012a2:	2b00      	cmp	r3, #0
 80012a4:	db0b      	blt.n	80012be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80012a6:	79fb      	ldrb	r3, [r7, #7]
 80012a8:	f003 021f 	and.w	r2, r3, #31
 80012ac:	4907      	ldr	r1, [pc, #28]	; (80012cc <__NVIC_EnableIRQ+0x38>)
 80012ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012b2:	095b      	lsrs	r3, r3, #5
 80012b4:	2001      	movs	r0, #1
 80012b6:	fa00 f202 	lsl.w	r2, r0, r2
 80012ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80012be:	bf00      	nop
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	e000e100 	.word	0xe000e100

080012d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80012d0:	b480      	push	{r7}
 80012d2:	b083      	sub	sp, #12
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	4603      	mov	r3, r0
 80012d8:	6039      	str	r1, [r7, #0]
 80012da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80012dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	db0a      	blt.n	80012fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	b2da      	uxtb	r2, r3
 80012e8:	490c      	ldr	r1, [pc, #48]	; (800131c <__NVIC_SetPriority+0x4c>)
 80012ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80012ee:	0112      	lsls	r2, r2, #4
 80012f0:	b2d2      	uxtb	r2, r2
 80012f2:	440b      	add	r3, r1
 80012f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80012f8:	e00a      	b.n	8001310 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80012fa:	683b      	ldr	r3, [r7, #0]
 80012fc:	b2da      	uxtb	r2, r3
 80012fe:	4908      	ldr	r1, [pc, #32]	; (8001320 <__NVIC_SetPriority+0x50>)
 8001300:	79fb      	ldrb	r3, [r7, #7]
 8001302:	f003 030f 	and.w	r3, r3, #15
 8001306:	3b04      	subs	r3, #4
 8001308:	0112      	lsls	r2, r2, #4
 800130a:	b2d2      	uxtb	r2, r2
 800130c:	440b      	add	r3, r1
 800130e:	761a      	strb	r2, [r3, #24]
}
 8001310:	bf00      	nop
 8001312:	370c      	adds	r7, #12
 8001314:	46bd      	mov	sp, r7
 8001316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131a:	4770      	bx	lr
 800131c:	e000e100 	.word	0xe000e100
 8001320:	e000ed00 	.word	0xe000ed00

08001324 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001324:	b480      	push	{r7}
 8001326:	b089      	sub	sp, #36	; 0x24
 8001328:	af00      	add	r7, sp, #0
 800132a:	60f8      	str	r0, [r7, #12]
 800132c:	60b9      	str	r1, [r7, #8]
 800132e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001330:	68fb      	ldr	r3, [r7, #12]
 8001332:	f003 0307 	and.w	r3, r3, #7
 8001336:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001338:	69fb      	ldr	r3, [r7, #28]
 800133a:	f1c3 0307 	rsb	r3, r3, #7
 800133e:	2b04      	cmp	r3, #4
 8001340:	bf28      	it	cs
 8001342:	2304      	movcs	r3, #4
 8001344:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001346:	69fb      	ldr	r3, [r7, #28]
 8001348:	3304      	adds	r3, #4
 800134a:	2b06      	cmp	r3, #6
 800134c:	d902      	bls.n	8001354 <NVIC_EncodePriority+0x30>
 800134e:	69fb      	ldr	r3, [r7, #28]
 8001350:	3b03      	subs	r3, #3
 8001352:	e000      	b.n	8001356 <NVIC_EncodePriority+0x32>
 8001354:	2300      	movs	r3, #0
 8001356:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001358:	f04f 32ff 	mov.w	r2, #4294967295
 800135c:	69bb      	ldr	r3, [r7, #24]
 800135e:	fa02 f303 	lsl.w	r3, r2, r3
 8001362:	43da      	mvns	r2, r3
 8001364:	68bb      	ldr	r3, [r7, #8]
 8001366:	401a      	ands	r2, r3
 8001368:	697b      	ldr	r3, [r7, #20]
 800136a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800136c:	f04f 31ff 	mov.w	r1, #4294967295
 8001370:	697b      	ldr	r3, [r7, #20]
 8001372:	fa01 f303 	lsl.w	r3, r1, r3
 8001376:	43d9      	mvns	r1, r3
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800137c:	4313      	orrs	r3, r2
         );
}
 800137e:	4618      	mov	r0, r3
 8001380:	3724      	adds	r7, #36	; 0x24
 8001382:	46bd      	mov	sp, r7
 8001384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001388:	4770      	bx	lr
	...

0800138c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800138c:	b580      	push	{r7, lr}
 800138e:	b082      	sub	sp, #8
 8001390:	af00      	add	r7, sp, #0
 8001392:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	3b01      	subs	r3, #1
 8001398:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800139c:	d301      	bcc.n	80013a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800139e:	2301      	movs	r3, #1
 80013a0:	e00f      	b.n	80013c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80013a2:	4a0a      	ldr	r2, [pc, #40]	; (80013cc <SysTick_Config+0x40>)
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	3b01      	subs	r3, #1
 80013a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80013aa:	210f      	movs	r1, #15
 80013ac:	f04f 30ff 	mov.w	r0, #4294967295
 80013b0:	f7ff ff8e 	bl	80012d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80013b4:	4b05      	ldr	r3, [pc, #20]	; (80013cc <SysTick_Config+0x40>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80013ba:	4b04      	ldr	r3, [pc, #16]	; (80013cc <SysTick_Config+0x40>)
 80013bc:	2207      	movs	r2, #7
 80013be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80013c0:	2300      	movs	r3, #0
}
 80013c2:	4618      	mov	r0, r3
 80013c4:	3708      	adds	r7, #8
 80013c6:	46bd      	mov	sp, r7
 80013c8:	bd80      	pop	{r7, pc}
 80013ca:	bf00      	nop
 80013cc:	e000e010 	.word	0xe000e010

080013d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80013d8:	6878      	ldr	r0, [r7, #4]
 80013da:	f7ff ff29 	bl	8001230 <__NVIC_SetPriorityGrouping>
}
 80013de:	bf00      	nop
 80013e0:	3708      	adds	r7, #8
 80013e2:	46bd      	mov	sp, r7
 80013e4:	bd80      	pop	{r7, pc}

080013e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80013e6:	b580      	push	{r7, lr}
 80013e8:	b086      	sub	sp, #24
 80013ea:	af00      	add	r7, sp, #0
 80013ec:	4603      	mov	r3, r0
 80013ee:	60b9      	str	r1, [r7, #8]
 80013f0:	607a      	str	r2, [r7, #4]
 80013f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80013f4:	2300      	movs	r3, #0
 80013f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80013f8:	f7ff ff3e 	bl	8001278 <__NVIC_GetPriorityGrouping>
 80013fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80013fe:	687a      	ldr	r2, [r7, #4]
 8001400:	68b9      	ldr	r1, [r7, #8]
 8001402:	6978      	ldr	r0, [r7, #20]
 8001404:	f7ff ff8e 	bl	8001324 <NVIC_EncodePriority>
 8001408:	4602      	mov	r2, r0
 800140a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff ff5d 	bl	80012d0 <__NVIC_SetPriority>
}
 8001416:	bf00      	nop
 8001418:	3718      	adds	r7, #24
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}

0800141e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800141e:	b580      	push	{r7, lr}
 8001420:	b082      	sub	sp, #8
 8001422:	af00      	add	r7, sp, #0
 8001424:	4603      	mov	r3, r0
 8001426:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001428:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff ff31 	bl	8001294 <__NVIC_EnableIRQ>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}

0800143a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800143a:	b580      	push	{r7, lr}
 800143c:	b082      	sub	sp, #8
 800143e:	af00      	add	r7, sp, #0
 8001440:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001442:	6878      	ldr	r0, [r7, #4]
 8001444:	f7ff ffa2 	bl	800138c <SysTick_Config>
 8001448:	4603      	mov	r3, r0
}
 800144a:	4618      	mov	r0, r3
 800144c:	3708      	adds	r7, #8
 800144e:	46bd      	mov	sp, r7
 8001450:	bd80      	pop	{r7, pc}
	...

08001454 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001454:	b480      	push	{r7}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
 800145c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800145e:	2300      	movs	r3, #0
 8001460:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001462:	2300      	movs	r3, #0
 8001464:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001466:	2300      	movs	r3, #0
 8001468:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800146a:	2300      	movs	r3, #0
 800146c:	61fb      	str	r3, [r7, #28]
 800146e:	e159      	b.n	8001724 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001470:	2201      	movs	r2, #1
 8001472:	69fb      	ldr	r3, [r7, #28]
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800147a:	683b      	ldr	r3, [r7, #0]
 800147c:	681b      	ldr	r3, [r3, #0]
 800147e:	697a      	ldr	r2, [r7, #20]
 8001480:	4013      	ands	r3, r2
 8001482:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001484:	693a      	ldr	r2, [r7, #16]
 8001486:	697b      	ldr	r3, [r7, #20]
 8001488:	429a      	cmp	r2, r3
 800148a:	f040 8148 	bne.w	800171e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685b      	ldr	r3, [r3, #4]
 8001492:	f003 0303 	and.w	r3, r3, #3
 8001496:	2b01      	cmp	r3, #1
 8001498:	d005      	beq.n	80014a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800149a:	683b      	ldr	r3, [r7, #0]
 800149c:	685b      	ldr	r3, [r3, #4]
 800149e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80014a2:	2b02      	cmp	r3, #2
 80014a4:	d130      	bne.n	8001508 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	689b      	ldr	r3, [r3, #8]
 80014aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	2203      	movs	r2, #3
 80014b2:	fa02 f303 	lsl.w	r3, r2, r3
 80014b6:	43db      	mvns	r3, r3
 80014b8:	69ba      	ldr	r2, [r7, #24]
 80014ba:	4013      	ands	r3, r2
 80014bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	68da      	ldr	r2, [r3, #12]
 80014c2:	69fb      	ldr	r3, [r7, #28]
 80014c4:	005b      	lsls	r3, r3, #1
 80014c6:	fa02 f303 	lsl.w	r3, r2, r3
 80014ca:	69ba      	ldr	r2, [r7, #24]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	69ba      	ldr	r2, [r7, #24]
 80014d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	685b      	ldr	r3, [r3, #4]
 80014da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80014dc:	2201      	movs	r2, #1
 80014de:	69fb      	ldr	r3, [r7, #28]
 80014e0:	fa02 f303 	lsl.w	r3, r2, r3
 80014e4:	43db      	mvns	r3, r3
 80014e6:	69ba      	ldr	r2, [r7, #24]
 80014e8:	4013      	ands	r3, r2
 80014ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80014ec:	683b      	ldr	r3, [r7, #0]
 80014ee:	685b      	ldr	r3, [r3, #4]
 80014f0:	091b      	lsrs	r3, r3, #4
 80014f2:	f003 0201 	and.w	r2, r3, #1
 80014f6:	69fb      	ldr	r3, [r7, #28]
 80014f8:	fa02 f303 	lsl.w	r3, r2, r3
 80014fc:	69ba      	ldr	r2, [r7, #24]
 80014fe:	4313      	orrs	r3, r2
 8001500:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001502:	687b      	ldr	r3, [r7, #4]
 8001504:	69ba      	ldr	r2, [r7, #24]
 8001506:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001508:	683b      	ldr	r3, [r7, #0]
 800150a:	685b      	ldr	r3, [r3, #4]
 800150c:	f003 0303 	and.w	r3, r3, #3
 8001510:	2b03      	cmp	r3, #3
 8001512:	d017      	beq.n	8001544 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	68db      	ldr	r3, [r3, #12]
 8001518:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800151a:	69fb      	ldr	r3, [r7, #28]
 800151c:	005b      	lsls	r3, r3, #1
 800151e:	2203      	movs	r2, #3
 8001520:	fa02 f303 	lsl.w	r3, r2, r3
 8001524:	43db      	mvns	r3, r3
 8001526:	69ba      	ldr	r2, [r7, #24]
 8001528:	4013      	ands	r3, r2
 800152a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800152c:	683b      	ldr	r3, [r7, #0]
 800152e:	689a      	ldr	r2, [r3, #8]
 8001530:	69fb      	ldr	r3, [r7, #28]
 8001532:	005b      	lsls	r3, r3, #1
 8001534:	fa02 f303 	lsl.w	r3, r2, r3
 8001538:	69ba      	ldr	r2, [r7, #24]
 800153a:	4313      	orrs	r3, r2
 800153c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	69ba      	ldr	r2, [r7, #24]
 8001542:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001544:	683b      	ldr	r3, [r7, #0]
 8001546:	685b      	ldr	r3, [r3, #4]
 8001548:	f003 0303 	and.w	r3, r3, #3
 800154c:	2b02      	cmp	r3, #2
 800154e:	d123      	bne.n	8001598 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001550:	69fb      	ldr	r3, [r7, #28]
 8001552:	08da      	lsrs	r2, r3, #3
 8001554:	687b      	ldr	r3, [r7, #4]
 8001556:	3208      	adds	r2, #8
 8001558:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800155c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800155e:	69fb      	ldr	r3, [r7, #28]
 8001560:	f003 0307 	and.w	r3, r3, #7
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	220f      	movs	r2, #15
 8001568:	fa02 f303 	lsl.w	r3, r2, r3
 800156c:	43db      	mvns	r3, r3
 800156e:	69ba      	ldr	r2, [r7, #24]
 8001570:	4013      	ands	r3, r2
 8001572:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001574:	683b      	ldr	r3, [r7, #0]
 8001576:	691a      	ldr	r2, [r3, #16]
 8001578:	69fb      	ldr	r3, [r7, #28]
 800157a:	f003 0307 	and.w	r3, r3, #7
 800157e:	009b      	lsls	r3, r3, #2
 8001580:	fa02 f303 	lsl.w	r3, r2, r3
 8001584:	69ba      	ldr	r2, [r7, #24]
 8001586:	4313      	orrs	r3, r2
 8001588:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	08da      	lsrs	r2, r3, #3
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	3208      	adds	r2, #8
 8001592:	69b9      	ldr	r1, [r7, #24]
 8001594:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800159e:	69fb      	ldr	r3, [r7, #28]
 80015a0:	005b      	lsls	r3, r3, #1
 80015a2:	2203      	movs	r2, #3
 80015a4:	fa02 f303 	lsl.w	r3, r2, r3
 80015a8:	43db      	mvns	r3, r3
 80015aa:	69ba      	ldr	r2, [r7, #24]
 80015ac:	4013      	ands	r3, r2
 80015ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	685b      	ldr	r3, [r3, #4]
 80015b4:	f003 0203 	and.w	r2, r3, #3
 80015b8:	69fb      	ldr	r3, [r7, #28]
 80015ba:	005b      	lsls	r3, r3, #1
 80015bc:	fa02 f303 	lsl.w	r3, r2, r3
 80015c0:	69ba      	ldr	r2, [r7, #24]
 80015c2:	4313      	orrs	r3, r2
 80015c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	69ba      	ldr	r2, [r7, #24]
 80015ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80015cc:	683b      	ldr	r3, [r7, #0]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	f000 80a2 	beq.w	800171e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80015da:	2300      	movs	r3, #0
 80015dc:	60fb      	str	r3, [r7, #12]
 80015de:	4b57      	ldr	r3, [pc, #348]	; (800173c <HAL_GPIO_Init+0x2e8>)
 80015e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015e2:	4a56      	ldr	r2, [pc, #344]	; (800173c <HAL_GPIO_Init+0x2e8>)
 80015e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80015e8:	6453      	str	r3, [r2, #68]	; 0x44
 80015ea:	4b54      	ldr	r3, [pc, #336]	; (800173c <HAL_GPIO_Init+0x2e8>)
 80015ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80015ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80015f2:	60fb      	str	r3, [r7, #12]
 80015f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80015f6:	4a52      	ldr	r2, [pc, #328]	; (8001740 <HAL_GPIO_Init+0x2ec>)
 80015f8:	69fb      	ldr	r3, [r7, #28]
 80015fa:	089b      	lsrs	r3, r3, #2
 80015fc:	3302      	adds	r3, #2
 80015fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001602:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001604:	69fb      	ldr	r3, [r7, #28]
 8001606:	f003 0303 	and.w	r3, r3, #3
 800160a:	009b      	lsls	r3, r3, #2
 800160c:	220f      	movs	r2, #15
 800160e:	fa02 f303 	lsl.w	r3, r2, r3
 8001612:	43db      	mvns	r3, r3
 8001614:	69ba      	ldr	r2, [r7, #24]
 8001616:	4013      	ands	r3, r2
 8001618:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	4a49      	ldr	r2, [pc, #292]	; (8001744 <HAL_GPIO_Init+0x2f0>)
 800161e:	4293      	cmp	r3, r2
 8001620:	d019      	beq.n	8001656 <HAL_GPIO_Init+0x202>
 8001622:	687b      	ldr	r3, [r7, #4]
 8001624:	4a48      	ldr	r2, [pc, #288]	; (8001748 <HAL_GPIO_Init+0x2f4>)
 8001626:	4293      	cmp	r3, r2
 8001628:	d013      	beq.n	8001652 <HAL_GPIO_Init+0x1fe>
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	4a47      	ldr	r2, [pc, #284]	; (800174c <HAL_GPIO_Init+0x2f8>)
 800162e:	4293      	cmp	r3, r2
 8001630:	d00d      	beq.n	800164e <HAL_GPIO_Init+0x1fa>
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	4a46      	ldr	r2, [pc, #280]	; (8001750 <HAL_GPIO_Init+0x2fc>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d007      	beq.n	800164a <HAL_GPIO_Init+0x1f6>
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	4a45      	ldr	r2, [pc, #276]	; (8001754 <HAL_GPIO_Init+0x300>)
 800163e:	4293      	cmp	r3, r2
 8001640:	d101      	bne.n	8001646 <HAL_GPIO_Init+0x1f2>
 8001642:	2304      	movs	r3, #4
 8001644:	e008      	b.n	8001658 <HAL_GPIO_Init+0x204>
 8001646:	2307      	movs	r3, #7
 8001648:	e006      	b.n	8001658 <HAL_GPIO_Init+0x204>
 800164a:	2303      	movs	r3, #3
 800164c:	e004      	b.n	8001658 <HAL_GPIO_Init+0x204>
 800164e:	2302      	movs	r3, #2
 8001650:	e002      	b.n	8001658 <HAL_GPIO_Init+0x204>
 8001652:	2301      	movs	r3, #1
 8001654:	e000      	b.n	8001658 <HAL_GPIO_Init+0x204>
 8001656:	2300      	movs	r3, #0
 8001658:	69fa      	ldr	r2, [r7, #28]
 800165a:	f002 0203 	and.w	r2, r2, #3
 800165e:	0092      	lsls	r2, r2, #2
 8001660:	4093      	lsls	r3, r2
 8001662:	69ba      	ldr	r2, [r7, #24]
 8001664:	4313      	orrs	r3, r2
 8001666:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001668:	4935      	ldr	r1, [pc, #212]	; (8001740 <HAL_GPIO_Init+0x2ec>)
 800166a:	69fb      	ldr	r3, [r7, #28]
 800166c:	089b      	lsrs	r3, r3, #2
 800166e:	3302      	adds	r3, #2
 8001670:	69ba      	ldr	r2, [r7, #24]
 8001672:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001676:	4b38      	ldr	r3, [pc, #224]	; (8001758 <HAL_GPIO_Init+0x304>)
 8001678:	689b      	ldr	r3, [r3, #8]
 800167a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800167c:	693b      	ldr	r3, [r7, #16]
 800167e:	43db      	mvns	r3, r3
 8001680:	69ba      	ldr	r2, [r7, #24]
 8001682:	4013      	ands	r3, r2
 8001684:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001686:	683b      	ldr	r3, [r7, #0]
 8001688:	685b      	ldr	r3, [r3, #4]
 800168a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800168e:	2b00      	cmp	r3, #0
 8001690:	d003      	beq.n	800169a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001692:	69ba      	ldr	r2, [r7, #24]
 8001694:	693b      	ldr	r3, [r7, #16]
 8001696:	4313      	orrs	r3, r2
 8001698:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800169a:	4a2f      	ldr	r2, [pc, #188]	; (8001758 <HAL_GPIO_Init+0x304>)
 800169c:	69bb      	ldr	r3, [r7, #24]
 800169e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80016a0:	4b2d      	ldr	r3, [pc, #180]	; (8001758 <HAL_GPIO_Init+0x304>)
 80016a2:	68db      	ldr	r3, [r3, #12]
 80016a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016a6:	693b      	ldr	r3, [r7, #16]
 80016a8:	43db      	mvns	r3, r3
 80016aa:	69ba      	ldr	r2, [r7, #24]
 80016ac:	4013      	ands	r3, r2
 80016ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80016b0:	683b      	ldr	r3, [r7, #0]
 80016b2:	685b      	ldr	r3, [r3, #4]
 80016b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80016b8:	2b00      	cmp	r3, #0
 80016ba:	d003      	beq.n	80016c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80016bc:	69ba      	ldr	r2, [r7, #24]
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	4313      	orrs	r3, r2
 80016c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80016c4:	4a24      	ldr	r2, [pc, #144]	; (8001758 <HAL_GPIO_Init+0x304>)
 80016c6:	69bb      	ldr	r3, [r7, #24]
 80016c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80016ca:	4b23      	ldr	r3, [pc, #140]	; (8001758 <HAL_GPIO_Init+0x304>)
 80016cc:	685b      	ldr	r3, [r3, #4]
 80016ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016d0:	693b      	ldr	r3, [r7, #16]
 80016d2:	43db      	mvns	r3, r3
 80016d4:	69ba      	ldr	r2, [r7, #24]
 80016d6:	4013      	ands	r3, r2
 80016d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80016da:	683b      	ldr	r3, [r7, #0]
 80016dc:	685b      	ldr	r3, [r3, #4]
 80016de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d003      	beq.n	80016ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80016e6:	69ba      	ldr	r2, [r7, #24]
 80016e8:	693b      	ldr	r3, [r7, #16]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80016ee:	4a1a      	ldr	r2, [pc, #104]	; (8001758 <HAL_GPIO_Init+0x304>)
 80016f0:	69bb      	ldr	r3, [r7, #24]
 80016f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80016f4:	4b18      	ldr	r3, [pc, #96]	; (8001758 <HAL_GPIO_Init+0x304>)
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80016fa:	693b      	ldr	r3, [r7, #16]
 80016fc:	43db      	mvns	r3, r3
 80016fe:	69ba      	ldr	r2, [r7, #24]
 8001700:	4013      	ands	r3, r2
 8001702:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001704:	683b      	ldr	r3, [r7, #0]
 8001706:	685b      	ldr	r3, [r3, #4]
 8001708:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800170c:	2b00      	cmp	r3, #0
 800170e:	d003      	beq.n	8001718 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001710:	69ba      	ldr	r2, [r7, #24]
 8001712:	693b      	ldr	r3, [r7, #16]
 8001714:	4313      	orrs	r3, r2
 8001716:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001718:	4a0f      	ldr	r2, [pc, #60]	; (8001758 <HAL_GPIO_Init+0x304>)
 800171a:	69bb      	ldr	r3, [r7, #24]
 800171c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	3301      	adds	r3, #1
 8001722:	61fb      	str	r3, [r7, #28]
 8001724:	69fb      	ldr	r3, [r7, #28]
 8001726:	2b0f      	cmp	r3, #15
 8001728:	f67f aea2 	bls.w	8001470 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800172c:	bf00      	nop
 800172e:	bf00      	nop
 8001730:	3724      	adds	r7, #36	; 0x24
 8001732:	46bd      	mov	sp, r7
 8001734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001738:	4770      	bx	lr
 800173a:	bf00      	nop
 800173c:	40023800 	.word	0x40023800
 8001740:	40013800 	.word	0x40013800
 8001744:	40020000 	.word	0x40020000
 8001748:	40020400 	.word	0x40020400
 800174c:	40020800 	.word	0x40020800
 8001750:	40020c00 	.word	0x40020c00
 8001754:	40021000 	.word	0x40021000
 8001758:	40013c00 	.word	0x40013c00

0800175c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800175c:	b480      	push	{r7}
 800175e:	b085      	sub	sp, #20
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
 8001764:	460b      	mov	r3, r1
 8001766:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	691a      	ldr	r2, [r3, #16]
 800176c:	887b      	ldrh	r3, [r7, #2]
 800176e:	4013      	ands	r3, r2
 8001770:	2b00      	cmp	r3, #0
 8001772:	d002      	beq.n	800177a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001774:	2301      	movs	r3, #1
 8001776:	73fb      	strb	r3, [r7, #15]
 8001778:	e001      	b.n	800177e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800177a:	2300      	movs	r3, #0
 800177c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800177e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001780:	4618      	mov	r0, r3
 8001782:	3714      	adds	r7, #20
 8001784:	46bd      	mov	sp, r7
 8001786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800178a:	4770      	bx	lr

0800178c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800178c:	b480      	push	{r7}
 800178e:	b083      	sub	sp, #12
 8001790:	af00      	add	r7, sp, #0
 8001792:	6078      	str	r0, [r7, #4]
 8001794:	460b      	mov	r3, r1
 8001796:	807b      	strh	r3, [r7, #2]
 8001798:	4613      	mov	r3, r2
 800179a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800179c:	787b      	ldrb	r3, [r7, #1]
 800179e:	2b00      	cmp	r3, #0
 80017a0:	d003      	beq.n	80017aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80017a2:	887a      	ldrh	r2, [r7, #2]
 80017a4:	687b      	ldr	r3, [r7, #4]
 80017a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80017a8:	e003      	b.n	80017b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80017aa:	887b      	ldrh	r3, [r7, #2]
 80017ac:	041a      	lsls	r2, r3, #16
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	619a      	str	r2, [r3, #24]
}
 80017b2:	bf00      	nop
 80017b4:	370c      	adds	r7, #12
 80017b6:	46bd      	mov	sp, r7
 80017b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017bc:	4770      	bx	lr

080017be <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80017be:	b5f0      	push	{r4, r5, r6, r7, lr}
 80017c0:	b08f      	sub	sp, #60	; 0x3c
 80017c2:	af0a      	add	r7, sp, #40	; 0x28
 80017c4:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	2b00      	cmp	r3, #0
 80017ca:	d101      	bne.n	80017d0 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80017cc:	2301      	movs	r3, #1
 80017ce:	e10f      	b.n	80019f0 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80017d0:	687b      	ldr	r3, [r7, #4]
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 80017dc:	b2db      	uxtb	r3, r3
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d106      	bne.n	80017f0 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2200      	movs	r2, #0
 80017e6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f005 f930 	bl	8006a50 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	2203      	movs	r2, #3
 80017f4:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80017f8:	68bb      	ldr	r3, [r7, #8]
 80017fa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80017fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001800:	2b00      	cmp	r3, #0
 8001802:	d102      	bne.n	800180a <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2200      	movs	r2, #0
 8001808:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	681b      	ldr	r3, [r3, #0]
 800180e:	4618      	mov	r0, r3
 8001810:	f001 ff7f 	bl	8003712 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	603b      	str	r3, [r7, #0]
 800181a:	687e      	ldr	r6, [r7, #4]
 800181c:	466d      	mov	r5, sp
 800181e:	f106 0410 	add.w	r4, r6, #16
 8001822:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001824:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001826:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001828:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800182a:	e894 0003 	ldmia.w	r4, {r0, r1}
 800182e:	e885 0003 	stmia.w	r5, {r0, r1}
 8001832:	1d33      	adds	r3, r6, #4
 8001834:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001836:	6838      	ldr	r0, [r7, #0]
 8001838:	f001 fe56 	bl	80034e8 <USB_CoreInit>
 800183c:	4603      	mov	r3, r0
 800183e:	2b00      	cmp	r3, #0
 8001840:	d005      	beq.n	800184e <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	2202      	movs	r2, #2
 8001846:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 800184a:	2301      	movs	r3, #1
 800184c:	e0d0      	b.n	80019f0 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800184e:	687b      	ldr	r3, [r7, #4]
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	2100      	movs	r1, #0
 8001854:	4618      	mov	r0, r3
 8001856:	f001 ff6d 	bl	8003734 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800185a:	2300      	movs	r3, #0
 800185c:	73fb      	strb	r3, [r7, #15]
 800185e:	e04a      	b.n	80018f6 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001860:	7bfa      	ldrb	r2, [r7, #15]
 8001862:	6879      	ldr	r1, [r7, #4]
 8001864:	4613      	mov	r3, r2
 8001866:	00db      	lsls	r3, r3, #3
 8001868:	4413      	add	r3, r2
 800186a:	009b      	lsls	r3, r3, #2
 800186c:	440b      	add	r3, r1
 800186e:	333d      	adds	r3, #61	; 0x3d
 8001870:	2201      	movs	r2, #1
 8001872:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001874:	7bfa      	ldrb	r2, [r7, #15]
 8001876:	6879      	ldr	r1, [r7, #4]
 8001878:	4613      	mov	r3, r2
 800187a:	00db      	lsls	r3, r3, #3
 800187c:	4413      	add	r3, r2
 800187e:	009b      	lsls	r3, r3, #2
 8001880:	440b      	add	r3, r1
 8001882:	333c      	adds	r3, #60	; 0x3c
 8001884:	7bfa      	ldrb	r2, [r7, #15]
 8001886:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001888:	7bfa      	ldrb	r2, [r7, #15]
 800188a:	7bfb      	ldrb	r3, [r7, #15]
 800188c:	b298      	uxth	r0, r3
 800188e:	6879      	ldr	r1, [r7, #4]
 8001890:	4613      	mov	r3, r2
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	4413      	add	r3, r2
 8001896:	009b      	lsls	r3, r3, #2
 8001898:	440b      	add	r3, r1
 800189a:	3344      	adds	r3, #68	; 0x44
 800189c:	4602      	mov	r2, r0
 800189e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80018a0:	7bfa      	ldrb	r2, [r7, #15]
 80018a2:	6879      	ldr	r1, [r7, #4]
 80018a4:	4613      	mov	r3, r2
 80018a6:	00db      	lsls	r3, r3, #3
 80018a8:	4413      	add	r3, r2
 80018aa:	009b      	lsls	r3, r3, #2
 80018ac:	440b      	add	r3, r1
 80018ae:	3340      	adds	r3, #64	; 0x40
 80018b0:	2200      	movs	r2, #0
 80018b2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80018b4:	7bfa      	ldrb	r2, [r7, #15]
 80018b6:	6879      	ldr	r1, [r7, #4]
 80018b8:	4613      	mov	r3, r2
 80018ba:	00db      	lsls	r3, r3, #3
 80018bc:	4413      	add	r3, r2
 80018be:	009b      	lsls	r3, r3, #2
 80018c0:	440b      	add	r3, r1
 80018c2:	3348      	adds	r3, #72	; 0x48
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80018c8:	7bfa      	ldrb	r2, [r7, #15]
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	4613      	mov	r3, r2
 80018ce:	00db      	lsls	r3, r3, #3
 80018d0:	4413      	add	r3, r2
 80018d2:	009b      	lsls	r3, r3, #2
 80018d4:	440b      	add	r3, r1
 80018d6:	334c      	adds	r3, #76	; 0x4c
 80018d8:	2200      	movs	r2, #0
 80018da:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80018dc:	7bfa      	ldrb	r2, [r7, #15]
 80018de:	6879      	ldr	r1, [r7, #4]
 80018e0:	4613      	mov	r3, r2
 80018e2:	00db      	lsls	r3, r3, #3
 80018e4:	4413      	add	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	440b      	add	r3, r1
 80018ea:	3354      	adds	r3, #84	; 0x54
 80018ec:	2200      	movs	r2, #0
 80018ee:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80018f0:	7bfb      	ldrb	r3, [r7, #15]
 80018f2:	3301      	adds	r3, #1
 80018f4:	73fb      	strb	r3, [r7, #15]
 80018f6:	7bfa      	ldrb	r2, [r7, #15]
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	685b      	ldr	r3, [r3, #4]
 80018fc:	429a      	cmp	r2, r3
 80018fe:	d3af      	bcc.n	8001860 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001900:	2300      	movs	r3, #0
 8001902:	73fb      	strb	r3, [r7, #15]
 8001904:	e044      	b.n	8001990 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001906:	7bfa      	ldrb	r2, [r7, #15]
 8001908:	6879      	ldr	r1, [r7, #4]
 800190a:	4613      	mov	r3, r2
 800190c:	00db      	lsls	r3, r3, #3
 800190e:	4413      	add	r3, r2
 8001910:	009b      	lsls	r3, r3, #2
 8001912:	440b      	add	r3, r1
 8001914:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001918:	2200      	movs	r2, #0
 800191a:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800191c:	7bfa      	ldrb	r2, [r7, #15]
 800191e:	6879      	ldr	r1, [r7, #4]
 8001920:	4613      	mov	r3, r2
 8001922:	00db      	lsls	r3, r3, #3
 8001924:	4413      	add	r3, r2
 8001926:	009b      	lsls	r3, r3, #2
 8001928:	440b      	add	r3, r1
 800192a:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 800192e:	7bfa      	ldrb	r2, [r7, #15]
 8001930:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001932:	7bfa      	ldrb	r2, [r7, #15]
 8001934:	6879      	ldr	r1, [r7, #4]
 8001936:	4613      	mov	r3, r2
 8001938:	00db      	lsls	r3, r3, #3
 800193a:	4413      	add	r3, r2
 800193c:	009b      	lsls	r3, r3, #2
 800193e:	440b      	add	r3, r1
 8001940:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001944:	2200      	movs	r2, #0
 8001946:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001948:	7bfa      	ldrb	r2, [r7, #15]
 800194a:	6879      	ldr	r1, [r7, #4]
 800194c:	4613      	mov	r3, r2
 800194e:	00db      	lsls	r3, r3, #3
 8001950:	4413      	add	r3, r2
 8001952:	009b      	lsls	r3, r3, #2
 8001954:	440b      	add	r3, r1
 8001956:	f503 7322 	add.w	r3, r3, #648	; 0x288
 800195a:	2200      	movs	r2, #0
 800195c:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800195e:	7bfa      	ldrb	r2, [r7, #15]
 8001960:	6879      	ldr	r1, [r7, #4]
 8001962:	4613      	mov	r3, r2
 8001964:	00db      	lsls	r3, r3, #3
 8001966:	4413      	add	r3, r2
 8001968:	009b      	lsls	r3, r3, #2
 800196a:	440b      	add	r3, r1
 800196c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001970:	2200      	movs	r2, #0
 8001972:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001974:	7bfa      	ldrb	r2, [r7, #15]
 8001976:	6879      	ldr	r1, [r7, #4]
 8001978:	4613      	mov	r3, r2
 800197a:	00db      	lsls	r3, r3, #3
 800197c:	4413      	add	r3, r2
 800197e:	009b      	lsls	r3, r3, #2
 8001980:	440b      	add	r3, r1
 8001982:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001986:	2200      	movs	r2, #0
 8001988:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800198a:	7bfb      	ldrb	r3, [r7, #15]
 800198c:	3301      	adds	r3, #1
 800198e:	73fb      	strb	r3, [r7, #15]
 8001990:	7bfa      	ldrb	r2, [r7, #15]
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	685b      	ldr	r3, [r3, #4]
 8001996:	429a      	cmp	r2, r3
 8001998:	d3b5      	bcc.n	8001906 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	603b      	str	r3, [r7, #0]
 80019a0:	687e      	ldr	r6, [r7, #4]
 80019a2:	466d      	mov	r5, sp
 80019a4:	f106 0410 	add.w	r4, r6, #16
 80019a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80019ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80019b0:	e894 0003 	ldmia.w	r4, {r0, r1}
 80019b4:	e885 0003 	stmia.w	r5, {r0, r1}
 80019b8:	1d33      	adds	r3, r6, #4
 80019ba:	cb0e      	ldmia	r3, {r1, r2, r3}
 80019bc:	6838      	ldr	r0, [r7, #0]
 80019be:	f001 ff05 	bl	80037cc <USB_DevInit>
 80019c2:	4603      	mov	r3, r0
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d005      	beq.n	80019d4 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	2202      	movs	r2, #2
 80019cc:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80019d0:	2301      	movs	r3, #1
 80019d2:	e00d      	b.n	80019f0 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	2200      	movs	r2, #0
 80019d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	2201      	movs	r2, #1
 80019e0:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	681b      	ldr	r3, [r3, #0]
 80019e8:	4618      	mov	r0, r3
 80019ea:	f003 f854 	bl	8004a96 <USB_DevDisconnect>

  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3714      	adds	r7, #20
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080019f8 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b084      	sub	sp, #16
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	681b      	ldr	r3, [r3, #0]
 8001a04:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001a0c:	2b01      	cmp	r3, #1
 8001a0e:	d101      	bne.n	8001a14 <HAL_PCD_Start+0x1c>
 8001a10:	2302      	movs	r3, #2
 8001a12:	e020      	b.n	8001a56 <HAL_PCD_Start+0x5e>
 8001a14:	687b      	ldr	r3, [r7, #4]
 8001a16:	2201      	movs	r2, #1
 8001a18:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001a20:	2b01      	cmp	r3, #1
 8001a22:	d109      	bne.n	8001a38 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001a24:	687b      	ldr	r3, [r7, #4]
 8001a26:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001a28:	2b01      	cmp	r3, #1
 8001a2a:	d005      	beq.n	8001a38 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001a30:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001a34:	68fb      	ldr	r3, [r7, #12]
 8001a36:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	4618      	mov	r0, r3
 8001a3e:	f001 fe57 	bl	80036f0 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4618      	mov	r0, r3
 8001a48:	f003 f804 	bl	8004a54 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	2200      	movs	r2, #0
 8001a50:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001a54:	2300      	movs	r3, #0
}
 8001a56:	4618      	mov	r0, r3
 8001a58:	3710      	adds	r7, #16
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	bd80      	pop	{r7, pc}

08001a5e <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001a5e:	b590      	push	{r4, r7, lr}
 8001a60:	b08d      	sub	sp, #52	; 0x34
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	681b      	ldr	r3, [r3, #0]
 8001a6a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001a6c:	6a3b      	ldr	r3, [r7, #32]
 8001a6e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4618      	mov	r0, r3
 8001a76:	f003 f8c2 	bl	8004bfe <USB_GetMode>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2b00      	cmp	r3, #0
 8001a7e:	f040 848a 	bne.w	8002396 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	4618      	mov	r0, r3
 8001a88:	f003 f826 	bl	8004ad8 <USB_ReadInterrupts>
 8001a8c:	4603      	mov	r3, r0
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	f000 8480 	beq.w	8002394 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001a94:	69fb      	ldr	r3, [r7, #28]
 8001a96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001a9a:	689b      	ldr	r3, [r3, #8]
 8001a9c:	0a1b      	lsrs	r3, r3, #8
 8001a9e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	4618      	mov	r0, r3
 8001aae:	f003 f813 	bl	8004ad8 <USB_ReadInterrupts>
 8001ab2:	4603      	mov	r3, r0
 8001ab4:	f003 0302 	and.w	r3, r3, #2
 8001ab8:	2b02      	cmp	r3, #2
 8001aba:	d107      	bne.n	8001acc <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001abc:	687b      	ldr	r3, [r7, #4]
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	695a      	ldr	r2, [r3, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	f002 0202 	and.w	r2, r2, #2
 8001aca:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	681b      	ldr	r3, [r3, #0]
 8001ad0:	4618      	mov	r0, r3
 8001ad2:	f003 f801 	bl	8004ad8 <USB_ReadInterrupts>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	f003 0310 	and.w	r3, r3, #16
 8001adc:	2b10      	cmp	r3, #16
 8001ade:	d161      	bne.n	8001ba4 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	681b      	ldr	r3, [r3, #0]
 8001ae4:	699a      	ldr	r2, [r3, #24]
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	681b      	ldr	r3, [r3, #0]
 8001aea:	f022 0210 	bic.w	r2, r2, #16
 8001aee:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001af0:	6a3b      	ldr	r3, [r7, #32]
 8001af2:	6a1b      	ldr	r3, [r3, #32]
 8001af4:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001af6:	69bb      	ldr	r3, [r7, #24]
 8001af8:	f003 020f 	and.w	r2, r3, #15
 8001afc:	4613      	mov	r3, r2
 8001afe:	00db      	lsls	r3, r3, #3
 8001b00:	4413      	add	r3, r2
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001b08:	687a      	ldr	r2, [r7, #4]
 8001b0a:	4413      	add	r3, r2
 8001b0c:	3304      	adds	r3, #4
 8001b0e:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001b10:	69bb      	ldr	r3, [r7, #24]
 8001b12:	0c5b      	lsrs	r3, r3, #17
 8001b14:	f003 030f 	and.w	r3, r3, #15
 8001b18:	2b02      	cmp	r3, #2
 8001b1a:	d124      	bne.n	8001b66 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001b1c:	69ba      	ldr	r2, [r7, #24]
 8001b1e:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001b22:	4013      	ands	r3, r2
 8001b24:	2b00      	cmp	r3, #0
 8001b26:	d035      	beq.n	8001b94 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b28:	697b      	ldr	r3, [r7, #20]
 8001b2a:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001b2c:	69bb      	ldr	r3, [r7, #24]
 8001b2e:	091b      	lsrs	r3, r3, #4
 8001b30:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001b32:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b36:	b29b      	uxth	r3, r3
 8001b38:	461a      	mov	r2, r3
 8001b3a:	6a38      	ldr	r0, [r7, #32]
 8001b3c:	f002 fe38 	bl	80047b0 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b40:	697b      	ldr	r3, [r7, #20]
 8001b42:	691a      	ldr	r2, [r3, #16]
 8001b44:	69bb      	ldr	r3, [r7, #24]
 8001b46:	091b      	lsrs	r3, r3, #4
 8001b48:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b4c:	441a      	add	r2, r3
 8001b4e:	697b      	ldr	r3, [r7, #20]
 8001b50:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b52:	697b      	ldr	r3, [r7, #20]
 8001b54:	6a1a      	ldr	r2, [r3, #32]
 8001b56:	69bb      	ldr	r3, [r7, #24]
 8001b58:	091b      	lsrs	r3, r3, #4
 8001b5a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b5e:	441a      	add	r2, r3
 8001b60:	697b      	ldr	r3, [r7, #20]
 8001b62:	621a      	str	r2, [r3, #32]
 8001b64:	e016      	b.n	8001b94 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001b66:	69bb      	ldr	r3, [r7, #24]
 8001b68:	0c5b      	lsrs	r3, r3, #17
 8001b6a:	f003 030f 	and.w	r3, r3, #15
 8001b6e:	2b06      	cmp	r3, #6
 8001b70:	d110      	bne.n	8001b94 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001b78:	2208      	movs	r2, #8
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	6a38      	ldr	r0, [r7, #32]
 8001b7e:	f002 fe17 	bl	80047b0 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001b82:	697b      	ldr	r3, [r7, #20]
 8001b84:	6a1a      	ldr	r2, [r3, #32]
 8001b86:	69bb      	ldr	r3, [r7, #24]
 8001b88:	091b      	lsrs	r3, r3, #4
 8001b8a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001b8e:	441a      	add	r2, r3
 8001b90:	697b      	ldr	r3, [r7, #20]
 8001b92:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	681b      	ldr	r3, [r3, #0]
 8001b98:	699a      	ldr	r2, [r3, #24]
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f042 0210 	orr.w	r2, r2, #16
 8001ba2:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	681b      	ldr	r3, [r3, #0]
 8001ba8:	4618      	mov	r0, r3
 8001baa:	f002 ff95 	bl	8004ad8 <USB_ReadInterrupts>
 8001bae:	4603      	mov	r3, r0
 8001bb0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001bb4:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001bb8:	f040 80a7 	bne.w	8001d0a <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	681b      	ldr	r3, [r3, #0]
 8001bc4:	4618      	mov	r0, r3
 8001bc6:	f002 ff9a 	bl	8004afe <USB_ReadDevAllOutEpInterrupt>
 8001bca:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001bcc:	e099      	b.n	8001d02 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001bce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001bd0:	f003 0301 	and.w	r3, r3, #1
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	f000 808e 	beq.w	8001cf6 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001bda:	687b      	ldr	r3, [r7, #4]
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001be0:	b2d2      	uxtb	r2, r2
 8001be2:	4611      	mov	r1, r2
 8001be4:	4618      	mov	r0, r3
 8001be6:	f002 ffbe 	bl	8004b66 <USB_ReadDevOutEPInterrupt>
 8001bea:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001bec:	693b      	ldr	r3, [r7, #16]
 8001bee:	f003 0301 	and.w	r3, r3, #1
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d00c      	beq.n	8001c10 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bf8:	015a      	lsls	r2, r3, #5
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c02:	461a      	mov	r2, r3
 8001c04:	2301      	movs	r3, #1
 8001c06:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001c08:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c0a:	6878      	ldr	r0, [r7, #4]
 8001c0c:	f000 feaa 	bl	8002964 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001c10:	693b      	ldr	r3, [r7, #16]
 8001c12:	f003 0308 	and.w	r3, r3, #8
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d00c      	beq.n	8001c34 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c1c:	015a      	lsls	r2, r3, #5
 8001c1e:	69fb      	ldr	r3, [r7, #28]
 8001c20:	4413      	add	r3, r2
 8001c22:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c26:	461a      	mov	r2, r3
 8001c28:	2308      	movs	r3, #8
 8001c2a:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001c2c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001c2e:	6878      	ldr	r0, [r7, #4]
 8001c30:	f000 ff80 	bl	8002b34 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001c34:	693b      	ldr	r3, [r7, #16]
 8001c36:	f003 0310 	and.w	r3, r3, #16
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d008      	beq.n	8001c50 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001c3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c40:	015a      	lsls	r2, r3, #5
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	4413      	add	r3, r2
 8001c46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	2310      	movs	r3, #16
 8001c4e:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001c50:	693b      	ldr	r3, [r7, #16]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d030      	beq.n	8001cbc <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001c5a:	6a3b      	ldr	r3, [r7, #32]
 8001c5c:	695b      	ldr	r3, [r3, #20]
 8001c5e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c62:	2b80      	cmp	r3, #128	; 0x80
 8001c64:	d109      	bne.n	8001c7a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001c66:	69fb      	ldr	r3, [r7, #28]
 8001c68:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001c6c:	685b      	ldr	r3, [r3, #4]
 8001c6e:	69fa      	ldr	r2, [r7, #28]
 8001c70:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001c74:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c78:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001c7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001c7c:	4613      	mov	r3, r2
 8001c7e:	00db      	lsls	r3, r3, #3
 8001c80:	4413      	add	r3, r2
 8001c82:	009b      	lsls	r3, r3, #2
 8001c84:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001c88:	687a      	ldr	r2, [r7, #4]
 8001c8a:	4413      	add	r3, r2
 8001c8c:	3304      	adds	r3, #4
 8001c8e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001c90:	697b      	ldr	r3, [r7, #20]
 8001c92:	78db      	ldrb	r3, [r3, #3]
 8001c94:	2b01      	cmp	r3, #1
 8001c96:	d108      	bne.n	8001caa <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001c98:	697b      	ldr	r3, [r7, #20]
 8001c9a:	2200      	movs	r2, #0
 8001c9c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	6878      	ldr	r0, [r7, #4]
 8001ca6:	f004 ffcf 	bl	8006c48 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001caa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cac:	015a      	lsls	r2, r3, #5
 8001cae:	69fb      	ldr	r3, [r7, #28]
 8001cb0:	4413      	add	r3, r2
 8001cb2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cb6:	461a      	mov	r2, r3
 8001cb8:	2302      	movs	r3, #2
 8001cba:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001cbc:	693b      	ldr	r3, [r7, #16]
 8001cbe:	f003 0320 	and.w	r3, r3, #32
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	d008      	beq.n	8001cd8 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001cc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cc8:	015a      	lsls	r2, r3, #5
 8001cca:	69fb      	ldr	r3, [r7, #28]
 8001ccc:	4413      	add	r3, r2
 8001cce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cd2:	461a      	mov	r2, r3
 8001cd4:	2320      	movs	r3, #32
 8001cd6:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001cd8:	693b      	ldr	r3, [r7, #16]
 8001cda:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d009      	beq.n	8001cf6 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ce4:	015a      	lsls	r2, r3, #5
 8001ce6:	69fb      	ldr	r3, [r7, #28]
 8001ce8:	4413      	add	r3, r2
 8001cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001cee:	461a      	mov	r2, r3
 8001cf0:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001cf4:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001cf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001cf8:	3301      	adds	r3, #1
 8001cfa:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001cfc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001cfe:	085b      	lsrs	r3, r3, #1
 8001d00:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001d02:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f47f af62 	bne.w	8001bce <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	681b      	ldr	r3, [r3, #0]
 8001d0e:	4618      	mov	r0, r3
 8001d10:	f002 fee2 	bl	8004ad8 <USB_ReadInterrupts>
 8001d14:	4603      	mov	r3, r0
 8001d16:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001d1a:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001d1e:	f040 80db 	bne.w	8001ed8 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f002 ff03 	bl	8004b32 <USB_ReadDevAllInEpInterrupt>
 8001d2c:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001d32:	e0cd      	b.n	8001ed0 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001d34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001d36:	f003 0301 	and.w	r3, r3, #1
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	f000 80c2 	beq.w	8001ec4 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d46:	b2d2      	uxtb	r2, r2
 8001d48:	4611      	mov	r1, r2
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f002 ff29 	bl	8004ba2 <USB_ReadDevInEPInterrupt>
 8001d50:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001d52:	693b      	ldr	r3, [r7, #16]
 8001d54:	f003 0301 	and.w	r3, r3, #1
 8001d58:	2b00      	cmp	r3, #0
 8001d5a:	d057      	beq.n	8001e0c <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001d5c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d5e:	f003 030f 	and.w	r3, r3, #15
 8001d62:	2201      	movs	r2, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8001d6a:	69fb      	ldr	r3, [r7, #28]
 8001d6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d70:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	69f9      	ldr	r1, [r7, #28]
 8001d78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8001d7c:	4013      	ands	r3, r2
 8001d7e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8001d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d82:	015a      	lsls	r2, r3, #5
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	4413      	add	r3, r2
 8001d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001d8c:	461a      	mov	r2, r3
 8001d8e:	2301      	movs	r3, #1
 8001d90:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	691b      	ldr	r3, [r3, #16]
 8001d96:	2b01      	cmp	r3, #1
 8001d98:	d132      	bne.n	8001e00 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8001d9a:	6879      	ldr	r1, [r7, #4]
 8001d9c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d9e:	4613      	mov	r3, r2
 8001da0:	00db      	lsls	r3, r3, #3
 8001da2:	4413      	add	r3, r2
 8001da4:	009b      	lsls	r3, r3, #2
 8001da6:	440b      	add	r3, r1
 8001da8:	334c      	adds	r3, #76	; 0x4c
 8001daa:	6819      	ldr	r1, [r3, #0]
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001db0:	4613      	mov	r3, r2
 8001db2:	00db      	lsls	r3, r3, #3
 8001db4:	4413      	add	r3, r2
 8001db6:	009b      	lsls	r3, r3, #2
 8001db8:	4403      	add	r3, r0
 8001dba:	3348      	adds	r3, #72	; 0x48
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4419      	add	r1, r3
 8001dc0:	6878      	ldr	r0, [r7, #4]
 8001dc2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001dc4:	4613      	mov	r3, r2
 8001dc6:	00db      	lsls	r3, r3, #3
 8001dc8:	4413      	add	r3, r2
 8001dca:	009b      	lsls	r3, r3, #2
 8001dcc:	4403      	add	r3, r0
 8001dce:	334c      	adds	r3, #76	; 0x4c
 8001dd0:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8001dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d113      	bne.n	8001e00 <HAL_PCD_IRQHandler+0x3a2>
 8001dd8:	6879      	ldr	r1, [r7, #4]
 8001dda:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001ddc:	4613      	mov	r3, r2
 8001dde:	00db      	lsls	r3, r3, #3
 8001de0:	4413      	add	r3, r2
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	440b      	add	r3, r1
 8001de6:	3354      	adds	r3, #84	; 0x54
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d108      	bne.n	8001e00 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	6818      	ldr	r0, [r3, #0]
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001df8:	461a      	mov	r2, r3
 8001dfa:	2101      	movs	r1, #1
 8001dfc:	f002 ff30 	bl	8004c60 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8001e00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e02:	b2db      	uxtb	r3, r3
 8001e04:	4619      	mov	r1, r3
 8001e06:	6878      	ldr	r0, [r7, #4]
 8001e08:	f004 fea3 	bl	8006b52 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8001e0c:	693b      	ldr	r3, [r7, #16]
 8001e0e:	f003 0308 	and.w	r3, r3, #8
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d008      	beq.n	8001e28 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8001e16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e18:	015a      	lsls	r2, r3, #5
 8001e1a:	69fb      	ldr	r3, [r7, #28]
 8001e1c:	4413      	add	r3, r2
 8001e1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e22:	461a      	mov	r2, r3
 8001e24:	2308      	movs	r3, #8
 8001e26:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8001e28:	693b      	ldr	r3, [r7, #16]
 8001e2a:	f003 0310 	and.w	r3, r3, #16
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d008      	beq.n	8001e44 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8001e32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e34:	015a      	lsls	r2, r3, #5
 8001e36:	69fb      	ldr	r3, [r7, #28]
 8001e38:	4413      	add	r3, r2
 8001e3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e3e:	461a      	mov	r2, r3
 8001e40:	2310      	movs	r3, #16
 8001e42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8001e44:	693b      	ldr	r3, [r7, #16]
 8001e46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d008      	beq.n	8001e60 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e50:	015a      	lsls	r2, r3, #5
 8001e52:	69fb      	ldr	r3, [r7, #28]
 8001e54:	4413      	add	r3, r2
 8001e56:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	2340      	movs	r3, #64	; 0x40
 8001e5e:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8001e60:	693b      	ldr	r3, [r7, #16]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d023      	beq.n	8001eb2 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8001e6a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001e6c:	6a38      	ldr	r0, [r7, #32]
 8001e6e:	f001 fe11 	bl	8003a94 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8001e72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e74:	4613      	mov	r3, r2
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4413      	add	r3, r2
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	3338      	adds	r3, #56	; 0x38
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	4413      	add	r3, r2
 8001e82:	3304      	adds	r3, #4
 8001e84:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001e86:	697b      	ldr	r3, [r7, #20]
 8001e88:	78db      	ldrb	r3, [r3, #3]
 8001e8a:	2b01      	cmp	r3, #1
 8001e8c:	d108      	bne.n	8001ea0 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8001e8e:	697b      	ldr	r3, [r7, #20]
 8001e90:	2200      	movs	r2, #0
 8001e92:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8001e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e96:	b2db      	uxtb	r3, r3
 8001e98:	4619      	mov	r1, r3
 8001e9a:	6878      	ldr	r0, [r7, #4]
 8001e9c:	f004 fee6 	bl	8006c6c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8001ea0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ea2:	015a      	lsls	r2, r3, #5
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	4413      	add	r3, r2
 8001ea8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001eac:	461a      	mov	r2, r3
 8001eae:	2302      	movs	r3, #2
 8001eb0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8001eb2:	693b      	ldr	r3, [r7, #16]
 8001eb4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001eb8:	2b00      	cmp	r3, #0
 8001eba:	d003      	beq.n	8001ec4 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8001ebc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ebe:	6878      	ldr	r0, [r7, #4]
 8001ec0:	f000 fcc3 	bl	800284a <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8001ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ec6:	3301      	adds	r3, #1
 8001ec8:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ecc:	085b      	lsrs	r3, r3, #1
 8001ece:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	f47f af2e 	bne.w	8001d34 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	4618      	mov	r0, r3
 8001ede:	f002 fdfb 	bl	8004ad8 <USB_ReadInterrupts>
 8001ee2:	4603      	mov	r3, r0
 8001ee4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8001ee8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8001eec:	d122      	bne.n	8001f34 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001eee:	69fb      	ldr	r3, [r7, #28]
 8001ef0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001ef4:	685b      	ldr	r3, [r3, #4]
 8001ef6:	69fa      	ldr	r2, [r7, #28]
 8001ef8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001efc:	f023 0301 	bic.w	r3, r3, #1
 8001f00:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8001f08:	2b01      	cmp	r3, #1
 8001f0a:	d108      	bne.n	8001f1e <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	2200      	movs	r2, #0
 8001f10:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8001f14:	2100      	movs	r1, #0
 8001f16:	6878      	ldr	r0, [r7, #4]
 8001f18:	f000 feaa 	bl	8002c70 <HAL_PCDEx_LPM_Callback>
 8001f1c:	e002      	b.n	8001f24 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8001f1e:	6878      	ldr	r0, [r7, #4]
 8001f20:	f004 fe84 	bl	8006c2c <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	681b      	ldr	r3, [r3, #0]
 8001f28:	695a      	ldr	r2, [r3, #20]
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8001f32:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	4618      	mov	r0, r3
 8001f3a:	f002 fdcd 	bl	8004ad8 <USB_ReadInterrupts>
 8001f3e:	4603      	mov	r3, r0
 8001f40:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001f44:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8001f48:	d112      	bne.n	8001f70 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8001f4a:	69fb      	ldr	r3, [r7, #28]
 8001f4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f50:	689b      	ldr	r3, [r3, #8]
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	2b01      	cmp	r3, #1
 8001f58:	d102      	bne.n	8001f60 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8001f5a:	6878      	ldr	r0, [r7, #4]
 8001f5c:	f004 fe40 	bl	8006be0 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	695a      	ldr	r2, [r3, #20]
 8001f66:	687b      	ldr	r3, [r7, #4]
 8001f68:	681b      	ldr	r3, [r3, #0]
 8001f6a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8001f6e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4618      	mov	r0, r3
 8001f76:	f002 fdaf 	bl	8004ad8 <USB_ReadInterrupts>
 8001f7a:	4603      	mov	r3, r0
 8001f7c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f80:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001f84:	f040 80b7 	bne.w	80020f6 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8001f88:	69fb      	ldr	r3, [r7, #28]
 8001f8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f8e:	685b      	ldr	r3, [r3, #4]
 8001f90:	69fa      	ldr	r2, [r7, #28]
 8001f92:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f96:	f023 0301 	bic.w	r3, r3, #1
 8001f9a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	681b      	ldr	r3, [r3, #0]
 8001fa0:	2110      	movs	r1, #16
 8001fa2:	4618      	mov	r0, r3
 8001fa4:	f001 fd76 	bl	8003a94 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa8:	2300      	movs	r3, #0
 8001faa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001fac:	e046      	b.n	800203c <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8001fae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fb0:	015a      	lsls	r2, r3, #5
 8001fb2:	69fb      	ldr	r3, [r7, #28]
 8001fb4:	4413      	add	r3, r2
 8001fb6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fba:	461a      	mov	r2, r3
 8001fbc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001fc0:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8001fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fc4:	015a      	lsls	r2, r3, #5
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	4413      	add	r3, r2
 8001fca:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001fd2:	0151      	lsls	r1, r2, #5
 8001fd4:	69fa      	ldr	r2, [r7, #28]
 8001fd6:	440a      	add	r2, r1
 8001fd8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8001fdc:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8001fe0:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8001fe2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001fe4:	015a      	lsls	r2, r3, #5
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	4413      	add	r3, r2
 8001fea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001fee:	461a      	mov	r2, r3
 8001ff0:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8001ff4:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8001ff6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001ff8:	015a      	lsls	r2, r3, #5
 8001ffa:	69fb      	ldr	r3, [r7, #28]
 8001ffc:	4413      	add	r3, r2
 8001ffe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002006:	0151      	lsls	r1, r2, #5
 8002008:	69fa      	ldr	r2, [r7, #28]
 800200a:	440a      	add	r2, r1
 800200c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002010:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002014:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002016:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002018:	015a      	lsls	r2, r3, #5
 800201a:	69fb      	ldr	r3, [r7, #28]
 800201c:	4413      	add	r3, r2
 800201e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002026:	0151      	lsls	r1, r2, #5
 8002028:	69fa      	ldr	r2, [r7, #28]
 800202a:	440a      	add	r2, r1
 800202c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002030:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002034:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002036:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002038:	3301      	adds	r3, #1
 800203a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002042:	429a      	cmp	r2, r3
 8002044:	d3b3      	bcc.n	8001fae <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002046:	69fb      	ldr	r3, [r7, #28]
 8002048:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800204c:	69db      	ldr	r3, [r3, #28]
 800204e:	69fa      	ldr	r2, [r7, #28]
 8002050:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002054:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002058:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800205e:	2b00      	cmp	r3, #0
 8002060:	d016      	beq.n	8002090 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002062:	69fb      	ldr	r3, [r7, #28]
 8002064:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002068:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800206c:	69fa      	ldr	r2, [r7, #28]
 800206e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002072:	f043 030b 	orr.w	r3, r3, #11
 8002076:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800207a:	69fb      	ldr	r3, [r7, #28]
 800207c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002080:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002082:	69fa      	ldr	r2, [r7, #28]
 8002084:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002088:	f043 030b 	orr.w	r3, r3, #11
 800208c:	6453      	str	r3, [r2, #68]	; 0x44
 800208e:	e015      	b.n	80020bc <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002090:	69fb      	ldr	r3, [r7, #28]
 8002092:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002096:	695b      	ldr	r3, [r3, #20]
 8002098:	69fa      	ldr	r2, [r7, #28]
 800209a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800209e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80020a2:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 80020a6:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 80020a8:	69fb      	ldr	r3, [r7, #28]
 80020aa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020ae:	691b      	ldr	r3, [r3, #16]
 80020b0:	69fa      	ldr	r2, [r7, #28]
 80020b2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020b6:	f043 030b 	orr.w	r3, r3, #11
 80020ba:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 80020bc:	69fb      	ldr	r3, [r7, #28]
 80020be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	69fa      	ldr	r2, [r7, #28]
 80020c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80020ca:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 80020ce:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	6818      	ldr	r0, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	691b      	ldr	r3, [r3, #16]
 80020d8:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 80020e0:	461a      	mov	r2, r3
 80020e2:	f002 fdbd 	bl	8004c60 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	695a      	ldr	r2, [r3, #20]
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 80020f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4618      	mov	r0, r3
 80020fc:	f002 fcec 	bl	8004ad8 <USB_ReadInterrupts>
 8002100:	4603      	mov	r3, r0
 8002102:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002106:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800210a:	d124      	bne.n	8002156 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	4618      	mov	r0, r3
 8002112:	f002 fd82 	bl	8004c1a <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	4618      	mov	r0, r3
 800211c:	f001 fd37 	bl	8003b8e <USB_GetDevSpeed>
 8002120:	4603      	mov	r3, r0
 8002122:	461a      	mov	r2, r3
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681c      	ldr	r4, [r3, #0]
 800212c:	f001 f9d0 	bl	80034d0 <HAL_RCC_GetHCLKFreq>
 8002130:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002136:	b2db      	uxtb	r3, r3
 8002138:	461a      	mov	r2, r3
 800213a:	4620      	mov	r0, r4
 800213c:	f001 fa36 	bl	80035ac <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	f004 fd2e 	bl	8006ba2 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002154:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	4618      	mov	r0, r3
 800215c:	f002 fcbc 	bl	8004ad8 <USB_ReadInterrupts>
 8002160:	4603      	mov	r3, r0
 8002162:	f003 0308 	and.w	r3, r3, #8
 8002166:	2b08      	cmp	r3, #8
 8002168:	d10a      	bne.n	8002180 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800216a:	6878      	ldr	r0, [r7, #4]
 800216c:	f004 fd0b 	bl	8006b86 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	695a      	ldr	r2, [r3, #20]
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	681b      	ldr	r3, [r3, #0]
 800217a:	f002 0208 	and.w	r2, r2, #8
 800217e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f002 fca7 	bl	8004ad8 <USB_ReadInterrupts>
 800218a:	4603      	mov	r3, r0
 800218c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002190:	2b80      	cmp	r3, #128	; 0x80
 8002192:	d122      	bne.n	80021da <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002194:	6a3b      	ldr	r3, [r7, #32]
 8002196:	699b      	ldr	r3, [r3, #24]
 8002198:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800219c:	6a3b      	ldr	r3, [r7, #32]
 800219e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021a0:	2301      	movs	r3, #1
 80021a2:	627b      	str	r3, [r7, #36]	; 0x24
 80021a4:	e014      	b.n	80021d0 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 80021a6:	6879      	ldr	r1, [r7, #4]
 80021a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021aa:	4613      	mov	r3, r2
 80021ac:	00db      	lsls	r3, r3, #3
 80021ae:	4413      	add	r3, r2
 80021b0:	009b      	lsls	r3, r3, #2
 80021b2:	440b      	add	r3, r1
 80021b4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80021b8:	781b      	ldrb	r3, [r3, #0]
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d105      	bne.n	80021ca <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 80021be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	4619      	mov	r1, r3
 80021c4:	6878      	ldr	r0, [r7, #4]
 80021c6:	f000 fb0f 	bl	80027e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021cc:	3301      	adds	r3, #1
 80021ce:	627b      	str	r3, [r7, #36]	; 0x24
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	685b      	ldr	r3, [r3, #4]
 80021d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80021d6:	429a      	cmp	r2, r3
 80021d8:	d3e5      	bcc.n	80021a6 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4618      	mov	r0, r3
 80021e0:	f002 fc7a 	bl	8004ad8 <USB_ReadInterrupts>
 80021e4:	4603      	mov	r3, r0
 80021e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80021ea:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80021ee:	d13b      	bne.n	8002268 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80021f0:	2301      	movs	r3, #1
 80021f2:	627b      	str	r3, [r7, #36]	; 0x24
 80021f4:	e02b      	b.n	800224e <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 80021f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80021f8:	015a      	lsls	r2, r3, #5
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	4413      	add	r3, r2
 80021fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002206:	6879      	ldr	r1, [r7, #4]
 8002208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800220a:	4613      	mov	r3, r2
 800220c:	00db      	lsls	r3, r3, #3
 800220e:	4413      	add	r3, r2
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	440b      	add	r3, r1
 8002214:	3340      	adds	r3, #64	; 0x40
 8002216:	781b      	ldrb	r3, [r3, #0]
 8002218:	2b01      	cmp	r3, #1
 800221a:	d115      	bne.n	8002248 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 800221c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 800221e:	2b00      	cmp	r3, #0
 8002220:	da12      	bge.n	8002248 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002222:	6879      	ldr	r1, [r7, #4]
 8002224:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002226:	4613      	mov	r3, r2
 8002228:	00db      	lsls	r3, r3, #3
 800222a:	4413      	add	r3, r2
 800222c:	009b      	lsls	r3, r3, #2
 800222e:	440b      	add	r3, r1
 8002230:	333f      	adds	r3, #63	; 0x3f
 8002232:	2201      	movs	r2, #1
 8002234:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002238:	b2db      	uxtb	r3, r3
 800223a:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800223e:	b2db      	uxtb	r3, r3
 8002240:	4619      	mov	r1, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f000 fad0 	bl	80027e8 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800224a:	3301      	adds	r3, #1
 800224c:	627b      	str	r3, [r7, #36]	; 0x24
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	685b      	ldr	r3, [r3, #4]
 8002252:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002254:	429a      	cmp	r2, r3
 8002256:	d3ce      	bcc.n	80021f6 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	695a      	ldr	r2, [r3, #20]
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002266:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	4618      	mov	r0, r3
 800226e:	f002 fc33 	bl	8004ad8 <USB_ReadInterrupts>
 8002272:	4603      	mov	r3, r0
 8002274:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002278:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800227c:	d155      	bne.n	800232a <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800227e:	2301      	movs	r3, #1
 8002280:	627b      	str	r3, [r7, #36]	; 0x24
 8002282:	e045      	b.n	8002310 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002284:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002286:	015a      	lsls	r2, r3, #5
 8002288:	69fb      	ldr	r3, [r7, #28]
 800228a:	4413      	add	r3, r2
 800228c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002294:	6879      	ldr	r1, [r7, #4]
 8002296:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002298:	4613      	mov	r3, r2
 800229a:	00db      	lsls	r3, r3, #3
 800229c:	4413      	add	r3, r2
 800229e:	009b      	lsls	r3, r3, #2
 80022a0:	440b      	add	r3, r1
 80022a2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	2b01      	cmp	r3, #1
 80022aa:	d12e      	bne.n	800230a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022ac:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	da2b      	bge.n	800230a <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 80022b2:	69bb      	ldr	r3, [r7, #24]
 80022b4:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 80022be:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 80022c2:	429a      	cmp	r2, r3
 80022c4:	d121      	bne.n	800230a <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 80022c6:	6879      	ldr	r1, [r7, #4]
 80022c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022ca:	4613      	mov	r3, r2
 80022cc:	00db      	lsls	r3, r3, #3
 80022ce:	4413      	add	r3, r2
 80022d0:	009b      	lsls	r3, r3, #2
 80022d2:	440b      	add	r3, r1
 80022d4:	f203 237f 	addw	r3, r3, #639	; 0x27f
 80022d8:	2201      	movs	r2, #1
 80022da:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 80022dc:	6a3b      	ldr	r3, [r7, #32]
 80022de:	699b      	ldr	r3, [r3, #24]
 80022e0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 80022e4:	6a3b      	ldr	r3, [r7, #32]
 80022e6:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 80022e8:	6a3b      	ldr	r3, [r7, #32]
 80022ea:	695b      	ldr	r3, [r3, #20]
 80022ec:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80022f0:	2b00      	cmp	r3, #0
 80022f2:	d10a      	bne.n	800230a <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 80022f4:	69fb      	ldr	r3, [r7, #28]
 80022f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022fa:	685b      	ldr	r3, [r3, #4]
 80022fc:	69fa      	ldr	r2, [r7, #28]
 80022fe:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002302:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002306:	6053      	str	r3, [r2, #4]
            break;
 8002308:	e007      	b.n	800231a <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800230a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800230c:	3301      	adds	r3, #1
 800230e:	627b      	str	r3, [r7, #36]	; 0x24
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	685b      	ldr	r3, [r3, #4]
 8002314:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002316:	429a      	cmp	r2, r3
 8002318:	d3b4      	bcc.n	8002284 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	695a      	ldr	r2, [r3, #20]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 8002328:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	4618      	mov	r0, r3
 8002330:	f002 fbd2 	bl	8004ad8 <USB_ReadInterrupts>
 8002334:	4603      	mov	r3, r0
 8002336:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800233a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800233e:	d10a      	bne.n	8002356 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8002340:	6878      	ldr	r0, [r7, #4]
 8002342:	f004 fca5 	bl	8006c90 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	695a      	ldr	r2, [r3, #20]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8002354:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f002 fbbc 	bl	8004ad8 <USB_ReadInterrupts>
 8002360:	4603      	mov	r3, r0
 8002362:	f003 0304 	and.w	r3, r3, #4
 8002366:	2b04      	cmp	r3, #4
 8002368:	d115      	bne.n	8002396 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	685b      	ldr	r3, [r3, #4]
 8002370:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002372:	69bb      	ldr	r3, [r7, #24]
 8002374:	f003 0304 	and.w	r3, r3, #4
 8002378:	2b00      	cmp	r3, #0
 800237a:	d002      	beq.n	8002382 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800237c:	6878      	ldr	r0, [r7, #4]
 800237e:	f004 fc95 	bl	8006cac <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	6859      	ldr	r1, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	681b      	ldr	r3, [r3, #0]
 800238c:	69ba      	ldr	r2, [r7, #24]
 800238e:	430a      	orrs	r2, r1
 8002390:	605a      	str	r2, [r3, #4]
 8002392:	e000      	b.n	8002396 <HAL_PCD_IRQHandler+0x938>
      return;
 8002394:	bf00      	nop
    }
  }
}
 8002396:	3734      	adds	r7, #52	; 0x34
 8002398:	46bd      	mov	sp, r7
 800239a:	bd90      	pop	{r4, r7, pc}

0800239c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	b082      	sub	sp, #8
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	460b      	mov	r3, r1
 80023a6:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80023ae:	2b01      	cmp	r3, #1
 80023b0:	d101      	bne.n	80023b6 <HAL_PCD_SetAddress+0x1a>
 80023b2:	2302      	movs	r3, #2
 80023b4:	e013      	b.n	80023de <HAL_PCD_SetAddress+0x42>
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	2201      	movs	r2, #1
 80023ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	78fa      	ldrb	r2, [r7, #3]
 80023c2:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	78fa      	ldrb	r2, [r7, #3]
 80023cc:	4611      	mov	r1, r2
 80023ce:	4618      	mov	r0, r3
 80023d0:	f002 fb1a 	bl	8004a08 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 80023d4:	687b      	ldr	r3, [r7, #4]
 80023d6:	2200      	movs	r2, #0
 80023d8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80023dc:	2300      	movs	r3, #0
}
 80023de:	4618      	mov	r0, r3
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}

080023e6 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 80023e6:	b580      	push	{r7, lr}
 80023e8:	b084      	sub	sp, #16
 80023ea:	af00      	add	r7, sp, #0
 80023ec:	6078      	str	r0, [r7, #4]
 80023ee:	4608      	mov	r0, r1
 80023f0:	4611      	mov	r1, r2
 80023f2:	461a      	mov	r2, r3
 80023f4:	4603      	mov	r3, r0
 80023f6:	70fb      	strb	r3, [r7, #3]
 80023f8:	460b      	mov	r3, r1
 80023fa:	803b      	strh	r3, [r7, #0]
 80023fc:	4613      	mov	r3, r2
 80023fe:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8002400:	2300      	movs	r3, #0
 8002402:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002404:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002408:	2b00      	cmp	r3, #0
 800240a:	da0f      	bge.n	800242c <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800240c:	78fb      	ldrb	r3, [r7, #3]
 800240e:	f003 020f 	and.w	r2, r3, #15
 8002412:	4613      	mov	r3, r2
 8002414:	00db      	lsls	r3, r3, #3
 8002416:	4413      	add	r3, r2
 8002418:	009b      	lsls	r3, r3, #2
 800241a:	3338      	adds	r3, #56	; 0x38
 800241c:	687a      	ldr	r2, [r7, #4]
 800241e:	4413      	add	r3, r2
 8002420:	3304      	adds	r3, #4
 8002422:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	2201      	movs	r2, #1
 8002428:	705a      	strb	r2, [r3, #1]
 800242a:	e00f      	b.n	800244c <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800242c:	78fb      	ldrb	r3, [r7, #3]
 800242e:	f003 020f 	and.w	r2, r3, #15
 8002432:	4613      	mov	r3, r2
 8002434:	00db      	lsls	r3, r3, #3
 8002436:	4413      	add	r3, r2
 8002438:	009b      	lsls	r3, r3, #2
 800243a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800243e:	687a      	ldr	r2, [r7, #4]
 8002440:	4413      	add	r3, r2
 8002442:	3304      	adds	r3, #4
 8002444:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	2200      	movs	r2, #0
 800244a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800244c:	78fb      	ldrb	r3, [r7, #3]
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	b2da      	uxtb	r2, r3
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 8002458:	883a      	ldrh	r2, [r7, #0]
 800245a:	68fb      	ldr	r3, [r7, #12]
 800245c:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	78ba      	ldrb	r2, [r7, #2]
 8002462:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	785b      	ldrb	r3, [r3, #1]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d004      	beq.n	8002476 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	781b      	ldrb	r3, [r3, #0]
 8002470:	b29a      	uxth	r2, r3
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002476:	78bb      	ldrb	r3, [r7, #2]
 8002478:	2b02      	cmp	r3, #2
 800247a:	d102      	bne.n	8002482 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2200      	movs	r2, #0
 8002480:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002488:	2b01      	cmp	r3, #1
 800248a:	d101      	bne.n	8002490 <HAL_PCD_EP_Open+0xaa>
 800248c:	2302      	movs	r3, #2
 800248e:	e00e      	b.n	80024ae <HAL_PCD_EP_Open+0xc8>
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	2201      	movs	r2, #1
 8002494:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	68f9      	ldr	r1, [r7, #12]
 800249e:	4618      	mov	r0, r3
 80024a0:	f001 fb9a 	bl	8003bd8 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	2200      	movs	r2, #0
 80024a8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 80024ac:	7afb      	ldrb	r3, [r7, #11]
}
 80024ae:	4618      	mov	r0, r3
 80024b0:	3710      	adds	r7, #16
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}

080024b6 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80024b6:	b580      	push	{r7, lr}
 80024b8:	b084      	sub	sp, #16
 80024ba:	af00      	add	r7, sp, #0
 80024bc:	6078      	str	r0, [r7, #4]
 80024be:	460b      	mov	r3, r1
 80024c0:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80024c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	da0f      	bge.n	80024ea <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80024ca:	78fb      	ldrb	r3, [r7, #3]
 80024cc:	f003 020f 	and.w	r2, r3, #15
 80024d0:	4613      	mov	r3, r2
 80024d2:	00db      	lsls	r3, r3, #3
 80024d4:	4413      	add	r3, r2
 80024d6:	009b      	lsls	r3, r3, #2
 80024d8:	3338      	adds	r3, #56	; 0x38
 80024da:	687a      	ldr	r2, [r7, #4]
 80024dc:	4413      	add	r3, r2
 80024de:	3304      	adds	r3, #4
 80024e0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2201      	movs	r2, #1
 80024e6:	705a      	strb	r2, [r3, #1]
 80024e8:	e00f      	b.n	800250a <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80024ea:	78fb      	ldrb	r3, [r7, #3]
 80024ec:	f003 020f 	and.w	r2, r3, #15
 80024f0:	4613      	mov	r3, r2
 80024f2:	00db      	lsls	r3, r3, #3
 80024f4:	4413      	add	r3, r2
 80024f6:	009b      	lsls	r3, r3, #2
 80024f8:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80024fc:	687a      	ldr	r2, [r7, #4]
 80024fe:	4413      	add	r3, r2
 8002500:	3304      	adds	r3, #4
 8002502:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2200      	movs	r2, #0
 8002508:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800250a:	78fb      	ldrb	r3, [r7, #3]
 800250c:	f003 030f 	and.w	r3, r3, #15
 8002510:	b2da      	uxtb	r2, r3
 8002512:	68fb      	ldr	r3, [r7, #12]
 8002514:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800251c:	2b01      	cmp	r3, #1
 800251e:	d101      	bne.n	8002524 <HAL_PCD_EP_Close+0x6e>
 8002520:	2302      	movs	r3, #2
 8002522:	e00e      	b.n	8002542 <HAL_PCD_EP_Close+0x8c>
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	2201      	movs	r2, #1
 8002528:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	68f9      	ldr	r1, [r7, #12]
 8002532:	4618      	mov	r0, r3
 8002534:	f001 fbd8 	bl	8003ce8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8002540:	2300      	movs	r3, #0
}
 8002542:	4618      	mov	r0, r3
 8002544:	3710      	adds	r7, #16
 8002546:	46bd      	mov	sp, r7
 8002548:	bd80      	pop	{r7, pc}

0800254a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 800254a:	b580      	push	{r7, lr}
 800254c:	b086      	sub	sp, #24
 800254e:	af00      	add	r7, sp, #0
 8002550:	60f8      	str	r0, [r7, #12]
 8002552:	607a      	str	r2, [r7, #4]
 8002554:	603b      	str	r3, [r7, #0]
 8002556:	460b      	mov	r3, r1
 8002558:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800255a:	7afb      	ldrb	r3, [r7, #11]
 800255c:	f003 020f 	and.w	r2, r3, #15
 8002560:	4613      	mov	r3, r2
 8002562:	00db      	lsls	r3, r3, #3
 8002564:	4413      	add	r3, r2
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800256c:	68fa      	ldr	r2, [r7, #12]
 800256e:	4413      	add	r3, r2
 8002570:	3304      	adds	r3, #4
 8002572:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002574:	697b      	ldr	r3, [r7, #20]
 8002576:	687a      	ldr	r2, [r7, #4]
 8002578:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800257a:	697b      	ldr	r3, [r7, #20]
 800257c:	683a      	ldr	r2, [r7, #0]
 800257e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002580:	697b      	ldr	r3, [r7, #20]
 8002582:	2200      	movs	r2, #0
 8002584:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	2200      	movs	r2, #0
 800258a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800258c:	7afb      	ldrb	r3, [r7, #11]
 800258e:	f003 030f 	and.w	r3, r3, #15
 8002592:	b2da      	uxtb	r2, r3
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002598:	68fb      	ldr	r3, [r7, #12]
 800259a:	691b      	ldr	r3, [r3, #16]
 800259c:	2b01      	cmp	r3, #1
 800259e:	d102      	bne.n	80025a6 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80025a0:	687a      	ldr	r2, [r7, #4]
 80025a2:	697b      	ldr	r3, [r7, #20]
 80025a4:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80025a6:	7afb      	ldrb	r3, [r7, #11]
 80025a8:	f003 030f 	and.w	r3, r3, #15
 80025ac:	2b00      	cmp	r3, #0
 80025ae:	d109      	bne.n	80025c4 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	6818      	ldr	r0, [r3, #0]
 80025b4:	68fb      	ldr	r3, [r7, #12]
 80025b6:	691b      	ldr	r3, [r3, #16]
 80025b8:	b2db      	uxtb	r3, r3
 80025ba:	461a      	mov	r2, r3
 80025bc:	6979      	ldr	r1, [r7, #20]
 80025be:	f001 feb7 	bl	8004330 <USB_EP0StartXfer>
 80025c2:	e008      	b.n	80025d6 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80025c4:	68fb      	ldr	r3, [r7, #12]
 80025c6:	6818      	ldr	r0, [r3, #0]
 80025c8:	68fb      	ldr	r3, [r7, #12]
 80025ca:	691b      	ldr	r3, [r3, #16]
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	461a      	mov	r2, r3
 80025d0:	6979      	ldr	r1, [r7, #20]
 80025d2:	f001 fc65 	bl	8003ea0 <USB_EPStartXfer>
  }

  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
}
 80025d8:	4618      	mov	r0, r3
 80025da:	3718      	adds	r7, #24
 80025dc:	46bd      	mov	sp, r7
 80025de:	bd80      	pop	{r7, pc}

080025e0 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80025e0:	b580      	push	{r7, lr}
 80025e2:	b086      	sub	sp, #24
 80025e4:	af00      	add	r7, sp, #0
 80025e6:	60f8      	str	r0, [r7, #12]
 80025e8:	607a      	str	r2, [r7, #4]
 80025ea:	603b      	str	r3, [r7, #0]
 80025ec:	460b      	mov	r3, r1
 80025ee:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80025f0:	7afb      	ldrb	r3, [r7, #11]
 80025f2:	f003 020f 	and.w	r2, r3, #15
 80025f6:	4613      	mov	r3, r2
 80025f8:	00db      	lsls	r3, r3, #3
 80025fa:	4413      	add	r3, r2
 80025fc:	009b      	lsls	r3, r3, #2
 80025fe:	3338      	adds	r3, #56	; 0x38
 8002600:	68fa      	ldr	r2, [r7, #12]
 8002602:	4413      	add	r3, r2
 8002604:	3304      	adds	r3, #4
 8002606:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	687a      	ldr	r2, [r7, #4]
 800260c:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800260e:	697b      	ldr	r3, [r7, #20]
 8002610:	683a      	ldr	r2, [r7, #0]
 8002612:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	2200      	movs	r2, #0
 8002618:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	2201      	movs	r2, #1
 800261e:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002620:	7afb      	ldrb	r3, [r7, #11]
 8002622:	f003 030f 	and.w	r3, r3, #15
 8002626:	b2da      	uxtb	r2, r3
 8002628:	697b      	ldr	r3, [r7, #20]
 800262a:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	691b      	ldr	r3, [r3, #16]
 8002630:	2b01      	cmp	r3, #1
 8002632:	d102      	bne.n	800263a <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002634:	687a      	ldr	r2, [r7, #4]
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800263a:	7afb      	ldrb	r3, [r7, #11]
 800263c:	f003 030f 	and.w	r3, r3, #15
 8002640:	2b00      	cmp	r3, #0
 8002642:	d109      	bne.n	8002658 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002644:	68fb      	ldr	r3, [r7, #12]
 8002646:	6818      	ldr	r0, [r3, #0]
 8002648:	68fb      	ldr	r3, [r7, #12]
 800264a:	691b      	ldr	r3, [r3, #16]
 800264c:	b2db      	uxtb	r3, r3
 800264e:	461a      	mov	r2, r3
 8002650:	6979      	ldr	r1, [r7, #20]
 8002652:	f001 fe6d 	bl	8004330 <USB_EP0StartXfer>
 8002656:	e008      	b.n	800266a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	6818      	ldr	r0, [r3, #0]
 800265c:	68fb      	ldr	r3, [r7, #12]
 800265e:	691b      	ldr	r3, [r3, #16]
 8002660:	b2db      	uxtb	r3, r3
 8002662:	461a      	mov	r2, r3
 8002664:	6979      	ldr	r1, [r7, #20]
 8002666:	f001 fc1b 	bl	8003ea0 <USB_EPStartXfer>
  }

  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3718      	adds	r7, #24
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	6078      	str	r0, [r7, #4]
 800267c:	460b      	mov	r3, r1
 800267e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002680:	78fb      	ldrb	r3, [r7, #3]
 8002682:	f003 020f 	and.w	r2, r3, #15
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	429a      	cmp	r2, r3
 800268c:	d901      	bls.n	8002692 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e050      	b.n	8002734 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002692:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002696:	2b00      	cmp	r3, #0
 8002698:	da0f      	bge.n	80026ba <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800269a:	78fb      	ldrb	r3, [r7, #3]
 800269c:	f003 020f 	and.w	r2, r3, #15
 80026a0:	4613      	mov	r3, r2
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	4413      	add	r3, r2
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	3338      	adds	r3, #56	; 0x38
 80026aa:	687a      	ldr	r2, [r7, #4]
 80026ac:	4413      	add	r3, r2
 80026ae:	3304      	adds	r3, #4
 80026b0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026b2:	68fb      	ldr	r3, [r7, #12]
 80026b4:	2201      	movs	r2, #1
 80026b6:	705a      	strb	r2, [r3, #1]
 80026b8:	e00d      	b.n	80026d6 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 80026ba:	78fa      	ldrb	r2, [r7, #3]
 80026bc:	4613      	mov	r3, r2
 80026be:	00db      	lsls	r3, r3, #3
 80026c0:	4413      	add	r3, r2
 80026c2:	009b      	lsls	r3, r3, #2
 80026c4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026c8:	687a      	ldr	r2, [r7, #4]
 80026ca:	4413      	add	r3, r2
 80026cc:	3304      	adds	r3, #4
 80026ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026d0:	68fb      	ldr	r3, [r7, #12]
 80026d2:	2200      	movs	r2, #0
 80026d4:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	2201      	movs	r2, #1
 80026da:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80026dc:	78fb      	ldrb	r3, [r7, #3]
 80026de:	f003 030f 	and.w	r3, r3, #15
 80026e2:	b2da      	uxtb	r2, r3
 80026e4:	68fb      	ldr	r3, [r7, #12]
 80026e6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80026ee:	2b01      	cmp	r3, #1
 80026f0:	d101      	bne.n	80026f6 <HAL_PCD_EP_SetStall+0x82>
 80026f2:	2302      	movs	r3, #2
 80026f4:	e01e      	b.n	8002734 <HAL_PCD_EP_SetStall+0xc0>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	2201      	movs	r2, #1
 80026fa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	68f9      	ldr	r1, [r7, #12]
 8002704:	4618      	mov	r0, r3
 8002706:	f002 f8ab 	bl	8004860 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800270a:	78fb      	ldrb	r3, [r7, #3]
 800270c:	f003 030f 	and.w	r3, r3, #15
 8002710:	2b00      	cmp	r3, #0
 8002712:	d10a      	bne.n	800272a <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6818      	ldr	r0, [r3, #0]
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	691b      	ldr	r3, [r3, #16]
 800271c:	b2d9      	uxtb	r1, r3
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002724:	461a      	mov	r2, r3
 8002726:	f002 fa9b 	bl	8004c60 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002732:	2300      	movs	r3, #0
}
 8002734:	4618      	mov	r0, r3
 8002736:	3710      	adds	r7, #16
 8002738:	46bd      	mov	sp, r7
 800273a:	bd80      	pop	{r7, pc}

0800273c <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800273c:	b580      	push	{r7, lr}
 800273e:	b084      	sub	sp, #16
 8002740:	af00      	add	r7, sp, #0
 8002742:	6078      	str	r0, [r7, #4]
 8002744:	460b      	mov	r3, r1
 8002746:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8002748:	78fb      	ldrb	r3, [r7, #3]
 800274a:	f003 020f 	and.w	r2, r3, #15
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	685b      	ldr	r3, [r3, #4]
 8002752:	429a      	cmp	r2, r3
 8002754:	d901      	bls.n	800275a <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e042      	b.n	80027e0 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 800275a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800275e:	2b00      	cmp	r3, #0
 8002760:	da0f      	bge.n	8002782 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002762:	78fb      	ldrb	r3, [r7, #3]
 8002764:	f003 020f 	and.w	r2, r3, #15
 8002768:	4613      	mov	r3, r2
 800276a:	00db      	lsls	r3, r3, #3
 800276c:	4413      	add	r3, r2
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	3338      	adds	r3, #56	; 0x38
 8002772:	687a      	ldr	r2, [r7, #4]
 8002774:	4413      	add	r3, r2
 8002776:	3304      	adds	r3, #4
 8002778:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800277a:	68fb      	ldr	r3, [r7, #12]
 800277c:	2201      	movs	r2, #1
 800277e:	705a      	strb	r2, [r3, #1]
 8002780:	e00f      	b.n	80027a2 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002782:	78fb      	ldrb	r3, [r7, #3]
 8002784:	f003 020f 	and.w	r2, r3, #15
 8002788:	4613      	mov	r3, r2
 800278a:	00db      	lsls	r3, r3, #3
 800278c:	4413      	add	r3, r2
 800278e:	009b      	lsls	r3, r3, #2
 8002790:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	4413      	add	r3, r2
 8002798:	3304      	adds	r3, #4
 800279a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	2200      	movs	r2, #0
 80027a0:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80027a2:	68fb      	ldr	r3, [r7, #12]
 80027a4:	2200      	movs	r2, #0
 80027a6:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80027a8:	78fb      	ldrb	r3, [r7, #3]
 80027aa:	f003 030f 	and.w	r3, r3, #15
 80027ae:	b2da      	uxtb	r2, r3
 80027b0:	68fb      	ldr	r3, [r7, #12]
 80027b2:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027b4:	687b      	ldr	r3, [r7, #4]
 80027b6:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027ba:	2b01      	cmp	r3, #1
 80027bc:	d101      	bne.n	80027c2 <HAL_PCD_EP_ClrStall+0x86>
 80027be:	2302      	movs	r3, #2
 80027c0:	e00e      	b.n	80027e0 <HAL_PCD_EP_ClrStall+0xa4>
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2201      	movs	r2, #1
 80027c6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	68f9      	ldr	r1, [r7, #12]
 80027d0:	4618      	mov	r0, r3
 80027d2:	f002 f8b3 	bl	800493c <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2200      	movs	r2, #0
 80027da:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3710      	adds	r7, #16
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b084      	sub	sp, #16
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	460b      	mov	r3, r1
 80027f2:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 80027f4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80027f8:	2b00      	cmp	r3, #0
 80027fa:	da0c      	bge.n	8002816 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80027fc:	78fb      	ldrb	r3, [r7, #3]
 80027fe:	f003 020f 	and.w	r2, r3, #15
 8002802:	4613      	mov	r3, r2
 8002804:	00db      	lsls	r3, r3, #3
 8002806:	4413      	add	r3, r2
 8002808:	009b      	lsls	r3, r3, #2
 800280a:	3338      	adds	r3, #56	; 0x38
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	4413      	add	r3, r2
 8002810:	3304      	adds	r3, #4
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	e00c      	b.n	8002830 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002816:	78fb      	ldrb	r3, [r7, #3]
 8002818:	f003 020f 	and.w	r2, r3, #15
 800281c:	4613      	mov	r3, r2
 800281e:	00db      	lsls	r3, r3, #3
 8002820:	4413      	add	r3, r2
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002828:	687a      	ldr	r2, [r7, #4]
 800282a:	4413      	add	r3, r2
 800282c:	3304      	adds	r3, #4
 800282e:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	68f9      	ldr	r1, [r7, #12]
 8002836:	4618      	mov	r0, r3
 8002838:	f001 fed2 	bl	80045e0 <USB_EPStopXfer>
 800283c:	4603      	mov	r3, r0
 800283e:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002840:	7afb      	ldrb	r3, [r7, #11]
}
 8002842:	4618      	mov	r0, r3
 8002844:	3710      	adds	r7, #16
 8002846:	46bd      	mov	sp, r7
 8002848:	bd80      	pop	{r7, pc}

0800284a <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800284a:	b580      	push	{r7, lr}
 800284c:	b08a      	sub	sp, #40	; 0x28
 800284e:	af02      	add	r7, sp, #8
 8002850:	6078      	str	r0, [r7, #4]
 8002852:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800285a:	697b      	ldr	r3, [r7, #20]
 800285c:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 800285e:	683a      	ldr	r2, [r7, #0]
 8002860:	4613      	mov	r3, r2
 8002862:	00db      	lsls	r3, r3, #3
 8002864:	4413      	add	r3, r2
 8002866:	009b      	lsls	r3, r3, #2
 8002868:	3338      	adds	r3, #56	; 0x38
 800286a:	687a      	ldr	r2, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	3304      	adds	r3, #4
 8002870:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	6a1a      	ldr	r2, [r3, #32]
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	699b      	ldr	r3, [r3, #24]
 800287a:	429a      	cmp	r2, r3
 800287c:	d901      	bls.n	8002882 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	e06c      	b.n	800295c <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	699a      	ldr	r2, [r3, #24]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	6a1b      	ldr	r3, [r3, #32]
 800288a:	1ad3      	subs	r3, r2, r3
 800288c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	68db      	ldr	r3, [r3, #12]
 8002892:	69fa      	ldr	r2, [r7, #28]
 8002894:	429a      	cmp	r2, r3
 8002896:	d902      	bls.n	800289e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002898:	68fb      	ldr	r3, [r7, #12]
 800289a:	68db      	ldr	r3, [r3, #12]
 800289c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	3303      	adds	r3, #3
 80028a2:	089b      	lsrs	r3, r3, #2
 80028a4:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80028a6:	e02b      	b.n	8002900 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80028a8:	68fb      	ldr	r3, [r7, #12]
 80028aa:	699a      	ldr	r2, [r3, #24]
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	6a1b      	ldr	r3, [r3, #32]
 80028b0:	1ad3      	subs	r3, r2, r3
 80028b2:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	68db      	ldr	r3, [r3, #12]
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	429a      	cmp	r2, r3
 80028bc:	d902      	bls.n	80028c4 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	68db      	ldr	r3, [r3, #12]
 80028c2:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 80028c4:	69fb      	ldr	r3, [r7, #28]
 80028c6:	3303      	adds	r3, #3
 80028c8:	089b      	lsrs	r3, r3, #2
 80028ca:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	6919      	ldr	r1, [r3, #16]
 80028d0:	683b      	ldr	r3, [r7, #0]
 80028d2:	b2da      	uxtb	r2, r3
 80028d4:	69fb      	ldr	r3, [r7, #28]
 80028d6:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 80028dc:	b2db      	uxtb	r3, r3
 80028de:	9300      	str	r3, [sp, #0]
 80028e0:	4603      	mov	r3, r0
 80028e2:	6978      	ldr	r0, [r7, #20]
 80028e4:	f001 ff26 	bl	8004734 <USB_WritePacket>

    ep->xfer_buff  += len;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	691a      	ldr	r2, [r3, #16]
 80028ec:	69fb      	ldr	r3, [r7, #28]
 80028ee:	441a      	add	r2, r3
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	6a1a      	ldr	r2, [r3, #32]
 80028f8:	69fb      	ldr	r3, [r7, #28]
 80028fa:	441a      	add	r2, r3
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002900:	683b      	ldr	r3, [r7, #0]
 8002902:	015a      	lsls	r2, r3, #5
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	4413      	add	r3, r2
 8002908:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800290c:	699b      	ldr	r3, [r3, #24]
 800290e:	b29b      	uxth	r3, r3
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	429a      	cmp	r2, r3
 8002914:	d809      	bhi.n	800292a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	6a1a      	ldr	r2, [r3, #32]
 800291a:	68fb      	ldr	r3, [r7, #12]
 800291c:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 800291e:	429a      	cmp	r2, r3
 8002920:	d203      	bcs.n	800292a <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	699b      	ldr	r3, [r3, #24]
 8002926:	2b00      	cmp	r3, #0
 8002928:	d1be      	bne.n	80028a8 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 800292a:	68fb      	ldr	r3, [r7, #12]
 800292c:	699a      	ldr	r2, [r3, #24]
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	6a1b      	ldr	r3, [r3, #32]
 8002932:	429a      	cmp	r2, r3
 8002934:	d811      	bhi.n	800295a <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	f003 030f 	and.w	r3, r3, #15
 800293c:	2201      	movs	r2, #1
 800293e:	fa02 f303 	lsl.w	r3, r2, r3
 8002942:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002944:	693b      	ldr	r3, [r7, #16]
 8002946:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800294a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800294c:	68bb      	ldr	r3, [r7, #8]
 800294e:	43db      	mvns	r3, r3
 8002950:	6939      	ldr	r1, [r7, #16]
 8002952:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002956:	4013      	ands	r3, r2
 8002958:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 800295a:	2300      	movs	r3, #0
}
 800295c:	4618      	mov	r0, r3
 800295e:	3720      	adds	r7, #32
 8002960:	46bd      	mov	sp, r7
 8002962:	bd80      	pop	{r7, pc}

08002964 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b088      	sub	sp, #32
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
 800296c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	681b      	ldr	r3, [r3, #0]
 8002972:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002978:	69fb      	ldr	r3, [r7, #28]
 800297a:	333c      	adds	r3, #60	; 0x3c
 800297c:	3304      	adds	r3, #4
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002982:	683b      	ldr	r3, [r7, #0]
 8002984:	015a      	lsls	r2, r3, #5
 8002986:	69bb      	ldr	r3, [r7, #24]
 8002988:	4413      	add	r3, r2
 800298a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800298e:	689b      	ldr	r3, [r3, #8]
 8002990:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	691b      	ldr	r3, [r3, #16]
 8002996:	2b01      	cmp	r3, #1
 8002998:	d17b      	bne.n	8002a92 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 800299a:	693b      	ldr	r3, [r7, #16]
 800299c:	f003 0308 	and.w	r3, r3, #8
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d015      	beq.n	80029d0 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029a4:	697b      	ldr	r3, [r7, #20]
 80029a6:	4a61      	ldr	r2, [pc, #388]	; (8002b2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80029a8:	4293      	cmp	r3, r2
 80029aa:	f240 80b9 	bls.w	8002b20 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80029ae:	693b      	ldr	r3, [r7, #16]
 80029b0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	f000 80b3 	beq.w	8002b20 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	015a      	lsls	r2, r3, #5
 80029be:	69bb      	ldr	r3, [r7, #24]
 80029c0:	4413      	add	r3, r2
 80029c2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029c6:	461a      	mov	r2, r3
 80029c8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80029cc:	6093      	str	r3, [r2, #8]
 80029ce:	e0a7      	b.n	8002b20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 80029d0:	693b      	ldr	r3, [r7, #16]
 80029d2:	f003 0320 	and.w	r3, r3, #32
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d009      	beq.n	80029ee <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	015a      	lsls	r2, r3, #5
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	4413      	add	r3, r2
 80029e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029e6:	461a      	mov	r2, r3
 80029e8:	2320      	movs	r3, #32
 80029ea:	6093      	str	r3, [r2, #8]
 80029ec:	e098      	b.n	8002b20 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 80029ee:	693b      	ldr	r3, [r7, #16]
 80029f0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	f040 8093 	bne.w	8002b20 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80029fa:	697b      	ldr	r3, [r7, #20]
 80029fc:	4a4b      	ldr	r2, [pc, #300]	; (8002b2c <PCD_EP_OutXfrComplete_int+0x1c8>)
 80029fe:	4293      	cmp	r3, r2
 8002a00:	d90f      	bls.n	8002a22 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002a02:	693b      	ldr	r3, [r7, #16]
 8002a04:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00a      	beq.n	8002a22 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	015a      	lsls	r2, r3, #5
 8002a10:	69bb      	ldr	r3, [r7, #24]
 8002a12:	4413      	add	r3, r2
 8002a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a18:	461a      	mov	r2, r3
 8002a1a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a1e:	6093      	str	r3, [r2, #8]
 8002a20:	e07e      	b.n	8002b20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002a22:	683a      	ldr	r2, [r7, #0]
 8002a24:	4613      	mov	r3, r2
 8002a26:	00db      	lsls	r3, r3, #3
 8002a28:	4413      	add	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	4413      	add	r3, r2
 8002a34:	3304      	adds	r3, #4
 8002a36:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002a38:	68fb      	ldr	r3, [r7, #12]
 8002a3a:	69da      	ldr	r2, [r3, #28]
 8002a3c:	683b      	ldr	r3, [r7, #0]
 8002a3e:	0159      	lsls	r1, r3, #5
 8002a40:	69bb      	ldr	r3, [r7, #24]
 8002a42:	440b      	add	r3, r1
 8002a44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a48:	691b      	ldr	r3, [r3, #16]
 8002a4a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002a4e:	1ad2      	subs	r2, r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002a54:	683b      	ldr	r3, [r7, #0]
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d114      	bne.n	8002a84 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	699b      	ldr	r3, [r3, #24]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6818      	ldr	r0, [r3, #0]
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	2101      	movs	r1, #1
 8002a70:	f002 f8f6 	bl	8004c60 <USB_EP0_OutStart>
 8002a74:	e006      	b.n	8002a84 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	691a      	ldr	r2, [r3, #16]
 8002a7a:	68fb      	ldr	r3, [r7, #12]
 8002a7c:	6a1b      	ldr	r3, [r3, #32]
 8002a7e:	441a      	add	r2, r3
 8002a80:	68fb      	ldr	r3, [r7, #12]
 8002a82:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	b2db      	uxtb	r3, r3
 8002a88:	4619      	mov	r1, r3
 8002a8a:	6878      	ldr	r0, [r7, #4]
 8002a8c:	f004 f846 	bl	8006b1c <HAL_PCD_DataOutStageCallback>
 8002a90:	e046      	b.n	8002b20 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	4a26      	ldr	r2, [pc, #152]	; (8002b30 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002a96:	4293      	cmp	r3, r2
 8002a98:	d124      	bne.n	8002ae4 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002a9a:	693b      	ldr	r3, [r7, #16]
 8002a9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d00a      	beq.n	8002aba <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	015a      	lsls	r2, r3, #5
 8002aa8:	69bb      	ldr	r3, [r7, #24]
 8002aaa:	4413      	add	r3, r2
 8002aac:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ab0:	461a      	mov	r2, r3
 8002ab2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002ab6:	6093      	str	r3, [r2, #8]
 8002ab8:	e032      	b.n	8002b20 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002aba:	693b      	ldr	r3, [r7, #16]
 8002abc:	f003 0320 	and.w	r3, r3, #32
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	d008      	beq.n	8002ad6 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002ac4:	683b      	ldr	r3, [r7, #0]
 8002ac6:	015a      	lsls	r2, r3, #5
 8002ac8:	69bb      	ldr	r3, [r7, #24]
 8002aca:	4413      	add	r3, r2
 8002acc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ad0:	461a      	mov	r2, r3
 8002ad2:	2320      	movs	r3, #32
 8002ad4:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	4619      	mov	r1, r3
 8002adc:	6878      	ldr	r0, [r7, #4]
 8002ade:	f004 f81d 	bl	8006b1c <HAL_PCD_DataOutStageCallback>
 8002ae2:	e01d      	b.n	8002b20 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	d114      	bne.n	8002b14 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	683a      	ldr	r2, [r7, #0]
 8002aee:	4613      	mov	r3, r2
 8002af0:	00db      	lsls	r3, r3, #3
 8002af2:	4413      	add	r3, r2
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	440b      	add	r3, r1
 8002af8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d108      	bne.n	8002b14 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	6818      	ldr	r0, [r3, #0]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b0c:	461a      	mov	r2, r3
 8002b0e:	2100      	movs	r1, #0
 8002b10:	f002 f8a6 	bl	8004c60 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	b2db      	uxtb	r3, r3
 8002b18:	4619      	mov	r1, r3
 8002b1a:	6878      	ldr	r0, [r7, #4]
 8002b1c:	f003 fffe 	bl	8006b1c <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	3720      	adds	r7, #32
 8002b26:	46bd      	mov	sp, r7
 8002b28:	bd80      	pop	{r7, pc}
 8002b2a:	bf00      	nop
 8002b2c:	4f54300a 	.word	0x4f54300a
 8002b30:	4f54310a 	.word	0x4f54310a

08002b34 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b086      	sub	sp, #24
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
 8002b3c:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	681b      	ldr	r3, [r3, #0]
 8002b42:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002b44:	697b      	ldr	r3, [r7, #20]
 8002b46:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002b48:	697b      	ldr	r3, [r7, #20]
 8002b4a:	333c      	adds	r3, #60	; 0x3c
 8002b4c:	3304      	adds	r3, #4
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	015a      	lsls	r2, r3, #5
 8002b56:	693b      	ldr	r3, [r7, #16]
 8002b58:	4413      	add	r3, r2
 8002b5a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	4a15      	ldr	r2, [pc, #84]	; (8002bbc <PCD_EP_OutSetupPacket_int+0x88>)
 8002b66:	4293      	cmp	r3, r2
 8002b68:	d90e      	bls.n	8002b88 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002b6a:	68bb      	ldr	r3, [r7, #8]
 8002b6c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d009      	beq.n	8002b88 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002b74:	683b      	ldr	r3, [r7, #0]
 8002b76:	015a      	lsls	r2, r3, #5
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	4413      	add	r3, r2
 8002b7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002b80:	461a      	mov	r2, r3
 8002b82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002b86:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002b88:	6878      	ldr	r0, [r7, #4]
 8002b8a:	f003 ffb5 	bl	8006af8 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002b8e:	68fb      	ldr	r3, [r7, #12]
 8002b90:	4a0a      	ldr	r2, [pc, #40]	; (8002bbc <PCD_EP_OutSetupPacket_int+0x88>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d90c      	bls.n	8002bb0 <PCD_EP_OutSetupPacket_int+0x7c>
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	691b      	ldr	r3, [r3, #16]
 8002b9a:	2b01      	cmp	r3, #1
 8002b9c:	d108      	bne.n	8002bb0 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	6818      	ldr	r0, [r3, #0]
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002ba8:	461a      	mov	r2, r3
 8002baa:	2101      	movs	r1, #1
 8002bac:	f002 f858 	bl	8004c60 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002bb0:	2300      	movs	r3, #0
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	3718      	adds	r7, #24
 8002bb6:	46bd      	mov	sp, r7
 8002bb8:	bd80      	pop	{r7, pc}
 8002bba:	bf00      	nop
 8002bbc:	4f54300a 	.word	0x4f54300a

08002bc0 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
 8002bc8:	460b      	mov	r3, r1
 8002bca:	70fb      	strb	r3, [r7, #3]
 8002bcc:	4613      	mov	r3, r2
 8002bce:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bd6:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002bd8:	78fb      	ldrb	r3, [r7, #3]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d107      	bne.n	8002bee <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002bde:	883b      	ldrh	r3, [r7, #0]
 8002be0:	0419      	lsls	r1, r3, #16
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	68ba      	ldr	r2, [r7, #8]
 8002be8:	430a      	orrs	r2, r1
 8002bea:	629a      	str	r2, [r3, #40]	; 0x28
 8002bec:	e028      	b.n	8002c40 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bf4:	0c1b      	lsrs	r3, r3, #16
 8002bf6:	68ba      	ldr	r2, [r7, #8]
 8002bf8:	4413      	add	r3, r2
 8002bfa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002bfc:	2300      	movs	r3, #0
 8002bfe:	73fb      	strb	r3, [r7, #15]
 8002c00:	e00d      	b.n	8002c1e <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681a      	ldr	r2, [r3, #0]
 8002c06:	7bfb      	ldrb	r3, [r7, #15]
 8002c08:	3340      	adds	r3, #64	; 0x40
 8002c0a:	009b      	lsls	r3, r3, #2
 8002c0c:	4413      	add	r3, r2
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	0c1b      	lsrs	r3, r3, #16
 8002c12:	68ba      	ldr	r2, [r7, #8]
 8002c14:	4413      	add	r3, r2
 8002c16:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002c18:	7bfb      	ldrb	r3, [r7, #15]
 8002c1a:	3301      	adds	r3, #1
 8002c1c:	73fb      	strb	r3, [r7, #15]
 8002c1e:	7bfa      	ldrb	r2, [r7, #15]
 8002c20:	78fb      	ldrb	r3, [r7, #3]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	429a      	cmp	r2, r3
 8002c26:	d3ec      	bcc.n	8002c02 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002c28:	883b      	ldrh	r3, [r7, #0]
 8002c2a:	0418      	lsls	r0, r3, #16
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	6819      	ldr	r1, [r3, #0]
 8002c30:	78fb      	ldrb	r3, [r7, #3]
 8002c32:	3b01      	subs	r3, #1
 8002c34:	68ba      	ldr	r2, [r7, #8]
 8002c36:	4302      	orrs	r2, r0
 8002c38:	3340      	adds	r3, #64	; 0x40
 8002c3a:	009b      	lsls	r3, r3, #2
 8002c3c:	440b      	add	r3, r1
 8002c3e:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002c40:	2300      	movs	r3, #0
}
 8002c42:	4618      	mov	r0, r3
 8002c44:	3714      	adds	r7, #20
 8002c46:	46bd      	mov	sp, r7
 8002c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c4c:	4770      	bx	lr

08002c4e <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002c4e:	b480      	push	{r7}
 8002c50:	b083      	sub	sp, #12
 8002c52:	af00      	add	r7, sp, #0
 8002c54:	6078      	str	r0, [r7, #4]
 8002c56:	460b      	mov	r3, r1
 8002c58:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	887a      	ldrh	r2, [r7, #2]
 8002c60:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002c62:	2300      	movs	r3, #0
}
 8002c64:	4618      	mov	r0, r3
 8002c66:	370c      	adds	r7, #12
 8002c68:	46bd      	mov	sp, r7
 8002c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6e:	4770      	bx	lr

08002c70 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002c70:	b480      	push	{r7}
 8002c72:	b083      	sub	sp, #12
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	460b      	mov	r3, r1
 8002c7a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002c7c:	bf00      	nop
 8002c7e:	370c      	adds	r7, #12
 8002c80:	46bd      	mov	sp, r7
 8002c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c86:	4770      	bx	lr

08002c88 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	b086      	sub	sp, #24
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	2b00      	cmp	r3, #0
 8002c94:	d101      	bne.n	8002c9a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002c96:	2301      	movs	r3, #1
 8002c98:	e267      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	f003 0301 	and.w	r3, r3, #1
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	d075      	beq.n	8002d92 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002ca6:	4b88      	ldr	r3, [pc, #544]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002ca8:	689b      	ldr	r3, [r3, #8]
 8002caa:	f003 030c 	and.w	r3, r3, #12
 8002cae:	2b04      	cmp	r3, #4
 8002cb0:	d00c      	beq.n	8002ccc <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cb2:	4b85      	ldr	r3, [pc, #532]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002cba:	2b08      	cmp	r3, #8
 8002cbc:	d112      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cbe:	4b82      	ldr	r3, [pc, #520]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cca:	d10b      	bne.n	8002ce4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002ccc:	4b7e      	ldr	r3, [pc, #504]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d05b      	beq.n	8002d90 <HAL_RCC_OscConfig+0x108>
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	685b      	ldr	r3, [r3, #4]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	d157      	bne.n	8002d90 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002ce0:	2301      	movs	r3, #1
 8002ce2:	e242      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	685b      	ldr	r3, [r3, #4]
 8002ce8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002cec:	d106      	bne.n	8002cfc <HAL_RCC_OscConfig+0x74>
 8002cee:	4b76      	ldr	r3, [pc, #472]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	4a75      	ldr	r2, [pc, #468]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002cf4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf8:	6013      	str	r3, [r2, #0]
 8002cfa:	e01d      	b.n	8002d38 <HAL_RCC_OscConfig+0xb0>
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d04:	d10c      	bne.n	8002d20 <HAL_RCC_OscConfig+0x98>
 8002d06:	4b70      	ldr	r3, [pc, #448]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	4a6f      	ldr	r2, [pc, #444]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d0c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d10:	6013      	str	r3, [r2, #0]
 8002d12:	4b6d      	ldr	r3, [pc, #436]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	4a6c      	ldr	r2, [pc, #432]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d18:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d1c:	6013      	str	r3, [r2, #0]
 8002d1e:	e00b      	b.n	8002d38 <HAL_RCC_OscConfig+0xb0>
 8002d20:	4b69      	ldr	r3, [pc, #420]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	4a68      	ldr	r2, [pc, #416]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d26:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d2a:	6013      	str	r3, [r2, #0]
 8002d2c:	4b66      	ldr	r3, [pc, #408]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a65      	ldr	r2, [pc, #404]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d32:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d36:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	685b      	ldr	r3, [r3, #4]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d013      	beq.n	8002d68 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d40:	f7fd ffe4 	bl	8000d0c <HAL_GetTick>
 8002d44:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d46:	e008      	b.n	8002d5a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d48:	f7fd ffe0 	bl	8000d0c <HAL_GetTick>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	1ad3      	subs	r3, r2, r3
 8002d52:	2b64      	cmp	r3, #100	; 0x64
 8002d54:	d901      	bls.n	8002d5a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002d56:	2303      	movs	r3, #3
 8002d58:	e207      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d5a:	4b5b      	ldr	r3, [pc, #364]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	d0f0      	beq.n	8002d48 <HAL_RCC_OscConfig+0xc0>
 8002d66:	e014      	b.n	8002d92 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d68:	f7fd ffd0 	bl	8000d0c <HAL_GetTick>
 8002d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d6e:	e008      	b.n	8002d82 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002d70:	f7fd ffcc 	bl	8000d0c <HAL_GetTick>
 8002d74:	4602      	mov	r2, r0
 8002d76:	693b      	ldr	r3, [r7, #16]
 8002d78:	1ad3      	subs	r3, r2, r3
 8002d7a:	2b64      	cmp	r3, #100	; 0x64
 8002d7c:	d901      	bls.n	8002d82 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d7e:	2303      	movs	r3, #3
 8002d80:	e1f3      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d82:	4b51      	ldr	r3, [pc, #324]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d1f0      	bne.n	8002d70 <HAL_RCC_OscConfig+0xe8>
 8002d8e:	e000      	b.n	8002d92 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f003 0302 	and.w	r3, r3, #2
 8002d9a:	2b00      	cmp	r3, #0
 8002d9c:	d063      	beq.n	8002e66 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002d9e:	4b4a      	ldr	r3, [pc, #296]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 030c 	and.w	r3, r3, #12
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d00b      	beq.n	8002dc2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002daa:	4b47      	ldr	r3, [pc, #284]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002dac:	689b      	ldr	r3, [r3, #8]
 8002dae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002db2:	2b08      	cmp	r3, #8
 8002db4:	d11c      	bne.n	8002df0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002db6:	4b44      	ldr	r3, [pc, #272]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002db8:	685b      	ldr	r3, [r3, #4]
 8002dba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d116      	bne.n	8002df0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dc2:	4b41      	ldr	r3, [pc, #260]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f003 0302 	and.w	r3, r3, #2
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d005      	beq.n	8002dda <HAL_RCC_OscConfig+0x152>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	68db      	ldr	r3, [r3, #12]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d001      	beq.n	8002dda <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002dd6:	2301      	movs	r3, #1
 8002dd8:	e1c7      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002dda:	4b3b      	ldr	r3, [pc, #236]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	691b      	ldr	r3, [r3, #16]
 8002de6:	00db      	lsls	r3, r3, #3
 8002de8:	4937      	ldr	r1, [pc, #220]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002dea:	4313      	orrs	r3, r2
 8002dec:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dee:	e03a      	b.n	8002e66 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	68db      	ldr	r3, [r3, #12]
 8002df4:	2b00      	cmp	r3, #0
 8002df6:	d020      	beq.n	8002e3a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002df8:	4b34      	ldr	r3, [pc, #208]	; (8002ecc <HAL_RCC_OscConfig+0x244>)
 8002dfa:	2201      	movs	r2, #1
 8002dfc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002dfe:	f7fd ff85 	bl	8000d0c <HAL_GetTick>
 8002e02:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e04:	e008      	b.n	8002e18 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e06:	f7fd ff81 	bl	8000d0c <HAL_GetTick>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	693b      	ldr	r3, [r7, #16]
 8002e0e:	1ad3      	subs	r3, r2, r3
 8002e10:	2b02      	cmp	r3, #2
 8002e12:	d901      	bls.n	8002e18 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e14:	2303      	movs	r3, #3
 8002e16:	e1a8      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e18:	4b2b      	ldr	r3, [pc, #172]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f003 0302 	and.w	r3, r3, #2
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d0f0      	beq.n	8002e06 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e24:	4b28      	ldr	r3, [pc, #160]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e2c:	687b      	ldr	r3, [r7, #4]
 8002e2e:	691b      	ldr	r3, [r3, #16]
 8002e30:	00db      	lsls	r3, r3, #3
 8002e32:	4925      	ldr	r1, [pc, #148]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002e34:	4313      	orrs	r3, r2
 8002e36:	600b      	str	r3, [r1, #0]
 8002e38:	e015      	b.n	8002e66 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e3a:	4b24      	ldr	r3, [pc, #144]	; (8002ecc <HAL_RCC_OscConfig+0x244>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e40:	f7fd ff64 	bl	8000d0c <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e46:	e008      	b.n	8002e5a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e48:	f7fd ff60 	bl	8000d0c <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d901      	bls.n	8002e5a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002e56:	2303      	movs	r3, #3
 8002e58:	e187      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e5a:	4b1b      	ldr	r3, [pc, #108]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f003 0302 	and.w	r3, r3, #2
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d1f0      	bne.n	8002e48 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	f003 0308 	and.w	r3, r3, #8
 8002e6e:	2b00      	cmp	r3, #0
 8002e70:	d036      	beq.n	8002ee0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	695b      	ldr	r3, [r3, #20]
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d016      	beq.n	8002ea8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002e7a:	4b15      	ldr	r3, [pc, #84]	; (8002ed0 <HAL_RCC_OscConfig+0x248>)
 8002e7c:	2201      	movs	r2, #1
 8002e7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e80:	f7fd ff44 	bl	8000d0c <HAL_GetTick>
 8002e84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e86:	e008      	b.n	8002e9a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002e88:	f7fd ff40 	bl	8000d0c <HAL_GetTick>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	1ad3      	subs	r3, r2, r3
 8002e92:	2b02      	cmp	r3, #2
 8002e94:	d901      	bls.n	8002e9a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002e96:	2303      	movs	r3, #3
 8002e98:	e167      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002e9a:	4b0b      	ldr	r3, [pc, #44]	; (8002ec8 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002e9e:	f003 0302 	and.w	r3, r3, #2
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	d0f0      	beq.n	8002e88 <HAL_RCC_OscConfig+0x200>
 8002ea6:	e01b      	b.n	8002ee0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ea8:	4b09      	ldr	r3, [pc, #36]	; (8002ed0 <HAL_RCC_OscConfig+0x248>)
 8002eaa:	2200      	movs	r2, #0
 8002eac:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002eae:	f7fd ff2d 	bl	8000d0c <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002eb4:	e00e      	b.n	8002ed4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002eb6:	f7fd ff29 	bl	8000d0c <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d907      	bls.n	8002ed4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e150      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
 8002ec8:	40023800 	.word	0x40023800
 8002ecc:	42470000 	.word	0x42470000
 8002ed0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ed4:	4b88      	ldr	r3, [pc, #544]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002ed6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ed8:	f003 0302 	and.w	r3, r3, #2
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d1ea      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002ee0:	687b      	ldr	r3, [r7, #4]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	f003 0304 	and.w	r3, r3, #4
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	f000 8097 	beq.w	800301c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002eee:	2300      	movs	r3, #0
 8002ef0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002ef2:	4b81      	ldr	r3, [pc, #516]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002ef4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d10f      	bne.n	8002f1e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002efe:	2300      	movs	r3, #0
 8002f00:	60bb      	str	r3, [r7, #8]
 8002f02:	4b7d      	ldr	r3, [pc, #500]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f06:	4a7c      	ldr	r2, [pc, #496]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f08:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8002f0e:	4b7a      	ldr	r3, [pc, #488]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f16:	60bb      	str	r3, [r7, #8]
 8002f18:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f1a:	2301      	movs	r3, #1
 8002f1c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f1e:	4b77      	ldr	r3, [pc, #476]	; (80030fc <HAL_RCC_OscConfig+0x474>)
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d118      	bne.n	8002f5c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f2a:	4b74      	ldr	r3, [pc, #464]	; (80030fc <HAL_RCC_OscConfig+0x474>)
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	4a73      	ldr	r2, [pc, #460]	; (80030fc <HAL_RCC_OscConfig+0x474>)
 8002f30:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f34:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f36:	f7fd fee9 	bl	8000d0c <HAL_GetTick>
 8002f3a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f3c:	e008      	b.n	8002f50 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f3e:	f7fd fee5 	bl	8000d0c <HAL_GetTick>
 8002f42:	4602      	mov	r2, r0
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	1ad3      	subs	r3, r2, r3
 8002f48:	2b02      	cmp	r3, #2
 8002f4a:	d901      	bls.n	8002f50 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002f4c:	2303      	movs	r3, #3
 8002f4e:	e10c      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f50:	4b6a      	ldr	r3, [pc, #424]	; (80030fc <HAL_RCC_OscConfig+0x474>)
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f58:	2b00      	cmp	r3, #0
 8002f5a:	d0f0      	beq.n	8002f3e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	689b      	ldr	r3, [r3, #8]
 8002f60:	2b01      	cmp	r3, #1
 8002f62:	d106      	bne.n	8002f72 <HAL_RCC_OscConfig+0x2ea>
 8002f64:	4b64      	ldr	r3, [pc, #400]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f66:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f68:	4a63      	ldr	r2, [pc, #396]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f6a:	f043 0301 	orr.w	r3, r3, #1
 8002f6e:	6713      	str	r3, [r2, #112]	; 0x70
 8002f70:	e01c      	b.n	8002fac <HAL_RCC_OscConfig+0x324>
 8002f72:	687b      	ldr	r3, [r7, #4]
 8002f74:	689b      	ldr	r3, [r3, #8]
 8002f76:	2b05      	cmp	r3, #5
 8002f78:	d10c      	bne.n	8002f94 <HAL_RCC_OscConfig+0x30c>
 8002f7a:	4b5f      	ldr	r3, [pc, #380]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f7e:	4a5e      	ldr	r2, [pc, #376]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f80:	f043 0304 	orr.w	r3, r3, #4
 8002f84:	6713      	str	r3, [r2, #112]	; 0x70
 8002f86:	4b5c      	ldr	r3, [pc, #368]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f88:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8a:	4a5b      	ldr	r2, [pc, #364]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f8c:	f043 0301 	orr.w	r3, r3, #1
 8002f90:	6713      	str	r3, [r2, #112]	; 0x70
 8002f92:	e00b      	b.n	8002fac <HAL_RCC_OscConfig+0x324>
 8002f94:	4b58      	ldr	r3, [pc, #352]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f96:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f98:	4a57      	ldr	r2, [pc, #348]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002f9a:	f023 0301 	bic.w	r3, r3, #1
 8002f9e:	6713      	str	r3, [r2, #112]	; 0x70
 8002fa0:	4b55      	ldr	r3, [pc, #340]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002fa2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa4:	4a54      	ldr	r2, [pc, #336]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002fa6:	f023 0304 	bic.w	r3, r3, #4
 8002faa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689b      	ldr	r3, [r3, #8]
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d015      	beq.n	8002fe0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002fb4:	f7fd feaa 	bl	8000d0c <HAL_GetTick>
 8002fb8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fba:	e00a      	b.n	8002fd2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fbc:	f7fd fea6 	bl	8000d0c <HAL_GetTick>
 8002fc0:	4602      	mov	r2, r0
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	1ad3      	subs	r3, r2, r3
 8002fc6:	f241 3288 	movw	r2, #5000	; 0x1388
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d901      	bls.n	8002fd2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002fce:	2303      	movs	r3, #3
 8002fd0:	e0cb      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002fd2:	4b49      	ldr	r3, [pc, #292]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8002fd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d0ee      	beq.n	8002fbc <HAL_RCC_OscConfig+0x334>
 8002fde:	e014      	b.n	800300a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002fe0:	f7fd fe94 	bl	8000d0c <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002fe6:	e00a      	b.n	8002ffe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002fe8:	f7fd fe90 	bl	8000d0c <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ff6:	4293      	cmp	r3, r2
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e0b5      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ffe:	4b3e      	ldr	r3, [pc, #248]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8003000:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003002:	f003 0302 	and.w	r3, r3, #2
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1ee      	bne.n	8002fe8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800300a:	7dfb      	ldrb	r3, [r7, #23]
 800300c:	2b01      	cmp	r3, #1
 800300e:	d105      	bne.n	800301c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003010:	4b39      	ldr	r3, [pc, #228]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8003012:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003014:	4a38      	ldr	r2, [pc, #224]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8003016:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800301a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	699b      	ldr	r3, [r3, #24]
 8003020:	2b00      	cmp	r3, #0
 8003022:	f000 80a1 	beq.w	8003168 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003026:	4b34      	ldr	r3, [pc, #208]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 8003028:	689b      	ldr	r3, [r3, #8]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b08      	cmp	r3, #8
 8003030:	d05c      	beq.n	80030ec <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	2b02      	cmp	r3, #2
 8003038:	d141      	bne.n	80030be <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800303a:	4b31      	ldr	r3, [pc, #196]	; (8003100 <HAL_RCC_OscConfig+0x478>)
 800303c:	2200      	movs	r2, #0
 800303e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003040:	f7fd fe64 	bl	8000d0c <HAL_GetTick>
 8003044:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003046:	e008      	b.n	800305a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003048:	f7fd fe60 	bl	8000d0c <HAL_GetTick>
 800304c:	4602      	mov	r2, r0
 800304e:	693b      	ldr	r3, [r7, #16]
 8003050:	1ad3      	subs	r3, r2, r3
 8003052:	2b02      	cmp	r3, #2
 8003054:	d901      	bls.n	800305a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003056:	2303      	movs	r3, #3
 8003058:	e087      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800305a:	4b27      	ldr	r3, [pc, #156]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003062:	2b00      	cmp	r3, #0
 8003064:	d1f0      	bne.n	8003048 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	69da      	ldr	r2, [r3, #28]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	6a1b      	ldr	r3, [r3, #32]
 800306e:	431a      	orrs	r2, r3
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003074:	019b      	lsls	r3, r3, #6
 8003076:	431a      	orrs	r2, r3
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800307c:	085b      	lsrs	r3, r3, #1
 800307e:	3b01      	subs	r3, #1
 8003080:	041b      	lsls	r3, r3, #16
 8003082:	431a      	orrs	r2, r3
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003088:	061b      	lsls	r3, r3, #24
 800308a:	491b      	ldr	r1, [pc, #108]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 800308c:	4313      	orrs	r3, r2
 800308e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003090:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <HAL_RCC_OscConfig+0x478>)
 8003092:	2201      	movs	r2, #1
 8003094:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003096:	f7fd fe39 	bl	8000d0c <HAL_GetTick>
 800309a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800309c:	e008      	b.n	80030b0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800309e:	f7fd fe35 	bl	8000d0c <HAL_GetTick>
 80030a2:	4602      	mov	r2, r0
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	1ad3      	subs	r3, r2, r3
 80030a8:	2b02      	cmp	r3, #2
 80030aa:	d901      	bls.n	80030b0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80030ac:	2303      	movs	r3, #3
 80030ae:	e05c      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030b0:	4b11      	ldr	r3, [pc, #68]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 80030b2:	681b      	ldr	r3, [r3, #0]
 80030b4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d0f0      	beq.n	800309e <HAL_RCC_OscConfig+0x416>
 80030bc:	e054      	b.n	8003168 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030be:	4b10      	ldr	r3, [pc, #64]	; (8003100 <HAL_RCC_OscConfig+0x478>)
 80030c0:	2200      	movs	r2, #0
 80030c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030c4:	f7fd fe22 	bl	8000d0c <HAL_GetTick>
 80030c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ca:	e008      	b.n	80030de <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030cc:	f7fd fe1e 	bl	8000d0c <HAL_GetTick>
 80030d0:	4602      	mov	r2, r0
 80030d2:	693b      	ldr	r3, [r7, #16]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	2b02      	cmp	r3, #2
 80030d8:	d901      	bls.n	80030de <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80030da:	2303      	movs	r3, #3
 80030dc:	e045      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030de:	4b06      	ldr	r3, [pc, #24]	; (80030f8 <HAL_RCC_OscConfig+0x470>)
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d1f0      	bne.n	80030cc <HAL_RCC_OscConfig+0x444>
 80030ea:	e03d      	b.n	8003168 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	699b      	ldr	r3, [r3, #24]
 80030f0:	2b01      	cmp	r3, #1
 80030f2:	d107      	bne.n	8003104 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80030f4:	2301      	movs	r3, #1
 80030f6:	e038      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
 80030f8:	40023800 	.word	0x40023800
 80030fc:	40007000 	.word	0x40007000
 8003100:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003104:	4b1b      	ldr	r3, [pc, #108]	; (8003174 <HAL_RCC_OscConfig+0x4ec>)
 8003106:	685b      	ldr	r3, [r3, #4]
 8003108:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	699b      	ldr	r3, [r3, #24]
 800310e:	2b01      	cmp	r3, #1
 8003110:	d028      	beq.n	8003164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003112:	68fb      	ldr	r3, [r7, #12]
 8003114:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800311c:	429a      	cmp	r2, r3
 800311e:	d121      	bne.n	8003164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003120:	68fb      	ldr	r3, [r7, #12]
 8003122:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800312a:	429a      	cmp	r2, r3
 800312c:	d11a      	bne.n	8003164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800312e:	68fa      	ldr	r2, [r7, #12]
 8003130:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003134:	4013      	ands	r3, r2
 8003136:	687a      	ldr	r2, [r7, #4]
 8003138:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800313a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800313c:	4293      	cmp	r3, r2
 800313e:	d111      	bne.n	8003164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800314a:	085b      	lsrs	r3, r3, #1
 800314c:	3b01      	subs	r3, #1
 800314e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003150:	429a      	cmp	r2, r3
 8003152:	d107      	bne.n	8003164 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800315e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003160:	429a      	cmp	r2, r3
 8003162:	d001      	beq.n	8003168 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	e000      	b.n	800316a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003168:	2300      	movs	r3, #0
}
 800316a:	4618      	mov	r0, r3
 800316c:	3718      	adds	r7, #24
 800316e:	46bd      	mov	sp, r7
 8003170:	bd80      	pop	{r7, pc}
 8003172:	bf00      	nop
 8003174:	40023800 	.word	0x40023800

08003178 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b084      	sub	sp, #16
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
 8003180:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2b00      	cmp	r3, #0
 8003186:	d101      	bne.n	800318c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003188:	2301      	movs	r3, #1
 800318a:	e0cc      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800318c:	4b68      	ldr	r3, [pc, #416]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	f003 0307 	and.w	r3, r3, #7
 8003194:	683a      	ldr	r2, [r7, #0]
 8003196:	429a      	cmp	r2, r3
 8003198:	d90c      	bls.n	80031b4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800319a:	4b65      	ldr	r3, [pc, #404]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 800319c:	683a      	ldr	r2, [r7, #0]
 800319e:	b2d2      	uxtb	r2, r2
 80031a0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80031a2:	4b63      	ldr	r3, [pc, #396]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	f003 0307 	and.w	r3, r3, #7
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e0b8      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d020      	beq.n	8003202 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f003 0304 	and.w	r3, r3, #4
 80031c8:	2b00      	cmp	r3, #0
 80031ca:	d005      	beq.n	80031d8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80031cc:	4b59      	ldr	r3, [pc, #356]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031ce:	689b      	ldr	r3, [r3, #8]
 80031d0:	4a58      	ldr	r2, [pc, #352]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031d2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80031d6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	f003 0308 	and.w	r3, r3, #8
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d005      	beq.n	80031f0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80031e4:	4b53      	ldr	r3, [pc, #332]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031e6:	689b      	ldr	r3, [r3, #8]
 80031e8:	4a52      	ldr	r2, [pc, #328]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031ea:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80031ee:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80031f0:	4b50      	ldr	r3, [pc, #320]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031f2:	689b      	ldr	r3, [r3, #8]
 80031f4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	494d      	ldr	r1, [pc, #308]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80031fe:	4313      	orrs	r3, r2
 8003200:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0301 	and.w	r3, r3, #1
 800320a:	2b00      	cmp	r3, #0
 800320c:	d044      	beq.n	8003298 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b01      	cmp	r3, #1
 8003214:	d107      	bne.n	8003226 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003216:	4b47      	ldr	r3, [pc, #284]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321e:	2b00      	cmp	r3, #0
 8003220:	d119      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	e07f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	2b02      	cmp	r3, #2
 800322c:	d003      	beq.n	8003236 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800322e:	687b      	ldr	r3, [r7, #4]
 8003230:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003232:	2b03      	cmp	r3, #3
 8003234:	d107      	bne.n	8003246 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003236:	4b3f      	ldr	r3, [pc, #252]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800323e:	2b00      	cmp	r3, #0
 8003240:	d109      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003242:	2301      	movs	r3, #1
 8003244:	e06f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003246:	4b3b      	ldr	r3, [pc, #236]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0302 	and.w	r3, r3, #2
 800324e:	2b00      	cmp	r3, #0
 8003250:	d101      	bne.n	8003256 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003252:	2301      	movs	r3, #1
 8003254:	e067      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003256:	4b37      	ldr	r3, [pc, #220]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	f023 0203 	bic.w	r2, r3, #3
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	685b      	ldr	r3, [r3, #4]
 8003262:	4934      	ldr	r1, [pc, #208]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003264:	4313      	orrs	r3, r2
 8003266:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003268:	f7fd fd50 	bl	8000d0c <HAL_GetTick>
 800326c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800326e:	e00a      	b.n	8003286 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003270:	f7fd fd4c 	bl	8000d0c <HAL_GetTick>
 8003274:	4602      	mov	r2, r0
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	f241 3288 	movw	r2, #5000	; 0x1388
 800327e:	4293      	cmp	r3, r2
 8003280:	d901      	bls.n	8003286 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003282:	2303      	movs	r3, #3
 8003284:	e04f      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003286:	4b2b      	ldr	r3, [pc, #172]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003288:	689b      	ldr	r3, [r3, #8]
 800328a:	f003 020c 	and.w	r2, r3, #12
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	009b      	lsls	r3, r3, #2
 8003294:	429a      	cmp	r2, r3
 8003296:	d1eb      	bne.n	8003270 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003298:	4b25      	ldr	r3, [pc, #148]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	f003 0307 	and.w	r3, r3, #7
 80032a0:	683a      	ldr	r2, [r7, #0]
 80032a2:	429a      	cmp	r2, r3
 80032a4:	d20c      	bcs.n	80032c0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032a6:	4b22      	ldr	r3, [pc, #136]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 80032a8:	683a      	ldr	r2, [r7, #0]
 80032aa:	b2d2      	uxtb	r2, r2
 80032ac:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80032ae:	4b20      	ldr	r3, [pc, #128]	; (8003330 <HAL_RCC_ClockConfig+0x1b8>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0307 	and.w	r3, r3, #7
 80032b6:	683a      	ldr	r2, [r7, #0]
 80032b8:	429a      	cmp	r2, r3
 80032ba:	d001      	beq.n	80032c0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80032bc:	2301      	movs	r3, #1
 80032be:	e032      	b.n	8003326 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 0304 	and.w	r3, r3, #4
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d008      	beq.n	80032de <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80032cc:	4b19      	ldr	r3, [pc, #100]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032ce:	689b      	ldr	r3, [r3, #8]
 80032d0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	68db      	ldr	r3, [r3, #12]
 80032d8:	4916      	ldr	r1, [pc, #88]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032da:	4313      	orrs	r3, r2
 80032dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	681b      	ldr	r3, [r3, #0]
 80032e2:	f003 0308 	and.w	r3, r3, #8
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d009      	beq.n	80032fe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80032ea:	4b12      	ldr	r3, [pc, #72]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032ec:	689b      	ldr	r3, [r3, #8]
 80032ee:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	691b      	ldr	r3, [r3, #16]
 80032f6:	00db      	lsls	r3, r3, #3
 80032f8:	490e      	ldr	r1, [pc, #56]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 80032fa:	4313      	orrs	r3, r2
 80032fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80032fe:	f000 f821 	bl	8003344 <HAL_RCC_GetSysClockFreq>
 8003302:	4602      	mov	r2, r0
 8003304:	4b0b      	ldr	r3, [pc, #44]	; (8003334 <HAL_RCC_ClockConfig+0x1bc>)
 8003306:	689b      	ldr	r3, [r3, #8]
 8003308:	091b      	lsrs	r3, r3, #4
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	490a      	ldr	r1, [pc, #40]	; (8003338 <HAL_RCC_ClockConfig+0x1c0>)
 8003310:	5ccb      	ldrb	r3, [r1, r3]
 8003312:	fa22 f303 	lsr.w	r3, r2, r3
 8003316:	4a09      	ldr	r2, [pc, #36]	; (800333c <HAL_RCC_ClockConfig+0x1c4>)
 8003318:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800331a:	4b09      	ldr	r3, [pc, #36]	; (8003340 <HAL_RCC_ClockConfig+0x1c8>)
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	4618      	mov	r0, r3
 8003320:	f7fd fcb0 	bl	8000c84 <HAL_InitTick>

  return HAL_OK;
 8003324:	2300      	movs	r3, #0
}
 8003326:	4618      	mov	r0, r3
 8003328:	3710      	adds	r7, #16
 800332a:	46bd      	mov	sp, r7
 800332c:	bd80      	pop	{r7, pc}
 800332e:	bf00      	nop
 8003330:	40023c00 	.word	0x40023c00
 8003334:	40023800 	.word	0x40023800
 8003338:	080070f8 	.word	0x080070f8
 800333c:	20000040 	.word	0x20000040
 8003340:	20000044 	.word	0x20000044

08003344 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003344:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003348:	b090      	sub	sp, #64	; 0x40
 800334a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800334c:	2300      	movs	r3, #0
 800334e:	637b      	str	r3, [r7, #52]	; 0x34
 8003350:	2300      	movs	r3, #0
 8003352:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003354:	2300      	movs	r3, #0
 8003356:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003358:	2300      	movs	r3, #0
 800335a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800335c:	4b59      	ldr	r3, [pc, #356]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	f003 030c 	and.w	r3, r3, #12
 8003364:	2b08      	cmp	r3, #8
 8003366:	d00d      	beq.n	8003384 <HAL_RCC_GetSysClockFreq+0x40>
 8003368:	2b08      	cmp	r3, #8
 800336a:	f200 80a1 	bhi.w	80034b0 <HAL_RCC_GetSysClockFreq+0x16c>
 800336e:	2b00      	cmp	r3, #0
 8003370:	d002      	beq.n	8003378 <HAL_RCC_GetSysClockFreq+0x34>
 8003372:	2b04      	cmp	r3, #4
 8003374:	d003      	beq.n	800337e <HAL_RCC_GetSysClockFreq+0x3a>
 8003376:	e09b      	b.n	80034b0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003378:	4b53      	ldr	r3, [pc, #332]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x184>)
 800337a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800337c:	e09b      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800337e:	4b53      	ldr	r3, [pc, #332]	; (80034cc <HAL_RCC_GetSysClockFreq+0x188>)
 8003380:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003382:	e098      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003384:	4b4f      	ldr	r3, [pc, #316]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003386:	685b      	ldr	r3, [r3, #4]
 8003388:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800338c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800338e:	4b4d      	ldr	r3, [pc, #308]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003396:	2b00      	cmp	r3, #0
 8003398:	d028      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800339a:	4b4a      	ldr	r3, [pc, #296]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x180>)
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	099b      	lsrs	r3, r3, #6
 80033a0:	2200      	movs	r2, #0
 80033a2:	623b      	str	r3, [r7, #32]
 80033a4:	627a      	str	r2, [r7, #36]	; 0x24
 80033a6:	6a3b      	ldr	r3, [r7, #32]
 80033a8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80033ac:	2100      	movs	r1, #0
 80033ae:	4b47      	ldr	r3, [pc, #284]	; (80034cc <HAL_RCC_GetSysClockFreq+0x188>)
 80033b0:	fb03 f201 	mul.w	r2, r3, r1
 80033b4:	2300      	movs	r3, #0
 80033b6:	fb00 f303 	mul.w	r3, r0, r3
 80033ba:	4413      	add	r3, r2
 80033bc:	4a43      	ldr	r2, [pc, #268]	; (80034cc <HAL_RCC_GetSysClockFreq+0x188>)
 80033be:	fba0 1202 	umull	r1, r2, r0, r2
 80033c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80033c4:	460a      	mov	r2, r1
 80033c6:	62ba      	str	r2, [r7, #40]	; 0x28
 80033c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80033ca:	4413      	add	r3, r2
 80033cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80033ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80033d0:	2200      	movs	r2, #0
 80033d2:	61bb      	str	r3, [r7, #24]
 80033d4:	61fa      	str	r2, [r7, #28]
 80033d6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80033da:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80033de:	f7fc fef9 	bl	80001d4 <__aeabi_uldivmod>
 80033e2:	4602      	mov	r2, r0
 80033e4:	460b      	mov	r3, r1
 80033e6:	4613      	mov	r3, r2
 80033e8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80033ea:	e053      	b.n	8003494 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033ec:	4b35      	ldr	r3, [pc, #212]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x180>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	099b      	lsrs	r3, r3, #6
 80033f2:	2200      	movs	r2, #0
 80033f4:	613b      	str	r3, [r7, #16]
 80033f6:	617a      	str	r2, [r7, #20]
 80033f8:	693b      	ldr	r3, [r7, #16]
 80033fa:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80033fe:	f04f 0b00 	mov.w	fp, #0
 8003402:	4652      	mov	r2, sl
 8003404:	465b      	mov	r3, fp
 8003406:	f04f 0000 	mov.w	r0, #0
 800340a:	f04f 0100 	mov.w	r1, #0
 800340e:	0159      	lsls	r1, r3, #5
 8003410:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003414:	0150      	lsls	r0, r2, #5
 8003416:	4602      	mov	r2, r0
 8003418:	460b      	mov	r3, r1
 800341a:	ebb2 080a 	subs.w	r8, r2, sl
 800341e:	eb63 090b 	sbc.w	r9, r3, fp
 8003422:	f04f 0200 	mov.w	r2, #0
 8003426:	f04f 0300 	mov.w	r3, #0
 800342a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800342e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003432:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003436:	ebb2 0408 	subs.w	r4, r2, r8
 800343a:	eb63 0509 	sbc.w	r5, r3, r9
 800343e:	f04f 0200 	mov.w	r2, #0
 8003442:	f04f 0300 	mov.w	r3, #0
 8003446:	00eb      	lsls	r3, r5, #3
 8003448:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800344c:	00e2      	lsls	r2, r4, #3
 800344e:	4614      	mov	r4, r2
 8003450:	461d      	mov	r5, r3
 8003452:	eb14 030a 	adds.w	r3, r4, sl
 8003456:	603b      	str	r3, [r7, #0]
 8003458:	eb45 030b 	adc.w	r3, r5, fp
 800345c:	607b      	str	r3, [r7, #4]
 800345e:	f04f 0200 	mov.w	r2, #0
 8003462:	f04f 0300 	mov.w	r3, #0
 8003466:	e9d7 4500 	ldrd	r4, r5, [r7]
 800346a:	4629      	mov	r1, r5
 800346c:	028b      	lsls	r3, r1, #10
 800346e:	4621      	mov	r1, r4
 8003470:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003474:	4621      	mov	r1, r4
 8003476:	028a      	lsls	r2, r1, #10
 8003478:	4610      	mov	r0, r2
 800347a:	4619      	mov	r1, r3
 800347c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800347e:	2200      	movs	r2, #0
 8003480:	60bb      	str	r3, [r7, #8]
 8003482:	60fa      	str	r2, [r7, #12]
 8003484:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003488:	f7fc fea4 	bl	80001d4 <__aeabi_uldivmod>
 800348c:	4602      	mov	r2, r0
 800348e:	460b      	mov	r3, r1
 8003490:	4613      	mov	r3, r2
 8003492:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003494:	4b0b      	ldr	r3, [pc, #44]	; (80034c4 <HAL_RCC_GetSysClockFreq+0x180>)
 8003496:	685b      	ldr	r3, [r3, #4]
 8003498:	0c1b      	lsrs	r3, r3, #16
 800349a:	f003 0303 	and.w	r3, r3, #3
 800349e:	3301      	adds	r3, #1
 80034a0:	005b      	lsls	r3, r3, #1
 80034a2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80034a4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80034a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80034ac:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034ae:	e002      	b.n	80034b6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80034b0:	4b05      	ldr	r3, [pc, #20]	; (80034c8 <HAL_RCC_GetSysClockFreq+0x184>)
 80034b2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80034b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80034b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80034b8:	4618      	mov	r0, r3
 80034ba:	3740      	adds	r7, #64	; 0x40
 80034bc:	46bd      	mov	sp, r7
 80034be:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034c2:	bf00      	nop
 80034c4:	40023800 	.word	0x40023800
 80034c8:	00f42400 	.word	0x00f42400
 80034cc:	017d7840 	.word	0x017d7840

080034d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80034d0:	b480      	push	{r7}
 80034d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80034d4:	4b03      	ldr	r3, [pc, #12]	; (80034e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80034d6:	681b      	ldr	r3, [r3, #0]
}
 80034d8:	4618      	mov	r0, r3
 80034da:	46bd      	mov	sp, r7
 80034dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034e0:	4770      	bx	lr
 80034e2:	bf00      	nop
 80034e4:	20000040 	.word	0x20000040

080034e8 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80034e8:	b084      	sub	sp, #16
 80034ea:	b580      	push	{r7, lr}
 80034ec:	b084      	sub	sp, #16
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	6078      	str	r0, [r7, #4]
 80034f2:	f107 001c 	add.w	r0, r7, #28
 80034f6:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80034fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80034fc:	2b01      	cmp	r3, #1
 80034fe:	d122      	bne.n	8003546 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003504:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 8003514:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8003518:	687a      	ldr	r2, [r7, #4]
 800351a:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	68db      	ldr	r3, [r3, #12]
 8003520:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8003528:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800352a:	2b01      	cmp	r3, #1
 800352c:	d105      	bne.n	800353a <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	68db      	ldr	r3, [r3, #12]
 8003532:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800353a:	6878      	ldr	r0, [r7, #4]
 800353c:	f001 fbee 	bl	8004d1c <USB_CoreReset>
 8003540:	4603      	mov	r3, r0
 8003542:	73fb      	strb	r3, [r7, #15]
 8003544:	e01a      	b.n	800357c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8003552:	6878      	ldr	r0, [r7, #4]
 8003554:	f001 fbe2 	bl	8004d1c <USB_CoreReset>
 8003558:	4603      	mov	r3, r0
 800355a:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 800355c:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800355e:	2b00      	cmp	r3, #0
 8003560:	d106      	bne.n	8003570 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003566:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	639a      	str	r2, [r3, #56]	; 0x38
 800356e:	e005      	b.n	800357c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003574:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800357c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800357e:	2b01      	cmp	r3, #1
 8003580:	d10b      	bne.n	800359a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	f043 0206 	orr.w	r2, r3, #6
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	689b      	ldr	r3, [r3, #8]
 8003592:	f043 0220 	orr.w	r2, r3, #32
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800359a:	7bfb      	ldrb	r3, [r7, #15]
}
 800359c:	4618      	mov	r0, r3
 800359e:	3710      	adds	r7, #16
 80035a0:	46bd      	mov	sp, r7
 80035a2:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80035a6:	b004      	add	sp, #16
 80035a8:	4770      	bx	lr
	...

080035ac <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 80035ac:	b480      	push	{r7}
 80035ae:	b087      	sub	sp, #28
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	60f8      	str	r0, [r7, #12]
 80035b4:	60b9      	str	r1, [r7, #8]
 80035b6:	4613      	mov	r3, r2
 80035b8:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 80035ba:	79fb      	ldrb	r3, [r7, #7]
 80035bc:	2b02      	cmp	r3, #2
 80035be:	d165      	bne.n	800368c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 80035c0:	68bb      	ldr	r3, [r7, #8]
 80035c2:	4a41      	ldr	r2, [pc, #260]	; (80036c8 <USB_SetTurnaroundTime+0x11c>)
 80035c4:	4293      	cmp	r3, r2
 80035c6:	d906      	bls.n	80035d6 <USB_SetTurnaroundTime+0x2a>
 80035c8:	68bb      	ldr	r3, [r7, #8]
 80035ca:	4a40      	ldr	r2, [pc, #256]	; (80036cc <USB_SetTurnaroundTime+0x120>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d202      	bcs.n	80035d6 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 80035d0:	230f      	movs	r3, #15
 80035d2:	617b      	str	r3, [r7, #20]
 80035d4:	e062      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 80035d6:	68bb      	ldr	r3, [r7, #8]
 80035d8:	4a3c      	ldr	r2, [pc, #240]	; (80036cc <USB_SetTurnaroundTime+0x120>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d306      	bcc.n	80035ec <USB_SetTurnaroundTime+0x40>
 80035de:	68bb      	ldr	r3, [r7, #8]
 80035e0:	4a3b      	ldr	r2, [pc, #236]	; (80036d0 <USB_SetTurnaroundTime+0x124>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d202      	bcs.n	80035ec <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 80035e6:	230e      	movs	r3, #14
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e057      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 80035ec:	68bb      	ldr	r3, [r7, #8]
 80035ee:	4a38      	ldr	r2, [pc, #224]	; (80036d0 <USB_SetTurnaroundTime+0x124>)
 80035f0:	4293      	cmp	r3, r2
 80035f2:	d306      	bcc.n	8003602 <USB_SetTurnaroundTime+0x56>
 80035f4:	68bb      	ldr	r3, [r7, #8]
 80035f6:	4a37      	ldr	r2, [pc, #220]	; (80036d4 <USB_SetTurnaroundTime+0x128>)
 80035f8:	4293      	cmp	r3, r2
 80035fa:	d202      	bcs.n	8003602 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 80035fc:	230d      	movs	r3, #13
 80035fe:	617b      	str	r3, [r7, #20]
 8003600:	e04c      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	4a33      	ldr	r2, [pc, #204]	; (80036d4 <USB_SetTurnaroundTime+0x128>)
 8003606:	4293      	cmp	r3, r2
 8003608:	d306      	bcc.n	8003618 <USB_SetTurnaroundTime+0x6c>
 800360a:	68bb      	ldr	r3, [r7, #8]
 800360c:	4a32      	ldr	r2, [pc, #200]	; (80036d8 <USB_SetTurnaroundTime+0x12c>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d802      	bhi.n	8003618 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 8003612:	230c      	movs	r3, #12
 8003614:	617b      	str	r3, [r7, #20]
 8003616:	e041      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8003618:	68bb      	ldr	r3, [r7, #8]
 800361a:	4a2f      	ldr	r2, [pc, #188]	; (80036d8 <USB_SetTurnaroundTime+0x12c>)
 800361c:	4293      	cmp	r3, r2
 800361e:	d906      	bls.n	800362e <USB_SetTurnaroundTime+0x82>
 8003620:	68bb      	ldr	r3, [r7, #8]
 8003622:	4a2e      	ldr	r2, [pc, #184]	; (80036dc <USB_SetTurnaroundTime+0x130>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d802      	bhi.n	800362e <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8003628:	230b      	movs	r3, #11
 800362a:	617b      	str	r3, [r7, #20]
 800362c:	e036      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 800362e:	68bb      	ldr	r3, [r7, #8]
 8003630:	4a2a      	ldr	r2, [pc, #168]	; (80036dc <USB_SetTurnaroundTime+0x130>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d906      	bls.n	8003644 <USB_SetTurnaroundTime+0x98>
 8003636:	68bb      	ldr	r3, [r7, #8]
 8003638:	4a29      	ldr	r2, [pc, #164]	; (80036e0 <USB_SetTurnaroundTime+0x134>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d802      	bhi.n	8003644 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 800363e:	230a      	movs	r3, #10
 8003640:	617b      	str	r3, [r7, #20]
 8003642:	e02b      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 8003644:	68bb      	ldr	r3, [r7, #8]
 8003646:	4a26      	ldr	r2, [pc, #152]	; (80036e0 <USB_SetTurnaroundTime+0x134>)
 8003648:	4293      	cmp	r3, r2
 800364a:	d906      	bls.n	800365a <USB_SetTurnaroundTime+0xae>
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	4a25      	ldr	r2, [pc, #148]	; (80036e4 <USB_SetTurnaroundTime+0x138>)
 8003650:	4293      	cmp	r3, r2
 8003652:	d202      	bcs.n	800365a <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 8003654:	2309      	movs	r3, #9
 8003656:	617b      	str	r3, [r7, #20]
 8003658:	e020      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 800365a:	68bb      	ldr	r3, [r7, #8]
 800365c:	4a21      	ldr	r2, [pc, #132]	; (80036e4 <USB_SetTurnaroundTime+0x138>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d306      	bcc.n	8003670 <USB_SetTurnaroundTime+0xc4>
 8003662:	68bb      	ldr	r3, [r7, #8]
 8003664:	4a20      	ldr	r2, [pc, #128]	; (80036e8 <USB_SetTurnaroundTime+0x13c>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d802      	bhi.n	8003670 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800366a:	2308      	movs	r3, #8
 800366c:	617b      	str	r3, [r7, #20]
 800366e:	e015      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003670:	68bb      	ldr	r3, [r7, #8]
 8003672:	4a1d      	ldr	r2, [pc, #116]	; (80036e8 <USB_SetTurnaroundTime+0x13c>)
 8003674:	4293      	cmp	r3, r2
 8003676:	d906      	bls.n	8003686 <USB_SetTurnaroundTime+0xda>
 8003678:	68bb      	ldr	r3, [r7, #8]
 800367a:	4a1c      	ldr	r2, [pc, #112]	; (80036ec <USB_SetTurnaroundTime+0x140>)
 800367c:	4293      	cmp	r3, r2
 800367e:	d202      	bcs.n	8003686 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003680:	2307      	movs	r3, #7
 8003682:	617b      	str	r3, [r7, #20]
 8003684:	e00a      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003686:	2306      	movs	r3, #6
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	e007      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800368c:	79fb      	ldrb	r3, [r7, #7]
 800368e:	2b00      	cmp	r3, #0
 8003690:	d102      	bne.n	8003698 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003692:	2309      	movs	r3, #9
 8003694:	617b      	str	r3, [r7, #20]
 8003696:	e001      	b.n	800369c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003698:	2309      	movs	r3, #9
 800369a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	68db      	ldr	r3, [r3, #12]
 80036a0:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	68da      	ldr	r2, [r3, #12]
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	029b      	lsls	r3, r3, #10
 80036b0:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 80036b4:	431a      	orrs	r2, r3
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80036ba:	2300      	movs	r3, #0
}
 80036bc:	4618      	mov	r0, r3
 80036be:	371c      	adds	r7, #28
 80036c0:	46bd      	mov	sp, r7
 80036c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036c6:	4770      	bx	lr
 80036c8:	00d8acbf 	.word	0x00d8acbf
 80036cc:	00e4e1c0 	.word	0x00e4e1c0
 80036d0:	00f42400 	.word	0x00f42400
 80036d4:	01067380 	.word	0x01067380
 80036d8:	011a499f 	.word	0x011a499f
 80036dc:	01312cff 	.word	0x01312cff
 80036e0:	014ca43f 	.word	0x014ca43f
 80036e4:	016e3600 	.word	0x016e3600
 80036e8:	01a6ab1f 	.word	0x01a6ab1f
 80036ec:	01e84800 	.word	0x01e84800

080036f0 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80036f0:	b480      	push	{r7}
 80036f2:	b083      	sub	sp, #12
 80036f4:	af00      	add	r7, sp, #0
 80036f6:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	f043 0201 	orr.w	r2, r3, #1
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003704:	2300      	movs	r3, #0
}
 8003706:	4618      	mov	r0, r3
 8003708:	370c      	adds	r7, #12
 800370a:	46bd      	mov	sp, r7
 800370c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003710:	4770      	bx	lr

08003712 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003712:	b480      	push	{r7}
 8003714:	b083      	sub	sp, #12
 8003716:	af00      	add	r7, sp, #0
 8003718:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	f023 0201 	bic.w	r2, r3, #1
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003726:	2300      	movs	r3, #0
}
 8003728:	4618      	mov	r0, r3
 800372a:	370c      	adds	r7, #12
 800372c:	46bd      	mov	sp, r7
 800372e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003732:	4770      	bx	lr

08003734 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003734:	b580      	push	{r7, lr}
 8003736:	b084      	sub	sp, #16
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
 800373c:	460b      	mov	r3, r1
 800373e:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8003740:	2300      	movs	r3, #0
 8003742:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8003750:	78fb      	ldrb	r3, [r7, #3]
 8003752:	2b01      	cmp	r3, #1
 8003754:	d115      	bne.n	8003782 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	68db      	ldr	r3, [r3, #12]
 800375a:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003762:	2001      	movs	r0, #1
 8003764:	f7fd fade 	bl	8000d24 <HAL_Delay>
      ms++;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	3301      	adds	r3, #1
 800376c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f001 fa45 	bl	8004bfe <USB_GetMode>
 8003774:	4603      	mov	r3, r0
 8003776:	2b01      	cmp	r3, #1
 8003778:	d01e      	beq.n	80037b8 <USB_SetCurrentMode+0x84>
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2b31      	cmp	r3, #49	; 0x31
 800377e:	d9f0      	bls.n	8003762 <USB_SetCurrentMode+0x2e>
 8003780:	e01a      	b.n	80037b8 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003782:	78fb      	ldrb	r3, [r7, #3]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d115      	bne.n	80037b4 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	68db      	ldr	r3, [r3, #12]
 800378c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003794:	2001      	movs	r0, #1
 8003796:	f7fd fac5 	bl	8000d24 <HAL_Delay>
      ms++;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	3301      	adds	r3, #1
 800379e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f001 fa2c 	bl	8004bfe <USB_GetMode>
 80037a6:	4603      	mov	r3, r0
 80037a8:	2b00      	cmp	r3, #0
 80037aa:	d005      	beq.n	80037b8 <USB_SetCurrentMode+0x84>
 80037ac:	68fb      	ldr	r3, [r7, #12]
 80037ae:	2b31      	cmp	r3, #49	; 0x31
 80037b0:	d9f0      	bls.n	8003794 <USB_SetCurrentMode+0x60>
 80037b2:	e001      	b.n	80037b8 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80037b4:	2301      	movs	r3, #1
 80037b6:	e005      	b.n	80037c4 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	2b32      	cmp	r3, #50	; 0x32
 80037bc:	d101      	bne.n	80037c2 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80037be:	2301      	movs	r3, #1
 80037c0:	e000      	b.n	80037c4 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80037c2:	2300      	movs	r3, #0
}
 80037c4:	4618      	mov	r0, r3
 80037c6:	3710      	adds	r7, #16
 80037c8:	46bd      	mov	sp, r7
 80037ca:	bd80      	pop	{r7, pc}

080037cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037cc:	b084      	sub	sp, #16
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b086      	sub	sp, #24
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80037da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80037de:	2300      	movs	r3, #0
 80037e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80037e6:	2300      	movs	r3, #0
 80037e8:	613b      	str	r3, [r7, #16]
 80037ea:	e009      	b.n	8003800 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80037ec:	687a      	ldr	r2, [r7, #4]
 80037ee:	693b      	ldr	r3, [r7, #16]
 80037f0:	3340      	adds	r3, #64	; 0x40
 80037f2:	009b      	lsls	r3, r3, #2
 80037f4:	4413      	add	r3, r2
 80037f6:	2200      	movs	r2, #0
 80037f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80037fa:	693b      	ldr	r3, [r7, #16]
 80037fc:	3301      	adds	r3, #1
 80037fe:	613b      	str	r3, [r7, #16]
 8003800:	693b      	ldr	r3, [r7, #16]
 8003802:	2b0e      	cmp	r3, #14
 8003804:	d9f2      	bls.n	80037ec <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003806:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003808:	2b00      	cmp	r3, #0
 800380a:	d11c      	bne.n	8003846 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	68fa      	ldr	r2, [r7, #12]
 8003816:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800381a:	f043 0302 	orr.w	r3, r3, #2
 800381e:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003824:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003830:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800383c:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	639a      	str	r2, [r3, #56]	; 0x38
 8003844:	e00b      	b.n	800385e <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800384a:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003856:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003864:	461a      	mov	r2, r3
 8003866:	2300      	movs	r3, #0
 8003868:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003870:	4619      	mov	r1, r3
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003878:	461a      	mov	r2, r3
 800387a:	680b      	ldr	r3, [r1, #0]
 800387c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800387e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003880:	2b01      	cmp	r3, #1
 8003882:	d10c      	bne.n	800389e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003884:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003886:	2b00      	cmp	r3, #0
 8003888:	d104      	bne.n	8003894 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800388a:	2100      	movs	r1, #0
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 f965 	bl	8003b5c <USB_SetDevSpeed>
 8003892:	e008      	b.n	80038a6 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003894:	2101      	movs	r1, #1
 8003896:	6878      	ldr	r0, [r7, #4]
 8003898:	f000 f960 	bl	8003b5c <USB_SetDevSpeed>
 800389c:	e003      	b.n	80038a6 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 800389e:	2103      	movs	r1, #3
 80038a0:	6878      	ldr	r0, [r7, #4]
 80038a2:	f000 f95b 	bl	8003b5c <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80038a6:	2110      	movs	r1, #16
 80038a8:	6878      	ldr	r0, [r7, #4]
 80038aa:	f000 f8f3 	bl	8003a94 <USB_FlushTxFifo>
 80038ae:	4603      	mov	r3, r0
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d001      	beq.n	80038b8 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 80038b4:	2301      	movs	r3, #1
 80038b6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80038b8:	6878      	ldr	r0, [r7, #4]
 80038ba:	f000 f91f 	bl	8003afc <USB_FlushRxFifo>
 80038be:	4603      	mov	r3, r0
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d001      	beq.n	80038c8 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 80038c4:	2301      	movs	r3, #1
 80038c6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038ce:	461a      	mov	r2, r3
 80038d0:	2300      	movs	r3, #0
 80038d2:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038da:	461a      	mov	r2, r3
 80038dc:	2300      	movs	r3, #0
 80038de:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80038e0:	68fb      	ldr	r3, [r7, #12]
 80038e2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80038e6:	461a      	mov	r2, r3
 80038e8:	2300      	movs	r3, #0
 80038ea:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80038ec:	2300      	movs	r3, #0
 80038ee:	613b      	str	r3, [r7, #16]
 80038f0:	e043      	b.n	800397a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80038f2:	693b      	ldr	r3, [r7, #16]
 80038f4:	015a      	lsls	r2, r3, #5
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	4413      	add	r3, r2
 80038fa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003904:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003908:	d118      	bne.n	800393c <USB_DevInit+0x170>
    {
      if (i == 0U)
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d10a      	bne.n	8003926 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003910:	693b      	ldr	r3, [r7, #16]
 8003912:	015a      	lsls	r2, r3, #5
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	4413      	add	r3, r2
 8003918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800391c:	461a      	mov	r2, r3
 800391e:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003922:	6013      	str	r3, [r2, #0]
 8003924:	e013      	b.n	800394e <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003926:	693b      	ldr	r3, [r7, #16]
 8003928:	015a      	lsls	r2, r3, #5
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	4413      	add	r3, r2
 800392e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003932:	461a      	mov	r2, r3
 8003934:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003938:	6013      	str	r3, [r2, #0]
 800393a:	e008      	b.n	800394e <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 800393c:	693b      	ldr	r3, [r7, #16]
 800393e:	015a      	lsls	r2, r3, #5
 8003940:	68fb      	ldr	r3, [r7, #12]
 8003942:	4413      	add	r3, r2
 8003944:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003948:	461a      	mov	r2, r3
 800394a:	2300      	movs	r3, #0
 800394c:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	015a      	lsls	r2, r3, #5
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	4413      	add	r3, r2
 8003956:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800395a:	461a      	mov	r2, r3
 800395c:	2300      	movs	r3, #0
 800395e:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003960:	693b      	ldr	r3, [r7, #16]
 8003962:	015a      	lsls	r2, r3, #5
 8003964:	68fb      	ldr	r3, [r7, #12]
 8003966:	4413      	add	r3, r2
 8003968:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800396c:	461a      	mov	r2, r3
 800396e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003972:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003974:	693b      	ldr	r3, [r7, #16]
 8003976:	3301      	adds	r3, #1
 8003978:	613b      	str	r3, [r7, #16]
 800397a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800397c:	693a      	ldr	r2, [r7, #16]
 800397e:	429a      	cmp	r2, r3
 8003980:	d3b7      	bcc.n	80038f2 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003982:	2300      	movs	r3, #0
 8003984:	613b      	str	r3, [r7, #16]
 8003986:	e043      	b.n	8003a10 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003988:	693b      	ldr	r3, [r7, #16]
 800398a:	015a      	lsls	r2, r3, #5
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	4413      	add	r3, r2
 8003990:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003994:	681b      	ldr	r3, [r3, #0]
 8003996:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800399a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800399e:	d118      	bne.n	80039d2 <USB_DevInit+0x206>
    {
      if (i == 0U)
 80039a0:	693b      	ldr	r3, [r7, #16]
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d10a      	bne.n	80039bc <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80039a6:	693b      	ldr	r3, [r7, #16]
 80039a8:	015a      	lsls	r2, r3, #5
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	4413      	add	r3, r2
 80039ae:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039b2:	461a      	mov	r2, r3
 80039b4:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80039b8:	6013      	str	r3, [r2, #0]
 80039ba:	e013      	b.n	80039e4 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	015a      	lsls	r2, r3, #5
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	4413      	add	r3, r2
 80039c4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039c8:	461a      	mov	r2, r3
 80039ca:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80039ce:	6013      	str	r3, [r2, #0]
 80039d0:	e008      	b.n	80039e4 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80039d2:	693b      	ldr	r3, [r7, #16]
 80039d4:	015a      	lsls	r2, r3, #5
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	4413      	add	r3, r2
 80039da:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039de:	461a      	mov	r2, r3
 80039e0:	2300      	movs	r3, #0
 80039e2:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	015a      	lsls	r2, r3, #5
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	4413      	add	r3, r2
 80039ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80039f0:	461a      	mov	r2, r3
 80039f2:	2300      	movs	r3, #0
 80039f4:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80039f6:	693b      	ldr	r3, [r7, #16]
 80039f8:	015a      	lsls	r2, r3, #5
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	4413      	add	r3, r2
 80039fe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a02:	461a      	mov	r2, r3
 8003a04:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a08:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a0a:	693b      	ldr	r3, [r7, #16]
 8003a0c:	3301      	adds	r3, #1
 8003a0e:	613b      	str	r3, [r7, #16]
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	693a      	ldr	r2, [r7, #16]
 8003a14:	429a      	cmp	r2, r3
 8003a16:	d3b7      	bcc.n	8003988 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003a1e:	691b      	ldr	r3, [r3, #16]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003a26:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003a2a:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003a38:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d105      	bne.n	8003a4c <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	699b      	ldr	r3, [r3, #24]
 8003a44:	f043 0210 	orr.w	r2, r3, #16
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	699a      	ldr	r2, [r3, #24]
 8003a50:	4b0f      	ldr	r3, [pc, #60]	; (8003a90 <USB_DevInit+0x2c4>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	687a      	ldr	r2, [r7, #4]
 8003a56:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003a58:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003a5a:	2b00      	cmp	r3, #0
 8003a5c:	d005      	beq.n	8003a6a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	699b      	ldr	r3, [r3, #24]
 8003a62:	f043 0208 	orr.w	r2, r3, #8
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003a6a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003a6c:	2b01      	cmp	r3, #1
 8003a6e:	d107      	bne.n	8003a80 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	699b      	ldr	r3, [r3, #24]
 8003a74:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003a78:	f043 0304 	orr.w	r3, r3, #4
 8003a7c:	687a      	ldr	r2, [r7, #4]
 8003a7e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003a80:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003a8c:	b004      	add	sp, #16
 8003a8e:	4770      	bx	lr
 8003a90:	803c3800 	.word	0x803c3800

08003a94 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003a94:	b480      	push	{r7}
 8003a96:	b085      	sub	sp, #20
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
 8003a9c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003a9e:	2300      	movs	r3, #0
 8003aa0:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	3301      	adds	r3, #1
 8003aa6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	4a13      	ldr	r2, [pc, #76]	; (8003af8 <USB_FlushTxFifo+0x64>)
 8003aac:	4293      	cmp	r3, r2
 8003aae:	d901      	bls.n	8003ab4 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003ab0:	2303      	movs	r3, #3
 8003ab2:	e01b      	b.n	8003aec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	691b      	ldr	r3, [r3, #16]
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	daf2      	bge.n	8003aa2 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003abc:	2300      	movs	r3, #0
 8003abe:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003ac0:	683b      	ldr	r3, [r7, #0]
 8003ac2:	019b      	lsls	r3, r3, #6
 8003ac4:	f043 0220 	orr.w	r2, r3, #32
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	3301      	adds	r3, #1
 8003ad0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	4a08      	ldr	r2, [pc, #32]	; (8003af8 <USB_FlushTxFifo+0x64>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d901      	bls.n	8003ade <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003ada:	2303      	movs	r3, #3
 8003adc:	e006      	b.n	8003aec <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	691b      	ldr	r3, [r3, #16]
 8003ae2:	f003 0320 	and.w	r3, r3, #32
 8003ae6:	2b20      	cmp	r3, #32
 8003ae8:	d0f0      	beq.n	8003acc <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003aea:	2300      	movs	r3, #0
}
 8003aec:	4618      	mov	r0, r3
 8003aee:	3714      	adds	r7, #20
 8003af0:	46bd      	mov	sp, r7
 8003af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af6:	4770      	bx	lr
 8003af8:	00030d40 	.word	0x00030d40

08003afc <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003afc:	b480      	push	{r7}
 8003afe:	b085      	sub	sp, #20
 8003b00:	af00      	add	r7, sp, #0
 8003b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003b04:	2300      	movs	r3, #0
 8003b06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	3301      	adds	r3, #1
 8003b0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4a11      	ldr	r2, [pc, #68]	; (8003b58 <USB_FlushRxFifo+0x5c>)
 8003b12:	4293      	cmp	r3, r2
 8003b14:	d901      	bls.n	8003b1a <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003b16:	2303      	movs	r3, #3
 8003b18:	e018      	b.n	8003b4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	691b      	ldr	r3, [r3, #16]
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	daf2      	bge.n	8003b08 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003b22:	2300      	movs	r3, #0
 8003b24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	2210      	movs	r2, #16
 8003b2a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	3301      	adds	r3, #1
 8003b30:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	4a08      	ldr	r2, [pc, #32]	; (8003b58 <USB_FlushRxFifo+0x5c>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d901      	bls.n	8003b3e <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003b3a:	2303      	movs	r3, #3
 8003b3c:	e006      	b.n	8003b4c <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f003 0310 	and.w	r3, r3, #16
 8003b46:	2b10      	cmp	r3, #16
 8003b48:	d0f0      	beq.n	8003b2c <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003b4a:	2300      	movs	r3, #0
}
 8003b4c:	4618      	mov	r0, r3
 8003b4e:	3714      	adds	r7, #20
 8003b50:	46bd      	mov	sp, r7
 8003b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b56:	4770      	bx	lr
 8003b58:	00030d40 	.word	0x00030d40

08003b5c <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b085      	sub	sp, #20
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003b6c:	68fb      	ldr	r3, [r7, #12]
 8003b6e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b72:	681a      	ldr	r2, [r3, #0]
 8003b74:	78fb      	ldrb	r3, [r7, #3]
 8003b76:	68f9      	ldr	r1, [r7, #12]
 8003b78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003b80:	2300      	movs	r3, #0
}
 8003b82:	4618      	mov	r0, r3
 8003b84:	3714      	adds	r7, #20
 8003b86:	46bd      	mov	sp, r7
 8003b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8c:	4770      	bx	lr

08003b8e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003b8e:	b480      	push	{r7}
 8003b90:	b087      	sub	sp, #28
 8003b92:	af00      	add	r7, sp, #0
 8003b94:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003b9a:	693b      	ldr	r3, [r7, #16]
 8003b9c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 0306 	and.w	r3, r3, #6
 8003ba6:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	2b00      	cmp	r3, #0
 8003bac:	d102      	bne.n	8003bb4 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003bae:	2300      	movs	r3, #0
 8003bb0:	75fb      	strb	r3, [r7, #23]
 8003bb2:	e00a      	b.n	8003bca <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d002      	beq.n	8003bc0 <USB_GetDevSpeed+0x32>
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	2b06      	cmp	r3, #6
 8003bbe:	d102      	bne.n	8003bc6 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003bc0:	2302      	movs	r3, #2
 8003bc2:	75fb      	strb	r3, [r7, #23]
 8003bc4:	e001      	b.n	8003bca <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003bc6:	230f      	movs	r3, #15
 8003bc8:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003bca:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bcc:	4618      	mov	r0, r3
 8003bce:	371c      	adds	r7, #28
 8003bd0:	46bd      	mov	sp, r7
 8003bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd6:	4770      	bx	lr

08003bd8 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003bd8:	b480      	push	{r7}
 8003bda:	b085      	sub	sp, #20
 8003bdc:	af00      	add	r7, sp, #0
 8003bde:	6078      	str	r0, [r7, #4]
 8003be0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003bec:	683b      	ldr	r3, [r7, #0]
 8003bee:	785b      	ldrb	r3, [r3, #1]
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d13a      	bne.n	8003c6a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003bfa:	69da      	ldr	r2, [r3, #28]
 8003bfc:	683b      	ldr	r3, [r7, #0]
 8003bfe:	781b      	ldrb	r3, [r3, #0]
 8003c00:	f003 030f 	and.w	r3, r3, #15
 8003c04:	2101      	movs	r1, #1
 8003c06:	fa01 f303 	lsl.w	r3, r1, r3
 8003c0a:	b29b      	uxth	r3, r3
 8003c0c:	68f9      	ldr	r1, [r7, #12]
 8003c0e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c12:	4313      	orrs	r3, r2
 8003c14:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003c16:	68bb      	ldr	r3, [r7, #8]
 8003c18:	015a      	lsls	r2, r3, #5
 8003c1a:	68fb      	ldr	r3, [r7, #12]
 8003c1c:	4413      	add	r3, r2
 8003c1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d155      	bne.n	8003cd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c2c:	68bb      	ldr	r3, [r7, #8]
 8003c2e:	015a      	lsls	r2, r3, #5
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	4413      	add	r3, r2
 8003c34:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	683b      	ldr	r3, [r7, #0]
 8003c3c:	68db      	ldr	r3, [r3, #12]
 8003c3e:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c42:	683b      	ldr	r3, [r7, #0]
 8003c44:	791b      	ldrb	r3, [r3, #4]
 8003c46:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c48:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	059b      	lsls	r3, r3, #22
 8003c4e:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003c50:	4313      	orrs	r3, r2
 8003c52:	68ba      	ldr	r2, [r7, #8]
 8003c54:	0151      	lsls	r1, r2, #5
 8003c56:	68fa      	ldr	r2, [r7, #12]
 8003c58:	440a      	add	r2, r1
 8003c5a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003c5e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c62:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003c66:	6013      	str	r3, [r2, #0]
 8003c68:	e036      	b.n	8003cd8 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c70:	69da      	ldr	r2, [r3, #28]
 8003c72:	683b      	ldr	r3, [r7, #0]
 8003c74:	781b      	ldrb	r3, [r3, #0]
 8003c76:	f003 030f 	and.w	r3, r3, #15
 8003c7a:	2101      	movs	r1, #1
 8003c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8003c80:	041b      	lsls	r3, r3, #16
 8003c82:	68f9      	ldr	r1, [r7, #12]
 8003c84:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003c8c:	68bb      	ldr	r3, [r7, #8]
 8003c8e:	015a      	lsls	r2, r3, #5
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	4413      	add	r3, r2
 8003c94:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d11a      	bne.n	8003cd8 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003ca2:	68bb      	ldr	r3, [r7, #8]
 8003ca4:	015a      	lsls	r2, r3, #5
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	4413      	add	r3, r2
 8003caa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	683b      	ldr	r3, [r7, #0]
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	791b      	ldrb	r3, [r3, #4]
 8003cbc:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003cbe:	430b      	orrs	r3, r1
 8003cc0:	4313      	orrs	r3, r2
 8003cc2:	68ba      	ldr	r2, [r7, #8]
 8003cc4:	0151      	lsls	r1, r2, #5
 8003cc6:	68fa      	ldr	r2, [r7, #12]
 8003cc8:	440a      	add	r2, r1
 8003cca:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003cce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003cd2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003cd6:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003cd8:	2300      	movs	r3, #0
}
 8003cda:	4618      	mov	r0, r3
 8003cdc:	3714      	adds	r7, #20
 8003cde:	46bd      	mov	sp, r7
 8003ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce4:	4770      	bx	lr
	...

08003ce8 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003ce8:	b480      	push	{r7}
 8003cea:	b085      	sub	sp, #20
 8003cec:	af00      	add	r7, sp, #0
 8003cee:	6078      	str	r0, [r7, #4]
 8003cf0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003cf6:	683b      	ldr	r3, [r7, #0]
 8003cf8:	781b      	ldrb	r3, [r3, #0]
 8003cfa:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	785b      	ldrb	r3, [r3, #1]
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d161      	bne.n	8003dc8 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	015a      	lsls	r2, r3, #5
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	4413      	add	r3, r2
 8003d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003d16:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003d1a:	d11f      	bne.n	8003d5c <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003d1c:	68bb      	ldr	r3, [r7, #8]
 8003d1e:	015a      	lsls	r2, r3, #5
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	4413      	add	r3, r2
 8003d24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	68ba      	ldr	r2, [r7, #8]
 8003d2c:	0151      	lsls	r1, r2, #5
 8003d2e:	68fa      	ldr	r2, [r7, #12]
 8003d30:	440a      	add	r2, r1
 8003d32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d36:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003d3a:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	015a      	lsls	r2, r3, #5
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	4413      	add	r3, r2
 8003d44:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	68ba      	ldr	r2, [r7, #8]
 8003d4c:	0151      	lsls	r1, r2, #5
 8003d4e:	68fa      	ldr	r2, [r7, #12]
 8003d50:	440a      	add	r2, r1
 8003d52:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003d56:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d5a:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d62:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003d64:	683b      	ldr	r3, [r7, #0]
 8003d66:	781b      	ldrb	r3, [r3, #0]
 8003d68:	f003 030f 	and.w	r3, r3, #15
 8003d6c:	2101      	movs	r1, #1
 8003d6e:	fa01 f303 	lsl.w	r3, r1, r3
 8003d72:	b29b      	uxth	r3, r3
 8003d74:	43db      	mvns	r3, r3
 8003d76:	68f9      	ldr	r1, [r7, #12]
 8003d78:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003d7c:	4013      	ands	r3, r2
 8003d7e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003d86:	69da      	ldr	r2, [r3, #28]
 8003d88:	683b      	ldr	r3, [r7, #0]
 8003d8a:	781b      	ldrb	r3, [r3, #0]
 8003d8c:	f003 030f 	and.w	r3, r3, #15
 8003d90:	2101      	movs	r1, #1
 8003d92:	fa01 f303 	lsl.w	r3, r1, r3
 8003d96:	b29b      	uxth	r3, r3
 8003d98:	43db      	mvns	r3, r3
 8003d9a:	68f9      	ldr	r1, [r7, #12]
 8003d9c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003da0:	4013      	ands	r3, r2
 8003da2:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8003da4:	68bb      	ldr	r3, [r7, #8]
 8003da6:	015a      	lsls	r2, r3, #5
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	4413      	add	r3, r2
 8003dac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003db0:	681a      	ldr	r2, [r3, #0]
 8003db2:	68bb      	ldr	r3, [r7, #8]
 8003db4:	0159      	lsls	r1, r3, #5
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	440b      	add	r3, r1
 8003dba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003dbe:	4619      	mov	r1, r3
 8003dc0:	4b35      	ldr	r3, [pc, #212]	; (8003e98 <USB_DeactivateEndpoint+0x1b0>)
 8003dc2:	4013      	ands	r3, r2
 8003dc4:	600b      	str	r3, [r1, #0]
 8003dc6:	e060      	b.n	8003e8a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003dc8:	68bb      	ldr	r3, [r7, #8]
 8003dca:	015a      	lsls	r2, r3, #5
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	4413      	add	r3, r2
 8003dd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003dda:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003dde:	d11f      	bne.n	8003e20 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8003de0:	68bb      	ldr	r3, [r7, #8]
 8003de2:	015a      	lsls	r2, r3, #5
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	4413      	add	r3, r2
 8003de8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	68ba      	ldr	r2, [r7, #8]
 8003df0:	0151      	lsls	r1, r2, #5
 8003df2:	68fa      	ldr	r2, [r7, #12]
 8003df4:	440a      	add	r2, r1
 8003df6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003dfa:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003dfe:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8003e00:	68bb      	ldr	r3, [r7, #8]
 8003e02:	015a      	lsls	r2, r3, #5
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	4413      	add	r3, r2
 8003e08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68ba      	ldr	r2, [r7, #8]
 8003e10:	0151      	lsls	r1, r2, #5
 8003e12:	68fa      	ldr	r2, [r7, #12]
 8003e14:	440a      	add	r2, r1
 8003e16:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003e1a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003e1e:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e20:	68fb      	ldr	r3, [r7, #12]
 8003e22:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e26:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	781b      	ldrb	r3, [r3, #0]
 8003e2c:	f003 030f 	and.w	r3, r3, #15
 8003e30:	2101      	movs	r1, #1
 8003e32:	fa01 f303 	lsl.w	r3, r1, r3
 8003e36:	041b      	lsls	r3, r3, #16
 8003e38:	43db      	mvns	r3, r3
 8003e3a:	68f9      	ldr	r1, [r7, #12]
 8003e3c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e40:	4013      	ands	r3, r2
 8003e42:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8003e44:	68fb      	ldr	r3, [r7, #12]
 8003e46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e4a:	69da      	ldr	r2, [r3, #28]
 8003e4c:	683b      	ldr	r3, [r7, #0]
 8003e4e:	781b      	ldrb	r3, [r3, #0]
 8003e50:	f003 030f 	and.w	r3, r3, #15
 8003e54:	2101      	movs	r1, #1
 8003e56:	fa01 f303 	lsl.w	r3, r1, r3
 8003e5a:	041b      	lsls	r3, r3, #16
 8003e5c:	43db      	mvns	r3, r3
 8003e5e:	68f9      	ldr	r1, [r7, #12]
 8003e60:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e64:	4013      	ands	r3, r2
 8003e66:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	015a      	lsls	r2, r3, #5
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	4413      	add	r3, r2
 8003e70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e74:	681a      	ldr	r2, [r3, #0]
 8003e76:	68bb      	ldr	r3, [r7, #8]
 8003e78:	0159      	lsls	r1, r3, #5
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	440b      	add	r3, r1
 8003e7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003e82:	4619      	mov	r1, r3
 8003e84:	4b05      	ldr	r3, [pc, #20]	; (8003e9c <USB_DeactivateEndpoint+0x1b4>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8003e8a:	2300      	movs	r3, #0
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3714      	adds	r7, #20
 8003e90:	46bd      	mov	sp, r7
 8003e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e96:	4770      	bx	lr
 8003e98:	ec337800 	.word	0xec337800
 8003e9c:	eff37800 	.word	0xeff37800

08003ea0 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8003ea0:	b580      	push	{r7, lr}
 8003ea2:	b08a      	sub	sp, #40	; 0x28
 8003ea4:	af02      	add	r7, sp, #8
 8003ea6:	60f8      	str	r0, [r7, #12]
 8003ea8:	60b9      	str	r1, [r7, #8]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8003eb2:	68bb      	ldr	r3, [r7, #8]
 8003eb4:	781b      	ldrb	r3, [r3, #0]
 8003eb6:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8003eb8:	68bb      	ldr	r3, [r7, #8]
 8003eba:	785b      	ldrb	r3, [r3, #1]
 8003ebc:	2b01      	cmp	r3, #1
 8003ebe:	f040 815c 	bne.w	800417a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8003ec2:	68bb      	ldr	r3, [r7, #8]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d132      	bne.n	8003f30 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	015a      	lsls	r2, r3, #5
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	4413      	add	r3, r2
 8003ed2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed6:	691b      	ldr	r3, [r3, #16]
 8003ed8:	69ba      	ldr	r2, [r7, #24]
 8003eda:	0151      	lsls	r1, r2, #5
 8003edc:	69fa      	ldr	r2, [r7, #28]
 8003ede:	440a      	add	r2, r1
 8003ee0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ee4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003ee8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003eec:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8003eee:	69bb      	ldr	r3, [r7, #24]
 8003ef0:	015a      	lsls	r2, r3, #5
 8003ef2:	69fb      	ldr	r3, [r7, #28]
 8003ef4:	4413      	add	r3, r2
 8003ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	69ba      	ldr	r2, [r7, #24]
 8003efe:	0151      	lsls	r1, r2, #5
 8003f00:	69fa      	ldr	r2, [r7, #28]
 8003f02:	440a      	add	r2, r1
 8003f04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f08:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8003f0c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f0e:	69bb      	ldr	r3, [r7, #24]
 8003f10:	015a      	lsls	r2, r3, #5
 8003f12:	69fb      	ldr	r3, [r7, #28]
 8003f14:	4413      	add	r3, r2
 8003f16:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f1a:	691b      	ldr	r3, [r3, #16]
 8003f1c:	69ba      	ldr	r2, [r7, #24]
 8003f1e:	0151      	lsls	r1, r2, #5
 8003f20:	69fa      	ldr	r2, [r7, #28]
 8003f22:	440a      	add	r2, r1
 8003f24:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f28:	0cdb      	lsrs	r3, r3, #19
 8003f2a:	04db      	lsls	r3, r3, #19
 8003f2c:	6113      	str	r3, [r2, #16]
 8003f2e:	e074      	b.n	800401a <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8003f30:	69bb      	ldr	r3, [r7, #24]
 8003f32:	015a      	lsls	r2, r3, #5
 8003f34:	69fb      	ldr	r3, [r7, #28]
 8003f36:	4413      	add	r3, r2
 8003f38:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f3c:	691b      	ldr	r3, [r3, #16]
 8003f3e:	69ba      	ldr	r2, [r7, #24]
 8003f40:	0151      	lsls	r1, r2, #5
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	440a      	add	r2, r1
 8003f46:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f4a:	0cdb      	lsrs	r3, r3, #19
 8003f4c:	04db      	lsls	r3, r3, #19
 8003f4e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8003f50:	69bb      	ldr	r3, [r7, #24]
 8003f52:	015a      	lsls	r2, r3, #5
 8003f54:	69fb      	ldr	r3, [r7, #28]
 8003f56:	4413      	add	r3, r2
 8003f58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	69ba      	ldr	r2, [r7, #24]
 8003f60:	0151      	lsls	r1, r2, #5
 8003f62:	69fa      	ldr	r2, [r7, #28]
 8003f64:	440a      	add	r2, r1
 8003f66:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003f6a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8003f6e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8003f72:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003f74:	69bb      	ldr	r3, [r7, #24]
 8003f76:	015a      	lsls	r2, r3, #5
 8003f78:	69fb      	ldr	r3, [r7, #28]
 8003f7a:	4413      	add	r3, r2
 8003f7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003f80:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8003f82:	68bb      	ldr	r3, [r7, #8]
 8003f84:	6999      	ldr	r1, [r3, #24]
 8003f86:	68bb      	ldr	r3, [r7, #8]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	440b      	add	r3, r1
 8003f8c:	1e59      	subs	r1, r3, #1
 8003f8e:	68bb      	ldr	r3, [r7, #8]
 8003f90:	68db      	ldr	r3, [r3, #12]
 8003f92:	fbb1 f3f3 	udiv	r3, r1, r3
 8003f96:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8003f98:	4b9d      	ldr	r3, [pc, #628]	; (8004210 <USB_EPStartXfer+0x370>)
 8003f9a:	400b      	ands	r3, r1
 8003f9c:	69b9      	ldr	r1, [r7, #24]
 8003f9e:	0148      	lsls	r0, r1, #5
 8003fa0:	69f9      	ldr	r1, [r7, #28]
 8003fa2:	4401      	add	r1, r0
 8003fa4:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003fa8:	4313      	orrs	r3, r2
 8003faa:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8003fac:	69bb      	ldr	r3, [r7, #24]
 8003fae:	015a      	lsls	r2, r3, #5
 8003fb0:	69fb      	ldr	r3, [r7, #28]
 8003fb2:	4413      	add	r3, r2
 8003fb4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb8:	691a      	ldr	r2, [r3, #16]
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003fc2:	69b9      	ldr	r1, [r7, #24]
 8003fc4:	0148      	lsls	r0, r1, #5
 8003fc6:	69f9      	ldr	r1, [r7, #28]
 8003fc8:	4401      	add	r1, r0
 8003fca:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8003fd2:	68bb      	ldr	r3, [r7, #8]
 8003fd4:	791b      	ldrb	r3, [r3, #4]
 8003fd6:	2b01      	cmp	r3, #1
 8003fd8:	d11f      	bne.n	800401a <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8003fda:	69bb      	ldr	r3, [r7, #24]
 8003fdc:	015a      	lsls	r2, r3, #5
 8003fde:	69fb      	ldr	r3, [r7, #28]
 8003fe0:	4413      	add	r3, r2
 8003fe2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe6:	691b      	ldr	r3, [r3, #16]
 8003fe8:	69ba      	ldr	r2, [r7, #24]
 8003fea:	0151      	lsls	r1, r2, #5
 8003fec:	69fa      	ldr	r2, [r7, #28]
 8003fee:	440a      	add	r2, r1
 8003ff0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff4:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8003ff8:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8003ffa:	69bb      	ldr	r3, [r7, #24]
 8003ffc:	015a      	lsls	r2, r3, #5
 8003ffe:	69fb      	ldr	r3, [r7, #28]
 8004000:	4413      	add	r3, r2
 8004002:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004006:	691b      	ldr	r3, [r3, #16]
 8004008:	69ba      	ldr	r2, [r7, #24]
 800400a:	0151      	lsls	r1, r2, #5
 800400c:	69fa      	ldr	r2, [r7, #28]
 800400e:	440a      	add	r2, r1
 8004010:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004014:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004018:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 800401a:	79fb      	ldrb	r3, [r7, #7]
 800401c:	2b01      	cmp	r3, #1
 800401e:	d14b      	bne.n	80040b8 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004020:	68bb      	ldr	r3, [r7, #8]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	2b00      	cmp	r3, #0
 8004026:	d009      	beq.n	800403c <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004028:	69bb      	ldr	r3, [r7, #24]
 800402a:	015a      	lsls	r2, r3, #5
 800402c:	69fb      	ldr	r3, [r7, #28]
 800402e:	4413      	add	r3, r2
 8004030:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004034:	461a      	mov	r2, r3
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	695b      	ldr	r3, [r3, #20]
 800403a:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 800403c:	68bb      	ldr	r3, [r7, #8]
 800403e:	791b      	ldrb	r3, [r3, #4]
 8004040:	2b01      	cmp	r3, #1
 8004042:	d128      	bne.n	8004096 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004044:	69fb      	ldr	r3, [r7, #28]
 8004046:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800404a:	689b      	ldr	r3, [r3, #8]
 800404c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004050:	2b00      	cmp	r3, #0
 8004052:	d110      	bne.n	8004076 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004054:	69bb      	ldr	r3, [r7, #24]
 8004056:	015a      	lsls	r2, r3, #5
 8004058:	69fb      	ldr	r3, [r7, #28]
 800405a:	4413      	add	r3, r2
 800405c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	69ba      	ldr	r2, [r7, #24]
 8004064:	0151      	lsls	r1, r2, #5
 8004066:	69fa      	ldr	r2, [r7, #28]
 8004068:	440a      	add	r2, r1
 800406a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800406e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004072:	6013      	str	r3, [r2, #0]
 8004074:	e00f      	b.n	8004096 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	015a      	lsls	r2, r3, #5
 800407a:	69fb      	ldr	r3, [r7, #28]
 800407c:	4413      	add	r3, r2
 800407e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	69ba      	ldr	r2, [r7, #24]
 8004086:	0151      	lsls	r1, r2, #5
 8004088:	69fa      	ldr	r2, [r7, #28]
 800408a:	440a      	add	r2, r1
 800408c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004090:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004094:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004096:	69bb      	ldr	r3, [r7, #24]
 8004098:	015a      	lsls	r2, r3, #5
 800409a:	69fb      	ldr	r3, [r7, #28]
 800409c:	4413      	add	r3, r2
 800409e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	69ba      	ldr	r2, [r7, #24]
 80040a6:	0151      	lsls	r1, r2, #5
 80040a8:	69fa      	ldr	r2, [r7, #28]
 80040aa:	440a      	add	r2, r1
 80040ac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040b0:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040b4:	6013      	str	r3, [r2, #0]
 80040b6:	e133      	b.n	8004320 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80040b8:	69bb      	ldr	r3, [r7, #24]
 80040ba:	015a      	lsls	r2, r3, #5
 80040bc:	69fb      	ldr	r3, [r7, #28]
 80040be:	4413      	add	r3, r2
 80040c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	69ba      	ldr	r2, [r7, #24]
 80040c8:	0151      	lsls	r1, r2, #5
 80040ca:	69fa      	ldr	r2, [r7, #28]
 80040cc:	440a      	add	r2, r1
 80040ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80040d2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80040d6:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 80040d8:	68bb      	ldr	r3, [r7, #8]
 80040da:	791b      	ldrb	r3, [r3, #4]
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d015      	beq.n	800410c <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 80040e0:	68bb      	ldr	r3, [r7, #8]
 80040e2:	699b      	ldr	r3, [r3, #24]
 80040e4:	2b00      	cmp	r3, #0
 80040e6:	f000 811b 	beq.w	8004320 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80040ea:	69fb      	ldr	r3, [r7, #28]
 80040ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040f0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80040f2:	68bb      	ldr	r3, [r7, #8]
 80040f4:	781b      	ldrb	r3, [r3, #0]
 80040f6:	f003 030f 	and.w	r3, r3, #15
 80040fa:	2101      	movs	r1, #1
 80040fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004100:	69f9      	ldr	r1, [r7, #28]
 8004102:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004106:	4313      	orrs	r3, r2
 8004108:	634b      	str	r3, [r1, #52]	; 0x34
 800410a:	e109      	b.n	8004320 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800410c:	69fb      	ldr	r3, [r7, #28]
 800410e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004112:	689b      	ldr	r3, [r3, #8]
 8004114:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004118:	2b00      	cmp	r3, #0
 800411a:	d110      	bne.n	800413e <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 800411c:	69bb      	ldr	r3, [r7, #24]
 800411e:	015a      	lsls	r2, r3, #5
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	4413      	add	r3, r2
 8004124:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	69ba      	ldr	r2, [r7, #24]
 800412c:	0151      	lsls	r1, r2, #5
 800412e:	69fa      	ldr	r2, [r7, #28]
 8004130:	440a      	add	r2, r1
 8004132:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004136:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800413a:	6013      	str	r3, [r2, #0]
 800413c:	e00f      	b.n	800415e <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800413e:	69bb      	ldr	r3, [r7, #24]
 8004140:	015a      	lsls	r2, r3, #5
 8004142:	69fb      	ldr	r3, [r7, #28]
 8004144:	4413      	add	r3, r2
 8004146:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	0151      	lsls	r1, r2, #5
 8004150:	69fa      	ldr	r2, [r7, #28]
 8004152:	440a      	add	r2, r1
 8004154:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004158:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800415c:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 800415e:	68bb      	ldr	r3, [r7, #8]
 8004160:	6919      	ldr	r1, [r3, #16]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	781a      	ldrb	r2, [r3, #0]
 8004166:	68bb      	ldr	r3, [r7, #8]
 8004168:	699b      	ldr	r3, [r3, #24]
 800416a:	b298      	uxth	r0, r3
 800416c:	79fb      	ldrb	r3, [r7, #7]
 800416e:	9300      	str	r3, [sp, #0]
 8004170:	4603      	mov	r3, r0
 8004172:	68f8      	ldr	r0, [r7, #12]
 8004174:	f000 fade 	bl	8004734 <USB_WritePacket>
 8004178:	e0d2      	b.n	8004320 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800417a:	69bb      	ldr	r3, [r7, #24]
 800417c:	015a      	lsls	r2, r3, #5
 800417e:	69fb      	ldr	r3, [r7, #28]
 8004180:	4413      	add	r3, r2
 8004182:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004186:	691b      	ldr	r3, [r3, #16]
 8004188:	69ba      	ldr	r2, [r7, #24]
 800418a:	0151      	lsls	r1, r2, #5
 800418c:	69fa      	ldr	r2, [r7, #28]
 800418e:	440a      	add	r2, r1
 8004190:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004194:	0cdb      	lsrs	r3, r3, #19
 8004196:	04db      	lsls	r3, r3, #19
 8004198:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800419a:	69bb      	ldr	r3, [r7, #24]
 800419c:	015a      	lsls	r2, r3, #5
 800419e:	69fb      	ldr	r3, [r7, #28]
 80041a0:	4413      	add	r3, r2
 80041a2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041a6:	691b      	ldr	r3, [r3, #16]
 80041a8:	69ba      	ldr	r2, [r7, #24]
 80041aa:	0151      	lsls	r1, r2, #5
 80041ac:	69fa      	ldr	r2, [r7, #28]
 80041ae:	440a      	add	r2, r1
 80041b0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80041b4:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80041b8:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80041bc:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d126      	bne.n	8004214 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 80041c6:	69bb      	ldr	r3, [r7, #24]
 80041c8:	015a      	lsls	r2, r3, #5
 80041ca:	69fb      	ldr	r3, [r7, #28]
 80041cc:	4413      	add	r3, r2
 80041ce:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041d2:	691a      	ldr	r2, [r3, #16]
 80041d4:	68bb      	ldr	r3, [r7, #8]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80041dc:	69b9      	ldr	r1, [r7, #24]
 80041de:	0148      	lsls	r0, r1, #5
 80041e0:	69f9      	ldr	r1, [r7, #28]
 80041e2:	4401      	add	r1, r0
 80041e4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80041e8:	4313      	orrs	r3, r2
 80041ea:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80041ec:	69bb      	ldr	r3, [r7, #24]
 80041ee:	015a      	lsls	r2, r3, #5
 80041f0:	69fb      	ldr	r3, [r7, #28]
 80041f2:	4413      	add	r3, r2
 80041f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80041f8:	691b      	ldr	r3, [r3, #16]
 80041fa:	69ba      	ldr	r2, [r7, #24]
 80041fc:	0151      	lsls	r1, r2, #5
 80041fe:	69fa      	ldr	r2, [r7, #28]
 8004200:	440a      	add	r2, r1
 8004202:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004206:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800420a:	6113      	str	r3, [r2, #16]
 800420c:	e03a      	b.n	8004284 <USB_EPStartXfer+0x3e4>
 800420e:	bf00      	nop
 8004210:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004214:	68bb      	ldr	r3, [r7, #8]
 8004216:	699a      	ldr	r2, [r3, #24]
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	68db      	ldr	r3, [r3, #12]
 800421c:	4413      	add	r3, r2
 800421e:	1e5a      	subs	r2, r3, #1
 8004220:	68bb      	ldr	r3, [r7, #8]
 8004222:	68db      	ldr	r3, [r3, #12]
 8004224:	fbb2 f3f3 	udiv	r3, r2, r3
 8004228:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 800422a:	68bb      	ldr	r3, [r7, #8]
 800422c:	68db      	ldr	r3, [r3, #12]
 800422e:	8afa      	ldrh	r2, [r7, #22]
 8004230:	fb03 f202 	mul.w	r2, r3, r2
 8004234:	68bb      	ldr	r3, [r7, #8]
 8004236:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004238:	69bb      	ldr	r3, [r7, #24]
 800423a:	015a      	lsls	r2, r3, #5
 800423c:	69fb      	ldr	r3, [r7, #28]
 800423e:	4413      	add	r3, r2
 8004240:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004244:	691a      	ldr	r2, [r3, #16]
 8004246:	8afb      	ldrh	r3, [r7, #22]
 8004248:	04d9      	lsls	r1, r3, #19
 800424a:	4b38      	ldr	r3, [pc, #224]	; (800432c <USB_EPStartXfer+0x48c>)
 800424c:	400b      	ands	r3, r1
 800424e:	69b9      	ldr	r1, [r7, #24]
 8004250:	0148      	lsls	r0, r1, #5
 8004252:	69f9      	ldr	r1, [r7, #28]
 8004254:	4401      	add	r1, r0
 8004256:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800425a:	4313      	orrs	r3, r2
 800425c:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 800425e:	69bb      	ldr	r3, [r7, #24]
 8004260:	015a      	lsls	r2, r3, #5
 8004262:	69fb      	ldr	r3, [r7, #28]
 8004264:	4413      	add	r3, r2
 8004266:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	68bb      	ldr	r3, [r7, #8]
 800426e:	69db      	ldr	r3, [r3, #28]
 8004270:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004274:	69b9      	ldr	r1, [r7, #24]
 8004276:	0148      	lsls	r0, r1, #5
 8004278:	69f9      	ldr	r1, [r7, #28]
 800427a:	4401      	add	r1, r0
 800427c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004280:	4313      	orrs	r3, r2
 8004282:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004284:	79fb      	ldrb	r3, [r7, #7]
 8004286:	2b01      	cmp	r3, #1
 8004288:	d10d      	bne.n	80042a6 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	691b      	ldr	r3, [r3, #16]
 800428e:	2b00      	cmp	r3, #0
 8004290:	d009      	beq.n	80042a6 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004292:	68bb      	ldr	r3, [r7, #8]
 8004294:	6919      	ldr	r1, [r3, #16]
 8004296:	69bb      	ldr	r3, [r7, #24]
 8004298:	015a      	lsls	r2, r3, #5
 800429a:	69fb      	ldr	r3, [r7, #28]
 800429c:	4413      	add	r3, r2
 800429e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042a2:	460a      	mov	r2, r1
 80042a4:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 80042a6:	68bb      	ldr	r3, [r7, #8]
 80042a8:	791b      	ldrb	r3, [r3, #4]
 80042aa:	2b01      	cmp	r3, #1
 80042ac:	d128      	bne.n	8004300 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042ae:	69fb      	ldr	r3, [r7, #28]
 80042b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042b4:	689b      	ldr	r3, [r3, #8]
 80042b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d110      	bne.n	80042e0 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 80042be:	69bb      	ldr	r3, [r7, #24]
 80042c0:	015a      	lsls	r2, r3, #5
 80042c2:	69fb      	ldr	r3, [r7, #28]
 80042c4:	4413      	add	r3, r2
 80042c6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	69ba      	ldr	r2, [r7, #24]
 80042ce:	0151      	lsls	r1, r2, #5
 80042d0:	69fa      	ldr	r2, [r7, #28]
 80042d2:	440a      	add	r2, r1
 80042d4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042d8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042dc:	6013      	str	r3, [r2, #0]
 80042de:	e00f      	b.n	8004300 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 80042e0:	69bb      	ldr	r3, [r7, #24]
 80042e2:	015a      	lsls	r2, r3, #5
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	4413      	add	r3, r2
 80042e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	0151      	lsls	r1, r2, #5
 80042f2:	69fa      	ldr	r2, [r7, #28]
 80042f4:	440a      	add	r2, r1
 80042f6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80042fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80042fe:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004300:	69bb      	ldr	r3, [r7, #24]
 8004302:	015a      	lsls	r2, r3, #5
 8004304:	69fb      	ldr	r3, [r7, #28]
 8004306:	4413      	add	r3, r2
 8004308:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800430c:	681b      	ldr	r3, [r3, #0]
 800430e:	69ba      	ldr	r2, [r7, #24]
 8004310:	0151      	lsls	r1, r2, #5
 8004312:	69fa      	ldr	r2, [r7, #28]
 8004314:	440a      	add	r2, r1
 8004316:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800431a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800431e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004320:	2300      	movs	r3, #0
}
 8004322:	4618      	mov	r0, r3
 8004324:	3720      	adds	r7, #32
 8004326:	46bd      	mov	sp, r7
 8004328:	bd80      	pop	{r7, pc}
 800432a:	bf00      	nop
 800432c:	1ff80000 	.word	0x1ff80000

08004330 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	60f8      	str	r0, [r7, #12]
 8004338:	60b9      	str	r1, [r7, #8]
 800433a:	4613      	mov	r3, r2
 800433c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 8004342:	68bb      	ldr	r3, [r7, #8]
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004348:	68bb      	ldr	r3, [r7, #8]
 800434a:	785b      	ldrb	r3, [r3, #1]
 800434c:	2b01      	cmp	r3, #1
 800434e:	f040 80ce 	bne.w	80044ee <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004352:	68bb      	ldr	r3, [r7, #8]
 8004354:	699b      	ldr	r3, [r3, #24]
 8004356:	2b00      	cmp	r3, #0
 8004358:	d132      	bne.n	80043c0 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800435a:	693b      	ldr	r3, [r7, #16]
 800435c:	015a      	lsls	r2, r3, #5
 800435e:	697b      	ldr	r3, [r7, #20]
 8004360:	4413      	add	r3, r2
 8004362:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004366:	691b      	ldr	r3, [r3, #16]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	0151      	lsls	r1, r2, #5
 800436c:	697a      	ldr	r2, [r7, #20]
 800436e:	440a      	add	r2, r1
 8004370:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004374:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004378:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800437c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	015a      	lsls	r2, r3, #5
 8004382:	697b      	ldr	r3, [r7, #20]
 8004384:	4413      	add	r3, r2
 8004386:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800438a:	691b      	ldr	r3, [r3, #16]
 800438c:	693a      	ldr	r2, [r7, #16]
 800438e:	0151      	lsls	r1, r2, #5
 8004390:	697a      	ldr	r2, [r7, #20]
 8004392:	440a      	add	r2, r1
 8004394:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004398:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800439c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	015a      	lsls	r2, r3, #5
 80043a2:	697b      	ldr	r3, [r7, #20]
 80043a4:	4413      	add	r3, r2
 80043a6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043aa:	691b      	ldr	r3, [r3, #16]
 80043ac:	693a      	ldr	r2, [r7, #16]
 80043ae:	0151      	lsls	r1, r2, #5
 80043b0:	697a      	ldr	r2, [r7, #20]
 80043b2:	440a      	add	r2, r1
 80043b4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043b8:	0cdb      	lsrs	r3, r3, #19
 80043ba:	04db      	lsls	r3, r3, #19
 80043bc:	6113      	str	r3, [r2, #16]
 80043be:	e04e      	b.n	800445e <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	015a      	lsls	r2, r3, #5
 80043c4:	697b      	ldr	r3, [r7, #20]
 80043c6:	4413      	add	r3, r2
 80043c8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043cc:	691b      	ldr	r3, [r3, #16]
 80043ce:	693a      	ldr	r2, [r7, #16]
 80043d0:	0151      	lsls	r1, r2, #5
 80043d2:	697a      	ldr	r2, [r7, #20]
 80043d4:	440a      	add	r2, r1
 80043d6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043da:	0cdb      	lsrs	r3, r3, #19
 80043dc:	04db      	lsls	r3, r3, #19
 80043de:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80043e0:	693b      	ldr	r3, [r7, #16]
 80043e2:	015a      	lsls	r2, r3, #5
 80043e4:	697b      	ldr	r3, [r7, #20]
 80043e6:	4413      	add	r3, r2
 80043e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	693a      	ldr	r2, [r7, #16]
 80043f0:	0151      	lsls	r1, r2, #5
 80043f2:	697a      	ldr	r2, [r7, #20]
 80043f4:	440a      	add	r2, r1
 80043f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043fa:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80043fe:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004402:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8004404:	68bb      	ldr	r3, [r7, #8]
 8004406:	699a      	ldr	r2, [r3, #24]
 8004408:	68bb      	ldr	r3, [r7, #8]
 800440a:	68db      	ldr	r3, [r3, #12]
 800440c:	429a      	cmp	r2, r3
 800440e:	d903      	bls.n	8004418 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8004410:	68bb      	ldr	r3, [r7, #8]
 8004412:	68da      	ldr	r2, [r3, #12]
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004418:	693b      	ldr	r3, [r7, #16]
 800441a:	015a      	lsls	r2, r3, #5
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	4413      	add	r3, r2
 8004420:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004424:	691b      	ldr	r3, [r3, #16]
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	0151      	lsls	r1, r2, #5
 800442a:	697a      	ldr	r2, [r7, #20]
 800442c:	440a      	add	r2, r1
 800442e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004432:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004436:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004438:	693b      	ldr	r3, [r7, #16]
 800443a:	015a      	lsls	r2, r3, #5
 800443c:	697b      	ldr	r3, [r7, #20]
 800443e:	4413      	add	r3, r2
 8004440:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004444:	691a      	ldr	r2, [r3, #16]
 8004446:	68bb      	ldr	r3, [r7, #8]
 8004448:	699b      	ldr	r3, [r3, #24]
 800444a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800444e:	6939      	ldr	r1, [r7, #16]
 8004450:	0148      	lsls	r0, r1, #5
 8004452:	6979      	ldr	r1, [r7, #20]
 8004454:	4401      	add	r1, r0
 8004456:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800445a:	4313      	orrs	r3, r2
 800445c:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 800445e:	79fb      	ldrb	r3, [r7, #7]
 8004460:	2b01      	cmp	r3, #1
 8004462:	d11e      	bne.n	80044a2 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004464:	68bb      	ldr	r3, [r7, #8]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	2b00      	cmp	r3, #0
 800446a:	d009      	beq.n	8004480 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800446c:	693b      	ldr	r3, [r7, #16]
 800446e:	015a      	lsls	r2, r3, #5
 8004470:	697b      	ldr	r3, [r7, #20]
 8004472:	4413      	add	r3, r2
 8004474:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004478:	461a      	mov	r2, r3
 800447a:	68bb      	ldr	r3, [r7, #8]
 800447c:	695b      	ldr	r3, [r3, #20]
 800447e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004480:	693b      	ldr	r3, [r7, #16]
 8004482:	015a      	lsls	r2, r3, #5
 8004484:	697b      	ldr	r3, [r7, #20]
 8004486:	4413      	add	r3, r2
 8004488:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	693a      	ldr	r2, [r7, #16]
 8004490:	0151      	lsls	r1, r2, #5
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	440a      	add	r2, r1
 8004496:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800449a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800449e:	6013      	str	r3, [r2, #0]
 80044a0:	e097      	b.n	80045d2 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80044a2:	693b      	ldr	r3, [r7, #16]
 80044a4:	015a      	lsls	r2, r3, #5
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	4413      	add	r3, r2
 80044aa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	693a      	ldr	r2, [r7, #16]
 80044b2:	0151      	lsls	r1, r2, #5
 80044b4:	697a      	ldr	r2, [r7, #20]
 80044b6:	440a      	add	r2, r1
 80044b8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80044bc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80044c0:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 80044c2:	68bb      	ldr	r3, [r7, #8]
 80044c4:	699b      	ldr	r3, [r3, #24]
 80044c6:	2b00      	cmp	r3, #0
 80044c8:	f000 8083 	beq.w	80045d2 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 80044cc:	697b      	ldr	r3, [r7, #20]
 80044ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80044d2:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	781b      	ldrb	r3, [r3, #0]
 80044d8:	f003 030f 	and.w	r3, r3, #15
 80044dc:	2101      	movs	r1, #1
 80044de:	fa01 f303 	lsl.w	r3, r1, r3
 80044e2:	6979      	ldr	r1, [r7, #20]
 80044e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80044e8:	4313      	orrs	r3, r2
 80044ea:	634b      	str	r3, [r1, #52]	; 0x34
 80044ec:	e071      	b.n	80045d2 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 80044ee:	693b      	ldr	r3, [r7, #16]
 80044f0:	015a      	lsls	r2, r3, #5
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	4413      	add	r3, r2
 80044f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044fa:	691b      	ldr	r3, [r3, #16]
 80044fc:	693a      	ldr	r2, [r7, #16]
 80044fe:	0151      	lsls	r1, r2, #5
 8004500:	697a      	ldr	r2, [r7, #20]
 8004502:	440a      	add	r2, r1
 8004504:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004508:	0cdb      	lsrs	r3, r3, #19
 800450a:	04db      	lsls	r3, r3, #19
 800450c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800450e:	693b      	ldr	r3, [r7, #16]
 8004510:	015a      	lsls	r2, r3, #5
 8004512:	697b      	ldr	r3, [r7, #20]
 8004514:	4413      	add	r3, r2
 8004516:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800451a:	691b      	ldr	r3, [r3, #16]
 800451c:	693a      	ldr	r2, [r7, #16]
 800451e:	0151      	lsls	r1, r2, #5
 8004520:	697a      	ldr	r2, [r7, #20]
 8004522:	440a      	add	r2, r1
 8004524:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004528:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800452c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004530:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	699b      	ldr	r3, [r3, #24]
 8004536:	2b00      	cmp	r3, #0
 8004538:	d003      	beq.n	8004542 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	68da      	ldr	r2, [r3, #12]
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 8004542:	68bb      	ldr	r3, [r7, #8]
 8004544:	68da      	ldr	r2, [r3, #12]
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800454a:	693b      	ldr	r3, [r7, #16]
 800454c:	015a      	lsls	r2, r3, #5
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	4413      	add	r3, r2
 8004552:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004556:	691b      	ldr	r3, [r3, #16]
 8004558:	693a      	ldr	r2, [r7, #16]
 800455a:	0151      	lsls	r1, r2, #5
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	440a      	add	r2, r1
 8004560:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004564:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004568:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800456a:	693b      	ldr	r3, [r7, #16]
 800456c:	015a      	lsls	r2, r3, #5
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	4413      	add	r3, r2
 8004572:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004576:	691a      	ldr	r2, [r3, #16]
 8004578:	68bb      	ldr	r3, [r7, #8]
 800457a:	69db      	ldr	r3, [r3, #28]
 800457c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004580:	6939      	ldr	r1, [r7, #16]
 8004582:	0148      	lsls	r0, r1, #5
 8004584:	6979      	ldr	r1, [r7, #20]
 8004586:	4401      	add	r1, r0
 8004588:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800458c:	4313      	orrs	r3, r2
 800458e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004590:	79fb      	ldrb	r3, [r7, #7]
 8004592:	2b01      	cmp	r3, #1
 8004594:	d10d      	bne.n	80045b2 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004596:	68bb      	ldr	r3, [r7, #8]
 8004598:	691b      	ldr	r3, [r3, #16]
 800459a:	2b00      	cmp	r3, #0
 800459c:	d009      	beq.n	80045b2 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	6919      	ldr	r1, [r3, #16]
 80045a2:	693b      	ldr	r3, [r7, #16]
 80045a4:	015a      	lsls	r2, r3, #5
 80045a6:	697b      	ldr	r3, [r7, #20]
 80045a8:	4413      	add	r3, r2
 80045aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ae:	460a      	mov	r2, r1
 80045b0:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	015a      	lsls	r2, r3, #5
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	4413      	add	r3, r2
 80045ba:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045be:	681b      	ldr	r3, [r3, #0]
 80045c0:	693a      	ldr	r2, [r7, #16]
 80045c2:	0151      	lsls	r1, r2, #5
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	440a      	add	r2, r1
 80045c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045cc:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045d0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045d2:	2300      	movs	r3, #0
}
 80045d4:	4618      	mov	r0, r3
 80045d6:	371c      	adds	r7, #28
 80045d8:	46bd      	mov	sp, r7
 80045da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045de:	4770      	bx	lr

080045e0 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b087      	sub	sp, #28
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	6078      	str	r0, [r7, #4]
 80045e8:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80045ea:	2300      	movs	r3, #0
 80045ec:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 80045ee:	2300      	movs	r3, #0
 80045f0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	785b      	ldrb	r3, [r3, #1]
 80045fa:	2b01      	cmp	r3, #1
 80045fc:	d14a      	bne.n	8004694 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80045fe:	683b      	ldr	r3, [r7, #0]
 8004600:	781b      	ldrb	r3, [r3, #0]
 8004602:	015a      	lsls	r2, r3, #5
 8004604:	693b      	ldr	r3, [r7, #16]
 8004606:	4413      	add	r3, r2
 8004608:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004612:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004616:	f040 8086 	bne.w	8004726 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	781b      	ldrb	r3, [r3, #0]
 800461e:	015a      	lsls	r2, r3, #5
 8004620:	693b      	ldr	r3, [r7, #16]
 8004622:	4413      	add	r3, r2
 8004624:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	683a      	ldr	r2, [r7, #0]
 800462c:	7812      	ldrb	r2, [r2, #0]
 800462e:	0151      	lsls	r1, r2, #5
 8004630:	693a      	ldr	r2, [r7, #16]
 8004632:	440a      	add	r2, r1
 8004634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004638:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800463c:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 800463e:	683b      	ldr	r3, [r7, #0]
 8004640:	781b      	ldrb	r3, [r3, #0]
 8004642:	015a      	lsls	r2, r3, #5
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	4413      	add	r3, r2
 8004648:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	683a      	ldr	r2, [r7, #0]
 8004650:	7812      	ldrb	r2, [r2, #0]
 8004652:	0151      	lsls	r1, r2, #5
 8004654:	693a      	ldr	r2, [r7, #16]
 8004656:	440a      	add	r2, r1
 8004658:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800465c:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004660:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	3301      	adds	r3, #1
 8004666:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f242 7210 	movw	r2, #10000	; 0x2710
 800466e:	4293      	cmp	r3, r2
 8004670:	d902      	bls.n	8004678 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004672:	2301      	movs	r3, #1
 8004674:	75fb      	strb	r3, [r7, #23]
          break;
 8004676:	e056      	b.n	8004726 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	781b      	ldrb	r3, [r3, #0]
 800467c:	015a      	lsls	r2, r3, #5
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	4413      	add	r3, r2
 8004682:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800468c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004690:	d0e7      	beq.n	8004662 <USB_EPStopXfer+0x82>
 8004692:	e048      	b.n	8004726 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004694:	683b      	ldr	r3, [r7, #0]
 8004696:	781b      	ldrb	r3, [r3, #0]
 8004698:	015a      	lsls	r2, r3, #5
 800469a:	693b      	ldr	r3, [r7, #16]
 800469c:	4413      	add	r3, r2
 800469e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046a8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ac:	d13b      	bne.n	8004726 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	781b      	ldrb	r3, [r3, #0]
 80046b2:	015a      	lsls	r2, r3, #5
 80046b4:	693b      	ldr	r3, [r7, #16]
 80046b6:	4413      	add	r3, r2
 80046b8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046bc:	681b      	ldr	r3, [r3, #0]
 80046be:	683a      	ldr	r2, [r7, #0]
 80046c0:	7812      	ldrb	r2, [r2, #0]
 80046c2:	0151      	lsls	r1, r2, #5
 80046c4:	693a      	ldr	r2, [r7, #16]
 80046c6:	440a      	add	r2, r1
 80046c8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80046d0:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	781b      	ldrb	r3, [r3, #0]
 80046d6:	015a      	lsls	r2, r3, #5
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	4413      	add	r3, r2
 80046dc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	7812      	ldrb	r2, [r2, #0]
 80046e6:	0151      	lsls	r1, r2, #5
 80046e8:	693a      	ldr	r2, [r7, #16]
 80046ea:	440a      	add	r2, r1
 80046ec:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80046f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80046f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	3301      	adds	r3, #1
 80046fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80046fc:	68fb      	ldr	r3, [r7, #12]
 80046fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8004702:	4293      	cmp	r3, r2
 8004704:	d902      	bls.n	800470c <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	75fb      	strb	r3, [r7, #23]
          break;
 800470a:	e00c      	b.n	8004726 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 800470c:	683b      	ldr	r3, [r7, #0]
 800470e:	781b      	ldrb	r3, [r3, #0]
 8004710:	015a      	lsls	r2, r3, #5
 8004712:	693b      	ldr	r3, [r7, #16]
 8004714:	4413      	add	r3, r2
 8004716:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004724:	d0e7      	beq.n	80046f6 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 8004726:	7dfb      	ldrb	r3, [r7, #23]
}
 8004728:	4618      	mov	r0, r3
 800472a:	371c      	adds	r7, #28
 800472c:	46bd      	mov	sp, r7
 800472e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004732:	4770      	bx	lr

08004734 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 8004734:	b480      	push	{r7}
 8004736:	b089      	sub	sp, #36	; 0x24
 8004738:	af00      	add	r7, sp, #0
 800473a:	60f8      	str	r0, [r7, #12]
 800473c:	60b9      	str	r1, [r7, #8]
 800473e:	4611      	mov	r1, r2
 8004740:	461a      	mov	r2, r3
 8004742:	460b      	mov	r3, r1
 8004744:	71fb      	strb	r3, [r7, #7]
 8004746:	4613      	mov	r3, r2
 8004748:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 8004752:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8004756:	2b00      	cmp	r3, #0
 8004758:	d123      	bne.n	80047a2 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 800475a:	88bb      	ldrh	r3, [r7, #4]
 800475c:	3303      	adds	r3, #3
 800475e:	089b      	lsrs	r3, r3, #2
 8004760:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004762:	2300      	movs	r3, #0
 8004764:	61bb      	str	r3, [r7, #24]
 8004766:	e018      	b.n	800479a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004768:	79fb      	ldrb	r3, [r7, #7]
 800476a:	031a      	lsls	r2, r3, #12
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	4413      	add	r3, r2
 8004770:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004774:	461a      	mov	r2, r3
 8004776:	69fb      	ldr	r3, [r7, #28]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	6013      	str	r3, [r2, #0]
      pSrc++;
 800477c:	69fb      	ldr	r3, [r7, #28]
 800477e:	3301      	adds	r3, #1
 8004780:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004782:	69fb      	ldr	r3, [r7, #28]
 8004784:	3301      	adds	r3, #1
 8004786:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004788:	69fb      	ldr	r3, [r7, #28]
 800478a:	3301      	adds	r3, #1
 800478c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800478e:	69fb      	ldr	r3, [r7, #28]
 8004790:	3301      	adds	r3, #1
 8004792:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004794:	69bb      	ldr	r3, [r7, #24]
 8004796:	3301      	adds	r3, #1
 8004798:	61bb      	str	r3, [r7, #24]
 800479a:	69ba      	ldr	r2, [r7, #24]
 800479c:	693b      	ldr	r3, [r7, #16]
 800479e:	429a      	cmp	r2, r3
 80047a0:	d3e2      	bcc.n	8004768 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80047a2:	2300      	movs	r3, #0
}
 80047a4:	4618      	mov	r0, r3
 80047a6:	3724      	adds	r7, #36	; 0x24
 80047a8:	46bd      	mov	sp, r7
 80047aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ae:	4770      	bx	lr

080047b0 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 80047b0:	b480      	push	{r7}
 80047b2:	b08b      	sub	sp, #44	; 0x2c
 80047b4:	af00      	add	r7, sp, #0
 80047b6:	60f8      	str	r0, [r7, #12]
 80047b8:	60b9      	str	r1, [r7, #8]
 80047ba:	4613      	mov	r3, r2
 80047bc:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 80047c2:	68bb      	ldr	r3, [r7, #8]
 80047c4:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 80047c6:	88fb      	ldrh	r3, [r7, #6]
 80047c8:	089b      	lsrs	r3, r3, #2
 80047ca:	b29b      	uxth	r3, r3
 80047cc:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 80047ce:	88fb      	ldrh	r3, [r7, #6]
 80047d0:	f003 0303 	and.w	r3, r3, #3
 80047d4:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 80047d6:	2300      	movs	r3, #0
 80047d8:	623b      	str	r3, [r7, #32]
 80047da:	e014      	b.n	8004806 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 80047dc:	69bb      	ldr	r3, [r7, #24]
 80047de:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047e2:	681a      	ldr	r2, [r3, #0]
 80047e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047e6:	601a      	str	r2, [r3, #0]
    pDest++;
 80047e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047ea:	3301      	adds	r3, #1
 80047ec:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f0:	3301      	adds	r3, #1
 80047f2:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	3301      	adds	r3, #1
 80047f8:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 80047fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047fc:	3301      	adds	r3, #1
 80047fe:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004800:	6a3b      	ldr	r3, [r7, #32]
 8004802:	3301      	adds	r3, #1
 8004804:	623b      	str	r3, [r7, #32]
 8004806:	6a3a      	ldr	r2, [r7, #32]
 8004808:	697b      	ldr	r3, [r7, #20]
 800480a:	429a      	cmp	r2, r3
 800480c:	d3e6      	bcc.n	80047dc <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 800480e:	8bfb      	ldrh	r3, [r7, #30]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d01e      	beq.n	8004852 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004818:	69bb      	ldr	r3, [r7, #24]
 800481a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800481e:	461a      	mov	r2, r3
 8004820:	f107 0310 	add.w	r3, r7, #16
 8004824:	6812      	ldr	r2, [r2, #0]
 8004826:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004828:	693a      	ldr	r2, [r7, #16]
 800482a:	6a3b      	ldr	r3, [r7, #32]
 800482c:	b2db      	uxtb	r3, r3
 800482e:	00db      	lsls	r3, r3, #3
 8004830:	fa22 f303 	lsr.w	r3, r2, r3
 8004834:	b2da      	uxtb	r2, r3
 8004836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004838:	701a      	strb	r2, [r3, #0]
      i++;
 800483a:	6a3b      	ldr	r3, [r7, #32]
 800483c:	3301      	adds	r3, #1
 800483e:	623b      	str	r3, [r7, #32]
      pDest++;
 8004840:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004842:	3301      	adds	r3, #1
 8004844:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004846:	8bfb      	ldrh	r3, [r7, #30]
 8004848:	3b01      	subs	r3, #1
 800484a:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 800484c:	8bfb      	ldrh	r3, [r7, #30]
 800484e:	2b00      	cmp	r3, #0
 8004850:	d1ea      	bne.n	8004828 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004852:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004854:	4618      	mov	r0, r3
 8004856:	372c      	adds	r7, #44	; 0x2c
 8004858:	46bd      	mov	sp, r7
 800485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800485e:	4770      	bx	lr

08004860 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004860:	b480      	push	{r7}
 8004862:	b085      	sub	sp, #20
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
 8004868:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	785b      	ldrb	r3, [r3, #1]
 8004878:	2b01      	cmp	r3, #1
 800487a:	d12c      	bne.n	80048d6 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 800487c:	68bb      	ldr	r3, [r7, #8]
 800487e:	015a      	lsls	r2, r3, #5
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	4413      	add	r3, r2
 8004884:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	db12      	blt.n	80048b4 <USB_EPSetStall+0x54>
 800488e:	68bb      	ldr	r3, [r7, #8]
 8004890:	2b00      	cmp	r3, #0
 8004892:	d00f      	beq.n	80048b4 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004894:	68bb      	ldr	r3, [r7, #8]
 8004896:	015a      	lsls	r2, r3, #5
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4413      	add	r3, r2
 800489c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	68ba      	ldr	r2, [r7, #8]
 80048a4:	0151      	lsls	r1, r2, #5
 80048a6:	68fa      	ldr	r2, [r7, #12]
 80048a8:	440a      	add	r2, r1
 80048aa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ae:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80048b2:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	015a      	lsls	r2, r3, #5
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	4413      	add	r3, r2
 80048bc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	68ba      	ldr	r2, [r7, #8]
 80048c4:	0151      	lsls	r1, r2, #5
 80048c6:	68fa      	ldr	r2, [r7, #12]
 80048c8:	440a      	add	r2, r1
 80048ca:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048ce:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80048d2:	6013      	str	r3, [r2, #0]
 80048d4:	e02b      	b.n	800492e <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 80048d6:	68bb      	ldr	r3, [r7, #8]
 80048d8:	015a      	lsls	r2, r3, #5
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	4413      	add	r3, r2
 80048de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	db12      	blt.n	800490e <USB_EPSetStall+0xae>
 80048e8:	68bb      	ldr	r3, [r7, #8]
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d00f      	beq.n	800490e <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 80048ee:	68bb      	ldr	r3, [r7, #8]
 80048f0:	015a      	lsls	r2, r3, #5
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	4413      	add	r3, r2
 80048f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	68ba      	ldr	r2, [r7, #8]
 80048fe:	0151      	lsls	r1, r2, #5
 8004900:	68fa      	ldr	r2, [r7, #12]
 8004902:	440a      	add	r2, r1
 8004904:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004908:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800490c:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 800490e:	68bb      	ldr	r3, [r7, #8]
 8004910:	015a      	lsls	r2, r3, #5
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	4413      	add	r3, r2
 8004916:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	68ba      	ldr	r2, [r7, #8]
 800491e:	0151      	lsls	r1, r2, #5
 8004920:	68fa      	ldr	r2, [r7, #12]
 8004922:	440a      	add	r2, r1
 8004924:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004928:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800492c:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800492e:	2300      	movs	r3, #0
}
 8004930:	4618      	mov	r0, r3
 8004932:	3714      	adds	r7, #20
 8004934:	46bd      	mov	sp, r7
 8004936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493a:	4770      	bx	lr

0800493c <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 800493c:	b480      	push	{r7}
 800493e:	b085      	sub	sp, #20
 8004940:	af00      	add	r7, sp, #0
 8004942:	6078      	str	r0, [r7, #4]
 8004944:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	781b      	ldrb	r3, [r3, #0]
 800494e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004950:	683b      	ldr	r3, [r7, #0]
 8004952:	785b      	ldrb	r3, [r3, #1]
 8004954:	2b01      	cmp	r3, #1
 8004956:	d128      	bne.n	80049aa <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	015a      	lsls	r2, r3, #5
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	4413      	add	r3, r2
 8004960:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004964:	681b      	ldr	r3, [r3, #0]
 8004966:	68ba      	ldr	r2, [r7, #8]
 8004968:	0151      	lsls	r1, r2, #5
 800496a:	68fa      	ldr	r2, [r7, #12]
 800496c:	440a      	add	r2, r1
 800496e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004972:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004976:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	791b      	ldrb	r3, [r3, #4]
 800497c:	2b03      	cmp	r3, #3
 800497e:	d003      	beq.n	8004988 <USB_EPClearStall+0x4c>
 8004980:	683b      	ldr	r3, [r7, #0]
 8004982:	791b      	ldrb	r3, [r3, #4]
 8004984:	2b02      	cmp	r3, #2
 8004986:	d138      	bne.n	80049fa <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004988:	68bb      	ldr	r3, [r7, #8]
 800498a:	015a      	lsls	r2, r3, #5
 800498c:	68fb      	ldr	r3, [r7, #12]
 800498e:	4413      	add	r3, r2
 8004990:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	68ba      	ldr	r2, [r7, #8]
 8004998:	0151      	lsls	r1, r2, #5
 800499a:	68fa      	ldr	r2, [r7, #12]
 800499c:	440a      	add	r2, r1
 800499e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049a6:	6013      	str	r3, [r2, #0]
 80049a8:	e027      	b.n	80049fa <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 80049aa:	68bb      	ldr	r3, [r7, #8]
 80049ac:	015a      	lsls	r2, r3, #5
 80049ae:	68fb      	ldr	r3, [r7, #12]
 80049b0:	4413      	add	r3, r2
 80049b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	68ba      	ldr	r2, [r7, #8]
 80049ba:	0151      	lsls	r1, r2, #5
 80049bc:	68fa      	ldr	r2, [r7, #12]
 80049be:	440a      	add	r2, r1
 80049c0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049c4:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80049c8:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	791b      	ldrb	r3, [r3, #4]
 80049ce:	2b03      	cmp	r3, #3
 80049d0:	d003      	beq.n	80049da <USB_EPClearStall+0x9e>
 80049d2:	683b      	ldr	r3, [r7, #0]
 80049d4:	791b      	ldrb	r3, [r3, #4]
 80049d6:	2b02      	cmp	r3, #2
 80049d8:	d10f      	bne.n	80049fa <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80049da:	68bb      	ldr	r3, [r7, #8]
 80049dc:	015a      	lsls	r2, r3, #5
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	4413      	add	r3, r2
 80049e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	68ba      	ldr	r2, [r7, #8]
 80049ea:	0151      	lsls	r1, r2, #5
 80049ec:	68fa      	ldr	r2, [r7, #12]
 80049ee:	440a      	add	r2, r1
 80049f0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80049f4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049f8:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
}
 80049fc:	4618      	mov	r0, r3
 80049fe:	3714      	adds	r7, #20
 8004a00:	46bd      	mov	sp, r7
 8004a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a06:	4770      	bx	lr

08004a08 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004a08:	b480      	push	{r7}
 8004a0a:	b085      	sub	sp, #20
 8004a0c:	af00      	add	r7, sp, #0
 8004a0e:	6078      	str	r0, [r7, #4]
 8004a10:	460b      	mov	r3, r1
 8004a12:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004a18:	68fb      	ldr	r3, [r7, #12]
 8004a1a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68fa      	ldr	r2, [r7, #12]
 8004a22:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a26:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004a2a:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	78fb      	ldrb	r3, [r7, #3]
 8004a36:	011b      	lsls	r3, r3, #4
 8004a38:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004a3c:	68f9      	ldr	r1, [r7, #12]
 8004a3e:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004a42:	4313      	orrs	r3, r2
 8004a44:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004a46:	2300      	movs	r3, #0
}
 8004a48:	4618      	mov	r0, r3
 8004a4a:	3714      	adds	r7, #20
 8004a4c:	46bd      	mov	sp, r7
 8004a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a52:	4770      	bx	lr

08004a54 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a54:	b480      	push	{r7}
 8004a56:	b085      	sub	sp, #20
 8004a58:	af00      	add	r7, sp, #0
 8004a5a:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68fa      	ldr	r2, [r7, #12]
 8004a6a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004a6e:	f023 0303 	bic.w	r3, r3, #3
 8004a72:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004a7a:	685b      	ldr	r3, [r3, #4]
 8004a7c:	68fa      	ldr	r2, [r7, #12]
 8004a7e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004a82:	f023 0302 	bic.w	r3, r3, #2
 8004a86:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004a88:	2300      	movs	r3, #0
}
 8004a8a:	4618      	mov	r0, r3
 8004a8c:	3714      	adds	r7, #20
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr

08004a96 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004a96:	b480      	push	{r7}
 8004a98:	b085      	sub	sp, #20
 8004a9a:	af00      	add	r7, sp, #0
 8004a9c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004aa2:	68fb      	ldr	r3, [r7, #12]
 8004aa4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	68fa      	ldr	r2, [r7, #12]
 8004aac:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004ab0:	f023 0303 	bic.w	r3, r3, #3
 8004ab4:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004abc:	685b      	ldr	r3, [r3, #4]
 8004abe:	68fa      	ldr	r2, [r7, #12]
 8004ac0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004ac4:	f043 0302 	orr.w	r3, r3, #2
 8004ac8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004aca:	2300      	movs	r3, #0
}
 8004acc:	4618      	mov	r0, r3
 8004ace:	3714      	adds	r7, #20
 8004ad0:	46bd      	mov	sp, r7
 8004ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad6:	4770      	bx	lr

08004ad8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b085      	sub	sp, #20
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	695b      	ldr	r3, [r3, #20]
 8004ae4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	699b      	ldr	r3, [r3, #24]
 8004aea:	68fa      	ldr	r2, [r7, #12]
 8004aec:	4013      	ands	r3, r2
 8004aee:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004af0:	68fb      	ldr	r3, [r7, #12]
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b085      	sub	sp, #20
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b10:	699b      	ldr	r3, [r3, #24]
 8004b12:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b1a:	69db      	ldr	r3, [r3, #28]
 8004b1c:	68ba      	ldr	r2, [r7, #8]
 8004b1e:	4013      	ands	r3, r2
 8004b20:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004b22:	68bb      	ldr	r3, [r7, #8]
 8004b24:	0c1b      	lsrs	r3, r3, #16
}
 8004b26:	4618      	mov	r0, r3
 8004b28:	3714      	adds	r7, #20
 8004b2a:	46bd      	mov	sp, r7
 8004b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b30:	4770      	bx	lr

08004b32 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004b32:	b480      	push	{r7}
 8004b34:	b085      	sub	sp, #20
 8004b36:	af00      	add	r7, sp, #0
 8004b38:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b44:	699b      	ldr	r3, [r3, #24]
 8004b46:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b4e:	69db      	ldr	r3, [r3, #28]
 8004b50:	68ba      	ldr	r2, [r7, #8]
 8004b52:	4013      	ands	r3, r2
 8004b54:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004b56:	68bb      	ldr	r3, [r7, #8]
 8004b58:	b29b      	uxth	r3, r3
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3714      	adds	r7, #20
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b64:	4770      	bx	lr

08004b66 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004b66:	b480      	push	{r7}
 8004b68:	b085      	sub	sp, #20
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	6078      	str	r0, [r7, #4]
 8004b6e:	460b      	mov	r3, r1
 8004b70:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004b76:	78fb      	ldrb	r3, [r7, #3]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b82:	689b      	ldr	r3, [r3, #8]
 8004b84:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b8c:	695b      	ldr	r3, [r3, #20]
 8004b8e:	68ba      	ldr	r2, [r7, #8]
 8004b90:	4013      	ands	r3, r2
 8004b92:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004b94:	68bb      	ldr	r3, [r7, #8]
}
 8004b96:	4618      	mov	r0, r3
 8004b98:	3714      	adds	r7, #20
 8004b9a:	46bd      	mov	sp, r7
 8004b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba0:	4770      	bx	lr

08004ba2 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004ba2:	b480      	push	{r7}
 8004ba4:	b087      	sub	sp, #28
 8004ba6:	af00      	add	r7, sp, #0
 8004ba8:	6078      	str	r0, [r7, #4]
 8004baa:	460b      	mov	r3, r1
 8004bac:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004bb2:	697b      	ldr	r3, [r7, #20]
 8004bb4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bb8:	691b      	ldr	r3, [r3, #16]
 8004bba:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004bbc:	697b      	ldr	r3, [r7, #20]
 8004bbe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004bc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004bc4:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004bc6:	78fb      	ldrb	r3, [r7, #3]
 8004bc8:	f003 030f 	and.w	r3, r3, #15
 8004bcc:	68fa      	ldr	r2, [r7, #12]
 8004bce:	fa22 f303 	lsr.w	r3, r2, r3
 8004bd2:	01db      	lsls	r3, r3, #7
 8004bd4:	b2db      	uxtb	r3, r3
 8004bd6:	693a      	ldr	r2, [r7, #16]
 8004bd8:	4313      	orrs	r3, r2
 8004bda:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004bdc:	78fb      	ldrb	r3, [r7, #3]
 8004bde:	015a      	lsls	r2, r3, #5
 8004be0:	697b      	ldr	r3, [r7, #20]
 8004be2:	4413      	add	r3, r2
 8004be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004be8:	689b      	ldr	r3, [r3, #8]
 8004bea:	693a      	ldr	r2, [r7, #16]
 8004bec:	4013      	ands	r3, r2
 8004bee:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004bf0:	68bb      	ldr	r3, [r7, #8]
}
 8004bf2:	4618      	mov	r0, r3
 8004bf4:	371c      	adds	r7, #28
 8004bf6:	46bd      	mov	sp, r7
 8004bf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bfc:	4770      	bx	lr

08004bfe <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004bfe:	b480      	push	{r7}
 8004c00:	b083      	sub	sp, #12
 8004c02:	af00      	add	r7, sp, #0
 8004c04:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	695b      	ldr	r3, [r3, #20]
 8004c0a:	f003 0301 	and.w	r3, r3, #1
}
 8004c0e:	4618      	mov	r0, r3
 8004c10:	370c      	adds	r7, #12
 8004c12:	46bd      	mov	sp, r7
 8004c14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c18:	4770      	bx	lr

08004c1a <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004c1a:	b480      	push	{r7}
 8004c1c:	b085      	sub	sp, #20
 8004c1e:	af00      	add	r7, sp, #0
 8004c20:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	68fa      	ldr	r2, [r7, #12]
 8004c30:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c34:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004c38:	f023 0307 	bic.w	r3, r3, #7
 8004c3c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c44:	685b      	ldr	r3, [r3, #4]
 8004c46:	68fa      	ldr	r2, [r7, #12]
 8004c48:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004c4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c50:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004c52:	2300      	movs	r3, #0
}
 8004c54:	4618      	mov	r0, r3
 8004c56:	3714      	adds	r7, #20
 8004c58:	46bd      	mov	sp, r7
 8004c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c5e:	4770      	bx	lr

08004c60 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004c60:	b480      	push	{r7}
 8004c62:	b087      	sub	sp, #28
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	460b      	mov	r3, r1
 8004c6a:	607a      	str	r2, [r7, #4]
 8004c6c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c6e:	68fb      	ldr	r3, [r7, #12]
 8004c70:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004c72:	68fb      	ldr	r3, [r7, #12]
 8004c74:	333c      	adds	r3, #60	; 0x3c
 8004c76:	3304      	adds	r3, #4
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	4a26      	ldr	r2, [pc, #152]	; (8004d18 <USB_EP0_OutStart+0xb8>)
 8004c80:	4293      	cmp	r3, r2
 8004c82:	d90a      	bls.n	8004c9a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004c84:	697b      	ldr	r3, [r7, #20]
 8004c86:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004c90:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004c94:	d101      	bne.n	8004c9a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004c96:	2300      	movs	r3, #0
 8004c98:	e037      	b.n	8004d0a <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004c9a:	697b      	ldr	r3, [r7, #20]
 8004c9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ca0:	461a      	mov	r2, r3
 8004ca2:	2300      	movs	r3, #0
 8004ca4:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004ca6:	697b      	ldr	r3, [r7, #20]
 8004ca8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	697a      	ldr	r2, [r7, #20]
 8004cb0:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cb4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004cb8:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004cba:	697b      	ldr	r3, [r7, #20]
 8004cbc:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cc0:	691b      	ldr	r3, [r3, #16]
 8004cc2:	697a      	ldr	r2, [r7, #20]
 8004cc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cc8:	f043 0318 	orr.w	r3, r3, #24
 8004ccc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004cce:	697b      	ldr	r3, [r7, #20]
 8004cd0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cd4:	691b      	ldr	r3, [r3, #16]
 8004cd6:	697a      	ldr	r2, [r7, #20]
 8004cd8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004cdc:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004ce0:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004ce2:	7afb      	ldrb	r3, [r7, #11]
 8004ce4:	2b01      	cmp	r3, #1
 8004ce6:	d10f      	bne.n	8004d08 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004ce8:	697b      	ldr	r3, [r7, #20]
 8004cea:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cee:	461a      	mov	r2, r3
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	697a      	ldr	r2, [r7, #20]
 8004cfe:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d02:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004d06:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004d08:	2300      	movs	r3, #0
}
 8004d0a:	4618      	mov	r0, r3
 8004d0c:	371c      	adds	r7, #28
 8004d0e:	46bd      	mov	sp, r7
 8004d10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d14:	4770      	bx	lr
 8004d16:	bf00      	nop
 8004d18:	4f54300a 	.word	0x4f54300a

08004d1c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004d1c:	b480      	push	{r7}
 8004d1e:	b085      	sub	sp, #20
 8004d20:	af00      	add	r7, sp, #0
 8004d22:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d24:	2300      	movs	r3, #0
 8004d26:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004d28:	68fb      	ldr	r3, [r7, #12]
 8004d2a:	3301      	adds	r3, #1
 8004d2c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	4a13      	ldr	r2, [pc, #76]	; (8004d80 <USB_CoreReset+0x64>)
 8004d32:	4293      	cmp	r3, r2
 8004d34:	d901      	bls.n	8004d3a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004d36:	2303      	movs	r3, #3
 8004d38:	e01b      	b.n	8004d72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	daf2      	bge.n	8004d28 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004d42:	2300      	movs	r3, #0
 8004d44:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	691b      	ldr	r3, [r3, #16]
 8004d4a:	f043 0201 	orr.w	r2, r3, #1
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004d52:	68fb      	ldr	r3, [r7, #12]
 8004d54:	3301      	adds	r3, #1
 8004d56:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	4a09      	ldr	r2, [pc, #36]	; (8004d80 <USB_CoreReset+0x64>)
 8004d5c:	4293      	cmp	r3, r2
 8004d5e:	d901      	bls.n	8004d64 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8004d60:	2303      	movs	r3, #3
 8004d62:	e006      	b.n	8004d72 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	691b      	ldr	r3, [r3, #16]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d0f0      	beq.n	8004d52 <USB_CoreReset+0x36>

  return HAL_OK;
 8004d70:	2300      	movs	r3, #0
}
 8004d72:	4618      	mov	r0, r3
 8004d74:	3714      	adds	r7, #20
 8004d76:	46bd      	mov	sp, r7
 8004d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7c:	4770      	bx	lr
 8004d7e:	bf00      	nop
 8004d80:	00030d40 	.word	0x00030d40

08004d84 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b084      	sub	sp, #16
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8004d90:	2010      	movs	r0, #16
 8004d92:	f002 f911 	bl	8006fb8 <USBD_static_malloc>
 8004d96:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d109      	bne.n	8004db2 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	32b0      	adds	r2, #176	; 0xb0
 8004da8:	2100      	movs	r1, #0
 8004daa:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8004dae:	2302      	movs	r3, #2
 8004db0:	e048      	b.n	8004e44 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	32b0      	adds	r2, #176	; 0xb0
 8004dbc:	68f9      	ldr	r1, [r7, #12]
 8004dbe:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	32b0      	adds	r2, #176	; 0xb0
 8004dcc:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	7c1b      	ldrb	r3, [r3, #16]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d10d      	bne.n	8004dfa <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8004dde:	4b1b      	ldr	r3, [pc, #108]	; (8004e4c <USBD_HID_Init+0xc8>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	f003 020f 	and.w	r2, r3, #15
 8004de6:	6879      	ldr	r1, [r7, #4]
 8004de8:	4613      	mov	r3, r2
 8004dea:	009b      	lsls	r3, r3, #2
 8004dec:	4413      	add	r3, r2
 8004dee:	009b      	lsls	r3, r3, #2
 8004df0:	440b      	add	r3, r1
 8004df2:	3326      	adds	r3, #38	; 0x26
 8004df4:	2207      	movs	r2, #7
 8004df6:	801a      	strh	r2, [r3, #0]
 8004df8:	e00c      	b.n	8004e14 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8004dfa:	4b14      	ldr	r3, [pc, #80]	; (8004e4c <USBD_HID_Init+0xc8>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	f003 020f 	and.w	r2, r3, #15
 8004e02:	6879      	ldr	r1, [r7, #4]
 8004e04:	4613      	mov	r3, r2
 8004e06:	009b      	lsls	r3, r3, #2
 8004e08:	4413      	add	r3, r2
 8004e0a:	009b      	lsls	r3, r3, #2
 8004e0c:	440b      	add	r3, r1
 8004e0e:	3326      	adds	r3, #38	; 0x26
 8004e10:	220a      	movs	r2, #10
 8004e12:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8004e14:	4b0d      	ldr	r3, [pc, #52]	; (8004e4c <USBD_HID_Init+0xc8>)
 8004e16:	7819      	ldrb	r1, [r3, #0]
 8004e18:	2304      	movs	r3, #4
 8004e1a:	2203      	movs	r2, #3
 8004e1c:	6878      	ldr	r0, [r7, #4]
 8004e1e:	f001 ffba 	bl	8006d96 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8004e22:	4b0a      	ldr	r3, [pc, #40]	; (8004e4c <USBD_HID_Init+0xc8>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	f003 020f 	and.w	r2, r3, #15
 8004e2a:	6879      	ldr	r1, [r7, #4]
 8004e2c:	4613      	mov	r3, r2
 8004e2e:	009b      	lsls	r3, r3, #2
 8004e30:	4413      	add	r3, r2
 8004e32:	009b      	lsls	r3, r3, #2
 8004e34:	440b      	add	r3, r1
 8004e36:	3324      	adds	r3, #36	; 0x24
 8004e38:	2201      	movs	r2, #1
 8004e3a:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	2200      	movs	r2, #0
 8004e40:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8004e42:	2300      	movs	r3, #0
}
 8004e44:	4618      	mov	r0, r3
 8004e46:	3710      	adds	r7, #16
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	bd80      	pop	{r7, pc}
 8004e4c:	200000ff 	.word	0x200000ff

08004e50 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b082      	sub	sp, #8
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	460b      	mov	r3, r1
 8004e5a:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8004e5c:	4b1f      	ldr	r3, [pc, #124]	; (8004edc <USBD_HID_DeInit+0x8c>)
 8004e5e:	781b      	ldrb	r3, [r3, #0]
 8004e60:	4619      	mov	r1, r3
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f001 ffbd 	bl	8006de2 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8004e68:	4b1c      	ldr	r3, [pc, #112]	; (8004edc <USBD_HID_DeInit+0x8c>)
 8004e6a:	781b      	ldrb	r3, [r3, #0]
 8004e6c:	f003 020f 	and.w	r2, r3, #15
 8004e70:	6879      	ldr	r1, [r7, #4]
 8004e72:	4613      	mov	r3, r2
 8004e74:	009b      	lsls	r3, r3, #2
 8004e76:	4413      	add	r3, r2
 8004e78:	009b      	lsls	r3, r3, #2
 8004e7a:	440b      	add	r3, r1
 8004e7c:	3324      	adds	r3, #36	; 0x24
 8004e7e:	2200      	movs	r2, #0
 8004e80:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8004e82:	4b16      	ldr	r3, [pc, #88]	; (8004edc <USBD_HID_DeInit+0x8c>)
 8004e84:	781b      	ldrb	r3, [r3, #0]
 8004e86:	f003 020f 	and.w	r2, r3, #15
 8004e8a:	6879      	ldr	r1, [r7, #4]
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	009b      	lsls	r3, r3, #2
 8004e94:	440b      	add	r3, r1
 8004e96:	3326      	adds	r3, #38	; 0x26
 8004e98:	2200      	movs	r2, #0
 8004e9a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ea2:	687b      	ldr	r3, [r7, #4]
 8004ea4:	32b0      	adds	r2, #176	; 0xb0
 8004ea6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004eaa:	2b00      	cmp	r3, #0
 8004eac:	d011      	beq.n	8004ed2 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	32b0      	adds	r2, #176	; 0xb0
 8004eb8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ebc:	4618      	mov	r0, r3
 8004ebe:	f002 f889 	bl	8006fd4 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	32b0      	adds	r2, #176	; 0xb0
 8004ecc:	2100      	movs	r1, #0
 8004ece:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8004ed2:	2300      	movs	r3, #0
}
 8004ed4:	4618      	mov	r0, r3
 8004ed6:	3708      	adds	r7, #8
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	bd80      	pop	{r7, pc}
 8004edc:	200000ff 	.word	0x200000ff

08004ee0 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b086      	sub	sp, #24
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
 8004ee8:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	32b0      	adds	r2, #176	; 0xb0
 8004ef4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ef8:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8004efa:	2300      	movs	r3, #0
 8004efc:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8004efe:	2300      	movs	r3, #0
 8004f00:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8004f02:	68fb      	ldr	r3, [r7, #12]
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d101      	bne.n	8004f0c <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8004f08:	2303      	movs	r3, #3
 8004f0a:	e0e8      	b.n	80050de <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8004f0c:	683b      	ldr	r3, [r7, #0]
 8004f0e:	781b      	ldrb	r3, [r3, #0]
 8004f10:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	d046      	beq.n	8004fa6 <USBD_HID_Setup+0xc6>
 8004f18:	2b20      	cmp	r3, #32
 8004f1a:	f040 80d8 	bne.w	80050ce <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8004f1e:	683b      	ldr	r3, [r7, #0]
 8004f20:	785b      	ldrb	r3, [r3, #1]
 8004f22:	3b02      	subs	r3, #2
 8004f24:	2b09      	cmp	r3, #9
 8004f26:	d836      	bhi.n	8004f96 <USBD_HID_Setup+0xb6>
 8004f28:	a201      	add	r2, pc, #4	; (adr r2, 8004f30 <USBD_HID_Setup+0x50>)
 8004f2a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f2e:	bf00      	nop
 8004f30:	08004f87 	.word	0x08004f87
 8004f34:	08004f67 	.word	0x08004f67
 8004f38:	08004f97 	.word	0x08004f97
 8004f3c:	08004f97 	.word	0x08004f97
 8004f40:	08004f97 	.word	0x08004f97
 8004f44:	08004f97 	.word	0x08004f97
 8004f48:	08004f97 	.word	0x08004f97
 8004f4c:	08004f97 	.word	0x08004f97
 8004f50:	08004f75 	.word	0x08004f75
 8004f54:	08004f59 	.word	0x08004f59
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8004f58:	683b      	ldr	r3, [r7, #0]
 8004f5a:	885b      	ldrh	r3, [r3, #2]
 8004f5c:	b2db      	uxtb	r3, r3
 8004f5e:	461a      	mov	r2, r3
 8004f60:	68fb      	ldr	r3, [r7, #12]
 8004f62:	601a      	str	r2, [r3, #0]
          break;
 8004f64:	e01e      	b.n	8004fa4 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2201      	movs	r2, #1
 8004f6a:	4619      	mov	r1, r3
 8004f6c:	6878      	ldr	r0, [r7, #4]
 8004f6e:	f001 fbd5 	bl	800671c <USBD_CtlSendData>
          break;
 8004f72:	e017      	b.n	8004fa4 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8004f74:	683b      	ldr	r3, [r7, #0]
 8004f76:	885b      	ldrh	r3, [r3, #2]
 8004f78:	0a1b      	lsrs	r3, r3, #8
 8004f7a:	b29b      	uxth	r3, r3
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	461a      	mov	r2, r3
 8004f80:	68fb      	ldr	r3, [r7, #12]
 8004f82:	605a      	str	r2, [r3, #4]
          break;
 8004f84:	e00e      	b.n	8004fa4 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8004f86:	68fb      	ldr	r3, [r7, #12]
 8004f88:	3304      	adds	r3, #4
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	4619      	mov	r1, r3
 8004f8e:	6878      	ldr	r0, [r7, #4]
 8004f90:	f001 fbc4 	bl	800671c <USBD_CtlSendData>
          break;
 8004f94:	e006      	b.n	8004fa4 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8004f96:	6839      	ldr	r1, [r7, #0]
 8004f98:	6878      	ldr	r0, [r7, #4]
 8004f9a:	f001 fb4e 	bl	800663a <USBD_CtlError>
          ret = USBD_FAIL;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	75fb      	strb	r3, [r7, #23]
          break;
 8004fa2:	bf00      	nop
      }
      break;
 8004fa4:	e09a      	b.n	80050dc <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8004fa6:	683b      	ldr	r3, [r7, #0]
 8004fa8:	785b      	ldrb	r3, [r3, #1]
 8004faa:	2b0b      	cmp	r3, #11
 8004fac:	f200 8086 	bhi.w	80050bc <USBD_HID_Setup+0x1dc>
 8004fb0:	a201      	add	r2, pc, #4	; (adr r2, 8004fb8 <USBD_HID_Setup+0xd8>)
 8004fb2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004fb6:	bf00      	nop
 8004fb8:	08004fe9 	.word	0x08004fe9
 8004fbc:	080050cb 	.word	0x080050cb
 8004fc0:	080050bd 	.word	0x080050bd
 8004fc4:	080050bd 	.word	0x080050bd
 8004fc8:	080050bd 	.word	0x080050bd
 8004fcc:	080050bd 	.word	0x080050bd
 8004fd0:	08005013 	.word	0x08005013
 8004fd4:	080050bd 	.word	0x080050bd
 8004fd8:	080050bd 	.word	0x080050bd
 8004fdc:	080050bd 	.word	0x080050bd
 8004fe0:	0800506b 	.word	0x0800506b
 8004fe4:	08005095 	.word	0x08005095
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b03      	cmp	r3, #3
 8004ff2:	d107      	bne.n	8005004 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8004ff4:	f107 030a 	add.w	r3, r7, #10
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	4619      	mov	r1, r3
 8004ffc:	6878      	ldr	r0, [r7, #4]
 8004ffe:	f001 fb8d 	bl	800671c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005002:	e063      	b.n	80050cc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005004:	6839      	ldr	r1, [r7, #0]
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f001 fb17 	bl	800663a <USBD_CtlError>
            ret = USBD_FAIL;
 800500c:	2303      	movs	r3, #3
 800500e:	75fb      	strb	r3, [r7, #23]
          break;
 8005010:	e05c      	b.n	80050cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	885b      	ldrh	r3, [r3, #2]
 8005016:	0a1b      	lsrs	r3, r3, #8
 8005018:	b29b      	uxth	r3, r3
 800501a:	2b22      	cmp	r3, #34	; 0x22
 800501c:	d108      	bne.n	8005030 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	88db      	ldrh	r3, [r3, #6]
 8005022:	2b3f      	cmp	r3, #63	; 0x3f
 8005024:	bf28      	it	cs
 8005026:	233f      	movcs	r3, #63	; 0x3f
 8005028:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 800502a:	4b2f      	ldr	r3, [pc, #188]	; (80050e8 <USBD_HID_Setup+0x208>)
 800502c:	613b      	str	r3, [r7, #16]
 800502e:	e015      	b.n	800505c <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005030:	683b      	ldr	r3, [r7, #0]
 8005032:	885b      	ldrh	r3, [r3, #2]
 8005034:	0a1b      	lsrs	r3, r3, #8
 8005036:	b29b      	uxth	r3, r3
 8005038:	2b21      	cmp	r3, #33	; 0x21
 800503a:	d108      	bne.n	800504e <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 800503c:	4b2b      	ldr	r3, [pc, #172]	; (80050ec <USBD_HID_Setup+0x20c>)
 800503e:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	88db      	ldrh	r3, [r3, #6]
 8005044:	2b09      	cmp	r3, #9
 8005046:	bf28      	it	cs
 8005048:	2309      	movcs	r3, #9
 800504a:	82bb      	strh	r3, [r7, #20]
 800504c:	e006      	b.n	800505c <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 800504e:	6839      	ldr	r1, [r7, #0]
 8005050:	6878      	ldr	r0, [r7, #4]
 8005052:	f001 faf2 	bl	800663a <USBD_CtlError>
            ret = USBD_FAIL;
 8005056:	2303      	movs	r3, #3
 8005058:	75fb      	strb	r3, [r7, #23]
            break;
 800505a:	e037      	b.n	80050cc <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 800505c:	8abb      	ldrh	r3, [r7, #20]
 800505e:	461a      	mov	r2, r3
 8005060:	6939      	ldr	r1, [r7, #16]
 8005062:	6878      	ldr	r0, [r7, #4]
 8005064:	f001 fb5a 	bl	800671c <USBD_CtlSendData>
          break;
 8005068:	e030      	b.n	80050cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005070:	b2db      	uxtb	r3, r3
 8005072:	2b03      	cmp	r3, #3
 8005074:	d107      	bne.n	8005086 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3308      	adds	r3, #8
 800507a:	2201      	movs	r2, #1
 800507c:	4619      	mov	r1, r3
 800507e:	6878      	ldr	r0, [r7, #4]
 8005080:	f001 fb4c 	bl	800671c <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005084:	e022      	b.n	80050cc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005086:	6839      	ldr	r1, [r7, #0]
 8005088:	6878      	ldr	r0, [r7, #4]
 800508a:	f001 fad6 	bl	800663a <USBD_CtlError>
            ret = USBD_FAIL;
 800508e:	2303      	movs	r3, #3
 8005090:	75fb      	strb	r3, [r7, #23]
          break;
 8005092:	e01b      	b.n	80050cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800509a:	b2db      	uxtb	r3, r3
 800509c:	2b03      	cmp	r3, #3
 800509e:	d106      	bne.n	80050ae <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	885b      	ldrh	r3, [r3, #2]
 80050a4:	b2db      	uxtb	r3, r3
 80050a6:	461a      	mov	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80050ac:	e00e      	b.n	80050cc <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80050ae:	6839      	ldr	r1, [r7, #0]
 80050b0:	6878      	ldr	r0, [r7, #4]
 80050b2:	f001 fac2 	bl	800663a <USBD_CtlError>
            ret = USBD_FAIL;
 80050b6:	2303      	movs	r3, #3
 80050b8:	75fb      	strb	r3, [r7, #23]
          break;
 80050ba:	e007      	b.n	80050cc <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 80050bc:	6839      	ldr	r1, [r7, #0]
 80050be:	6878      	ldr	r0, [r7, #4]
 80050c0:	f001 fabb 	bl	800663a <USBD_CtlError>
          ret = USBD_FAIL;
 80050c4:	2303      	movs	r3, #3
 80050c6:	75fb      	strb	r3, [r7, #23]
          break;
 80050c8:	e000      	b.n	80050cc <USBD_HID_Setup+0x1ec>
          break;
 80050ca:	bf00      	nop
      }
      break;
 80050cc:	e006      	b.n	80050dc <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 80050ce:	6839      	ldr	r1, [r7, #0]
 80050d0:	6878      	ldr	r0, [r7, #4]
 80050d2:	f001 fab2 	bl	800663a <USBD_CtlError>
      ret = USBD_FAIL;
 80050d6:	2303      	movs	r3, #3
 80050d8:	75fb      	strb	r3, [r7, #23]
      break;
 80050da:	bf00      	nop
  }

  return (uint8_t)ret;
 80050dc:	7dfb      	ldrb	r3, [r7, #23]
}
 80050de:	4618      	mov	r0, r3
 80050e0:	3718      	adds	r7, #24
 80050e2:	46bd      	mov	sp, r7
 80050e4:	bd80      	pop	{r7, pc}
 80050e6:	bf00      	nop
 80050e8:	200000c0 	.word	0x200000c0
 80050ec:	200000a8 	.word	0x200000a8

080050f0 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b086      	sub	sp, #24
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	60f8      	str	r0, [r7, #12]
 80050f8:	60b9      	str	r1, [r7, #8]
 80050fa:	4613      	mov	r3, r2
 80050fc:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	32b0      	adds	r2, #176	; 0xb0
 8005108:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800510c:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 800510e:	697b      	ldr	r3, [r7, #20]
 8005110:	2b00      	cmp	r3, #0
 8005112:	d101      	bne.n	8005118 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 8005114:	2303      	movs	r3, #3
 8005116:	e014      	b.n	8005142 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800511e:	b2db      	uxtb	r3, r3
 8005120:	2b03      	cmp	r3, #3
 8005122:	d10d      	bne.n	8005140 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 8005124:	697b      	ldr	r3, [r7, #20]
 8005126:	7b1b      	ldrb	r3, [r3, #12]
 8005128:	2b00      	cmp	r3, #0
 800512a:	d109      	bne.n	8005140 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 800512c:	697b      	ldr	r3, [r7, #20]
 800512e:	2201      	movs	r2, #1
 8005130:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 8005132:	4b06      	ldr	r3, [pc, #24]	; (800514c <USBD_HID_SendReport+0x5c>)
 8005134:	7819      	ldrb	r1, [r3, #0]
 8005136:	88fb      	ldrh	r3, [r7, #6]
 8005138:	68ba      	ldr	r2, [r7, #8]
 800513a:	68f8      	ldr	r0, [r7, #12]
 800513c:	f001 fef9 	bl	8006f32 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 8005140:	2300      	movs	r3, #0
}
 8005142:	4618      	mov	r0, r3
 8005144:	3718      	adds	r7, #24
 8005146:	46bd      	mov	sp, r7
 8005148:	bd80      	pop	{r7, pc}
 800514a:	bf00      	nop
 800514c:	200000ff 	.word	0x200000ff

08005150 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005150:	b580      	push	{r7, lr}
 8005152:	b084      	sub	sp, #16
 8005154:	af00      	add	r7, sp, #0
 8005156:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005158:	2181      	movs	r1, #129	; 0x81
 800515a:	4809      	ldr	r0, [pc, #36]	; (8005180 <USBD_HID_GetFSCfgDesc+0x30>)
 800515c:	f000 fc35 	bl	80059ca <USBD_GetEpDesc>
 8005160:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	2b00      	cmp	r3, #0
 8005166:	d002      	beq.n	800516e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	220a      	movs	r2, #10
 800516c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2222      	movs	r2, #34	; 0x22
 8005172:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005174:	4b02      	ldr	r3, [pc, #8]	; (8005180 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005176:	4618      	mov	r0, r3
 8005178:	3710      	adds	r7, #16
 800517a:	46bd      	mov	sp, r7
 800517c:	bd80      	pop	{r7, pc}
 800517e:	bf00      	nop
 8005180:	20000084 	.word	0x20000084

08005184 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b084      	sub	sp, #16
 8005188:	af00      	add	r7, sp, #0
 800518a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800518c:	2181      	movs	r1, #129	; 0x81
 800518e:	4809      	ldr	r0, [pc, #36]	; (80051b4 <USBD_HID_GetHSCfgDesc+0x30>)
 8005190:	f000 fc1b 	bl	80059ca <USBD_GetEpDesc>
 8005194:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	2b00      	cmp	r3, #0
 800519a:	d002      	beq.n	80051a2 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	2207      	movs	r2, #7
 80051a0:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2222      	movs	r2, #34	; 0x22
 80051a6:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80051a8:	4b02      	ldr	r3, [pc, #8]	; (80051b4 <USBD_HID_GetHSCfgDesc+0x30>)
}
 80051aa:	4618      	mov	r0, r3
 80051ac:	3710      	adds	r7, #16
 80051ae:	46bd      	mov	sp, r7
 80051b0:	bd80      	pop	{r7, pc}
 80051b2:	bf00      	nop
 80051b4:	20000084 	.word	0x20000084

080051b8 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 80051b8:	b580      	push	{r7, lr}
 80051ba:	b084      	sub	sp, #16
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80051c0:	2181      	movs	r1, #129	; 0x81
 80051c2:	4809      	ldr	r0, [pc, #36]	; (80051e8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 80051c4:	f000 fc01 	bl	80059ca <USBD_GetEpDesc>
 80051c8:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d002      	beq.n	80051d6 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80051d0:	68fb      	ldr	r3, [r7, #12]
 80051d2:	220a      	movs	r2, #10
 80051d4:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	2222      	movs	r2, #34	; 0x22
 80051da:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 80051dc:	4b02      	ldr	r3, [pc, #8]	; (80051e8 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 80051de:	4618      	mov	r0, r3
 80051e0:	3710      	adds	r7, #16
 80051e2:	46bd      	mov	sp, r7
 80051e4:	bd80      	pop	{r7, pc}
 80051e6:	bf00      	nop
 80051e8:	20000084 	.word	0x20000084

080051ec <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 80051ec:	b480      	push	{r7}
 80051ee:	b083      	sub	sp, #12
 80051f0:	af00      	add	r7, sp, #0
 80051f2:	6078      	str	r0, [r7, #4]
 80051f4:	460b      	mov	r3, r1
 80051f6:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	32b0      	adds	r2, #176	; 0xb0
 8005202:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005206:	2200      	movs	r2, #0
 8005208:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800520a:	2300      	movs	r3, #0
}
 800520c:	4618      	mov	r0, r3
 800520e:	370c      	adds	r7, #12
 8005210:	46bd      	mov	sp, r7
 8005212:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005216:	4770      	bx	lr

08005218 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005218:	b480      	push	{r7}
 800521a:	b083      	sub	sp, #12
 800521c:	af00      	add	r7, sp, #0
 800521e:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	220a      	movs	r2, #10
 8005224:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005226:	4b03      	ldr	r3, [pc, #12]	; (8005234 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005228:	4618      	mov	r0, r3
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr
 8005234:	200000b4 	.word	0x200000b4

08005238 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005238:	b580      	push	{r7, lr}
 800523a:	b086      	sub	sp, #24
 800523c:	af00      	add	r7, sp, #0
 800523e:	60f8      	str	r0, [r7, #12]
 8005240:	60b9      	str	r1, [r7, #8]
 8005242:	4613      	mov	r3, r2
 8005244:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005246:	68fb      	ldr	r3, [r7, #12]
 8005248:	2b00      	cmp	r3, #0
 800524a:	d101      	bne.n	8005250 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800524c:	2303      	movs	r3, #3
 800524e:	e01f      	b.n	8005290 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005258:	68fb      	ldr	r3, [r7, #12]
 800525a:	2200      	movs	r2, #0
 800525c:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2200      	movs	r2, #0
 8005264:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d003      	beq.n	8005276 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	68ba      	ldr	r2, [r7, #8]
 8005272:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005276:	68fb      	ldr	r3, [r7, #12]
 8005278:	2201      	movs	r2, #1
 800527a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	79fa      	ldrb	r2, [r7, #7]
 8005282:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005284:	68f8      	ldr	r0, [r7, #12]
 8005286:	f001 fd1f 	bl	8006cc8 <USBD_LL_Init>
 800528a:	4603      	mov	r3, r0
 800528c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800528e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005290:	4618      	mov	r0, r3
 8005292:	3718      	adds	r7, #24
 8005294:	46bd      	mov	sp, r7
 8005296:	bd80      	pop	{r7, pc}

08005298 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005298:	b580      	push	{r7, lr}
 800529a:	b084      	sub	sp, #16
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 80052a2:	2300      	movs	r3, #0
 80052a4:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 80052a6:	683b      	ldr	r3, [r7, #0]
 80052a8:	2b00      	cmp	r3, #0
 80052aa:	d101      	bne.n	80052b0 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80052ac:	2303      	movs	r3, #3
 80052ae:	e025      	b.n	80052fc <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	683a      	ldr	r2, [r7, #0]
 80052b4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	32ae      	adds	r2, #174	; 0xae
 80052c2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d00f      	beq.n	80052ec <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	32ae      	adds	r2, #174	; 0xae
 80052d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80052da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052dc:	f107 020e 	add.w	r2, r7, #14
 80052e0:	4610      	mov	r0, r2
 80052e2:	4798      	blx	r3
 80052e4:	4602      	mov	r2, r0
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 80052f2:	1c5a      	adds	r2, r3, #1
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 80052fa:	2300      	movs	r3, #0
}
 80052fc:	4618      	mov	r0, r3
 80052fe:	3710      	adds	r7, #16
 8005300:	46bd      	mov	sp, r7
 8005302:	bd80      	pop	{r7, pc}

08005304 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005304:	b580      	push	{r7, lr}
 8005306:	b082      	sub	sp, #8
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f001 fd27 	bl	8006d60 <USBD_LL_Start>
 8005312:	4603      	mov	r3, r0
}
 8005314:	4618      	mov	r0, r3
 8005316:	3708      	adds	r7, #8
 8005318:	46bd      	mov	sp, r7
 800531a:	bd80      	pop	{r7, pc}

0800531c <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 800531c:	b480      	push	{r7}
 800531e:	b083      	sub	sp, #12
 8005320:	af00      	add	r7, sp, #0
 8005322:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005324:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 8005326:	4618      	mov	r0, r3
 8005328:	370c      	adds	r7, #12
 800532a:	46bd      	mov	sp, r7
 800532c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005330:	4770      	bx	lr

08005332 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005332:	b580      	push	{r7, lr}
 8005334:	b084      	sub	sp, #16
 8005336:	af00      	add	r7, sp, #0
 8005338:	6078      	str	r0, [r7, #4]
 800533a:	460b      	mov	r3, r1
 800533c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800533e:	2300      	movs	r3, #0
 8005340:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005348:	2b00      	cmp	r3, #0
 800534a:	d009      	beq.n	8005360 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005352:	681b      	ldr	r3, [r3, #0]
 8005354:	78fa      	ldrb	r2, [r7, #3]
 8005356:	4611      	mov	r1, r2
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	4798      	blx	r3
 800535c:	4603      	mov	r3, r0
 800535e:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005360:	7bfb      	ldrb	r3, [r7, #15]
}
 8005362:	4618      	mov	r0, r3
 8005364:	3710      	adds	r7, #16
 8005366:	46bd      	mov	sp, r7
 8005368:	bd80      	pop	{r7, pc}

0800536a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800536a:	b580      	push	{r7, lr}
 800536c:	b084      	sub	sp, #16
 800536e:	af00      	add	r7, sp, #0
 8005370:	6078      	str	r0, [r7, #4]
 8005372:	460b      	mov	r3, r1
 8005374:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005376:	2300      	movs	r3, #0
 8005378:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005380:	685b      	ldr	r3, [r3, #4]
 8005382:	78fa      	ldrb	r2, [r7, #3]
 8005384:	4611      	mov	r1, r2
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	4798      	blx	r3
 800538a:	4603      	mov	r3, r0
 800538c:	2b00      	cmp	r3, #0
 800538e:	d001      	beq.n	8005394 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005390:	2303      	movs	r3, #3
 8005392:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005394:	7bfb      	ldrb	r3, [r7, #15]
}
 8005396:	4618      	mov	r0, r3
 8005398:	3710      	adds	r7, #16
 800539a:	46bd      	mov	sp, r7
 800539c:	bd80      	pop	{r7, pc}

0800539e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800539e:	b580      	push	{r7, lr}
 80053a0:	b084      	sub	sp, #16
 80053a2:	af00      	add	r7, sp, #0
 80053a4:	6078      	str	r0, [r7, #4]
 80053a6:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053ae:	6839      	ldr	r1, [r7, #0]
 80053b0:	4618      	mov	r0, r3
 80053b2:	f001 f908 	bl	80065c6 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80053c4:	461a      	mov	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80053cc:	687b      	ldr	r3, [r7, #4]
 80053ce:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80053d2:	f003 031f 	and.w	r3, r3, #31
 80053d6:	2b02      	cmp	r3, #2
 80053d8:	d01a      	beq.n	8005410 <USBD_LL_SetupStage+0x72>
 80053da:	2b02      	cmp	r3, #2
 80053dc:	d822      	bhi.n	8005424 <USBD_LL_SetupStage+0x86>
 80053de:	2b00      	cmp	r3, #0
 80053e0:	d002      	beq.n	80053e8 <USBD_LL_SetupStage+0x4a>
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d00a      	beq.n	80053fc <USBD_LL_SetupStage+0x5e>
 80053e6:	e01d      	b.n	8005424 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80053e8:	687b      	ldr	r3, [r7, #4]
 80053ea:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80053ee:	4619      	mov	r1, r3
 80053f0:	6878      	ldr	r0, [r7, #4]
 80053f2:	f000 fb5f 	bl	8005ab4 <USBD_StdDevReq>
 80053f6:	4603      	mov	r3, r0
 80053f8:	73fb      	strb	r3, [r7, #15]
      break;
 80053fa:	e020      	b.n	800543e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005402:	4619      	mov	r1, r3
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f000 fbc7 	bl	8005b98 <USBD_StdItfReq>
 800540a:	4603      	mov	r3, r0
 800540c:	73fb      	strb	r3, [r7, #15]
      break;
 800540e:	e016      	b.n	800543e <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8005416:	4619      	mov	r1, r3
 8005418:	6878      	ldr	r0, [r7, #4]
 800541a:	f000 fc29 	bl	8005c70 <USBD_StdEPReq>
 800541e:	4603      	mov	r3, r0
 8005420:	73fb      	strb	r3, [r7, #15]
      break;
 8005422:	e00c      	b.n	800543e <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800542a:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 800542e:	b2db      	uxtb	r3, r3
 8005430:	4619      	mov	r1, r3
 8005432:	6878      	ldr	r0, [r7, #4]
 8005434:	f001 fcf4 	bl	8006e20 <USBD_LL_StallEP>
 8005438:	4603      	mov	r3, r0
 800543a:	73fb      	strb	r3, [r7, #15]
      break;
 800543c:	bf00      	nop
  }

  return ret;
 800543e:	7bfb      	ldrb	r3, [r7, #15]
}
 8005440:	4618      	mov	r0, r3
 8005442:	3710      	adds	r7, #16
 8005444:	46bd      	mov	sp, r7
 8005446:	bd80      	pop	{r7, pc}

08005448 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b086      	sub	sp, #24
 800544c:	af00      	add	r7, sp, #0
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	460b      	mov	r3, r1
 8005452:	607a      	str	r2, [r7, #4]
 8005454:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 8005456:	2300      	movs	r3, #0
 8005458:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 800545a:	7afb      	ldrb	r3, [r7, #11]
 800545c:	2b00      	cmp	r3, #0
 800545e:	d16e      	bne.n	800553e <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005460:	68fb      	ldr	r3, [r7, #12]
 8005462:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005466:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800546e:	2b03      	cmp	r3, #3
 8005470:	f040 8098 	bne.w	80055a4 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	689a      	ldr	r2, [r3, #8]
 8005478:	693b      	ldr	r3, [r7, #16]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	429a      	cmp	r2, r3
 800547e:	d913      	bls.n	80054a8 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005480:	693b      	ldr	r3, [r7, #16]
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	693b      	ldr	r3, [r7, #16]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	1ad2      	subs	r2, r2, r3
 800548a:	693b      	ldr	r3, [r7, #16]
 800548c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	68da      	ldr	r2, [r3, #12]
 8005492:	693b      	ldr	r3, [r7, #16]
 8005494:	689b      	ldr	r3, [r3, #8]
 8005496:	4293      	cmp	r3, r2
 8005498:	bf28      	it	cs
 800549a:	4613      	movcs	r3, r2
 800549c:	461a      	mov	r2, r3
 800549e:	6879      	ldr	r1, [r7, #4]
 80054a0:	68f8      	ldr	r0, [r7, #12]
 80054a2:	f001 f967 	bl	8006774 <USBD_CtlContinueRx>
 80054a6:	e07d      	b.n	80055a4 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80054a8:	68fb      	ldr	r3, [r7, #12]
 80054aa:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80054ae:	f003 031f 	and.w	r3, r3, #31
 80054b2:	2b02      	cmp	r3, #2
 80054b4:	d014      	beq.n	80054e0 <USBD_LL_DataOutStage+0x98>
 80054b6:	2b02      	cmp	r3, #2
 80054b8:	d81d      	bhi.n	80054f6 <USBD_LL_DataOutStage+0xae>
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d002      	beq.n	80054c4 <USBD_LL_DataOutStage+0x7c>
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d003      	beq.n	80054ca <USBD_LL_DataOutStage+0x82>
 80054c2:	e018      	b.n	80054f6 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80054c4:	2300      	movs	r3, #0
 80054c6:	75bb      	strb	r3, [r7, #22]
            break;
 80054c8:	e018      	b.n	80054fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	4619      	mov	r1, r3
 80054d4:	68f8      	ldr	r0, [r7, #12]
 80054d6:	f000 fa5e 	bl	8005996 <USBD_CoreFindIF>
 80054da:	4603      	mov	r3, r0
 80054dc:	75bb      	strb	r3, [r7, #22]
            break;
 80054de:	e00d      	b.n	80054fc <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80054e0:	68fb      	ldr	r3, [r7, #12]
 80054e2:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	4619      	mov	r1, r3
 80054ea:	68f8      	ldr	r0, [r7, #12]
 80054ec:	f000 fa60 	bl	80059b0 <USBD_CoreFindEP>
 80054f0:	4603      	mov	r3, r0
 80054f2:	75bb      	strb	r3, [r7, #22]
            break;
 80054f4:	e002      	b.n	80054fc <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80054f6:	2300      	movs	r3, #0
 80054f8:	75bb      	strb	r3, [r7, #22]
            break;
 80054fa:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80054fc:	7dbb      	ldrb	r3, [r7, #22]
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d119      	bne.n	8005536 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005508:	b2db      	uxtb	r3, r3
 800550a:	2b03      	cmp	r3, #3
 800550c:	d113      	bne.n	8005536 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 800550e:	7dba      	ldrb	r2, [r7, #22]
 8005510:	68fb      	ldr	r3, [r7, #12]
 8005512:	32ae      	adds	r2, #174	; 0xae
 8005514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d00b      	beq.n	8005536 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 800551e:	7dba      	ldrb	r2, [r7, #22]
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 8005526:	7dba      	ldrb	r2, [r7, #22]
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	32ae      	adds	r2, #174	; 0xae
 800552c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005530:	691b      	ldr	r3, [r3, #16]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f001 f92d 	bl	8006796 <USBD_CtlSendStatus>
 800553c:	e032      	b.n	80055a4 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 800553e:	7afb      	ldrb	r3, [r7, #11]
 8005540:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005544:	b2db      	uxtb	r3, r3
 8005546:	4619      	mov	r1, r3
 8005548:	68f8      	ldr	r0, [r7, #12]
 800554a:	f000 fa31 	bl	80059b0 <USBD_CoreFindEP>
 800554e:	4603      	mov	r3, r0
 8005550:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005552:	7dbb      	ldrb	r3, [r7, #22]
 8005554:	2bff      	cmp	r3, #255	; 0xff
 8005556:	d025      	beq.n	80055a4 <USBD_LL_DataOutStage+0x15c>
 8005558:	7dbb      	ldrb	r3, [r7, #22]
 800555a:	2b00      	cmp	r3, #0
 800555c:	d122      	bne.n	80055a4 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005564:	b2db      	uxtb	r3, r3
 8005566:	2b03      	cmp	r3, #3
 8005568:	d117      	bne.n	800559a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800556a:	7dba      	ldrb	r2, [r7, #22]
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	32ae      	adds	r2, #174	; 0xae
 8005570:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005574:	699b      	ldr	r3, [r3, #24]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00f      	beq.n	800559a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800557a:	7dba      	ldrb	r2, [r7, #22]
 800557c:	68fb      	ldr	r3, [r7, #12]
 800557e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005582:	7dba      	ldrb	r2, [r7, #22]
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	32ae      	adds	r2, #174	; 0xae
 8005588:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800558c:	699b      	ldr	r3, [r3, #24]
 800558e:	7afa      	ldrb	r2, [r7, #11]
 8005590:	4611      	mov	r1, r2
 8005592:	68f8      	ldr	r0, [r7, #12]
 8005594:	4798      	blx	r3
 8005596:	4603      	mov	r3, r0
 8005598:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800559a:	7dfb      	ldrb	r3, [r7, #23]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d001      	beq.n	80055a4 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 80055a0:	7dfb      	ldrb	r3, [r7, #23]
 80055a2:	e000      	b.n	80055a6 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 80055a4:	2300      	movs	r3, #0
}
 80055a6:	4618      	mov	r0, r3
 80055a8:	3718      	adds	r7, #24
 80055aa:	46bd      	mov	sp, r7
 80055ac:	bd80      	pop	{r7, pc}

080055ae <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80055ae:	b580      	push	{r7, lr}
 80055b0:	b086      	sub	sp, #24
 80055b2:	af00      	add	r7, sp, #0
 80055b4:	60f8      	str	r0, [r7, #12]
 80055b6:	460b      	mov	r3, r1
 80055b8:	607a      	str	r2, [r7, #4]
 80055ba:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80055bc:	7afb      	ldrb	r3, [r7, #11]
 80055be:	2b00      	cmp	r3, #0
 80055c0:	d16f      	bne.n	80056a2 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80055c2:	68fb      	ldr	r3, [r7, #12]
 80055c4:	3314      	adds	r3, #20
 80055c6:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80055c8:	68fb      	ldr	r3, [r7, #12]
 80055ca:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80055ce:	2b02      	cmp	r3, #2
 80055d0:	d15a      	bne.n	8005688 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80055d2:	693b      	ldr	r3, [r7, #16]
 80055d4:	689a      	ldr	r2, [r3, #8]
 80055d6:	693b      	ldr	r3, [r7, #16]
 80055d8:	68db      	ldr	r3, [r3, #12]
 80055da:	429a      	cmp	r2, r3
 80055dc:	d914      	bls.n	8005608 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	689a      	ldr	r2, [r3, #8]
 80055e2:	693b      	ldr	r3, [r7, #16]
 80055e4:	68db      	ldr	r3, [r3, #12]
 80055e6:	1ad2      	subs	r2, r2, r3
 80055e8:	693b      	ldr	r3, [r7, #16]
 80055ea:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80055ec:	693b      	ldr	r3, [r7, #16]
 80055ee:	689b      	ldr	r3, [r3, #8]
 80055f0:	461a      	mov	r2, r3
 80055f2:	6879      	ldr	r1, [r7, #4]
 80055f4:	68f8      	ldr	r0, [r7, #12]
 80055f6:	f001 f8ac 	bl	8006752 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80055fa:	2300      	movs	r3, #0
 80055fc:	2200      	movs	r2, #0
 80055fe:	2100      	movs	r1, #0
 8005600:	68f8      	ldr	r0, [r7, #12]
 8005602:	f001 fcb7 	bl	8006f74 <USBD_LL_PrepareReceive>
 8005606:	e03f      	b.n	8005688 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	68da      	ldr	r2, [r3, #12]
 800560c:	693b      	ldr	r3, [r7, #16]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	429a      	cmp	r2, r3
 8005612:	d11c      	bne.n	800564e <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 8005614:	693b      	ldr	r3, [r7, #16]
 8005616:	685a      	ldr	r2, [r3, #4]
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 800561c:	429a      	cmp	r2, r3
 800561e:	d316      	bcc.n	800564e <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8005620:	693b      	ldr	r3, [r7, #16]
 8005622:	685a      	ldr	r2, [r3, #4]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 800562a:	429a      	cmp	r2, r3
 800562c:	d20f      	bcs.n	800564e <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 800562e:	2200      	movs	r2, #0
 8005630:	2100      	movs	r1, #0
 8005632:	68f8      	ldr	r0, [r7, #12]
 8005634:	f001 f88d 	bl	8006752 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	2200      	movs	r2, #0
 800563c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8005640:	2300      	movs	r3, #0
 8005642:	2200      	movs	r2, #0
 8005644:	2100      	movs	r1, #0
 8005646:	68f8      	ldr	r0, [r7, #12]
 8005648:	f001 fc94 	bl	8006f74 <USBD_LL_PrepareReceive>
 800564c:	e01c      	b.n	8005688 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005654:	b2db      	uxtb	r3, r3
 8005656:	2b03      	cmp	r3, #3
 8005658:	d10f      	bne.n	800567a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 800565a:	68fb      	ldr	r3, [r7, #12]
 800565c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005660:	68db      	ldr	r3, [r3, #12]
 8005662:	2b00      	cmp	r3, #0
 8005664:	d009      	beq.n	800567a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	2200      	movs	r2, #0
 800566a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005674:	68db      	ldr	r3, [r3, #12]
 8005676:	68f8      	ldr	r0, [r7, #12]
 8005678:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800567a:	2180      	movs	r1, #128	; 0x80
 800567c:	68f8      	ldr	r0, [r7, #12]
 800567e:	f001 fbcf 	bl	8006e20 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005682:	68f8      	ldr	r0, [r7, #12]
 8005684:	f001 f89a 	bl	80067bc <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800568e:	2b00      	cmp	r3, #0
 8005690:	d03a      	beq.n	8005708 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005692:	68f8      	ldr	r0, [r7, #12]
 8005694:	f7ff fe42 	bl	800531c <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	2200      	movs	r2, #0
 800569c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 80056a0:	e032      	b.n	8005708 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 80056a2:	7afb      	ldrb	r3, [r7, #11]
 80056a4:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80056a8:	b2db      	uxtb	r3, r3
 80056aa:	4619      	mov	r1, r3
 80056ac:	68f8      	ldr	r0, [r7, #12]
 80056ae:	f000 f97f 	bl	80059b0 <USBD_CoreFindEP>
 80056b2:	4603      	mov	r3, r0
 80056b4:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80056b6:	7dfb      	ldrb	r3, [r7, #23]
 80056b8:	2bff      	cmp	r3, #255	; 0xff
 80056ba:	d025      	beq.n	8005708 <USBD_LL_DataInStage+0x15a>
 80056bc:	7dfb      	ldrb	r3, [r7, #23]
 80056be:	2b00      	cmp	r3, #0
 80056c0:	d122      	bne.n	8005708 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80056c8:	b2db      	uxtb	r3, r3
 80056ca:	2b03      	cmp	r3, #3
 80056cc:	d11c      	bne.n	8005708 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80056ce:	7dfa      	ldrb	r2, [r7, #23]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	32ae      	adds	r2, #174	; 0xae
 80056d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056d8:	695b      	ldr	r3, [r3, #20]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d014      	beq.n	8005708 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80056de:	7dfa      	ldrb	r2, [r7, #23]
 80056e0:	68fb      	ldr	r3, [r7, #12]
 80056e2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80056e6:	7dfa      	ldrb	r2, [r7, #23]
 80056e8:	68fb      	ldr	r3, [r7, #12]
 80056ea:	32ae      	adds	r2, #174	; 0xae
 80056ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80056f0:	695b      	ldr	r3, [r3, #20]
 80056f2:	7afa      	ldrb	r2, [r7, #11]
 80056f4:	4611      	mov	r1, r2
 80056f6:	68f8      	ldr	r0, [r7, #12]
 80056f8:	4798      	blx	r3
 80056fa:	4603      	mov	r3, r0
 80056fc:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80056fe:	7dbb      	ldrb	r3, [r7, #22]
 8005700:	2b00      	cmp	r3, #0
 8005702:	d001      	beq.n	8005708 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8005704:	7dbb      	ldrb	r3, [r7, #22]
 8005706:	e000      	b.n	800570a <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8005708:	2300      	movs	r3, #0
}
 800570a:	4618      	mov	r0, r3
 800570c:	3718      	adds	r7, #24
 800570e:	46bd      	mov	sp, r7
 8005710:	bd80      	pop	{r7, pc}

08005712 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 8005712:	b580      	push	{r7, lr}
 8005714:	b084      	sub	sp, #16
 8005716:	af00      	add	r7, sp, #0
 8005718:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 800571a:	2300      	movs	r3, #0
 800571c:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	2201      	movs	r2, #1
 8005722:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 8005726:	687b      	ldr	r3, [r7, #4]
 8005728:	2200      	movs	r2, #0
 800572a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2200      	movs	r2, #0
 8005732:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	2200      	movs	r2, #0
 8005738:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	2200      	movs	r2, #0
 8005740:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800574a:	2b00      	cmp	r3, #0
 800574c:	d014      	beq.n	8005778 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005754:	685b      	ldr	r3, [r3, #4]
 8005756:	2b00      	cmp	r3, #0
 8005758:	d00e      	beq.n	8005778 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005760:	685b      	ldr	r3, [r3, #4]
 8005762:	687a      	ldr	r2, [r7, #4]
 8005764:	6852      	ldr	r2, [r2, #4]
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	4611      	mov	r1, r2
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	4798      	blx	r3
 800576e:	4603      	mov	r3, r0
 8005770:	2b00      	cmp	r3, #0
 8005772:	d001      	beq.n	8005778 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005774:	2303      	movs	r3, #3
 8005776:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005778:	2340      	movs	r3, #64	; 0x40
 800577a:	2200      	movs	r2, #0
 800577c:	2100      	movs	r1, #0
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f001 fb09 	bl	8006d96 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2201      	movs	r2, #1
 8005788:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	2240      	movs	r2, #64	; 0x40
 8005790:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005794:	2340      	movs	r3, #64	; 0x40
 8005796:	2200      	movs	r2, #0
 8005798:	2180      	movs	r1, #128	; 0x80
 800579a:	6878      	ldr	r0, [r7, #4]
 800579c:	f001 fafb 	bl	8006d96 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2201      	movs	r2, #1
 80057a4:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	2240      	movs	r2, #64	; 0x40
 80057aa:	621a      	str	r2, [r3, #32]

  return ret;
 80057ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80057ae:	4618      	mov	r0, r3
 80057b0:	3710      	adds	r7, #16
 80057b2:	46bd      	mov	sp, r7
 80057b4:	bd80      	pop	{r7, pc}

080057b6 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80057b6:	b480      	push	{r7}
 80057b8:	b083      	sub	sp, #12
 80057ba:	af00      	add	r7, sp, #0
 80057bc:	6078      	str	r0, [r7, #4]
 80057be:	460b      	mov	r3, r1
 80057c0:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	78fa      	ldrb	r2, [r7, #3]
 80057c6:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80057c8:	2300      	movs	r3, #0
}
 80057ca:	4618      	mov	r0, r3
 80057cc:	370c      	adds	r7, #12
 80057ce:	46bd      	mov	sp, r7
 80057d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d4:	4770      	bx	lr

080057d6 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80057d6:	b480      	push	{r7}
 80057d8:	b083      	sub	sp, #12
 80057da:	af00      	add	r7, sp, #0
 80057dc:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057e4:	b2da      	uxtb	r2, r3
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80057ec:	687b      	ldr	r3, [r7, #4]
 80057ee:	2204      	movs	r2, #4
 80057f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80057f4:	2300      	movs	r3, #0
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	370c      	adds	r7, #12
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr

08005802 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005802:	b480      	push	{r7}
 8005804:	b083      	sub	sp, #12
 8005806:	af00      	add	r7, sp, #0
 8005808:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005810:	b2db      	uxtb	r3, r3
 8005812:	2b04      	cmp	r3, #4
 8005814:	d106      	bne.n	8005824 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 800581c:	b2da      	uxtb	r2, r3
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005824:	2300      	movs	r3, #0
}
 8005826:	4618      	mov	r0, r3
 8005828:	370c      	adds	r7, #12
 800582a:	46bd      	mov	sp, r7
 800582c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005830:	4770      	bx	lr

08005832 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005832:	b580      	push	{r7, lr}
 8005834:	b082      	sub	sp, #8
 8005836:	af00      	add	r7, sp, #0
 8005838:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005840:	b2db      	uxtb	r3, r3
 8005842:	2b03      	cmp	r3, #3
 8005844:	d110      	bne.n	8005868 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800584c:	2b00      	cmp	r3, #0
 800584e:	d00b      	beq.n	8005868 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005856:	69db      	ldr	r3, [r3, #28]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d005      	beq.n	8005868 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005862:	69db      	ldr	r3, [r3, #28]
 8005864:	6878      	ldr	r0, [r7, #4]
 8005866:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005868:	2300      	movs	r3, #0
}
 800586a:	4618      	mov	r0, r3
 800586c:	3708      	adds	r7, #8
 800586e:	46bd      	mov	sp, r7
 8005870:	bd80      	pop	{r7, pc}

08005872 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005872:	b580      	push	{r7, lr}
 8005874:	b082      	sub	sp, #8
 8005876:	af00      	add	r7, sp, #0
 8005878:	6078      	str	r0, [r7, #4]
 800587a:	460b      	mov	r3, r1
 800587c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	32ae      	adds	r2, #174	; 0xae
 8005888:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005890:	2303      	movs	r3, #3
 8005892:	e01c      	b.n	80058ce <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800589a:	b2db      	uxtb	r3, r3
 800589c:	2b03      	cmp	r3, #3
 800589e:	d115      	bne.n	80058cc <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	32ae      	adds	r2, #174	; 0xae
 80058aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058ae:	6a1b      	ldr	r3, [r3, #32]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d00b      	beq.n	80058cc <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	32ae      	adds	r2, #174	; 0xae
 80058be:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	78fa      	ldrb	r2, [r7, #3]
 80058c6:	4611      	mov	r1, r2
 80058c8:	6878      	ldr	r0, [r7, #4]
 80058ca:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80058cc:	2300      	movs	r3, #0
}
 80058ce:	4618      	mov	r0, r3
 80058d0:	3708      	adds	r7, #8
 80058d2:	46bd      	mov	sp, r7
 80058d4:	bd80      	pop	{r7, pc}

080058d6 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80058d6:	b580      	push	{r7, lr}
 80058d8:	b082      	sub	sp, #8
 80058da:	af00      	add	r7, sp, #0
 80058dc:	6078      	str	r0, [r7, #4]
 80058de:	460b      	mov	r3, r1
 80058e0:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	32ae      	adds	r2, #174	; 0xae
 80058ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058f0:	2b00      	cmp	r3, #0
 80058f2:	d101      	bne.n	80058f8 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80058f4:	2303      	movs	r3, #3
 80058f6:	e01c      	b.n	8005932 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058fe:	b2db      	uxtb	r3, r3
 8005900:	2b03      	cmp	r3, #3
 8005902:	d115      	bne.n	8005930 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	32ae      	adds	r2, #174	; 0xae
 800590e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005912:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005914:	2b00      	cmp	r3, #0
 8005916:	d00b      	beq.n	8005930 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005918:	687b      	ldr	r3, [r7, #4]
 800591a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	32ae      	adds	r2, #174	; 0xae
 8005922:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005926:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005928:	78fa      	ldrb	r2, [r7, #3]
 800592a:	4611      	mov	r1, r2
 800592c:	6878      	ldr	r0, [r7, #4]
 800592e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005930:	2300      	movs	r3, #0
}
 8005932:	4618      	mov	r0, r3
 8005934:	3708      	adds	r7, #8
 8005936:	46bd      	mov	sp, r7
 8005938:	bd80      	pop	{r7, pc}

0800593a <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 800593a:	b480      	push	{r7}
 800593c:	b083      	sub	sp, #12
 800593e:	af00      	add	r7, sp, #0
 8005940:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005942:	2300      	movs	r3, #0
}
 8005944:	4618      	mov	r0, r3
 8005946:	370c      	adds	r7, #12
 8005948:	46bd      	mov	sp, r7
 800594a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800594e:	4770      	bx	lr

08005950 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005950:	b580      	push	{r7, lr}
 8005952:	b084      	sub	sp, #16
 8005954:	af00      	add	r7, sp, #0
 8005956:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005958:	2300      	movs	r3, #0
 800595a:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800596a:	2b00      	cmp	r3, #0
 800596c:	d00e      	beq.n	800598c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005974:	685b      	ldr	r3, [r3, #4]
 8005976:	687a      	ldr	r2, [r7, #4]
 8005978:	6852      	ldr	r2, [r2, #4]
 800597a:	b2d2      	uxtb	r2, r2
 800597c:	4611      	mov	r1, r2
 800597e:	6878      	ldr	r0, [r7, #4]
 8005980:	4798      	blx	r3
 8005982:	4603      	mov	r3, r0
 8005984:	2b00      	cmp	r3, #0
 8005986:	d001      	beq.n	800598c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005988:	2303      	movs	r3, #3
 800598a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800598c:	7bfb      	ldrb	r3, [r7, #15]
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005996:	b480      	push	{r7}
 8005998:	b083      	sub	sp, #12
 800599a:	af00      	add	r7, sp, #0
 800599c:	6078      	str	r0, [r7, #4]
 800599e:	460b      	mov	r3, r1
 80059a0:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80059a2:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80059a4:	4618      	mov	r0, r3
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
 80059b8:	460b      	mov	r3, r1
 80059ba:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80059bc:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80059be:	4618      	mov	r0, r3
 80059c0:	370c      	adds	r7, #12
 80059c2:	46bd      	mov	sp, r7
 80059c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c8:	4770      	bx	lr

080059ca <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80059ca:	b580      	push	{r7, lr}
 80059cc:	b086      	sub	sp, #24
 80059ce:	af00      	add	r7, sp, #0
 80059d0:	6078      	str	r0, [r7, #4]
 80059d2:	460b      	mov	r3, r1
 80059d4:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80059de:	2300      	movs	r3, #0
 80059e0:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80059e2:	68fb      	ldr	r3, [r7, #12]
 80059e4:	885b      	ldrh	r3, [r3, #2]
 80059e6:	b29a      	uxth	r2, r3
 80059e8:	68fb      	ldr	r3, [r7, #12]
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	b29b      	uxth	r3, r3
 80059ee:	429a      	cmp	r2, r3
 80059f0:	d920      	bls.n	8005a34 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	781b      	ldrb	r3, [r3, #0]
 80059f6:	b29b      	uxth	r3, r3
 80059f8:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80059fa:	e013      	b.n	8005a24 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80059fc:	f107 030a 	add.w	r3, r7, #10
 8005a00:	4619      	mov	r1, r3
 8005a02:	6978      	ldr	r0, [r7, #20]
 8005a04:	f000 f81b 	bl	8005a3e <USBD_GetNextDesc>
 8005a08:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005a0a:	697b      	ldr	r3, [r7, #20]
 8005a0c:	785b      	ldrb	r3, [r3, #1]
 8005a0e:	2b05      	cmp	r3, #5
 8005a10:	d108      	bne.n	8005a24 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	789b      	ldrb	r3, [r3, #2]
 8005a1a:	78fa      	ldrb	r2, [r7, #3]
 8005a1c:	429a      	cmp	r2, r3
 8005a1e:	d008      	beq.n	8005a32 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005a20:	2300      	movs	r3, #0
 8005a22:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005a24:	68fb      	ldr	r3, [r7, #12]
 8005a26:	885b      	ldrh	r3, [r3, #2]
 8005a28:	b29a      	uxth	r2, r3
 8005a2a:	897b      	ldrh	r3, [r7, #10]
 8005a2c:	429a      	cmp	r2, r3
 8005a2e:	d8e5      	bhi.n	80059fc <USBD_GetEpDesc+0x32>
 8005a30:	e000      	b.n	8005a34 <USBD_GetEpDesc+0x6a>
          break;
 8005a32:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005a34:	693b      	ldr	r3, [r7, #16]
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3718      	adds	r7, #24
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}

08005a3e <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005a3e:	b480      	push	{r7}
 8005a40:	b085      	sub	sp, #20
 8005a42:	af00      	add	r7, sp, #0
 8005a44:	6078      	str	r0, [r7, #4]
 8005a46:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005a4c:	683b      	ldr	r3, [r7, #0]
 8005a4e:	881a      	ldrh	r2, [r3, #0]
 8005a50:	68fb      	ldr	r3, [r7, #12]
 8005a52:	781b      	ldrb	r3, [r3, #0]
 8005a54:	b29b      	uxth	r3, r3
 8005a56:	4413      	add	r3, r2
 8005a58:	b29a      	uxth	r2, r3
 8005a5a:	683b      	ldr	r3, [r7, #0]
 8005a5c:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005a5e:	68fb      	ldr	r3, [r7, #12]
 8005a60:	781b      	ldrb	r3, [r3, #0]
 8005a62:	461a      	mov	r2, r3
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	4413      	add	r3, r2
 8005a68:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005a6a:	68fb      	ldr	r3, [r7, #12]
}
 8005a6c:	4618      	mov	r0, r3
 8005a6e:	3714      	adds	r7, #20
 8005a70:	46bd      	mov	sp, r7
 8005a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a76:	4770      	bx	lr

08005a78 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005a78:	b480      	push	{r7}
 8005a7a:	b087      	sub	sp, #28
 8005a7c:	af00      	add	r7, sp, #0
 8005a7e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005a84:	697b      	ldr	r3, [r7, #20]
 8005a86:	781b      	ldrb	r3, [r3, #0]
 8005a88:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005a8a:	697b      	ldr	r3, [r7, #20]
 8005a8c:	3301      	adds	r3, #1
 8005a8e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005a90:	697b      	ldr	r3, [r7, #20]
 8005a92:	781b      	ldrb	r3, [r3, #0]
 8005a94:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005a96:	8a3b      	ldrh	r3, [r7, #16]
 8005a98:	021b      	lsls	r3, r3, #8
 8005a9a:	b21a      	sxth	r2, r3
 8005a9c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005aa0:	4313      	orrs	r3, r2
 8005aa2:	b21b      	sxth	r3, r3
 8005aa4:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005aa6:	89fb      	ldrh	r3, [r7, #14]
}
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	371c      	adds	r7, #28
 8005aac:	46bd      	mov	sp, r7
 8005aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ab2:	4770      	bx	lr

08005ab4 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005ab4:	b580      	push	{r7, lr}
 8005ab6:	b084      	sub	sp, #16
 8005ab8:	af00      	add	r7, sp, #0
 8005aba:	6078      	str	r0, [r7, #4]
 8005abc:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005abe:	2300      	movs	r3, #0
 8005ac0:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	781b      	ldrb	r3, [r3, #0]
 8005ac6:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005aca:	2b40      	cmp	r3, #64	; 0x40
 8005acc:	d005      	beq.n	8005ada <USBD_StdDevReq+0x26>
 8005ace:	2b40      	cmp	r3, #64	; 0x40
 8005ad0:	d857      	bhi.n	8005b82 <USBD_StdDevReq+0xce>
 8005ad2:	2b00      	cmp	r3, #0
 8005ad4:	d00f      	beq.n	8005af6 <USBD_StdDevReq+0x42>
 8005ad6:	2b20      	cmp	r3, #32
 8005ad8:	d153      	bne.n	8005b82 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	32ae      	adds	r2, #174	; 0xae
 8005ae4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ae8:	689b      	ldr	r3, [r3, #8]
 8005aea:	6839      	ldr	r1, [r7, #0]
 8005aec:	6878      	ldr	r0, [r7, #4]
 8005aee:	4798      	blx	r3
 8005af0:	4603      	mov	r3, r0
 8005af2:	73fb      	strb	r3, [r7, #15]
      break;
 8005af4:	e04a      	b.n	8005b8c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005af6:	683b      	ldr	r3, [r7, #0]
 8005af8:	785b      	ldrb	r3, [r3, #1]
 8005afa:	2b09      	cmp	r3, #9
 8005afc:	d83b      	bhi.n	8005b76 <USBD_StdDevReq+0xc2>
 8005afe:	a201      	add	r2, pc, #4	; (adr r2, 8005b04 <USBD_StdDevReq+0x50>)
 8005b00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b04:	08005b59 	.word	0x08005b59
 8005b08:	08005b6d 	.word	0x08005b6d
 8005b0c:	08005b77 	.word	0x08005b77
 8005b10:	08005b63 	.word	0x08005b63
 8005b14:	08005b77 	.word	0x08005b77
 8005b18:	08005b37 	.word	0x08005b37
 8005b1c:	08005b2d 	.word	0x08005b2d
 8005b20:	08005b77 	.word	0x08005b77
 8005b24:	08005b4f 	.word	0x08005b4f
 8005b28:	08005b41 	.word	0x08005b41
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005b2c:	6839      	ldr	r1, [r7, #0]
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 fa3c 	bl	8005fac <USBD_GetDescriptor>
          break;
 8005b34:	e024      	b.n	8005b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005b36:	6839      	ldr	r1, [r7, #0]
 8005b38:	6878      	ldr	r0, [r7, #4]
 8005b3a:	f000 fba1 	bl	8006280 <USBD_SetAddress>
          break;
 8005b3e:	e01f      	b.n	8005b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005b40:	6839      	ldr	r1, [r7, #0]
 8005b42:	6878      	ldr	r0, [r7, #4]
 8005b44:	f000 fbe0 	bl	8006308 <USBD_SetConfig>
 8005b48:	4603      	mov	r3, r0
 8005b4a:	73fb      	strb	r3, [r7, #15]
          break;
 8005b4c:	e018      	b.n	8005b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005b4e:	6839      	ldr	r1, [r7, #0]
 8005b50:	6878      	ldr	r0, [r7, #4]
 8005b52:	f000 fc83 	bl	800645c <USBD_GetConfig>
          break;
 8005b56:	e013      	b.n	8005b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005b58:	6839      	ldr	r1, [r7, #0]
 8005b5a:	6878      	ldr	r0, [r7, #4]
 8005b5c:	f000 fcb4 	bl	80064c8 <USBD_GetStatus>
          break;
 8005b60:	e00e      	b.n	8005b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005b62:	6839      	ldr	r1, [r7, #0]
 8005b64:	6878      	ldr	r0, [r7, #4]
 8005b66:	f000 fce3 	bl	8006530 <USBD_SetFeature>
          break;
 8005b6a:	e009      	b.n	8005b80 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005b6c:	6839      	ldr	r1, [r7, #0]
 8005b6e:	6878      	ldr	r0, [r7, #4]
 8005b70:	f000 fd07 	bl	8006582 <USBD_ClrFeature>
          break;
 8005b74:	e004      	b.n	8005b80 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005b76:	6839      	ldr	r1, [r7, #0]
 8005b78:	6878      	ldr	r0, [r7, #4]
 8005b7a:	f000 fd5e 	bl	800663a <USBD_CtlError>
          break;
 8005b7e:	bf00      	nop
      }
      break;
 8005b80:	e004      	b.n	8005b8c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005b82:	6839      	ldr	r1, [r7, #0]
 8005b84:	6878      	ldr	r0, [r7, #4]
 8005b86:	f000 fd58 	bl	800663a <USBD_CtlError>
      break;
 8005b8a:	bf00      	nop
  }

  return ret;
 8005b8c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3710      	adds	r7, #16
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}
 8005b96:	bf00      	nop

08005b98 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005b98:	b580      	push	{r7, lr}
 8005b9a:	b084      	sub	sp, #16
 8005b9c:	af00      	add	r7, sp, #0
 8005b9e:	6078      	str	r0, [r7, #4]
 8005ba0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005bae:	2b40      	cmp	r3, #64	; 0x40
 8005bb0:	d005      	beq.n	8005bbe <USBD_StdItfReq+0x26>
 8005bb2:	2b40      	cmp	r3, #64	; 0x40
 8005bb4:	d852      	bhi.n	8005c5c <USBD_StdItfReq+0xc4>
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <USBD_StdItfReq+0x26>
 8005bba:	2b20      	cmp	r3, #32
 8005bbc:	d14e      	bne.n	8005c5c <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	3b01      	subs	r3, #1
 8005bc8:	2b02      	cmp	r3, #2
 8005bca:	d840      	bhi.n	8005c4e <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	889b      	ldrh	r3, [r3, #4]
 8005bd0:	b2db      	uxtb	r3, r3
 8005bd2:	2b01      	cmp	r3, #1
 8005bd4:	d836      	bhi.n	8005c44 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005bd6:	683b      	ldr	r3, [r7, #0]
 8005bd8:	889b      	ldrh	r3, [r3, #4]
 8005bda:	b2db      	uxtb	r3, r3
 8005bdc:	4619      	mov	r1, r3
 8005bde:	6878      	ldr	r0, [r7, #4]
 8005be0:	f7ff fed9 	bl	8005996 <USBD_CoreFindIF>
 8005be4:	4603      	mov	r3, r0
 8005be6:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005be8:	7bbb      	ldrb	r3, [r7, #14]
 8005bea:	2bff      	cmp	r3, #255	; 0xff
 8005bec:	d01d      	beq.n	8005c2a <USBD_StdItfReq+0x92>
 8005bee:	7bbb      	ldrb	r3, [r7, #14]
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d11a      	bne.n	8005c2a <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005bf4:	7bba      	ldrb	r2, [r7, #14]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	32ae      	adds	r2, #174	; 0xae
 8005bfa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bfe:	689b      	ldr	r3, [r3, #8]
 8005c00:	2b00      	cmp	r3, #0
 8005c02:	d00f      	beq.n	8005c24 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005c04:	7bba      	ldrb	r2, [r7, #14]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005c0c:	7bba      	ldrb	r2, [r7, #14]
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	32ae      	adds	r2, #174	; 0xae
 8005c12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	6839      	ldr	r1, [r7, #0]
 8005c1a:	6878      	ldr	r0, [r7, #4]
 8005c1c:	4798      	blx	r3
 8005c1e:	4603      	mov	r3, r0
 8005c20:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005c22:	e004      	b.n	8005c2e <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005c24:	2303      	movs	r3, #3
 8005c26:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005c28:	e001      	b.n	8005c2e <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005c2a:	2303      	movs	r3, #3
 8005c2c:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	88db      	ldrh	r3, [r3, #6]
 8005c32:	2b00      	cmp	r3, #0
 8005c34:	d110      	bne.n	8005c58 <USBD_StdItfReq+0xc0>
 8005c36:	7bfb      	ldrb	r3, [r7, #15]
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10d      	bne.n	8005c58 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005c3c:	6878      	ldr	r0, [r7, #4]
 8005c3e:	f000 fdaa 	bl	8006796 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005c42:	e009      	b.n	8005c58 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005c44:	6839      	ldr	r1, [r7, #0]
 8005c46:	6878      	ldr	r0, [r7, #4]
 8005c48:	f000 fcf7 	bl	800663a <USBD_CtlError>
          break;
 8005c4c:	e004      	b.n	8005c58 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005c4e:	6839      	ldr	r1, [r7, #0]
 8005c50:	6878      	ldr	r0, [r7, #4]
 8005c52:	f000 fcf2 	bl	800663a <USBD_CtlError>
          break;
 8005c56:	e000      	b.n	8005c5a <USBD_StdItfReq+0xc2>
          break;
 8005c58:	bf00      	nop
      }
      break;
 8005c5a:	e004      	b.n	8005c66 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005c5c:	6839      	ldr	r1, [r7, #0]
 8005c5e:	6878      	ldr	r0, [r7, #4]
 8005c60:	f000 fceb 	bl	800663a <USBD_CtlError>
      break;
 8005c64:	bf00      	nop
  }

  return ret;
 8005c66:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c68:	4618      	mov	r0, r3
 8005c6a:	3710      	adds	r7, #16
 8005c6c:	46bd      	mov	sp, r7
 8005c6e:	bd80      	pop	{r7, pc}

08005c70 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c70:	b580      	push	{r7, lr}
 8005c72:	b084      	sub	sp, #16
 8005c74:	af00      	add	r7, sp, #0
 8005c76:	6078      	str	r0, [r7, #4]
 8005c78:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005c7a:	2300      	movs	r3, #0
 8005c7c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005c7e:	683b      	ldr	r3, [r7, #0]
 8005c80:	889b      	ldrh	r3, [r3, #4]
 8005c82:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	781b      	ldrb	r3, [r3, #0]
 8005c88:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c8c:	2b40      	cmp	r3, #64	; 0x40
 8005c8e:	d007      	beq.n	8005ca0 <USBD_StdEPReq+0x30>
 8005c90:	2b40      	cmp	r3, #64	; 0x40
 8005c92:	f200 817f 	bhi.w	8005f94 <USBD_StdEPReq+0x324>
 8005c96:	2b00      	cmp	r3, #0
 8005c98:	d02a      	beq.n	8005cf0 <USBD_StdEPReq+0x80>
 8005c9a:	2b20      	cmp	r3, #32
 8005c9c:	f040 817a 	bne.w	8005f94 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005ca0:	7bbb      	ldrb	r3, [r7, #14]
 8005ca2:	4619      	mov	r1, r3
 8005ca4:	6878      	ldr	r0, [r7, #4]
 8005ca6:	f7ff fe83 	bl	80059b0 <USBD_CoreFindEP>
 8005caa:	4603      	mov	r3, r0
 8005cac:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005cae:	7b7b      	ldrb	r3, [r7, #13]
 8005cb0:	2bff      	cmp	r3, #255	; 0xff
 8005cb2:	f000 8174 	beq.w	8005f9e <USBD_StdEPReq+0x32e>
 8005cb6:	7b7b      	ldrb	r3, [r7, #13]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f040 8170 	bne.w	8005f9e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005cbe:	7b7a      	ldrb	r2, [r7, #13]
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005cc6:	7b7a      	ldrb	r2, [r7, #13]
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	32ae      	adds	r2, #174	; 0xae
 8005ccc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	2b00      	cmp	r3, #0
 8005cd4:	f000 8163 	beq.w	8005f9e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005cd8:	7b7a      	ldrb	r2, [r7, #13]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	32ae      	adds	r2, #174	; 0xae
 8005cde:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	6839      	ldr	r1, [r7, #0]
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	4798      	blx	r3
 8005cea:	4603      	mov	r3, r0
 8005cec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005cee:	e156      	b.n	8005f9e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cf0:	683b      	ldr	r3, [r7, #0]
 8005cf2:	785b      	ldrb	r3, [r3, #1]
 8005cf4:	2b03      	cmp	r3, #3
 8005cf6:	d008      	beq.n	8005d0a <USBD_StdEPReq+0x9a>
 8005cf8:	2b03      	cmp	r3, #3
 8005cfa:	f300 8145 	bgt.w	8005f88 <USBD_StdEPReq+0x318>
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	f000 809b 	beq.w	8005e3a <USBD_StdEPReq+0x1ca>
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d03c      	beq.n	8005d82 <USBD_StdEPReq+0x112>
 8005d08:	e13e      	b.n	8005f88 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d10:	b2db      	uxtb	r3, r3
 8005d12:	2b02      	cmp	r3, #2
 8005d14:	d002      	beq.n	8005d1c <USBD_StdEPReq+0xac>
 8005d16:	2b03      	cmp	r3, #3
 8005d18:	d016      	beq.n	8005d48 <USBD_StdEPReq+0xd8>
 8005d1a:	e02c      	b.n	8005d76 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d1c:	7bbb      	ldrb	r3, [r7, #14]
 8005d1e:	2b00      	cmp	r3, #0
 8005d20:	d00d      	beq.n	8005d3e <USBD_StdEPReq+0xce>
 8005d22:	7bbb      	ldrb	r3, [r7, #14]
 8005d24:	2b80      	cmp	r3, #128	; 0x80
 8005d26:	d00a      	beq.n	8005d3e <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d28:	7bbb      	ldrb	r3, [r7, #14]
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	6878      	ldr	r0, [r7, #4]
 8005d2e:	f001 f877 	bl	8006e20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005d32:	2180      	movs	r1, #128	; 0x80
 8005d34:	6878      	ldr	r0, [r7, #4]
 8005d36:	f001 f873 	bl	8006e20 <USBD_LL_StallEP>
 8005d3a:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005d3c:	e020      	b.n	8005d80 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005d3e:	6839      	ldr	r1, [r7, #0]
 8005d40:	6878      	ldr	r0, [r7, #4]
 8005d42:	f000 fc7a 	bl	800663a <USBD_CtlError>
              break;
 8005d46:	e01b      	b.n	8005d80 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	885b      	ldrh	r3, [r3, #2]
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d10e      	bne.n	8005d6e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005d50:	7bbb      	ldrb	r3, [r7, #14]
 8005d52:	2b00      	cmp	r3, #0
 8005d54:	d00b      	beq.n	8005d6e <USBD_StdEPReq+0xfe>
 8005d56:	7bbb      	ldrb	r3, [r7, #14]
 8005d58:	2b80      	cmp	r3, #128	; 0x80
 8005d5a:	d008      	beq.n	8005d6e <USBD_StdEPReq+0xfe>
 8005d5c:	683b      	ldr	r3, [r7, #0]
 8005d5e:	88db      	ldrh	r3, [r3, #6]
 8005d60:	2b00      	cmp	r3, #0
 8005d62:	d104      	bne.n	8005d6e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8005d64:	7bbb      	ldrb	r3, [r7, #14]
 8005d66:	4619      	mov	r1, r3
 8005d68:	6878      	ldr	r0, [r7, #4]
 8005d6a:	f001 f859 	bl	8006e20 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8005d6e:	6878      	ldr	r0, [r7, #4]
 8005d70:	f000 fd11 	bl	8006796 <USBD_CtlSendStatus>

              break;
 8005d74:	e004      	b.n	8005d80 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8005d76:	6839      	ldr	r1, [r7, #0]
 8005d78:	6878      	ldr	r0, [r7, #4]
 8005d7a:	f000 fc5e 	bl	800663a <USBD_CtlError>
              break;
 8005d7e:	bf00      	nop
          }
          break;
 8005d80:	e107      	b.n	8005f92 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8005d82:	687b      	ldr	r3, [r7, #4]
 8005d84:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d88:	b2db      	uxtb	r3, r3
 8005d8a:	2b02      	cmp	r3, #2
 8005d8c:	d002      	beq.n	8005d94 <USBD_StdEPReq+0x124>
 8005d8e:	2b03      	cmp	r3, #3
 8005d90:	d016      	beq.n	8005dc0 <USBD_StdEPReq+0x150>
 8005d92:	e04b      	b.n	8005e2c <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005d94:	7bbb      	ldrb	r3, [r7, #14]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d00d      	beq.n	8005db6 <USBD_StdEPReq+0x146>
 8005d9a:	7bbb      	ldrb	r3, [r7, #14]
 8005d9c:	2b80      	cmp	r3, #128	; 0x80
 8005d9e:	d00a      	beq.n	8005db6 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005da0:	7bbb      	ldrb	r3, [r7, #14]
 8005da2:	4619      	mov	r1, r3
 8005da4:	6878      	ldr	r0, [r7, #4]
 8005da6:	f001 f83b 	bl	8006e20 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005daa:	2180      	movs	r1, #128	; 0x80
 8005dac:	6878      	ldr	r0, [r7, #4]
 8005dae:	f001 f837 	bl	8006e20 <USBD_LL_StallEP>
 8005db2:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005db4:	e040      	b.n	8005e38 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8005db6:	6839      	ldr	r1, [r7, #0]
 8005db8:	6878      	ldr	r0, [r7, #4]
 8005dba:	f000 fc3e 	bl	800663a <USBD_CtlError>
              break;
 8005dbe:	e03b      	b.n	8005e38 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	885b      	ldrh	r3, [r3, #2]
 8005dc4:	2b00      	cmp	r3, #0
 8005dc6:	d136      	bne.n	8005e36 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8005dc8:	7bbb      	ldrb	r3, [r7, #14]
 8005dca:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d004      	beq.n	8005ddc <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8005dd2:	7bbb      	ldrb	r3, [r7, #14]
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f001 f841 	bl	8006e5e <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8005ddc:	6878      	ldr	r0, [r7, #4]
 8005dde:	f000 fcda 	bl	8006796 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8005de2:	7bbb      	ldrb	r3, [r7, #14]
 8005de4:	4619      	mov	r1, r3
 8005de6:	6878      	ldr	r0, [r7, #4]
 8005de8:	f7ff fde2 	bl	80059b0 <USBD_CoreFindEP>
 8005dec:	4603      	mov	r3, r0
 8005dee:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005df0:	7b7b      	ldrb	r3, [r7, #13]
 8005df2:	2bff      	cmp	r3, #255	; 0xff
 8005df4:	d01f      	beq.n	8005e36 <USBD_StdEPReq+0x1c6>
 8005df6:	7b7b      	ldrb	r3, [r7, #13]
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d11c      	bne.n	8005e36 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8005dfc:	7b7a      	ldrb	r2, [r7, #13]
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8005e04:	7b7a      	ldrb	r2, [r7, #13]
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	32ae      	adds	r2, #174	; 0xae
 8005e0a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d010      	beq.n	8005e36 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005e14:	7b7a      	ldrb	r2, [r7, #13]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	32ae      	adds	r2, #174	; 0xae
 8005e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e1e:	689b      	ldr	r3, [r3, #8]
 8005e20:	6839      	ldr	r1, [r7, #0]
 8005e22:	6878      	ldr	r0, [r7, #4]
 8005e24:	4798      	blx	r3
 8005e26:	4603      	mov	r3, r0
 8005e28:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8005e2a:	e004      	b.n	8005e36 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8005e2c:	6839      	ldr	r1, [r7, #0]
 8005e2e:	6878      	ldr	r0, [r7, #4]
 8005e30:	f000 fc03 	bl	800663a <USBD_CtlError>
              break;
 8005e34:	e000      	b.n	8005e38 <USBD_StdEPReq+0x1c8>
              break;
 8005e36:	bf00      	nop
          }
          break;
 8005e38:	e0ab      	b.n	8005f92 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e40:	b2db      	uxtb	r3, r3
 8005e42:	2b02      	cmp	r3, #2
 8005e44:	d002      	beq.n	8005e4c <USBD_StdEPReq+0x1dc>
 8005e46:	2b03      	cmp	r3, #3
 8005e48:	d032      	beq.n	8005eb0 <USBD_StdEPReq+0x240>
 8005e4a:	e097      	b.n	8005f7c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005e4c:	7bbb      	ldrb	r3, [r7, #14]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d007      	beq.n	8005e62 <USBD_StdEPReq+0x1f2>
 8005e52:	7bbb      	ldrb	r3, [r7, #14]
 8005e54:	2b80      	cmp	r3, #128	; 0x80
 8005e56:	d004      	beq.n	8005e62 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8005e58:	6839      	ldr	r1, [r7, #0]
 8005e5a:	6878      	ldr	r0, [r7, #4]
 8005e5c:	f000 fbed 	bl	800663a <USBD_CtlError>
                break;
 8005e60:	e091      	b.n	8005f86 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e62:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005e66:	2b00      	cmp	r3, #0
 8005e68:	da0b      	bge.n	8005e82 <USBD_StdEPReq+0x212>
 8005e6a:	7bbb      	ldrb	r3, [r7, #14]
 8005e6c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005e70:	4613      	mov	r3, r2
 8005e72:	009b      	lsls	r3, r3, #2
 8005e74:	4413      	add	r3, r2
 8005e76:	009b      	lsls	r3, r3, #2
 8005e78:	3310      	adds	r3, #16
 8005e7a:	687a      	ldr	r2, [r7, #4]
 8005e7c:	4413      	add	r3, r2
 8005e7e:	3304      	adds	r3, #4
 8005e80:	e00b      	b.n	8005e9a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005e82:	7bbb      	ldrb	r3, [r7, #14]
 8005e84:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005e88:	4613      	mov	r3, r2
 8005e8a:	009b      	lsls	r3, r3, #2
 8005e8c:	4413      	add	r3, r2
 8005e8e:	009b      	lsls	r3, r3, #2
 8005e90:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005e94:	687a      	ldr	r2, [r7, #4]
 8005e96:	4413      	add	r3, r2
 8005e98:	3304      	adds	r3, #4
 8005e9a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8005e9c:	68bb      	ldr	r3, [r7, #8]
 8005e9e:	2200      	movs	r2, #0
 8005ea0:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005ea2:	68bb      	ldr	r3, [r7, #8]
 8005ea4:	2202      	movs	r2, #2
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f000 fc37 	bl	800671c <USBD_CtlSendData>
              break;
 8005eae:	e06a      	b.n	8005f86 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8005eb0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	da11      	bge.n	8005edc <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8005eb8:	7bbb      	ldrb	r3, [r7, #14]
 8005eba:	f003 020f 	and.w	r2, r3, #15
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	3324      	adds	r3, #36	; 0x24
 8005ecc:	881b      	ldrh	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d117      	bne.n	8005f02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005ed2:	6839      	ldr	r1, [r7, #0]
 8005ed4:	6878      	ldr	r0, [r7, #4]
 8005ed6:	f000 fbb0 	bl	800663a <USBD_CtlError>
                  break;
 8005eda:	e054      	b.n	8005f86 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8005edc:	7bbb      	ldrb	r3, [r7, #14]
 8005ede:	f003 020f 	and.w	r2, r3, #15
 8005ee2:	6879      	ldr	r1, [r7, #4]
 8005ee4:	4613      	mov	r3, r2
 8005ee6:	009b      	lsls	r3, r3, #2
 8005ee8:	4413      	add	r3, r2
 8005eea:	009b      	lsls	r3, r3, #2
 8005eec:	440b      	add	r3, r1
 8005eee:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8005ef2:	881b      	ldrh	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d104      	bne.n	8005f02 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8005ef8:	6839      	ldr	r1, [r7, #0]
 8005efa:	6878      	ldr	r0, [r7, #4]
 8005efc:	f000 fb9d 	bl	800663a <USBD_CtlError>
                  break;
 8005f00:	e041      	b.n	8005f86 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f02:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	da0b      	bge.n	8005f22 <USBD_StdEPReq+0x2b2>
 8005f0a:	7bbb      	ldrb	r3, [r7, #14]
 8005f0c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8005f10:	4613      	mov	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	3310      	adds	r3, #16
 8005f1a:	687a      	ldr	r2, [r7, #4]
 8005f1c:	4413      	add	r3, r2
 8005f1e:	3304      	adds	r3, #4
 8005f20:	e00b      	b.n	8005f3a <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8005f22:	7bbb      	ldrb	r3, [r7, #14]
 8005f24:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8005f28:	4613      	mov	r3, r2
 8005f2a:	009b      	lsls	r3, r3, #2
 8005f2c:	4413      	add	r3, r2
 8005f2e:	009b      	lsls	r3, r3, #2
 8005f30:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8005f34:	687a      	ldr	r2, [r7, #4]
 8005f36:	4413      	add	r3, r2
 8005f38:	3304      	adds	r3, #4
 8005f3a:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8005f3c:	7bbb      	ldrb	r3, [r7, #14]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d002      	beq.n	8005f48 <USBD_StdEPReq+0x2d8>
 8005f42:	7bbb      	ldrb	r3, [r7, #14]
 8005f44:	2b80      	cmp	r3, #128	; 0x80
 8005f46:	d103      	bne.n	8005f50 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	601a      	str	r2, [r3, #0]
 8005f4e:	e00e      	b.n	8005f6e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8005f50:	7bbb      	ldrb	r3, [r7, #14]
 8005f52:	4619      	mov	r1, r3
 8005f54:	6878      	ldr	r0, [r7, #4]
 8005f56:	f000 ffa1 	bl	8006e9c <USBD_LL_IsStallEP>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d003      	beq.n	8005f68 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2201      	movs	r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
 8005f66:	e002      	b.n	8005f6e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8005f68:	68bb      	ldr	r3, [r7, #8]
 8005f6a:	2200      	movs	r2, #0
 8005f6c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8005f6e:	68bb      	ldr	r3, [r7, #8]
 8005f70:	2202      	movs	r2, #2
 8005f72:	4619      	mov	r1, r3
 8005f74:	6878      	ldr	r0, [r7, #4]
 8005f76:	f000 fbd1 	bl	800671c <USBD_CtlSendData>
              break;
 8005f7a:	e004      	b.n	8005f86 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8005f7c:	6839      	ldr	r1, [r7, #0]
 8005f7e:	6878      	ldr	r0, [r7, #4]
 8005f80:	f000 fb5b 	bl	800663a <USBD_CtlError>
              break;
 8005f84:	bf00      	nop
          }
          break;
 8005f86:	e004      	b.n	8005f92 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8005f88:	6839      	ldr	r1, [r7, #0]
 8005f8a:	6878      	ldr	r0, [r7, #4]
 8005f8c:	f000 fb55 	bl	800663a <USBD_CtlError>
          break;
 8005f90:	bf00      	nop
      }
      break;
 8005f92:	e005      	b.n	8005fa0 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8005f94:	6839      	ldr	r1, [r7, #0]
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f000 fb4f 	bl	800663a <USBD_CtlError>
      break;
 8005f9c:	e000      	b.n	8005fa0 <USBD_StdEPReq+0x330>
      break;
 8005f9e:	bf00      	nop
  }

  return ret;
 8005fa0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fa2:	4618      	mov	r0, r3
 8005fa4:	3710      	adds	r7, #16
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	bd80      	pop	{r7, pc}
	...

08005fac <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b084      	sub	sp, #16
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
 8005fb4:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8005fba:	2300      	movs	r3, #0
 8005fbc:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8005fbe:	2300      	movs	r3, #0
 8005fc0:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8005fc2:	683b      	ldr	r3, [r7, #0]
 8005fc4:	885b      	ldrh	r3, [r3, #2]
 8005fc6:	0a1b      	lsrs	r3, r3, #8
 8005fc8:	b29b      	uxth	r3, r3
 8005fca:	3b01      	subs	r3, #1
 8005fcc:	2b06      	cmp	r3, #6
 8005fce:	f200 8128 	bhi.w	8006222 <USBD_GetDescriptor+0x276>
 8005fd2:	a201      	add	r2, pc, #4	; (adr r2, 8005fd8 <USBD_GetDescriptor+0x2c>)
 8005fd4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fd8:	08005ff5 	.word	0x08005ff5
 8005fdc:	0800600d 	.word	0x0800600d
 8005fe0:	0800604d 	.word	0x0800604d
 8005fe4:	08006223 	.word	0x08006223
 8005fe8:	08006223 	.word	0x08006223
 8005fec:	080061c3 	.word	0x080061c3
 8005ff0:	080061ef 	.word	0x080061ef
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8005ffa:	681b      	ldr	r3, [r3, #0]
 8005ffc:	687a      	ldr	r2, [r7, #4]
 8005ffe:	7c12      	ldrb	r2, [r2, #16]
 8006000:	f107 0108 	add.w	r1, r7, #8
 8006004:	4610      	mov	r0, r2
 8006006:	4798      	blx	r3
 8006008:	60f8      	str	r0, [r7, #12]
      break;
 800600a:	e112      	b.n	8006232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	7c1b      	ldrb	r3, [r3, #16]
 8006010:	2b00      	cmp	r3, #0
 8006012:	d10d      	bne.n	8006030 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800601a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800601c:	f107 0208 	add.w	r2, r7, #8
 8006020:	4610      	mov	r0, r2
 8006022:	4798      	blx	r3
 8006024:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006026:	68fb      	ldr	r3, [r7, #12]
 8006028:	3301      	adds	r3, #1
 800602a:	2202      	movs	r2, #2
 800602c:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 800602e:	e100      	b.n	8006232 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006036:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006038:	f107 0208 	add.w	r2, r7, #8
 800603c:	4610      	mov	r0, r2
 800603e:	4798      	blx	r3
 8006040:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006042:	68fb      	ldr	r3, [r7, #12]
 8006044:	3301      	adds	r3, #1
 8006046:	2202      	movs	r2, #2
 8006048:	701a      	strb	r2, [r3, #0]
      break;
 800604a:	e0f2      	b.n	8006232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 800604c:	683b      	ldr	r3, [r7, #0]
 800604e:	885b      	ldrh	r3, [r3, #2]
 8006050:	b2db      	uxtb	r3, r3
 8006052:	2b05      	cmp	r3, #5
 8006054:	f200 80ac 	bhi.w	80061b0 <USBD_GetDescriptor+0x204>
 8006058:	a201      	add	r2, pc, #4	; (adr r2, 8006060 <USBD_GetDescriptor+0xb4>)
 800605a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800605e:	bf00      	nop
 8006060:	08006079 	.word	0x08006079
 8006064:	080060ad 	.word	0x080060ad
 8006068:	080060e1 	.word	0x080060e1
 800606c:	08006115 	.word	0x08006115
 8006070:	08006149 	.word	0x08006149
 8006074:	0800617d 	.word	0x0800617d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800607e:	685b      	ldr	r3, [r3, #4]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d00b      	beq.n	800609c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800608a:	685b      	ldr	r3, [r3, #4]
 800608c:	687a      	ldr	r2, [r7, #4]
 800608e:	7c12      	ldrb	r2, [r2, #16]
 8006090:	f107 0108 	add.w	r1, r7, #8
 8006094:	4610      	mov	r0, r2
 8006096:	4798      	blx	r3
 8006098:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800609a:	e091      	b.n	80061c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800609c:	6839      	ldr	r1, [r7, #0]
 800609e:	6878      	ldr	r0, [r7, #4]
 80060a0:	f000 facb 	bl	800663a <USBD_CtlError>
            err++;
 80060a4:	7afb      	ldrb	r3, [r7, #11]
 80060a6:	3301      	adds	r3, #1
 80060a8:	72fb      	strb	r3, [r7, #11]
          break;
 80060aa:	e089      	b.n	80061c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d00b      	beq.n	80060d0 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	687a      	ldr	r2, [r7, #4]
 80060c2:	7c12      	ldrb	r2, [r2, #16]
 80060c4:	f107 0108 	add.w	r1, r7, #8
 80060c8:	4610      	mov	r0, r2
 80060ca:	4798      	blx	r3
 80060cc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80060ce:	e077      	b.n	80061c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80060d0:	6839      	ldr	r1, [r7, #0]
 80060d2:	6878      	ldr	r0, [r7, #4]
 80060d4:	f000 fab1 	bl	800663a <USBD_CtlError>
            err++;
 80060d8:	7afb      	ldrb	r3, [r7, #11]
 80060da:	3301      	adds	r3, #1
 80060dc:	72fb      	strb	r3, [r7, #11]
          break;
 80060de:	e06f      	b.n	80061c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060e6:	68db      	ldr	r3, [r3, #12]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d00b      	beq.n	8006104 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	687a      	ldr	r2, [r7, #4]
 80060f6:	7c12      	ldrb	r2, [r2, #16]
 80060f8:	f107 0108 	add.w	r1, r7, #8
 80060fc:	4610      	mov	r0, r2
 80060fe:	4798      	blx	r3
 8006100:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006102:	e05d      	b.n	80061c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006104:	6839      	ldr	r1, [r7, #0]
 8006106:	6878      	ldr	r0, [r7, #4]
 8006108:	f000 fa97 	bl	800663a <USBD_CtlError>
            err++;
 800610c:	7afb      	ldrb	r3, [r7, #11]
 800610e:	3301      	adds	r3, #1
 8006110:	72fb      	strb	r3, [r7, #11]
          break;
 8006112:	e055      	b.n	80061c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800611a:	691b      	ldr	r3, [r3, #16]
 800611c:	2b00      	cmp	r3, #0
 800611e:	d00b      	beq.n	8006138 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006126:	691b      	ldr	r3, [r3, #16]
 8006128:	687a      	ldr	r2, [r7, #4]
 800612a:	7c12      	ldrb	r2, [r2, #16]
 800612c:	f107 0108 	add.w	r1, r7, #8
 8006130:	4610      	mov	r0, r2
 8006132:	4798      	blx	r3
 8006134:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006136:	e043      	b.n	80061c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006138:	6839      	ldr	r1, [r7, #0]
 800613a:	6878      	ldr	r0, [r7, #4]
 800613c:	f000 fa7d 	bl	800663a <USBD_CtlError>
            err++;
 8006140:	7afb      	ldrb	r3, [r7, #11]
 8006142:	3301      	adds	r3, #1
 8006144:	72fb      	strb	r3, [r7, #11]
          break;
 8006146:	e03b      	b.n	80061c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	2b00      	cmp	r3, #0
 8006152:	d00b      	beq.n	800616c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800615a:	695b      	ldr	r3, [r3, #20]
 800615c:	687a      	ldr	r2, [r7, #4]
 800615e:	7c12      	ldrb	r2, [r2, #16]
 8006160:	f107 0108 	add.w	r1, r7, #8
 8006164:	4610      	mov	r0, r2
 8006166:	4798      	blx	r3
 8006168:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800616a:	e029      	b.n	80061c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800616c:	6839      	ldr	r1, [r7, #0]
 800616e:	6878      	ldr	r0, [r7, #4]
 8006170:	f000 fa63 	bl	800663a <USBD_CtlError>
            err++;
 8006174:	7afb      	ldrb	r3, [r7, #11]
 8006176:	3301      	adds	r3, #1
 8006178:	72fb      	strb	r3, [r7, #11]
          break;
 800617a:	e021      	b.n	80061c0 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006182:	699b      	ldr	r3, [r3, #24]
 8006184:	2b00      	cmp	r3, #0
 8006186:	d00b      	beq.n	80061a0 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800618e:	699b      	ldr	r3, [r3, #24]
 8006190:	687a      	ldr	r2, [r7, #4]
 8006192:	7c12      	ldrb	r2, [r2, #16]
 8006194:	f107 0108 	add.w	r1, r7, #8
 8006198:	4610      	mov	r0, r2
 800619a:	4798      	blx	r3
 800619c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800619e:	e00f      	b.n	80061c0 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80061a0:	6839      	ldr	r1, [r7, #0]
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 fa49 	bl	800663a <USBD_CtlError>
            err++;
 80061a8:	7afb      	ldrb	r3, [r7, #11]
 80061aa:	3301      	adds	r3, #1
 80061ac:	72fb      	strb	r3, [r7, #11]
          break;
 80061ae:	e007      	b.n	80061c0 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 80061b0:	6839      	ldr	r1, [r7, #0]
 80061b2:	6878      	ldr	r0, [r7, #4]
 80061b4:	f000 fa41 	bl	800663a <USBD_CtlError>
          err++;
 80061b8:	7afb      	ldrb	r3, [r7, #11]
 80061ba:	3301      	adds	r3, #1
 80061bc:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 80061be:	bf00      	nop
      }
      break;
 80061c0:	e037      	b.n	8006232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	7c1b      	ldrb	r3, [r3, #16]
 80061c6:	2b00      	cmp	r3, #0
 80061c8:	d109      	bne.n	80061de <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061d0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80061d2:	f107 0208 	add.w	r2, r7, #8
 80061d6:	4610      	mov	r0, r2
 80061d8:	4798      	blx	r3
 80061da:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80061dc:	e029      	b.n	8006232 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80061de:	6839      	ldr	r1, [r7, #0]
 80061e0:	6878      	ldr	r0, [r7, #4]
 80061e2:	f000 fa2a 	bl	800663a <USBD_CtlError>
        err++;
 80061e6:	7afb      	ldrb	r3, [r7, #11]
 80061e8:	3301      	adds	r3, #1
 80061ea:	72fb      	strb	r3, [r7, #11]
      break;
 80061ec:	e021      	b.n	8006232 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	7c1b      	ldrb	r3, [r3, #16]
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d10d      	bne.n	8006212 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80061fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061fe:	f107 0208 	add.w	r2, r7, #8
 8006202:	4610      	mov	r0, r2
 8006204:	4798      	blx	r3
 8006206:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	3301      	adds	r3, #1
 800620c:	2207      	movs	r2, #7
 800620e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006210:	e00f      	b.n	8006232 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006212:	6839      	ldr	r1, [r7, #0]
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fa10 	bl	800663a <USBD_CtlError>
        err++;
 800621a:	7afb      	ldrb	r3, [r7, #11]
 800621c:	3301      	adds	r3, #1
 800621e:	72fb      	strb	r3, [r7, #11]
      break;
 8006220:	e007      	b.n	8006232 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006222:	6839      	ldr	r1, [r7, #0]
 8006224:	6878      	ldr	r0, [r7, #4]
 8006226:	f000 fa08 	bl	800663a <USBD_CtlError>
      err++;
 800622a:	7afb      	ldrb	r3, [r7, #11]
 800622c:	3301      	adds	r3, #1
 800622e:	72fb      	strb	r3, [r7, #11]
      break;
 8006230:	bf00      	nop
  }

  if (err != 0U)
 8006232:	7afb      	ldrb	r3, [r7, #11]
 8006234:	2b00      	cmp	r3, #0
 8006236:	d11e      	bne.n	8006276 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	88db      	ldrh	r3, [r3, #6]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d016      	beq.n	800626e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006240:	893b      	ldrh	r3, [r7, #8]
 8006242:	2b00      	cmp	r3, #0
 8006244:	d00e      	beq.n	8006264 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006246:	683b      	ldr	r3, [r7, #0]
 8006248:	88da      	ldrh	r2, [r3, #6]
 800624a:	893b      	ldrh	r3, [r7, #8]
 800624c:	4293      	cmp	r3, r2
 800624e:	bf28      	it	cs
 8006250:	4613      	movcs	r3, r2
 8006252:	b29b      	uxth	r3, r3
 8006254:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006256:	893b      	ldrh	r3, [r7, #8]
 8006258:	461a      	mov	r2, r3
 800625a:	68f9      	ldr	r1, [r7, #12]
 800625c:	6878      	ldr	r0, [r7, #4]
 800625e:	f000 fa5d 	bl	800671c <USBD_CtlSendData>
 8006262:	e009      	b.n	8006278 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006264:	6839      	ldr	r1, [r7, #0]
 8006266:	6878      	ldr	r0, [r7, #4]
 8006268:	f000 f9e7 	bl	800663a <USBD_CtlError>
 800626c:	e004      	b.n	8006278 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800626e:	6878      	ldr	r0, [r7, #4]
 8006270:	f000 fa91 	bl	8006796 <USBD_CtlSendStatus>
 8006274:	e000      	b.n	8006278 <USBD_GetDescriptor+0x2cc>
    return;
 8006276:	bf00      	nop
  }
}
 8006278:	3710      	adds	r7, #16
 800627a:	46bd      	mov	sp, r7
 800627c:	bd80      	pop	{r7, pc}
 800627e:	bf00      	nop

08006280 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b084      	sub	sp, #16
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800628a:	683b      	ldr	r3, [r7, #0]
 800628c:	889b      	ldrh	r3, [r3, #4]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d131      	bne.n	80062f6 <USBD_SetAddress+0x76>
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	88db      	ldrh	r3, [r3, #6]
 8006296:	2b00      	cmp	r3, #0
 8006298:	d12d      	bne.n	80062f6 <USBD_SetAddress+0x76>
 800629a:	683b      	ldr	r3, [r7, #0]
 800629c:	885b      	ldrh	r3, [r3, #2]
 800629e:	2b7f      	cmp	r3, #127	; 0x7f
 80062a0:	d829      	bhi.n	80062f6 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 80062a2:	683b      	ldr	r3, [r7, #0]
 80062a4:	885b      	ldrh	r3, [r3, #2]
 80062a6:	b2db      	uxtb	r3, r3
 80062a8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80062ac:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80062b4:	b2db      	uxtb	r3, r3
 80062b6:	2b03      	cmp	r3, #3
 80062b8:	d104      	bne.n	80062c4 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 80062ba:	6839      	ldr	r1, [r7, #0]
 80062bc:	6878      	ldr	r0, [r7, #4]
 80062be:	f000 f9bc 	bl	800663a <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062c2:	e01d      	b.n	8006300 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	7bfa      	ldrb	r2, [r7, #15]
 80062c8:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 80062cc:	7bfb      	ldrb	r3, [r7, #15]
 80062ce:	4619      	mov	r1, r3
 80062d0:	6878      	ldr	r0, [r7, #4]
 80062d2:	f000 fe0f 	bl	8006ef4 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 80062d6:	6878      	ldr	r0, [r7, #4]
 80062d8:	f000 fa5d 	bl	8006796 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 80062dc:	7bfb      	ldrb	r3, [r7, #15]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d004      	beq.n	80062ec <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	2202      	movs	r2, #2
 80062e6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062ea:	e009      	b.n	8006300 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2201      	movs	r2, #1
 80062f0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80062f4:	e004      	b.n	8006300 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 80062f6:	6839      	ldr	r1, [r7, #0]
 80062f8:	6878      	ldr	r0, [r7, #4]
 80062fa:	f000 f99e 	bl	800663a <USBD_CtlError>
  }
}
 80062fe:	bf00      	nop
 8006300:	bf00      	nop
 8006302:	3710      	adds	r7, #16
 8006304:	46bd      	mov	sp, r7
 8006306:	bd80      	pop	{r7, pc}

08006308 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006308:	b580      	push	{r7, lr}
 800630a:	b084      	sub	sp, #16
 800630c:	af00      	add	r7, sp, #0
 800630e:	6078      	str	r0, [r7, #4]
 8006310:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006312:	2300      	movs	r3, #0
 8006314:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8006316:	683b      	ldr	r3, [r7, #0]
 8006318:	885b      	ldrh	r3, [r3, #2]
 800631a:	b2da      	uxtb	r2, r3
 800631c:	4b4e      	ldr	r3, [pc, #312]	; (8006458 <USBD_SetConfig+0x150>)
 800631e:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8006320:	4b4d      	ldr	r3, [pc, #308]	; (8006458 <USBD_SetConfig+0x150>)
 8006322:	781b      	ldrb	r3, [r3, #0]
 8006324:	2b01      	cmp	r3, #1
 8006326:	d905      	bls.n	8006334 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8006328:	6839      	ldr	r1, [r7, #0]
 800632a:	6878      	ldr	r0, [r7, #4]
 800632c:	f000 f985 	bl	800663a <USBD_CtlError>
    return USBD_FAIL;
 8006330:	2303      	movs	r3, #3
 8006332:	e08c      	b.n	800644e <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800633a:	b2db      	uxtb	r3, r3
 800633c:	2b02      	cmp	r3, #2
 800633e:	d002      	beq.n	8006346 <USBD_SetConfig+0x3e>
 8006340:	2b03      	cmp	r3, #3
 8006342:	d029      	beq.n	8006398 <USBD_SetConfig+0x90>
 8006344:	e075      	b.n	8006432 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 8006346:	4b44      	ldr	r3, [pc, #272]	; (8006458 <USBD_SetConfig+0x150>)
 8006348:	781b      	ldrb	r3, [r3, #0]
 800634a:	2b00      	cmp	r3, #0
 800634c:	d020      	beq.n	8006390 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 800634e:	4b42      	ldr	r3, [pc, #264]	; (8006458 <USBD_SetConfig+0x150>)
 8006350:	781b      	ldrb	r3, [r3, #0]
 8006352:	461a      	mov	r2, r3
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8006358:	4b3f      	ldr	r3, [pc, #252]	; (8006458 <USBD_SetConfig+0x150>)
 800635a:	781b      	ldrb	r3, [r3, #0]
 800635c:	4619      	mov	r1, r3
 800635e:	6878      	ldr	r0, [r7, #4]
 8006360:	f7fe ffe7 	bl	8005332 <USBD_SetClassConfig>
 8006364:	4603      	mov	r3, r0
 8006366:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006368:	7bfb      	ldrb	r3, [r7, #15]
 800636a:	2b00      	cmp	r3, #0
 800636c:	d008      	beq.n	8006380 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800636e:	6839      	ldr	r1, [r7, #0]
 8006370:	6878      	ldr	r0, [r7, #4]
 8006372:	f000 f962 	bl	800663a <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2202      	movs	r2, #2
 800637a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800637e:	e065      	b.n	800644c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006380:	6878      	ldr	r0, [r7, #4]
 8006382:	f000 fa08 	bl	8006796 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2203      	movs	r2, #3
 800638a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800638e:	e05d      	b.n	800644c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006390:	6878      	ldr	r0, [r7, #4]
 8006392:	f000 fa00 	bl	8006796 <USBD_CtlSendStatus>
      break;
 8006396:	e059      	b.n	800644c <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006398:	4b2f      	ldr	r3, [pc, #188]	; (8006458 <USBD_SetConfig+0x150>)
 800639a:	781b      	ldrb	r3, [r3, #0]
 800639c:	2b00      	cmp	r3, #0
 800639e:	d112      	bne.n	80063c6 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2202      	movs	r2, #2
 80063a4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80063a8:	4b2b      	ldr	r3, [pc, #172]	; (8006458 <USBD_SetConfig+0x150>)
 80063aa:	781b      	ldrb	r3, [r3, #0]
 80063ac:	461a      	mov	r2, r3
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80063b2:	4b29      	ldr	r3, [pc, #164]	; (8006458 <USBD_SetConfig+0x150>)
 80063b4:	781b      	ldrb	r3, [r3, #0]
 80063b6:	4619      	mov	r1, r3
 80063b8:	6878      	ldr	r0, [r7, #4]
 80063ba:	f7fe ffd6 	bl	800536a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80063be:	6878      	ldr	r0, [r7, #4]
 80063c0:	f000 f9e9 	bl	8006796 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80063c4:	e042      	b.n	800644c <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80063c6:	4b24      	ldr	r3, [pc, #144]	; (8006458 <USBD_SetConfig+0x150>)
 80063c8:	781b      	ldrb	r3, [r3, #0]
 80063ca:	461a      	mov	r2, r3
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	685b      	ldr	r3, [r3, #4]
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d02a      	beq.n	800642a <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80063d4:	687b      	ldr	r3, [r7, #4]
 80063d6:	685b      	ldr	r3, [r3, #4]
 80063d8:	b2db      	uxtb	r3, r3
 80063da:	4619      	mov	r1, r3
 80063dc:	6878      	ldr	r0, [r7, #4]
 80063de:	f7fe ffc4 	bl	800536a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80063e2:	4b1d      	ldr	r3, [pc, #116]	; (8006458 <USBD_SetConfig+0x150>)
 80063e4:	781b      	ldrb	r3, [r3, #0]
 80063e6:	461a      	mov	r2, r3
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80063ec:	4b1a      	ldr	r3, [pc, #104]	; (8006458 <USBD_SetConfig+0x150>)
 80063ee:	781b      	ldrb	r3, [r3, #0]
 80063f0:	4619      	mov	r1, r3
 80063f2:	6878      	ldr	r0, [r7, #4]
 80063f4:	f7fe ff9d 	bl	8005332 <USBD_SetClassConfig>
 80063f8:	4603      	mov	r3, r0
 80063fa:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80063fc:	7bfb      	ldrb	r3, [r7, #15]
 80063fe:	2b00      	cmp	r3, #0
 8006400:	d00f      	beq.n	8006422 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8006402:	6839      	ldr	r1, [r7, #0]
 8006404:	6878      	ldr	r0, [r7, #4]
 8006406:	f000 f918 	bl	800663a <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	685b      	ldr	r3, [r3, #4]
 800640e:	b2db      	uxtb	r3, r3
 8006410:	4619      	mov	r1, r3
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7fe ffa9 	bl	800536a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2202      	movs	r2, #2
 800641c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8006420:	e014      	b.n	800644c <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006422:	6878      	ldr	r0, [r7, #4]
 8006424:	f000 f9b7 	bl	8006796 <USBD_CtlSendStatus>
      break;
 8006428:	e010      	b.n	800644c <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 800642a:	6878      	ldr	r0, [r7, #4]
 800642c:	f000 f9b3 	bl	8006796 <USBD_CtlSendStatus>
      break;
 8006430:	e00c      	b.n	800644c <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 8006432:	6839      	ldr	r1, [r7, #0]
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	f000 f900 	bl	800663a <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 800643a:	4b07      	ldr	r3, [pc, #28]	; (8006458 <USBD_SetConfig+0x150>)
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	4619      	mov	r1, r3
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7fe ff92 	bl	800536a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 8006446:	2303      	movs	r3, #3
 8006448:	73fb      	strb	r3, [r7, #15]
      break;
 800644a:	bf00      	nop
  }

  return ret;
 800644c:	7bfb      	ldrb	r3, [r7, #15]
}
 800644e:	4618      	mov	r0, r3
 8006450:	3710      	adds	r7, #16
 8006452:	46bd      	mov	sp, r7
 8006454:	bd80      	pop	{r7, pc}
 8006456:	bf00      	nop
 8006458:	20000200 	.word	0x20000200

0800645c <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
 8006464:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	88db      	ldrh	r3, [r3, #6]
 800646a:	2b01      	cmp	r3, #1
 800646c:	d004      	beq.n	8006478 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800646e:	6839      	ldr	r1, [r7, #0]
 8006470:	6878      	ldr	r0, [r7, #4]
 8006472:	f000 f8e2 	bl	800663a <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006476:	e023      	b.n	80064c0 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800647e:	b2db      	uxtb	r3, r3
 8006480:	2b02      	cmp	r3, #2
 8006482:	dc02      	bgt.n	800648a <USBD_GetConfig+0x2e>
 8006484:	2b00      	cmp	r3, #0
 8006486:	dc03      	bgt.n	8006490 <USBD_GetConfig+0x34>
 8006488:	e015      	b.n	80064b6 <USBD_GetConfig+0x5a>
 800648a:	2b03      	cmp	r3, #3
 800648c:	d00b      	beq.n	80064a6 <USBD_GetConfig+0x4a>
 800648e:	e012      	b.n	80064b6 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	3308      	adds	r3, #8
 800649a:	2201      	movs	r2, #1
 800649c:	4619      	mov	r1, r3
 800649e:	6878      	ldr	r0, [r7, #4]
 80064a0:	f000 f93c 	bl	800671c <USBD_CtlSendData>
        break;
 80064a4:	e00c      	b.n	80064c0 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	3304      	adds	r3, #4
 80064aa:	2201      	movs	r2, #1
 80064ac:	4619      	mov	r1, r3
 80064ae:	6878      	ldr	r0, [r7, #4]
 80064b0:	f000 f934 	bl	800671c <USBD_CtlSendData>
        break;
 80064b4:	e004      	b.n	80064c0 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80064b6:	6839      	ldr	r1, [r7, #0]
 80064b8:	6878      	ldr	r0, [r7, #4]
 80064ba:	f000 f8be 	bl	800663a <USBD_CtlError>
        break;
 80064be:	bf00      	nop
}
 80064c0:	bf00      	nop
 80064c2:	3708      	adds	r7, #8
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}

080064c8 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80064c8:	b580      	push	{r7, lr}
 80064ca:	b082      	sub	sp, #8
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	6078      	str	r0, [r7, #4]
 80064d0:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	3b01      	subs	r3, #1
 80064dc:	2b02      	cmp	r3, #2
 80064de:	d81e      	bhi.n	800651e <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80064e0:	683b      	ldr	r3, [r7, #0]
 80064e2:	88db      	ldrh	r3, [r3, #6]
 80064e4:	2b02      	cmp	r3, #2
 80064e6:	d004      	beq.n	80064f2 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80064e8:	6839      	ldr	r1, [r7, #0]
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f000 f8a5 	bl	800663a <USBD_CtlError>
        break;
 80064f0:	e01a      	b.n	8006528 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d005      	beq.n	800650e <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	68db      	ldr	r3, [r3, #12]
 8006506:	f043 0202 	orr.w	r2, r3, #2
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	330c      	adds	r3, #12
 8006512:	2202      	movs	r2, #2
 8006514:	4619      	mov	r1, r3
 8006516:	6878      	ldr	r0, [r7, #4]
 8006518:	f000 f900 	bl	800671c <USBD_CtlSendData>
      break;
 800651c:	e004      	b.n	8006528 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 800651e:	6839      	ldr	r1, [r7, #0]
 8006520:	6878      	ldr	r0, [r7, #4]
 8006522:	f000 f88a 	bl	800663a <USBD_CtlError>
      break;
 8006526:	bf00      	nop
  }
}
 8006528:	bf00      	nop
 800652a:	3708      	adds	r7, #8
 800652c:	46bd      	mov	sp, r7
 800652e:	bd80      	pop	{r7, pc}

08006530 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b082      	sub	sp, #8
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	885b      	ldrh	r3, [r3, #2]
 800653e:	2b01      	cmp	r3, #1
 8006540:	d107      	bne.n	8006552 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	2201      	movs	r2, #1
 8006546:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 800654a:	6878      	ldr	r0, [r7, #4]
 800654c:	f000 f923 	bl	8006796 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8006550:	e013      	b.n	800657a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 8006552:	683b      	ldr	r3, [r7, #0]
 8006554:	885b      	ldrh	r3, [r3, #2]
 8006556:	2b02      	cmp	r3, #2
 8006558:	d10b      	bne.n	8006572 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 800655a:	683b      	ldr	r3, [r7, #0]
 800655c:	889b      	ldrh	r3, [r3, #4]
 800655e:	0a1b      	lsrs	r3, r3, #8
 8006560:	b29b      	uxth	r3, r3
 8006562:	b2da      	uxtb	r2, r3
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800656a:	6878      	ldr	r0, [r7, #4]
 800656c:	f000 f913 	bl	8006796 <USBD_CtlSendStatus>
}
 8006570:	e003      	b.n	800657a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006572:	6839      	ldr	r1, [r7, #0]
 8006574:	6878      	ldr	r0, [r7, #4]
 8006576:	f000 f860 	bl	800663a <USBD_CtlError>
}
 800657a:	bf00      	nop
 800657c:	3708      	adds	r7, #8
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}

08006582 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006582:	b580      	push	{r7, lr}
 8006584:	b082      	sub	sp, #8
 8006586:	af00      	add	r7, sp, #0
 8006588:	6078      	str	r0, [r7, #4]
 800658a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006592:	b2db      	uxtb	r3, r3
 8006594:	3b01      	subs	r3, #1
 8006596:	2b02      	cmp	r3, #2
 8006598:	d80b      	bhi.n	80065b2 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800659a:	683b      	ldr	r3, [r7, #0]
 800659c:	885b      	ldrh	r3, [r3, #2]
 800659e:	2b01      	cmp	r3, #1
 80065a0:	d10c      	bne.n	80065bc <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2200      	movs	r2, #0
 80065a6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80065aa:	6878      	ldr	r0, [r7, #4]
 80065ac:	f000 f8f3 	bl	8006796 <USBD_CtlSendStatus>
      }
      break;
 80065b0:	e004      	b.n	80065bc <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80065b2:	6839      	ldr	r1, [r7, #0]
 80065b4:	6878      	ldr	r0, [r7, #4]
 80065b6:	f000 f840 	bl	800663a <USBD_CtlError>
      break;
 80065ba:	e000      	b.n	80065be <USBD_ClrFeature+0x3c>
      break;
 80065bc:	bf00      	nop
  }
}
 80065be:	bf00      	nop
 80065c0:	3708      	adds	r7, #8
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}

080065c6 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80065c6:	b580      	push	{r7, lr}
 80065c8:	b084      	sub	sp, #16
 80065ca:	af00      	add	r7, sp, #0
 80065cc:	6078      	str	r0, [r7, #4]
 80065ce:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	781a      	ldrb	r2, [r3, #0]
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	3301      	adds	r3, #1
 80065e0:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	781a      	ldrb	r2, [r3, #0]
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80065ea:	68fb      	ldr	r3, [r7, #12]
 80065ec:	3301      	adds	r3, #1
 80065ee:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80065f0:	68f8      	ldr	r0, [r7, #12]
 80065f2:	f7ff fa41 	bl	8005a78 <SWAPBYTE>
 80065f6:	4603      	mov	r3, r0
 80065f8:	461a      	mov	r2, r3
 80065fa:	687b      	ldr	r3, [r7, #4]
 80065fc:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	3301      	adds	r3, #1
 8006602:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8006604:	68fb      	ldr	r3, [r7, #12]
 8006606:	3301      	adds	r3, #1
 8006608:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800660a:	68f8      	ldr	r0, [r7, #12]
 800660c:	f7ff fa34 	bl	8005a78 <SWAPBYTE>
 8006610:	4603      	mov	r3, r0
 8006612:	461a      	mov	r2, r3
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	3301      	adds	r3, #1
 800661c:	60fb      	str	r3, [r7, #12]
  pbuff++;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	3301      	adds	r3, #1
 8006622:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 8006624:	68f8      	ldr	r0, [r7, #12]
 8006626:	f7ff fa27 	bl	8005a78 <SWAPBYTE>
 800662a:	4603      	mov	r3, r0
 800662c:	461a      	mov	r2, r3
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	80da      	strh	r2, [r3, #6]
}
 8006632:	bf00      	nop
 8006634:	3710      	adds	r7, #16
 8006636:	46bd      	mov	sp, r7
 8006638:	bd80      	pop	{r7, pc}

0800663a <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800663a:	b580      	push	{r7, lr}
 800663c:	b082      	sub	sp, #8
 800663e:	af00      	add	r7, sp, #0
 8006640:	6078      	str	r0, [r7, #4]
 8006642:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 8006644:	2180      	movs	r1, #128	; 0x80
 8006646:	6878      	ldr	r0, [r7, #4]
 8006648:	f000 fbea 	bl	8006e20 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 800664c:	2100      	movs	r1, #0
 800664e:	6878      	ldr	r0, [r7, #4]
 8006650:	f000 fbe6 	bl	8006e20 <USBD_LL_StallEP>
}
 8006654:	bf00      	nop
 8006656:	3708      	adds	r7, #8
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b086      	sub	sp, #24
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006668:	2300      	movs	r3, #0
 800666a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800666c:	68fb      	ldr	r3, [r7, #12]
 800666e:	2b00      	cmp	r3, #0
 8006670:	d036      	beq.n	80066e0 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006676:	6938      	ldr	r0, [r7, #16]
 8006678:	f000 f836 	bl	80066e8 <USBD_GetLen>
 800667c:	4603      	mov	r3, r0
 800667e:	3301      	adds	r3, #1
 8006680:	b29b      	uxth	r3, r3
 8006682:	005b      	lsls	r3, r3, #1
 8006684:	b29a      	uxth	r2, r3
 8006686:	687b      	ldr	r3, [r7, #4]
 8006688:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800668a:	7dfb      	ldrb	r3, [r7, #23]
 800668c:	68ba      	ldr	r2, [r7, #8]
 800668e:	4413      	add	r3, r2
 8006690:	687a      	ldr	r2, [r7, #4]
 8006692:	7812      	ldrb	r2, [r2, #0]
 8006694:	701a      	strb	r2, [r3, #0]
  idx++;
 8006696:	7dfb      	ldrb	r3, [r7, #23]
 8006698:	3301      	adds	r3, #1
 800669a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800669c:	7dfb      	ldrb	r3, [r7, #23]
 800669e:	68ba      	ldr	r2, [r7, #8]
 80066a0:	4413      	add	r3, r2
 80066a2:	2203      	movs	r2, #3
 80066a4:	701a      	strb	r2, [r3, #0]
  idx++;
 80066a6:	7dfb      	ldrb	r3, [r7, #23]
 80066a8:	3301      	adds	r3, #1
 80066aa:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80066ac:	e013      	b.n	80066d6 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80066ae:	7dfb      	ldrb	r3, [r7, #23]
 80066b0:	68ba      	ldr	r2, [r7, #8]
 80066b2:	4413      	add	r3, r2
 80066b4:	693a      	ldr	r2, [r7, #16]
 80066b6:	7812      	ldrb	r2, [r2, #0]
 80066b8:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	3301      	adds	r3, #1
 80066be:	613b      	str	r3, [r7, #16]
    idx++;
 80066c0:	7dfb      	ldrb	r3, [r7, #23]
 80066c2:	3301      	adds	r3, #1
 80066c4:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80066c6:	7dfb      	ldrb	r3, [r7, #23]
 80066c8:	68ba      	ldr	r2, [r7, #8]
 80066ca:	4413      	add	r3, r2
 80066cc:	2200      	movs	r2, #0
 80066ce:	701a      	strb	r2, [r3, #0]
    idx++;
 80066d0:	7dfb      	ldrb	r3, [r7, #23]
 80066d2:	3301      	adds	r3, #1
 80066d4:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80066d6:	693b      	ldr	r3, [r7, #16]
 80066d8:	781b      	ldrb	r3, [r3, #0]
 80066da:	2b00      	cmp	r3, #0
 80066dc:	d1e7      	bne.n	80066ae <USBD_GetString+0x52>
 80066de:	e000      	b.n	80066e2 <USBD_GetString+0x86>
    return;
 80066e0:	bf00      	nop
  }
}
 80066e2:	3718      	adds	r7, #24
 80066e4:	46bd      	mov	sp, r7
 80066e6:	bd80      	pop	{r7, pc}

080066e8 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80066e8:	b480      	push	{r7}
 80066ea:	b085      	sub	sp, #20
 80066ec:	af00      	add	r7, sp, #0
 80066ee:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80066f0:	2300      	movs	r3, #0
 80066f2:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80066f8:	e005      	b.n	8006706 <USBD_GetLen+0x1e>
  {
    len++;
 80066fa:	7bfb      	ldrb	r3, [r7, #15]
 80066fc:	3301      	adds	r3, #1
 80066fe:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8006700:	68bb      	ldr	r3, [r7, #8]
 8006702:	3301      	adds	r3, #1
 8006704:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 8006706:	68bb      	ldr	r3, [r7, #8]
 8006708:	781b      	ldrb	r3, [r3, #0]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d1f5      	bne.n	80066fa <USBD_GetLen+0x12>
  }

  return len;
 800670e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006710:	4618      	mov	r0, r3
 8006712:	3714      	adds	r7, #20
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	b084      	sub	sp, #16
 8006720:	af00      	add	r7, sp, #0
 8006722:	60f8      	str	r0, [r7, #12]
 8006724:	60b9      	str	r1, [r7, #8]
 8006726:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8006728:	68fb      	ldr	r3, [r7, #12]
 800672a:	2202      	movs	r2, #2
 800672c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	687a      	ldr	r2, [r7, #4]
 8006734:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	687a      	ldr	r2, [r7, #4]
 800673a:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800673c:	687b      	ldr	r3, [r7, #4]
 800673e:	68ba      	ldr	r2, [r7, #8]
 8006740:	2100      	movs	r1, #0
 8006742:	68f8      	ldr	r0, [r7, #12]
 8006744:	f000 fbf5 	bl	8006f32 <USBD_LL_Transmit>

  return USBD_OK;
 8006748:	2300      	movs	r3, #0
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 8006752:	b580      	push	{r7, lr}
 8006754:	b084      	sub	sp, #16
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	68ba      	ldr	r2, [r7, #8]
 8006762:	2100      	movs	r1, #0
 8006764:	68f8      	ldr	r0, [r7, #12]
 8006766:	f000 fbe4 	bl	8006f32 <USBD_LL_Transmit>

  return USBD_OK;
 800676a:	2300      	movs	r3, #0
}
 800676c:	4618      	mov	r0, r3
 800676e:	3710      	adds	r7, #16
 8006770:	46bd      	mov	sp, r7
 8006772:	bd80      	pop	{r7, pc}

08006774 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	60f8      	str	r0, [r7, #12]
 800677c:	60b9      	str	r1, [r7, #8]
 800677e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	68ba      	ldr	r2, [r7, #8]
 8006784:	2100      	movs	r1, #0
 8006786:	68f8      	ldr	r0, [r7, #12]
 8006788:	f000 fbf4 	bl	8006f74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3710      	adds	r7, #16
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006796:	b580      	push	{r7, lr}
 8006798:	b082      	sub	sp, #8
 800679a:	af00      	add	r7, sp, #0
 800679c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	2204      	movs	r2, #4
 80067a2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 80067a6:	2300      	movs	r3, #0
 80067a8:	2200      	movs	r2, #0
 80067aa:	2100      	movs	r1, #0
 80067ac:	6878      	ldr	r0, [r7, #4]
 80067ae:	f000 fbc0 	bl	8006f32 <USBD_LL_Transmit>

  return USBD_OK;
 80067b2:	2300      	movs	r3, #0
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	2205      	movs	r2, #5
 80067c8:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80067cc:	2300      	movs	r3, #0
 80067ce:	2200      	movs	r2, #0
 80067d0:	2100      	movs	r1, #0
 80067d2:	6878      	ldr	r0, [r7, #4]
 80067d4:	f000 fbce 	bl	8006f74 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80067d8:	2300      	movs	r3, #0
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80067e8:	2200      	movs	r2, #0
 80067ea:	490e      	ldr	r1, [pc, #56]	; (8006824 <MX_USB_DEVICE_Init+0x40>)
 80067ec:	480e      	ldr	r0, [pc, #56]	; (8006828 <MX_USB_DEVICE_Init+0x44>)
 80067ee:	f7fe fd23 	bl	8005238 <USBD_Init>
 80067f2:	4603      	mov	r3, r0
 80067f4:	2b00      	cmp	r3, #0
 80067f6:	d001      	beq.n	80067fc <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80067f8:	f7fa f940 	bl	8000a7c <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80067fc:	490b      	ldr	r1, [pc, #44]	; (800682c <MX_USB_DEVICE_Init+0x48>)
 80067fe:	480a      	ldr	r0, [pc, #40]	; (8006828 <MX_USB_DEVICE_Init+0x44>)
 8006800:	f7fe fd4a 	bl	8005298 <USBD_RegisterClass>
 8006804:	4603      	mov	r3, r0
 8006806:	2b00      	cmp	r3, #0
 8006808:	d001      	beq.n	800680e <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800680a:	f7fa f937 	bl	8000a7c <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 800680e:	4806      	ldr	r0, [pc, #24]	; (8006828 <MX_USB_DEVICE_Init+0x44>)
 8006810:	f7fe fd78 	bl	8005304 <USBD_Start>
 8006814:	4603      	mov	r3, r0
 8006816:	2b00      	cmp	r3, #0
 8006818:	d001      	beq.n	800681e <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 800681a:	f7fa f92f 	bl	8000a7c <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 800681e:	bf00      	nop
 8006820:	bd80      	pop	{r7, pc}
 8006822:	bf00      	nop
 8006824:	20000100 	.word	0x20000100
 8006828:	20000204 	.word	0x20000204
 800682c:	2000004c 	.word	0x2000004c

08006830 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006830:	b480      	push	{r7}
 8006832:	b083      	sub	sp, #12
 8006834:	af00      	add	r7, sp, #0
 8006836:	4603      	mov	r3, r0
 8006838:	6039      	str	r1, [r7, #0]
 800683a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	2212      	movs	r2, #18
 8006840:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006842:	4b03      	ldr	r3, [pc, #12]	; (8006850 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006844:	4618      	mov	r0, r3
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr
 8006850:	2000011c 	.word	0x2000011c

08006854 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006854:	b480      	push	{r7}
 8006856:	b083      	sub	sp, #12
 8006858:	af00      	add	r7, sp, #0
 800685a:	4603      	mov	r3, r0
 800685c:	6039      	str	r1, [r7, #0]
 800685e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006860:	683b      	ldr	r3, [r7, #0]
 8006862:	2204      	movs	r2, #4
 8006864:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006866:	4b03      	ldr	r3, [pc, #12]	; (8006874 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006868:	4618      	mov	r0, r3
 800686a:	370c      	adds	r7, #12
 800686c:	46bd      	mov	sp, r7
 800686e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006872:	4770      	bx	lr
 8006874:	20000130 	.word	0x20000130

08006878 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006878:	b580      	push	{r7, lr}
 800687a:	b082      	sub	sp, #8
 800687c:	af00      	add	r7, sp, #0
 800687e:	4603      	mov	r3, r0
 8006880:	6039      	str	r1, [r7, #0]
 8006882:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006884:	79fb      	ldrb	r3, [r7, #7]
 8006886:	2b00      	cmp	r3, #0
 8006888:	d105      	bne.n	8006896 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800688a:	683a      	ldr	r2, [r7, #0]
 800688c:	4907      	ldr	r1, [pc, #28]	; (80068ac <USBD_FS_ProductStrDescriptor+0x34>)
 800688e:	4808      	ldr	r0, [pc, #32]	; (80068b0 <USBD_FS_ProductStrDescriptor+0x38>)
 8006890:	f7ff fee4 	bl	800665c <USBD_GetString>
 8006894:	e004      	b.n	80068a0 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006896:	683a      	ldr	r2, [r7, #0]
 8006898:	4904      	ldr	r1, [pc, #16]	; (80068ac <USBD_FS_ProductStrDescriptor+0x34>)
 800689a:	4805      	ldr	r0, [pc, #20]	; (80068b0 <USBD_FS_ProductStrDescriptor+0x38>)
 800689c:	f7ff fede 	bl	800665c <USBD_GetString>
  }
  return USBD_StrDesc;
 80068a0:	4b02      	ldr	r3, [pc, #8]	; (80068ac <USBD_FS_ProductStrDescriptor+0x34>)
}
 80068a2:	4618      	mov	r0, r3
 80068a4:	3708      	adds	r7, #8
 80068a6:	46bd      	mov	sp, r7
 80068a8:	bd80      	pop	{r7, pc}
 80068aa:	bf00      	nop
 80068ac:	200004e0 	.word	0x200004e0
 80068b0:	080070b0 	.word	0x080070b0

080068b4 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068b4:	b580      	push	{r7, lr}
 80068b6:	b082      	sub	sp, #8
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	4603      	mov	r3, r0
 80068bc:	6039      	str	r1, [r7, #0]
 80068be:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80068c0:	683a      	ldr	r2, [r7, #0]
 80068c2:	4904      	ldr	r1, [pc, #16]	; (80068d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80068c4:	4804      	ldr	r0, [pc, #16]	; (80068d8 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80068c6:	f7ff fec9 	bl	800665c <USBD_GetString>
  return USBD_StrDesc;
 80068ca:	4b02      	ldr	r3, [pc, #8]	; (80068d4 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80068cc:	4618      	mov	r0, r3
 80068ce:	3708      	adds	r7, #8
 80068d0:	46bd      	mov	sp, r7
 80068d2:	bd80      	pop	{r7, pc}
 80068d4:	200004e0 	.word	0x200004e0
 80068d8:	080070c8 	.word	0x080070c8

080068dc <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80068dc:	b580      	push	{r7, lr}
 80068de:	b082      	sub	sp, #8
 80068e0:	af00      	add	r7, sp, #0
 80068e2:	4603      	mov	r3, r0
 80068e4:	6039      	str	r1, [r7, #0]
 80068e6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80068e8:	683b      	ldr	r3, [r7, #0]
 80068ea:	221a      	movs	r2, #26
 80068ec:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80068ee:	f000 f843 	bl	8006978 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80068f2:	4b02      	ldr	r3, [pc, #8]	; (80068fc <USBD_FS_SerialStrDescriptor+0x20>)
}
 80068f4:	4618      	mov	r0, r3
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}
 80068fc:	20000134 	.word	0x20000134

08006900 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006900:	b580      	push	{r7, lr}
 8006902:	b082      	sub	sp, #8
 8006904:	af00      	add	r7, sp, #0
 8006906:	4603      	mov	r3, r0
 8006908:	6039      	str	r1, [r7, #0]
 800690a:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 800690c:	79fb      	ldrb	r3, [r7, #7]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d105      	bne.n	800691e <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006912:	683a      	ldr	r2, [r7, #0]
 8006914:	4907      	ldr	r1, [pc, #28]	; (8006934 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006916:	4808      	ldr	r0, [pc, #32]	; (8006938 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006918:	f7ff fea0 	bl	800665c <USBD_GetString>
 800691c:	e004      	b.n	8006928 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800691e:	683a      	ldr	r2, [r7, #0]
 8006920:	4904      	ldr	r1, [pc, #16]	; (8006934 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006922:	4805      	ldr	r0, [pc, #20]	; (8006938 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006924:	f7ff fe9a 	bl	800665c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006928:	4b02      	ldr	r3, [pc, #8]	; (8006934 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 800692a:	4618      	mov	r0, r3
 800692c:	3708      	adds	r7, #8
 800692e:	46bd      	mov	sp, r7
 8006930:	bd80      	pop	{r7, pc}
 8006932:	bf00      	nop
 8006934:	200004e0 	.word	0x200004e0
 8006938:	080070dc 	.word	0x080070dc

0800693c <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800693c:	b580      	push	{r7, lr}
 800693e:	b082      	sub	sp, #8
 8006940:	af00      	add	r7, sp, #0
 8006942:	4603      	mov	r3, r0
 8006944:	6039      	str	r1, [r7, #0]
 8006946:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006948:	79fb      	ldrb	r3, [r7, #7]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d105      	bne.n	800695a <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800694e:	683a      	ldr	r2, [r7, #0]
 8006950:	4907      	ldr	r1, [pc, #28]	; (8006970 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006952:	4808      	ldr	r0, [pc, #32]	; (8006974 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006954:	f7ff fe82 	bl	800665c <USBD_GetString>
 8006958:	e004      	b.n	8006964 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 800695a:	683a      	ldr	r2, [r7, #0]
 800695c:	4904      	ldr	r1, [pc, #16]	; (8006970 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800695e:	4805      	ldr	r0, [pc, #20]	; (8006974 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006960:	f7ff fe7c 	bl	800665c <USBD_GetString>
  }
  return USBD_StrDesc;
 8006964:	4b02      	ldr	r3, [pc, #8]	; (8006970 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006966:	4618      	mov	r0, r3
 8006968:	3708      	adds	r7, #8
 800696a:	46bd      	mov	sp, r7
 800696c:	bd80      	pop	{r7, pc}
 800696e:	bf00      	nop
 8006970:	200004e0 	.word	0x200004e0
 8006974:	080070e8 	.word	0x080070e8

08006978 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006978:	b580      	push	{r7, lr}
 800697a:	b084      	sub	sp, #16
 800697c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 800697e:	4b0f      	ldr	r3, [pc, #60]	; (80069bc <Get_SerialNum+0x44>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006984:	4b0e      	ldr	r3, [pc, #56]	; (80069c0 <Get_SerialNum+0x48>)
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 800698a:	4b0e      	ldr	r3, [pc, #56]	; (80069c4 <Get_SerialNum+0x4c>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006990:	68fa      	ldr	r2, [r7, #12]
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	4413      	add	r3, r2
 8006996:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d009      	beq.n	80069b2 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 800699e:	2208      	movs	r2, #8
 80069a0:	4909      	ldr	r1, [pc, #36]	; (80069c8 <Get_SerialNum+0x50>)
 80069a2:	68f8      	ldr	r0, [r7, #12]
 80069a4:	f000 f814 	bl	80069d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80069a8:	2204      	movs	r2, #4
 80069aa:	4908      	ldr	r1, [pc, #32]	; (80069cc <Get_SerialNum+0x54>)
 80069ac:	68b8      	ldr	r0, [r7, #8]
 80069ae:	f000 f80f 	bl	80069d0 <IntToUnicode>
  }
}
 80069b2:	bf00      	nop
 80069b4:	3710      	adds	r7, #16
 80069b6:	46bd      	mov	sp, r7
 80069b8:	bd80      	pop	{r7, pc}
 80069ba:	bf00      	nop
 80069bc:	1fff7a10 	.word	0x1fff7a10
 80069c0:	1fff7a14 	.word	0x1fff7a14
 80069c4:	1fff7a18 	.word	0x1fff7a18
 80069c8:	20000136 	.word	0x20000136
 80069cc:	20000146 	.word	0x20000146

080069d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80069d0:	b480      	push	{r7}
 80069d2:	b087      	sub	sp, #28
 80069d4:	af00      	add	r7, sp, #0
 80069d6:	60f8      	str	r0, [r7, #12]
 80069d8:	60b9      	str	r1, [r7, #8]
 80069da:	4613      	mov	r3, r2
 80069dc:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80069de:	2300      	movs	r3, #0
 80069e0:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80069e2:	2300      	movs	r3, #0
 80069e4:	75fb      	strb	r3, [r7, #23]
 80069e6:	e027      	b.n	8006a38 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	0f1b      	lsrs	r3, r3, #28
 80069ec:	2b09      	cmp	r3, #9
 80069ee:	d80b      	bhi.n	8006a08 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	0f1b      	lsrs	r3, r3, #28
 80069f4:	b2da      	uxtb	r2, r3
 80069f6:	7dfb      	ldrb	r3, [r7, #23]
 80069f8:	005b      	lsls	r3, r3, #1
 80069fa:	4619      	mov	r1, r3
 80069fc:	68bb      	ldr	r3, [r7, #8]
 80069fe:	440b      	add	r3, r1
 8006a00:	3230      	adds	r2, #48	; 0x30
 8006a02:	b2d2      	uxtb	r2, r2
 8006a04:	701a      	strb	r2, [r3, #0]
 8006a06:	e00a      	b.n	8006a1e <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006a08:	68fb      	ldr	r3, [r7, #12]
 8006a0a:	0f1b      	lsrs	r3, r3, #28
 8006a0c:	b2da      	uxtb	r2, r3
 8006a0e:	7dfb      	ldrb	r3, [r7, #23]
 8006a10:	005b      	lsls	r3, r3, #1
 8006a12:	4619      	mov	r1, r3
 8006a14:	68bb      	ldr	r3, [r7, #8]
 8006a16:	440b      	add	r3, r1
 8006a18:	3237      	adds	r2, #55	; 0x37
 8006a1a:	b2d2      	uxtb	r2, r2
 8006a1c:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006a1e:	68fb      	ldr	r3, [r7, #12]
 8006a20:	011b      	lsls	r3, r3, #4
 8006a22:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006a24:	7dfb      	ldrb	r3, [r7, #23]
 8006a26:	005b      	lsls	r3, r3, #1
 8006a28:	3301      	adds	r3, #1
 8006a2a:	68ba      	ldr	r2, [r7, #8]
 8006a2c:	4413      	add	r3, r2
 8006a2e:	2200      	movs	r2, #0
 8006a30:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006a32:	7dfb      	ldrb	r3, [r7, #23]
 8006a34:	3301      	adds	r3, #1
 8006a36:	75fb      	strb	r3, [r7, #23]
 8006a38:	7dfa      	ldrb	r2, [r7, #23]
 8006a3a:	79fb      	ldrb	r3, [r7, #7]
 8006a3c:	429a      	cmp	r2, r3
 8006a3e:	d3d3      	bcc.n	80069e8 <IntToUnicode+0x18>
  }
}
 8006a40:	bf00      	nop
 8006a42:	bf00      	nop
 8006a44:	371c      	adds	r7, #28
 8006a46:	46bd      	mov	sp, r7
 8006a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a4c:	4770      	bx	lr
	...

08006a50 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b08a      	sub	sp, #40	; 0x28
 8006a54:	af00      	add	r7, sp, #0
 8006a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006a58:	f107 0314 	add.w	r3, r7, #20
 8006a5c:	2200      	movs	r2, #0
 8006a5e:	601a      	str	r2, [r3, #0]
 8006a60:	605a      	str	r2, [r3, #4]
 8006a62:	609a      	str	r2, [r3, #8]
 8006a64:	60da      	str	r2, [r3, #12]
 8006a66:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006a68:	687b      	ldr	r3, [r7, #4]
 8006a6a:	681b      	ldr	r3, [r3, #0]
 8006a6c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006a70:	d13a      	bne.n	8006ae8 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a72:	2300      	movs	r3, #0
 8006a74:	613b      	str	r3, [r7, #16]
 8006a76:	4b1e      	ldr	r3, [pc, #120]	; (8006af0 <HAL_PCD_MspInit+0xa0>)
 8006a78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a7a:	4a1d      	ldr	r2, [pc, #116]	; (8006af0 <HAL_PCD_MspInit+0xa0>)
 8006a7c:	f043 0301 	orr.w	r3, r3, #1
 8006a80:	6313      	str	r3, [r2, #48]	; 0x30
 8006a82:	4b1b      	ldr	r3, [pc, #108]	; (8006af0 <HAL_PCD_MspInit+0xa0>)
 8006a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a86:	f003 0301 	and.w	r3, r3, #1
 8006a8a:	613b      	str	r3, [r7, #16]
 8006a8c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006a8e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006a92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006a94:	2302      	movs	r3, #2
 8006a96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a98:	2300      	movs	r3, #0
 8006a9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006a9c:	2303      	movs	r3, #3
 8006a9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006aa0:	230a      	movs	r3, #10
 8006aa2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006aa4:	f107 0314 	add.w	r3, r7, #20
 8006aa8:	4619      	mov	r1, r3
 8006aaa:	4812      	ldr	r0, [pc, #72]	; (8006af4 <HAL_PCD_MspInit+0xa4>)
 8006aac:	f7fa fcd2 	bl	8001454 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006ab0:	4b0f      	ldr	r3, [pc, #60]	; (8006af0 <HAL_PCD_MspInit+0xa0>)
 8006ab2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006ab4:	4a0e      	ldr	r2, [pc, #56]	; (8006af0 <HAL_PCD_MspInit+0xa0>)
 8006ab6:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006aba:	6353      	str	r3, [r2, #52]	; 0x34
 8006abc:	2300      	movs	r3, #0
 8006abe:	60fb      	str	r3, [r7, #12]
 8006ac0:	4b0b      	ldr	r3, [pc, #44]	; (8006af0 <HAL_PCD_MspInit+0xa0>)
 8006ac2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ac4:	4a0a      	ldr	r2, [pc, #40]	; (8006af0 <HAL_PCD_MspInit+0xa0>)
 8006ac6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006aca:	6453      	str	r3, [r2, #68]	; 0x44
 8006acc:	4b08      	ldr	r3, [pc, #32]	; (8006af0 <HAL_PCD_MspInit+0xa0>)
 8006ace:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ad0:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006ad4:	60fb      	str	r3, [r7, #12]
 8006ad6:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006ad8:	2200      	movs	r2, #0
 8006ada:	2100      	movs	r1, #0
 8006adc:	2043      	movs	r0, #67	; 0x43
 8006ade:	f7fa fc82 	bl	80013e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006ae2:	2043      	movs	r0, #67	; 0x43
 8006ae4:	f7fa fc9b 	bl	800141e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006ae8:	bf00      	nop
 8006aea:	3728      	adds	r7, #40	; 0x28
 8006aec:	46bd      	mov	sp, r7
 8006aee:	bd80      	pop	{r7, pc}
 8006af0:	40023800 	.word	0x40023800
 8006af4:	40020000 	.word	0x40020000

08006af8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b082      	sub	sp, #8
 8006afc:	af00      	add	r7, sp, #0
 8006afe:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006b0c:	4619      	mov	r1, r3
 8006b0e:	4610      	mov	r0, r2
 8006b10:	f7fe fc45 	bl	800539e <USBD_LL_SetupStage>
}
 8006b14:	bf00      	nop
 8006b16:	3708      	adds	r7, #8
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	bd80      	pop	{r7, pc}

08006b1c <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	460b      	mov	r3, r1
 8006b26:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006b2e:	78fa      	ldrb	r2, [r7, #3]
 8006b30:	6879      	ldr	r1, [r7, #4]
 8006b32:	4613      	mov	r3, r2
 8006b34:	00db      	lsls	r3, r3, #3
 8006b36:	4413      	add	r3, r2
 8006b38:	009b      	lsls	r3, r3, #2
 8006b3a:	440b      	add	r3, r1
 8006b3c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006b40:	681a      	ldr	r2, [r3, #0]
 8006b42:	78fb      	ldrb	r3, [r7, #3]
 8006b44:	4619      	mov	r1, r3
 8006b46:	f7fe fc7f 	bl	8005448 <USBD_LL_DataOutStage>
}
 8006b4a:	bf00      	nop
 8006b4c:	3708      	adds	r7, #8
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	bd80      	pop	{r7, pc}

08006b52 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b52:	b580      	push	{r7, lr}
 8006b54:	b082      	sub	sp, #8
 8006b56:	af00      	add	r7, sp, #0
 8006b58:	6078      	str	r0, [r7, #4]
 8006b5a:	460b      	mov	r3, r1
 8006b5c:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006b64:	78fa      	ldrb	r2, [r7, #3]
 8006b66:	6879      	ldr	r1, [r7, #4]
 8006b68:	4613      	mov	r3, r2
 8006b6a:	00db      	lsls	r3, r3, #3
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	440b      	add	r3, r1
 8006b72:	334c      	adds	r3, #76	; 0x4c
 8006b74:	681a      	ldr	r2, [r3, #0]
 8006b76:	78fb      	ldrb	r3, [r7, #3]
 8006b78:	4619      	mov	r1, r3
 8006b7a:	f7fe fd18 	bl	80055ae <USBD_LL_DataInStage>
}
 8006b7e:	bf00      	nop
 8006b80:	3708      	adds	r7, #8
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}

08006b86 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006b86:	b580      	push	{r7, lr}
 8006b88:	b082      	sub	sp, #8
 8006b8a:	af00      	add	r7, sp, #0
 8006b8c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006b94:	4618      	mov	r0, r3
 8006b96:	f7fe fe4c 	bl	8005832 <USBD_LL_SOF>
}
 8006b9a:	bf00      	nop
 8006b9c:	3708      	adds	r7, #8
 8006b9e:	46bd      	mov	sp, r7
 8006ba0:	bd80      	pop	{r7, pc}

08006ba2 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ba2:	b580      	push	{r7, lr}
 8006ba4:	b084      	sub	sp, #16
 8006ba6:	af00      	add	r7, sp, #0
 8006ba8:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006baa:	2301      	movs	r3, #1
 8006bac:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	68db      	ldr	r3, [r3, #12]
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d001      	beq.n	8006bba <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006bb6:	f7f9 ff61 	bl	8000a7c <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006bc0:	7bfa      	ldrb	r2, [r7, #15]
 8006bc2:	4611      	mov	r1, r2
 8006bc4:	4618      	mov	r0, r3
 8006bc6:	f7fe fdf6 	bl	80057b6 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006bd0:	4618      	mov	r0, r3
 8006bd2:	f7fe fd9e 	bl	8005712 <USBD_LL_Reset>
}
 8006bd6:	bf00      	nop
 8006bd8:	3710      	adds	r7, #16
 8006bda:	46bd      	mov	sp, r7
 8006bdc:	bd80      	pop	{r7, pc}
	...

08006be0 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006be0:	b580      	push	{r7, lr}
 8006be2:	b082      	sub	sp, #8
 8006be4:	af00      	add	r7, sp, #0
 8006be6:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006bee:	4618      	mov	r0, r3
 8006bf0:	f7fe fdf1 	bl	80057d6 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006bfc:	681b      	ldr	r3, [r3, #0]
 8006bfe:	687a      	ldr	r2, [r7, #4]
 8006c00:	6812      	ldr	r2, [r2, #0]
 8006c02:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006c06:	f043 0301 	orr.w	r3, r3, #1
 8006c0a:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	6a1b      	ldr	r3, [r3, #32]
 8006c10:	2b00      	cmp	r3, #0
 8006c12:	d005      	beq.n	8006c20 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006c14:	4b04      	ldr	r3, [pc, #16]	; (8006c28 <HAL_PCD_SuspendCallback+0x48>)
 8006c16:	691b      	ldr	r3, [r3, #16]
 8006c18:	4a03      	ldr	r2, [pc, #12]	; (8006c28 <HAL_PCD_SuspendCallback+0x48>)
 8006c1a:	f043 0306 	orr.w	r3, r3, #6
 8006c1e:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006c20:	bf00      	nop
 8006c22:	3708      	adds	r7, #8
 8006c24:	46bd      	mov	sp, r7
 8006c26:	bd80      	pop	{r7, pc}
 8006c28:	e000ed00 	.word	0xe000ed00

08006c2c <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c3a:	4618      	mov	r0, r3
 8006c3c:	f7fe fde1 	bl	8005802 <USBD_LL_Resume>
}
 8006c40:	bf00      	nop
 8006c42:	3708      	adds	r7, #8
 8006c44:	46bd      	mov	sp, r7
 8006c46:	bd80      	pop	{r7, pc}

08006c48 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c48:	b580      	push	{r7, lr}
 8006c4a:	b082      	sub	sp, #8
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
 8006c50:	460b      	mov	r3, r1
 8006c52:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c5a:	78fa      	ldrb	r2, [r7, #3]
 8006c5c:	4611      	mov	r1, r2
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fe fe39 	bl	80058d6 <USBD_LL_IsoOUTIncomplete>
}
 8006c64:	bf00      	nop
 8006c66:	3708      	adds	r7, #8
 8006c68:	46bd      	mov	sp, r7
 8006c6a:	bd80      	pop	{r7, pc}

08006c6c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c6c:	b580      	push	{r7, lr}
 8006c6e:	b082      	sub	sp, #8
 8006c70:	af00      	add	r7, sp, #0
 8006c72:	6078      	str	r0, [r7, #4]
 8006c74:	460b      	mov	r3, r1
 8006c76:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c7e:	78fa      	ldrb	r2, [r7, #3]
 8006c80:	4611      	mov	r1, r2
 8006c82:	4618      	mov	r0, r3
 8006c84:	f7fe fdf5 	bl	8005872 <USBD_LL_IsoINIncomplete>
}
 8006c88:	bf00      	nop
 8006c8a:	3708      	adds	r7, #8
 8006c8c:	46bd      	mov	sp, r7
 8006c8e:	bd80      	pop	{r7, pc}

08006c90 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b082      	sub	sp, #8
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006c98:	687b      	ldr	r3, [r7, #4]
 8006c9a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006c9e:	4618      	mov	r0, r3
 8006ca0:	f7fe fe4b 	bl	800593a <USBD_LL_DevConnected>
}
 8006ca4:	bf00      	nop
 8006ca6:	3708      	adds	r7, #8
 8006ca8:	46bd      	mov	sp, r7
 8006caa:	bd80      	pop	{r7, pc}

08006cac <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006cac:	b580      	push	{r7, lr}
 8006cae:	b082      	sub	sp, #8
 8006cb0:	af00      	add	r7, sp, #0
 8006cb2:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006cba:	4618      	mov	r0, r3
 8006cbc:	f7fe fe48 	bl	8005950 <USBD_LL_DevDisconnected>
}
 8006cc0:	bf00      	nop
 8006cc2:	3708      	adds	r7, #8
 8006cc4:	46bd      	mov	sp, r7
 8006cc6:	bd80      	pop	{r7, pc}

08006cc8 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006cc8:	b580      	push	{r7, lr}
 8006cca:	b082      	sub	sp, #8
 8006ccc:	af00      	add	r7, sp, #0
 8006cce:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	781b      	ldrb	r3, [r3, #0]
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d13c      	bne.n	8006d52 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006cd8:	4a20      	ldr	r2, [pc, #128]	; (8006d5c <USBD_LL_Init+0x94>)
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a1e      	ldr	r2, [pc, #120]	; (8006d5c <USBD_LL_Init+0x94>)
 8006ce4:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006ce8:	4b1c      	ldr	r3, [pc, #112]	; (8006d5c <USBD_LL_Init+0x94>)
 8006cea:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006cee:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006cf0:	4b1a      	ldr	r3, [pc, #104]	; (8006d5c <USBD_LL_Init+0x94>)
 8006cf2:	2204      	movs	r2, #4
 8006cf4:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006cf6:	4b19      	ldr	r3, [pc, #100]	; (8006d5c <USBD_LL_Init+0x94>)
 8006cf8:	2202      	movs	r2, #2
 8006cfa:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006cfc:	4b17      	ldr	r3, [pc, #92]	; (8006d5c <USBD_LL_Init+0x94>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006d02:	4b16      	ldr	r3, [pc, #88]	; (8006d5c <USBD_LL_Init+0x94>)
 8006d04:	2202      	movs	r2, #2
 8006d06:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006d08:	4b14      	ldr	r3, [pc, #80]	; (8006d5c <USBD_LL_Init+0x94>)
 8006d0a:	2200      	movs	r2, #0
 8006d0c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006d0e:	4b13      	ldr	r3, [pc, #76]	; (8006d5c <USBD_LL_Init+0x94>)
 8006d10:	2200      	movs	r2, #0
 8006d12:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006d14:	4b11      	ldr	r3, [pc, #68]	; (8006d5c <USBD_LL_Init+0x94>)
 8006d16:	2200      	movs	r2, #0
 8006d18:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006d1a:	4b10      	ldr	r3, [pc, #64]	; (8006d5c <USBD_LL_Init+0x94>)
 8006d1c:	2200      	movs	r2, #0
 8006d1e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006d20:	4b0e      	ldr	r3, [pc, #56]	; (8006d5c <USBD_LL_Init+0x94>)
 8006d22:	2200      	movs	r2, #0
 8006d24:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006d26:	480d      	ldr	r0, [pc, #52]	; (8006d5c <USBD_LL_Init+0x94>)
 8006d28:	f7fa fd49 	bl	80017be <HAL_PCD_Init>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006d32:	f7f9 fea3 	bl	8000a7c <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006d36:	2180      	movs	r1, #128	; 0x80
 8006d38:	4808      	ldr	r0, [pc, #32]	; (8006d5c <USBD_LL_Init+0x94>)
 8006d3a:	f7fb ff88 	bl	8002c4e <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006d3e:	2240      	movs	r2, #64	; 0x40
 8006d40:	2100      	movs	r1, #0
 8006d42:	4806      	ldr	r0, [pc, #24]	; (8006d5c <USBD_LL_Init+0x94>)
 8006d44:	f7fb ff3c 	bl	8002bc0 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006d48:	2280      	movs	r2, #128	; 0x80
 8006d4a:	2101      	movs	r1, #1
 8006d4c:	4803      	ldr	r0, [pc, #12]	; (8006d5c <USBD_LL_Init+0x94>)
 8006d4e:	f7fb ff37 	bl	8002bc0 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006d52:	2300      	movs	r3, #0
}
 8006d54:	4618      	mov	r0, r3
 8006d56:	3708      	adds	r7, #8
 8006d58:	46bd      	mov	sp, r7
 8006d5a:	bd80      	pop	{r7, pc}
 8006d5c:	200006e0 	.word	0x200006e0

08006d60 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8006d60:	b580      	push	{r7, lr}
 8006d62:	b084      	sub	sp, #16
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006d76:	4618      	mov	r0, r3
 8006d78:	f7fa fe3e 	bl	80019f8 <HAL_PCD_Start>
 8006d7c:	4603      	mov	r3, r0
 8006d7e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006d80:	7bfb      	ldrb	r3, [r7, #15]
 8006d82:	4618      	mov	r0, r3
 8006d84:	f000 f930 	bl	8006fe8 <USBD_Get_USB_Status>
 8006d88:	4603      	mov	r3, r0
 8006d8a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006d8c:	7bbb      	ldrb	r3, [r7, #14]
}
 8006d8e:	4618      	mov	r0, r3
 8006d90:	3710      	adds	r7, #16
 8006d92:	46bd      	mov	sp, r7
 8006d94:	bd80      	pop	{r7, pc}

08006d96 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8006d96:	b580      	push	{r7, lr}
 8006d98:	b084      	sub	sp, #16
 8006d9a:	af00      	add	r7, sp, #0
 8006d9c:	6078      	str	r0, [r7, #4]
 8006d9e:	4608      	mov	r0, r1
 8006da0:	4611      	mov	r1, r2
 8006da2:	461a      	mov	r2, r3
 8006da4:	4603      	mov	r3, r0
 8006da6:	70fb      	strb	r3, [r7, #3]
 8006da8:	460b      	mov	r3, r1
 8006daa:	70bb      	strb	r3, [r7, #2]
 8006dac:	4613      	mov	r3, r2
 8006dae:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006db0:	2300      	movs	r3, #0
 8006db2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006db4:	2300      	movs	r3, #0
 8006db6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006dbe:	78bb      	ldrb	r3, [r7, #2]
 8006dc0:	883a      	ldrh	r2, [r7, #0]
 8006dc2:	78f9      	ldrb	r1, [r7, #3]
 8006dc4:	f7fb fb0f 	bl	80023e6 <HAL_PCD_EP_Open>
 8006dc8:	4603      	mov	r3, r0
 8006dca:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006dcc:	7bfb      	ldrb	r3, [r7, #15]
 8006dce:	4618      	mov	r0, r3
 8006dd0:	f000 f90a 	bl	8006fe8 <USBD_Get_USB_Status>
 8006dd4:	4603      	mov	r3, r0
 8006dd6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006dd8:	7bbb      	ldrb	r3, [r7, #14]
}
 8006dda:	4618      	mov	r0, r3
 8006ddc:	3710      	adds	r7, #16
 8006dde:	46bd      	mov	sp, r7
 8006de0:	bd80      	pop	{r7, pc}

08006de2 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006de2:	b580      	push	{r7, lr}
 8006de4:	b084      	sub	sp, #16
 8006de6:	af00      	add	r7, sp, #0
 8006de8:	6078      	str	r0, [r7, #4]
 8006dea:	460b      	mov	r3, r1
 8006dec:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006dee:	2300      	movs	r3, #0
 8006df0:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006df2:	2300      	movs	r3, #0
 8006df4:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006dfc:	78fa      	ldrb	r2, [r7, #3]
 8006dfe:	4611      	mov	r1, r2
 8006e00:	4618      	mov	r0, r3
 8006e02:	f7fb fb58 	bl	80024b6 <HAL_PCD_EP_Close>
 8006e06:	4603      	mov	r3, r0
 8006e08:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e0a:	7bfb      	ldrb	r3, [r7, #15]
 8006e0c:	4618      	mov	r0, r3
 8006e0e:	f000 f8eb 	bl	8006fe8 <USBD_Get_USB_Status>
 8006e12:	4603      	mov	r3, r0
 8006e14:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e16:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e18:	4618      	mov	r0, r3
 8006e1a:	3710      	adds	r7, #16
 8006e1c:	46bd      	mov	sp, r7
 8006e1e:	bd80      	pop	{r7, pc}

08006e20 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e20:	b580      	push	{r7, lr}
 8006e22:	b084      	sub	sp, #16
 8006e24:	af00      	add	r7, sp, #0
 8006e26:	6078      	str	r0, [r7, #4]
 8006e28:	460b      	mov	r3, r1
 8006e2a:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e2c:	2300      	movs	r3, #0
 8006e2e:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e30:	2300      	movs	r3, #0
 8006e32:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e3a:	78fa      	ldrb	r2, [r7, #3]
 8006e3c:	4611      	mov	r1, r2
 8006e3e:	4618      	mov	r0, r3
 8006e40:	f7fb fc18 	bl	8002674 <HAL_PCD_EP_SetStall>
 8006e44:	4603      	mov	r3, r0
 8006e46:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e48:	7bfb      	ldrb	r3, [r7, #15]
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	f000 f8cc 	bl	8006fe8 <USBD_Get_USB_Status>
 8006e50:	4603      	mov	r3, r0
 8006e52:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e54:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e56:	4618      	mov	r0, r3
 8006e58:	3710      	adds	r7, #16
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}

08006e5e <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e5e:	b580      	push	{r7, lr}
 8006e60:	b084      	sub	sp, #16
 8006e62:	af00      	add	r7, sp, #0
 8006e64:	6078      	str	r0, [r7, #4]
 8006e66:	460b      	mov	r3, r1
 8006e68:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006e78:	78fa      	ldrb	r2, [r7, #3]
 8006e7a:	4611      	mov	r1, r2
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	f7fb fc5d 	bl	800273c <HAL_PCD_EP_ClrStall>
 8006e82:	4603      	mov	r3, r0
 8006e84:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006e86:	7bfb      	ldrb	r3, [r7, #15]
 8006e88:	4618      	mov	r0, r3
 8006e8a:	f000 f8ad 	bl	8006fe8 <USBD_Get_USB_Status>
 8006e8e:	4603      	mov	r3, r0
 8006e90:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006e92:	7bbb      	ldrb	r3, [r7, #14]
}
 8006e94:	4618      	mov	r0, r3
 8006e96:	3710      	adds	r7, #16
 8006e98:	46bd      	mov	sp, r7
 8006e9a:	bd80      	pop	{r7, pc}

08006e9c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	b085      	sub	sp, #20
 8006ea0:	af00      	add	r7, sp, #0
 8006ea2:	6078      	str	r0, [r7, #4]
 8006ea4:	460b      	mov	r3, r1
 8006ea6:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006eae:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8006eb0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8006eb4:	2b00      	cmp	r3, #0
 8006eb6:	da0b      	bge.n	8006ed0 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8006eb8:	78fb      	ldrb	r3, [r7, #3]
 8006eba:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ebe:	68f9      	ldr	r1, [r7, #12]
 8006ec0:	4613      	mov	r3, r2
 8006ec2:	00db      	lsls	r3, r3, #3
 8006ec4:	4413      	add	r3, r2
 8006ec6:	009b      	lsls	r3, r3, #2
 8006ec8:	440b      	add	r3, r1
 8006eca:	333e      	adds	r3, #62	; 0x3e
 8006ecc:	781b      	ldrb	r3, [r3, #0]
 8006ece:	e00b      	b.n	8006ee8 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8006ed0:	78fb      	ldrb	r3, [r7, #3]
 8006ed2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006ed6:	68f9      	ldr	r1, [r7, #12]
 8006ed8:	4613      	mov	r3, r2
 8006eda:	00db      	lsls	r3, r3, #3
 8006edc:	4413      	add	r3, r2
 8006ede:	009b      	lsls	r3, r3, #2
 8006ee0:	440b      	add	r3, r1
 8006ee2:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8006ee6:	781b      	ldrb	r3, [r3, #0]
  }
}
 8006ee8:	4618      	mov	r0, r3
 8006eea:	3714      	adds	r7, #20
 8006eec:	46bd      	mov	sp, r7
 8006eee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef2:	4770      	bx	lr

08006ef4 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8006ef4:	b580      	push	{r7, lr}
 8006ef6:	b084      	sub	sp, #16
 8006ef8:	af00      	add	r7, sp, #0
 8006efa:	6078      	str	r0, [r7, #4]
 8006efc:	460b      	mov	r3, r1
 8006efe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f00:	2300      	movs	r3, #0
 8006f02:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f04:	2300      	movs	r3, #0
 8006f06:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8006f0e:	78fa      	ldrb	r2, [r7, #3]
 8006f10:	4611      	mov	r1, r2
 8006f12:	4618      	mov	r0, r3
 8006f14:	f7fb fa42 	bl	800239c <HAL_PCD_SetAddress>
 8006f18:	4603      	mov	r3, r0
 8006f1a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f1c:	7bfb      	ldrb	r3, [r7, #15]
 8006f1e:	4618      	mov	r0, r3
 8006f20:	f000 f862 	bl	8006fe8 <USBD_Get_USB_Status>
 8006f24:	4603      	mov	r3, r0
 8006f26:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8006f28:	7bbb      	ldrb	r3, [r7, #14]
}
 8006f2a:	4618      	mov	r0, r3
 8006f2c:	3710      	adds	r7, #16
 8006f2e:	46bd      	mov	sp, r7
 8006f30:	bd80      	pop	{r7, pc}

08006f32 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f32:	b580      	push	{r7, lr}
 8006f34:	b086      	sub	sp, #24
 8006f36:	af00      	add	r7, sp, #0
 8006f38:	60f8      	str	r0, [r7, #12]
 8006f3a:	607a      	str	r2, [r7, #4]
 8006f3c:	603b      	str	r3, [r7, #0]
 8006f3e:	460b      	mov	r3, r1
 8006f40:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f42:	2300      	movs	r3, #0
 8006f44:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f46:	2300      	movs	r3, #0
 8006f48:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006f50:	7af9      	ldrb	r1, [r7, #11]
 8006f52:	683b      	ldr	r3, [r7, #0]
 8006f54:	687a      	ldr	r2, [r7, #4]
 8006f56:	f7fb fb43 	bl	80025e0 <HAL_PCD_EP_Transmit>
 8006f5a:	4603      	mov	r3, r0
 8006f5c:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006f5e:	7dfb      	ldrb	r3, [r7, #23]
 8006f60:	4618      	mov	r0, r3
 8006f62:	f000 f841 	bl	8006fe8 <USBD_Get_USB_Status>
 8006f66:	4603      	mov	r3, r0
 8006f68:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006f6a:	7dbb      	ldrb	r3, [r7, #22]
}
 8006f6c:	4618      	mov	r0, r3
 8006f6e:	3718      	adds	r7, #24
 8006f70:	46bd      	mov	sp, r7
 8006f72:	bd80      	pop	{r7, pc}

08006f74 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b086      	sub	sp, #24
 8006f78:	af00      	add	r7, sp, #0
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	607a      	str	r2, [r7, #4]
 8006f7e:	603b      	str	r3, [r7, #0]
 8006f80:	460b      	mov	r3, r1
 8006f82:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8006f84:	2300      	movs	r3, #0
 8006f86:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006f88:	2300      	movs	r3, #0
 8006f8a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8006f8c:	68fb      	ldr	r3, [r7, #12]
 8006f8e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8006f92:	7af9      	ldrb	r1, [r7, #11]
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	687a      	ldr	r2, [r7, #4]
 8006f98:	f7fb fad7 	bl	800254a <HAL_PCD_EP_Receive>
 8006f9c:	4603      	mov	r3, r0
 8006f9e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8006fa0:	7dfb      	ldrb	r3, [r7, #23]
 8006fa2:	4618      	mov	r0, r3
 8006fa4:	f000 f820 	bl	8006fe8 <USBD_Get_USB_Status>
 8006fa8:	4603      	mov	r3, r0
 8006faa:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8006fac:	7dbb      	ldrb	r3, [r7, #22]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3718      	adds	r7, #24
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
	...

08006fb8 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8006fc0:	4b03      	ldr	r3, [pc, #12]	; (8006fd0 <USBD_static_malloc+0x18>)
}
 8006fc2:	4618      	mov	r0, r3
 8006fc4:	370c      	adds	r7, #12
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr
 8006fce:	bf00      	nop
 8006fd0:	20000bec 	.word	0x20000bec

08006fd4 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8006fd4:	b480      	push	{r7}
 8006fd6:	b083      	sub	sp, #12
 8006fd8:	af00      	add	r7, sp, #0
 8006fda:	6078      	str	r0, [r7, #4]

}
 8006fdc:	bf00      	nop
 8006fde:	370c      	adds	r7, #12
 8006fe0:	46bd      	mov	sp, r7
 8006fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe6:	4770      	bx	lr

08006fe8 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8006fe8:	b480      	push	{r7}
 8006fea:	b085      	sub	sp, #20
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	4603      	mov	r3, r0
 8006ff0:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8006ff2:	2300      	movs	r3, #0
 8006ff4:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8006ff6:	79fb      	ldrb	r3, [r7, #7]
 8006ff8:	2b03      	cmp	r3, #3
 8006ffa:	d817      	bhi.n	800702c <USBD_Get_USB_Status+0x44>
 8006ffc:	a201      	add	r2, pc, #4	; (adr r2, 8007004 <USBD_Get_USB_Status+0x1c>)
 8006ffe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007002:	bf00      	nop
 8007004:	08007015 	.word	0x08007015
 8007008:	0800701b 	.word	0x0800701b
 800700c:	08007021 	.word	0x08007021
 8007010:	08007027 	.word	0x08007027
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	73fb      	strb	r3, [r7, #15]
    break;
 8007018:	e00b      	b.n	8007032 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 800701a:	2303      	movs	r3, #3
 800701c:	73fb      	strb	r3, [r7, #15]
    break;
 800701e:	e008      	b.n	8007032 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007020:	2301      	movs	r3, #1
 8007022:	73fb      	strb	r3, [r7, #15]
    break;
 8007024:	e005      	b.n	8007032 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007026:	2303      	movs	r3, #3
 8007028:	73fb      	strb	r3, [r7, #15]
    break;
 800702a:	e002      	b.n	8007032 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 800702c:	2303      	movs	r3, #3
 800702e:	73fb      	strb	r3, [r7, #15]
    break;
 8007030:	bf00      	nop
  }
  return usb_status;
 8007032:	7bfb      	ldrb	r3, [r7, #15]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <__libc_init_array>:
 8007040:	b570      	push	{r4, r5, r6, lr}
 8007042:	4d0d      	ldr	r5, [pc, #52]	; (8007078 <__libc_init_array+0x38>)
 8007044:	4c0d      	ldr	r4, [pc, #52]	; (800707c <__libc_init_array+0x3c>)
 8007046:	1b64      	subs	r4, r4, r5
 8007048:	10a4      	asrs	r4, r4, #2
 800704a:	2600      	movs	r6, #0
 800704c:	42a6      	cmp	r6, r4
 800704e:	d109      	bne.n	8007064 <__libc_init_array+0x24>
 8007050:	4d0b      	ldr	r5, [pc, #44]	; (8007080 <__libc_init_array+0x40>)
 8007052:	4c0c      	ldr	r4, [pc, #48]	; (8007084 <__libc_init_array+0x44>)
 8007054:	f000 f820 	bl	8007098 <_init>
 8007058:	1b64      	subs	r4, r4, r5
 800705a:	10a4      	asrs	r4, r4, #2
 800705c:	2600      	movs	r6, #0
 800705e:	42a6      	cmp	r6, r4
 8007060:	d105      	bne.n	800706e <__libc_init_array+0x2e>
 8007062:	bd70      	pop	{r4, r5, r6, pc}
 8007064:	f855 3b04 	ldr.w	r3, [r5], #4
 8007068:	4798      	blx	r3
 800706a:	3601      	adds	r6, #1
 800706c:	e7ee      	b.n	800704c <__libc_init_array+0xc>
 800706e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007072:	4798      	blx	r3
 8007074:	3601      	adds	r6, #1
 8007076:	e7f2      	b.n	800705e <__libc_init_array+0x1e>
 8007078:	08007110 	.word	0x08007110
 800707c:	08007110 	.word	0x08007110
 8007080:	08007110 	.word	0x08007110
 8007084:	08007114 	.word	0x08007114

08007088 <memset>:
 8007088:	4402      	add	r2, r0
 800708a:	4603      	mov	r3, r0
 800708c:	4293      	cmp	r3, r2
 800708e:	d100      	bne.n	8007092 <memset+0xa>
 8007090:	4770      	bx	lr
 8007092:	f803 1b01 	strb.w	r1, [r3], #1
 8007096:	e7f9      	b.n	800708c <memset+0x4>

08007098 <_init>:
 8007098:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709a:	bf00      	nop
 800709c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800709e:	bc08      	pop	{r3}
 80070a0:	469e      	mov	lr, r3
 80070a2:	4770      	bx	lr

080070a4 <_fini>:
 80070a4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80070a6:	bf00      	nop
 80070a8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070aa:	bc08      	pop	{r3}
 80070ac:	469e      	mov	lr, r3
 80070ae:	4770      	bx	lr
