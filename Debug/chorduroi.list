
chorduroi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071bc  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000058  08007350  08007350  00017350  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080073a8  080073a8  00020138  2**0
                  CONTENTS
  4 .ARM          00000008  080073a8  080073a8  000173a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080073b0  080073b0  00020138  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080073b0  080073b0  000173b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080073b4  080073b4  000173b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000138  20000000  080073b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a80  20000138  080074f0  00020138  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000bb8  080074f0  00020bb8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000efeb  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a1f  00000000  00000000  0002f153  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c30  00000000  00000000  00031b78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000af8  00000000  00000000  000327a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001918d  00000000  00000000  000332a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f8dc  00000000  00000000  0004c42d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000921dd  00000000  00000000  0005bd09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000edee6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000030fc  00000000  00000000  000edf38  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000138 	.word	0x20000138
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007338 	.word	0x08007338

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	2000013c 	.word	0x2000013c
 80001d0:	08007338 	.word	0x08007338

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <readStick>:
} joystick;

joystick leftStick;
joystick rightStick;

void readStick(joystick* stick){
 80004d8:	b580      	push	{r7, lr}
 80004da:	b084      	sub	sp, #16
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	uint16_t currentX;
	uint16_t currentY;

	HAL_ADC_Start(&hadc1);
 80004e0:	4811      	ldr	r0, [pc, #68]	; (8000528 <readStick+0x50>)
 80004e2:	f000 fc6f 	bl	8000dc4 <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80004e6:	f04f 31ff 	mov.w	r1, #4294967295
 80004ea:	480f      	ldr	r0, [pc, #60]	; (8000528 <readStick+0x50>)
 80004ec:	f000 fd51 	bl	8000f92 <HAL_ADC_PollForConversion>
	currentX = HAL_ADC_GetValue(&hadc1);
 80004f0:	480d      	ldr	r0, [pc, #52]	; (8000528 <readStick+0x50>)
 80004f2:	f000 fdd9 	bl	80010a8 <HAL_ADC_GetValue>
 80004f6:	4603      	mov	r3, r0
 80004f8:	81fb      	strh	r3, [r7, #14]

	HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 80004fa:	f04f 31ff 	mov.w	r1, #4294967295
 80004fe:	480a      	ldr	r0, [pc, #40]	; (8000528 <readStick+0x50>)
 8000500:	f000 fd47 	bl	8000f92 <HAL_ADC_PollForConversion>
	currentY = HAL_ADC_GetValue(&hadc1);
 8000504:	4808      	ldr	r0, [pc, #32]	; (8000528 <readStick+0x50>)
 8000506:	f000 fdcf 	bl	80010a8 <HAL_ADC_GetValue>
 800050a:	4603      	mov	r3, r0
 800050c:	81bb      	strh	r3, [r7, #12]

	HAL_ADC_Stop(&hadc1);
 800050e:	4806      	ldr	r0, [pc, #24]	; (8000528 <readStick+0x50>)
 8000510:	f000 fd0c 	bl	8000f2c <HAL_ADC_Stop>

	stick->xAxis = currentX;
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	89fa      	ldrh	r2, [r7, #14]
 8000518:	805a      	strh	r2, [r3, #2]
	stick->yAxis = currentY;
 800051a:	687b      	ldr	r3, [r7, #4]
 800051c:	89ba      	ldrh	r2, [r7, #12]
 800051e:	801a      	strh	r2, [r3, #0]

}
 8000520:	bf00      	nop
 8000522:	3710      	adds	r7, #16
 8000524:	46bd      	mov	sp, r7
 8000526:	bd80      	pop	{r7, pc}
 8000528:	2000016c 	.word	0x2000016c

0800052c <joystickKeyPrint>:
uint8_t keycodeZero = 0x27;
uint8_t keycodeNewline = 0x28;



void joystickKeyPrint (uint16_t joystickVal){
 800052c:	b580      	push	{r7, lr}
 800052e:	b084      	sub	sp, #16
 8000530:	af00      	add	r7, sp, #0
 8000532:	4603      	mov	r3, r0
 8000534:	80fb      	strh	r3, [r7, #6]
	int j;

	for(j = 0; j < 16; j++){
 8000536:	2300      	movs	r3, #0
 8000538:	60fb      	str	r3, [r7, #12]
 800053a:	e01b      	b.n	8000574 <joystickKeyPrint+0x48>
		if(0 != butRef[j] & joystickVal){
 800053c:	4a35      	ldr	r2, [pc, #212]	; (8000614 <joystickKeyPrint+0xe8>)
 800053e:	68fb      	ldr	r3, [r7, #12]
 8000540:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000544:	2b00      	cmp	r3, #0
 8000546:	bf14      	ite	ne
 8000548:	2301      	movne	r3, #1
 800054a:	2300      	moveq	r3, #0
 800054c:	b2db      	uxtb	r3, r3
 800054e:	461a      	mov	r2, r3
 8000550:	88fb      	ldrh	r3, [r7, #6]
 8000552:	4013      	ands	r3, r2
 8000554:	2b00      	cmp	r3, #0
 8000556:	d005      	beq.n	8000564 <joystickKeyPrint+0x38>
			mapRef[j] = 1;
 8000558:	4a2f      	ldr	r2, [pc, #188]	; (8000618 <joystickKeyPrint+0xec>)
 800055a:	68fb      	ldr	r3, [r7, #12]
 800055c:	4413      	add	r3, r2
 800055e:	2201      	movs	r2, #1
 8000560:	701a      	strb	r2, [r3, #0]
 8000562:	e004      	b.n	800056e <joystickKeyPrint+0x42>
		} else{
			mapRef[j] = 0;
 8000564:	4a2c      	ldr	r2, [pc, #176]	; (8000618 <joystickKeyPrint+0xec>)
 8000566:	68fb      	ldr	r3, [r7, #12]
 8000568:	4413      	add	r3, r2
 800056a:	2200      	movs	r2, #0
 800056c:	701a      	strb	r2, [r3, #0]
	for(j = 0; j < 16; j++){
 800056e:	68fb      	ldr	r3, [r7, #12]
 8000570:	3301      	adds	r3, #1
 8000572:	60fb      	str	r3, [r7, #12]
 8000574:	68fb      	ldr	r3, [r7, #12]
 8000576:	2b0f      	cmp	r3, #15
 8000578:	dde0      	ble.n	800053c <joystickKeyPrint+0x10>
		}
	}

	for(j = 4; j < 10; j++){
 800057a:	2304      	movs	r3, #4
 800057c:	60fb      	str	r3, [r7, #12]
 800057e:	e00f      	b.n	80005a0 <joystickKeyPrint+0x74>
		if (mapRef[j] == 1){
 8000580:	4a25      	ldr	r2, [pc, #148]	; (8000618 <joystickKeyPrint+0xec>)
 8000582:	68fb      	ldr	r3, [r7, #12]
 8000584:	4413      	add	r3, r2
 8000586:	781b      	ldrb	r3, [r3, #0]
 8000588:	2b01      	cmp	r3, #1
 800058a:	d103      	bne.n	8000594 <joystickKeyPrint+0x68>
			setKeyBytes(&keycodeOne);
 800058c:	4823      	ldr	r0, [pc, #140]	; (800061c <joystickKeyPrint+0xf0>)
 800058e:	f000 f86d 	bl	800066c <setKeyBytes>
 8000592:	e002      	b.n	800059a <joystickKeyPrint+0x6e>
		} else {
			setKeyBytes(&keycodeZero);
 8000594:	4822      	ldr	r0, [pc, #136]	; (8000620 <joystickKeyPrint+0xf4>)
 8000596:	f000 f869 	bl	800066c <setKeyBytes>
	for(j = 4; j < 10; j++){
 800059a:	68fb      	ldr	r3, [r7, #12]
 800059c:	3301      	adds	r3, #1
 800059e:	60fb      	str	r3, [r7, #12]
 80005a0:	68fb      	ldr	r3, [r7, #12]
 80005a2:	2b09      	cmp	r3, #9
 80005a4:	ddec      	ble.n	8000580 <joystickKeyPrint+0x54>
		}
	}

	USBD_HID_SendReport(&hUsbDeviceFS, &HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80005a6:	2208      	movs	r2, #8
 80005a8:	491e      	ldr	r1, [pc, #120]	; (8000624 <joystickKeyPrint+0xf8>)
 80005aa:	481f      	ldr	r0, [pc, #124]	; (8000628 <joystickKeyPrint+0xfc>)
 80005ac:	f004 fef0 	bl	8005390 <USBD_HID_SendReport>

		HAL_Delay(NESS_DELAY);
 80005b0:	2012      	movs	r0, #18
 80005b2:	f000 fb9f 	bl	8000cf4 <HAL_Delay>

		for(j = 10; j < 16; j++){
 80005b6:	230a      	movs	r3, #10
 80005b8:	60fb      	str	r3, [r7, #12]
 80005ba:	e00f      	b.n	80005dc <joystickKeyPrint+0xb0>
				if (mapRef[j] == 1){
 80005bc:	4a16      	ldr	r2, [pc, #88]	; (8000618 <joystickKeyPrint+0xec>)
 80005be:	68fb      	ldr	r3, [r7, #12]
 80005c0:	4413      	add	r3, r2
 80005c2:	781b      	ldrb	r3, [r3, #0]
 80005c4:	2b01      	cmp	r3, #1
 80005c6:	d103      	bne.n	80005d0 <joystickKeyPrint+0xa4>
					setKeyBytes(&keycodeOne);
 80005c8:	4814      	ldr	r0, [pc, #80]	; (800061c <joystickKeyPrint+0xf0>)
 80005ca:	f000 f84f 	bl	800066c <setKeyBytes>
 80005ce:	e002      	b.n	80005d6 <joystickKeyPrint+0xaa>
				} else {
					setKeyBytes(&keycodeZero);
 80005d0:	4813      	ldr	r0, [pc, #76]	; (8000620 <joystickKeyPrint+0xf4>)
 80005d2:	f000 f84b 	bl	800066c <setKeyBytes>
		for(j = 10; j < 16; j++){
 80005d6:	68fb      	ldr	r3, [r7, #12]
 80005d8:	3301      	adds	r3, #1
 80005da:	60fb      	str	r3, [r7, #12]
 80005dc:	68fb      	ldr	r3, [r7, #12]
 80005de:	2b0f      	cmp	r3, #15
 80005e0:	ddec      	ble.n	80005bc <joystickKeyPrint+0x90>
				}
		}
		USBD_HID_SendReport(&hUsbDeviceFS, &HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80005e2:	2208      	movs	r2, #8
 80005e4:	490f      	ldr	r1, [pc, #60]	; (8000624 <joystickKeyPrint+0xf8>)
 80005e6:	4810      	ldr	r0, [pc, #64]	; (8000628 <joystickKeyPrint+0xfc>)
 80005e8:	f004 fed2 	bl	8005390 <USBD_HID_SendReport>

		HAL_Delay(NESS_DELAY);
 80005ec:	2012      	movs	r0, #18
 80005ee:	f000 fb81 	bl	8000cf4 <HAL_Delay>
		clearReport();
 80005f2:	f000 f87d 	bl	80006f0 <clearReport>
		setKeyBytes(&keycodeNewline);
 80005f6:	480d      	ldr	r0, [pc, #52]	; (800062c <joystickKeyPrint+0x100>)
 80005f8:	f000 f838 	bl	800066c <setKeyBytes>
		USBD_HID_SendReport(&hUsbDeviceFS, &HIDKeyboardReport, sizeof(HIDKeyboardReport));
 80005fc:	2208      	movs	r2, #8
 80005fe:	4909      	ldr	r1, [pc, #36]	; (8000624 <joystickKeyPrint+0xf8>)
 8000600:	4809      	ldr	r0, [pc, #36]	; (8000628 <joystickKeyPrint+0xfc>)
 8000602:	f004 fec5 	bl	8005390 <USBD_HID_SendReport>
		HAL_Delay(NESS_DELAY);
 8000606:	2012      	movs	r0, #18
 8000608:	f000 fb74 	bl	8000cf4 <HAL_Delay>
}
 800060c:	bf00      	nop
 800060e:	3710      	adds	r7, #16
 8000610:	46bd      	mov	sp, r7
 8000612:	bd80      	pop	{r7, pc}
 8000614:	20000000 	.word	0x20000000
 8000618:	20000154 	.word	0x20000154
 800061c:	20000022 	.word	0x20000022
 8000620:	20000023 	.word	0x20000023
 8000624:	20000164 	.word	0x20000164
 8000628:	200001bc 	.word	0x200001bc
 800062c:	20000024 	.word	0x20000024

08000630 <testMain>:

void testMain(joystick* stick){
 8000630:	b580      	push	{r7, lr}
 8000632:	b084      	sub	sp, #16
 8000634:	af00      	add	r7, sp, #0
 8000636:	6078      	str	r0, [r7, #4]
	readStick(stick);
 8000638:	6878      	ldr	r0, [r7, #4]
 800063a:	f7ff ff4d 	bl	80004d8 <readStick>

	uint16_t valX = stick->xAxis;
 800063e:	687b      	ldr	r3, [r7, #4]
 8000640:	885b      	ldrh	r3, [r3, #2]
 8000642:	81fb      	strh	r3, [r7, #14]
	uint16_t valY = stick->yAxis;
 8000644:	687b      	ldr	r3, [r7, #4]
 8000646:	881b      	ldrh	r3, [r3, #0]
 8000648:	81bb      	strh	r3, [r7, #12]
	joystickKeyPrint(valX);
 800064a:	89fb      	ldrh	r3, [r7, #14]
 800064c:	4618      	mov	r0, r3
 800064e:	f7ff ff6d 	bl	800052c <joystickKeyPrint>
	joystickKeyPrint(valY);
 8000652:	89bb      	ldrh	r3, [r7, #12]
 8000654:	4618      	mov	r0, r3
 8000656:	f7ff ff69 	bl	800052c <joystickKeyPrint>
	HAL_Delay(1500);
 800065a:	f240 50dc 	movw	r0, #1500	; 0x5dc
 800065e:	f000 fb49 	bl	8000cf4 <HAL_Delay>
}
 8000662:	bf00      	nop
 8000664:	3710      	adds	r7, #16
 8000666:	46bd      	mov	sp, r7
 8000668:	bd80      	pop	{r7, pc}
	...

0800066c <setKeyBytes>:
		}
	}
}
*/

void setKeyBytes(uint8_t* code){
 800066c:	b480      	push	{r7}
 800066e:	b083      	sub	sp, #12
 8000670:	af00      	add	r7, sp, #0
 8000672:	6078      	str	r0, [r7, #4]
	if(HIDKeyboardReport.K1 == 0){
 8000674:	4b1d      	ldr	r3, [pc, #116]	; (80006ec <setKeyBytes+0x80>)
 8000676:	789b      	ldrb	r3, [r3, #2]
 8000678:	2b00      	cmp	r3, #0
 800067a:	d104      	bne.n	8000686 <setKeyBytes+0x1a>
		HIDKeyboardReport.K1 = *code;
 800067c:	687b      	ldr	r3, [r7, #4]
 800067e:	781a      	ldrb	r2, [r3, #0]
 8000680:	4b1a      	ldr	r3, [pc, #104]	; (80006ec <setKeyBytes+0x80>)
 8000682:	709a      	strb	r2, [r3, #2]
	} else if(HIDKeyboardReport.K5 == 0){
		HIDKeyboardReport.K5 = *code;
	} else if(HIDKeyboardReport.K6 == 0){
		HIDKeyboardReport.K6 = *code;
	}
}
 8000684:	e02b      	b.n	80006de <setKeyBytes+0x72>
	} else if(HIDKeyboardReport.K2 == 0){
 8000686:	4b19      	ldr	r3, [pc, #100]	; (80006ec <setKeyBytes+0x80>)
 8000688:	78db      	ldrb	r3, [r3, #3]
 800068a:	2b00      	cmp	r3, #0
 800068c:	d104      	bne.n	8000698 <setKeyBytes+0x2c>
		HIDKeyboardReport.K2 = *code;
 800068e:	687b      	ldr	r3, [r7, #4]
 8000690:	781a      	ldrb	r2, [r3, #0]
 8000692:	4b16      	ldr	r3, [pc, #88]	; (80006ec <setKeyBytes+0x80>)
 8000694:	70da      	strb	r2, [r3, #3]
}
 8000696:	e022      	b.n	80006de <setKeyBytes+0x72>
	} else if(HIDKeyboardReport.K3 == 0){
 8000698:	4b14      	ldr	r3, [pc, #80]	; (80006ec <setKeyBytes+0x80>)
 800069a:	791b      	ldrb	r3, [r3, #4]
 800069c:	2b00      	cmp	r3, #0
 800069e:	d104      	bne.n	80006aa <setKeyBytes+0x3e>
		HIDKeyboardReport.K3 = *code;
 80006a0:	687b      	ldr	r3, [r7, #4]
 80006a2:	781a      	ldrb	r2, [r3, #0]
 80006a4:	4b11      	ldr	r3, [pc, #68]	; (80006ec <setKeyBytes+0x80>)
 80006a6:	711a      	strb	r2, [r3, #4]
}
 80006a8:	e019      	b.n	80006de <setKeyBytes+0x72>
	} else if(HIDKeyboardReport.K4 == 0){
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <setKeyBytes+0x80>)
 80006ac:	795b      	ldrb	r3, [r3, #5]
 80006ae:	2b00      	cmp	r3, #0
 80006b0:	d104      	bne.n	80006bc <setKeyBytes+0x50>
		HIDKeyboardReport.K4 = *code;
 80006b2:	687b      	ldr	r3, [r7, #4]
 80006b4:	781a      	ldrb	r2, [r3, #0]
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <setKeyBytes+0x80>)
 80006b8:	715a      	strb	r2, [r3, #5]
}
 80006ba:	e010      	b.n	80006de <setKeyBytes+0x72>
	} else if(HIDKeyboardReport.K5 == 0){
 80006bc:	4b0b      	ldr	r3, [pc, #44]	; (80006ec <setKeyBytes+0x80>)
 80006be:	799b      	ldrb	r3, [r3, #6]
 80006c0:	2b00      	cmp	r3, #0
 80006c2:	d104      	bne.n	80006ce <setKeyBytes+0x62>
		HIDKeyboardReport.K5 = *code;
 80006c4:	687b      	ldr	r3, [r7, #4]
 80006c6:	781a      	ldrb	r2, [r3, #0]
 80006c8:	4b08      	ldr	r3, [pc, #32]	; (80006ec <setKeyBytes+0x80>)
 80006ca:	719a      	strb	r2, [r3, #6]
}
 80006cc:	e007      	b.n	80006de <setKeyBytes+0x72>
	} else if(HIDKeyboardReport.K6 == 0){
 80006ce:	4b07      	ldr	r3, [pc, #28]	; (80006ec <setKeyBytes+0x80>)
 80006d0:	79db      	ldrb	r3, [r3, #7]
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d103      	bne.n	80006de <setKeyBytes+0x72>
		HIDKeyboardReport.K6 = *code;
 80006d6:	687b      	ldr	r3, [r7, #4]
 80006d8:	781a      	ldrb	r2, [r3, #0]
 80006da:	4b04      	ldr	r3, [pc, #16]	; (80006ec <setKeyBytes+0x80>)
 80006dc:	71da      	strb	r2, [r3, #7]
}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	20000164 	.word	0x20000164

080006f0 <clearReport>:
			setHeld(i, 0);
		}
	}
}

void clearReport(void){
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
	HIDKeyboardReport.MOD = 0;
 80006f4:	4b0c      	ldr	r3, [pc, #48]	; (8000728 <clearReport+0x38>)
 80006f6:	2200      	movs	r2, #0
 80006f8:	701a      	strb	r2, [r3, #0]
	HIDKeyboardReport.K1 = 0;
 80006fa:	4b0b      	ldr	r3, [pc, #44]	; (8000728 <clearReport+0x38>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	709a      	strb	r2, [r3, #2]
	HIDKeyboardReport.K2 = 0;
 8000700:	4b09      	ldr	r3, [pc, #36]	; (8000728 <clearReport+0x38>)
 8000702:	2200      	movs	r2, #0
 8000704:	70da      	strb	r2, [r3, #3]
	HIDKeyboardReport.K3 = 0;
 8000706:	4b08      	ldr	r3, [pc, #32]	; (8000728 <clearReport+0x38>)
 8000708:	2200      	movs	r2, #0
 800070a:	711a      	strb	r2, [r3, #4]
	HIDKeyboardReport.K4 = 0;
 800070c:	4b06      	ldr	r3, [pc, #24]	; (8000728 <clearReport+0x38>)
 800070e:	2200      	movs	r2, #0
 8000710:	715a      	strb	r2, [r3, #5]
	HIDKeyboardReport.K5 = 0;
 8000712:	4b05      	ldr	r3, [pc, #20]	; (8000728 <clearReport+0x38>)
 8000714:	2200      	movs	r2, #0
 8000716:	719a      	strb	r2, [r3, #6]
	HIDKeyboardReport.K6 = 0;
 8000718:	4b03      	ldr	r3, [pc, #12]	; (8000728 <clearReport+0x38>)
 800071a:	2200      	movs	r2, #0
 800071c:	71da      	strb	r2, [r3, #7]
}
 800071e:	bf00      	nop
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr
 8000728:	20000164 	.word	0x20000164

0800072c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	b082      	sub	sp, #8
 8000730:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000732:	f000 fa6d 	bl	8000c10 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000736:	f000 f817 	bl	8000768 <SystemClock_Config>


  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800073a:	f000 f8df 	bl	80008fc <MX_GPIO_Init>
  MX_ADC1_Init();
 800073e:	f000 f87d 	bl	800083c <MX_ADC1_Init>
  MX_USB_DEVICE_Init();
 8000742:	f006 f99f 	bl	8006a84 <MX_USB_DEVICE_Init>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  testMain(&testStick);
 8000746:	463b      	mov	r3, r7
 8000748:	4618      	mov	r0, r3
 800074a:	f7ff ff71 	bl	8000630 <testMain>
	  		} else{
				setHeld(1, 0);
			}

*/
	  USBD_HID_SendReport(&hUsbDeviceFS, &HIDKeyboardReport, sizeof(HIDKeyboardReport));
 800074e:	2208      	movs	r2, #8
 8000750:	4903      	ldr	r1, [pc, #12]	; (8000760 <main+0x34>)
 8000752:	4804      	ldr	r0, [pc, #16]	; (8000764 <main+0x38>)
 8000754:	f004 fe1c 	bl	8005390 <USBD_HID_SendReport>
  	  clearReport();
 8000758:	f7ff ffca 	bl	80006f0 <clearReport>
	  testMain(&testStick);
 800075c:	e7f3      	b.n	8000746 <main+0x1a>
 800075e:	bf00      	nop
 8000760:	20000164 	.word	0x20000164
 8000764:	200001bc 	.word	0x200001bc

08000768 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000768:	b580      	push	{r7, lr}
 800076a:	b094      	sub	sp, #80	; 0x50
 800076c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800076e:	f107 0320 	add.w	r3, r7, #32
 8000772:	2230      	movs	r2, #48	; 0x30
 8000774:	2100      	movs	r1, #0
 8000776:	4618      	mov	r0, r3
 8000778:	f006 fdd6 	bl	8007328 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800077c:	f107 030c 	add.w	r3, r7, #12
 8000780:	2200      	movs	r2, #0
 8000782:	601a      	str	r2, [r3, #0]
 8000784:	605a      	str	r2, [r3, #4]
 8000786:	609a      	str	r2, [r3, #8]
 8000788:	60da      	str	r2, [r3, #12]
 800078a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800078c:	2300      	movs	r3, #0
 800078e:	60bb      	str	r3, [r7, #8]
 8000790:	4b28      	ldr	r3, [pc, #160]	; (8000834 <SystemClock_Config+0xcc>)
 8000792:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000794:	4a27      	ldr	r2, [pc, #156]	; (8000834 <SystemClock_Config+0xcc>)
 8000796:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800079a:	6413      	str	r3, [r2, #64]	; 0x40
 800079c:	4b25      	ldr	r3, [pc, #148]	; (8000834 <SystemClock_Config+0xcc>)
 800079e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80007a4:	60bb      	str	r3, [r7, #8]
 80007a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80007a8:	2300      	movs	r3, #0
 80007aa:	607b      	str	r3, [r7, #4]
 80007ac:	4b22      	ldr	r3, [pc, #136]	; (8000838 <SystemClock_Config+0xd0>)
 80007ae:	681b      	ldr	r3, [r3, #0]
 80007b0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80007b4:	4a20      	ldr	r2, [pc, #128]	; (8000838 <SystemClock_Config+0xd0>)
 80007b6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80007ba:	6013      	str	r3, [r2, #0]
 80007bc:	4b1e      	ldr	r3, [pc, #120]	; (8000838 <SystemClock_Config+0xd0>)
 80007be:	681b      	ldr	r3, [r3, #0]
 80007c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80007c4:	607b      	str	r3, [r7, #4]
 80007c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80007c8:	2301      	movs	r3, #1
 80007ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80007cc:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80007d0:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007d2:	2302      	movs	r3, #2
 80007d4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80007d6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80007da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 80007dc:	230f      	movs	r3, #15
 80007de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 80007e0:	2390      	movs	r3, #144	; 0x90
 80007e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80007e4:	2302      	movs	r3, #2
 80007e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 80007e8:	2305      	movs	r3, #5
 80007ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007ec:	f107 0320 	add.w	r3, r7, #32
 80007f0:	4618      	mov	r0, r3
 80007f2:	f002 fb99 	bl	8002f28 <HAL_RCC_OscConfig>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <SystemClock_Config+0x98>
  {
    Error_Handler();
 80007fc:	f000 f90a 	bl	8000a14 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000800:	230f      	movs	r3, #15
 8000802:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000804:	2301      	movs	r3, #1
 8000806:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000808:	2300      	movs	r3, #0
 800080a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800080c:	2300      	movs	r3, #0
 800080e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000810:	2300      	movs	r3, #0
 8000812:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000814:	f107 030c 	add.w	r3, r7, #12
 8000818:	2100      	movs	r1, #0
 800081a:	4618      	mov	r0, r3
 800081c:	f002 fdfc 	bl	8003418 <HAL_RCC_ClockConfig>
 8000820:	4603      	mov	r3, r0
 8000822:	2b00      	cmp	r3, #0
 8000824:	d001      	beq.n	800082a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000826:	f000 f8f5 	bl	8000a14 <Error_Handler>
  }
}
 800082a:	bf00      	nop
 800082c:	3750      	adds	r7, #80	; 0x50
 800082e:	46bd      	mov	sp, r7
 8000830:	bd80      	pop	{r7, pc}
 8000832:	bf00      	nop
 8000834:	40023800 	.word	0x40023800
 8000838:	40007000 	.word	0x40007000

0800083c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000842:	463b      	mov	r3, r7
 8000844:	2200      	movs	r2, #0
 8000846:	601a      	str	r2, [r3, #0]
 8000848:	605a      	str	r2, [r3, #4]
 800084a:	609a      	str	r2, [r3, #8]
 800084c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800084e:	4b28      	ldr	r3, [pc, #160]	; (80008f0 <MX_ADC1_Init+0xb4>)
 8000850:	4a28      	ldr	r2, [pc, #160]	; (80008f4 <MX_ADC1_Init+0xb8>)
 8000852:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000854:	4b26      	ldr	r3, [pc, #152]	; (80008f0 <MX_ADC1_Init+0xb4>)
 8000856:	2200      	movs	r2, #0
 8000858:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800085a:	4b25      	ldr	r3, [pc, #148]	; (80008f0 <MX_ADC1_Init+0xb4>)
 800085c:	2200      	movs	r2, #0
 800085e:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000860:	4b23      	ldr	r3, [pc, #140]	; (80008f0 <MX_ADC1_Init+0xb4>)
 8000862:	2201      	movs	r2, #1
 8000864:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000866:	4b22      	ldr	r3, [pc, #136]	; (80008f0 <MX_ADC1_Init+0xb4>)
 8000868:	2200      	movs	r2, #0
 800086a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800086c:	4b20      	ldr	r3, [pc, #128]	; (80008f0 <MX_ADC1_Init+0xb4>)
 800086e:	2200      	movs	r2, #0
 8000870:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000874:	4b1e      	ldr	r3, [pc, #120]	; (80008f0 <MX_ADC1_Init+0xb4>)
 8000876:	2200      	movs	r2, #0
 8000878:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800087a:	4b1d      	ldr	r3, [pc, #116]	; (80008f0 <MX_ADC1_Init+0xb4>)
 800087c:	4a1e      	ldr	r2, [pc, #120]	; (80008f8 <MX_ADC1_Init+0xbc>)
 800087e:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000880:	4b1b      	ldr	r3, [pc, #108]	; (80008f0 <MX_ADC1_Init+0xb4>)
 8000882:	2200      	movs	r2, #0
 8000884:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 8000886:	4b1a      	ldr	r3, [pc, #104]	; (80008f0 <MX_ADC1_Init+0xb4>)
 8000888:	2202      	movs	r2, #2
 800088a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800088c:	4b18      	ldr	r3, [pc, #96]	; (80008f0 <MX_ADC1_Init+0xb4>)
 800088e:	2200      	movs	r2, #0
 8000890:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000894:	4b16      	ldr	r3, [pc, #88]	; (80008f0 <MX_ADC1_Init+0xb4>)
 8000896:	2201      	movs	r2, #1
 8000898:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800089a:	4815      	ldr	r0, [pc, #84]	; (80008f0 <MX_ADC1_Init+0xb4>)
 800089c:	f000 fa4e 	bl	8000d3c <HAL_ADC_Init>
 80008a0:	4603      	mov	r3, r0
 80008a2:	2b00      	cmp	r3, #0
 80008a4:	d001      	beq.n	80008aa <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80008a6:	f000 f8b5 	bl	8000a14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80008aa:	2308      	movs	r3, #8
 80008ac:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80008ae:	2301      	movs	r3, #1
 80008b0:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80008b2:	2300      	movs	r3, #0
 80008b4:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008b6:	463b      	mov	r3, r7
 80008b8:	4619      	mov	r1, r3
 80008ba:	480d      	ldr	r0, [pc, #52]	; (80008f0 <MX_ADC1_Init+0xb4>)
 80008bc:	f000 fc02 	bl	80010c4 <HAL_ADC_ConfigChannel>
 80008c0:	4603      	mov	r3, r0
 80008c2:	2b00      	cmp	r3, #0
 80008c4:	d001      	beq.n	80008ca <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80008c6:	f000 f8a5 	bl	8000a14 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_9;
 80008ca:	2309      	movs	r3, #9
 80008cc:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80008ce:	2302      	movs	r3, #2
 80008d0:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80008d2:	463b      	mov	r3, r7
 80008d4:	4619      	mov	r1, r3
 80008d6:	4806      	ldr	r0, [pc, #24]	; (80008f0 <MX_ADC1_Init+0xb4>)
 80008d8:	f000 fbf4 	bl	80010c4 <HAL_ADC_ConfigChannel>
 80008dc:	4603      	mov	r3, r0
 80008de:	2b00      	cmp	r3, #0
 80008e0:	d001      	beq.n	80008e6 <MX_ADC1_Init+0xaa>
  {
    Error_Handler();
 80008e2:	f000 f897 	bl	8000a14 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80008e6:	bf00      	nop
 80008e8:	3710      	adds	r7, #16
 80008ea:	46bd      	mov	sp, r7
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	2000016c 	.word	0x2000016c
 80008f4:	40012000 	.word	0x40012000
 80008f8:	0f000001 	.word	0x0f000001

080008fc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008fc:	b580      	push	{r7, lr}
 80008fe:	b08a      	sub	sp, #40	; 0x28
 8000900:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000902:	f107 0314 	add.w	r3, r7, #20
 8000906:	2200      	movs	r2, #0
 8000908:	601a      	str	r2, [r3, #0]
 800090a:	605a      	str	r2, [r3, #4]
 800090c:	609a      	str	r2, [r3, #8]
 800090e:	60da      	str	r2, [r3, #12]
 8000910:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	613b      	str	r3, [r7, #16]
 8000916:	4b3b      	ldr	r3, [pc, #236]	; (8000a04 <MX_GPIO_Init+0x108>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a3a      	ldr	r2, [pc, #232]	; (8000a04 <MX_GPIO_Init+0x108>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b38      	ldr	r3, [pc, #224]	; (8000a04 <MX_GPIO_Init+0x108>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800092e:	2300      	movs	r3, #0
 8000930:	60fb      	str	r3, [r7, #12]
 8000932:	4b34      	ldr	r3, [pc, #208]	; (8000a04 <MX_GPIO_Init+0x108>)
 8000934:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000936:	4a33      	ldr	r2, [pc, #204]	; (8000a04 <MX_GPIO_Init+0x108>)
 8000938:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800093c:	6313      	str	r3, [r2, #48]	; 0x30
 800093e:	4b31      	ldr	r3, [pc, #196]	; (8000a04 <MX_GPIO_Init+0x108>)
 8000940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000942:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000946:	60fb      	str	r3, [r7, #12]
 8000948:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800094a:	2300      	movs	r3, #0
 800094c:	60bb      	str	r3, [r7, #8]
 800094e:	4b2d      	ldr	r3, [pc, #180]	; (8000a04 <MX_GPIO_Init+0x108>)
 8000950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000952:	4a2c      	ldr	r2, [pc, #176]	; (8000a04 <MX_GPIO_Init+0x108>)
 8000954:	f043 0301 	orr.w	r3, r3, #1
 8000958:	6313      	str	r3, [r2, #48]	; 0x30
 800095a:	4b2a      	ldr	r3, [pc, #168]	; (8000a04 <MX_GPIO_Init+0x108>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	f003 0301 	and.w	r3, r3, #1
 8000962:	60bb      	str	r3, [r7, #8]
 8000964:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000966:	2300      	movs	r3, #0
 8000968:	607b      	str	r3, [r7, #4]
 800096a:	4b26      	ldr	r3, [pc, #152]	; (8000a04 <MX_GPIO_Init+0x108>)
 800096c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096e:	4a25      	ldr	r2, [pc, #148]	; (8000a04 <MX_GPIO_Init+0x108>)
 8000970:	f043 0302 	orr.w	r3, r3, #2
 8000974:	6313      	str	r3, [r2, #48]	; 0x30
 8000976:	4b23      	ldr	r3, [pc, #140]	; (8000a04 <MX_GPIO_Init+0x108>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	f003 0302 	and.w	r3, r3, #2
 800097e:	607b      	str	r3, [r7, #4]
 8000980:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_13, GPIO_PIN_RESET);
 8000982:	2200      	movs	r2, #0
 8000984:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000988:	481f      	ldr	r0, [pc, #124]	; (8000a08 <MX_GPIO_Init+0x10c>)
 800098a:	f001 f84f 	bl	8001a2c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800098e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000992:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000994:	2301      	movs	r3, #1
 8000996:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000998:	2300      	movs	r3, #0
 800099a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80009a0:	f107 0314 	add.w	r3, r7, #20
 80009a4:	4619      	mov	r1, r3
 80009a6:	4818      	ldr	r0, [pc, #96]	; (8000a08 <MX_GPIO_Init+0x10c>)
 80009a8:	f000 febc 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : L_T_key_Pin R_T_key_Pin R_I_Pin L_r_Pin
                           L_m_Pin */
  GPIO_InitStruct.Pin = L_T_key_Pin|R_T_key_Pin|R_I_Pin|L_r_Pin
 80009ac:	f44f 63dc 	mov.w	r3, #1760	; 0x6e0
 80009b0:	617b      	str	r3, [r7, #20]
                          |L_m_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009b2:	2300      	movs	r3, #0
 80009b4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009b6:	2302      	movs	r3, #2
 80009b8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ba:	f107 0314 	add.w	r3, r7, #20
 80009be:	4619      	mov	r1, r3
 80009c0:	4812      	ldr	r0, [pc, #72]	; (8000a0c <MX_GPIO_Init+0x110>)
 80009c2:	f000 feaf 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : R_P_Pin L_i_Pin L_p_Pin */
  GPIO_InitStruct.Pin = R_P_Pin|L_i_Pin|L_p_Pin;
 80009c6:	f248 4304 	movw	r3, #33796	; 0x8404
 80009ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009cc:	2300      	movs	r3, #0
 80009ce:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80009d0:	2302      	movs	r3, #2
 80009d2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009d4:	f107 0314 	add.w	r3, r7, #20
 80009d8:	4619      	mov	r1, r3
 80009da:	480d      	ldr	r0, [pc, #52]	; (8000a10 <MX_GPIO_Init+0x114>)
 80009dc:	f000 fea2 	bl	8001724 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 PB6
                           PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6
 80009e0:	f44f 737e 	mov.w	r3, #1016	; 0x3f8
 80009e4:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009ea:	2301      	movs	r3, #1
 80009ec:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009ee:	f107 0314 	add.w	r3, r7, #20
 80009f2:	4619      	mov	r1, r3
 80009f4:	4806      	ldr	r0, [pc, #24]	; (8000a10 <MX_GPIO_Init+0x114>)
 80009f6:	f000 fe95 	bl	8001724 <HAL_GPIO_Init>

}
 80009fa:	bf00      	nop
 80009fc:	3728      	adds	r7, #40	; 0x28
 80009fe:	46bd      	mov	sp, r7
 8000a00:	bd80      	pop	{r7, pc}
 8000a02:	bf00      	nop
 8000a04:	40023800 	.word	0x40023800
 8000a08:	40020800 	.word	0x40020800
 8000a0c:	40020000 	.word	0x40020000
 8000a10:	40020400 	.word	0x40020400

08000a14 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a18:	b672      	cpsid	i
}
 8000a1a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a1c:	e7fe      	b.n	8000a1c <Error_Handler+0x8>
	...

08000a20 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a20:	b480      	push	{r7}
 8000a22:	b083      	sub	sp, #12
 8000a24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a26:	2300      	movs	r3, #0
 8000a28:	607b      	str	r3, [r7, #4]
 8000a2a:	4b10      	ldr	r3, [pc, #64]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a2e:	4a0f      	ldr	r2, [pc, #60]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a30:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a34:	6453      	str	r3, [r2, #68]	; 0x44
 8000a36:	4b0d      	ldr	r3, [pc, #52]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a3a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000a3e:	607b      	str	r3, [r7, #4]
 8000a40:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000a42:	2300      	movs	r3, #0
 8000a44:	603b      	str	r3, [r7, #0]
 8000a46:	4b09      	ldr	r3, [pc, #36]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a4a:	4a08      	ldr	r2, [pc, #32]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a4c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000a50:	6413      	str	r3, [r2, #64]	; 0x40
 8000a52:	4b06      	ldr	r3, [pc, #24]	; (8000a6c <HAL_MspInit+0x4c>)
 8000a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a56:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000a5a:	603b      	str	r3, [r7, #0]
 8000a5c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000a5e:	bf00      	nop
 8000a60:	370c      	adds	r7, #12
 8000a62:	46bd      	mov	sp, r7
 8000a64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a68:	4770      	bx	lr
 8000a6a:	bf00      	nop
 8000a6c:	40023800 	.word	0x40023800

08000a70 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b08a      	sub	sp, #40	; 0x28
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a78:	f107 0314 	add.w	r3, r7, #20
 8000a7c:	2200      	movs	r2, #0
 8000a7e:	601a      	str	r2, [r3, #0]
 8000a80:	605a      	str	r2, [r3, #4]
 8000a82:	609a      	str	r2, [r3, #8]
 8000a84:	60da      	str	r2, [r3, #12]
 8000a86:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	4a24      	ldr	r2, [pc, #144]	; (8000b20 <HAL_ADC_MspInit+0xb0>)
 8000a8e:	4293      	cmp	r3, r2
 8000a90:	d141      	bne.n	8000b16 <HAL_ADC_MspInit+0xa6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000a92:	2300      	movs	r3, #0
 8000a94:	613b      	str	r3, [r7, #16]
 8000a96:	4b23      	ldr	r3, [pc, #140]	; (8000b24 <HAL_ADC_MspInit+0xb4>)
 8000a98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a9a:	4a22      	ldr	r2, [pc, #136]	; (8000b24 <HAL_ADC_MspInit+0xb4>)
 8000a9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000aa0:	6453      	str	r3, [r2, #68]	; 0x44
 8000aa2:	4b20      	ldr	r3, [pc, #128]	; (8000b24 <HAL_ADC_MspInit+0xb4>)
 8000aa4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000aaa:	613b      	str	r3, [r7, #16]
 8000aac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000aae:	2300      	movs	r3, #0
 8000ab0:	60fb      	str	r3, [r7, #12]
 8000ab2:	4b1c      	ldr	r3, [pc, #112]	; (8000b24 <HAL_ADC_MspInit+0xb4>)
 8000ab4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ab6:	4a1b      	ldr	r2, [pc, #108]	; (8000b24 <HAL_ADC_MspInit+0xb4>)
 8000ab8:	f043 0301 	orr.w	r3, r3, #1
 8000abc:	6313      	str	r3, [r2, #48]	; 0x30
 8000abe:	4b19      	ldr	r3, [pc, #100]	; (8000b24 <HAL_ADC_MspInit+0xb4>)
 8000ac0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac2:	f003 0301 	and.w	r3, r3, #1
 8000ac6:	60fb      	str	r3, [r7, #12]
 8000ac8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000aca:	2300      	movs	r3, #0
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	4b15      	ldr	r3, [pc, #84]	; (8000b24 <HAL_ADC_MspInit+0xb4>)
 8000ad0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ad2:	4a14      	ldr	r2, [pc, #80]	; (8000b24 <HAL_ADC_MspInit+0xb4>)
 8000ad4:	f043 0302 	orr.w	r3, r3, #2
 8000ad8:	6313      	str	r3, [r2, #48]	; 0x30
 8000ada:	4b12      	ldr	r3, [pc, #72]	; (8000b24 <HAL_ADC_MspInit+0xb4>)
 8000adc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ade:	f003 0302 	and.w	r3, r3, #2
 8000ae2:	60bb      	str	r3, [r7, #8]
 8000ae4:	68bb      	ldr	r3, [r7, #8]
    PA3     ------> ADC1_IN3
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8
    PB1     ------> ADC1_IN9
    */
    GPIO_InitStruct.Pin = RT_LR_Pin|LT_LR_Pin|LT_UD_Pin;
 8000ae6:	231c      	movs	r3, #28
 8000ae8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000aea:	2303      	movs	r3, #3
 8000aec:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aee:	2300      	movs	r3, #0
 8000af0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000af2:	f107 0314 	add.w	r3, r7, #20
 8000af6:	4619      	mov	r1, r3
 8000af8:	480b      	ldr	r0, [pc, #44]	; (8000b28 <HAL_ADC_MspInit+0xb8>)
 8000afa:	f000 fe13 	bl	8001724 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8000afe:	2303      	movs	r3, #3
 8000b00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000b02:	2303      	movs	r3, #3
 8000b04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b06:	2300      	movs	r3, #0
 8000b08:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b0a:	f107 0314 	add.w	r3, r7, #20
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4806      	ldr	r0, [pc, #24]	; (8000b2c <HAL_ADC_MspInit+0xbc>)
 8000b12:	f000 fe07 	bl	8001724 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000b16:	bf00      	nop
 8000b18:	3728      	adds	r7, #40	; 0x28
 8000b1a:	46bd      	mov	sp, r7
 8000b1c:	bd80      	pop	{r7, pc}
 8000b1e:	bf00      	nop
 8000b20:	40012000 	.word	0x40012000
 8000b24:	40023800 	.word	0x40023800
 8000b28:	40020000 	.word	0x40020000
 8000b2c:	40020400 	.word	0x40020400

08000b30 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000b34:	e7fe      	b.n	8000b34 <NMI_Handler+0x4>

08000b36 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000b36:	b480      	push	{r7}
 8000b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000b3a:	e7fe      	b.n	8000b3a <HardFault_Handler+0x4>

08000b3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000b40:	e7fe      	b.n	8000b40 <MemManage_Handler+0x4>

08000b42 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000b42:	b480      	push	{r7}
 8000b44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000b46:	e7fe      	b.n	8000b46 <BusFault_Handler+0x4>

08000b48 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000b48:	b480      	push	{r7}
 8000b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000b4c:	e7fe      	b.n	8000b4c <UsageFault_Handler+0x4>

08000b4e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000b4e:	b480      	push	{r7}
 8000b50:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000b52:	bf00      	nop
 8000b54:	46bd      	mov	sp, r7
 8000b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5a:	4770      	bx	lr

08000b5c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b60:	bf00      	nop
 8000b62:	46bd      	mov	sp, r7
 8000b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b68:	4770      	bx	lr

08000b6a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b6a:	b480      	push	{r7}
 8000b6c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b6e:	bf00      	nop
 8000b70:	46bd      	mov	sp, r7
 8000b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b76:	4770      	bx	lr

08000b78 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b7c:	f000 f89a 	bl	8000cb4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b80:	bf00      	nop
 8000b82:	bd80      	pop	{r7, pc}

08000b84 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000b88:	4802      	ldr	r0, [pc, #8]	; (8000b94 <OTG_FS_IRQHandler+0x10>)
 8000b8a:	f001 f8b8 	bl	8001cfe <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000b8e:	bf00      	nop
 8000b90:	bd80      	pop	{r7, pc}
 8000b92:	bf00      	nop
 8000b94:	20000698 	.word	0x20000698

08000b98 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b98:	b480      	push	{r7}
 8000b9a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b9c:	4b06      	ldr	r3, [pc, #24]	; (8000bb8 <SystemInit+0x20>)
 8000b9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ba2:	4a05      	ldr	r2, [pc, #20]	; (8000bb8 <SystemInit+0x20>)
 8000ba4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ba8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000bac:	bf00      	nop
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop
 8000bb8:	e000ed00 	.word	0xe000ed00

08000bbc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000bbc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000bf4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000bc0:	480d      	ldr	r0, [pc, #52]	; (8000bf8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000bc2:	490e      	ldr	r1, [pc, #56]	; (8000bfc <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000bc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000bc8:	e002      	b.n	8000bd0 <LoopCopyDataInit>

08000bca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000bca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000bcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000bce:	3304      	adds	r3, #4

08000bd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000bd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000bd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000bd4:	d3f9      	bcc.n	8000bca <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000bd6:	4a0b      	ldr	r2, [pc, #44]	; (8000c04 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000bd8:	4c0b      	ldr	r4, [pc, #44]	; (8000c08 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000bda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000bdc:	e001      	b.n	8000be2 <LoopFillZerobss>

08000bde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000bde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000be0:	3204      	adds	r2, #4

08000be2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000be2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000be4:	d3fb      	bcc.n	8000bde <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000be6:	f7ff ffd7 	bl	8000b98 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000bea:	f006 fb79 	bl	80072e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000bee:	f7ff fd9d 	bl	800072c <main>
  bx  lr    
 8000bf2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000bf4:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000bf8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000bfc:	20000138 	.word	0x20000138
  ldr r2, =_sidata
 8000c00:	080073b8 	.word	0x080073b8
  ldr r2, =_sbss
 8000c04:	20000138 	.word	0x20000138
  ldr r4, =_ebss
 8000c08:	20000bb8 	.word	0x20000bb8

08000c0c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000c0c:	e7fe      	b.n	8000c0c <ADC_IRQHandler>
	...

08000c10 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000c14:	4b0e      	ldr	r3, [pc, #56]	; (8000c50 <HAL_Init+0x40>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	4a0d      	ldr	r2, [pc, #52]	; (8000c50 <HAL_Init+0x40>)
 8000c1a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000c1e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000c20:	4b0b      	ldr	r3, [pc, #44]	; (8000c50 <HAL_Init+0x40>)
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a0a      	ldr	r2, [pc, #40]	; (8000c50 <HAL_Init+0x40>)
 8000c26:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000c2a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000c2c:	4b08      	ldr	r3, [pc, #32]	; (8000c50 <HAL_Init+0x40>)
 8000c2e:	681b      	ldr	r3, [r3, #0]
 8000c30:	4a07      	ldr	r2, [pc, #28]	; (8000c50 <HAL_Init+0x40>)
 8000c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c36:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000c38:	2003      	movs	r0, #3
 8000c3a:	f000 fd31 	bl	80016a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000c3e:	200f      	movs	r0, #15
 8000c40:	f000 f808 	bl	8000c54 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000c44:	f7ff feec 	bl	8000a20 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000c48:	2300      	movs	r3, #0
}
 8000c4a:	4618      	mov	r0, r3
 8000c4c:	bd80      	pop	{r7, pc}
 8000c4e:	bf00      	nop
 8000c50:	40023c00 	.word	0x40023c00

08000c54 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000c5c:	4b12      	ldr	r3, [pc, #72]	; (8000ca8 <HAL_InitTick+0x54>)
 8000c5e:	681a      	ldr	r2, [r3, #0]
 8000c60:	4b12      	ldr	r3, [pc, #72]	; (8000cac <HAL_InitTick+0x58>)
 8000c62:	781b      	ldrb	r3, [r3, #0]
 8000c64:	4619      	mov	r1, r3
 8000c66:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c6a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c6e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c72:	4618      	mov	r0, r3
 8000c74:	f000 fd49 	bl	800170a <HAL_SYSTICK_Config>
 8000c78:	4603      	mov	r3, r0
 8000c7a:	2b00      	cmp	r3, #0
 8000c7c:	d001      	beq.n	8000c82 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c7e:	2301      	movs	r3, #1
 8000c80:	e00e      	b.n	8000ca0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c82:	687b      	ldr	r3, [r7, #4]
 8000c84:	2b0f      	cmp	r3, #15
 8000c86:	d80a      	bhi.n	8000c9e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c88:	2200      	movs	r2, #0
 8000c8a:	6879      	ldr	r1, [r7, #4]
 8000c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8000c90:	f000 fd11 	bl	80016b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c94:	4a06      	ldr	r2, [pc, #24]	; (8000cb0 <HAL_InitTick+0x5c>)
 8000c96:	687b      	ldr	r3, [r7, #4]
 8000c98:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	e000      	b.n	8000ca0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c9e:	2301      	movs	r3, #1
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3708      	adds	r7, #8
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	bd80      	pop	{r7, pc}
 8000ca8:	20000028 	.word	0x20000028
 8000cac:	20000030 	.word	0x20000030
 8000cb0:	2000002c 	.word	0x2000002c

08000cb4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000cb8:	4b06      	ldr	r3, [pc, #24]	; (8000cd4 <HAL_IncTick+0x20>)
 8000cba:	781b      	ldrb	r3, [r3, #0]
 8000cbc:	461a      	mov	r2, r3
 8000cbe:	4b06      	ldr	r3, [pc, #24]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4413      	add	r3, r2
 8000cc4:	4a04      	ldr	r2, [pc, #16]	; (8000cd8 <HAL_IncTick+0x24>)
 8000cc6:	6013      	str	r3, [r2, #0]
}
 8000cc8:	bf00      	nop
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd0:	4770      	bx	lr
 8000cd2:	bf00      	nop
 8000cd4:	20000030 	.word	0x20000030
 8000cd8:	200001b4 	.word	0x200001b4

08000cdc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000cdc:	b480      	push	{r7}
 8000cde:	af00      	add	r7, sp, #0
  return uwTick;
 8000ce0:	4b03      	ldr	r3, [pc, #12]	; (8000cf0 <HAL_GetTick+0x14>)
 8000ce2:	681b      	ldr	r3, [r3, #0]
}
 8000ce4:	4618      	mov	r0, r3
 8000ce6:	46bd      	mov	sp, r7
 8000ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cec:	4770      	bx	lr
 8000cee:	bf00      	nop
 8000cf0:	200001b4 	.word	0x200001b4

08000cf4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	b084      	sub	sp, #16
 8000cf8:	af00      	add	r7, sp, #0
 8000cfa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000cfc:	f7ff ffee 	bl	8000cdc <HAL_GetTick>
 8000d00:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000d02:	687b      	ldr	r3, [r7, #4]
 8000d04:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000d06:	68fb      	ldr	r3, [r7, #12]
 8000d08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000d0c:	d005      	beq.n	8000d1a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000d0e:	4b0a      	ldr	r3, [pc, #40]	; (8000d38 <HAL_Delay+0x44>)
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	461a      	mov	r2, r3
 8000d14:	68fb      	ldr	r3, [r7, #12]
 8000d16:	4413      	add	r3, r2
 8000d18:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000d1a:	bf00      	nop
 8000d1c:	f7ff ffde 	bl	8000cdc <HAL_GetTick>
 8000d20:	4602      	mov	r2, r0
 8000d22:	68bb      	ldr	r3, [r7, #8]
 8000d24:	1ad3      	subs	r3, r2, r3
 8000d26:	68fa      	ldr	r2, [r7, #12]
 8000d28:	429a      	cmp	r2, r3
 8000d2a:	d8f7      	bhi.n	8000d1c <HAL_Delay+0x28>
  {
  }
}
 8000d2c:	bf00      	nop
 8000d2e:	bf00      	nop
 8000d30:	3710      	adds	r7, #16
 8000d32:	46bd      	mov	sp, r7
 8000d34:	bd80      	pop	{r7, pc}
 8000d36:	bf00      	nop
 8000d38:	20000030 	.word	0x20000030

08000d3c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000d3c:	b580      	push	{r7, lr}
 8000d3e:	b084      	sub	sp, #16
 8000d40:	af00      	add	r7, sp, #0
 8000d42:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d44:	2300      	movs	r3, #0
 8000d46:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d101      	bne.n	8000d52 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	e033      	b.n	8000dba <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8000d52:	687b      	ldr	r3, [r7, #4]
 8000d54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d56:	2b00      	cmp	r3, #0
 8000d58:	d109      	bne.n	8000d6e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000d5a:	6878      	ldr	r0, [r7, #4]
 8000d5c:	f7ff fe88 	bl	8000a70 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	2200      	movs	r2, #0
 8000d64:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000d66:	687b      	ldr	r3, [r7, #4]
 8000d68:	2200      	movs	r2, #0
 8000d6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d72:	f003 0310 	and.w	r3, r3, #16
 8000d76:	2b00      	cmp	r3, #0
 8000d78:	d118      	bne.n	8000dac <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d7e:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000d82:	f023 0302 	bic.w	r3, r3, #2
 8000d86:	f043 0202 	orr.w	r2, r3, #2
 8000d8a:	687b      	ldr	r3, [r7, #4]
 8000d8c:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8000d8e:	6878      	ldr	r0, [r7, #4]
 8000d90:	f000 faba 	bl	8001308 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	2200      	movs	r2, #0
 8000d98:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000d9a:	687b      	ldr	r3, [r7, #4]
 8000d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d9e:	f023 0303 	bic.w	r3, r3, #3
 8000da2:	f043 0201 	orr.w	r2, r3, #1
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	641a      	str	r2, [r3, #64]	; 0x40
 8000daa:	e001      	b.n	8000db0 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000dac:	2301      	movs	r3, #1
 8000dae:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8000db0:	687b      	ldr	r3, [r7, #4]
 8000db2:	2200      	movs	r2, #0
 8000db4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8000db8:	7bfb      	ldrb	r3, [r7, #15]
}
 8000dba:	4618      	mov	r0, r3
 8000dbc:	3710      	adds	r7, #16
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	bd80      	pop	{r7, pc}
	...

08000dc4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	b085      	sub	sp, #20
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000dd0:	687b      	ldr	r3, [r7, #4]
 8000dd2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000dd6:	2b01      	cmp	r3, #1
 8000dd8:	d101      	bne.n	8000dde <HAL_ADC_Start+0x1a>
 8000dda:	2302      	movs	r3, #2
 8000ddc:	e097      	b.n	8000f0e <HAL_ADC_Start+0x14a>
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	2201      	movs	r2, #1
 8000de2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8000de6:	687b      	ldr	r3, [r7, #4]
 8000de8:	681b      	ldr	r3, [r3, #0]
 8000dea:	689b      	ldr	r3, [r3, #8]
 8000dec:	f003 0301 	and.w	r3, r3, #1
 8000df0:	2b01      	cmp	r3, #1
 8000df2:	d018      	beq.n	8000e26 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8000df4:	687b      	ldr	r3, [r7, #4]
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	689a      	ldr	r2, [r3, #8]
 8000dfa:	687b      	ldr	r3, [r7, #4]
 8000dfc:	681b      	ldr	r3, [r3, #0]
 8000dfe:	f042 0201 	orr.w	r2, r2, #1
 8000e02:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8000e04:	4b45      	ldr	r3, [pc, #276]	; (8000f1c <HAL_ADC_Start+0x158>)
 8000e06:	681b      	ldr	r3, [r3, #0]
 8000e08:	4a45      	ldr	r2, [pc, #276]	; (8000f20 <HAL_ADC_Start+0x15c>)
 8000e0a:	fba2 2303 	umull	r2, r3, r2, r3
 8000e0e:	0c9a      	lsrs	r2, r3, #18
 8000e10:	4613      	mov	r3, r2
 8000e12:	005b      	lsls	r3, r3, #1
 8000e14:	4413      	add	r3, r2
 8000e16:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e18:	e002      	b.n	8000e20 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8000e1a:	68bb      	ldr	r3, [r7, #8]
 8000e1c:	3b01      	subs	r3, #1
 8000e1e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8000e20:	68bb      	ldr	r3, [r7, #8]
 8000e22:	2b00      	cmp	r3, #0
 8000e24:	d1f9      	bne.n	8000e1a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	681b      	ldr	r3, [r3, #0]
 8000e2a:	689b      	ldr	r3, [r3, #8]
 8000e2c:	f003 0301 	and.w	r3, r3, #1
 8000e30:	2b01      	cmp	r3, #1
 8000e32:	d15f      	bne.n	8000ef4 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8000e34:	687b      	ldr	r3, [r7, #4]
 8000e36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e38:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8000e3c:	f023 0301 	bic.w	r3, r3, #1
 8000e40:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8000e44:	687b      	ldr	r3, [r7, #4]
 8000e46:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	685b      	ldr	r3, [r3, #4]
 8000e4e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000e52:	2b00      	cmp	r3, #0
 8000e54:	d007      	beq.n	8000e66 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e56:	687b      	ldr	r3, [r7, #4]
 8000e58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e5a:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8000e5e:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8000e62:	687b      	ldr	r3, [r7, #4]
 8000e64:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e6a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8000e6e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8000e72:	d106      	bne.n	8000e82 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e74:	687b      	ldr	r3, [r7, #4]
 8000e76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e78:	f023 0206 	bic.w	r2, r3, #6
 8000e7c:	687b      	ldr	r3, [r7, #4]
 8000e7e:	645a      	str	r2, [r3, #68]	; 0x44
 8000e80:	e002      	b.n	8000e88 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000e82:	687b      	ldr	r3, [r7, #4]
 8000e84:	2200      	movs	r2, #0
 8000e86:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000e88:	687b      	ldr	r3, [r7, #4]
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8000e90:	4b24      	ldr	r3, [pc, #144]	; (8000f24 <HAL_ADC_Start+0x160>)
 8000e92:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8000e94:	687b      	ldr	r3, [r7, #4]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8000e9c:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	685b      	ldr	r3, [r3, #4]
 8000ea2:	f003 031f 	and.w	r3, r3, #31
 8000ea6:	2b00      	cmp	r3, #0
 8000ea8:	d10f      	bne.n	8000eca <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	681b      	ldr	r3, [r3, #0]
 8000eae:	689b      	ldr	r3, [r3, #8]
 8000eb0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000eb4:	2b00      	cmp	r3, #0
 8000eb6:	d129      	bne.n	8000f0c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000eb8:	687b      	ldr	r3, [r7, #4]
 8000eba:	681b      	ldr	r3, [r3, #0]
 8000ebc:	689a      	ldr	r2, [r3, #8]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	681b      	ldr	r3, [r3, #0]
 8000ec2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ec6:	609a      	str	r2, [r3, #8]
 8000ec8:	e020      	b.n	8000f0c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	681b      	ldr	r3, [r3, #0]
 8000ece:	4a16      	ldr	r2, [pc, #88]	; (8000f28 <HAL_ADC_Start+0x164>)
 8000ed0:	4293      	cmp	r3, r2
 8000ed2:	d11b      	bne.n	8000f0c <HAL_ADC_Start+0x148>
 8000ed4:	687b      	ldr	r3, [r7, #4]
 8000ed6:	681b      	ldr	r3, [r3, #0]
 8000ed8:	689b      	ldr	r3, [r3, #8]
 8000eda:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8000ede:	2b00      	cmp	r3, #0
 8000ee0:	d114      	bne.n	8000f0c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	689a      	ldr	r2, [r3, #8]
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8000ef0:	609a      	str	r2, [r3, #8]
 8000ef2:	e00b      	b.n	8000f0c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000ef4:	687b      	ldr	r3, [r7, #4]
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	f043 0210 	orr.w	r2, r3, #16
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f00:	687b      	ldr	r3, [r7, #4]
 8000f02:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f04:	f043 0201 	orr.w	r2, r3, #1
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8000f0c:	2300      	movs	r3, #0
}
 8000f0e:	4618      	mov	r0, r3
 8000f10:	3714      	adds	r7, #20
 8000f12:	46bd      	mov	sp, r7
 8000f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	20000028 	.word	0x20000028
 8000f20:	431bde83 	.word	0x431bde83
 8000f24:	40012300 	.word	0x40012300
 8000f28:	40012000 	.word	0x40012000

08000f2c <HAL_ADC_Stop>:
  *         the configuration information for the specified ADC.
  *
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef* hadc)
{
 8000f2c:	b480      	push	{r7}
 8000f2e:	b083      	sub	sp, #12
 8000f30:	af00      	add	r7, sp, #0
 8000f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8000f3a:	2b01      	cmp	r3, #1
 8000f3c:	d101      	bne.n	8000f42 <HAL_ADC_Stop+0x16>
 8000f3e:	2302      	movs	r3, #2
 8000f40:	e021      	b.n	8000f86 <HAL_ADC_Stop+0x5a>
 8000f42:	687b      	ldr	r3, [r7, #4]
 8000f44:	2201      	movs	r2, #1
 8000f46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  __HAL_ADC_DISABLE(hadc);
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	681b      	ldr	r3, [r3, #0]
 8000f4e:	689a      	ldr	r2, [r3, #8]
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	681b      	ldr	r3, [r3, #0]
 8000f54:	f022 0201 	bic.w	r2, r2, #1
 8000f58:	609a      	str	r2, [r3, #8]
  
  /* Check if ADC is effectively disabled */
  if(HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_ADON))
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	689b      	ldr	r3, [r3, #8]
 8000f60:	f003 0301 	and.w	r3, r3, #1
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d109      	bne.n	8000f7c <HAL_ADC_Stop+0x50>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f6c:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8000f70:	f023 0301 	bic.w	r3, r3, #1
 8000f74:	f043 0201 	orr.w	r2, r3, #1
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_READY);
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	2200      	movs	r2, #0
 8000f80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8000f84:	2300      	movs	r3, #0
}
 8000f86:	4618      	mov	r0, r3
 8000f88:	370c      	adds	r7, #12
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f90:	4770      	bx	lr

08000f92 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8000f92:	b580      	push	{r7, lr}
 8000f94:	b084      	sub	sp, #16
 8000f96:	af00      	add	r7, sp, #0
 8000f98:	6078      	str	r0, [r7, #4]
 8000f9a:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8000f9c:	2300      	movs	r3, #0
 8000f9e:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	689b      	ldr	r3, [r3, #8]
 8000fa6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000faa:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8000fae:	d113      	bne.n	8000fd8 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	681b      	ldr	r3, [r3, #0]
 8000fb4:	689b      	ldr	r3, [r3, #8]
 8000fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8000fba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8000fbe:	d10b      	bne.n	8000fd8 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000fc4:	f043 0220 	orr.w	r2, r3, #32
 8000fc8:	687b      	ldr	r3, [r7, #4]
 8000fca:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	2200      	movs	r2, #0
 8000fd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	e063      	b.n	80010a0 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8000fd8:	f7ff fe80 	bl	8000cdc <HAL_GetTick>
 8000fdc:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000fde:	e021      	b.n	8001024 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8000fe0:	683b      	ldr	r3, [r7, #0]
 8000fe2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000fe6:	d01d      	beq.n	8001024 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d007      	beq.n	8000ffe <HAL_ADC_PollForConversion+0x6c>
 8000fee:	f7ff fe75 	bl	8000cdc <HAL_GetTick>
 8000ff2:	4602      	mov	r2, r0
 8000ff4:	68fb      	ldr	r3, [r7, #12]
 8000ff6:	1ad3      	subs	r3, r2, r3
 8000ff8:	683a      	ldr	r2, [r7, #0]
 8000ffa:	429a      	cmp	r2, r3
 8000ffc:	d212      	bcs.n	8001024 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	681b      	ldr	r3, [r3, #0]
 8001002:	681b      	ldr	r3, [r3, #0]
 8001004:	f003 0302 	and.w	r3, r3, #2
 8001008:	2b02      	cmp	r3, #2
 800100a:	d00b      	beq.n	8001024 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001010:	f043 0204 	orr.w	r2, r3, #4
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	2200      	movs	r2, #0
 800101c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001020:	2303      	movs	r3, #3
 8001022:	e03d      	b.n	80010a0 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8001024:	687b      	ldr	r3, [r7, #4]
 8001026:	681b      	ldr	r3, [r3, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	f003 0302 	and.w	r3, r3, #2
 800102e:	2b02      	cmp	r3, #2
 8001030:	d1d6      	bne.n	8000fe0 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001032:	687b      	ldr	r3, [r7, #4]
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	f06f 0212 	mvn.w	r2, #18
 800103a:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001040:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001048:	687b      	ldr	r3, [r7, #4]
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	689b      	ldr	r3, [r3, #8]
 800104e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001052:	2b00      	cmp	r3, #0
 8001054:	d123      	bne.n	800109e <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001056:	687b      	ldr	r3, [r7, #4]
 8001058:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800105a:	2b00      	cmp	r3, #0
 800105c:	d11f      	bne.n	800109e <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800105e:	687b      	ldr	r3, [r7, #4]
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001064:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001068:	2b00      	cmp	r3, #0
 800106a:	d006      	beq.n	800107a <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800106c:	687b      	ldr	r3, [r7, #4]
 800106e:	681b      	ldr	r3, [r3, #0]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001076:	2b00      	cmp	r3, #0
 8001078:	d111      	bne.n	800109e <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800107e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001082:	687b      	ldr	r3, [r7, #4]
 8001084:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800108e:	2b00      	cmp	r3, #0
 8001090:	d105      	bne.n	800109e <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001096:	f043 0201 	orr.w	r2, r3, #1
 800109a:	687b      	ldr	r3, [r7, #4]
 800109c:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 800109e:	2300      	movs	r3, #0
}
 80010a0:	4618      	mov	r0, r3
 80010a2:	3710      	adds	r7, #16
 80010a4:	46bd      	mov	sp, r7
 80010a6:	bd80      	pop	{r7, pc}

080010a8 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80010a8:	b480      	push	{r7}
 80010aa:	b083      	sub	sp, #12
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80010b0:	687b      	ldr	r3, [r7, #4]
 80010b2:	681b      	ldr	r3, [r3, #0]
 80010b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80010b6:	4618      	mov	r0, r3
 80010b8:	370c      	adds	r7, #12
 80010ba:	46bd      	mov	sp, r7
 80010bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c0:	4770      	bx	lr
	...

080010c4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b085      	sub	sp, #20
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010d8:	2b01      	cmp	r3, #1
 80010da:	d101      	bne.n	80010e0 <HAL_ADC_ConfigChannel+0x1c>
 80010dc:	2302      	movs	r3, #2
 80010de:	e105      	b.n	80012ec <HAL_ADC_ConfigChannel+0x228>
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	2201      	movs	r2, #1
 80010e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80010e8:	683b      	ldr	r3, [r7, #0]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	2b09      	cmp	r3, #9
 80010ee:	d925      	bls.n	800113c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80010f0:	687b      	ldr	r3, [r7, #4]
 80010f2:	681b      	ldr	r3, [r3, #0]
 80010f4:	68d9      	ldr	r1, [r3, #12]
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	b29b      	uxth	r3, r3
 80010fc:	461a      	mov	r2, r3
 80010fe:	4613      	mov	r3, r2
 8001100:	005b      	lsls	r3, r3, #1
 8001102:	4413      	add	r3, r2
 8001104:	3b1e      	subs	r3, #30
 8001106:	2207      	movs	r2, #7
 8001108:	fa02 f303 	lsl.w	r3, r2, r3
 800110c:	43da      	mvns	r2, r3
 800110e:	687b      	ldr	r3, [r7, #4]
 8001110:	681b      	ldr	r3, [r3, #0]
 8001112:	400a      	ands	r2, r1
 8001114:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	681b      	ldr	r3, [r3, #0]
 800111a:	68d9      	ldr	r1, [r3, #12]
 800111c:	683b      	ldr	r3, [r7, #0]
 800111e:	689a      	ldr	r2, [r3, #8]
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	b29b      	uxth	r3, r3
 8001126:	4618      	mov	r0, r3
 8001128:	4603      	mov	r3, r0
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4403      	add	r3, r0
 800112e:	3b1e      	subs	r3, #30
 8001130:	409a      	lsls	r2, r3
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	681b      	ldr	r3, [r3, #0]
 8001136:	430a      	orrs	r2, r1
 8001138:	60da      	str	r2, [r3, #12]
 800113a:	e022      	b.n	8001182 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800113c:	687b      	ldr	r3, [r7, #4]
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	6919      	ldr	r1, [r3, #16]
 8001142:	683b      	ldr	r3, [r7, #0]
 8001144:	681b      	ldr	r3, [r3, #0]
 8001146:	b29b      	uxth	r3, r3
 8001148:	461a      	mov	r2, r3
 800114a:	4613      	mov	r3, r2
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	4413      	add	r3, r2
 8001150:	2207      	movs	r2, #7
 8001152:	fa02 f303 	lsl.w	r3, r2, r3
 8001156:	43da      	mvns	r2, r3
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	400a      	ands	r2, r1
 800115e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	6919      	ldr	r1, [r3, #16]
 8001166:	683b      	ldr	r3, [r7, #0]
 8001168:	689a      	ldr	r2, [r3, #8]
 800116a:	683b      	ldr	r3, [r7, #0]
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	b29b      	uxth	r3, r3
 8001170:	4618      	mov	r0, r3
 8001172:	4603      	mov	r3, r0
 8001174:	005b      	lsls	r3, r3, #1
 8001176:	4403      	add	r3, r0
 8001178:	409a      	lsls	r2, r3
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	681b      	ldr	r3, [r3, #0]
 800117e:	430a      	orrs	r2, r1
 8001180:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	2b06      	cmp	r3, #6
 8001188:	d824      	bhi.n	80011d4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001190:	683b      	ldr	r3, [r7, #0]
 8001192:	685a      	ldr	r2, [r3, #4]
 8001194:	4613      	mov	r3, r2
 8001196:	009b      	lsls	r3, r3, #2
 8001198:	4413      	add	r3, r2
 800119a:	3b05      	subs	r3, #5
 800119c:	221f      	movs	r2, #31
 800119e:	fa02 f303 	lsl.w	r3, r2, r3
 80011a2:	43da      	mvns	r2, r3
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	400a      	ands	r2, r1
 80011aa:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80011ac:	687b      	ldr	r3, [r7, #4]
 80011ae:	681b      	ldr	r3, [r3, #0]
 80011b0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80011b2:	683b      	ldr	r3, [r7, #0]
 80011b4:	681b      	ldr	r3, [r3, #0]
 80011b6:	b29b      	uxth	r3, r3
 80011b8:	4618      	mov	r0, r3
 80011ba:	683b      	ldr	r3, [r7, #0]
 80011bc:	685a      	ldr	r2, [r3, #4]
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	3b05      	subs	r3, #5
 80011c6:	fa00 f203 	lsl.w	r2, r0, r3
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	430a      	orrs	r2, r1
 80011d0:	635a      	str	r2, [r3, #52]	; 0x34
 80011d2:	e04c      	b.n	800126e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	2b0c      	cmp	r3, #12
 80011da:	d824      	bhi.n	8001226 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80011e2:	683b      	ldr	r3, [r7, #0]
 80011e4:	685a      	ldr	r2, [r3, #4]
 80011e6:	4613      	mov	r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4413      	add	r3, r2
 80011ec:	3b23      	subs	r3, #35	; 0x23
 80011ee:	221f      	movs	r2, #31
 80011f0:	fa02 f303 	lsl.w	r3, r2, r3
 80011f4:	43da      	mvns	r2, r3
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	400a      	ands	r2, r1
 80011fc:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	681b      	ldr	r3, [r3, #0]
 8001202:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001204:	683b      	ldr	r3, [r7, #0]
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	b29b      	uxth	r3, r3
 800120a:	4618      	mov	r0, r3
 800120c:	683b      	ldr	r3, [r7, #0]
 800120e:	685a      	ldr	r2, [r3, #4]
 8001210:	4613      	mov	r3, r2
 8001212:	009b      	lsls	r3, r3, #2
 8001214:	4413      	add	r3, r2
 8001216:	3b23      	subs	r3, #35	; 0x23
 8001218:	fa00 f203 	lsl.w	r2, r0, r3
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	681b      	ldr	r3, [r3, #0]
 8001220:	430a      	orrs	r2, r1
 8001222:	631a      	str	r2, [r3, #48]	; 0x30
 8001224:	e023      	b.n	800126e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685a      	ldr	r2, [r3, #4]
 8001230:	4613      	mov	r3, r2
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	4413      	add	r3, r2
 8001236:	3b41      	subs	r3, #65	; 0x41
 8001238:	221f      	movs	r2, #31
 800123a:	fa02 f303 	lsl.w	r3, r2, r3
 800123e:	43da      	mvns	r2, r3
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	400a      	ands	r2, r1
 8001246:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	681b      	ldr	r3, [r3, #0]
 800124c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	681b      	ldr	r3, [r3, #0]
 8001252:	b29b      	uxth	r3, r3
 8001254:	4618      	mov	r0, r3
 8001256:	683b      	ldr	r3, [r7, #0]
 8001258:	685a      	ldr	r2, [r3, #4]
 800125a:	4613      	mov	r3, r2
 800125c:	009b      	lsls	r3, r3, #2
 800125e:	4413      	add	r3, r2
 8001260:	3b41      	subs	r3, #65	; 0x41
 8001262:	fa00 f203 	lsl.w	r2, r0, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	681b      	ldr	r3, [r3, #0]
 800126a:	430a      	orrs	r2, r1
 800126c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800126e:	4b22      	ldr	r3, [pc, #136]	; (80012f8 <HAL_ADC_ConfigChannel+0x234>)
 8001270:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	681b      	ldr	r3, [r3, #0]
 8001276:	4a21      	ldr	r2, [pc, #132]	; (80012fc <HAL_ADC_ConfigChannel+0x238>)
 8001278:	4293      	cmp	r3, r2
 800127a:	d109      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x1cc>
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	681b      	ldr	r3, [r3, #0]
 8001280:	2b12      	cmp	r3, #18
 8001282:	d105      	bne.n	8001290 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001284:	68fb      	ldr	r3, [r7, #12]
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800128c:	68fb      	ldr	r3, [r7, #12]
 800128e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a19      	ldr	r2, [pc, #100]	; (80012fc <HAL_ADC_ConfigChannel+0x238>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d123      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x21e>
 800129a:	683b      	ldr	r3, [r7, #0]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	2b10      	cmp	r3, #16
 80012a0:	d003      	beq.n	80012aa <HAL_ADC_ConfigChannel+0x1e6>
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	681b      	ldr	r3, [r3, #0]
 80012a6:	2b11      	cmp	r3, #17
 80012a8:	d11b      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	685b      	ldr	r3, [r3, #4]
 80012ae:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80012b2:	68fb      	ldr	r3, [r7, #12]
 80012b4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80012b6:	683b      	ldr	r3, [r7, #0]
 80012b8:	681b      	ldr	r3, [r3, #0]
 80012ba:	2b10      	cmp	r3, #16
 80012bc:	d111      	bne.n	80012e2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80012be:	4b10      	ldr	r3, [pc, #64]	; (8001300 <HAL_ADC_ConfigChannel+0x23c>)
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4a10      	ldr	r2, [pc, #64]	; (8001304 <HAL_ADC_ConfigChannel+0x240>)
 80012c4:	fba2 2303 	umull	r2, r3, r2, r3
 80012c8:	0c9a      	lsrs	r2, r3, #18
 80012ca:	4613      	mov	r3, r2
 80012cc:	009b      	lsls	r3, r3, #2
 80012ce:	4413      	add	r3, r2
 80012d0:	005b      	lsls	r3, r3, #1
 80012d2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012d4:	e002      	b.n	80012dc <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80012d6:	68bb      	ldr	r3, [r7, #8]
 80012d8:	3b01      	subs	r3, #1
 80012da:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80012dc:	68bb      	ldr	r3, [r7, #8]
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d1f9      	bne.n	80012d6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80012e2:	687b      	ldr	r3, [r7, #4]
 80012e4:	2200      	movs	r2, #0
 80012e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80012ea:	2300      	movs	r3, #0
}
 80012ec:	4618      	mov	r0, r3
 80012ee:	3714      	adds	r7, #20
 80012f0:	46bd      	mov	sp, r7
 80012f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f6:	4770      	bx	lr
 80012f8:	40012300 	.word	0x40012300
 80012fc:	40012000 	.word	0x40012000
 8001300:	20000028 	.word	0x20000028
 8001304:	431bde83 	.word	0x431bde83

08001308 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001308:	b480      	push	{r7}
 800130a:	b085      	sub	sp, #20
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001310:	4b79      	ldr	r3, [pc, #484]	; (80014f8 <ADC_Init+0x1f0>)
 8001312:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001314:	68fb      	ldr	r3, [r7, #12]
 8001316:	685b      	ldr	r3, [r3, #4]
 8001318:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800131c:	68fb      	ldr	r3, [r7, #12]
 800131e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001320:	68fb      	ldr	r3, [r7, #12]
 8001322:	685a      	ldr	r2, [r3, #4]
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	685b      	ldr	r3, [r3, #4]
 8001328:	431a      	orrs	r2, r3
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	685a      	ldr	r2, [r3, #4]
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	681b      	ldr	r3, [r3, #0]
 8001338:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800133c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	6859      	ldr	r1, [r3, #4]
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	691b      	ldr	r3, [r3, #16]
 8001348:	021a      	lsls	r2, r3, #8
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	681b      	ldr	r3, [r3, #0]
 800134e:	430a      	orrs	r2, r1
 8001350:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	685a      	ldr	r2, [r3, #4]
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001360:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	681b      	ldr	r3, [r3, #0]
 8001366:	6859      	ldr	r1, [r3, #4]
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	689a      	ldr	r2, [r3, #8]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	681b      	ldr	r3, [r3, #0]
 8001370:	430a      	orrs	r2, r1
 8001372:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001374:	687b      	ldr	r3, [r7, #4]
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	689a      	ldr	r2, [r3, #8]
 800137a:	687b      	ldr	r3, [r7, #4]
 800137c:	681b      	ldr	r3, [r3, #0]
 800137e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001382:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001384:	687b      	ldr	r3, [r7, #4]
 8001386:	681b      	ldr	r3, [r3, #0]
 8001388:	6899      	ldr	r1, [r3, #8]
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	68da      	ldr	r2, [r3, #12]
 800138e:	687b      	ldr	r3, [r7, #4]
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	430a      	orrs	r2, r1
 8001394:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800139a:	4a58      	ldr	r2, [pc, #352]	; (80014fc <ADC_Init+0x1f4>)
 800139c:	4293      	cmp	r3, r2
 800139e:	d022      	beq.n	80013e6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	689a      	ldr	r2, [r3, #8]
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	681b      	ldr	r3, [r3, #0]
 80013aa:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013ae:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	681b      	ldr	r3, [r3, #0]
 80013b4:	6899      	ldr	r1, [r3, #8]
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80013ba:	687b      	ldr	r3, [r7, #4]
 80013bc:	681b      	ldr	r3, [r3, #0]
 80013be:	430a      	orrs	r2, r1
 80013c0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	681b      	ldr	r3, [r3, #0]
 80013c6:	689a      	ldr	r2, [r3, #8]
 80013c8:	687b      	ldr	r3, [r7, #4]
 80013ca:	681b      	ldr	r3, [r3, #0]
 80013cc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80013d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	681b      	ldr	r3, [r3, #0]
 80013d6:	6899      	ldr	r1, [r3, #8]
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	430a      	orrs	r2, r1
 80013e2:	609a      	str	r2, [r3, #8]
 80013e4:	e00f      	b.n	8001406 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80013e6:	687b      	ldr	r3, [r7, #4]
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80013f4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	689a      	ldr	r2, [r3, #8]
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001404:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	689a      	ldr	r2, [r3, #8]
 800140c:	687b      	ldr	r3, [r7, #4]
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	f022 0202 	bic.w	r2, r2, #2
 8001414:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	6899      	ldr	r1, [r3, #8]
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	7e1b      	ldrb	r3, [r3, #24]
 8001420:	005a      	lsls	r2, r3, #1
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	430a      	orrs	r2, r1
 8001428:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800142a:	687b      	ldr	r3, [r7, #4]
 800142c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001430:	2b00      	cmp	r3, #0
 8001432:	d01b      	beq.n	800146c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	685a      	ldr	r2, [r3, #4]
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	681b      	ldr	r3, [r3, #0]
 800143e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001442:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001444:	687b      	ldr	r3, [r7, #4]
 8001446:	681b      	ldr	r3, [r3, #0]
 8001448:	685a      	ldr	r2, [r3, #4]
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001452:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	6859      	ldr	r1, [r3, #4]
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800145e:	3b01      	subs	r3, #1
 8001460:	035a      	lsls	r2, r3, #13
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	430a      	orrs	r2, r1
 8001468:	605a      	str	r2, [r3, #4]
 800146a:	e007      	b.n	800147c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800146c:	687b      	ldr	r3, [r7, #4]
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	685a      	ldr	r2, [r3, #4]
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800147a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 800147c:	687b      	ldr	r3, [r7, #4]
 800147e:	681b      	ldr	r3, [r3, #0]
 8001480:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800148a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001492:	687b      	ldr	r3, [r7, #4]
 8001494:	69db      	ldr	r3, [r3, #28]
 8001496:	3b01      	subs	r3, #1
 8001498:	051a      	lsls	r2, r3, #20
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	430a      	orrs	r2, r1
 80014a0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80014a2:	687b      	ldr	r3, [r7, #4]
 80014a4:	681b      	ldr	r3, [r3, #0]
 80014a6:	689a      	ldr	r2, [r3, #8]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80014b0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	6899      	ldr	r1, [r3, #8]
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80014be:	025a      	lsls	r2, r3, #9
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	430a      	orrs	r2, r1
 80014c6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80014c8:	687b      	ldr	r3, [r7, #4]
 80014ca:	681b      	ldr	r3, [r3, #0]
 80014cc:	689a      	ldr	r2, [r3, #8]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	681b      	ldr	r3, [r3, #0]
 80014d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80014d6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	6899      	ldr	r1, [r3, #8]
 80014de:	687b      	ldr	r3, [r7, #4]
 80014e0:	695b      	ldr	r3, [r3, #20]
 80014e2:	029a      	lsls	r2, r3, #10
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	430a      	orrs	r2, r1
 80014ea:	609a      	str	r2, [r3, #8]
}
 80014ec:	bf00      	nop
 80014ee:	3714      	adds	r7, #20
 80014f0:	46bd      	mov	sp, r7
 80014f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f6:	4770      	bx	lr
 80014f8:	40012300 	.word	0x40012300
 80014fc:	0f000001 	.word	0x0f000001

08001500 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001500:	b480      	push	{r7}
 8001502:	b085      	sub	sp, #20
 8001504:	af00      	add	r7, sp, #0
 8001506:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	f003 0307 	and.w	r3, r3, #7
 800150e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001510:	4b0c      	ldr	r3, [pc, #48]	; (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001512:	68db      	ldr	r3, [r3, #12]
 8001514:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001516:	68ba      	ldr	r2, [r7, #8]
 8001518:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800151c:	4013      	ands	r3, r2
 800151e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001520:	68fb      	ldr	r3, [r7, #12]
 8001522:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001524:	68bb      	ldr	r3, [r7, #8]
 8001526:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001528:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800152c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001530:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001532:	4a04      	ldr	r2, [pc, #16]	; (8001544 <__NVIC_SetPriorityGrouping+0x44>)
 8001534:	68bb      	ldr	r3, [r7, #8]
 8001536:	60d3      	str	r3, [r2, #12]
}
 8001538:	bf00      	nop
 800153a:	3714      	adds	r7, #20
 800153c:	46bd      	mov	sp, r7
 800153e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001542:	4770      	bx	lr
 8001544:	e000ed00 	.word	0xe000ed00

08001548 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800154c:	4b04      	ldr	r3, [pc, #16]	; (8001560 <__NVIC_GetPriorityGrouping+0x18>)
 800154e:	68db      	ldr	r3, [r3, #12]
 8001550:	0a1b      	lsrs	r3, r3, #8
 8001552:	f003 0307 	and.w	r3, r3, #7
}
 8001556:	4618      	mov	r0, r3
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000ed00 	.word	0xe000ed00

08001564 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	4603      	mov	r3, r0
 800156c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800156e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001572:	2b00      	cmp	r3, #0
 8001574:	db0b      	blt.n	800158e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001576:	79fb      	ldrb	r3, [r7, #7]
 8001578:	f003 021f 	and.w	r2, r3, #31
 800157c:	4907      	ldr	r1, [pc, #28]	; (800159c <__NVIC_EnableIRQ+0x38>)
 800157e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001582:	095b      	lsrs	r3, r3, #5
 8001584:	2001      	movs	r0, #1
 8001586:	fa00 f202 	lsl.w	r2, r0, r2
 800158a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001598:	4770      	bx	lr
 800159a:	bf00      	nop
 800159c:	e000e100 	.word	0xe000e100

080015a0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80015a0:	b480      	push	{r7}
 80015a2:	b083      	sub	sp, #12
 80015a4:	af00      	add	r7, sp, #0
 80015a6:	4603      	mov	r3, r0
 80015a8:	6039      	str	r1, [r7, #0]
 80015aa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80015ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	db0a      	blt.n	80015ca <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	b2da      	uxtb	r2, r3
 80015b8:	490c      	ldr	r1, [pc, #48]	; (80015ec <__NVIC_SetPriority+0x4c>)
 80015ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80015be:	0112      	lsls	r2, r2, #4
 80015c0:	b2d2      	uxtb	r2, r2
 80015c2:	440b      	add	r3, r1
 80015c4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80015c8:	e00a      	b.n	80015e0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80015ca:	683b      	ldr	r3, [r7, #0]
 80015cc:	b2da      	uxtb	r2, r3
 80015ce:	4908      	ldr	r1, [pc, #32]	; (80015f0 <__NVIC_SetPriority+0x50>)
 80015d0:	79fb      	ldrb	r3, [r7, #7]
 80015d2:	f003 030f 	and.w	r3, r3, #15
 80015d6:	3b04      	subs	r3, #4
 80015d8:	0112      	lsls	r2, r2, #4
 80015da:	b2d2      	uxtb	r2, r2
 80015dc:	440b      	add	r3, r1
 80015de:	761a      	strb	r2, [r3, #24]
}
 80015e0:	bf00      	nop
 80015e2:	370c      	adds	r7, #12
 80015e4:	46bd      	mov	sp, r7
 80015e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ea:	4770      	bx	lr
 80015ec:	e000e100 	.word	0xe000e100
 80015f0:	e000ed00 	.word	0xe000ed00

080015f4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80015f4:	b480      	push	{r7}
 80015f6:	b089      	sub	sp, #36	; 0x24
 80015f8:	af00      	add	r7, sp, #0
 80015fa:	60f8      	str	r0, [r7, #12]
 80015fc:	60b9      	str	r1, [r7, #8]
 80015fe:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 0307 	and.w	r3, r3, #7
 8001606:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001608:	69fb      	ldr	r3, [r7, #28]
 800160a:	f1c3 0307 	rsb	r3, r3, #7
 800160e:	2b04      	cmp	r3, #4
 8001610:	bf28      	it	cs
 8001612:	2304      	movcs	r3, #4
 8001614:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001616:	69fb      	ldr	r3, [r7, #28]
 8001618:	3304      	adds	r3, #4
 800161a:	2b06      	cmp	r3, #6
 800161c:	d902      	bls.n	8001624 <NVIC_EncodePriority+0x30>
 800161e:	69fb      	ldr	r3, [r7, #28]
 8001620:	3b03      	subs	r3, #3
 8001622:	e000      	b.n	8001626 <NVIC_EncodePriority+0x32>
 8001624:	2300      	movs	r3, #0
 8001626:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001628:	f04f 32ff 	mov.w	r2, #4294967295
 800162c:	69bb      	ldr	r3, [r7, #24]
 800162e:	fa02 f303 	lsl.w	r3, r2, r3
 8001632:	43da      	mvns	r2, r3
 8001634:	68bb      	ldr	r3, [r7, #8]
 8001636:	401a      	ands	r2, r3
 8001638:	697b      	ldr	r3, [r7, #20]
 800163a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800163c:	f04f 31ff 	mov.w	r1, #4294967295
 8001640:	697b      	ldr	r3, [r7, #20]
 8001642:	fa01 f303 	lsl.w	r3, r1, r3
 8001646:	43d9      	mvns	r1, r3
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800164c:	4313      	orrs	r3, r2
         );
}
 800164e:	4618      	mov	r0, r3
 8001650:	3724      	adds	r7, #36	; 0x24
 8001652:	46bd      	mov	sp, r7
 8001654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001658:	4770      	bx	lr
	...

0800165c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	b082      	sub	sp, #8
 8001660:	af00      	add	r7, sp, #0
 8001662:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	3b01      	subs	r3, #1
 8001668:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800166c:	d301      	bcc.n	8001672 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800166e:	2301      	movs	r3, #1
 8001670:	e00f      	b.n	8001692 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001672:	4a0a      	ldr	r2, [pc, #40]	; (800169c <SysTick_Config+0x40>)
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	3b01      	subs	r3, #1
 8001678:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800167a:	210f      	movs	r1, #15
 800167c:	f04f 30ff 	mov.w	r0, #4294967295
 8001680:	f7ff ff8e 	bl	80015a0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001684:	4b05      	ldr	r3, [pc, #20]	; (800169c <SysTick_Config+0x40>)
 8001686:	2200      	movs	r2, #0
 8001688:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800168a:	4b04      	ldr	r3, [pc, #16]	; (800169c <SysTick_Config+0x40>)
 800168c:	2207      	movs	r2, #7
 800168e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001690:	2300      	movs	r3, #0
}
 8001692:	4618      	mov	r0, r3
 8001694:	3708      	adds	r7, #8
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	e000e010 	.word	0xe000e010

080016a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b082      	sub	sp, #8
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80016a8:	6878      	ldr	r0, [r7, #4]
 80016aa:	f7ff ff29 	bl	8001500 <__NVIC_SetPriorityGrouping>
}
 80016ae:	bf00      	nop
 80016b0:	3708      	adds	r7, #8
 80016b2:	46bd      	mov	sp, r7
 80016b4:	bd80      	pop	{r7, pc}

080016b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80016b6:	b580      	push	{r7, lr}
 80016b8:	b086      	sub	sp, #24
 80016ba:	af00      	add	r7, sp, #0
 80016bc:	4603      	mov	r3, r0
 80016be:	60b9      	str	r1, [r7, #8]
 80016c0:	607a      	str	r2, [r7, #4]
 80016c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80016c4:	2300      	movs	r3, #0
 80016c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80016c8:	f7ff ff3e 	bl	8001548 <__NVIC_GetPriorityGrouping>
 80016cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	68b9      	ldr	r1, [r7, #8]
 80016d2:	6978      	ldr	r0, [r7, #20]
 80016d4:	f7ff ff8e 	bl	80015f4 <NVIC_EncodePriority>
 80016d8:	4602      	mov	r2, r0
 80016da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80016de:	4611      	mov	r1, r2
 80016e0:	4618      	mov	r0, r3
 80016e2:	f7ff ff5d 	bl	80015a0 <__NVIC_SetPriority>
}
 80016e6:	bf00      	nop
 80016e8:	3718      	adds	r7, #24
 80016ea:	46bd      	mov	sp, r7
 80016ec:	bd80      	pop	{r7, pc}

080016ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016ee:	b580      	push	{r7, lr}
 80016f0:	b082      	sub	sp, #8
 80016f2:	af00      	add	r7, sp, #0
 80016f4:	4603      	mov	r3, r0
 80016f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80016f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016fc:	4618      	mov	r0, r3
 80016fe:	f7ff ff31 	bl	8001564 <__NVIC_EnableIRQ>
}
 8001702:	bf00      	nop
 8001704:	3708      	adds	r7, #8
 8001706:	46bd      	mov	sp, r7
 8001708:	bd80      	pop	{r7, pc}

0800170a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001712:	6878      	ldr	r0, [r7, #4]
 8001714:	f7ff ffa2 	bl	800165c <SysTick_Config>
 8001718:	4603      	mov	r3, r0
}
 800171a:	4618      	mov	r0, r3
 800171c:	3708      	adds	r7, #8
 800171e:	46bd      	mov	sp, r7
 8001720:	bd80      	pop	{r7, pc}
	...

08001724 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001724:	b480      	push	{r7}
 8001726:	b089      	sub	sp, #36	; 0x24
 8001728:	af00      	add	r7, sp, #0
 800172a:	6078      	str	r0, [r7, #4]
 800172c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800172e:	2300      	movs	r3, #0
 8001730:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001732:	2300      	movs	r3, #0
 8001734:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001736:	2300      	movs	r3, #0
 8001738:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800173a:	2300      	movs	r3, #0
 800173c:	61fb      	str	r3, [r7, #28]
 800173e:	e159      	b.n	80019f4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001740:	2201      	movs	r2, #1
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	fa02 f303 	lsl.w	r3, r2, r3
 8001748:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800174a:	683b      	ldr	r3, [r7, #0]
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	697a      	ldr	r2, [r7, #20]
 8001750:	4013      	ands	r3, r2
 8001752:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001754:	693a      	ldr	r2, [r7, #16]
 8001756:	697b      	ldr	r3, [r7, #20]
 8001758:	429a      	cmp	r2, r3
 800175a:	f040 8148 	bne.w	80019ee <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800175e:	683b      	ldr	r3, [r7, #0]
 8001760:	685b      	ldr	r3, [r3, #4]
 8001762:	f003 0303 	and.w	r3, r3, #3
 8001766:	2b01      	cmp	r3, #1
 8001768:	d005      	beq.n	8001776 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176a:	683b      	ldr	r3, [r7, #0]
 800176c:	685b      	ldr	r3, [r3, #4]
 800176e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001772:	2b02      	cmp	r3, #2
 8001774:	d130      	bne.n	80017d8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	689b      	ldr	r3, [r3, #8]
 800177a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800177c:	69fb      	ldr	r3, [r7, #28]
 800177e:	005b      	lsls	r3, r3, #1
 8001780:	2203      	movs	r2, #3
 8001782:	fa02 f303 	lsl.w	r3, r2, r3
 8001786:	43db      	mvns	r3, r3
 8001788:	69ba      	ldr	r2, [r7, #24]
 800178a:	4013      	ands	r3, r2
 800178c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800178e:	683b      	ldr	r3, [r7, #0]
 8001790:	68da      	ldr	r2, [r3, #12]
 8001792:	69fb      	ldr	r3, [r7, #28]
 8001794:	005b      	lsls	r3, r3, #1
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	69ba      	ldr	r2, [r7, #24]
 800179c:	4313      	orrs	r3, r2
 800179e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	69ba      	ldr	r2, [r7, #24]
 80017a4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	685b      	ldr	r3, [r3, #4]
 80017aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80017ac:	2201      	movs	r2, #1
 80017ae:	69fb      	ldr	r3, [r7, #28]
 80017b0:	fa02 f303 	lsl.w	r3, r2, r3
 80017b4:	43db      	mvns	r3, r3
 80017b6:	69ba      	ldr	r2, [r7, #24]
 80017b8:	4013      	ands	r3, r2
 80017ba:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80017bc:	683b      	ldr	r3, [r7, #0]
 80017be:	685b      	ldr	r3, [r3, #4]
 80017c0:	091b      	lsrs	r3, r3, #4
 80017c2:	f003 0201 	and.w	r2, r3, #1
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	fa02 f303 	lsl.w	r3, r2, r3
 80017cc:	69ba      	ldr	r2, [r7, #24]
 80017ce:	4313      	orrs	r3, r2
 80017d0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	69ba      	ldr	r2, [r7, #24]
 80017d6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0303 	and.w	r3, r3, #3
 80017e0:	2b03      	cmp	r3, #3
 80017e2:	d017      	beq.n	8001814 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	68db      	ldr	r3, [r3, #12]
 80017e8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80017ea:	69fb      	ldr	r3, [r7, #28]
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	2203      	movs	r2, #3
 80017f0:	fa02 f303 	lsl.w	r3, r2, r3
 80017f4:	43db      	mvns	r3, r3
 80017f6:	69ba      	ldr	r2, [r7, #24]
 80017f8:	4013      	ands	r3, r2
 80017fa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80017fc:	683b      	ldr	r3, [r7, #0]
 80017fe:	689a      	ldr	r2, [r3, #8]
 8001800:	69fb      	ldr	r3, [r7, #28]
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	fa02 f303 	lsl.w	r3, r2, r3
 8001808:	69ba      	ldr	r2, [r7, #24]
 800180a:	4313      	orrs	r3, r2
 800180c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	69ba      	ldr	r2, [r7, #24]
 8001812:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	685b      	ldr	r3, [r3, #4]
 8001818:	f003 0303 	and.w	r3, r3, #3
 800181c:	2b02      	cmp	r3, #2
 800181e:	d123      	bne.n	8001868 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	08da      	lsrs	r2, r3, #3
 8001824:	687b      	ldr	r3, [r7, #4]
 8001826:	3208      	adds	r2, #8
 8001828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800182c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800182e:	69fb      	ldr	r3, [r7, #28]
 8001830:	f003 0307 	and.w	r3, r3, #7
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	220f      	movs	r2, #15
 8001838:	fa02 f303 	lsl.w	r3, r2, r3
 800183c:	43db      	mvns	r3, r3
 800183e:	69ba      	ldr	r2, [r7, #24]
 8001840:	4013      	ands	r3, r2
 8001842:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001844:	683b      	ldr	r3, [r7, #0]
 8001846:	691a      	ldr	r2, [r3, #16]
 8001848:	69fb      	ldr	r3, [r7, #28]
 800184a:	f003 0307 	and.w	r3, r3, #7
 800184e:	009b      	lsls	r3, r3, #2
 8001850:	fa02 f303 	lsl.w	r3, r2, r3
 8001854:	69ba      	ldr	r2, [r7, #24]
 8001856:	4313      	orrs	r3, r2
 8001858:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800185a:	69fb      	ldr	r3, [r7, #28]
 800185c:	08da      	lsrs	r2, r3, #3
 800185e:	687b      	ldr	r3, [r7, #4]
 8001860:	3208      	adds	r2, #8
 8001862:	69b9      	ldr	r1, [r7, #24]
 8001864:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800186e:	69fb      	ldr	r3, [r7, #28]
 8001870:	005b      	lsls	r3, r3, #1
 8001872:	2203      	movs	r2, #3
 8001874:	fa02 f303 	lsl.w	r3, r2, r3
 8001878:	43db      	mvns	r3, r3
 800187a:	69ba      	ldr	r2, [r7, #24]
 800187c:	4013      	ands	r3, r2
 800187e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001880:	683b      	ldr	r3, [r7, #0]
 8001882:	685b      	ldr	r3, [r3, #4]
 8001884:	f003 0203 	and.w	r2, r3, #3
 8001888:	69fb      	ldr	r3, [r7, #28]
 800188a:	005b      	lsls	r3, r3, #1
 800188c:	fa02 f303 	lsl.w	r3, r2, r3
 8001890:	69ba      	ldr	r2, [r7, #24]
 8001892:	4313      	orrs	r3, r2
 8001894:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	685b      	ldr	r3, [r3, #4]
 80018a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	f000 80a2 	beq.w	80019ee <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b57      	ldr	r3, [pc, #348]	; (8001a0c <HAL_GPIO_Init+0x2e8>)
 80018b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018b2:	4a56      	ldr	r2, [pc, #344]	; (8001a0c <HAL_GPIO_Init+0x2e8>)
 80018b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018b8:	6453      	str	r3, [r2, #68]	; 0x44
 80018ba:	4b54      	ldr	r3, [pc, #336]	; (8001a0c <HAL_GPIO_Init+0x2e8>)
 80018bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80018c6:	4a52      	ldr	r2, [pc, #328]	; (8001a10 <HAL_GPIO_Init+0x2ec>)
 80018c8:	69fb      	ldr	r3, [r7, #28]
 80018ca:	089b      	lsrs	r3, r3, #2
 80018cc:	3302      	adds	r3, #2
 80018ce:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80018d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80018d4:	69fb      	ldr	r3, [r7, #28]
 80018d6:	f003 0303 	and.w	r3, r3, #3
 80018da:	009b      	lsls	r3, r3, #2
 80018dc:	220f      	movs	r2, #15
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	43db      	mvns	r3, r3
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	4013      	ands	r3, r2
 80018e8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80018ea:	687b      	ldr	r3, [r7, #4]
 80018ec:	4a49      	ldr	r2, [pc, #292]	; (8001a14 <HAL_GPIO_Init+0x2f0>)
 80018ee:	4293      	cmp	r3, r2
 80018f0:	d019      	beq.n	8001926 <HAL_GPIO_Init+0x202>
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	4a48      	ldr	r2, [pc, #288]	; (8001a18 <HAL_GPIO_Init+0x2f4>)
 80018f6:	4293      	cmp	r3, r2
 80018f8:	d013      	beq.n	8001922 <HAL_GPIO_Init+0x1fe>
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	4a47      	ldr	r2, [pc, #284]	; (8001a1c <HAL_GPIO_Init+0x2f8>)
 80018fe:	4293      	cmp	r3, r2
 8001900:	d00d      	beq.n	800191e <HAL_GPIO_Init+0x1fa>
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	4a46      	ldr	r2, [pc, #280]	; (8001a20 <HAL_GPIO_Init+0x2fc>)
 8001906:	4293      	cmp	r3, r2
 8001908:	d007      	beq.n	800191a <HAL_GPIO_Init+0x1f6>
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	4a45      	ldr	r2, [pc, #276]	; (8001a24 <HAL_GPIO_Init+0x300>)
 800190e:	4293      	cmp	r3, r2
 8001910:	d101      	bne.n	8001916 <HAL_GPIO_Init+0x1f2>
 8001912:	2304      	movs	r3, #4
 8001914:	e008      	b.n	8001928 <HAL_GPIO_Init+0x204>
 8001916:	2307      	movs	r3, #7
 8001918:	e006      	b.n	8001928 <HAL_GPIO_Init+0x204>
 800191a:	2303      	movs	r3, #3
 800191c:	e004      	b.n	8001928 <HAL_GPIO_Init+0x204>
 800191e:	2302      	movs	r3, #2
 8001920:	e002      	b.n	8001928 <HAL_GPIO_Init+0x204>
 8001922:	2301      	movs	r3, #1
 8001924:	e000      	b.n	8001928 <HAL_GPIO_Init+0x204>
 8001926:	2300      	movs	r3, #0
 8001928:	69fa      	ldr	r2, [r7, #28]
 800192a:	f002 0203 	and.w	r2, r2, #3
 800192e:	0092      	lsls	r2, r2, #2
 8001930:	4093      	lsls	r3, r2
 8001932:	69ba      	ldr	r2, [r7, #24]
 8001934:	4313      	orrs	r3, r2
 8001936:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001938:	4935      	ldr	r1, [pc, #212]	; (8001a10 <HAL_GPIO_Init+0x2ec>)
 800193a:	69fb      	ldr	r3, [r7, #28]
 800193c:	089b      	lsrs	r3, r3, #2
 800193e:	3302      	adds	r3, #2
 8001940:	69ba      	ldr	r2, [r7, #24]
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001946:	4b38      	ldr	r3, [pc, #224]	; (8001a28 <HAL_GPIO_Init+0x304>)
 8001948:	689b      	ldr	r3, [r3, #8]
 800194a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800194c:	693b      	ldr	r3, [r7, #16]
 800194e:	43db      	mvns	r3, r3
 8001950:	69ba      	ldr	r2, [r7, #24]
 8001952:	4013      	ands	r3, r2
 8001954:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001956:	683b      	ldr	r3, [r7, #0]
 8001958:	685b      	ldr	r3, [r3, #4]
 800195a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800195e:	2b00      	cmp	r3, #0
 8001960:	d003      	beq.n	800196a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001962:	69ba      	ldr	r2, [r7, #24]
 8001964:	693b      	ldr	r3, [r7, #16]
 8001966:	4313      	orrs	r3, r2
 8001968:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800196a:	4a2f      	ldr	r2, [pc, #188]	; (8001a28 <HAL_GPIO_Init+0x304>)
 800196c:	69bb      	ldr	r3, [r7, #24]
 800196e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001970:	4b2d      	ldr	r3, [pc, #180]	; (8001a28 <HAL_GPIO_Init+0x304>)
 8001972:	68db      	ldr	r3, [r3, #12]
 8001974:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	43db      	mvns	r3, r3
 800197a:	69ba      	ldr	r2, [r7, #24]
 800197c:	4013      	ands	r3, r2
 800197e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	685b      	ldr	r3, [r3, #4]
 8001984:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001988:	2b00      	cmp	r3, #0
 800198a:	d003      	beq.n	8001994 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800198c:	69ba      	ldr	r2, [r7, #24]
 800198e:	693b      	ldr	r3, [r7, #16]
 8001990:	4313      	orrs	r3, r2
 8001992:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001994:	4a24      	ldr	r2, [pc, #144]	; (8001a28 <HAL_GPIO_Init+0x304>)
 8001996:	69bb      	ldr	r3, [r7, #24]
 8001998:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800199a:	4b23      	ldr	r3, [pc, #140]	; (8001a28 <HAL_GPIO_Init+0x304>)
 800199c:	685b      	ldr	r3, [r3, #4]
 800199e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019a0:	693b      	ldr	r3, [r7, #16]
 80019a2:	43db      	mvns	r3, r3
 80019a4:	69ba      	ldr	r2, [r7, #24]
 80019a6:	4013      	ands	r3, r2
 80019a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80019aa:	683b      	ldr	r3, [r7, #0]
 80019ac:	685b      	ldr	r3, [r3, #4]
 80019ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d003      	beq.n	80019be <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80019b6:	69ba      	ldr	r2, [r7, #24]
 80019b8:	693b      	ldr	r3, [r7, #16]
 80019ba:	4313      	orrs	r3, r2
 80019bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80019be:	4a1a      	ldr	r2, [pc, #104]	; (8001a28 <HAL_GPIO_Init+0x304>)
 80019c0:	69bb      	ldr	r3, [r7, #24]
 80019c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80019c4:	4b18      	ldr	r3, [pc, #96]	; (8001a28 <HAL_GPIO_Init+0x304>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80019ca:	693b      	ldr	r3, [r7, #16]
 80019cc:	43db      	mvns	r3, r3
 80019ce:	69ba      	ldr	r2, [r7, #24]
 80019d0:	4013      	ands	r3, r2
 80019d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80019d4:	683b      	ldr	r3, [r7, #0]
 80019d6:	685b      	ldr	r3, [r3, #4]
 80019d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80019dc:	2b00      	cmp	r3, #0
 80019de:	d003      	beq.n	80019e8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80019e0:	69ba      	ldr	r2, [r7, #24]
 80019e2:	693b      	ldr	r3, [r7, #16]
 80019e4:	4313      	orrs	r3, r2
 80019e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80019e8:	4a0f      	ldr	r2, [pc, #60]	; (8001a28 <HAL_GPIO_Init+0x304>)
 80019ea:	69bb      	ldr	r3, [r7, #24]
 80019ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3301      	adds	r3, #1
 80019f2:	61fb      	str	r3, [r7, #28]
 80019f4:	69fb      	ldr	r3, [r7, #28]
 80019f6:	2b0f      	cmp	r3, #15
 80019f8:	f67f aea2 	bls.w	8001740 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80019fc:	bf00      	nop
 80019fe:	bf00      	nop
 8001a00:	3724      	adds	r7, #36	; 0x24
 8001a02:	46bd      	mov	sp, r7
 8001a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a08:	4770      	bx	lr
 8001a0a:	bf00      	nop
 8001a0c:	40023800 	.word	0x40023800
 8001a10:	40013800 	.word	0x40013800
 8001a14:	40020000 	.word	0x40020000
 8001a18:	40020400 	.word	0x40020400
 8001a1c:	40020800 	.word	0x40020800
 8001a20:	40020c00 	.word	0x40020c00
 8001a24:	40021000 	.word	0x40021000
 8001a28:	40013c00 	.word	0x40013c00

08001a2c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	b083      	sub	sp, #12
 8001a30:	af00      	add	r7, sp, #0
 8001a32:	6078      	str	r0, [r7, #4]
 8001a34:	460b      	mov	r3, r1
 8001a36:	807b      	strh	r3, [r7, #2]
 8001a38:	4613      	mov	r3, r2
 8001a3a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001a3c:	787b      	ldrb	r3, [r7, #1]
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d003      	beq.n	8001a4a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001a42:	887a      	ldrh	r2, [r7, #2]
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001a48:	e003      	b.n	8001a52 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001a4a:	887b      	ldrh	r3, [r7, #2]
 8001a4c:	041a      	lsls	r2, r3, #16
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	619a      	str	r2, [r3, #24]
}
 8001a52:	bf00      	nop
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001a5e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001a60:	b08f      	sub	sp, #60	; 0x3c
 8001a62:	af0a      	add	r7, sp, #40	; 0x28
 8001a64:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	2b00      	cmp	r3, #0
 8001a6a:	d101      	bne.n	8001a70 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001a6c:	2301      	movs	r3, #1
 8001a6e:	e10f      	b.n	8001c90 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8001a7c:	b2db      	uxtb	r3, r3
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d106      	bne.n	8001a90 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	2200      	movs	r2, #0
 8001a86:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001a8a:	6878      	ldr	r0, [r7, #4]
 8001a8c:	f005 f930 	bl	8006cf0 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	2203      	movs	r2, #3
 8001a94:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001a98:	68bb      	ldr	r3, [r7, #8]
 8001a9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001aa0:	2b00      	cmp	r3, #0
 8001aa2:	d102      	bne.n	8001aaa <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f001 ff7f 	bl	80039b2 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	603b      	str	r3, [r7, #0]
 8001aba:	687e      	ldr	r6, [r7, #4]
 8001abc:	466d      	mov	r5, sp
 8001abe:	f106 0410 	add.w	r4, r6, #16
 8001ac2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ac6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ac8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001aca:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001ace:	e885 0003 	stmia.w	r5, {r0, r1}
 8001ad2:	1d33      	adds	r3, r6, #4
 8001ad4:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001ad6:	6838      	ldr	r0, [r7, #0]
 8001ad8:	f001 fe56 	bl	8003788 <USB_CoreInit>
 8001adc:	4603      	mov	r3, r0
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	d005      	beq.n	8001aee <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2202      	movs	r2, #2
 8001ae6:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001aea:	2301      	movs	r3, #1
 8001aec:	e0d0      	b.n	8001c90 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	681b      	ldr	r3, [r3, #0]
 8001af2:	2100      	movs	r1, #0
 8001af4:	4618      	mov	r0, r3
 8001af6:	f001 ff6d 	bl	80039d4 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001afa:	2300      	movs	r3, #0
 8001afc:	73fb      	strb	r3, [r7, #15]
 8001afe:	e04a      	b.n	8001b96 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001b00:	7bfa      	ldrb	r2, [r7, #15]
 8001b02:	6879      	ldr	r1, [r7, #4]
 8001b04:	4613      	mov	r3, r2
 8001b06:	00db      	lsls	r3, r3, #3
 8001b08:	4413      	add	r3, r2
 8001b0a:	009b      	lsls	r3, r3, #2
 8001b0c:	440b      	add	r3, r1
 8001b0e:	333d      	adds	r3, #61	; 0x3d
 8001b10:	2201      	movs	r2, #1
 8001b12:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001b14:	7bfa      	ldrb	r2, [r7, #15]
 8001b16:	6879      	ldr	r1, [r7, #4]
 8001b18:	4613      	mov	r3, r2
 8001b1a:	00db      	lsls	r3, r3, #3
 8001b1c:	4413      	add	r3, r2
 8001b1e:	009b      	lsls	r3, r3, #2
 8001b20:	440b      	add	r3, r1
 8001b22:	333c      	adds	r3, #60	; 0x3c
 8001b24:	7bfa      	ldrb	r2, [r7, #15]
 8001b26:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001b28:	7bfa      	ldrb	r2, [r7, #15]
 8001b2a:	7bfb      	ldrb	r3, [r7, #15]
 8001b2c:	b298      	uxth	r0, r3
 8001b2e:	6879      	ldr	r1, [r7, #4]
 8001b30:	4613      	mov	r3, r2
 8001b32:	00db      	lsls	r3, r3, #3
 8001b34:	4413      	add	r3, r2
 8001b36:	009b      	lsls	r3, r3, #2
 8001b38:	440b      	add	r3, r1
 8001b3a:	3344      	adds	r3, #68	; 0x44
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001b40:	7bfa      	ldrb	r2, [r7, #15]
 8001b42:	6879      	ldr	r1, [r7, #4]
 8001b44:	4613      	mov	r3, r2
 8001b46:	00db      	lsls	r3, r3, #3
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	440b      	add	r3, r1
 8001b4e:	3340      	adds	r3, #64	; 0x40
 8001b50:	2200      	movs	r2, #0
 8001b52:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8001b54:	7bfa      	ldrb	r2, [r7, #15]
 8001b56:	6879      	ldr	r1, [r7, #4]
 8001b58:	4613      	mov	r3, r2
 8001b5a:	00db      	lsls	r3, r3, #3
 8001b5c:	4413      	add	r3, r2
 8001b5e:	009b      	lsls	r3, r3, #2
 8001b60:	440b      	add	r3, r1
 8001b62:	3348      	adds	r3, #72	; 0x48
 8001b64:	2200      	movs	r2, #0
 8001b66:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8001b68:	7bfa      	ldrb	r2, [r7, #15]
 8001b6a:	6879      	ldr	r1, [r7, #4]
 8001b6c:	4613      	mov	r3, r2
 8001b6e:	00db      	lsls	r3, r3, #3
 8001b70:	4413      	add	r3, r2
 8001b72:	009b      	lsls	r3, r3, #2
 8001b74:	440b      	add	r3, r1
 8001b76:	334c      	adds	r3, #76	; 0x4c
 8001b78:	2200      	movs	r2, #0
 8001b7a:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8001b7c:	7bfa      	ldrb	r2, [r7, #15]
 8001b7e:	6879      	ldr	r1, [r7, #4]
 8001b80:	4613      	mov	r3, r2
 8001b82:	00db      	lsls	r3, r3, #3
 8001b84:	4413      	add	r3, r2
 8001b86:	009b      	lsls	r3, r3, #2
 8001b88:	440b      	add	r3, r1
 8001b8a:	3354      	adds	r3, #84	; 0x54
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001b90:	7bfb      	ldrb	r3, [r7, #15]
 8001b92:	3301      	adds	r3, #1
 8001b94:	73fb      	strb	r3, [r7, #15]
 8001b96:	7bfa      	ldrb	r2, [r7, #15]
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	685b      	ldr	r3, [r3, #4]
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d3af      	bcc.n	8001b00 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001ba0:	2300      	movs	r3, #0
 8001ba2:	73fb      	strb	r3, [r7, #15]
 8001ba4:	e044      	b.n	8001c30 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001ba6:	7bfa      	ldrb	r2, [r7, #15]
 8001ba8:	6879      	ldr	r1, [r7, #4]
 8001baa:	4613      	mov	r3, r2
 8001bac:	00db      	lsls	r3, r3, #3
 8001bae:	4413      	add	r3, r2
 8001bb0:	009b      	lsls	r3, r3, #2
 8001bb2:	440b      	add	r3, r1
 8001bb4:	f203 237d 	addw	r3, r3, #637	; 0x27d
 8001bb8:	2200      	movs	r2, #0
 8001bba:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001bbc:	7bfa      	ldrb	r2, [r7, #15]
 8001bbe:	6879      	ldr	r1, [r7, #4]
 8001bc0:	4613      	mov	r3, r2
 8001bc2:	00db      	lsls	r3, r3, #3
 8001bc4:	4413      	add	r3, r2
 8001bc6:	009b      	lsls	r3, r3, #2
 8001bc8:	440b      	add	r3, r1
 8001bca:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8001bce:	7bfa      	ldrb	r2, [r7, #15]
 8001bd0:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8001bd2:	7bfa      	ldrb	r2, [r7, #15]
 8001bd4:	6879      	ldr	r1, [r7, #4]
 8001bd6:	4613      	mov	r3, r2
 8001bd8:	00db      	lsls	r3, r3, #3
 8001bda:	4413      	add	r3, r2
 8001bdc:	009b      	lsls	r3, r3, #2
 8001bde:	440b      	add	r3, r1
 8001be0:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8001be4:	2200      	movs	r2, #0
 8001be6:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001be8:	7bfa      	ldrb	r2, [r7, #15]
 8001bea:	6879      	ldr	r1, [r7, #4]
 8001bec:	4613      	mov	r3, r2
 8001bee:	00db      	lsls	r3, r3, #3
 8001bf0:	4413      	add	r3, r2
 8001bf2:	009b      	lsls	r3, r3, #2
 8001bf4:	440b      	add	r3, r1
 8001bf6:	f503 7322 	add.w	r3, r3, #648	; 0x288
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8001bfe:	7bfa      	ldrb	r2, [r7, #15]
 8001c00:	6879      	ldr	r1, [r7, #4]
 8001c02:	4613      	mov	r3, r2
 8001c04:	00db      	lsls	r3, r3, #3
 8001c06:	4413      	add	r3, r2
 8001c08:	009b      	lsls	r3, r3, #2
 8001c0a:	440b      	add	r3, r1
 8001c0c:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001c14:	7bfa      	ldrb	r2, [r7, #15]
 8001c16:	6879      	ldr	r1, [r7, #4]
 8001c18:	4613      	mov	r3, r2
 8001c1a:	00db      	lsls	r3, r3, #3
 8001c1c:	4413      	add	r3, r2
 8001c1e:	009b      	lsls	r3, r3, #2
 8001c20:	440b      	add	r3, r1
 8001c22:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8001c26:	2200      	movs	r2, #0
 8001c28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001c2a:	7bfb      	ldrb	r3, [r7, #15]
 8001c2c:	3301      	adds	r3, #1
 8001c2e:	73fb      	strb	r3, [r7, #15]
 8001c30:	7bfa      	ldrb	r2, [r7, #15]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	685b      	ldr	r3, [r3, #4]
 8001c36:	429a      	cmp	r2, r3
 8001c38:	d3b5      	bcc.n	8001ba6 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	603b      	str	r3, [r7, #0]
 8001c40:	687e      	ldr	r6, [r7, #4]
 8001c42:	466d      	mov	r5, sp
 8001c44:	f106 0410 	add.w	r4, r6, #16
 8001c48:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c4a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c4c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c4e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c50:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c54:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c58:	1d33      	adds	r3, r6, #4
 8001c5a:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c5c:	6838      	ldr	r0, [r7, #0]
 8001c5e:	f001 ff05 	bl	8003a6c <USB_DevInit>
 8001c62:	4603      	mov	r3, r0
 8001c64:	2b00      	cmp	r3, #0
 8001c66:	d005      	beq.n	8001c74 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	2202      	movs	r2, #2
 8001c6c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8001c70:	2301      	movs	r3, #1
 8001c72:	e00d      	b.n	8001c90 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8001c74:	687b      	ldr	r3, [r7, #4]
 8001c76:	2200      	movs	r2, #0
 8001c78:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	2201      	movs	r2, #1
 8001c80:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4618      	mov	r0, r3
 8001c8a:	f003 f854 	bl	8004d36 <USB_DevDisconnect>

  return HAL_OK;
 8001c8e:	2300      	movs	r3, #0
}
 8001c90:	4618      	mov	r0, r3
 8001c92:	3714      	adds	r7, #20
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001c98 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8001c98:	b580      	push	{r7, lr}
 8001c9a:	b084      	sub	sp, #16
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8001cac:	2b01      	cmp	r3, #1
 8001cae:	d101      	bne.n	8001cb4 <HAL_PCD_Start+0x1c>
 8001cb0:	2302      	movs	r3, #2
 8001cb2:	e020      	b.n	8001cf6 <HAL_PCD_Start+0x5e>
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2201      	movs	r2, #1
 8001cb8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001cc0:	2b01      	cmp	r3, #1
 8001cc2:	d109      	bne.n	8001cd8 <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8001cc4:	687b      	ldr	r3, [r7, #4]
 8001cc6:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d005      	beq.n	8001cd8 <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8001ccc:	68fb      	ldr	r3, [r7, #12]
 8001cce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001cd0:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f001 fe57 	bl	8003990 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	4618      	mov	r0, r3
 8001ce8:	f003 f804 	bl	8004cf4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	2200      	movs	r2, #0
 8001cf0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8001cf4:	2300      	movs	r3, #0
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3710      	adds	r7, #16
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	bd80      	pop	{r7, pc}

08001cfe <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8001cfe:	b590      	push	{r4, r7, lr}
 8001d00:	b08d      	sub	sp, #52	; 0x34
 8001d02:	af00      	add	r7, sp, #0
 8001d04:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	681b      	ldr	r3, [r3, #0]
 8001d0a:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8001d0c:	6a3b      	ldr	r3, [r7, #32]
 8001d0e:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	4618      	mov	r0, r3
 8001d16:	f003 f8c2 	bl	8004e9e <USB_GetMode>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	f040 848a 	bne.w	8002636 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	4618      	mov	r0, r3
 8001d28:	f003 f826 	bl	8004d78 <USB_ReadInterrupts>
 8001d2c:	4603      	mov	r3, r0
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	f000 8480 	beq.w	8002634 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8001d34:	69fb      	ldr	r3, [r7, #28]
 8001d36:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001d3a:	689b      	ldr	r3, [r3, #8]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f003 f813 	bl	8004d78 <USB_ReadInterrupts>
 8001d52:	4603      	mov	r3, r0
 8001d54:	f003 0302 	and.w	r3, r3, #2
 8001d58:	2b02      	cmp	r3, #2
 8001d5a:	d107      	bne.n	8001d6c <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	695a      	ldr	r2, [r3, #20]
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	f002 0202 	and.w	r2, r2, #2
 8001d6a:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	4618      	mov	r0, r3
 8001d72:	f003 f801 	bl	8004d78 <USB_ReadInterrupts>
 8001d76:	4603      	mov	r3, r0
 8001d78:	f003 0310 	and.w	r3, r3, #16
 8001d7c:	2b10      	cmp	r3, #16
 8001d7e:	d161      	bne.n	8001e44 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	699a      	ldr	r2, [r3, #24]
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f022 0210 	bic.w	r2, r2, #16
 8001d8e:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8001d90:	6a3b      	ldr	r3, [r7, #32]
 8001d92:	6a1b      	ldr	r3, [r3, #32]
 8001d94:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f003 020f 	and.w	r2, r3, #15
 8001d9c:	4613      	mov	r3, r2
 8001d9e:	00db      	lsls	r3, r3, #3
 8001da0:	4413      	add	r3, r2
 8001da2:	009b      	lsls	r3, r3, #2
 8001da4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001da8:	687a      	ldr	r2, [r7, #4]
 8001daa:	4413      	add	r3, r2
 8001dac:	3304      	adds	r3, #4
 8001dae:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8001db0:	69bb      	ldr	r3, [r7, #24]
 8001db2:	0c5b      	lsrs	r3, r3, #17
 8001db4:	f003 030f 	and.w	r3, r3, #15
 8001db8:	2b02      	cmp	r3, #2
 8001dba:	d124      	bne.n	8001e06 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8001dc2:	4013      	ands	r3, r2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d035      	beq.n	8001e34 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001dc8:	697b      	ldr	r3, [r7, #20]
 8001dca:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8001dcc:	69bb      	ldr	r3, [r7, #24]
 8001dce:	091b      	lsrs	r3, r3, #4
 8001dd0:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8001dd2:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dd6:	b29b      	uxth	r3, r3
 8001dd8:	461a      	mov	r2, r3
 8001dda:	6a38      	ldr	r0, [r7, #32]
 8001ddc:	f002 fe38 	bl	8004a50 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001de0:	697b      	ldr	r3, [r7, #20]
 8001de2:	691a      	ldr	r2, [r3, #16]
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	091b      	lsrs	r3, r3, #4
 8001de8:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dec:	441a      	add	r2, r3
 8001dee:	697b      	ldr	r3, [r7, #20]
 8001df0:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001df2:	697b      	ldr	r3, [r7, #20]
 8001df4:	6a1a      	ldr	r2, [r3, #32]
 8001df6:	69bb      	ldr	r3, [r7, #24]
 8001df8:	091b      	lsrs	r3, r3, #4
 8001dfa:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001dfe:	441a      	add	r2, r3
 8001e00:	697b      	ldr	r3, [r7, #20]
 8001e02:	621a      	str	r2, [r3, #32]
 8001e04:	e016      	b.n	8001e34 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8001e06:	69bb      	ldr	r3, [r7, #24]
 8001e08:	0c5b      	lsrs	r3, r3, #17
 8001e0a:	f003 030f 	and.w	r3, r3, #15
 8001e0e:	2b06      	cmp	r3, #6
 8001e10:	d110      	bne.n	8001e34 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8001e18:	2208      	movs	r2, #8
 8001e1a:	4619      	mov	r1, r3
 8001e1c:	6a38      	ldr	r0, [r7, #32]
 8001e1e:	f002 fe17 	bl	8004a50 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	6a1a      	ldr	r2, [r3, #32]
 8001e26:	69bb      	ldr	r3, [r7, #24]
 8001e28:	091b      	lsrs	r3, r3, #4
 8001e2a:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8001e2e:	441a      	add	r2, r3
 8001e30:	697b      	ldr	r3, [r7, #20]
 8001e32:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	699a      	ldr	r2, [r3, #24]
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	f042 0210 	orr.w	r2, r2, #16
 8001e42:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	4618      	mov	r0, r3
 8001e4a:	f002 ff95 	bl	8004d78 <USB_ReadInterrupts>
 8001e4e:	4603      	mov	r3, r0
 8001e50:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e54:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8001e58:	f040 80a7 	bne.w	8001faa <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8001e5c:	2300      	movs	r3, #0
 8001e5e:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	681b      	ldr	r3, [r3, #0]
 8001e64:	4618      	mov	r0, r3
 8001e66:	f002 ff9a 	bl	8004d9e <USB_ReadDevAllOutEpInterrupt>
 8001e6a:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8001e6c:	e099      	b.n	8001fa2 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8001e6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001e70:	f003 0301 	and.w	r3, r3, #1
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	f000 808e 	beq.w	8001f96 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001e80:	b2d2      	uxtb	r2, r2
 8001e82:	4611      	mov	r1, r2
 8001e84:	4618      	mov	r0, r3
 8001e86:	f002 ffbe 	bl	8004e06 <USB_ReadDevOutEPInterrupt>
 8001e8a:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8001e8c:	693b      	ldr	r3, [r7, #16]
 8001e8e:	f003 0301 	and.w	r3, r3, #1
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d00c      	beq.n	8001eb0 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8001e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e98:	015a      	lsls	r2, r3, #5
 8001e9a:	69fb      	ldr	r3, [r7, #28]
 8001e9c:	4413      	add	r3, r2
 8001e9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ea2:	461a      	mov	r2, r3
 8001ea4:	2301      	movs	r3, #1
 8001ea6:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8001ea8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001eaa:	6878      	ldr	r0, [r7, #4]
 8001eac:	f000 feaa 	bl	8002c04 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8001eb0:	693b      	ldr	r3, [r7, #16]
 8001eb2:	f003 0308 	and.w	r3, r3, #8
 8001eb6:	2b00      	cmp	r3, #0
 8001eb8:	d00c      	beq.n	8001ed4 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8001eba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ebc:	015a      	lsls	r2, r3, #5
 8001ebe:	69fb      	ldr	r3, [r7, #28]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2308      	movs	r3, #8
 8001eca:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8001ecc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001ece:	6878      	ldr	r0, [r7, #4]
 8001ed0:	f000 ff80 	bl	8002dd4 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8001ed4:	693b      	ldr	r3, [r7, #16]
 8001ed6:	f003 0310 	and.w	r3, r3, #16
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d008      	beq.n	8001ef0 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8001ede:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ee0:	015a      	lsls	r2, r3, #5
 8001ee2:	69fb      	ldr	r3, [r7, #28]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001eea:	461a      	mov	r2, r3
 8001eec:	2310      	movs	r3, #16
 8001eee:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8001ef0:	693b      	ldr	r3, [r7, #16]
 8001ef2:	f003 0302 	and.w	r3, r3, #2
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d030      	beq.n	8001f5c <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8001efa:	6a3b      	ldr	r3, [r7, #32]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001f02:	2b80      	cmp	r3, #128	; 0x80
 8001f04:	d109      	bne.n	8001f1a <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001f0c:	685b      	ldr	r3, [r3, #4]
 8001f0e:	69fa      	ldr	r2, [r7, #28]
 8001f10:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8001f14:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001f18:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8001f1a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001f1c:	4613      	mov	r3, r2
 8001f1e:	00db      	lsls	r3, r3, #3
 8001f20:	4413      	add	r3, r2
 8001f22:	009b      	lsls	r3, r3, #2
 8001f24:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8001f28:	687a      	ldr	r2, [r7, #4]
 8001f2a:	4413      	add	r3, r2
 8001f2c:	3304      	adds	r3, #4
 8001f2e:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8001f30:	697b      	ldr	r3, [r7, #20]
 8001f32:	78db      	ldrb	r3, [r3, #3]
 8001f34:	2b01      	cmp	r3, #1
 8001f36:	d108      	bne.n	8001f4a <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8001f38:	697b      	ldr	r3, [r7, #20]
 8001f3a:	2200      	movs	r2, #0
 8001f3c:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8001f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	4619      	mov	r1, r3
 8001f44:	6878      	ldr	r0, [r7, #4]
 8001f46:	f004 ffcf 	bl	8006ee8 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8001f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f4c:	015a      	lsls	r2, r3, #5
 8001f4e:	69fb      	ldr	r3, [r7, #28]
 8001f50:	4413      	add	r3, r2
 8001f52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f56:	461a      	mov	r2, r3
 8001f58:	2302      	movs	r3, #2
 8001f5a:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	f003 0320 	and.w	r3, r3, #32
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d008      	beq.n	8001f78 <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8001f66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f68:	015a      	lsls	r2, r3, #5
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f72:	461a      	mov	r2, r3
 8001f74:	2320      	movs	r3, #32
 8001f76:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8001f78:	693b      	ldr	r3, [r7, #16]
 8001f7a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d009      	beq.n	8001f96 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8001f82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f84:	015a      	lsls	r2, r3, #5
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	4413      	add	r3, r2
 8001f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8001f8e:	461a      	mov	r2, r3
 8001f90:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001f94:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8001f96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f98:	3301      	adds	r3, #1
 8001f9a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8001f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9e:	085b      	lsrs	r3, r3, #1
 8001fa0:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8001fa2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	f47f af62 	bne.w	8001e6e <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	681b      	ldr	r3, [r3, #0]
 8001fae:	4618      	mov	r0, r3
 8001fb0:	f002 fee2 	bl	8004d78 <USB_ReadInterrupts>
 8001fb4:	4603      	mov	r3, r0
 8001fb6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001fba:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8001fbe:	f040 80db 	bne.w	8002178 <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4618      	mov	r0, r3
 8001fc8:	f002 ff03 	bl	8004dd2 <USB_ReadDevAllInEpInterrupt>
 8001fcc:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8001fce:	2300      	movs	r3, #0
 8001fd0:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8001fd2:	e0cd      	b.n	8002170 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8001fd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001fd6:	f003 0301 	and.w	r3, r3, #1
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	f000 80c2 	beq.w	8002164 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fe6:	b2d2      	uxtb	r2, r2
 8001fe8:	4611      	mov	r1, r2
 8001fea:	4618      	mov	r0, r3
 8001fec:	f002 ff29 	bl	8004e42 <USB_ReadDevInEPInterrupt>
 8001ff0:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8001ff2:	693b      	ldr	r3, [r7, #16]
 8001ff4:	f003 0301 	and.w	r3, r3, #1
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d057      	beq.n	80020ac <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8001ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ffe:	f003 030f 	and.w	r3, r3, #15
 8002002:	2201      	movs	r2, #1
 8002004:	fa02 f303 	lsl.w	r3, r2, r3
 8002008:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002010:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	43db      	mvns	r3, r3
 8002016:	69f9      	ldr	r1, [r7, #28]
 8002018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800201c:	4013      	ands	r3, r2
 800201e:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002022:	015a      	lsls	r2, r3, #5
 8002024:	69fb      	ldr	r3, [r7, #28]
 8002026:	4413      	add	r3, r2
 8002028:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800202c:	461a      	mov	r2, r3
 800202e:	2301      	movs	r3, #1
 8002030:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	691b      	ldr	r3, [r3, #16]
 8002036:	2b01      	cmp	r3, #1
 8002038:	d132      	bne.n	80020a0 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 800203a:	6879      	ldr	r1, [r7, #4]
 800203c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800203e:	4613      	mov	r3, r2
 8002040:	00db      	lsls	r3, r3, #3
 8002042:	4413      	add	r3, r2
 8002044:	009b      	lsls	r3, r3, #2
 8002046:	440b      	add	r3, r1
 8002048:	334c      	adds	r3, #76	; 0x4c
 800204a:	6819      	ldr	r1, [r3, #0]
 800204c:	6878      	ldr	r0, [r7, #4]
 800204e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002050:	4613      	mov	r3, r2
 8002052:	00db      	lsls	r3, r3, #3
 8002054:	4413      	add	r3, r2
 8002056:	009b      	lsls	r3, r3, #2
 8002058:	4403      	add	r3, r0
 800205a:	3348      	adds	r3, #72	; 0x48
 800205c:	681b      	ldr	r3, [r3, #0]
 800205e:	4419      	add	r1, r3
 8002060:	6878      	ldr	r0, [r7, #4]
 8002062:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002064:	4613      	mov	r3, r2
 8002066:	00db      	lsls	r3, r3, #3
 8002068:	4413      	add	r3, r2
 800206a:	009b      	lsls	r3, r3, #2
 800206c:	4403      	add	r3, r0
 800206e:	334c      	adds	r3, #76	; 0x4c
 8002070:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002072:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002074:	2b00      	cmp	r3, #0
 8002076:	d113      	bne.n	80020a0 <HAL_PCD_IRQHandler+0x3a2>
 8002078:	6879      	ldr	r1, [r7, #4]
 800207a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800207c:	4613      	mov	r3, r2
 800207e:	00db      	lsls	r3, r3, #3
 8002080:	4413      	add	r3, r2
 8002082:	009b      	lsls	r3, r3, #2
 8002084:	440b      	add	r3, r1
 8002086:	3354      	adds	r3, #84	; 0x54
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	2b00      	cmp	r3, #0
 800208c:	d108      	bne.n	80020a0 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6818      	ldr	r0, [r3, #0]
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002098:	461a      	mov	r2, r3
 800209a:	2101      	movs	r1, #1
 800209c:	f002 ff30 	bl	8004f00 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 80020a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020a2:	b2db      	uxtb	r3, r3
 80020a4:	4619      	mov	r1, r3
 80020a6:	6878      	ldr	r0, [r7, #4]
 80020a8:	f004 fea3 	bl	8006df2 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 80020ac:	693b      	ldr	r3, [r7, #16]
 80020ae:	f003 0308 	and.w	r3, r3, #8
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	d008      	beq.n	80020c8 <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 80020b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020b8:	015a      	lsls	r2, r3, #5
 80020ba:	69fb      	ldr	r3, [r7, #28]
 80020bc:	4413      	add	r3, r2
 80020be:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020c2:	461a      	mov	r2, r3
 80020c4:	2308      	movs	r3, #8
 80020c6:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 80020c8:	693b      	ldr	r3, [r7, #16]
 80020ca:	f003 0310 	and.w	r3, r3, #16
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d008      	beq.n	80020e4 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 80020d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020d4:	015a      	lsls	r2, r3, #5
 80020d6:	69fb      	ldr	r3, [r7, #28]
 80020d8:	4413      	add	r3, r2
 80020da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020de:	461a      	mov	r2, r3
 80020e0:	2310      	movs	r3, #16
 80020e2:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 80020e4:	693b      	ldr	r3, [r7, #16]
 80020e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d008      	beq.n	8002100 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 80020ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020f0:	015a      	lsls	r2, r3, #5
 80020f2:	69fb      	ldr	r3, [r7, #28]
 80020f4:	4413      	add	r3, r2
 80020f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80020fa:	461a      	mov	r2, r3
 80020fc:	2340      	movs	r3, #64	; 0x40
 80020fe:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	f003 0302 	and.w	r3, r3, #2
 8002106:	2b00      	cmp	r3, #0
 8002108:	d023      	beq.n	8002152 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 800210a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800210c:	6a38      	ldr	r0, [r7, #32]
 800210e:	f001 fe11 	bl	8003d34 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002112:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002114:	4613      	mov	r3, r2
 8002116:	00db      	lsls	r3, r3, #3
 8002118:	4413      	add	r3, r2
 800211a:	009b      	lsls	r3, r3, #2
 800211c:	3338      	adds	r3, #56	; 0x38
 800211e:	687a      	ldr	r2, [r7, #4]
 8002120:	4413      	add	r3, r2
 8002122:	3304      	adds	r3, #4
 8002124:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002126:	697b      	ldr	r3, [r7, #20]
 8002128:	78db      	ldrb	r3, [r3, #3]
 800212a:	2b01      	cmp	r3, #1
 800212c:	d108      	bne.n	8002140 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 800212e:	697b      	ldr	r3, [r7, #20]
 8002130:	2200      	movs	r2, #0
 8002132:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002134:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002136:	b2db      	uxtb	r3, r3
 8002138:	4619      	mov	r1, r3
 800213a:	6878      	ldr	r0, [r7, #4]
 800213c:	f004 fee6 	bl	8006f0c <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	015a      	lsls	r2, r3, #5
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	4413      	add	r3, r2
 8002148:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800214c:	461a      	mov	r2, r3
 800214e:	2302      	movs	r3, #2
 8002150:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002152:	693b      	ldr	r3, [r7, #16]
 8002154:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002158:	2b00      	cmp	r3, #0
 800215a:	d003      	beq.n	8002164 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 800215c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800215e:	6878      	ldr	r0, [r7, #4]
 8002160:	f000 fcc3 	bl	8002aea <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002164:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002166:	3301      	adds	r3, #1
 8002168:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 800216a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800216c:	085b      	lsrs	r3, r3, #1
 800216e:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002170:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002172:	2b00      	cmp	r3, #0
 8002174:	f47f af2e 	bne.w	8001fd4 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f002 fdfb 	bl	8004d78 <USB_ReadInterrupts>
 8002182:	4603      	mov	r3, r0
 8002184:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002188:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800218c:	d122      	bne.n	80021d4 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002194:	685b      	ldr	r3, [r3, #4]
 8002196:	69fa      	ldr	r2, [r7, #28]
 8002198:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800219c:	f023 0301 	bic.w	r3, r3, #1
 80021a0:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 80021a8:	2b01      	cmp	r3, #1
 80021aa:	d108      	bne.n	80021be <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	2200      	movs	r2, #0
 80021b0:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 80021b4:	2100      	movs	r1, #0
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 feaa 	bl	8002f10 <HAL_PCDEx_LPM_Callback>
 80021bc:	e002      	b.n	80021c4 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 80021be:	6878      	ldr	r0, [r7, #4]
 80021c0:	f004 fe84 	bl	8006ecc <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	681b      	ldr	r3, [r3, #0]
 80021c8:	695a      	ldr	r2, [r3, #20]
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 80021d2:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	4618      	mov	r0, r3
 80021da:	f002 fdcd 	bl	8004d78 <USB_ReadInterrupts>
 80021de:	4603      	mov	r3, r0
 80021e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80021e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80021e8:	d112      	bne.n	8002210 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 80021ea:	69fb      	ldr	r3, [r7, #28]
 80021ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80021f0:	689b      	ldr	r3, [r3, #8]
 80021f2:	f003 0301 	and.w	r3, r3, #1
 80021f6:	2b01      	cmp	r3, #1
 80021f8:	d102      	bne.n	8002200 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 80021fa:	6878      	ldr	r0, [r7, #4]
 80021fc:	f004 fe40 	bl	8006e80 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	695a      	ldr	r2, [r3, #20]
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 800220e:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4618      	mov	r0, r3
 8002216:	f002 fdaf 	bl	8004d78 <USB_ReadInterrupts>
 800221a:	4603      	mov	r3, r0
 800221c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002224:	f040 80b7 	bne.w	8002396 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002228:	69fb      	ldr	r3, [r7, #28]
 800222a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800222e:	685b      	ldr	r3, [r3, #4]
 8002230:	69fa      	ldr	r2, [r7, #28]
 8002232:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002236:	f023 0301 	bic.w	r3, r3, #1
 800223a:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	2110      	movs	r1, #16
 8002242:	4618      	mov	r0, r3
 8002244:	f001 fd76 	bl	8003d34 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002248:	2300      	movs	r3, #0
 800224a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800224c:	e046      	b.n	80022dc <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 800224e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002250:	015a      	lsls	r2, r3, #5
 8002252:	69fb      	ldr	r3, [r7, #28]
 8002254:	4413      	add	r3, r2
 8002256:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800225a:	461a      	mov	r2, r3
 800225c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002260:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002262:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002264:	015a      	lsls	r2, r3, #5
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	4413      	add	r3, r2
 800226a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002272:	0151      	lsls	r1, r2, #5
 8002274:	69fa      	ldr	r2, [r7, #28]
 8002276:	440a      	add	r2, r1
 8002278:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800227c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002280:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002284:	015a      	lsls	r2, r3, #5
 8002286:	69fb      	ldr	r3, [r7, #28]
 8002288:	4413      	add	r3, r2
 800228a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800228e:	461a      	mov	r2, r3
 8002290:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002294:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002296:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002298:	015a      	lsls	r2, r3, #5
 800229a:	69fb      	ldr	r3, [r7, #28]
 800229c:	4413      	add	r3, r2
 800229e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022a6:	0151      	lsls	r1, r2, #5
 80022a8:	69fa      	ldr	r2, [r7, #28]
 80022aa:	440a      	add	r2, r1
 80022ac:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022b0:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80022b4:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80022b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022b8:	015a      	lsls	r2, r3, #5
 80022ba:	69fb      	ldr	r3, [r7, #28]
 80022bc:	4413      	add	r3, r2
 80022be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022c6:	0151      	lsls	r1, r2, #5
 80022c8:	69fa      	ldr	r2, [r7, #28]
 80022ca:	440a      	add	r2, r1
 80022cc:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80022d0:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80022d4:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80022d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022d8:	3301      	adds	r3, #1
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	685b      	ldr	r3, [r3, #4]
 80022e0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80022e2:	429a      	cmp	r2, r3
 80022e4:	d3b3      	bcc.n	800224e <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80022ec:	69db      	ldr	r3, [r3, #28]
 80022ee:	69fa      	ldr	r2, [r7, #28]
 80022f0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80022f4:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80022f8:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d016      	beq.n	8002330 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002308:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800230c:	69fa      	ldr	r2, [r7, #28]
 800230e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002312:	f043 030b 	orr.w	r3, r3, #11
 8002316:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800231a:	69fb      	ldr	r3, [r7, #28]
 800231c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002320:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002322:	69fa      	ldr	r2, [r7, #28]
 8002324:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002328:	f043 030b 	orr.w	r3, r3, #11
 800232c:	6453      	str	r3, [r2, #68]	; 0x44
 800232e:	e015      	b.n	800235c <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002330:	69fb      	ldr	r3, [r7, #28]
 8002332:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002336:	695b      	ldr	r3, [r3, #20]
 8002338:	69fa      	ldr	r2, [r7, #28]
 800233a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800233e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002342:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002346:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002348:	69fb      	ldr	r3, [r7, #28]
 800234a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800234e:	691b      	ldr	r3, [r3, #16]
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002356:	f043 030b 	orr.w	r3, r3, #11
 800235a:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800235c:	69fb      	ldr	r3, [r7, #28]
 800235e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	69fa      	ldr	r2, [r7, #28]
 8002366:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800236a:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 800236e:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	6818      	ldr	r0, [r3, #0]
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	691b      	ldr	r3, [r3, #16]
 8002378:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002380:	461a      	mov	r2, r3
 8002382:	f002 fdbd 	bl	8004f00 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	695a      	ldr	r2, [r3, #20]
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002394:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	4618      	mov	r0, r3
 800239c:	f002 fcec 	bl	8004d78 <USB_ReadInterrupts>
 80023a0:	4603      	mov	r3, r0
 80023a2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80023a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023aa:	d124      	bne.n	80023f6 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4618      	mov	r0, r3
 80023b2:	f002 fd82 	bl	8004eba <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f001 fd37 	bl	8003e2e <USB_GetDevSpeed>
 80023c0:	4603      	mov	r3, r0
 80023c2:	461a      	mov	r2, r3
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	681c      	ldr	r4, [r3, #0]
 80023cc:	f001 f9d0 	bl	8003770 <HAL_RCC_GetHCLKFreq>
 80023d0:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80023d2:	687b      	ldr	r3, [r7, #4]
 80023d4:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	461a      	mov	r2, r3
 80023da:	4620      	mov	r0, r4
 80023dc:	f001 fa36 	bl	800384c <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80023e0:	6878      	ldr	r0, [r7, #4]
 80023e2:	f004 fd2e 	bl	8006e42 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	695a      	ldr	r2, [r3, #20]
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80023f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f002 fcbc 	bl	8004d78 <USB_ReadInterrupts>
 8002400:	4603      	mov	r3, r0
 8002402:	f003 0308 	and.w	r3, r3, #8
 8002406:	2b08      	cmp	r3, #8
 8002408:	d10a      	bne.n	8002420 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 800240a:	6878      	ldr	r0, [r7, #4]
 800240c:	f004 fd0b 	bl	8006e26 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	695a      	ldr	r2, [r3, #20]
 8002416:	687b      	ldr	r3, [r7, #4]
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	f002 0208 	and.w	r2, r2, #8
 800241e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f002 fca7 	bl	8004d78 <USB_ReadInterrupts>
 800242a:	4603      	mov	r3, r0
 800242c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002430:	2b80      	cmp	r3, #128	; 0x80
 8002432:	d122      	bne.n	800247a <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002434:	6a3b      	ldr	r3, [r7, #32]
 8002436:	699b      	ldr	r3, [r3, #24]
 8002438:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800243c:	6a3b      	ldr	r3, [r7, #32]
 800243e:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002440:	2301      	movs	r3, #1
 8002442:	627b      	str	r3, [r7, #36]	; 0x24
 8002444:	e014      	b.n	8002470 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002446:	6879      	ldr	r1, [r7, #4]
 8002448:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800244a:	4613      	mov	r3, r2
 800244c:	00db      	lsls	r3, r3, #3
 800244e:	4413      	add	r3, r2
 8002450:	009b      	lsls	r3, r3, #2
 8002452:	440b      	add	r3, r1
 8002454:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002458:	781b      	ldrb	r3, [r3, #0]
 800245a:	2b01      	cmp	r3, #1
 800245c:	d105      	bne.n	800246a <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 800245e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002460:	b2db      	uxtb	r3, r3
 8002462:	4619      	mov	r1, r3
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 fb0f 	bl	8002a88 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800246a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800246c:	3301      	adds	r3, #1
 800246e:	627b      	str	r3, [r7, #36]	; 0x24
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	685b      	ldr	r3, [r3, #4]
 8002474:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002476:	429a      	cmp	r2, r3
 8002478:	d3e5      	bcc.n	8002446 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	4618      	mov	r0, r3
 8002480:	f002 fc7a 	bl	8004d78 <USB_ReadInterrupts>
 8002484:	4603      	mov	r3, r0
 8002486:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800248a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800248e:	d13b      	bne.n	8002508 <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002490:	2301      	movs	r3, #1
 8002492:	627b      	str	r3, [r7, #36]	; 0x24
 8002494:	e02b      	b.n	80024ee <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002496:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002498:	015a      	lsls	r2, r3, #5
 800249a:	69fb      	ldr	r3, [r7, #28]
 800249c:	4413      	add	r3, r2
 800249e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024a6:	6879      	ldr	r1, [r7, #4]
 80024a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024aa:	4613      	mov	r3, r2
 80024ac:	00db      	lsls	r3, r3, #3
 80024ae:	4413      	add	r3, r2
 80024b0:	009b      	lsls	r3, r3, #2
 80024b2:	440b      	add	r3, r1
 80024b4:	3340      	adds	r3, #64	; 0x40
 80024b6:	781b      	ldrb	r3, [r3, #0]
 80024b8:	2b01      	cmp	r3, #1
 80024ba:	d115      	bne.n	80024e8 <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80024bc:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80024be:	2b00      	cmp	r3, #0
 80024c0:	da12      	bge.n	80024e8 <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80024c2:	6879      	ldr	r1, [r7, #4]
 80024c4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024c6:	4613      	mov	r3, r2
 80024c8:	00db      	lsls	r3, r3, #3
 80024ca:	4413      	add	r3, r2
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	440b      	add	r3, r1
 80024d0:	333f      	adds	r3, #63	; 0x3f
 80024d2:	2201      	movs	r2, #1
 80024d4:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80024d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80024de:	b2db      	uxtb	r3, r3
 80024e0:	4619      	mov	r1, r3
 80024e2:	6878      	ldr	r0, [r7, #4]
 80024e4:	f000 fad0 	bl	8002a88 <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80024e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024ea:	3301      	adds	r3, #1
 80024ec:	627b      	str	r3, [r7, #36]	; 0x24
 80024ee:	687b      	ldr	r3, [r7, #4]
 80024f0:	685b      	ldr	r3, [r3, #4]
 80024f2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80024f4:	429a      	cmp	r2, r3
 80024f6:	d3ce      	bcc.n	8002496 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	695a      	ldr	r2, [r3, #20]
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002506:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4618      	mov	r0, r3
 800250e:	f002 fc33 	bl	8004d78 <USB_ReadInterrupts>
 8002512:	4603      	mov	r3, r0
 8002514:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002518:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800251c:	d155      	bne.n	80025ca <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800251e:	2301      	movs	r3, #1
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
 8002522:	e045      	b.n	80025b0 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002524:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002526:	015a      	lsls	r2, r3, #5
 8002528:	69fb      	ldr	r3, [r7, #28]
 800252a:	4413      	add	r3, r2
 800252c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002530:	681b      	ldr	r3, [r3, #0]
 8002532:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002534:	6879      	ldr	r1, [r7, #4]
 8002536:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002538:	4613      	mov	r3, r2
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	4413      	add	r3, r2
 800253e:	009b      	lsls	r3, r3, #2
 8002540:	440b      	add	r3, r1
 8002542:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002546:	781b      	ldrb	r3, [r3, #0]
 8002548:	2b01      	cmp	r3, #1
 800254a:	d12e      	bne.n	80025aa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800254c:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 800254e:	2b00      	cmp	r3, #0
 8002550:	da2b      	bge.n	80025aa <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8002552:	69bb      	ldr	r3, [r7, #24]
 8002554:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 800255e:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8002562:	429a      	cmp	r2, r3
 8002564:	d121      	bne.n	80025aa <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8002566:	6879      	ldr	r1, [r7, #4]
 8002568:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800256a:	4613      	mov	r3, r2
 800256c:	00db      	lsls	r3, r3, #3
 800256e:	4413      	add	r3, r2
 8002570:	009b      	lsls	r3, r3, #2
 8002572:	440b      	add	r3, r1
 8002574:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002578:	2201      	movs	r2, #1
 800257a:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800257c:	6a3b      	ldr	r3, [r7, #32]
 800257e:	699b      	ldr	r3, [r3, #24]
 8002580:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002584:	6a3b      	ldr	r3, [r7, #32]
 8002586:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 8002588:	6a3b      	ldr	r3, [r7, #32]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002590:	2b00      	cmp	r3, #0
 8002592:	d10a      	bne.n	80025aa <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8002594:	69fb      	ldr	r3, [r7, #28]
 8002596:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800259a:	685b      	ldr	r3, [r3, #4]
 800259c:	69fa      	ldr	r2, [r7, #28]
 800259e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80025a2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80025a6:	6053      	str	r3, [r2, #4]
            break;
 80025a8:	e007      	b.n	80025ba <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80025aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025ac:	3301      	adds	r3, #1
 80025ae:	627b      	str	r3, [r7, #36]	; 0x24
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80025b6:	429a      	cmp	r2, r3
 80025b8:	d3b4      	bcc.n	8002524 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	695a      	ldr	r2, [r3, #20]
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80025c8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f002 fbd2 	bl	8004d78 <USB_ReadInterrupts>
 80025d4:	4603      	mov	r3, r0
 80025d6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80025da:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80025de:	d10a      	bne.n	80025f6 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80025e0:	6878      	ldr	r0, [r7, #4]
 80025e2:	f004 fca5 	bl	8006f30 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	695a      	ldr	r2, [r3, #20]
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80025f4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	4618      	mov	r0, r3
 80025fc:	f002 fbbc 	bl	8004d78 <USB_ReadInterrupts>
 8002600:	4603      	mov	r3, r0
 8002602:	f003 0304 	and.w	r3, r3, #4
 8002606:	2b04      	cmp	r3, #4
 8002608:	d115      	bne.n	8002636 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	f003 0304 	and.w	r3, r3, #4
 8002618:	2b00      	cmp	r3, #0
 800261a:	d002      	beq.n	8002622 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800261c:	6878      	ldr	r0, [r7, #4]
 800261e:	f004 fc95 	bl	8006f4c <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	6859      	ldr	r1, [r3, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	69ba      	ldr	r2, [r7, #24]
 800262e:	430a      	orrs	r2, r1
 8002630:	605a      	str	r2, [r3, #4]
 8002632:	e000      	b.n	8002636 <HAL_PCD_IRQHandler+0x938>
      return;
 8002634:	bf00      	nop
    }
  }
}
 8002636:	3734      	adds	r7, #52	; 0x34
 8002638:	46bd      	mov	sp, r7
 800263a:	bd90      	pop	{r4, r7, pc}

0800263c <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800263c:	b580      	push	{r7, lr}
 800263e:	b082      	sub	sp, #8
 8002640:	af00      	add	r7, sp, #0
 8002642:	6078      	str	r0, [r7, #4]
 8002644:	460b      	mov	r3, r1
 8002646:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800264e:	2b01      	cmp	r3, #1
 8002650:	d101      	bne.n	8002656 <HAL_PCD_SetAddress+0x1a>
 8002652:	2302      	movs	r3, #2
 8002654:	e013      	b.n	800267e <HAL_PCD_SetAddress+0x42>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	2201      	movs	r2, #1
 800265a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	78fa      	ldrb	r2, [r7, #3]
 8002662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	681b      	ldr	r3, [r3, #0]
 800266a:	78fa      	ldrb	r2, [r7, #3]
 800266c:	4611      	mov	r1, r2
 800266e:	4618      	mov	r0, r3
 8002670:	f002 fb1a 	bl	8004ca8 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2200      	movs	r2, #0
 8002678:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800267c:	2300      	movs	r3, #0
}
 800267e:	4618      	mov	r0, r3
 8002680:	3708      	adds	r7, #8
 8002682:	46bd      	mov	sp, r7
 8002684:	bd80      	pop	{r7, pc}

08002686 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b084      	sub	sp, #16
 800268a:	af00      	add	r7, sp, #0
 800268c:	6078      	str	r0, [r7, #4]
 800268e:	4608      	mov	r0, r1
 8002690:	4611      	mov	r1, r2
 8002692:	461a      	mov	r2, r3
 8002694:	4603      	mov	r3, r0
 8002696:	70fb      	strb	r3, [r7, #3]
 8002698:	460b      	mov	r3, r1
 800269a:	803b      	strh	r3, [r7, #0]
 800269c:	4613      	mov	r3, r2
 800269e:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 80026a0:	2300      	movs	r3, #0
 80026a2:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 80026a4:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	da0f      	bge.n	80026cc <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80026ac:	78fb      	ldrb	r3, [r7, #3]
 80026ae:	f003 020f 	and.w	r2, r3, #15
 80026b2:	4613      	mov	r3, r2
 80026b4:	00db      	lsls	r3, r3, #3
 80026b6:	4413      	add	r3, r2
 80026b8:	009b      	lsls	r3, r3, #2
 80026ba:	3338      	adds	r3, #56	; 0x38
 80026bc:	687a      	ldr	r2, [r7, #4]
 80026be:	4413      	add	r3, r2
 80026c0:	3304      	adds	r3, #4
 80026c2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80026c4:	68fb      	ldr	r3, [r7, #12]
 80026c6:	2201      	movs	r2, #1
 80026c8:	705a      	strb	r2, [r3, #1]
 80026ca:	e00f      	b.n	80026ec <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80026cc:	78fb      	ldrb	r3, [r7, #3]
 80026ce:	f003 020f 	and.w	r2, r3, #15
 80026d2:	4613      	mov	r3, r2
 80026d4:	00db      	lsls	r3, r3, #3
 80026d6:	4413      	add	r3, r2
 80026d8:	009b      	lsls	r3, r3, #2
 80026da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80026de:	687a      	ldr	r2, [r7, #4]
 80026e0:	4413      	add	r3, r2
 80026e2:	3304      	adds	r3, #4
 80026e4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	2200      	movs	r2, #0
 80026ea:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80026ec:	78fb      	ldrb	r3, [r7, #3]
 80026ee:	f003 030f 	and.w	r3, r3, #15
 80026f2:	b2da      	uxtb	r2, r3
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80026f8:	883a      	ldrh	r2, [r7, #0]
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	78ba      	ldrb	r2, [r7, #2]
 8002702:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 8002704:	68fb      	ldr	r3, [r7, #12]
 8002706:	785b      	ldrb	r3, [r3, #1]
 8002708:	2b00      	cmp	r3, #0
 800270a:	d004      	beq.n	8002716 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 800270c:	68fb      	ldr	r3, [r7, #12]
 800270e:	781b      	ldrb	r3, [r3, #0]
 8002710:	b29a      	uxth	r2, r3
 8002712:	68fb      	ldr	r3, [r7, #12]
 8002714:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8002716:	78bb      	ldrb	r3, [r7, #2]
 8002718:	2b02      	cmp	r3, #2
 800271a:	d102      	bne.n	8002722 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	2200      	movs	r2, #0
 8002720:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_PCD_EP_Open+0xaa>
 800272c:	2302      	movs	r3, #2
 800272e:	e00e      	b.n	800274e <HAL_PCD_EP_Open+0xc8>
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	68f9      	ldr	r1, [r7, #12]
 800273e:	4618      	mov	r0, r3
 8002740:	f001 fb9a 	bl	8003e78 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	2200      	movs	r2, #0
 8002748:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800274c:	7afb      	ldrb	r3, [r7, #11]
}
 800274e:	4618      	mov	r0, r3
 8002750:	3710      	adds	r7, #16
 8002752:	46bd      	mov	sp, r7
 8002754:	bd80      	pop	{r7, pc}

08002756 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002756:	b580      	push	{r7, lr}
 8002758:	b084      	sub	sp, #16
 800275a:	af00      	add	r7, sp, #0
 800275c:	6078      	str	r0, [r7, #4]
 800275e:	460b      	mov	r3, r1
 8002760:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8002762:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002766:	2b00      	cmp	r3, #0
 8002768:	da0f      	bge.n	800278a <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800276a:	78fb      	ldrb	r3, [r7, #3]
 800276c:	f003 020f 	and.w	r2, r3, #15
 8002770:	4613      	mov	r3, r2
 8002772:	00db      	lsls	r3, r3, #3
 8002774:	4413      	add	r3, r2
 8002776:	009b      	lsls	r3, r3, #2
 8002778:	3338      	adds	r3, #56	; 0x38
 800277a:	687a      	ldr	r2, [r7, #4]
 800277c:	4413      	add	r3, r2
 800277e:	3304      	adds	r3, #4
 8002780:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	2201      	movs	r2, #1
 8002786:	705a      	strb	r2, [r3, #1]
 8002788:	e00f      	b.n	80027aa <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800278a:	78fb      	ldrb	r3, [r7, #3]
 800278c:	f003 020f 	and.w	r2, r3, #15
 8002790:	4613      	mov	r3, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4413      	add	r3, r2
 8002796:	009b      	lsls	r3, r3, #2
 8002798:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800279c:	687a      	ldr	r2, [r7, #4]
 800279e:	4413      	add	r3, r2
 80027a0:	3304      	adds	r3, #4
 80027a2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	2200      	movs	r2, #0
 80027a8:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 80027aa:	78fb      	ldrb	r3, [r7, #3]
 80027ac:	f003 030f 	and.w	r3, r3, #15
 80027b0:	b2da      	uxtb	r2, r3
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80027bc:	2b01      	cmp	r3, #1
 80027be:	d101      	bne.n	80027c4 <HAL_PCD_EP_Close+0x6e>
 80027c0:	2302      	movs	r3, #2
 80027c2:	e00e      	b.n	80027e2 <HAL_PCD_EP_Close+0x8c>
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2201      	movs	r2, #1
 80027c8:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	68f9      	ldr	r1, [r7, #12]
 80027d2:	4618      	mov	r0, r3
 80027d4:	f001 fbd8 	bl	8003f88 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	3710      	adds	r7, #16
 80027e6:	46bd      	mov	sp, r7
 80027e8:	bd80      	pop	{r7, pc}

080027ea <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80027ea:	b580      	push	{r7, lr}
 80027ec:	b086      	sub	sp, #24
 80027ee:	af00      	add	r7, sp, #0
 80027f0:	60f8      	str	r0, [r7, #12]
 80027f2:	607a      	str	r2, [r7, #4]
 80027f4:	603b      	str	r3, [r7, #0]
 80027f6:	460b      	mov	r3, r1
 80027f8:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80027fa:	7afb      	ldrb	r3, [r7, #11]
 80027fc:	f003 020f 	and.w	r2, r3, #15
 8002800:	4613      	mov	r3, r2
 8002802:	00db      	lsls	r3, r3, #3
 8002804:	4413      	add	r3, r2
 8002806:	009b      	lsls	r3, r3, #2
 8002808:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800280c:	68fa      	ldr	r2, [r7, #12]
 800280e:	4413      	add	r3, r2
 8002810:	3304      	adds	r3, #4
 8002812:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8002814:	697b      	ldr	r3, [r7, #20]
 8002816:	687a      	ldr	r2, [r7, #4]
 8002818:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800281a:	697b      	ldr	r3, [r7, #20]
 800281c:	683a      	ldr	r2, [r7, #0]
 800281e:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8002820:	697b      	ldr	r3, [r7, #20]
 8002822:	2200      	movs	r2, #0
 8002824:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8002826:	697b      	ldr	r3, [r7, #20]
 8002828:	2200      	movs	r2, #0
 800282a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800282c:	7afb      	ldrb	r3, [r7, #11]
 800282e:	f003 030f 	and.w	r3, r3, #15
 8002832:	b2da      	uxtb	r2, r3
 8002834:	697b      	ldr	r3, [r7, #20]
 8002836:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	691b      	ldr	r3, [r3, #16]
 800283c:	2b01      	cmp	r3, #1
 800283e:	d102      	bne.n	8002846 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8002840:	687a      	ldr	r2, [r7, #4]
 8002842:	697b      	ldr	r3, [r7, #20]
 8002844:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8002846:	7afb      	ldrb	r3, [r7, #11]
 8002848:	f003 030f 	and.w	r3, r3, #15
 800284c:	2b00      	cmp	r3, #0
 800284e:	d109      	bne.n	8002864 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002850:	68fb      	ldr	r3, [r7, #12]
 8002852:	6818      	ldr	r0, [r3, #0]
 8002854:	68fb      	ldr	r3, [r7, #12]
 8002856:	691b      	ldr	r3, [r3, #16]
 8002858:	b2db      	uxtb	r3, r3
 800285a:	461a      	mov	r2, r3
 800285c:	6979      	ldr	r1, [r7, #20]
 800285e:	f001 feb7 	bl	80045d0 <USB_EP0StartXfer>
 8002862:	e008      	b.n	8002876 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	6818      	ldr	r0, [r3, #0]
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	691b      	ldr	r3, [r3, #16]
 800286c:	b2db      	uxtb	r3, r3
 800286e:	461a      	mov	r2, r3
 8002870:	6979      	ldr	r1, [r7, #20]
 8002872:	f001 fc65 	bl	8004140 <USB_EPStartXfer>
  }

  return HAL_OK;
 8002876:	2300      	movs	r3, #0
}
 8002878:	4618      	mov	r0, r3
 800287a:	3718      	adds	r7, #24
 800287c:	46bd      	mov	sp, r7
 800287e:	bd80      	pop	{r7, pc}

08002880 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8002880:	b580      	push	{r7, lr}
 8002882:	b086      	sub	sp, #24
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	607a      	str	r2, [r7, #4]
 800288a:	603b      	str	r3, [r7, #0]
 800288c:	460b      	mov	r3, r1
 800288e:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002890:	7afb      	ldrb	r3, [r7, #11]
 8002892:	f003 020f 	and.w	r2, r3, #15
 8002896:	4613      	mov	r3, r2
 8002898:	00db      	lsls	r3, r3, #3
 800289a:	4413      	add	r3, r2
 800289c:	009b      	lsls	r3, r3, #2
 800289e:	3338      	adds	r3, #56	; 0x38
 80028a0:	68fa      	ldr	r2, [r7, #12]
 80028a2:	4413      	add	r3, r2
 80028a4:	3304      	adds	r3, #4
 80028a6:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	687a      	ldr	r2, [r7, #4]
 80028ac:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80028ae:	697b      	ldr	r3, [r7, #20]
 80028b0:	683a      	ldr	r2, [r7, #0]
 80028b2:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80028b4:	697b      	ldr	r3, [r7, #20]
 80028b6:	2200      	movs	r2, #0
 80028b8:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80028ba:	697b      	ldr	r3, [r7, #20]
 80028bc:	2201      	movs	r2, #1
 80028be:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80028c0:	7afb      	ldrb	r3, [r7, #11]
 80028c2:	f003 030f 	and.w	r3, r3, #15
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	697b      	ldr	r3, [r7, #20]
 80028ca:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	691b      	ldr	r3, [r3, #16]
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d102      	bne.n	80028da <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80028d4:	687a      	ldr	r2, [r7, #4]
 80028d6:	697b      	ldr	r3, [r7, #20]
 80028d8:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80028da:	7afb      	ldrb	r3, [r7, #11]
 80028dc:	f003 030f 	and.w	r3, r3, #15
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d109      	bne.n	80028f8 <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028e4:	68fb      	ldr	r3, [r7, #12]
 80028e6:	6818      	ldr	r0, [r3, #0]
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	691b      	ldr	r3, [r3, #16]
 80028ec:	b2db      	uxtb	r3, r3
 80028ee:	461a      	mov	r2, r3
 80028f0:	6979      	ldr	r1, [r7, #20]
 80028f2:	f001 fe6d 	bl	80045d0 <USB_EP0StartXfer>
 80028f6:	e008      	b.n	800290a <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80028f8:	68fb      	ldr	r3, [r7, #12]
 80028fa:	6818      	ldr	r0, [r3, #0]
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	691b      	ldr	r3, [r3, #16]
 8002900:	b2db      	uxtb	r3, r3
 8002902:	461a      	mov	r2, r3
 8002904:	6979      	ldr	r1, [r7, #20]
 8002906:	f001 fc1b 	bl	8004140 <USB_EPStartXfer>
  }

  return HAL_OK;
 800290a:	2300      	movs	r3, #0
}
 800290c:	4618      	mov	r0, r3
 800290e:	3718      	adds	r7, #24
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}

08002914 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002914:	b580      	push	{r7, lr}
 8002916:	b084      	sub	sp, #16
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	460b      	mov	r3, r1
 800291e:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8002920:	78fb      	ldrb	r3, [r7, #3]
 8002922:	f003 020f 	and.w	r2, r3, #15
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	429a      	cmp	r2, r3
 800292c:	d901      	bls.n	8002932 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 800292e:	2301      	movs	r3, #1
 8002930:	e050      	b.n	80029d4 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8002932:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002936:	2b00      	cmp	r3, #0
 8002938:	da0f      	bge.n	800295a <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800293a:	78fb      	ldrb	r3, [r7, #3]
 800293c:	f003 020f 	and.w	r2, r3, #15
 8002940:	4613      	mov	r3, r2
 8002942:	00db      	lsls	r3, r3, #3
 8002944:	4413      	add	r3, r2
 8002946:	009b      	lsls	r3, r3, #2
 8002948:	3338      	adds	r3, #56	; 0x38
 800294a:	687a      	ldr	r2, [r7, #4]
 800294c:	4413      	add	r3, r2
 800294e:	3304      	adds	r3, #4
 8002950:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002952:	68fb      	ldr	r3, [r7, #12]
 8002954:	2201      	movs	r2, #1
 8002956:	705a      	strb	r2, [r3, #1]
 8002958:	e00d      	b.n	8002976 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800295a:	78fa      	ldrb	r2, [r7, #3]
 800295c:	4613      	mov	r3, r2
 800295e:	00db      	lsls	r3, r3, #3
 8002960:	4413      	add	r3, r2
 8002962:	009b      	lsls	r3, r3, #2
 8002964:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002968:	687a      	ldr	r2, [r7, #4]
 800296a:	4413      	add	r3, r2
 800296c:	3304      	adds	r3, #4
 800296e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	2200      	movs	r2, #0
 8002974:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	2201      	movs	r2, #1
 800297a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800297c:	78fb      	ldrb	r3, [r7, #3]
 800297e:	f003 030f 	and.w	r3, r3, #15
 8002982:	b2da      	uxtb	r2, r3
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800298e:	2b01      	cmp	r3, #1
 8002990:	d101      	bne.n	8002996 <HAL_PCD_EP_SetStall+0x82>
 8002992:	2302      	movs	r3, #2
 8002994:	e01e      	b.n	80029d4 <HAL_PCD_EP_SetStall+0xc0>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	2201      	movs	r2, #1
 800299a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	68f9      	ldr	r1, [r7, #12]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f002 f8ab 	bl	8004b00 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80029aa:	78fb      	ldrb	r3, [r7, #3]
 80029ac:	f003 030f 	and.w	r3, r3, #15
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d10a      	bne.n	80029ca <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	6818      	ldr	r0, [r3, #0]
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	691b      	ldr	r3, [r3, #16]
 80029bc:	b2d9      	uxtb	r1, r3
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80029c4:	461a      	mov	r2, r3
 80029c6:	f002 fa9b 	bl	8004f00 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	2200      	movs	r2, #0
 80029ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80029d2:	2300      	movs	r3, #0
}
 80029d4:	4618      	mov	r0, r3
 80029d6:	3710      	adds	r7, #16
 80029d8:	46bd      	mov	sp, r7
 80029da:	bd80      	pop	{r7, pc}

080029dc <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80029dc:	b580      	push	{r7, lr}
 80029de:	b084      	sub	sp, #16
 80029e0:	af00      	add	r7, sp, #0
 80029e2:	6078      	str	r0, [r7, #4]
 80029e4:	460b      	mov	r3, r1
 80029e6:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80029e8:	78fb      	ldrb	r3, [r7, #3]
 80029ea:	f003 020f 	and.w	r2, r3, #15
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	685b      	ldr	r3, [r3, #4]
 80029f2:	429a      	cmp	r2, r3
 80029f4:	d901      	bls.n	80029fa <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e042      	b.n	8002a80 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80029fa:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	da0f      	bge.n	8002a22 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a02:	78fb      	ldrb	r3, [r7, #3]
 8002a04:	f003 020f 	and.w	r2, r3, #15
 8002a08:	4613      	mov	r3, r2
 8002a0a:	00db      	lsls	r3, r3, #3
 8002a0c:	4413      	add	r3, r2
 8002a0e:	009b      	lsls	r3, r3, #2
 8002a10:	3338      	adds	r3, #56	; 0x38
 8002a12:	687a      	ldr	r2, [r7, #4]
 8002a14:	4413      	add	r3, r2
 8002a16:	3304      	adds	r3, #4
 8002a18:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	2201      	movs	r2, #1
 8002a1e:	705a      	strb	r2, [r3, #1]
 8002a20:	e00f      	b.n	8002a42 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002a22:	78fb      	ldrb	r3, [r7, #3]
 8002a24:	f003 020f 	and.w	r2, r3, #15
 8002a28:	4613      	mov	r3, r2
 8002a2a:	00db      	lsls	r3, r3, #3
 8002a2c:	4413      	add	r3, r2
 8002a2e:	009b      	lsls	r3, r3, #2
 8002a30:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002a34:	687a      	ldr	r2, [r7, #4]
 8002a36:	4413      	add	r3, r2
 8002a38:	3304      	adds	r3, #4
 8002a3a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8002a3c:	68fb      	ldr	r3, [r7, #12]
 8002a3e:	2200      	movs	r2, #0
 8002a40:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	2200      	movs	r2, #0
 8002a46:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8002a48:	78fb      	ldrb	r3, [r7, #3]
 8002a4a:	f003 030f 	and.w	r3, r3, #15
 8002a4e:	b2da      	uxtb	r2, r3
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a5a:	2b01      	cmp	r3, #1
 8002a5c:	d101      	bne.n	8002a62 <HAL_PCD_EP_ClrStall+0x86>
 8002a5e:	2302      	movs	r3, #2
 8002a60:	e00e      	b.n	8002a80 <HAL_PCD_EP_ClrStall+0xa4>
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	2201      	movs	r2, #1
 8002a66:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	68f9      	ldr	r1, [r7, #12]
 8002a70:	4618      	mov	r0, r3
 8002a72:	f002 f8b3 	bl	8004bdc <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	2200      	movs	r2, #0
 8002a7a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002a7e:	2300      	movs	r3, #0
}
 8002a80:	4618      	mov	r0, r3
 8002a82:	3710      	adds	r7, #16
 8002a84:	46bd      	mov	sp, r7
 8002a86:	bd80      	pop	{r7, pc}

08002a88 <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b084      	sub	sp, #16
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
 8002a90:	460b      	mov	r3, r1
 8002a92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8002a94:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8002a98:	2b00      	cmp	r3, #0
 8002a9a:	da0c      	bge.n	8002ab6 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8002a9c:	78fb      	ldrb	r3, [r7, #3]
 8002a9e:	f003 020f 	and.w	r2, r3, #15
 8002aa2:	4613      	mov	r3, r2
 8002aa4:	00db      	lsls	r3, r3, #3
 8002aa6:	4413      	add	r3, r2
 8002aa8:	009b      	lsls	r3, r3, #2
 8002aaa:	3338      	adds	r3, #56	; 0x38
 8002aac:	687a      	ldr	r2, [r7, #4]
 8002aae:	4413      	add	r3, r2
 8002ab0:	3304      	adds	r3, #4
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	e00c      	b.n	8002ad0 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8002ab6:	78fb      	ldrb	r3, [r7, #3]
 8002ab8:	f003 020f 	and.w	r2, r3, #15
 8002abc:	4613      	mov	r3, r2
 8002abe:	00db      	lsls	r3, r3, #3
 8002ac0:	4413      	add	r3, r2
 8002ac2:	009b      	lsls	r3, r3, #2
 8002ac4:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002ac8:	687a      	ldr	r2, [r7, #4]
 8002aca:	4413      	add	r3, r2
 8002acc:	3304      	adds	r3, #4
 8002ace:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	68f9      	ldr	r1, [r7, #12]
 8002ad6:	4618      	mov	r0, r3
 8002ad8:	f001 fed2 	bl	8004880 <USB_EPStopXfer>
 8002adc:	4603      	mov	r3, r0
 8002ade:	72fb      	strb	r3, [r7, #11]

  return ret;
 8002ae0:	7afb      	ldrb	r3, [r7, #11]
}
 8002ae2:	4618      	mov	r0, r3
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}

08002aea <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002aea:	b580      	push	{r7, lr}
 8002aec:	b08a      	sub	sp, #40	; 0x28
 8002aee:	af02      	add	r7, sp, #8
 8002af0:	6078      	str	r0, [r7, #4]
 8002af2:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002afa:	697b      	ldr	r3, [r7, #20]
 8002afc:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 8002afe:	683a      	ldr	r2, [r7, #0]
 8002b00:	4613      	mov	r3, r2
 8002b02:	00db      	lsls	r3, r3, #3
 8002b04:	4413      	add	r3, r2
 8002b06:	009b      	lsls	r3, r3, #2
 8002b08:	3338      	adds	r3, #56	; 0x38
 8002b0a:	687a      	ldr	r2, [r7, #4]
 8002b0c:	4413      	add	r3, r2
 8002b0e:	3304      	adds	r3, #4
 8002b10:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	6a1a      	ldr	r2, [r3, #32]
 8002b16:	68fb      	ldr	r3, [r7, #12]
 8002b18:	699b      	ldr	r3, [r3, #24]
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	d901      	bls.n	8002b22 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8002b1e:	2301      	movs	r3, #1
 8002b20:	e06c      	b.n	8002bfc <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	699a      	ldr	r2, [r3, #24]
 8002b26:	68fb      	ldr	r3, [r7, #12]
 8002b28:	6a1b      	ldr	r3, [r3, #32]
 8002b2a:	1ad3      	subs	r3, r2, r3
 8002b2c:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	68db      	ldr	r3, [r3, #12]
 8002b32:	69fa      	ldr	r2, [r7, #28]
 8002b34:	429a      	cmp	r2, r3
 8002b36:	d902      	bls.n	8002b3e <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	68db      	ldr	r3, [r3, #12]
 8002b3c:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8002b3e:	69fb      	ldr	r3, [r7, #28]
 8002b40:	3303      	adds	r3, #3
 8002b42:	089b      	lsrs	r3, r3, #2
 8002b44:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002b46:	e02b      	b.n	8002ba0 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 8002b48:	68fb      	ldr	r3, [r7, #12]
 8002b4a:	699a      	ldr	r2, [r3, #24]
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	6a1b      	ldr	r3, [r3, #32]
 8002b50:	1ad3      	subs	r3, r2, r3
 8002b52:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8002b54:	68fb      	ldr	r3, [r7, #12]
 8002b56:	68db      	ldr	r3, [r3, #12]
 8002b58:	69fa      	ldr	r2, [r7, #28]
 8002b5a:	429a      	cmp	r2, r3
 8002b5c:	d902      	bls.n	8002b64 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	68db      	ldr	r3, [r3, #12]
 8002b62:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8002b64:	69fb      	ldr	r3, [r7, #28]
 8002b66:	3303      	adds	r3, #3
 8002b68:	089b      	lsrs	r3, r3, #2
 8002b6a:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b6c:	68fb      	ldr	r3, [r7, #12]
 8002b6e:	6919      	ldr	r1, [r3, #16]
 8002b70:	683b      	ldr	r3, [r7, #0]
 8002b72:	b2da      	uxtb	r2, r3
 8002b74:	69fb      	ldr	r3, [r7, #28]
 8002b76:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	9300      	str	r3, [sp, #0]
 8002b80:	4603      	mov	r3, r0
 8002b82:	6978      	ldr	r0, [r7, #20]
 8002b84:	f001 ff26 	bl	80049d4 <USB_WritePacket>

    ep->xfer_buff  += len;
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	691a      	ldr	r2, [r3, #16]
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	441a      	add	r2, r3
 8002b90:	68fb      	ldr	r3, [r7, #12]
 8002b92:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	6a1a      	ldr	r2, [r3, #32]
 8002b98:	69fb      	ldr	r3, [r7, #28]
 8002b9a:	441a      	add	r2, r3
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002ba0:	683b      	ldr	r3, [r7, #0]
 8002ba2:	015a      	lsls	r2, r3, #5
 8002ba4:	693b      	ldr	r3, [r7, #16]
 8002ba6:	4413      	add	r3, r2
 8002ba8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bac:	699b      	ldr	r3, [r3, #24]
 8002bae:	b29b      	uxth	r3, r3
 8002bb0:	69ba      	ldr	r2, [r7, #24]
 8002bb2:	429a      	cmp	r2, r3
 8002bb4:	d809      	bhi.n	8002bca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	6a1a      	ldr	r2, [r3, #32]
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d203      	bcs.n	8002bca <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	699b      	ldr	r3, [r3, #24]
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d1be      	bne.n	8002b48 <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8002bca:	68fb      	ldr	r3, [r7, #12]
 8002bcc:	699a      	ldr	r2, [r3, #24]
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	6a1b      	ldr	r3, [r3, #32]
 8002bd2:	429a      	cmp	r2, r3
 8002bd4:	d811      	bhi.n	8002bfa <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	f003 030f 	and.w	r3, r3, #15
 8002bdc:	2201      	movs	r2, #1
 8002bde:	fa02 f303 	lsl.w	r3, r2, r3
 8002be2:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002be4:	693b      	ldr	r3, [r7, #16]
 8002be6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002bea:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	43db      	mvns	r3, r3
 8002bf0:	6939      	ldr	r1, [r7, #16]
 8002bf2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002bf6:	4013      	ands	r3, r2
 8002bf8:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3720      	adds	r7, #32
 8002c00:	46bd      	mov	sp, r7
 8002c02:	bd80      	pop	{r7, pc}

08002c04 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002c04:	b580      	push	{r7, lr}
 8002c06:	b088      	sub	sp, #32
 8002c08:	af00      	add	r7, sp, #0
 8002c0a:	6078      	str	r0, [r7, #4]
 8002c0c:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002c14:	69fb      	ldr	r3, [r7, #28]
 8002c16:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002c18:	69fb      	ldr	r3, [r7, #28]
 8002c1a:	333c      	adds	r3, #60	; 0x3c
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	015a      	lsls	r2, r3, #5
 8002c26:	69bb      	ldr	r3, [r7, #24]
 8002c28:	4413      	add	r3, r2
 8002c2a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c2e:	689b      	ldr	r3, [r3, #8]
 8002c30:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	2b01      	cmp	r3, #1
 8002c38:	d17b      	bne.n	8002d32 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8002c3a:	693b      	ldr	r3, [r7, #16]
 8002c3c:	f003 0308 	and.w	r3, r3, #8
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d015      	beq.n	8002c70 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	4a61      	ldr	r2, [pc, #388]	; (8002dcc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c48:	4293      	cmp	r3, r2
 8002c4a:	f240 80b9 	bls.w	8002dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002c4e:	693b      	ldr	r3, [r7, #16]
 8002c50:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	f000 80b3 	beq.w	8002dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002c5a:	683b      	ldr	r3, [r7, #0]
 8002c5c:	015a      	lsls	r2, r3, #5
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	4413      	add	r3, r2
 8002c62:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c66:	461a      	mov	r2, r3
 8002c68:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002c6c:	6093      	str	r3, [r2, #8]
 8002c6e:	e0a7      	b.n	8002dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8002c70:	693b      	ldr	r3, [r7, #16]
 8002c72:	f003 0320 	and.w	r3, r3, #32
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d009      	beq.n	8002c8e <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002c7a:	683b      	ldr	r3, [r7, #0]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c86:	461a      	mov	r2, r3
 8002c88:	2320      	movs	r3, #32
 8002c8a:	6093      	str	r3, [r2, #8]
 8002c8c:	e098      	b.n	8002dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8002c8e:	693b      	ldr	r3, [r7, #16]
 8002c90:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	f040 8093 	bne.w	8002dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002c9a:	697b      	ldr	r3, [r7, #20]
 8002c9c:	4a4b      	ldr	r2, [pc, #300]	; (8002dcc <PCD_EP_OutXfrComplete_int+0x1c8>)
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d90f      	bls.n	8002cc2 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00a      	beq.n	8002cc2 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002cac:	683b      	ldr	r3, [r7, #0]
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	69bb      	ldr	r3, [r7, #24]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb8:	461a      	mov	r2, r3
 8002cba:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002cbe:	6093      	str	r3, [r2, #8]
 8002cc0:	e07e      	b.n	8002dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	4613      	mov	r3, r2
 8002cc6:	00db      	lsls	r3, r3, #3
 8002cc8:	4413      	add	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002cd0:	687a      	ldr	r2, [r7, #4]
 8002cd2:	4413      	add	r3, r2
 8002cd4:	3304      	adds	r3, #4
 8002cd6:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	69da      	ldr	r2, [r3, #28]
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	0159      	lsls	r1, r3, #5
 8002ce0:	69bb      	ldr	r3, [r7, #24]
 8002ce2:	440b      	add	r3, r1
 8002ce4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002ce8:	691b      	ldr	r3, [r3, #16]
 8002cea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002cee:	1ad2      	subs	r2, r2, r3
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8002cf4:	683b      	ldr	r3, [r7, #0]
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d114      	bne.n	8002d24 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	699b      	ldr	r3, [r3, #24]
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d109      	bne.n	8002d16 <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	6818      	ldr	r0, [r3, #0]
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002d0c:	461a      	mov	r2, r3
 8002d0e:	2101      	movs	r1, #1
 8002d10:	f002 f8f6 	bl	8004f00 <USB_EP0_OutStart>
 8002d14:	e006      	b.n	8002d24 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	691a      	ldr	r2, [r3, #16]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	6a1b      	ldr	r3, [r3, #32]
 8002d1e:	441a      	add	r2, r3
 8002d20:	68fb      	ldr	r3, [r7, #12]
 8002d22:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d24:	683b      	ldr	r3, [r7, #0]
 8002d26:	b2db      	uxtb	r3, r3
 8002d28:	4619      	mov	r1, r3
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f004 f846 	bl	8006dbc <HAL_PCD_DataOutStageCallback>
 8002d30:	e046      	b.n	8002dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	4a26      	ldr	r2, [pc, #152]	; (8002dd0 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d124      	bne.n	8002d84 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8002d3a:	693b      	ldr	r3, [r7, #16]
 8002d3c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d00a      	beq.n	8002d5a <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002d44:	683b      	ldr	r3, [r7, #0]
 8002d46:	015a      	lsls	r2, r3, #5
 8002d48:	69bb      	ldr	r3, [r7, #24]
 8002d4a:	4413      	add	r3, r2
 8002d4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d50:	461a      	mov	r2, r3
 8002d52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002d56:	6093      	str	r3, [r2, #8]
 8002d58:	e032      	b.n	8002dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d5a:	693b      	ldr	r3, [r7, #16]
 8002d5c:	f003 0320 	and.w	r3, r3, #32
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d008      	beq.n	8002d76 <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d64:	683b      	ldr	r3, [r7, #0]
 8002d66:	015a      	lsls	r2, r3, #5
 8002d68:	69bb      	ldr	r3, [r7, #24]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d70:	461a      	mov	r2, r3
 8002d72:	2320      	movs	r3, #32
 8002d74:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	b2db      	uxtb	r3, r3
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	6878      	ldr	r0, [r7, #4]
 8002d7e:	f004 f81d 	bl	8006dbc <HAL_PCD_DataOutStageCallback>
 8002d82:	e01d      	b.n	8002dc0 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d114      	bne.n	8002db4 <PCD_EP_OutXfrComplete_int+0x1b0>
 8002d8a:	6879      	ldr	r1, [r7, #4]
 8002d8c:	683a      	ldr	r2, [r7, #0]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	00db      	lsls	r3, r3, #3
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	440b      	add	r3, r1
 8002d98:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d108      	bne.n	8002db4 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6818      	ldr	r0, [r3, #0]
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002dac:	461a      	mov	r2, r3
 8002dae:	2100      	movs	r1, #0
 8002db0:	f002 f8a6 	bl	8004f00 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	b2db      	uxtb	r3, r3
 8002db8:	4619      	mov	r1, r3
 8002dba:	6878      	ldr	r0, [r7, #4]
 8002dbc:	f003 fffe 	bl	8006dbc <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8002dc0:	2300      	movs	r3, #0
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3720      	adds	r7, #32
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	bd80      	pop	{r7, pc}
 8002dca:	bf00      	nop
 8002dcc:	4f54300a 	.word	0x4f54300a
 8002dd0:	4f54310a 	.word	0x4f54310a

08002dd4 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	6078      	str	r0, [r7, #4]
 8002ddc:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8002de8:	697b      	ldr	r3, [r7, #20]
 8002dea:	333c      	adds	r3, #60	; 0x3c
 8002dec:	3304      	adds	r3, #4
 8002dee:	681b      	ldr	r3, [r3, #0]
 8002df0:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	015a      	lsls	r2, r3, #5
 8002df6:	693b      	ldr	r3, [r7, #16]
 8002df8:	4413      	add	r3, r2
 8002dfa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002dfe:	689b      	ldr	r3, [r3, #8]
 8002e00:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	4a15      	ldr	r2, [pc, #84]	; (8002e5c <PCD_EP_OutSetupPacket_int+0x88>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d90e      	bls.n	8002e28 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d009      	beq.n	8002e28 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8002e14:	683b      	ldr	r3, [r7, #0]
 8002e16:	015a      	lsls	r2, r3, #5
 8002e18:	693b      	ldr	r3, [r7, #16]
 8002e1a:	4413      	add	r3, r2
 8002e1c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002e20:	461a      	mov	r2, r3
 8002e22:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002e26:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8002e28:	6878      	ldr	r0, [r7, #4]
 8002e2a:	f003 ffb5 	bl	8006d98 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	4a0a      	ldr	r2, [pc, #40]	; (8002e5c <PCD_EP_OutSetupPacket_int+0x88>)
 8002e32:	4293      	cmp	r3, r2
 8002e34:	d90c      	bls.n	8002e50 <PCD_EP_OutSetupPacket_int+0x7c>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	691b      	ldr	r3, [r3, #16]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d108      	bne.n	8002e50 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	6818      	ldr	r0, [r3, #0]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e48:	461a      	mov	r2, r3
 8002e4a:	2101      	movs	r1, #1
 8002e4c:	f002 f858 	bl	8004f00 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8002e50:	2300      	movs	r3, #0
}
 8002e52:	4618      	mov	r0, r3
 8002e54:	3718      	adds	r7, #24
 8002e56:	46bd      	mov	sp, r7
 8002e58:	bd80      	pop	{r7, pc}
 8002e5a:	bf00      	nop
 8002e5c:	4f54300a 	.word	0x4f54300a

08002e60 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8002e60:	b480      	push	{r7}
 8002e62:	b085      	sub	sp, #20
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	6078      	str	r0, [r7, #4]
 8002e68:	460b      	mov	r3, r1
 8002e6a:	70fb      	strb	r3, [r7, #3]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002e76:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8002e78:	78fb      	ldrb	r3, [r7, #3]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d107      	bne.n	8002e8e <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8002e7e:	883b      	ldrh	r3, [r7, #0]
 8002e80:	0419      	lsls	r1, r3, #16
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	68ba      	ldr	r2, [r7, #8]
 8002e88:	430a      	orrs	r2, r1
 8002e8a:	629a      	str	r2, [r3, #40]	; 0x28
 8002e8c:	e028      	b.n	8002ee0 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e94:	0c1b      	lsrs	r3, r3, #16
 8002e96:	68ba      	ldr	r2, [r7, #8]
 8002e98:	4413      	add	r3, r2
 8002e9a:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	73fb      	strb	r3, [r7, #15]
 8002ea0:	e00d      	b.n	8002ebe <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	7bfb      	ldrb	r3, [r7, #15]
 8002ea8:	3340      	adds	r3, #64	; 0x40
 8002eaa:	009b      	lsls	r3, r3, #2
 8002eac:	4413      	add	r3, r2
 8002eae:	685b      	ldr	r3, [r3, #4]
 8002eb0:	0c1b      	lsrs	r3, r3, #16
 8002eb2:	68ba      	ldr	r2, [r7, #8]
 8002eb4:	4413      	add	r3, r2
 8002eb6:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8002eb8:	7bfb      	ldrb	r3, [r7, #15]
 8002eba:	3301      	adds	r3, #1
 8002ebc:	73fb      	strb	r3, [r7, #15]
 8002ebe:	7bfa      	ldrb	r2, [r7, #15]
 8002ec0:	78fb      	ldrb	r3, [r7, #3]
 8002ec2:	3b01      	subs	r3, #1
 8002ec4:	429a      	cmp	r2, r3
 8002ec6:	d3ec      	bcc.n	8002ea2 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8002ec8:	883b      	ldrh	r3, [r7, #0]
 8002eca:	0418      	lsls	r0, r3, #16
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	6819      	ldr	r1, [r3, #0]
 8002ed0:	78fb      	ldrb	r3, [r7, #3]
 8002ed2:	3b01      	subs	r3, #1
 8002ed4:	68ba      	ldr	r2, [r7, #8]
 8002ed6:	4302      	orrs	r2, r0
 8002ed8:	3340      	adds	r3, #64	; 0x40
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	440b      	add	r3, r1
 8002ede:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8002ee0:	2300      	movs	r3, #0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3714      	adds	r7, #20
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eec:	4770      	bx	lr

08002eee <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8002eee:	b480      	push	{r7}
 8002ef0:	b083      	sub	sp, #12
 8002ef2:	af00      	add	r7, sp, #0
 8002ef4:	6078      	str	r0, [r7, #4]
 8002ef6:	460b      	mov	r3, r1
 8002ef8:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	887a      	ldrh	r2, [r7, #2]
 8002f00:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8002f02:	2300      	movs	r3, #0
}
 8002f04:	4618      	mov	r0, r3
 8002f06:	370c      	adds	r7, #12
 8002f08:	46bd      	mov	sp, r7
 8002f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f0e:	4770      	bx	lr

08002f10 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8002f10:	b480      	push	{r7}
 8002f12:	b083      	sub	sp, #12
 8002f14:	af00      	add	r7, sp, #0
 8002f16:	6078      	str	r0, [r7, #4]
 8002f18:	460b      	mov	r3, r1
 8002f1a:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8002f1c:	bf00      	nop
 8002f1e:	370c      	adds	r7, #12
 8002f20:	46bd      	mov	sp, r7
 8002f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f26:	4770      	bx	lr

08002f28 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f28:	b580      	push	{r7, lr}
 8002f2a:	b086      	sub	sp, #24
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d101      	bne.n	8002f3a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f36:	2301      	movs	r3, #1
 8002f38:	e267      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	f003 0301 	and.w	r3, r3, #1
 8002f42:	2b00      	cmp	r3, #0
 8002f44:	d075      	beq.n	8003032 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f46:	4b88      	ldr	r3, [pc, #544]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f48:	689b      	ldr	r3, [r3, #8]
 8002f4a:	f003 030c 	and.w	r3, r3, #12
 8002f4e:	2b04      	cmp	r3, #4
 8002f50:	d00c      	beq.n	8002f6c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f52:	4b85      	ldr	r3, [pc, #532]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f54:	689b      	ldr	r3, [r3, #8]
 8002f56:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002f5a:	2b08      	cmp	r3, #8
 8002f5c:	d112      	bne.n	8002f84 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f5e:	4b82      	ldr	r3, [pc, #520]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f60:	685b      	ldr	r3, [r3, #4]
 8002f62:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002f66:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002f6a:	d10b      	bne.n	8002f84 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f6c:	4b7e      	ldr	r3, [pc, #504]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d05b      	beq.n	8003030 <HAL_RCC_OscConfig+0x108>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d157      	bne.n	8003030 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f80:	2301      	movs	r3, #1
 8002f82:	e242      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f84:	687b      	ldr	r3, [r7, #4]
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002f8c:	d106      	bne.n	8002f9c <HAL_RCC_OscConfig+0x74>
 8002f8e:	4b76      	ldr	r3, [pc, #472]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a75      	ldr	r2, [pc, #468]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e01d      	b.n	8002fd8 <HAL_RCC_OscConfig+0xb0>
 8002f9c:	687b      	ldr	r3, [r7, #4]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002fa4:	d10c      	bne.n	8002fc0 <HAL_RCC_OscConfig+0x98>
 8002fa6:	4b70      	ldr	r3, [pc, #448]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	4a6f      	ldr	r2, [pc, #444]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb0:	6013      	str	r3, [r2, #0]
 8002fb2:	4b6d      	ldr	r3, [pc, #436]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4a6c      	ldr	r2, [pc, #432]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fb8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002fbc:	6013      	str	r3, [r2, #0]
 8002fbe:	e00b      	b.n	8002fd8 <HAL_RCC_OscConfig+0xb0>
 8002fc0:	4b69      	ldr	r3, [pc, #420]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	4a68      	ldr	r2, [pc, #416]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fc6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002fca:	6013      	str	r3, [r2, #0]
 8002fcc:	4b66      	ldr	r3, [pc, #408]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	4a65      	ldr	r2, [pc, #404]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002fd2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002fd6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	2b00      	cmp	r3, #0
 8002fde:	d013      	beq.n	8003008 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe0:	f7fd fe7c 	bl	8000cdc <HAL_GetTick>
 8002fe4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fe6:	e008      	b.n	8002ffa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002fe8:	f7fd fe78 	bl	8000cdc <HAL_GetTick>
 8002fec:	4602      	mov	r2, r0
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	1ad3      	subs	r3, r2, r3
 8002ff2:	2b64      	cmp	r3, #100	; 0x64
 8002ff4:	d901      	bls.n	8002ffa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002ff6:	2303      	movs	r3, #3
 8002ff8:	e207      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ffa:	4b5b      	ldr	r3, [pc, #364]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003002:	2b00      	cmp	r3, #0
 8003004:	d0f0      	beq.n	8002fe8 <HAL_RCC_OscConfig+0xc0>
 8003006:	e014      	b.n	8003032 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003008:	f7fd fe68 	bl	8000cdc <HAL_GetTick>
 800300c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800300e:	e008      	b.n	8003022 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003010:	f7fd fe64 	bl	8000cdc <HAL_GetTick>
 8003014:	4602      	mov	r2, r0
 8003016:	693b      	ldr	r3, [r7, #16]
 8003018:	1ad3      	subs	r3, r2, r3
 800301a:	2b64      	cmp	r3, #100	; 0x64
 800301c:	d901      	bls.n	8003022 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800301e:	2303      	movs	r3, #3
 8003020:	e1f3      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003022:	4b51      	ldr	r3, [pc, #324]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800302a:	2b00      	cmp	r3, #0
 800302c:	d1f0      	bne.n	8003010 <HAL_RCC_OscConfig+0xe8>
 800302e:	e000      	b.n	8003032 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003030:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d063      	beq.n	8003106 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800303e:	4b4a      	ldr	r3, [pc, #296]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8003040:	689b      	ldr	r3, [r3, #8]
 8003042:	f003 030c 	and.w	r3, r3, #12
 8003046:	2b00      	cmp	r3, #0
 8003048:	d00b      	beq.n	8003062 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800304a:	4b47      	ldr	r3, [pc, #284]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 800304c:	689b      	ldr	r3, [r3, #8]
 800304e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003052:	2b08      	cmp	r3, #8
 8003054:	d11c      	bne.n	8003090 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003056:	4b44      	ldr	r3, [pc, #272]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800305e:	2b00      	cmp	r3, #0
 8003060:	d116      	bne.n	8003090 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003062:	4b41      	ldr	r3, [pc, #260]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0302 	and.w	r3, r3, #2
 800306a:	2b00      	cmp	r3, #0
 800306c:	d005      	beq.n	800307a <HAL_RCC_OscConfig+0x152>
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	68db      	ldr	r3, [r3, #12]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d001      	beq.n	800307a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003076:	2301      	movs	r3, #1
 8003078:	e1c7      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800307a:	4b3b      	ldr	r3, [pc, #236]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	00db      	lsls	r3, r3, #3
 8003088:	4937      	ldr	r1, [pc, #220]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 800308a:	4313      	orrs	r3, r2
 800308c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800308e:	e03a      	b.n	8003106 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	68db      	ldr	r3, [r3, #12]
 8003094:	2b00      	cmp	r3, #0
 8003096:	d020      	beq.n	80030da <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003098:	4b34      	ldr	r3, [pc, #208]	; (800316c <HAL_RCC_OscConfig+0x244>)
 800309a:	2201      	movs	r2, #1
 800309c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800309e:	f7fd fe1d 	bl	8000cdc <HAL_GetTick>
 80030a2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a4:	e008      	b.n	80030b8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030a6:	f7fd fe19 	bl	8000cdc <HAL_GetTick>
 80030aa:	4602      	mov	r2, r0
 80030ac:	693b      	ldr	r3, [r7, #16]
 80030ae:	1ad3      	subs	r3, r2, r3
 80030b0:	2b02      	cmp	r3, #2
 80030b2:	d901      	bls.n	80030b8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030b4:	2303      	movs	r3, #3
 80030b6:	e1a8      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030b8:	4b2b      	ldr	r3, [pc, #172]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	f003 0302 	and.w	r3, r3, #2
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d0f0      	beq.n	80030a6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030c4:	4b28      	ldr	r3, [pc, #160]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	691b      	ldr	r3, [r3, #16]
 80030d0:	00db      	lsls	r3, r3, #3
 80030d2:	4925      	ldr	r1, [pc, #148]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 80030d4:	4313      	orrs	r3, r2
 80030d6:	600b      	str	r3, [r1, #0]
 80030d8:	e015      	b.n	8003106 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030da:	4b24      	ldr	r3, [pc, #144]	; (800316c <HAL_RCC_OscConfig+0x244>)
 80030dc:	2200      	movs	r2, #0
 80030de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030e0:	f7fd fdfc 	bl	8000cdc <HAL_GetTick>
 80030e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030e6:	e008      	b.n	80030fa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80030e8:	f7fd fdf8 	bl	8000cdc <HAL_GetTick>
 80030ec:	4602      	mov	r2, r0
 80030ee:	693b      	ldr	r3, [r7, #16]
 80030f0:	1ad3      	subs	r3, r2, r3
 80030f2:	2b02      	cmp	r3, #2
 80030f4:	d901      	bls.n	80030fa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030f6:	2303      	movs	r3, #3
 80030f8:	e187      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030fa:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	f003 0302 	and.w	r3, r3, #2
 8003102:	2b00      	cmp	r3, #0
 8003104:	d1f0      	bne.n	80030e8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 0308 	and.w	r3, r3, #8
 800310e:	2b00      	cmp	r3, #0
 8003110:	d036      	beq.n	8003180 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	695b      	ldr	r3, [r3, #20]
 8003116:	2b00      	cmp	r3, #0
 8003118:	d016      	beq.n	8003148 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800311a:	4b15      	ldr	r3, [pc, #84]	; (8003170 <HAL_RCC_OscConfig+0x248>)
 800311c:	2201      	movs	r2, #1
 800311e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003120:	f7fd fddc 	bl	8000cdc <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003128:	f7fd fdd8 	bl	8000cdc <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e167      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800313a:	4b0b      	ldr	r3, [pc, #44]	; (8003168 <HAL_RCC_OscConfig+0x240>)
 800313c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800313e:	f003 0302 	and.w	r3, r3, #2
 8003142:	2b00      	cmp	r3, #0
 8003144:	d0f0      	beq.n	8003128 <HAL_RCC_OscConfig+0x200>
 8003146:	e01b      	b.n	8003180 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003148:	4b09      	ldr	r3, [pc, #36]	; (8003170 <HAL_RCC_OscConfig+0x248>)
 800314a:	2200      	movs	r2, #0
 800314c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800314e:	f7fd fdc5 	bl	8000cdc <HAL_GetTick>
 8003152:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003154:	e00e      	b.n	8003174 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003156:	f7fd fdc1 	bl	8000cdc <HAL_GetTick>
 800315a:	4602      	mov	r2, r0
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	1ad3      	subs	r3, r2, r3
 8003160:	2b02      	cmp	r3, #2
 8003162:	d907      	bls.n	8003174 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003164:	2303      	movs	r3, #3
 8003166:	e150      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
 8003168:	40023800 	.word	0x40023800
 800316c:	42470000 	.word	0x42470000
 8003170:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003174:	4b88      	ldr	r3, [pc, #544]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003176:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003178:	f003 0302 	and.w	r3, r3, #2
 800317c:	2b00      	cmp	r3, #0
 800317e:	d1ea      	bne.n	8003156 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	f003 0304 	and.w	r3, r3, #4
 8003188:	2b00      	cmp	r3, #0
 800318a:	f000 8097 	beq.w	80032bc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800318e:	2300      	movs	r3, #0
 8003190:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003192:	4b81      	ldr	r3, [pc, #516]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003196:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10f      	bne.n	80031be <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800319e:	2300      	movs	r3, #0
 80031a0:	60bb      	str	r3, [r7, #8]
 80031a2:	4b7d      	ldr	r3, [pc, #500]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	4a7c      	ldr	r2, [pc, #496]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 80031a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80031ac:	6413      	str	r3, [r2, #64]	; 0x40
 80031ae:	4b7a      	ldr	r3, [pc, #488]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 80031b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80031b6:	60bb      	str	r3, [r7, #8]
 80031b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031ba:	2301      	movs	r3, #1
 80031bc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031be:	4b77      	ldr	r3, [pc, #476]	; (800339c <HAL_RCC_OscConfig+0x474>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d118      	bne.n	80031fc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ca:	4b74      	ldr	r3, [pc, #464]	; (800339c <HAL_RCC_OscConfig+0x474>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4a73      	ldr	r2, [pc, #460]	; (800339c <HAL_RCC_OscConfig+0x474>)
 80031d0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80031d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031d6:	f7fd fd81 	bl	8000cdc <HAL_GetTick>
 80031da:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031dc:	e008      	b.n	80031f0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031de:	f7fd fd7d 	bl	8000cdc <HAL_GetTick>
 80031e2:	4602      	mov	r2, r0
 80031e4:	693b      	ldr	r3, [r7, #16]
 80031e6:	1ad3      	subs	r3, r2, r3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d901      	bls.n	80031f0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031ec:	2303      	movs	r3, #3
 80031ee:	e10c      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031f0:	4b6a      	ldr	r3, [pc, #424]	; (800339c <HAL_RCC_OscConfig+0x474>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d0f0      	beq.n	80031de <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	689b      	ldr	r3, [r3, #8]
 8003200:	2b01      	cmp	r3, #1
 8003202:	d106      	bne.n	8003212 <HAL_RCC_OscConfig+0x2ea>
 8003204:	4b64      	ldr	r3, [pc, #400]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003206:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003208:	4a63      	ldr	r2, [pc, #396]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 800320a:	f043 0301 	orr.w	r3, r3, #1
 800320e:	6713      	str	r3, [r2, #112]	; 0x70
 8003210:	e01c      	b.n	800324c <HAL_RCC_OscConfig+0x324>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	2b05      	cmp	r3, #5
 8003218:	d10c      	bne.n	8003234 <HAL_RCC_OscConfig+0x30c>
 800321a:	4b5f      	ldr	r3, [pc, #380]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 800321c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800321e:	4a5e      	ldr	r2, [pc, #376]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003220:	f043 0304 	orr.w	r3, r3, #4
 8003224:	6713      	str	r3, [r2, #112]	; 0x70
 8003226:	4b5c      	ldr	r3, [pc, #368]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003228:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800322a:	4a5b      	ldr	r2, [pc, #364]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 800322c:	f043 0301 	orr.w	r3, r3, #1
 8003230:	6713      	str	r3, [r2, #112]	; 0x70
 8003232:	e00b      	b.n	800324c <HAL_RCC_OscConfig+0x324>
 8003234:	4b58      	ldr	r3, [pc, #352]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003238:	4a57      	ldr	r2, [pc, #348]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 800323a:	f023 0301 	bic.w	r3, r3, #1
 800323e:	6713      	str	r3, [r2, #112]	; 0x70
 8003240:	4b55      	ldr	r3, [pc, #340]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003242:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003244:	4a54      	ldr	r2, [pc, #336]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003246:	f023 0304 	bic.w	r3, r3, #4
 800324a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	2b00      	cmp	r3, #0
 8003252:	d015      	beq.n	8003280 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003254:	f7fd fd42 	bl	8000cdc <HAL_GetTick>
 8003258:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325a:	e00a      	b.n	8003272 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800325c:	f7fd fd3e 	bl	8000cdc <HAL_GetTick>
 8003260:	4602      	mov	r2, r0
 8003262:	693b      	ldr	r3, [r7, #16]
 8003264:	1ad3      	subs	r3, r2, r3
 8003266:	f241 3288 	movw	r2, #5000	; 0x1388
 800326a:	4293      	cmp	r3, r2
 800326c:	d901      	bls.n	8003272 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800326e:	2303      	movs	r3, #3
 8003270:	e0cb      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003272:	4b49      	ldr	r3, [pc, #292]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003276:	f003 0302 	and.w	r3, r3, #2
 800327a:	2b00      	cmp	r3, #0
 800327c:	d0ee      	beq.n	800325c <HAL_RCC_OscConfig+0x334>
 800327e:	e014      	b.n	80032aa <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003280:	f7fd fd2c 	bl	8000cdc <HAL_GetTick>
 8003284:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003286:	e00a      	b.n	800329e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003288:	f7fd fd28 	bl	8000cdc <HAL_GetTick>
 800328c:	4602      	mov	r2, r0
 800328e:	693b      	ldr	r3, [r7, #16]
 8003290:	1ad3      	subs	r3, r2, r3
 8003292:	f241 3288 	movw	r2, #5000	; 0x1388
 8003296:	4293      	cmp	r3, r2
 8003298:	d901      	bls.n	800329e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800329a:	2303      	movs	r3, #3
 800329c:	e0b5      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800329e:	4b3e      	ldr	r3, [pc, #248]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 80032a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80032a2:	f003 0302 	and.w	r3, r3, #2
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d1ee      	bne.n	8003288 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80032aa:	7dfb      	ldrb	r3, [r7, #23]
 80032ac:	2b01      	cmp	r3, #1
 80032ae:	d105      	bne.n	80032bc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b0:	4b39      	ldr	r3, [pc, #228]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 80032b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032b4:	4a38      	ldr	r2, [pc, #224]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 80032b6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80032ba:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	699b      	ldr	r3, [r3, #24]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	f000 80a1 	beq.w	8003408 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032c6:	4b34      	ldr	r3, [pc, #208]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 80032c8:	689b      	ldr	r3, [r3, #8]
 80032ca:	f003 030c 	and.w	r3, r3, #12
 80032ce:	2b08      	cmp	r3, #8
 80032d0:	d05c      	beq.n	800338c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	699b      	ldr	r3, [r3, #24]
 80032d6:	2b02      	cmp	r3, #2
 80032d8:	d141      	bne.n	800335e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032da:	4b31      	ldr	r3, [pc, #196]	; (80033a0 <HAL_RCC_OscConfig+0x478>)
 80032dc:	2200      	movs	r2, #0
 80032de:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e0:	f7fd fcfc 	bl	8000cdc <HAL_GetTick>
 80032e4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032e6:	e008      	b.n	80032fa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80032e8:	f7fd fcf8 	bl	8000cdc <HAL_GetTick>
 80032ec:	4602      	mov	r2, r0
 80032ee:	693b      	ldr	r3, [r7, #16]
 80032f0:	1ad3      	subs	r3, r2, r3
 80032f2:	2b02      	cmp	r3, #2
 80032f4:	d901      	bls.n	80032fa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032f6:	2303      	movs	r3, #3
 80032f8:	e087      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032fa:	4b27      	ldr	r3, [pc, #156]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003302:	2b00      	cmp	r3, #0
 8003304:	d1f0      	bne.n	80032e8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	69da      	ldr	r2, [r3, #28]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	6a1b      	ldr	r3, [r3, #32]
 800330e:	431a      	orrs	r2, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003314:	019b      	lsls	r3, r3, #6
 8003316:	431a      	orrs	r2, r3
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800331c:	085b      	lsrs	r3, r3, #1
 800331e:	3b01      	subs	r3, #1
 8003320:	041b      	lsls	r3, r3, #16
 8003322:	431a      	orrs	r2, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003328:	061b      	lsls	r3, r3, #24
 800332a:	491b      	ldr	r1, [pc, #108]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 800332c:	4313      	orrs	r3, r2
 800332e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003330:	4b1b      	ldr	r3, [pc, #108]	; (80033a0 <HAL_RCC_OscConfig+0x478>)
 8003332:	2201      	movs	r2, #1
 8003334:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003336:	f7fd fcd1 	bl	8000cdc <HAL_GetTick>
 800333a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800333c:	e008      	b.n	8003350 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800333e:	f7fd fccd 	bl	8000cdc <HAL_GetTick>
 8003342:	4602      	mov	r2, r0
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	1ad3      	subs	r3, r2, r3
 8003348:	2b02      	cmp	r3, #2
 800334a:	d901      	bls.n	8003350 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800334c:	2303      	movs	r3, #3
 800334e:	e05c      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003350:	4b11      	ldr	r3, [pc, #68]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003358:	2b00      	cmp	r3, #0
 800335a:	d0f0      	beq.n	800333e <HAL_RCC_OscConfig+0x416>
 800335c:	e054      	b.n	8003408 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <HAL_RCC_OscConfig+0x478>)
 8003360:	2200      	movs	r2, #0
 8003362:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003364:	f7fd fcba 	bl	8000cdc <HAL_GetTick>
 8003368:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336a:	e008      	b.n	800337e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800336c:	f7fd fcb6 	bl	8000cdc <HAL_GetTick>
 8003370:	4602      	mov	r2, r0
 8003372:	693b      	ldr	r3, [r7, #16]
 8003374:	1ad3      	subs	r3, r2, r3
 8003376:	2b02      	cmp	r3, #2
 8003378:	d901      	bls.n	800337e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800337a:	2303      	movs	r3, #3
 800337c:	e045      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800337e:	4b06      	ldr	r3, [pc, #24]	; (8003398 <HAL_RCC_OscConfig+0x470>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003386:	2b00      	cmp	r3, #0
 8003388:	d1f0      	bne.n	800336c <HAL_RCC_OscConfig+0x444>
 800338a:	e03d      	b.n	8003408 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	699b      	ldr	r3, [r3, #24]
 8003390:	2b01      	cmp	r3, #1
 8003392:	d107      	bne.n	80033a4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003394:	2301      	movs	r3, #1
 8003396:	e038      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
 8003398:	40023800 	.word	0x40023800
 800339c:	40007000 	.word	0x40007000
 80033a0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80033a4:	4b1b      	ldr	r3, [pc, #108]	; (8003414 <HAL_RCC_OscConfig+0x4ec>)
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	699b      	ldr	r3, [r3, #24]
 80033ae:	2b01      	cmp	r3, #1
 80033b0:	d028      	beq.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033bc:	429a      	cmp	r2, r3
 80033be:	d121      	bne.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ca:	429a      	cmp	r2, r3
 80033cc:	d11a      	bne.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033ce:	68fa      	ldr	r2, [r7, #12]
 80033d0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80033d4:	4013      	ands	r3, r2
 80033d6:	687a      	ldr	r2, [r7, #4]
 80033d8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80033da:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033dc:	4293      	cmp	r3, r2
 80033de:	d111      	bne.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033e0:	68fb      	ldr	r3, [r7, #12]
 80033e2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80033ea:	085b      	lsrs	r3, r3, #1
 80033ec:	3b01      	subs	r3, #1
 80033ee:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d107      	bne.n	8003404 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80033fe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003400:	429a      	cmp	r2, r3
 8003402:	d001      	beq.n	8003408 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003404:	2301      	movs	r3, #1
 8003406:	e000      	b.n	800340a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003408:	2300      	movs	r3, #0
}
 800340a:	4618      	mov	r0, r3
 800340c:	3718      	adds	r7, #24
 800340e:	46bd      	mov	sp, r7
 8003410:	bd80      	pop	{r7, pc}
 8003412:	bf00      	nop
 8003414:	40023800 	.word	0x40023800

08003418 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003418:	b580      	push	{r7, lr}
 800341a:	b084      	sub	sp, #16
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	2b00      	cmp	r3, #0
 8003426:	d101      	bne.n	800342c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003428:	2301      	movs	r3, #1
 800342a:	e0cc      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800342c:	4b68      	ldr	r3, [pc, #416]	; (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	f003 0307 	and.w	r3, r3, #7
 8003434:	683a      	ldr	r2, [r7, #0]
 8003436:	429a      	cmp	r2, r3
 8003438:	d90c      	bls.n	8003454 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343a:	4b65      	ldr	r3, [pc, #404]	; (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 800343c:	683a      	ldr	r2, [r7, #0]
 800343e:	b2d2      	uxtb	r2, r2
 8003440:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003442:	4b63      	ldr	r3, [pc, #396]	; (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0307 	and.w	r3, r3, #7
 800344a:	683a      	ldr	r2, [r7, #0]
 800344c:	429a      	cmp	r2, r3
 800344e:	d001      	beq.n	8003454 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003450:	2301      	movs	r3, #1
 8003452:	e0b8      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	f003 0302 	and.w	r3, r3, #2
 800345c:	2b00      	cmp	r3, #0
 800345e:	d020      	beq.n	80034a2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	681b      	ldr	r3, [r3, #0]
 8003464:	f003 0304 	and.w	r3, r3, #4
 8003468:	2b00      	cmp	r3, #0
 800346a:	d005      	beq.n	8003478 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800346c:	4b59      	ldr	r3, [pc, #356]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	4a58      	ldr	r2, [pc, #352]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003476:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f003 0308 	and.w	r3, r3, #8
 8003480:	2b00      	cmp	r3, #0
 8003482:	d005      	beq.n	8003490 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003484:	4b53      	ldr	r3, [pc, #332]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	4a52      	ldr	r2, [pc, #328]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800348a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800348e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003490:	4b50      	ldr	r3, [pc, #320]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	494d      	ldr	r1, [pc, #308]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 0301 	and.w	r3, r3, #1
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d044      	beq.n	8003538 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	685b      	ldr	r3, [r3, #4]
 80034b2:	2b01      	cmp	r3, #1
 80034b4:	d107      	bne.n	80034c6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034b6:	4b47      	ldr	r3, [pc, #284]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80034be:	2b00      	cmp	r3, #0
 80034c0:	d119      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034c2:	2301      	movs	r3, #1
 80034c4:	e07f      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	2b02      	cmp	r3, #2
 80034cc:	d003      	beq.n	80034d6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034d2:	2b03      	cmp	r3, #3
 80034d4:	d107      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034d6:	4b3f      	ldr	r3, [pc, #252]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d109      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e06f      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e6:	4b3b      	ldr	r3, [pc, #236]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0302 	and.w	r3, r3, #2
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d101      	bne.n	80034f6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e067      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034f6:	4b37      	ldr	r3, [pc, #220]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f8:	689b      	ldr	r3, [r3, #8]
 80034fa:	f023 0203 	bic.w	r2, r3, #3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	685b      	ldr	r3, [r3, #4]
 8003502:	4934      	ldr	r1, [pc, #208]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003504:	4313      	orrs	r3, r2
 8003506:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003508:	f7fd fbe8 	bl	8000cdc <HAL_GetTick>
 800350c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800350e:	e00a      	b.n	8003526 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003510:	f7fd fbe4 	bl	8000cdc <HAL_GetTick>
 8003514:	4602      	mov	r2, r0
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	1ad3      	subs	r3, r2, r3
 800351a:	f241 3288 	movw	r2, #5000	; 0x1388
 800351e:	4293      	cmp	r3, r2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e04f      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003526:	4b2b      	ldr	r3, [pc, #172]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 8003528:	689b      	ldr	r3, [r3, #8]
 800352a:	f003 020c 	and.w	r2, r3, #12
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	429a      	cmp	r2, r3
 8003536:	d1eb      	bne.n	8003510 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003538:	4b25      	ldr	r3, [pc, #148]	; (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f003 0307 	and.w	r3, r3, #7
 8003540:	683a      	ldr	r2, [r7, #0]
 8003542:	429a      	cmp	r2, r3
 8003544:	d20c      	bcs.n	8003560 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003546:	4b22      	ldr	r3, [pc, #136]	; (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003548:	683a      	ldr	r2, [r7, #0]
 800354a:	b2d2      	uxtb	r2, r2
 800354c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800354e:	4b20      	ldr	r3, [pc, #128]	; (80035d0 <HAL_RCC_ClockConfig+0x1b8>)
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f003 0307 	and.w	r3, r3, #7
 8003556:	683a      	ldr	r2, [r7, #0]
 8003558:	429a      	cmp	r2, r3
 800355a:	d001      	beq.n	8003560 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800355c:	2301      	movs	r3, #1
 800355e:	e032      	b.n	80035c6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	681b      	ldr	r3, [r3, #0]
 8003564:	f003 0304 	and.w	r3, r3, #4
 8003568:	2b00      	cmp	r3, #0
 800356a:	d008      	beq.n	800357e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800356c:	4b19      	ldr	r3, [pc, #100]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800356e:	689b      	ldr	r3, [r3, #8]
 8003570:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	68db      	ldr	r3, [r3, #12]
 8003578:	4916      	ldr	r1, [pc, #88]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800357a:	4313      	orrs	r3, r2
 800357c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	681b      	ldr	r3, [r3, #0]
 8003582:	f003 0308 	and.w	r3, r3, #8
 8003586:	2b00      	cmp	r3, #0
 8003588:	d009      	beq.n	800359e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800358a:	4b12      	ldr	r3, [pc, #72]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800358c:	689b      	ldr	r3, [r3, #8]
 800358e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003592:	687b      	ldr	r3, [r7, #4]
 8003594:	691b      	ldr	r3, [r3, #16]
 8003596:	00db      	lsls	r3, r3, #3
 8003598:	490e      	ldr	r1, [pc, #56]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 800359a:	4313      	orrs	r3, r2
 800359c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800359e:	f000 f821 	bl	80035e4 <HAL_RCC_GetSysClockFreq>
 80035a2:	4602      	mov	r2, r0
 80035a4:	4b0b      	ldr	r3, [pc, #44]	; (80035d4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	091b      	lsrs	r3, r3, #4
 80035aa:	f003 030f 	and.w	r3, r3, #15
 80035ae:	490a      	ldr	r1, [pc, #40]	; (80035d8 <HAL_RCC_ClockConfig+0x1c0>)
 80035b0:	5ccb      	ldrb	r3, [r1, r3]
 80035b2:	fa22 f303 	lsr.w	r3, r2, r3
 80035b6:	4a09      	ldr	r2, [pc, #36]	; (80035dc <HAL_RCC_ClockConfig+0x1c4>)
 80035b8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80035ba:	4b09      	ldr	r3, [pc, #36]	; (80035e0 <HAL_RCC_ClockConfig+0x1c8>)
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	4618      	mov	r0, r3
 80035c0:	f7fd fb48 	bl	8000c54 <HAL_InitTick>

  return HAL_OK;
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	3710      	adds	r7, #16
 80035ca:	46bd      	mov	sp, r7
 80035cc:	bd80      	pop	{r7, pc}
 80035ce:	bf00      	nop
 80035d0:	40023c00 	.word	0x40023c00
 80035d4:	40023800 	.word	0x40023800
 80035d8:	08007398 	.word	0x08007398
 80035dc:	20000028 	.word	0x20000028
 80035e0:	2000002c 	.word	0x2000002c

080035e4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035e4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035e8:	b090      	sub	sp, #64	; 0x40
 80035ea:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80035ec:	2300      	movs	r3, #0
 80035ee:	637b      	str	r3, [r7, #52]	; 0x34
 80035f0:	2300      	movs	r3, #0
 80035f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80035f4:	2300      	movs	r3, #0
 80035f6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80035f8:	2300      	movs	r3, #0
 80035fa:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035fc:	4b59      	ldr	r3, [pc, #356]	; (8003764 <HAL_RCC_GetSysClockFreq+0x180>)
 80035fe:	689b      	ldr	r3, [r3, #8]
 8003600:	f003 030c 	and.w	r3, r3, #12
 8003604:	2b08      	cmp	r3, #8
 8003606:	d00d      	beq.n	8003624 <HAL_RCC_GetSysClockFreq+0x40>
 8003608:	2b08      	cmp	r3, #8
 800360a:	f200 80a1 	bhi.w	8003750 <HAL_RCC_GetSysClockFreq+0x16c>
 800360e:	2b00      	cmp	r3, #0
 8003610:	d002      	beq.n	8003618 <HAL_RCC_GetSysClockFreq+0x34>
 8003612:	2b04      	cmp	r3, #4
 8003614:	d003      	beq.n	800361e <HAL_RCC_GetSysClockFreq+0x3a>
 8003616:	e09b      	b.n	8003750 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003618:	4b53      	ldr	r3, [pc, #332]	; (8003768 <HAL_RCC_GetSysClockFreq+0x184>)
 800361a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800361c:	e09b      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800361e:	4b53      	ldr	r3, [pc, #332]	; (800376c <HAL_RCC_GetSysClockFreq+0x188>)
 8003620:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003622:	e098      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003624:	4b4f      	ldr	r3, [pc, #316]	; (8003764 <HAL_RCC_GetSysClockFreq+0x180>)
 8003626:	685b      	ldr	r3, [r3, #4]
 8003628:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800362c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800362e:	4b4d      	ldr	r3, [pc, #308]	; (8003764 <HAL_RCC_GetSysClockFreq+0x180>)
 8003630:	685b      	ldr	r3, [r3, #4]
 8003632:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003636:	2b00      	cmp	r3, #0
 8003638:	d028      	beq.n	800368c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800363a:	4b4a      	ldr	r3, [pc, #296]	; (8003764 <HAL_RCC_GetSysClockFreq+0x180>)
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	099b      	lsrs	r3, r3, #6
 8003640:	2200      	movs	r2, #0
 8003642:	623b      	str	r3, [r7, #32]
 8003644:	627a      	str	r2, [r7, #36]	; 0x24
 8003646:	6a3b      	ldr	r3, [r7, #32]
 8003648:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800364c:	2100      	movs	r1, #0
 800364e:	4b47      	ldr	r3, [pc, #284]	; (800376c <HAL_RCC_GetSysClockFreq+0x188>)
 8003650:	fb03 f201 	mul.w	r2, r3, r1
 8003654:	2300      	movs	r3, #0
 8003656:	fb00 f303 	mul.w	r3, r0, r3
 800365a:	4413      	add	r3, r2
 800365c:	4a43      	ldr	r2, [pc, #268]	; (800376c <HAL_RCC_GetSysClockFreq+0x188>)
 800365e:	fba0 1202 	umull	r1, r2, r0, r2
 8003662:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003664:	460a      	mov	r2, r1
 8003666:	62ba      	str	r2, [r7, #40]	; 0x28
 8003668:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800366a:	4413      	add	r3, r2
 800366c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800366e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003670:	2200      	movs	r2, #0
 8003672:	61bb      	str	r3, [r7, #24]
 8003674:	61fa      	str	r2, [r7, #28]
 8003676:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800367a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800367e:	f7fc fda9 	bl	80001d4 <__aeabi_uldivmod>
 8003682:	4602      	mov	r2, r0
 8003684:	460b      	mov	r3, r1
 8003686:	4613      	mov	r3, r2
 8003688:	63fb      	str	r3, [r7, #60]	; 0x3c
 800368a:	e053      	b.n	8003734 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800368c:	4b35      	ldr	r3, [pc, #212]	; (8003764 <HAL_RCC_GetSysClockFreq+0x180>)
 800368e:	685b      	ldr	r3, [r3, #4]
 8003690:	099b      	lsrs	r3, r3, #6
 8003692:	2200      	movs	r2, #0
 8003694:	613b      	str	r3, [r7, #16]
 8003696:	617a      	str	r2, [r7, #20]
 8003698:	693b      	ldr	r3, [r7, #16]
 800369a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800369e:	f04f 0b00 	mov.w	fp, #0
 80036a2:	4652      	mov	r2, sl
 80036a4:	465b      	mov	r3, fp
 80036a6:	f04f 0000 	mov.w	r0, #0
 80036aa:	f04f 0100 	mov.w	r1, #0
 80036ae:	0159      	lsls	r1, r3, #5
 80036b0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80036b4:	0150      	lsls	r0, r2, #5
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	ebb2 080a 	subs.w	r8, r2, sl
 80036be:	eb63 090b 	sbc.w	r9, r3, fp
 80036c2:	f04f 0200 	mov.w	r2, #0
 80036c6:	f04f 0300 	mov.w	r3, #0
 80036ca:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80036ce:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80036d2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80036d6:	ebb2 0408 	subs.w	r4, r2, r8
 80036da:	eb63 0509 	sbc.w	r5, r3, r9
 80036de:	f04f 0200 	mov.w	r2, #0
 80036e2:	f04f 0300 	mov.w	r3, #0
 80036e6:	00eb      	lsls	r3, r5, #3
 80036e8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80036ec:	00e2      	lsls	r2, r4, #3
 80036ee:	4614      	mov	r4, r2
 80036f0:	461d      	mov	r5, r3
 80036f2:	eb14 030a 	adds.w	r3, r4, sl
 80036f6:	603b      	str	r3, [r7, #0]
 80036f8:	eb45 030b 	adc.w	r3, r5, fp
 80036fc:	607b      	str	r3, [r7, #4]
 80036fe:	f04f 0200 	mov.w	r2, #0
 8003702:	f04f 0300 	mov.w	r3, #0
 8003706:	e9d7 4500 	ldrd	r4, r5, [r7]
 800370a:	4629      	mov	r1, r5
 800370c:	028b      	lsls	r3, r1, #10
 800370e:	4621      	mov	r1, r4
 8003710:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003714:	4621      	mov	r1, r4
 8003716:	028a      	lsls	r2, r1, #10
 8003718:	4610      	mov	r0, r2
 800371a:	4619      	mov	r1, r3
 800371c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800371e:	2200      	movs	r2, #0
 8003720:	60bb      	str	r3, [r7, #8]
 8003722:	60fa      	str	r2, [r7, #12]
 8003724:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003728:	f7fc fd54 	bl	80001d4 <__aeabi_uldivmod>
 800372c:	4602      	mov	r2, r0
 800372e:	460b      	mov	r3, r1
 8003730:	4613      	mov	r3, r2
 8003732:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003734:	4b0b      	ldr	r3, [pc, #44]	; (8003764 <HAL_RCC_GetSysClockFreq+0x180>)
 8003736:	685b      	ldr	r3, [r3, #4]
 8003738:	0c1b      	lsrs	r3, r3, #16
 800373a:	f003 0303 	and.w	r3, r3, #3
 800373e:	3301      	adds	r3, #1
 8003740:	005b      	lsls	r3, r3, #1
 8003742:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003744:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003746:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003748:	fbb2 f3f3 	udiv	r3, r2, r3
 800374c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800374e:	e002      	b.n	8003756 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003750:	4b05      	ldr	r3, [pc, #20]	; (8003768 <HAL_RCC_GetSysClockFreq+0x184>)
 8003752:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003754:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003756:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003758:	4618      	mov	r0, r3
 800375a:	3740      	adds	r7, #64	; 0x40
 800375c:	46bd      	mov	sp, r7
 800375e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003762:	bf00      	nop
 8003764:	40023800 	.word	0x40023800
 8003768:	00f42400 	.word	0x00f42400
 800376c:	017d7840 	.word	0x017d7840

08003770 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003770:	b480      	push	{r7}
 8003772:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003774:	4b03      	ldr	r3, [pc, #12]	; (8003784 <HAL_RCC_GetHCLKFreq+0x14>)
 8003776:	681b      	ldr	r3, [r3, #0]
}
 8003778:	4618      	mov	r0, r3
 800377a:	46bd      	mov	sp, r7
 800377c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003780:	4770      	bx	lr
 8003782:	bf00      	nop
 8003784:	20000028 	.word	0x20000028

08003788 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003788:	b084      	sub	sp, #16
 800378a:	b580      	push	{r7, lr}
 800378c:	b084      	sub	sp, #16
 800378e:	af00      	add	r7, sp, #0
 8003790:	6078      	str	r0, [r7, #4]
 8003792:	f107 001c 	add.w	r0, r7, #28
 8003796:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800379a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800379c:	2b01      	cmp	r3, #1
 800379e:	d122      	bne.n	80037e6 <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037a4:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	68db      	ldr	r3, [r3, #12]
 80037b0:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80037b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80037b8:	687a      	ldr	r2, [r7, #4]
 80037ba:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037ca:	2b01      	cmp	r3, #1
 80037cc:	d105      	bne.n	80037da <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	68db      	ldr	r3, [r3, #12]
 80037d2:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f001 fbee 	bl	8004fbc <USB_CoreReset>
 80037e0:	4603      	mov	r3, r0
 80037e2:	73fb      	strb	r3, [r7, #15]
 80037e4:	e01a      	b.n	800381c <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f001 fbe2 	bl	8004fbc <USB_CoreReset>
 80037f8:	4603      	mov	r3, r0
 80037fa:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80037fc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d106      	bne.n	8003810 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003806:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	639a      	str	r2, [r3, #56]	; 0x38
 800380e:	e005      	b.n	800381c <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003814:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 800381c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800381e:	2b01      	cmp	r3, #1
 8003820:	d10b      	bne.n	800383a <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	689b      	ldr	r3, [r3, #8]
 8003826:	f043 0206 	orr.w	r2, r3, #6
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	689b      	ldr	r3, [r3, #8]
 8003832:	f043 0220 	orr.w	r2, r3, #32
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800383a:	7bfb      	ldrb	r3, [r7, #15]
}
 800383c:	4618      	mov	r0, r3
 800383e:	3710      	adds	r7, #16
 8003840:	46bd      	mov	sp, r7
 8003842:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003846:	b004      	add	sp, #16
 8003848:	4770      	bx	lr
	...

0800384c <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 800384c:	b480      	push	{r7}
 800384e:	b087      	sub	sp, #28
 8003850:	af00      	add	r7, sp, #0
 8003852:	60f8      	str	r0, [r7, #12]
 8003854:	60b9      	str	r1, [r7, #8]
 8003856:	4613      	mov	r3, r2
 8003858:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800385a:	79fb      	ldrb	r3, [r7, #7]
 800385c:	2b02      	cmp	r3, #2
 800385e:	d165      	bne.n	800392c <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8003860:	68bb      	ldr	r3, [r7, #8]
 8003862:	4a41      	ldr	r2, [pc, #260]	; (8003968 <USB_SetTurnaroundTime+0x11c>)
 8003864:	4293      	cmp	r3, r2
 8003866:	d906      	bls.n	8003876 <USB_SetTurnaroundTime+0x2a>
 8003868:	68bb      	ldr	r3, [r7, #8]
 800386a:	4a40      	ldr	r2, [pc, #256]	; (800396c <USB_SetTurnaroundTime+0x120>)
 800386c:	4293      	cmp	r3, r2
 800386e:	d202      	bcs.n	8003876 <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8003870:	230f      	movs	r3, #15
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	e062      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 8003876:	68bb      	ldr	r3, [r7, #8]
 8003878:	4a3c      	ldr	r2, [pc, #240]	; (800396c <USB_SetTurnaroundTime+0x120>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d306      	bcc.n	800388c <USB_SetTurnaroundTime+0x40>
 800387e:	68bb      	ldr	r3, [r7, #8]
 8003880:	4a3b      	ldr	r2, [pc, #236]	; (8003970 <USB_SetTurnaroundTime+0x124>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d202      	bcs.n	800388c <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 8003886:	230e      	movs	r3, #14
 8003888:	617b      	str	r3, [r7, #20]
 800388a:	e057      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 800388c:	68bb      	ldr	r3, [r7, #8]
 800388e:	4a38      	ldr	r2, [pc, #224]	; (8003970 <USB_SetTurnaroundTime+0x124>)
 8003890:	4293      	cmp	r3, r2
 8003892:	d306      	bcc.n	80038a2 <USB_SetTurnaroundTime+0x56>
 8003894:	68bb      	ldr	r3, [r7, #8]
 8003896:	4a37      	ldr	r2, [pc, #220]	; (8003974 <USB_SetTurnaroundTime+0x128>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d202      	bcs.n	80038a2 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 800389c:	230d      	movs	r3, #13
 800389e:	617b      	str	r3, [r7, #20]
 80038a0:	e04c      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 80038a2:	68bb      	ldr	r3, [r7, #8]
 80038a4:	4a33      	ldr	r2, [pc, #204]	; (8003974 <USB_SetTurnaroundTime+0x128>)
 80038a6:	4293      	cmp	r3, r2
 80038a8:	d306      	bcc.n	80038b8 <USB_SetTurnaroundTime+0x6c>
 80038aa:	68bb      	ldr	r3, [r7, #8]
 80038ac:	4a32      	ldr	r2, [pc, #200]	; (8003978 <USB_SetTurnaroundTime+0x12c>)
 80038ae:	4293      	cmp	r3, r2
 80038b0:	d802      	bhi.n	80038b8 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80038b2:	230c      	movs	r3, #12
 80038b4:	617b      	str	r3, [r7, #20]
 80038b6:	e041      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80038b8:	68bb      	ldr	r3, [r7, #8]
 80038ba:	4a2f      	ldr	r2, [pc, #188]	; (8003978 <USB_SetTurnaroundTime+0x12c>)
 80038bc:	4293      	cmp	r3, r2
 80038be:	d906      	bls.n	80038ce <USB_SetTurnaroundTime+0x82>
 80038c0:	68bb      	ldr	r3, [r7, #8]
 80038c2:	4a2e      	ldr	r2, [pc, #184]	; (800397c <USB_SetTurnaroundTime+0x130>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d802      	bhi.n	80038ce <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80038c8:	230b      	movs	r3, #11
 80038ca:	617b      	str	r3, [r7, #20]
 80038cc:	e036      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80038ce:	68bb      	ldr	r3, [r7, #8]
 80038d0:	4a2a      	ldr	r2, [pc, #168]	; (800397c <USB_SetTurnaroundTime+0x130>)
 80038d2:	4293      	cmp	r3, r2
 80038d4:	d906      	bls.n	80038e4 <USB_SetTurnaroundTime+0x98>
 80038d6:	68bb      	ldr	r3, [r7, #8]
 80038d8:	4a29      	ldr	r2, [pc, #164]	; (8003980 <USB_SetTurnaroundTime+0x134>)
 80038da:	4293      	cmp	r3, r2
 80038dc:	d802      	bhi.n	80038e4 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80038de:	230a      	movs	r3, #10
 80038e0:	617b      	str	r3, [r7, #20]
 80038e2:	e02b      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80038e4:	68bb      	ldr	r3, [r7, #8]
 80038e6:	4a26      	ldr	r2, [pc, #152]	; (8003980 <USB_SetTurnaroundTime+0x134>)
 80038e8:	4293      	cmp	r3, r2
 80038ea:	d906      	bls.n	80038fa <USB_SetTurnaroundTime+0xae>
 80038ec:	68bb      	ldr	r3, [r7, #8]
 80038ee:	4a25      	ldr	r2, [pc, #148]	; (8003984 <USB_SetTurnaroundTime+0x138>)
 80038f0:	4293      	cmp	r3, r2
 80038f2:	d202      	bcs.n	80038fa <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80038f4:	2309      	movs	r3, #9
 80038f6:	617b      	str	r3, [r7, #20]
 80038f8:	e020      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80038fa:	68bb      	ldr	r3, [r7, #8]
 80038fc:	4a21      	ldr	r2, [pc, #132]	; (8003984 <USB_SetTurnaroundTime+0x138>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d306      	bcc.n	8003910 <USB_SetTurnaroundTime+0xc4>
 8003902:	68bb      	ldr	r3, [r7, #8]
 8003904:	4a20      	ldr	r2, [pc, #128]	; (8003988 <USB_SetTurnaroundTime+0x13c>)
 8003906:	4293      	cmp	r3, r2
 8003908:	d802      	bhi.n	8003910 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 800390a:	2308      	movs	r3, #8
 800390c:	617b      	str	r3, [r7, #20]
 800390e:	e015      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	4a1d      	ldr	r2, [pc, #116]	; (8003988 <USB_SetTurnaroundTime+0x13c>)
 8003914:	4293      	cmp	r3, r2
 8003916:	d906      	bls.n	8003926 <USB_SetTurnaroundTime+0xda>
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	4a1c      	ldr	r2, [pc, #112]	; (800398c <USB_SetTurnaroundTime+0x140>)
 800391c:	4293      	cmp	r3, r2
 800391e:	d202      	bcs.n	8003926 <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8003920:	2307      	movs	r3, #7
 8003922:	617b      	str	r3, [r7, #20]
 8003924:	e00a      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 8003926:	2306      	movs	r3, #6
 8003928:	617b      	str	r3, [r7, #20]
 800392a:	e007      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 800392c:	79fb      	ldrb	r3, [r7, #7]
 800392e:	2b00      	cmp	r3, #0
 8003930:	d102      	bne.n	8003938 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8003932:	2309      	movs	r3, #9
 8003934:	617b      	str	r3, [r7, #20]
 8003936:	e001      	b.n	800393c <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 8003938:	2309      	movs	r3, #9
 800393a:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	68db      	ldr	r3, [r3, #12]
 8003940:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	68da      	ldr	r2, [r3, #12]
 800394c:	697b      	ldr	r3, [r7, #20]
 800394e:	029b      	lsls	r3, r3, #10
 8003950:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8003954:	431a      	orrs	r2, r3
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800395a:	2300      	movs	r3, #0
}
 800395c:	4618      	mov	r0, r3
 800395e:	371c      	adds	r7, #28
 8003960:	46bd      	mov	sp, r7
 8003962:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003966:	4770      	bx	lr
 8003968:	00d8acbf 	.word	0x00d8acbf
 800396c:	00e4e1c0 	.word	0x00e4e1c0
 8003970:	00f42400 	.word	0x00f42400
 8003974:	01067380 	.word	0x01067380
 8003978:	011a499f 	.word	0x011a499f
 800397c:	01312cff 	.word	0x01312cff
 8003980:	014ca43f 	.word	0x014ca43f
 8003984:	016e3600 	.word	0x016e3600
 8003988:	01a6ab1f 	.word	0x01a6ab1f
 800398c:	01e84800 	.word	0x01e84800

08003990 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003990:	b480      	push	{r7}
 8003992:	b083      	sub	sp, #12
 8003994:	af00      	add	r7, sp, #0
 8003996:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f043 0201 	orr.w	r2, r3, #1
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039a4:	2300      	movs	r3, #0
}
 80039a6:	4618      	mov	r0, r3
 80039a8:	370c      	adds	r7, #12
 80039aa:	46bd      	mov	sp, r7
 80039ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b0:	4770      	bx	lr

080039b2 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80039b2:	b480      	push	{r7}
 80039b4:	b083      	sub	sp, #12
 80039b6:	af00      	add	r7, sp, #0
 80039b8:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	689b      	ldr	r3, [r3, #8]
 80039be:	f023 0201 	bic.w	r2, r3, #1
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80039c6:	2300      	movs	r3, #0
}
 80039c8:	4618      	mov	r0, r3
 80039ca:	370c      	adds	r7, #12
 80039cc:	46bd      	mov	sp, r7
 80039ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d2:	4770      	bx	lr

080039d4 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80039d4:	b580      	push	{r7, lr}
 80039d6:	b084      	sub	sp, #16
 80039d8:	af00      	add	r7, sp, #0
 80039da:	6078      	str	r0, [r7, #4]
 80039dc:	460b      	mov	r3, r1
 80039de:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80039e0:	2300      	movs	r3, #0
 80039e2:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	68db      	ldr	r3, [r3, #12]
 80039e8:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80039f0:	78fb      	ldrb	r3, [r7, #3]
 80039f2:	2b01      	cmp	r3, #1
 80039f4:	d115      	bne.n	8003a22 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	68db      	ldr	r3, [r3, #12]
 80039fa:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a02:	2001      	movs	r0, #1
 8003a04:	f7fd f976 	bl	8000cf4 <HAL_Delay>
      ms++;
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	3301      	adds	r3, #1
 8003a0c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8003a0e:	6878      	ldr	r0, [r7, #4]
 8003a10:	f001 fa45 	bl	8004e9e <USB_GetMode>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b01      	cmp	r3, #1
 8003a18:	d01e      	beq.n	8003a58 <USB_SetCurrentMode+0x84>
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2b31      	cmp	r3, #49	; 0x31
 8003a1e:	d9f0      	bls.n	8003a02 <USB_SetCurrentMode+0x2e>
 8003a20:	e01a      	b.n	8003a58 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8003a22:	78fb      	ldrb	r3, [r7, #3]
 8003a24:	2b00      	cmp	r3, #0
 8003a26:	d115      	bne.n	8003a54 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	68db      	ldr	r3, [r3, #12]
 8003a2c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8003a34:	2001      	movs	r0, #1
 8003a36:	f7fd f95d 	bl	8000cf4 <HAL_Delay>
      ms++;
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	3301      	adds	r3, #1
 8003a3e:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8003a40:	6878      	ldr	r0, [r7, #4]
 8003a42:	f001 fa2c 	bl	8004e9e <USB_GetMode>
 8003a46:	4603      	mov	r3, r0
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	d005      	beq.n	8003a58 <USB_SetCurrentMode+0x84>
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	2b31      	cmp	r3, #49	; 0x31
 8003a50:	d9f0      	bls.n	8003a34 <USB_SetCurrentMode+0x60>
 8003a52:	e001      	b.n	8003a58 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8003a54:	2301      	movs	r3, #1
 8003a56:	e005      	b.n	8003a64 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	2b32      	cmp	r3, #50	; 0x32
 8003a5c:	d101      	bne.n	8003a62 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8003a5e:	2301      	movs	r3, #1
 8003a60:	e000      	b.n	8003a64 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3710      	adds	r7, #16
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8003a6c:	b084      	sub	sp, #16
 8003a6e:	b580      	push	{r7, lr}
 8003a70:	b086      	sub	sp, #24
 8003a72:	af00      	add	r7, sp, #0
 8003a74:	6078      	str	r0, [r7, #4]
 8003a76:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8003a7a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8003a7e:	2300      	movs	r3, #0
 8003a80:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8003a86:	2300      	movs	r3, #0
 8003a88:	613b      	str	r3, [r7, #16]
 8003a8a:	e009      	b.n	8003aa0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8003a8c:	687a      	ldr	r2, [r7, #4]
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	3340      	adds	r3, #64	; 0x40
 8003a92:	009b      	lsls	r3, r3, #2
 8003a94:	4413      	add	r3, r2
 8003a96:	2200      	movs	r2, #0
 8003a98:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	3301      	adds	r3, #1
 8003a9e:	613b      	str	r3, [r7, #16]
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	2b0e      	cmp	r3, #14
 8003aa4:	d9f2      	bls.n	8003a8c <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003aa6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003aa8:	2b00      	cmp	r3, #0
 8003aaa:	d11c      	bne.n	8003ae6 <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003ab2:	685b      	ldr	r3, [r3, #4]
 8003ab4:	68fa      	ldr	r2, [r7, #12]
 8003ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003aba:	f043 0302 	orr.w	r3, r3, #2
 8003abe:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ac4:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ad0:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003adc:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	639a      	str	r2, [r3, #56]	; 0x38
 8003ae4:	e00b      	b.n	8003afe <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003aea:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003af6:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003b04:	461a      	mov	r2, r3
 8003b06:	2300      	movs	r3, #0
 8003b08:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b10:	4619      	mov	r1, r3
 8003b12:	68fb      	ldr	r3, [r7, #12]
 8003b14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b18:	461a      	mov	r2, r3
 8003b1a:	680b      	ldr	r3, [r1, #0]
 8003b1c:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003b1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003b20:	2b01      	cmp	r3, #1
 8003b22:	d10c      	bne.n	8003b3e <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003b24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003b26:	2b00      	cmp	r3, #0
 8003b28:	d104      	bne.n	8003b34 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8003b2a:	2100      	movs	r1, #0
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 f965 	bl	8003dfc <USB_SetDevSpeed>
 8003b32:	e008      	b.n	8003b46 <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003b34:	2101      	movs	r1, #1
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 f960 	bl	8003dfc <USB_SetDevSpeed>
 8003b3c:	e003      	b.n	8003b46 <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8003b3e:	2103      	movs	r1, #3
 8003b40:	6878      	ldr	r0, [r7, #4]
 8003b42:	f000 f95b 	bl	8003dfc <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8003b46:	2110      	movs	r1, #16
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f000 f8f3 	bl	8003d34 <USB_FlushTxFifo>
 8003b4e:	4603      	mov	r3, r0
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d001      	beq.n	8003b58 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8003b58:	6878      	ldr	r0, [r7, #4]
 8003b5a:	f000 f91f 	bl	8003d9c <USB_FlushRxFifo>
 8003b5e:	4603      	mov	r3, r0
 8003b60:	2b00      	cmp	r3, #0
 8003b62:	d001      	beq.n	8003b68 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8003b64:	2301      	movs	r3, #1
 8003b66:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b6e:	461a      	mov	r2, r3
 8003b70:	2300      	movs	r3, #0
 8003b72:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b7a:	461a      	mov	r2, r3
 8003b7c:	2300      	movs	r3, #0
 8003b7e:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b86:	461a      	mov	r2, r3
 8003b88:	2300      	movs	r3, #0
 8003b8a:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b8c:	2300      	movs	r3, #0
 8003b8e:	613b      	str	r3, [r7, #16]
 8003b90:	e043      	b.n	8003c1a <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	015a      	lsls	r2, r3, #5
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	4413      	add	r3, r2
 8003b9a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003ba4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ba8:	d118      	bne.n	8003bdc <USB_DevInit+0x170>
    {
      if (i == 0U)
 8003baa:	693b      	ldr	r3, [r7, #16]
 8003bac:	2b00      	cmp	r3, #0
 8003bae:	d10a      	bne.n	8003bc6 <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003bb0:	693b      	ldr	r3, [r7, #16]
 8003bb2:	015a      	lsls	r2, r3, #5
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	4413      	add	r3, r2
 8003bb8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bbc:	461a      	mov	r2, r3
 8003bbe:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	e013      	b.n	8003bee <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003bc6:	693b      	ldr	r3, [r7, #16]
 8003bc8:	015a      	lsls	r2, r3, #5
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	4413      	add	r3, r2
 8003bce:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bd2:	461a      	mov	r2, r3
 8003bd4:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003bd8:	6013      	str	r3, [r2, #0]
 8003bda:	e008      	b.n	8003bee <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003bdc:	693b      	ldr	r3, [r7, #16]
 8003bde:	015a      	lsls	r2, r3, #5
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	4413      	add	r3, r2
 8003be4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003be8:	461a      	mov	r2, r3
 8003bea:	2300      	movs	r3, #0
 8003bec:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003bee:	693b      	ldr	r3, [r7, #16]
 8003bf0:	015a      	lsls	r2, r3, #5
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	4413      	add	r3, r2
 8003bf6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003bfa:	461a      	mov	r2, r3
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003c00:	693b      	ldr	r3, [r7, #16]
 8003c02:	015a      	lsls	r2, r3, #5
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	4413      	add	r3, r2
 8003c08:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003c0c:	461a      	mov	r2, r3
 8003c0e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003c12:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	3301      	adds	r3, #1
 8003c18:	613b      	str	r3, [r7, #16]
 8003c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003c1c:	693a      	ldr	r2, [r7, #16]
 8003c1e:	429a      	cmp	r2, r3
 8003c20:	d3b7      	bcc.n	8003b92 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003c22:	2300      	movs	r3, #0
 8003c24:	613b      	str	r3, [r7, #16]
 8003c26:	e043      	b.n	8003cb0 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003c28:	693b      	ldr	r3, [r7, #16]
 8003c2a:	015a      	lsls	r2, r3, #5
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	4413      	add	r3, r2
 8003c30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003c3a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003c3e:	d118      	bne.n	8003c72 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8003c40:	693b      	ldr	r3, [r7, #16]
 8003c42:	2b00      	cmp	r3, #0
 8003c44:	d10a      	bne.n	8003c5c <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	015a      	lsls	r2, r3, #5
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c52:	461a      	mov	r2, r3
 8003c54:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003c58:	6013      	str	r3, [r2, #0]
 8003c5a:	e013      	b.n	8003c84 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003c5c:	693b      	ldr	r3, [r7, #16]
 8003c5e:	015a      	lsls	r2, r3, #5
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	4413      	add	r3, r2
 8003c64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c68:	461a      	mov	r2, r3
 8003c6a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003c6e:	6013      	str	r3, [r2, #0]
 8003c70:	e008      	b.n	8003c84 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003c72:	693b      	ldr	r3, [r7, #16]
 8003c74:	015a      	lsls	r2, r3, #5
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	4413      	add	r3, r2
 8003c7a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c7e:	461a      	mov	r2, r3
 8003c80:	2300      	movs	r3, #0
 8003c82:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003c84:	693b      	ldr	r3, [r7, #16]
 8003c86:	015a      	lsls	r2, r3, #5
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	4413      	add	r3, r2
 8003c8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c90:	461a      	mov	r2, r3
 8003c92:	2300      	movs	r3, #0
 8003c94:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003c96:	693b      	ldr	r3, [r7, #16]
 8003c98:	015a      	lsls	r2, r3, #5
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	4413      	add	r3, r2
 8003c9e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ca2:	461a      	mov	r2, r3
 8003ca4:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003ca8:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003caa:	693b      	ldr	r3, [r7, #16]
 8003cac:	3301      	adds	r3, #1
 8003cae:	613b      	str	r3, [r7, #16]
 8003cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003cb2:	693a      	ldr	r2, [r7, #16]
 8003cb4:	429a      	cmp	r2, r3
 8003cb6:	d3b7      	bcc.n	8003c28 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003cbe:	691b      	ldr	r3, [r3, #16]
 8003cc0:	68fa      	ldr	r2, [r7, #12]
 8003cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003cc6:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003cca:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	2200      	movs	r2, #0
 8003cd0:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003cd8:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003cdc:	2b00      	cmp	r3, #0
 8003cde:	d105      	bne.n	8003cec <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	699b      	ldr	r3, [r3, #24]
 8003ce4:	f043 0210 	orr.w	r2, r3, #16
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	699a      	ldr	r2, [r3, #24]
 8003cf0:	4b0f      	ldr	r3, [pc, #60]	; (8003d30 <USB_DevInit+0x2c4>)
 8003cf2:	4313      	orrs	r3, r2
 8003cf4:	687a      	ldr	r2, [r7, #4]
 8003cf6:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003cf8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d005      	beq.n	8003d0a <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	699b      	ldr	r3, [r3, #24]
 8003d02:	f043 0208 	orr.w	r2, r3, #8
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003d0a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003d0c:	2b01      	cmp	r3, #1
 8003d0e:	d107      	bne.n	8003d20 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003d18:	f043 0304 	orr.w	r3, r3, #4
 8003d1c:	687a      	ldr	r2, [r7, #4]
 8003d1e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003d20:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3718      	adds	r7, #24
 8003d26:	46bd      	mov	sp, r7
 8003d28:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003d2c:	b004      	add	sp, #16
 8003d2e:	4770      	bx	lr
 8003d30:	803c3800 	.word	0x803c3800

08003d34 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003d34:	b480      	push	{r7}
 8003d36:	b085      	sub	sp, #20
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	3301      	adds	r3, #1
 8003d46:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	4a13      	ldr	r2, [pc, #76]	; (8003d98 <USB_FlushTxFifo+0x64>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d901      	bls.n	8003d54 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8003d50:	2303      	movs	r3, #3
 8003d52:	e01b      	b.n	8003d8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	691b      	ldr	r3, [r3, #16]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	daf2      	bge.n	8003d42 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8003d5c:	2300      	movs	r3, #0
 8003d5e:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	019b      	lsls	r3, r3, #6
 8003d64:	f043 0220 	orr.w	r2, r3, #32
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	3301      	adds	r3, #1
 8003d70:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	4a08      	ldr	r2, [pc, #32]	; (8003d98 <USB_FlushTxFifo+0x64>)
 8003d76:	4293      	cmp	r3, r2
 8003d78:	d901      	bls.n	8003d7e <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8003d7a:	2303      	movs	r3, #3
 8003d7c:	e006      	b.n	8003d8c <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0320 	and.w	r3, r3, #32
 8003d86:	2b20      	cmp	r3, #32
 8003d88:	d0f0      	beq.n	8003d6c <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8003d8a:	2300      	movs	r3, #0
}
 8003d8c:	4618      	mov	r0, r3
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	00030d40 	.word	0x00030d40

08003d9c <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b085      	sub	sp, #20
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8003da4:	2300      	movs	r3, #0
 8003da6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	3301      	adds	r3, #1
 8003dac:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	4a11      	ldr	r2, [pc, #68]	; (8003df8 <USB_FlushRxFifo+0x5c>)
 8003db2:	4293      	cmp	r3, r2
 8003db4:	d901      	bls.n	8003dba <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8003db6:	2303      	movs	r3, #3
 8003db8:	e018      	b.n	8003dec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	daf2      	bge.n	8003da8 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2210      	movs	r2, #16
 8003dca:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	3301      	adds	r3, #1
 8003dd0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	4a08      	ldr	r2, [pc, #32]	; (8003df8 <USB_FlushRxFifo+0x5c>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d901      	bls.n	8003dde <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8003dda:	2303      	movs	r3, #3
 8003ddc:	e006      	b.n	8003dec <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	691b      	ldr	r3, [r3, #16]
 8003de2:	f003 0310 	and.w	r3, r3, #16
 8003de6:	2b10      	cmp	r3, #16
 8003de8:	d0f0      	beq.n	8003dcc <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8003dea:	2300      	movs	r3, #0
}
 8003dec:	4618      	mov	r0, r3
 8003dee:	3714      	adds	r7, #20
 8003df0:	46bd      	mov	sp, r7
 8003df2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df6:	4770      	bx	lr
 8003df8:	00030d40 	.word	0x00030d40

08003dfc <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	460b      	mov	r3, r1
 8003e06:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	78fb      	ldrb	r3, [r7, #3]
 8003e16:	68f9      	ldr	r1, [r7, #12]
 8003e18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003e1c:	4313      	orrs	r3, r2
 8003e1e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003e20:	2300      	movs	r3, #0
}
 8003e22:	4618      	mov	r0, r3
 8003e24:	3714      	adds	r7, #20
 8003e26:	46bd      	mov	sp, r7
 8003e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e2c:	4770      	bx	lr

08003e2e <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8003e2e:	b480      	push	{r7}
 8003e30:	b087      	sub	sp, #28
 8003e32:	af00      	add	r7, sp, #0
 8003e34:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 0306 	and.w	r3, r3, #6
 8003e46:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2b00      	cmp	r3, #0
 8003e4c:	d102      	bne.n	8003e54 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8003e4e:	2300      	movs	r3, #0
 8003e50:	75fb      	strb	r3, [r7, #23]
 8003e52:	e00a      	b.n	8003e6a <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8003e54:	68fb      	ldr	r3, [r7, #12]
 8003e56:	2b02      	cmp	r3, #2
 8003e58:	d002      	beq.n	8003e60 <USB_GetDevSpeed+0x32>
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2b06      	cmp	r3, #6
 8003e5e:	d102      	bne.n	8003e66 <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8003e60:	2302      	movs	r3, #2
 8003e62:	75fb      	strb	r3, [r7, #23]
 8003e64:	e001      	b.n	8003e6a <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8003e66:	230f      	movs	r3, #15
 8003e68:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8003e6a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e6c:	4618      	mov	r0, r3
 8003e6e:	371c      	adds	r7, #28
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003e86:	683b      	ldr	r3, [r7, #0]
 8003e88:	781b      	ldrb	r3, [r3, #0]
 8003e8a:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	785b      	ldrb	r3, [r3, #1]
 8003e90:	2b01      	cmp	r3, #1
 8003e92:	d13a      	bne.n	8003f0a <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003e9a:	69da      	ldr	r2, [r3, #28]
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	781b      	ldrb	r3, [r3, #0]
 8003ea0:	f003 030f 	and.w	r3, r3, #15
 8003ea4:	2101      	movs	r1, #1
 8003ea6:	fa01 f303 	lsl.w	r3, r1, r3
 8003eaa:	b29b      	uxth	r3, r3
 8003eac:	68f9      	ldr	r1, [r7, #12]
 8003eae:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003eb2:	4313      	orrs	r3, r2
 8003eb4:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8003eb6:	68bb      	ldr	r3, [r7, #8]
 8003eb8:	015a      	lsls	r2, r3, #5
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	4413      	add	r3, r2
 8003ebe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003ec8:	2b00      	cmp	r3, #0
 8003eca:	d155      	bne.n	8003f78 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ecc:	68bb      	ldr	r3, [r7, #8]
 8003ece:	015a      	lsls	r2, r3, #5
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	4413      	add	r3, r2
 8003ed4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003ed8:	681a      	ldr	r2, [r3, #0]
 8003eda:	683b      	ldr	r3, [r7, #0]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	791b      	ldrb	r3, [r3, #4]
 8003ee6:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ee8:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	059b      	lsls	r3, r3, #22
 8003eee:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	68ba      	ldr	r2, [r7, #8]
 8003ef4:	0151      	lsls	r1, r2, #5
 8003ef6:	68fa      	ldr	r2, [r7, #12]
 8003ef8:	440a      	add	r2, r1
 8003efa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003efe:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f06:	6013      	str	r3, [r2, #0]
 8003f08:	e036      	b.n	8003f78 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003f10:	69da      	ldr	r2, [r3, #28]
 8003f12:	683b      	ldr	r3, [r7, #0]
 8003f14:	781b      	ldrb	r3, [r3, #0]
 8003f16:	f003 030f 	and.w	r3, r3, #15
 8003f1a:	2101      	movs	r1, #1
 8003f1c:	fa01 f303 	lsl.w	r3, r1, r3
 8003f20:	041b      	lsls	r3, r3, #16
 8003f22:	68f9      	ldr	r1, [r7, #12]
 8003f24:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003f28:	4313      	orrs	r3, r2
 8003f2a:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8003f2c:	68bb      	ldr	r3, [r7, #8]
 8003f2e:	015a      	lsls	r2, r3, #5
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4413      	add	r3, r2
 8003f34:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d11a      	bne.n	8003f78 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f42:	68bb      	ldr	r3, [r7, #8]
 8003f44:	015a      	lsls	r2, r3, #5
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	4413      	add	r3, r2
 8003f4a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003f4e:	681a      	ldr	r2, [r3, #0]
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
 8003f54:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8003f58:	683b      	ldr	r3, [r7, #0]
 8003f5a:	791b      	ldrb	r3, [r3, #4]
 8003f5c:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8003f5e:	430b      	orrs	r3, r1
 8003f60:	4313      	orrs	r3, r2
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	0151      	lsls	r1, r2, #5
 8003f66:	68fa      	ldr	r2, [r7, #12]
 8003f68:	440a      	add	r2, r1
 8003f6a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8003f6e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003f72:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003f76:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8003f78:	2300      	movs	r3, #0
}
 8003f7a:	4618      	mov	r0, r3
 8003f7c:	3714      	adds	r7, #20
 8003f7e:	46bd      	mov	sp, r7
 8003f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f84:	4770      	bx	lr
	...

08003f88 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8003f88:	b480      	push	{r7}
 8003f8a:	b085      	sub	sp, #20
 8003f8c:	af00      	add	r7, sp, #0
 8003f8e:	6078      	str	r0, [r7, #4]
 8003f90:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8003f96:	683b      	ldr	r3, [r7, #0]
 8003f98:	781b      	ldrb	r3, [r3, #0]
 8003f9a:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8003f9c:	683b      	ldr	r3, [r7, #0]
 8003f9e:	785b      	ldrb	r3, [r3, #1]
 8003fa0:	2b01      	cmp	r3, #1
 8003fa2:	d161      	bne.n	8004068 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003fa4:	68bb      	ldr	r3, [r7, #8]
 8003fa6:	015a      	lsls	r2, r3, #5
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	4413      	add	r3, r2
 8003fac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003fb6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003fba:	d11f      	bne.n	8003ffc <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8003fbc:	68bb      	ldr	r3, [r7, #8]
 8003fbe:	015a      	lsls	r2, r3, #5
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	4413      	add	r3, r2
 8003fc4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	68ba      	ldr	r2, [r7, #8]
 8003fcc:	0151      	lsls	r1, r2, #5
 8003fce:	68fa      	ldr	r2, [r7, #12]
 8003fd0:	440a      	add	r2, r1
 8003fd2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003fd6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8003fda:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8003fdc:	68bb      	ldr	r3, [r7, #8]
 8003fde:	015a      	lsls	r2, r3, #5
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	4413      	add	r3, r2
 8003fe4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	68ba      	ldr	r2, [r7, #8]
 8003fec:	0151      	lsls	r1, r2, #5
 8003fee:	68fa      	ldr	r2, [r7, #12]
 8003ff0:	440a      	add	r2, r1
 8003ff2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8003ff6:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003ffa:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004002:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004004:	683b      	ldr	r3, [r7, #0]
 8004006:	781b      	ldrb	r3, [r3, #0]
 8004008:	f003 030f 	and.w	r3, r3, #15
 800400c:	2101      	movs	r1, #1
 800400e:	fa01 f303 	lsl.w	r3, r1, r3
 8004012:	b29b      	uxth	r3, r3
 8004014:	43db      	mvns	r3, r3
 8004016:	68f9      	ldr	r1, [r7, #12]
 8004018:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800401c:	4013      	ands	r3, r2
 800401e:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004026:	69da      	ldr	r2, [r3, #28]
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	f003 030f 	and.w	r3, r3, #15
 8004030:	2101      	movs	r1, #1
 8004032:	fa01 f303 	lsl.w	r3, r1, r3
 8004036:	b29b      	uxth	r3, r3
 8004038:	43db      	mvns	r3, r3
 800403a:	68f9      	ldr	r1, [r7, #12]
 800403c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004040:	4013      	ands	r3, r2
 8004042:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	015a      	lsls	r2, r3, #5
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	4413      	add	r3, r2
 800404c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	0159      	lsls	r1, r3, #5
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	440b      	add	r3, r1
 800405a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800405e:	4619      	mov	r1, r3
 8004060:	4b35      	ldr	r3, [pc, #212]	; (8004138 <USB_DeactivateEndpoint+0x1b0>)
 8004062:	4013      	ands	r3, r2
 8004064:	600b      	str	r3, [r1, #0]
 8004066:	e060      	b.n	800412a <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004068:	68bb      	ldr	r3, [r7, #8]
 800406a:	015a      	lsls	r2, r3, #5
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4413      	add	r3, r2
 8004070:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800407a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800407e:	d11f      	bne.n	80040c0 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004080:	68bb      	ldr	r3, [r7, #8]
 8004082:	015a      	lsls	r2, r3, #5
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	4413      	add	r3, r2
 8004088:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68ba      	ldr	r2, [r7, #8]
 8004090:	0151      	lsls	r1, r2, #5
 8004092:	68fa      	ldr	r2, [r7, #12]
 8004094:	440a      	add	r2, r1
 8004096:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800409a:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800409e:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 80040a0:	68bb      	ldr	r3, [r7, #8]
 80040a2:	015a      	lsls	r2, r3, #5
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	4413      	add	r3, r2
 80040a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	68ba      	ldr	r2, [r7, #8]
 80040b0:	0151      	lsls	r1, r2, #5
 80040b2:	68fa      	ldr	r2, [r7, #12]
 80040b4:	440a      	add	r2, r1
 80040b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80040ba:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80040be:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040c6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80040c8:	683b      	ldr	r3, [r7, #0]
 80040ca:	781b      	ldrb	r3, [r3, #0]
 80040cc:	f003 030f 	and.w	r3, r3, #15
 80040d0:	2101      	movs	r1, #1
 80040d2:	fa01 f303 	lsl.w	r3, r1, r3
 80040d6:	041b      	lsls	r3, r3, #16
 80040d8:	43db      	mvns	r3, r3
 80040da:	68f9      	ldr	r1, [r7, #12]
 80040dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80040e0:	4013      	ands	r3, r2
 80040e2:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80040ea:	69da      	ldr	r2, [r3, #28]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	781b      	ldrb	r3, [r3, #0]
 80040f0:	f003 030f 	and.w	r3, r3, #15
 80040f4:	2101      	movs	r1, #1
 80040f6:	fa01 f303 	lsl.w	r3, r1, r3
 80040fa:	041b      	lsls	r3, r3, #16
 80040fc:	43db      	mvns	r3, r3
 80040fe:	68f9      	ldr	r1, [r7, #12]
 8004100:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004104:	4013      	ands	r3, r2
 8004106:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004108:	68bb      	ldr	r3, [r7, #8]
 800410a:	015a      	lsls	r2, r3, #5
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	4413      	add	r3, r2
 8004110:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	0159      	lsls	r1, r3, #5
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	440b      	add	r3, r1
 800411e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004122:	4619      	mov	r1, r3
 8004124:	4b05      	ldr	r3, [pc, #20]	; (800413c <USB_DeactivateEndpoint+0x1b4>)
 8004126:	4013      	ands	r3, r2
 8004128:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 800412a:	2300      	movs	r3, #0
}
 800412c:	4618      	mov	r0, r3
 800412e:	3714      	adds	r7, #20
 8004130:	46bd      	mov	sp, r7
 8004132:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004136:	4770      	bx	lr
 8004138:	ec337800 	.word	0xec337800
 800413c:	eff37800 	.word	0xeff37800

08004140 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004140:	b580      	push	{r7, lr}
 8004142:	b08a      	sub	sp, #40	; 0x28
 8004144:	af02      	add	r7, sp, #8
 8004146:	60f8      	str	r0, [r7, #12]
 8004148:	60b9      	str	r1, [r7, #8]
 800414a:	4613      	mov	r3, r2
 800414c:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004152:	68bb      	ldr	r3, [r7, #8]
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	785b      	ldrb	r3, [r3, #1]
 800415c:	2b01      	cmp	r3, #1
 800415e:	f040 815c 	bne.w	800441a <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	699b      	ldr	r3, [r3, #24]
 8004166:	2b00      	cmp	r3, #0
 8004168:	d132      	bne.n	80041d0 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 800416a:	69bb      	ldr	r3, [r7, #24]
 800416c:	015a      	lsls	r2, r3, #5
 800416e:	69fb      	ldr	r3, [r7, #28]
 8004170:	4413      	add	r3, r2
 8004172:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004176:	691b      	ldr	r3, [r3, #16]
 8004178:	69ba      	ldr	r2, [r7, #24]
 800417a:	0151      	lsls	r1, r2, #5
 800417c:	69fa      	ldr	r2, [r7, #28]
 800417e:	440a      	add	r2, r1
 8004180:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004184:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004188:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800418c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800418e:	69bb      	ldr	r3, [r7, #24]
 8004190:	015a      	lsls	r2, r3, #5
 8004192:	69fb      	ldr	r3, [r7, #28]
 8004194:	4413      	add	r3, r2
 8004196:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800419a:	691b      	ldr	r3, [r3, #16]
 800419c:	69ba      	ldr	r2, [r7, #24]
 800419e:	0151      	lsls	r1, r2, #5
 80041a0:	69fa      	ldr	r2, [r7, #28]
 80041a2:	440a      	add	r2, r1
 80041a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041a8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80041ac:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041ae:	69bb      	ldr	r3, [r7, #24]
 80041b0:	015a      	lsls	r2, r3, #5
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	4413      	add	r3, r2
 80041b6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	69ba      	ldr	r2, [r7, #24]
 80041be:	0151      	lsls	r1, r2, #5
 80041c0:	69fa      	ldr	r2, [r7, #28]
 80041c2:	440a      	add	r2, r1
 80041c4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041c8:	0cdb      	lsrs	r3, r3, #19
 80041ca:	04db      	lsls	r3, r3, #19
 80041cc:	6113      	str	r3, [r2, #16]
 80041ce:	e074      	b.n	80042ba <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80041d0:	69bb      	ldr	r3, [r7, #24]
 80041d2:	015a      	lsls	r2, r3, #5
 80041d4:	69fb      	ldr	r3, [r7, #28]
 80041d6:	4413      	add	r3, r2
 80041d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041dc:	691b      	ldr	r3, [r3, #16]
 80041de:	69ba      	ldr	r2, [r7, #24]
 80041e0:	0151      	lsls	r1, r2, #5
 80041e2:	69fa      	ldr	r2, [r7, #28]
 80041e4:	440a      	add	r2, r1
 80041e6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80041ea:	0cdb      	lsrs	r3, r3, #19
 80041ec:	04db      	lsls	r3, r3, #19
 80041ee:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80041f0:	69bb      	ldr	r3, [r7, #24]
 80041f2:	015a      	lsls	r2, r3, #5
 80041f4:	69fb      	ldr	r3, [r7, #28]
 80041f6:	4413      	add	r3, r2
 80041f8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80041fc:	691b      	ldr	r3, [r3, #16]
 80041fe:	69ba      	ldr	r2, [r7, #24]
 8004200:	0151      	lsls	r1, r2, #5
 8004202:	69fa      	ldr	r2, [r7, #28]
 8004204:	440a      	add	r2, r1
 8004206:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800420a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800420e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004212:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004214:	69bb      	ldr	r3, [r7, #24]
 8004216:	015a      	lsls	r2, r3, #5
 8004218:	69fb      	ldr	r3, [r7, #28]
 800421a:	4413      	add	r3, r2
 800421c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004220:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004222:	68bb      	ldr	r3, [r7, #8]
 8004224:	6999      	ldr	r1, [r3, #24]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	68db      	ldr	r3, [r3, #12]
 800422a:	440b      	add	r3, r1
 800422c:	1e59      	subs	r1, r3, #1
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	68db      	ldr	r3, [r3, #12]
 8004232:	fbb1 f3f3 	udiv	r3, r1, r3
 8004236:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004238:	4b9d      	ldr	r3, [pc, #628]	; (80044b0 <USB_EPStartXfer+0x370>)
 800423a:	400b      	ands	r3, r1
 800423c:	69b9      	ldr	r1, [r7, #24]
 800423e:	0148      	lsls	r0, r1, #5
 8004240:	69f9      	ldr	r1, [r7, #28]
 8004242:	4401      	add	r1, r0
 8004244:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004248:	4313      	orrs	r3, r2
 800424a:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 800424c:	69bb      	ldr	r3, [r7, #24]
 800424e:	015a      	lsls	r2, r3, #5
 8004250:	69fb      	ldr	r3, [r7, #28]
 8004252:	4413      	add	r3, r2
 8004254:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004258:	691a      	ldr	r2, [r3, #16]
 800425a:	68bb      	ldr	r3, [r7, #8]
 800425c:	699b      	ldr	r3, [r3, #24]
 800425e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004262:	69b9      	ldr	r1, [r7, #24]
 8004264:	0148      	lsls	r0, r1, #5
 8004266:	69f9      	ldr	r1, [r7, #28]
 8004268:	4401      	add	r1, r0
 800426a:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800426e:	4313      	orrs	r3, r2
 8004270:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004272:	68bb      	ldr	r3, [r7, #8]
 8004274:	791b      	ldrb	r3, [r3, #4]
 8004276:	2b01      	cmp	r3, #1
 8004278:	d11f      	bne.n	80042ba <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800427a:	69bb      	ldr	r3, [r7, #24]
 800427c:	015a      	lsls	r2, r3, #5
 800427e:	69fb      	ldr	r3, [r7, #28]
 8004280:	4413      	add	r3, r2
 8004282:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004286:	691b      	ldr	r3, [r3, #16]
 8004288:	69ba      	ldr	r2, [r7, #24]
 800428a:	0151      	lsls	r1, r2, #5
 800428c:	69fa      	ldr	r2, [r7, #28]
 800428e:	440a      	add	r2, r1
 8004290:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004294:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004298:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800429a:	69bb      	ldr	r3, [r7, #24]
 800429c:	015a      	lsls	r2, r3, #5
 800429e:	69fb      	ldr	r3, [r7, #28]
 80042a0:	4413      	add	r3, r2
 80042a2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042a6:	691b      	ldr	r3, [r3, #16]
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	0151      	lsls	r1, r2, #5
 80042ac:	69fa      	ldr	r2, [r7, #28]
 80042ae:	440a      	add	r2, r1
 80042b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80042b4:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80042b8:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d14b      	bne.n	8004358 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	695b      	ldr	r3, [r3, #20]
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d009      	beq.n	80042dc <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	015a      	lsls	r2, r3, #5
 80042cc:	69fb      	ldr	r3, [r7, #28]
 80042ce:	4413      	add	r3, r2
 80042d0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80042d4:	461a      	mov	r2, r3
 80042d6:	68bb      	ldr	r3, [r7, #8]
 80042d8:	695b      	ldr	r3, [r3, #20]
 80042da:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	791b      	ldrb	r3, [r3, #4]
 80042e0:	2b01      	cmp	r3, #1
 80042e2:	d128      	bne.n	8004336 <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80042e4:	69fb      	ldr	r3, [r7, #28]
 80042e6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d110      	bne.n	8004316 <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80042f4:	69bb      	ldr	r3, [r7, #24]
 80042f6:	015a      	lsls	r2, r3, #5
 80042f8:	69fb      	ldr	r3, [r7, #28]
 80042fa:	4413      	add	r3, r2
 80042fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	69ba      	ldr	r2, [r7, #24]
 8004304:	0151      	lsls	r1, r2, #5
 8004306:	69fa      	ldr	r2, [r7, #28]
 8004308:	440a      	add	r2, r1
 800430a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800430e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004312:	6013      	str	r3, [r2, #0]
 8004314:	e00f      	b.n	8004336 <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004316:	69bb      	ldr	r3, [r7, #24]
 8004318:	015a      	lsls	r2, r3, #5
 800431a:	69fb      	ldr	r3, [r7, #28]
 800431c:	4413      	add	r3, r2
 800431e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	69ba      	ldr	r2, [r7, #24]
 8004326:	0151      	lsls	r1, r2, #5
 8004328:	69fa      	ldr	r2, [r7, #28]
 800432a:	440a      	add	r2, r1
 800432c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004330:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004334:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004336:	69bb      	ldr	r3, [r7, #24]
 8004338:	015a      	lsls	r2, r3, #5
 800433a:	69fb      	ldr	r3, [r7, #28]
 800433c:	4413      	add	r3, r2
 800433e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	69ba      	ldr	r2, [r7, #24]
 8004346:	0151      	lsls	r1, r2, #5
 8004348:	69fa      	ldr	r2, [r7, #28]
 800434a:	440a      	add	r2, r1
 800434c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004350:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004354:	6013      	str	r3, [r2, #0]
 8004356:	e133      	b.n	80045c0 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004358:	69bb      	ldr	r3, [r7, #24]
 800435a:	015a      	lsls	r2, r3, #5
 800435c:	69fb      	ldr	r3, [r7, #28]
 800435e:	4413      	add	r3, r2
 8004360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	69ba      	ldr	r2, [r7, #24]
 8004368:	0151      	lsls	r1, r2, #5
 800436a:	69fa      	ldr	r2, [r7, #28]
 800436c:	440a      	add	r2, r1
 800436e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004372:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004376:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	791b      	ldrb	r3, [r3, #4]
 800437c:	2b01      	cmp	r3, #1
 800437e:	d015      	beq.n	80043ac <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004380:	68bb      	ldr	r3, [r7, #8]
 8004382:	699b      	ldr	r3, [r3, #24]
 8004384:	2b00      	cmp	r3, #0
 8004386:	f000 811b 	beq.w	80045c0 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800438a:	69fb      	ldr	r3, [r7, #28]
 800438c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004390:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	781b      	ldrb	r3, [r3, #0]
 8004396:	f003 030f 	and.w	r3, r3, #15
 800439a:	2101      	movs	r1, #1
 800439c:	fa01 f303 	lsl.w	r3, r1, r3
 80043a0:	69f9      	ldr	r1, [r7, #28]
 80043a2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80043a6:	4313      	orrs	r3, r2
 80043a8:	634b      	str	r3, [r1, #52]	; 0x34
 80043aa:	e109      	b.n	80045c0 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80043ac:	69fb      	ldr	r3, [r7, #28]
 80043ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d110      	bne.n	80043de <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80043bc:	69bb      	ldr	r3, [r7, #24]
 80043be:	015a      	lsls	r2, r3, #5
 80043c0:	69fb      	ldr	r3, [r7, #28]
 80043c2:	4413      	add	r3, r2
 80043c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	69ba      	ldr	r2, [r7, #24]
 80043cc:	0151      	lsls	r1, r2, #5
 80043ce:	69fa      	ldr	r2, [r7, #28]
 80043d0:	440a      	add	r2, r1
 80043d2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043d6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80043da:	6013      	str	r3, [r2, #0]
 80043dc:	e00f      	b.n	80043fe <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80043de:	69bb      	ldr	r3, [r7, #24]
 80043e0:	015a      	lsls	r2, r3, #5
 80043e2:	69fb      	ldr	r3, [r7, #28]
 80043e4:	4413      	add	r3, r2
 80043e6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	69ba      	ldr	r2, [r7, #24]
 80043ee:	0151      	lsls	r1, r2, #5
 80043f0:	69fa      	ldr	r2, [r7, #28]
 80043f2:	440a      	add	r2, r1
 80043f4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80043f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80043fc:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80043fe:	68bb      	ldr	r3, [r7, #8]
 8004400:	6919      	ldr	r1, [r3, #16]
 8004402:	68bb      	ldr	r3, [r7, #8]
 8004404:	781a      	ldrb	r2, [r3, #0]
 8004406:	68bb      	ldr	r3, [r7, #8]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	b298      	uxth	r0, r3
 800440c:	79fb      	ldrb	r3, [r7, #7]
 800440e:	9300      	str	r3, [sp, #0]
 8004410:	4603      	mov	r3, r0
 8004412:	68f8      	ldr	r0, [r7, #12]
 8004414:	f000 fade 	bl	80049d4 <USB_WritePacket>
 8004418:	e0d2      	b.n	80045c0 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800441a:	69bb      	ldr	r3, [r7, #24]
 800441c:	015a      	lsls	r2, r3, #5
 800441e:	69fb      	ldr	r3, [r7, #28]
 8004420:	4413      	add	r3, r2
 8004422:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004426:	691b      	ldr	r3, [r3, #16]
 8004428:	69ba      	ldr	r2, [r7, #24]
 800442a:	0151      	lsls	r1, r2, #5
 800442c:	69fa      	ldr	r2, [r7, #28]
 800442e:	440a      	add	r2, r1
 8004430:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004434:	0cdb      	lsrs	r3, r3, #19
 8004436:	04db      	lsls	r3, r3, #19
 8004438:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800443a:	69bb      	ldr	r3, [r7, #24]
 800443c:	015a      	lsls	r2, r3, #5
 800443e:	69fb      	ldr	r3, [r7, #28]
 8004440:	4413      	add	r3, r2
 8004442:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004446:	691b      	ldr	r3, [r3, #16]
 8004448:	69ba      	ldr	r2, [r7, #24]
 800444a:	0151      	lsls	r1, r2, #5
 800444c:	69fa      	ldr	r2, [r7, #28]
 800444e:	440a      	add	r2, r1
 8004450:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004454:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004458:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800445c:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 800445e:	68bb      	ldr	r3, [r7, #8]
 8004460:	699b      	ldr	r3, [r3, #24]
 8004462:	2b00      	cmp	r3, #0
 8004464:	d126      	bne.n	80044b4 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004466:	69bb      	ldr	r3, [r7, #24]
 8004468:	015a      	lsls	r2, r3, #5
 800446a:	69fb      	ldr	r3, [r7, #28]
 800446c:	4413      	add	r3, r2
 800446e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004472:	691a      	ldr	r2, [r3, #16]
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	68db      	ldr	r3, [r3, #12]
 8004478:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800447c:	69b9      	ldr	r1, [r7, #24]
 800447e:	0148      	lsls	r0, r1, #5
 8004480:	69f9      	ldr	r1, [r7, #28]
 8004482:	4401      	add	r1, r0
 8004484:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004488:	4313      	orrs	r3, r2
 800448a:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 800448c:	69bb      	ldr	r3, [r7, #24]
 800448e:	015a      	lsls	r2, r3, #5
 8004490:	69fb      	ldr	r3, [r7, #28]
 8004492:	4413      	add	r3, r2
 8004494:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004498:	691b      	ldr	r3, [r3, #16]
 800449a:	69ba      	ldr	r2, [r7, #24]
 800449c:	0151      	lsls	r1, r2, #5
 800449e:	69fa      	ldr	r2, [r7, #28]
 80044a0:	440a      	add	r2, r1
 80044a2:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80044a6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80044aa:	6113      	str	r3, [r2, #16]
 80044ac:	e03a      	b.n	8004524 <USB_EPStartXfer+0x3e4>
 80044ae:	bf00      	nop
 80044b0:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80044b4:	68bb      	ldr	r3, [r7, #8]
 80044b6:	699a      	ldr	r2, [r3, #24]
 80044b8:	68bb      	ldr	r3, [r7, #8]
 80044ba:	68db      	ldr	r3, [r3, #12]
 80044bc:	4413      	add	r3, r2
 80044be:	1e5a      	subs	r2, r3, #1
 80044c0:	68bb      	ldr	r3, [r7, #8]
 80044c2:	68db      	ldr	r3, [r3, #12]
 80044c4:	fbb2 f3f3 	udiv	r3, r2, r3
 80044c8:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80044ca:	68bb      	ldr	r3, [r7, #8]
 80044cc:	68db      	ldr	r3, [r3, #12]
 80044ce:	8afa      	ldrh	r2, [r7, #22]
 80044d0:	fb03 f202 	mul.w	r2, r3, r2
 80044d4:	68bb      	ldr	r3, [r7, #8]
 80044d6:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80044d8:	69bb      	ldr	r3, [r7, #24]
 80044da:	015a      	lsls	r2, r3, #5
 80044dc:	69fb      	ldr	r3, [r7, #28]
 80044de:	4413      	add	r3, r2
 80044e0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80044e4:	691a      	ldr	r2, [r3, #16]
 80044e6:	8afb      	ldrh	r3, [r7, #22]
 80044e8:	04d9      	lsls	r1, r3, #19
 80044ea:	4b38      	ldr	r3, [pc, #224]	; (80045cc <USB_EPStartXfer+0x48c>)
 80044ec:	400b      	ands	r3, r1
 80044ee:	69b9      	ldr	r1, [r7, #24]
 80044f0:	0148      	lsls	r0, r1, #5
 80044f2:	69f9      	ldr	r1, [r7, #28]
 80044f4:	4401      	add	r1, r0
 80044f6:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80044fa:	4313      	orrs	r3, r2
 80044fc:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80044fe:	69bb      	ldr	r3, [r7, #24]
 8004500:	015a      	lsls	r2, r3, #5
 8004502:	69fb      	ldr	r3, [r7, #28]
 8004504:	4413      	add	r3, r2
 8004506:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800450a:	691a      	ldr	r2, [r3, #16]
 800450c:	68bb      	ldr	r3, [r7, #8]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004514:	69b9      	ldr	r1, [r7, #24]
 8004516:	0148      	lsls	r0, r1, #5
 8004518:	69f9      	ldr	r1, [r7, #28]
 800451a:	4401      	add	r1, r0
 800451c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004520:	4313      	orrs	r3, r2
 8004522:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004524:	79fb      	ldrb	r3, [r7, #7]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d10d      	bne.n	8004546 <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800452a:	68bb      	ldr	r3, [r7, #8]
 800452c:	691b      	ldr	r3, [r3, #16]
 800452e:	2b00      	cmp	r3, #0
 8004530:	d009      	beq.n	8004546 <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004532:	68bb      	ldr	r3, [r7, #8]
 8004534:	6919      	ldr	r1, [r3, #16]
 8004536:	69bb      	ldr	r3, [r7, #24]
 8004538:	015a      	lsls	r2, r3, #5
 800453a:	69fb      	ldr	r3, [r7, #28]
 800453c:	4413      	add	r3, r2
 800453e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004542:	460a      	mov	r2, r1
 8004544:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	791b      	ldrb	r3, [r3, #4]
 800454a:	2b01      	cmp	r3, #1
 800454c:	d128      	bne.n	80045a0 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 800454e:	69fb      	ldr	r3, [r7, #28]
 8004550:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004554:	689b      	ldr	r3, [r3, #8]
 8004556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800455a:	2b00      	cmp	r3, #0
 800455c:	d110      	bne.n	8004580 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 800455e:	69bb      	ldr	r3, [r7, #24]
 8004560:	015a      	lsls	r2, r3, #5
 8004562:	69fb      	ldr	r3, [r7, #28]
 8004564:	4413      	add	r3, r2
 8004566:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	69ba      	ldr	r2, [r7, #24]
 800456e:	0151      	lsls	r1, r2, #5
 8004570:	69fa      	ldr	r2, [r7, #28]
 8004572:	440a      	add	r2, r1
 8004574:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004578:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800457c:	6013      	str	r3, [r2, #0]
 800457e:	e00f      	b.n	80045a0 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8004580:	69bb      	ldr	r3, [r7, #24]
 8004582:	015a      	lsls	r2, r3, #5
 8004584:	69fb      	ldr	r3, [r7, #28]
 8004586:	4413      	add	r3, r2
 8004588:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	69ba      	ldr	r2, [r7, #24]
 8004590:	0151      	lsls	r1, r2, #5
 8004592:	69fa      	ldr	r2, [r7, #28]
 8004594:	440a      	add	r2, r1
 8004596:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800459a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800459e:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 80045a0:	69bb      	ldr	r3, [r7, #24]
 80045a2:	015a      	lsls	r2, r3, #5
 80045a4:	69fb      	ldr	r3, [r7, #28]
 80045a6:	4413      	add	r3, r2
 80045a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	69ba      	ldr	r2, [r7, #24]
 80045b0:	0151      	lsls	r1, r2, #5
 80045b2:	69fa      	ldr	r2, [r7, #28]
 80045b4:	440a      	add	r2, r1
 80045b6:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80045ba:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80045be:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80045c0:	2300      	movs	r3, #0
}
 80045c2:	4618      	mov	r0, r3
 80045c4:	3720      	adds	r7, #32
 80045c6:	46bd      	mov	sp, r7
 80045c8:	bd80      	pop	{r7, pc}
 80045ca:	bf00      	nop
 80045cc:	1ff80000 	.word	0x1ff80000

080045d0 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80045d0:	b480      	push	{r7}
 80045d2:	b087      	sub	sp, #28
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	60f8      	str	r0, [r7, #12]
 80045d8:	60b9      	str	r1, [r7, #8]
 80045da:	4613      	mov	r3, r2
 80045dc:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80045e2:	68bb      	ldr	r3, [r7, #8]
 80045e4:	781b      	ldrb	r3, [r3, #0]
 80045e6:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80045e8:	68bb      	ldr	r3, [r7, #8]
 80045ea:	785b      	ldrb	r3, [r3, #1]
 80045ec:	2b01      	cmp	r3, #1
 80045ee:	f040 80ce 	bne.w	800478e <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80045f2:	68bb      	ldr	r3, [r7, #8]
 80045f4:	699b      	ldr	r3, [r3, #24]
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d132      	bne.n	8004660 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80045fa:	693b      	ldr	r3, [r7, #16]
 80045fc:	015a      	lsls	r2, r3, #5
 80045fe:	697b      	ldr	r3, [r7, #20]
 8004600:	4413      	add	r3, r2
 8004602:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004606:	691b      	ldr	r3, [r3, #16]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	0151      	lsls	r1, r2, #5
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	440a      	add	r2, r1
 8004610:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004614:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004618:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800461c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 800461e:	693b      	ldr	r3, [r7, #16]
 8004620:	015a      	lsls	r2, r3, #5
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	4413      	add	r3, r2
 8004626:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800462a:	691b      	ldr	r3, [r3, #16]
 800462c:	693a      	ldr	r2, [r7, #16]
 800462e:	0151      	lsls	r1, r2, #5
 8004630:	697a      	ldr	r2, [r7, #20]
 8004632:	440a      	add	r2, r1
 8004634:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004638:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800463c:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 800463e:	693b      	ldr	r3, [r7, #16]
 8004640:	015a      	lsls	r2, r3, #5
 8004642:	697b      	ldr	r3, [r7, #20]
 8004644:	4413      	add	r3, r2
 8004646:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800464a:	691b      	ldr	r3, [r3, #16]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	0151      	lsls	r1, r2, #5
 8004650:	697a      	ldr	r2, [r7, #20]
 8004652:	440a      	add	r2, r1
 8004654:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004658:	0cdb      	lsrs	r3, r3, #19
 800465a:	04db      	lsls	r3, r3, #19
 800465c:	6113      	str	r3, [r2, #16]
 800465e:	e04e      	b.n	80046fe <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004660:	693b      	ldr	r3, [r7, #16]
 8004662:	015a      	lsls	r2, r3, #5
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	4413      	add	r3, r2
 8004668:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800466c:	691b      	ldr	r3, [r3, #16]
 800466e:	693a      	ldr	r2, [r7, #16]
 8004670:	0151      	lsls	r1, r2, #5
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	440a      	add	r2, r1
 8004676:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800467a:	0cdb      	lsrs	r3, r3, #19
 800467c:	04db      	lsls	r3, r3, #19
 800467e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004680:	693b      	ldr	r3, [r7, #16]
 8004682:	015a      	lsls	r2, r3, #5
 8004684:	697b      	ldr	r3, [r7, #20]
 8004686:	4413      	add	r3, r2
 8004688:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468c:	691b      	ldr	r3, [r3, #16]
 800468e:	693a      	ldr	r2, [r7, #16]
 8004690:	0151      	lsls	r1, r2, #5
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	440a      	add	r2, r1
 8004696:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800469a:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800469e:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80046a2:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	699a      	ldr	r2, [r3, #24]
 80046a8:	68bb      	ldr	r3, [r7, #8]
 80046aa:	68db      	ldr	r3, [r3, #12]
 80046ac:	429a      	cmp	r2, r3
 80046ae:	d903      	bls.n	80046b8 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80046b0:	68bb      	ldr	r3, [r7, #8]
 80046b2:	68da      	ldr	r2, [r3, #12]
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	697b      	ldr	r3, [r7, #20]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c4:	691b      	ldr	r3, [r3, #16]
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	0151      	lsls	r1, r2, #5
 80046ca:	697a      	ldr	r2, [r7, #20]
 80046cc:	440a      	add	r2, r1
 80046ce:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80046d2:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80046d6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80046d8:	693b      	ldr	r3, [r7, #16]
 80046da:	015a      	lsls	r2, r3, #5
 80046dc:	697b      	ldr	r3, [r7, #20]
 80046de:	4413      	add	r3, r2
 80046e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	699b      	ldr	r3, [r3, #24]
 80046ea:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80046ee:	6939      	ldr	r1, [r7, #16]
 80046f0:	0148      	lsls	r0, r1, #5
 80046f2:	6979      	ldr	r1, [r7, #20]
 80046f4:	4401      	add	r1, r0
 80046f6:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80046fa:	4313      	orrs	r3, r2
 80046fc:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80046fe:	79fb      	ldrb	r3, [r7, #7]
 8004700:	2b01      	cmp	r3, #1
 8004702:	d11e      	bne.n	8004742 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	695b      	ldr	r3, [r3, #20]
 8004708:	2b00      	cmp	r3, #0
 800470a:	d009      	beq.n	8004720 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 800470c:	693b      	ldr	r3, [r7, #16]
 800470e:	015a      	lsls	r2, r3, #5
 8004710:	697b      	ldr	r3, [r7, #20]
 8004712:	4413      	add	r3, r2
 8004714:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004718:	461a      	mov	r2, r3
 800471a:	68bb      	ldr	r3, [r7, #8]
 800471c:	695b      	ldr	r3, [r3, #20]
 800471e:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	697b      	ldr	r3, [r7, #20]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	693a      	ldr	r2, [r7, #16]
 8004730:	0151      	lsls	r1, r2, #5
 8004732:	697a      	ldr	r2, [r7, #20]
 8004734:	440a      	add	r2, r1
 8004736:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800473a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800473e:	6013      	str	r3, [r2, #0]
 8004740:	e097      	b.n	8004872 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004742:	693b      	ldr	r3, [r7, #16]
 8004744:	015a      	lsls	r2, r3, #5
 8004746:	697b      	ldr	r3, [r7, #20]
 8004748:	4413      	add	r3, r2
 800474a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	0151      	lsls	r1, r2, #5
 8004754:	697a      	ldr	r2, [r7, #20]
 8004756:	440a      	add	r2, r1
 8004758:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800475c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004760:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8004762:	68bb      	ldr	r3, [r7, #8]
 8004764:	699b      	ldr	r3, [r3, #24]
 8004766:	2b00      	cmp	r3, #0
 8004768:	f000 8083 	beq.w	8004872 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800476c:	697b      	ldr	r3, [r7, #20]
 800476e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004772:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004774:	68bb      	ldr	r3, [r7, #8]
 8004776:	781b      	ldrb	r3, [r3, #0]
 8004778:	f003 030f 	and.w	r3, r3, #15
 800477c:	2101      	movs	r1, #1
 800477e:	fa01 f303 	lsl.w	r3, r1, r3
 8004782:	6979      	ldr	r1, [r7, #20]
 8004784:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004788:	4313      	orrs	r3, r2
 800478a:	634b      	str	r3, [r1, #52]	; 0x34
 800478c:	e071      	b.n	8004872 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	015a      	lsls	r2, r3, #5
 8004792:	697b      	ldr	r3, [r7, #20]
 8004794:	4413      	add	r3, r2
 8004796:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800479a:	691b      	ldr	r3, [r3, #16]
 800479c:	693a      	ldr	r2, [r7, #16]
 800479e:	0151      	lsls	r1, r2, #5
 80047a0:	697a      	ldr	r2, [r7, #20]
 80047a2:	440a      	add	r2, r1
 80047a4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047a8:	0cdb      	lsrs	r3, r3, #19
 80047aa:	04db      	lsls	r3, r3, #19
 80047ac:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80047ae:	693b      	ldr	r3, [r7, #16]
 80047b0:	015a      	lsls	r2, r3, #5
 80047b2:	697b      	ldr	r3, [r7, #20]
 80047b4:	4413      	add	r3, r2
 80047b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ba:	691b      	ldr	r3, [r3, #16]
 80047bc:	693a      	ldr	r2, [r7, #16]
 80047be:	0151      	lsls	r1, r2, #5
 80047c0:	697a      	ldr	r2, [r7, #20]
 80047c2:	440a      	add	r2, r1
 80047c4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80047c8:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80047cc:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80047d0:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80047d2:	68bb      	ldr	r3, [r7, #8]
 80047d4:	699b      	ldr	r3, [r3, #24]
 80047d6:	2b00      	cmp	r3, #0
 80047d8:	d003      	beq.n	80047e2 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80047da:	68bb      	ldr	r3, [r7, #8]
 80047dc:	68da      	ldr	r2, [r3, #12]
 80047de:	68bb      	ldr	r3, [r7, #8]
 80047e0:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80047e2:	68bb      	ldr	r3, [r7, #8]
 80047e4:	68da      	ldr	r2, [r3, #12]
 80047e6:	68bb      	ldr	r3, [r7, #8]
 80047e8:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80047ea:	693b      	ldr	r3, [r7, #16]
 80047ec:	015a      	lsls	r2, r3, #5
 80047ee:	697b      	ldr	r3, [r7, #20]
 80047f0:	4413      	add	r3, r2
 80047f2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047f6:	691b      	ldr	r3, [r3, #16]
 80047f8:	693a      	ldr	r2, [r7, #16]
 80047fa:	0151      	lsls	r1, r2, #5
 80047fc:	697a      	ldr	r2, [r7, #20]
 80047fe:	440a      	add	r2, r1
 8004800:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004804:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004808:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 800480a:	693b      	ldr	r3, [r7, #16]
 800480c:	015a      	lsls	r2, r3, #5
 800480e:	697b      	ldr	r3, [r7, #20]
 8004810:	4413      	add	r3, r2
 8004812:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004816:	691a      	ldr	r2, [r3, #16]
 8004818:	68bb      	ldr	r3, [r7, #8]
 800481a:	69db      	ldr	r3, [r3, #28]
 800481c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004820:	6939      	ldr	r1, [r7, #16]
 8004822:	0148      	lsls	r0, r1, #5
 8004824:	6979      	ldr	r1, [r7, #20]
 8004826:	4401      	add	r1, r0
 8004828:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800482c:	4313      	orrs	r3, r2
 800482e:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	2b01      	cmp	r3, #1
 8004834:	d10d      	bne.n	8004852 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004836:	68bb      	ldr	r3, [r7, #8]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	2b00      	cmp	r3, #0
 800483c:	d009      	beq.n	8004852 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 800483e:	68bb      	ldr	r3, [r7, #8]
 8004840:	6919      	ldr	r1, [r3, #16]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	015a      	lsls	r2, r3, #5
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	4413      	add	r3, r2
 800484a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800484e:	460a      	mov	r2, r1
 8004850:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8004852:	693b      	ldr	r3, [r7, #16]
 8004854:	015a      	lsls	r2, r3, #5
 8004856:	697b      	ldr	r3, [r7, #20]
 8004858:	4413      	add	r3, r2
 800485a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	693a      	ldr	r2, [r7, #16]
 8004862:	0151      	lsls	r1, r2, #5
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	440a      	add	r2, r1
 8004868:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800486c:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004870:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004872:	2300      	movs	r3, #0
}
 8004874:	4618      	mov	r0, r3
 8004876:	371c      	adds	r7, #28
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004880:	b480      	push	{r7}
 8004882:	b087      	sub	sp, #28
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800488a:	2300      	movs	r3, #0
 800488c:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 800488e:	2300      	movs	r3, #0
 8004890:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004896:	683b      	ldr	r3, [r7, #0]
 8004898:	785b      	ldrb	r3, [r3, #1]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d14a      	bne.n	8004934 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	781b      	ldrb	r3, [r3, #0]
 80048a2:	015a      	lsls	r2, r3, #5
 80048a4:	693b      	ldr	r3, [r7, #16]
 80048a6:	4413      	add	r3, r2
 80048a8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80048b2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80048b6:	f040 8086 	bne.w	80049c6 <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80048ba:	683b      	ldr	r3, [r7, #0]
 80048bc:	781b      	ldrb	r3, [r3, #0]
 80048be:	015a      	lsls	r2, r3, #5
 80048c0:	693b      	ldr	r3, [r7, #16]
 80048c2:	4413      	add	r3, r2
 80048c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	683a      	ldr	r2, [r7, #0]
 80048cc:	7812      	ldrb	r2, [r2, #0]
 80048ce:	0151      	lsls	r1, r2, #5
 80048d0:	693a      	ldr	r2, [r7, #16]
 80048d2:	440a      	add	r2, r1
 80048d4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048d8:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80048dc:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80048de:	683b      	ldr	r3, [r7, #0]
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	015a      	lsls	r2, r3, #5
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	4413      	add	r3, r2
 80048e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	7812      	ldrb	r2, [r2, #0]
 80048f2:	0151      	lsls	r1, r2, #5
 80048f4:	693a      	ldr	r2, [r7, #16]
 80048f6:	440a      	add	r2, r1
 80048f8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80048fc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004900:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004902:	68fb      	ldr	r3, [r7, #12]
 8004904:	3301      	adds	r3, #1
 8004906:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	f242 7210 	movw	r2, #10000	; 0x2710
 800490e:	4293      	cmp	r3, r2
 8004910:	d902      	bls.n	8004918 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8004912:	2301      	movs	r3, #1
 8004914:	75fb      	strb	r3, [r7, #23]
          break;
 8004916:	e056      	b.n	80049c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 8004918:	683b      	ldr	r3, [r7, #0]
 800491a:	781b      	ldrb	r3, [r3, #0]
 800491c:	015a      	lsls	r2, r3, #5
 800491e:	693b      	ldr	r3, [r7, #16]
 8004920:	4413      	add	r3, r2
 8004922:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800492c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004930:	d0e7      	beq.n	8004902 <USB_EPStopXfer+0x82>
 8004932:	e048      	b.n	80049c6 <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	781b      	ldrb	r3, [r3, #0]
 8004938:	015a      	lsls	r2, r3, #5
 800493a:	693b      	ldr	r3, [r7, #16]
 800493c:	4413      	add	r3, r2
 800493e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004948:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800494c:	d13b      	bne.n	80049c6 <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	015a      	lsls	r2, r3, #5
 8004954:	693b      	ldr	r3, [r7, #16]
 8004956:	4413      	add	r3, r2
 8004958:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	683a      	ldr	r2, [r7, #0]
 8004960:	7812      	ldrb	r2, [r2, #0]
 8004962:	0151      	lsls	r1, r2, #5
 8004964:	693a      	ldr	r2, [r7, #16]
 8004966:	440a      	add	r2, r1
 8004968:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800496c:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004970:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8004972:	683b      	ldr	r3, [r7, #0]
 8004974:	781b      	ldrb	r3, [r3, #0]
 8004976:	015a      	lsls	r2, r3, #5
 8004978:	693b      	ldr	r3, [r7, #16]
 800497a:	4413      	add	r3, r2
 800497c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	683a      	ldr	r2, [r7, #0]
 8004984:	7812      	ldrb	r2, [r2, #0]
 8004986:	0151      	lsls	r1, r2, #5
 8004988:	693a      	ldr	r2, [r7, #16]
 800498a:	440a      	add	r2, r1
 800498c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004990:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004994:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	3301      	adds	r3, #1
 800499a:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	f242 7210 	movw	r2, #10000	; 0x2710
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d902      	bls.n	80049ac <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	75fb      	strb	r3, [r7, #23]
          break;
 80049aa:	e00c      	b.n	80049c6 <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80049ac:	683b      	ldr	r3, [r7, #0]
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	015a      	lsls	r2, r3, #5
 80049b2:	693b      	ldr	r3, [r7, #16]
 80049b4:	4413      	add	r3, r2
 80049b6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80049c0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80049c4:	d0e7      	beq.n	8004996 <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80049c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049d2:	4770      	bx	lr

080049d4 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80049d4:	b480      	push	{r7}
 80049d6:	b089      	sub	sp, #36	; 0x24
 80049d8:	af00      	add	r7, sp, #0
 80049da:	60f8      	str	r0, [r7, #12]
 80049dc:	60b9      	str	r1, [r7, #8]
 80049de:	4611      	mov	r1, r2
 80049e0:	461a      	mov	r2, r3
 80049e2:	460b      	mov	r3, r1
 80049e4:	71fb      	strb	r3, [r7, #7]
 80049e6:	4613      	mov	r3, r2
 80049e8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80049ee:	68bb      	ldr	r3, [r7, #8]
 80049f0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80049f2:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d123      	bne.n	8004a42 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80049fa:	88bb      	ldrh	r3, [r7, #4]
 80049fc:	3303      	adds	r3, #3
 80049fe:	089b      	lsrs	r3, r3, #2
 8004a00:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 8004a02:	2300      	movs	r3, #0
 8004a04:	61bb      	str	r3, [r7, #24]
 8004a06:	e018      	b.n	8004a3a <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 8004a08:	79fb      	ldrb	r3, [r7, #7]
 8004a0a:	031a      	lsls	r2, r3, #12
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	4413      	add	r3, r2
 8004a10:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a14:	461a      	mov	r2, r3
 8004a16:	69fb      	ldr	r3, [r7, #28]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	6013      	str	r3, [r2, #0]
      pSrc++;
 8004a1c:	69fb      	ldr	r3, [r7, #28]
 8004a1e:	3301      	adds	r3, #1
 8004a20:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a22:	69fb      	ldr	r3, [r7, #28]
 8004a24:	3301      	adds	r3, #1
 8004a26:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	3301      	adds	r3, #1
 8004a2c:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8004a2e:	69fb      	ldr	r3, [r7, #28]
 8004a30:	3301      	adds	r3, #1
 8004a32:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8004a34:	69bb      	ldr	r3, [r7, #24]
 8004a36:	3301      	adds	r3, #1
 8004a38:	61bb      	str	r3, [r7, #24]
 8004a3a:	69ba      	ldr	r2, [r7, #24]
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d3e2      	bcc.n	8004a08 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8004a42:	2300      	movs	r3, #0
}
 8004a44:	4618      	mov	r0, r3
 8004a46:	3724      	adds	r7, #36	; 0x24
 8004a48:	46bd      	mov	sp, r7
 8004a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a4e:	4770      	bx	lr

08004a50 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8004a50:	b480      	push	{r7}
 8004a52:	b08b      	sub	sp, #44	; 0x2c
 8004a54:	af00      	add	r7, sp, #0
 8004a56:	60f8      	str	r0, [r7, #12]
 8004a58:	60b9      	str	r1, [r7, #8]
 8004a5a:	4613      	mov	r3, r2
 8004a5c:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a5e:	68fb      	ldr	r3, [r7, #12]
 8004a60:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8004a62:	68bb      	ldr	r3, [r7, #8]
 8004a64:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8004a66:	88fb      	ldrh	r3, [r7, #6]
 8004a68:	089b      	lsrs	r3, r3, #2
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8004a6e:	88fb      	ldrh	r3, [r7, #6]
 8004a70:	f003 0303 	and.w	r3, r3, #3
 8004a74:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8004a76:	2300      	movs	r3, #0
 8004a78:	623b      	str	r3, [r7, #32]
 8004a7a:	e014      	b.n	8004aa6 <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8004a7c:	69bb      	ldr	r3, [r7, #24]
 8004a7e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004a82:	681a      	ldr	r2, [r3, #0]
 8004a84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a86:	601a      	str	r2, [r3, #0]
    pDest++;
 8004a88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8a:	3301      	adds	r3, #1
 8004a8c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a90:	3301      	adds	r3, #1
 8004a92:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	3301      	adds	r3, #1
 8004a98:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8004a9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9c:	3301      	adds	r3, #1
 8004a9e:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8004aa0:	6a3b      	ldr	r3, [r7, #32]
 8004aa2:	3301      	adds	r3, #1
 8004aa4:	623b      	str	r3, [r7, #32]
 8004aa6:	6a3a      	ldr	r2, [r7, #32]
 8004aa8:	697b      	ldr	r3, [r7, #20]
 8004aaa:	429a      	cmp	r2, r3
 8004aac:	d3e6      	bcc.n	8004a7c <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8004aae:	8bfb      	ldrh	r3, [r7, #30]
 8004ab0:	2b00      	cmp	r3, #0
 8004ab2:	d01e      	beq.n	8004af2 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8004ab4:	2300      	movs	r3, #0
 8004ab6:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8004ab8:	69bb      	ldr	r3, [r7, #24]
 8004aba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004abe:	461a      	mov	r2, r3
 8004ac0:	f107 0310 	add.w	r3, r7, #16
 8004ac4:	6812      	ldr	r2, [r2, #0]
 8004ac6:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	6a3b      	ldr	r3, [r7, #32]
 8004acc:	b2db      	uxtb	r3, r3
 8004ace:	00db      	lsls	r3, r3, #3
 8004ad0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ad4:	b2da      	uxtb	r2, r3
 8004ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ad8:	701a      	strb	r2, [r3, #0]
      i++;
 8004ada:	6a3b      	ldr	r3, [r7, #32]
 8004adc:	3301      	adds	r3, #1
 8004ade:	623b      	str	r3, [r7, #32]
      pDest++;
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	3301      	adds	r3, #1
 8004ae4:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8004ae6:	8bfb      	ldrh	r3, [r7, #30]
 8004ae8:	3b01      	subs	r3, #1
 8004aea:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8004aec:	8bfb      	ldrh	r3, [r7, #30]
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d1ea      	bne.n	8004ac8 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8004af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8004af4:	4618      	mov	r0, r3
 8004af6:	372c      	adds	r7, #44	; 0x2c
 8004af8:	46bd      	mov	sp, r7
 8004afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afe:	4770      	bx	lr

08004b00 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004b00:	b480      	push	{r7}
 8004b02:	b085      	sub	sp, #20
 8004b04:	af00      	add	r7, sp, #0
 8004b06:	6078      	str	r0, [r7, #4]
 8004b08:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004b0e:	683b      	ldr	r3, [r7, #0]
 8004b10:	781b      	ldrb	r3, [r3, #0]
 8004b12:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004b14:	683b      	ldr	r3, [r7, #0]
 8004b16:	785b      	ldrb	r3, [r3, #1]
 8004b18:	2b01      	cmp	r3, #1
 8004b1a:	d12c      	bne.n	8004b76 <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b1c:	68bb      	ldr	r3, [r7, #8]
 8004b1e:	015a      	lsls	r2, r3, #5
 8004b20:	68fb      	ldr	r3, [r7, #12]
 8004b22:	4413      	add	r3, r2
 8004b24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	db12      	blt.n	8004b54 <USB_EPSetStall+0x54>
 8004b2e:	68bb      	ldr	r3, [r7, #8]
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d00f      	beq.n	8004b54 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8004b34:	68bb      	ldr	r3, [r7, #8]
 8004b36:	015a      	lsls	r2, r3, #5
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	4413      	add	r3, r2
 8004b3c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68ba      	ldr	r2, [r7, #8]
 8004b44:	0151      	lsls	r1, r2, #5
 8004b46:	68fa      	ldr	r2, [r7, #12]
 8004b48:	440a      	add	r2, r1
 8004b4a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b4e:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004b52:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8004b54:	68bb      	ldr	r3, [r7, #8]
 8004b56:	015a      	lsls	r2, r3, #5
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	4413      	add	r3, r2
 8004b5c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	68ba      	ldr	r2, [r7, #8]
 8004b64:	0151      	lsls	r1, r2, #5
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	440a      	add	r2, r1
 8004b6a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004b6e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004b72:	6013      	str	r3, [r2, #0]
 8004b74:	e02b      	b.n	8004bce <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	015a      	lsls	r2, r3, #5
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	4413      	add	r3, r2
 8004b7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	2b00      	cmp	r3, #0
 8004b86:	db12      	blt.n	8004bae <USB_EPSetStall+0xae>
 8004b88:	68bb      	ldr	r3, [r7, #8]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d00f      	beq.n	8004bae <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8004b8e:	68bb      	ldr	r3, [r7, #8]
 8004b90:	015a      	lsls	r2, r3, #5
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	4413      	add	r3, r2
 8004b96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	68ba      	ldr	r2, [r7, #8]
 8004b9e:	0151      	lsls	r1, r2, #5
 8004ba0:	68fa      	ldr	r2, [r7, #12]
 8004ba2:	440a      	add	r2, r1
 8004ba4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004ba8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8004bac:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8004bae:	68bb      	ldr	r3, [r7, #8]
 8004bb0:	015a      	lsls	r2, r3, #5
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	4413      	add	r3, r2
 8004bb6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	68ba      	ldr	r2, [r7, #8]
 8004bbe:	0151      	lsls	r1, r2, #5
 8004bc0:	68fa      	ldr	r2, [r7, #12]
 8004bc2:	440a      	add	r2, r1
 8004bc4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004bc8:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8004bcc:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004bce:	2300      	movs	r3, #0
}
 8004bd0:	4618      	mov	r0, r3
 8004bd2:	3714      	adds	r7, #20
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b085      	sub	sp, #20
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
 8004be4:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004bea:	683b      	ldr	r3, [r7, #0]
 8004bec:	781b      	ldrb	r3, [r3, #0]
 8004bee:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004bf0:	683b      	ldr	r3, [r7, #0]
 8004bf2:	785b      	ldrb	r3, [r3, #1]
 8004bf4:	2b01      	cmp	r3, #1
 8004bf6:	d128      	bne.n	8004c4a <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8004bf8:	68bb      	ldr	r3, [r7, #8]
 8004bfa:	015a      	lsls	r2, r3, #5
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	4413      	add	r3, r2
 8004c00:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	68ba      	ldr	r2, [r7, #8]
 8004c08:	0151      	lsls	r1, r2, #5
 8004c0a:	68fa      	ldr	r2, [r7, #12]
 8004c0c:	440a      	add	r2, r1
 8004c0e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c12:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c16:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c18:	683b      	ldr	r3, [r7, #0]
 8004c1a:	791b      	ldrb	r3, [r3, #4]
 8004c1c:	2b03      	cmp	r3, #3
 8004c1e:	d003      	beq.n	8004c28 <USB_EPClearStall+0x4c>
 8004c20:	683b      	ldr	r3, [r7, #0]
 8004c22:	791b      	ldrb	r3, [r3, #4]
 8004c24:	2b02      	cmp	r3, #2
 8004c26:	d138      	bne.n	8004c9a <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c28:	68bb      	ldr	r3, [r7, #8]
 8004c2a:	015a      	lsls	r2, r3, #5
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	4413      	add	r3, r2
 8004c30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	68ba      	ldr	r2, [r7, #8]
 8004c38:	0151      	lsls	r1, r2, #5
 8004c3a:	68fa      	ldr	r2, [r7, #12]
 8004c3c:	440a      	add	r2, r1
 8004c3e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c42:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c46:	6013      	str	r3, [r2, #0]
 8004c48:	e027      	b.n	8004c9a <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8004c4a:	68bb      	ldr	r3, [r7, #8]
 8004c4c:	015a      	lsls	r2, r3, #5
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	4413      	add	r3, r2
 8004c52:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	68ba      	ldr	r2, [r7, #8]
 8004c5a:	0151      	lsls	r1, r2, #5
 8004c5c:	68fa      	ldr	r2, [r7, #12]
 8004c5e:	440a      	add	r2, r1
 8004c60:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c64:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8004c68:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8004c6a:	683b      	ldr	r3, [r7, #0]
 8004c6c:	791b      	ldrb	r3, [r3, #4]
 8004c6e:	2b03      	cmp	r3, #3
 8004c70:	d003      	beq.n	8004c7a <USB_EPClearStall+0x9e>
 8004c72:	683b      	ldr	r3, [r7, #0]
 8004c74:	791b      	ldrb	r3, [r3, #4]
 8004c76:	2b02      	cmp	r3, #2
 8004c78:	d10f      	bne.n	8004c9a <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8004c7a:	68bb      	ldr	r3, [r7, #8]
 8004c7c:	015a      	lsls	r2, r3, #5
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	4413      	add	r3, r2
 8004c82:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004c86:	681b      	ldr	r3, [r3, #0]
 8004c88:	68ba      	ldr	r2, [r7, #8]
 8004c8a:	0151      	lsls	r1, r2, #5
 8004c8c:	68fa      	ldr	r2, [r7, #12]
 8004c8e:	440a      	add	r2, r1
 8004c90:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004c94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004c98:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8004c9a:	2300      	movs	r3, #0
}
 8004c9c:	4618      	mov	r0, r3
 8004c9e:	3714      	adds	r7, #20
 8004ca0:	46bd      	mov	sp, r7
 8004ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca6:	4770      	bx	lr

08004ca8 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	b085      	sub	sp, #20
 8004cac:	af00      	add	r7, sp, #0
 8004cae:	6078      	str	r0, [r7, #4]
 8004cb0:	460b      	mov	r3, r1
 8004cb2:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cb4:	687b      	ldr	r3, [r7, #4]
 8004cb6:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	68fa      	ldr	r2, [r7, #12]
 8004cc2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004cc6:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8004cca:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004cd2:	681a      	ldr	r2, [r3, #0]
 8004cd4:	78fb      	ldrb	r3, [r7, #3]
 8004cd6:	011b      	lsls	r3, r3, #4
 8004cd8:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8004cdc:	68f9      	ldr	r1, [r7, #12]
 8004cde:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ce2:	4313      	orrs	r3, r2
 8004ce4:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8004ce6:	2300      	movs	r3, #0
}
 8004ce8:	4618      	mov	r0, r3
 8004cea:	3714      	adds	r7, #20
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004cf4:	b480      	push	{r7}
 8004cf6:	b085      	sub	sp, #20
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	68fa      	ldr	r2, [r7, #12]
 8004d0a:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d0e:	f023 0303 	bic.w	r3, r3, #3
 8004d12:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	68fa      	ldr	r2, [r7, #12]
 8004d1e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d22:	f023 0302 	bic.w	r3, r3, #2
 8004d26:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d28:	2300      	movs	r3, #0
}
 8004d2a:	4618      	mov	r0, r3
 8004d2c:	3714      	adds	r7, #20
 8004d2e:	46bd      	mov	sp, r7
 8004d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d34:	4770      	bx	lr

08004d36 <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8004d36:	b480      	push	{r7}
 8004d38:	b085      	sub	sp, #20
 8004d3a:	af00      	add	r7, sp, #0
 8004d3c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004d42:	68fb      	ldr	r3, [r7, #12]
 8004d44:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	68fa      	ldr	r2, [r7, #12]
 8004d4c:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004d50:	f023 0303 	bic.w	r3, r3, #3
 8004d54:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	68fa      	ldr	r2, [r7, #12]
 8004d60:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004d64:	f043 0302 	orr.w	r3, r3, #2
 8004d68:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004d6a:	2300      	movs	r3, #0
}
 8004d6c:	4618      	mov	r0, r3
 8004d6e:	3714      	adds	r7, #20
 8004d70:	46bd      	mov	sp, r7
 8004d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d76:	4770      	bx	lr

08004d78 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b085      	sub	sp, #20
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	695b      	ldr	r3, [r3, #20]
 8004d84:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	699b      	ldr	r3, [r3, #24]
 8004d8a:	68fa      	ldr	r2, [r7, #12]
 8004d8c:	4013      	ands	r3, r2
 8004d8e:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8004d90:	68fb      	ldr	r3, [r7, #12]
}
 8004d92:	4618      	mov	r0, r3
 8004d94:	3714      	adds	r7, #20
 8004d96:	46bd      	mov	sp, r7
 8004d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9c:	4770      	bx	lr

08004d9e <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d9e:	b480      	push	{r7}
 8004da0:	b085      	sub	sp, #20
 8004da2:	af00      	add	r7, sp, #0
 8004da4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dba:	69db      	ldr	r3, [r3, #28]
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8004dc2:	68bb      	ldr	r3, [r7, #8]
 8004dc4:	0c1b      	lsrs	r3, r3, #16
}
 8004dc6:	4618      	mov	r0, r3
 8004dc8:	3714      	adds	r7, #20
 8004dca:	46bd      	mov	sp, r7
 8004dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd0:	4770      	bx	lr

08004dd2 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8004dd2:	b480      	push	{r7}
 8004dd4:	b085      	sub	sp, #20
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004de4:	699b      	ldr	r3, [r3, #24]
 8004de6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dee:	69db      	ldr	r3, [r3, #28]
 8004df0:	68ba      	ldr	r2, [r7, #8]
 8004df2:	4013      	ands	r3, r2
 8004df4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8004df6:	68bb      	ldr	r3, [r7, #8]
 8004df8:	b29b      	uxth	r3, r3
}
 8004dfa:	4618      	mov	r0, r3
 8004dfc:	3714      	adds	r7, #20
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e04:	4770      	bx	lr

08004e06 <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e06:	b480      	push	{r7}
 8004e08:	b085      	sub	sp, #20
 8004e0a:	af00      	add	r7, sp, #0
 8004e0c:	6078      	str	r0, [r7, #4]
 8004e0e:	460b      	mov	r3, r1
 8004e10:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8004e16:	78fb      	ldrb	r3, [r7, #3]
 8004e18:	015a      	lsls	r2, r3, #5
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	4413      	add	r3, r2
 8004e1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e22:	689b      	ldr	r3, [r3, #8]
 8004e24:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8004e26:	68fb      	ldr	r3, [r7, #12]
 8004e28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e2c:	695b      	ldr	r3, [r3, #20]
 8004e2e:	68ba      	ldr	r2, [r7, #8]
 8004e30:	4013      	ands	r3, r2
 8004e32:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e34:	68bb      	ldr	r3, [r7, #8]
}
 8004e36:	4618      	mov	r0, r3
 8004e38:	3714      	adds	r7, #20
 8004e3a:	46bd      	mov	sp, r7
 8004e3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e40:	4770      	bx	lr

08004e42 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8004e42:	b480      	push	{r7}
 8004e44:	b087      	sub	sp, #28
 8004e46:	af00      	add	r7, sp, #0
 8004e48:	6078      	str	r0, [r7, #4]
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8004e52:	697b      	ldr	r3, [r7, #20]
 8004e54:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004e64:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8004e66:	78fb      	ldrb	r3, [r7, #3]
 8004e68:	f003 030f 	and.w	r3, r3, #15
 8004e6c:	68fa      	ldr	r2, [r7, #12]
 8004e6e:	fa22 f303 	lsr.w	r3, r2, r3
 8004e72:	01db      	lsls	r3, r3, #7
 8004e74:	b2db      	uxtb	r3, r3
 8004e76:	693a      	ldr	r2, [r7, #16]
 8004e78:	4313      	orrs	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8004e7c:	78fb      	ldrb	r3, [r7, #3]
 8004e7e:	015a      	lsls	r2, r3, #5
 8004e80:	697b      	ldr	r3, [r7, #20]
 8004e82:	4413      	add	r3, r2
 8004e84:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	693a      	ldr	r2, [r7, #16]
 8004e8c:	4013      	ands	r3, r2
 8004e8e:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8004e90:	68bb      	ldr	r3, [r7, #8]
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	371c      	adds	r7, #28
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr

08004e9e <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8004e9e:	b480      	push	{r7}
 8004ea0:	b083      	sub	sp, #12
 8004ea2:	af00      	add	r7, sp, #0
 8004ea4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	695b      	ldr	r3, [r3, #20]
 8004eaa:	f003 0301 	and.w	r3, r3, #1
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	370c      	adds	r7, #12
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb8:	4770      	bx	lr

08004eba <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8004eba:	b480      	push	{r7}
 8004ebc:	b085      	sub	sp, #20
 8004ebe:	af00      	add	r7, sp, #0
 8004ec0:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8004ec6:	68fb      	ldr	r3, [r7, #12]
 8004ec8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	68fa      	ldr	r2, [r7, #12]
 8004ed0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ed4:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8004ed8:	f023 0307 	bic.w	r3, r3, #7
 8004edc:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ee4:	685b      	ldr	r3, [r3, #4]
 8004ee6:	68fa      	ldr	r2, [r7, #12]
 8004ee8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004eec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ef0:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8004ef2:	2300      	movs	r3, #0
}
 8004ef4:	4618      	mov	r0, r3
 8004ef6:	3714      	adds	r7, #20
 8004ef8:	46bd      	mov	sp, r7
 8004efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004efe:	4770      	bx	lr

08004f00 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8004f00:	b480      	push	{r7}
 8004f02:	b087      	sub	sp, #28
 8004f04:	af00      	add	r7, sp, #0
 8004f06:	60f8      	str	r0, [r7, #12]
 8004f08:	460b      	mov	r3, r1
 8004f0a:	607a      	str	r2, [r7, #4]
 8004f0c:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	333c      	adds	r3, #60	; 0x3c
 8004f16:	3304      	adds	r3, #4
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8004f1c:	693b      	ldr	r3, [r7, #16]
 8004f1e:	4a26      	ldr	r2, [pc, #152]	; (8004fb8 <USB_EP0_OutStart+0xb8>)
 8004f20:	4293      	cmp	r3, r2
 8004f22:	d90a      	bls.n	8004f3a <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f24:	697b      	ldr	r3, [r7, #20]
 8004f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f30:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f34:	d101      	bne.n	8004f3a <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8004f36:	2300      	movs	r3, #0
 8004f38:	e037      	b.n	8004faa <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8004f3a:	697b      	ldr	r3, [r7, #20]
 8004f3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f40:	461a      	mov	r2, r3
 8004f42:	2300      	movs	r3, #0
 8004f44:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f46:	697b      	ldr	r3, [r7, #20]
 8004f48:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f4c:	691b      	ldr	r3, [r3, #16]
 8004f4e:	697a      	ldr	r2, [r7, #20]
 8004f50:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f54:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f58:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8004f5a:	697b      	ldr	r3, [r7, #20]
 8004f5c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f60:	691b      	ldr	r3, [r3, #16]
 8004f62:	697a      	ldr	r2, [r7, #20]
 8004f64:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f68:	f043 0318 	orr.w	r3, r3, #24
 8004f6c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8004f6e:	697b      	ldr	r3, [r7, #20]
 8004f70:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f74:	691b      	ldr	r3, [r3, #16]
 8004f76:	697a      	ldr	r2, [r7, #20]
 8004f78:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f7c:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8004f80:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8004f82:	7afb      	ldrb	r3, [r7, #11]
 8004f84:	2b01      	cmp	r3, #1
 8004f86:	d10f      	bne.n	8004fa8 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8004f88:	697b      	ldr	r3, [r7, #20]
 8004f8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f8e:	461a      	mov	r2, r3
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	697a      	ldr	r2, [r7, #20]
 8004f9e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004fa2:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8004fa6:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
}
 8004faa:	4618      	mov	r0, r3
 8004fac:	371c      	adds	r7, #28
 8004fae:	46bd      	mov	sp, r7
 8004fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb4:	4770      	bx	lr
 8004fb6:	bf00      	nop
 8004fb8:	4f54300a 	.word	0x4f54300a

08004fbc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8004fbc:	b480      	push	{r7}
 8004fbe:	b085      	sub	sp, #20
 8004fc0:	af00      	add	r7, sp, #0
 8004fc2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004fc8:	68fb      	ldr	r3, [r7, #12]
 8004fca:	3301      	adds	r3, #1
 8004fcc:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004fce:	68fb      	ldr	r3, [r7, #12]
 8004fd0:	4a13      	ldr	r2, [pc, #76]	; (8005020 <USB_CoreReset+0x64>)
 8004fd2:	4293      	cmp	r3, r2
 8004fd4:	d901      	bls.n	8004fda <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e01b      	b.n	8005012 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	691b      	ldr	r3, [r3, #16]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	daf2      	bge.n	8004fc8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8004fe2:	2300      	movs	r3, #0
 8004fe4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	691b      	ldr	r3, [r3, #16]
 8004fea:	f043 0201 	orr.w	r2, r3, #1
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004ff2:	68fb      	ldr	r3, [r7, #12]
 8004ff4:	3301      	adds	r3, #1
 8004ff6:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ff8:	68fb      	ldr	r3, [r7, #12]
 8004ffa:	4a09      	ldr	r2, [pc, #36]	; (8005020 <USB_CoreReset+0x64>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d901      	bls.n	8005004 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005000:	2303      	movs	r3, #3
 8005002:	e006      	b.n	8005012 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	691b      	ldr	r3, [r3, #16]
 8005008:	f003 0301 	and.w	r3, r3, #1
 800500c:	2b01      	cmp	r3, #1
 800500e:	d0f0      	beq.n	8004ff2 <USB_CoreReset+0x36>

  return HAL_OK;
 8005010:	2300      	movs	r3, #0
}
 8005012:	4618      	mov	r0, r3
 8005014:	3714      	adds	r7, #20
 8005016:	46bd      	mov	sp, r7
 8005018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800501c:	4770      	bx	lr
 800501e:	bf00      	nop
 8005020:	00030d40 	.word	0x00030d40

08005024 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005024:	b580      	push	{r7, lr}
 8005026:	b084      	sub	sp, #16
 8005028:	af00      	add	r7, sp, #0
 800502a:	6078      	str	r0, [r7, #4]
 800502c:	460b      	mov	r3, r1
 800502e:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005030:	2010      	movs	r0, #16
 8005032:	f002 f911 	bl	8007258 <USBD_static_malloc>
 8005036:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	2b00      	cmp	r3, #0
 800503c:	d109      	bne.n	8005052 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	32b0      	adds	r2, #176	; 0xb0
 8005048:	2100      	movs	r1, #0
 800504a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 800504e:	2302      	movs	r3, #2
 8005050:	e048      	b.n	80050e4 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	32b0      	adds	r2, #176	; 0xb0
 800505c:	68f9      	ldr	r1, [r7, #12]
 800505e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	32b0      	adds	r2, #176	; 0xb0
 800506c:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	7c1b      	ldrb	r3, [r3, #16]
 800507a:	2b00      	cmp	r3, #0
 800507c:	d10d      	bne.n	800509a <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 800507e:	4b1b      	ldr	r3, [pc, #108]	; (80050ec <USBD_HID_Init+0xc8>)
 8005080:	781b      	ldrb	r3, [r3, #0]
 8005082:	f003 020f 	and.w	r2, r3, #15
 8005086:	6879      	ldr	r1, [r7, #4]
 8005088:	4613      	mov	r3, r2
 800508a:	009b      	lsls	r3, r3, #2
 800508c:	4413      	add	r3, r2
 800508e:	009b      	lsls	r3, r3, #2
 8005090:	440b      	add	r3, r1
 8005092:	3326      	adds	r3, #38	; 0x26
 8005094:	2207      	movs	r2, #7
 8005096:	801a      	strh	r2, [r3, #0]
 8005098:	e00c      	b.n	80050b4 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 800509a:	4b14      	ldr	r3, [pc, #80]	; (80050ec <USBD_HID_Init+0xc8>)
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	f003 020f 	and.w	r2, r3, #15
 80050a2:	6879      	ldr	r1, [r7, #4]
 80050a4:	4613      	mov	r3, r2
 80050a6:	009b      	lsls	r3, r3, #2
 80050a8:	4413      	add	r3, r2
 80050aa:	009b      	lsls	r3, r3, #2
 80050ac:	440b      	add	r3, r1
 80050ae:	3326      	adds	r3, #38	; 0x26
 80050b0:	220a      	movs	r2, #10
 80050b2:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 80050b4:	4b0d      	ldr	r3, [pc, #52]	; (80050ec <USBD_HID_Init+0xc8>)
 80050b6:	7819      	ldrb	r1, [r3, #0]
 80050b8:	2304      	movs	r3, #4
 80050ba:	2203      	movs	r2, #3
 80050bc:	6878      	ldr	r0, [r7, #4]
 80050be:	f001 ffba 	bl	8007036 <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 80050c2:	4b0a      	ldr	r3, [pc, #40]	; (80050ec <USBD_HID_Init+0xc8>)
 80050c4:	781b      	ldrb	r3, [r3, #0]
 80050c6:	f003 020f 	and.w	r2, r3, #15
 80050ca:	6879      	ldr	r1, [r7, #4]
 80050cc:	4613      	mov	r3, r2
 80050ce:	009b      	lsls	r3, r3, #2
 80050d0:	4413      	add	r3, r2
 80050d2:	009b      	lsls	r3, r3, #2
 80050d4:	440b      	add	r3, r1
 80050d6:	3324      	adds	r3, #36	; 0x24
 80050d8:	2201      	movs	r2, #1
 80050da:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	2200      	movs	r2, #0
 80050e0:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80050e2:	2300      	movs	r3, #0
}
 80050e4:	4618      	mov	r0, r3
 80050e6:	3710      	adds	r7, #16
 80050e8:	46bd      	mov	sp, r7
 80050ea:	bd80      	pop	{r7, pc}
 80050ec:	200000e7 	.word	0x200000e7

080050f0 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80050f0:	b580      	push	{r7, lr}
 80050f2:	b082      	sub	sp, #8
 80050f4:	af00      	add	r7, sp, #0
 80050f6:	6078      	str	r0, [r7, #4]
 80050f8:	460b      	mov	r3, r1
 80050fa:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 80050fc:	4b1f      	ldr	r3, [pc, #124]	; (800517c <USBD_HID_DeInit+0x8c>)
 80050fe:	781b      	ldrb	r3, [r3, #0]
 8005100:	4619      	mov	r1, r3
 8005102:	6878      	ldr	r0, [r7, #4]
 8005104:	f001 ffbd 	bl	8007082 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005108:	4b1c      	ldr	r3, [pc, #112]	; (800517c <USBD_HID_DeInit+0x8c>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	f003 020f 	and.w	r2, r3, #15
 8005110:	6879      	ldr	r1, [r7, #4]
 8005112:	4613      	mov	r3, r2
 8005114:	009b      	lsls	r3, r3, #2
 8005116:	4413      	add	r3, r2
 8005118:	009b      	lsls	r3, r3, #2
 800511a:	440b      	add	r3, r1
 800511c:	3324      	adds	r3, #36	; 0x24
 800511e:	2200      	movs	r2, #0
 8005120:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005122:	4b16      	ldr	r3, [pc, #88]	; (800517c <USBD_HID_DeInit+0x8c>)
 8005124:	781b      	ldrb	r3, [r3, #0]
 8005126:	f003 020f 	and.w	r2, r3, #15
 800512a:	6879      	ldr	r1, [r7, #4]
 800512c:	4613      	mov	r3, r2
 800512e:	009b      	lsls	r3, r3, #2
 8005130:	4413      	add	r3, r2
 8005132:	009b      	lsls	r3, r3, #2
 8005134:	440b      	add	r3, r1
 8005136:	3326      	adds	r3, #38	; 0x26
 8005138:	2200      	movs	r2, #0
 800513a:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	32b0      	adds	r2, #176	; 0xb0
 8005146:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800514a:	2b00      	cmp	r3, #0
 800514c:	d011      	beq.n	8005172 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	32b0      	adds	r2, #176	; 0xb0
 8005158:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800515c:	4618      	mov	r0, r3
 800515e:	f002 f889 	bl	8007274 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	32b0      	adds	r2, #176	; 0xb0
 800516c:	2100      	movs	r1, #0
 800516e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005172:	2300      	movs	r3, #0
}
 8005174:	4618      	mov	r0, r3
 8005176:	3708      	adds	r7, #8
 8005178:	46bd      	mov	sp, r7
 800517a:	bd80      	pop	{r7, pc}
 800517c:	200000e7 	.word	0x200000e7

08005180 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b086      	sub	sp, #24
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005190:	687b      	ldr	r3, [r7, #4]
 8005192:	32b0      	adds	r2, #176	; 0xb0
 8005194:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005198:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 800519a:	2300      	movs	r3, #0
 800519c:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 800519e:	2300      	movs	r3, #0
 80051a0:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	2b00      	cmp	r3, #0
 80051a6:	d101      	bne.n	80051ac <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e0e8      	b.n	800537e <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	781b      	ldrb	r3, [r3, #0]
 80051b0:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d046      	beq.n	8005246 <USBD_HID_Setup+0xc6>
 80051b8:	2b20      	cmp	r3, #32
 80051ba:	f040 80d8 	bne.w	800536e <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	785b      	ldrb	r3, [r3, #1]
 80051c2:	3b02      	subs	r3, #2
 80051c4:	2b09      	cmp	r3, #9
 80051c6:	d836      	bhi.n	8005236 <USBD_HID_Setup+0xb6>
 80051c8:	a201      	add	r2, pc, #4	; (adr r2, 80051d0 <USBD_HID_Setup+0x50>)
 80051ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80051ce:	bf00      	nop
 80051d0:	08005227 	.word	0x08005227
 80051d4:	08005207 	.word	0x08005207
 80051d8:	08005237 	.word	0x08005237
 80051dc:	08005237 	.word	0x08005237
 80051e0:	08005237 	.word	0x08005237
 80051e4:	08005237 	.word	0x08005237
 80051e8:	08005237 	.word	0x08005237
 80051ec:	08005237 	.word	0x08005237
 80051f0:	08005215 	.word	0x08005215
 80051f4:	080051f9 	.word	0x080051f9
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	885b      	ldrh	r3, [r3, #2]
 80051fc:	b2db      	uxtb	r3, r3
 80051fe:	461a      	mov	r2, r3
 8005200:	68fb      	ldr	r3, [r7, #12]
 8005202:	601a      	str	r2, [r3, #0]
          break;
 8005204:	e01e      	b.n	8005244 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005206:	68fb      	ldr	r3, [r7, #12]
 8005208:	2201      	movs	r2, #1
 800520a:	4619      	mov	r1, r3
 800520c:	6878      	ldr	r0, [r7, #4]
 800520e:	f001 fbd5 	bl	80069bc <USBD_CtlSendData>
          break;
 8005212:	e017      	b.n	8005244 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005214:	683b      	ldr	r3, [r7, #0]
 8005216:	885b      	ldrh	r3, [r3, #2]
 8005218:	0a1b      	lsrs	r3, r3, #8
 800521a:	b29b      	uxth	r3, r3
 800521c:	b2db      	uxtb	r3, r3
 800521e:	461a      	mov	r2, r3
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	605a      	str	r2, [r3, #4]
          break;
 8005224:	e00e      	b.n	8005244 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005226:	68fb      	ldr	r3, [r7, #12]
 8005228:	3304      	adds	r3, #4
 800522a:	2201      	movs	r2, #1
 800522c:	4619      	mov	r1, r3
 800522e:	6878      	ldr	r0, [r7, #4]
 8005230:	f001 fbc4 	bl	80069bc <USBD_CtlSendData>
          break;
 8005234:	e006      	b.n	8005244 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005236:	6839      	ldr	r1, [r7, #0]
 8005238:	6878      	ldr	r0, [r7, #4]
 800523a:	f001 fb4e 	bl	80068da <USBD_CtlError>
          ret = USBD_FAIL;
 800523e:	2303      	movs	r3, #3
 8005240:	75fb      	strb	r3, [r7, #23]
          break;
 8005242:	bf00      	nop
      }
      break;
 8005244:	e09a      	b.n	800537c <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005246:	683b      	ldr	r3, [r7, #0]
 8005248:	785b      	ldrb	r3, [r3, #1]
 800524a:	2b0b      	cmp	r3, #11
 800524c:	f200 8086 	bhi.w	800535c <USBD_HID_Setup+0x1dc>
 8005250:	a201      	add	r2, pc, #4	; (adr r2, 8005258 <USBD_HID_Setup+0xd8>)
 8005252:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005256:	bf00      	nop
 8005258:	08005289 	.word	0x08005289
 800525c:	0800536b 	.word	0x0800536b
 8005260:	0800535d 	.word	0x0800535d
 8005264:	0800535d 	.word	0x0800535d
 8005268:	0800535d 	.word	0x0800535d
 800526c:	0800535d 	.word	0x0800535d
 8005270:	080052b3 	.word	0x080052b3
 8005274:	0800535d 	.word	0x0800535d
 8005278:	0800535d 	.word	0x0800535d
 800527c:	0800535d 	.word	0x0800535d
 8005280:	0800530b 	.word	0x0800530b
 8005284:	08005335 	.word	0x08005335
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800528e:	b2db      	uxtb	r3, r3
 8005290:	2b03      	cmp	r3, #3
 8005292:	d107      	bne.n	80052a4 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005294:	f107 030a 	add.w	r3, r7, #10
 8005298:	2202      	movs	r2, #2
 800529a:	4619      	mov	r1, r3
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f001 fb8d 	bl	80069bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80052a2:	e063      	b.n	800536c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 80052a4:	6839      	ldr	r1, [r7, #0]
 80052a6:	6878      	ldr	r0, [r7, #4]
 80052a8:	f001 fb17 	bl	80068da <USBD_CtlError>
            ret = USBD_FAIL;
 80052ac:	2303      	movs	r3, #3
 80052ae:	75fb      	strb	r3, [r7, #23]
          break;
 80052b0:	e05c      	b.n	800536c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	885b      	ldrh	r3, [r3, #2]
 80052b6:	0a1b      	lsrs	r3, r3, #8
 80052b8:	b29b      	uxth	r3, r3
 80052ba:	2b22      	cmp	r3, #34	; 0x22
 80052bc:	d108      	bne.n	80052d0 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	88db      	ldrh	r3, [r3, #6]
 80052c2:	2b3f      	cmp	r3, #63	; 0x3f
 80052c4:	bf28      	it	cs
 80052c6:	233f      	movcs	r3, #63	; 0x3f
 80052c8:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80052ca:	4b2f      	ldr	r3, [pc, #188]	; (8005388 <USBD_HID_Setup+0x208>)
 80052cc:	613b      	str	r3, [r7, #16]
 80052ce:	e015      	b.n	80052fc <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80052d0:	683b      	ldr	r3, [r7, #0]
 80052d2:	885b      	ldrh	r3, [r3, #2]
 80052d4:	0a1b      	lsrs	r3, r3, #8
 80052d6:	b29b      	uxth	r3, r3
 80052d8:	2b21      	cmp	r3, #33	; 0x21
 80052da:	d108      	bne.n	80052ee <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80052dc:	4b2b      	ldr	r3, [pc, #172]	; (800538c <USBD_HID_Setup+0x20c>)
 80052de:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80052e0:	683b      	ldr	r3, [r7, #0]
 80052e2:	88db      	ldrh	r3, [r3, #6]
 80052e4:	2b09      	cmp	r3, #9
 80052e6:	bf28      	it	cs
 80052e8:	2309      	movcs	r3, #9
 80052ea:	82bb      	strh	r3, [r7, #20]
 80052ec:	e006      	b.n	80052fc <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80052ee:	6839      	ldr	r1, [r7, #0]
 80052f0:	6878      	ldr	r0, [r7, #4]
 80052f2:	f001 faf2 	bl	80068da <USBD_CtlError>
            ret = USBD_FAIL;
 80052f6:	2303      	movs	r3, #3
 80052f8:	75fb      	strb	r3, [r7, #23]
            break;
 80052fa:	e037      	b.n	800536c <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80052fc:	8abb      	ldrh	r3, [r7, #20]
 80052fe:	461a      	mov	r2, r3
 8005300:	6939      	ldr	r1, [r7, #16]
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f001 fb5a 	bl	80069bc <USBD_CtlSendData>
          break;
 8005308:	e030      	b.n	800536c <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005310:	b2db      	uxtb	r3, r3
 8005312:	2b03      	cmp	r3, #3
 8005314:	d107      	bne.n	8005326 <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005316:	68fb      	ldr	r3, [r7, #12]
 8005318:	3308      	adds	r3, #8
 800531a:	2201      	movs	r2, #1
 800531c:	4619      	mov	r1, r3
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f001 fb4c 	bl	80069bc <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005324:	e022      	b.n	800536c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005326:	6839      	ldr	r1, [r7, #0]
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f001 fad6 	bl	80068da <USBD_CtlError>
            ret = USBD_FAIL;
 800532e:	2303      	movs	r3, #3
 8005330:	75fb      	strb	r3, [r7, #23]
          break;
 8005332:	e01b      	b.n	800536c <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b03      	cmp	r3, #3
 800533e:	d106      	bne.n	800534e <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	885b      	ldrh	r3, [r3, #2]
 8005344:	b2db      	uxtb	r3, r3
 8005346:	461a      	mov	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 800534c:	e00e      	b.n	800536c <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800534e:	6839      	ldr	r1, [r7, #0]
 8005350:	6878      	ldr	r0, [r7, #4]
 8005352:	f001 fac2 	bl	80068da <USBD_CtlError>
            ret = USBD_FAIL;
 8005356:	2303      	movs	r3, #3
 8005358:	75fb      	strb	r3, [r7, #23]
          break;
 800535a:	e007      	b.n	800536c <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 800535c:	6839      	ldr	r1, [r7, #0]
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f001 fabb 	bl	80068da <USBD_CtlError>
          ret = USBD_FAIL;
 8005364:	2303      	movs	r3, #3
 8005366:	75fb      	strb	r3, [r7, #23]
          break;
 8005368:	e000      	b.n	800536c <USBD_HID_Setup+0x1ec>
          break;
 800536a:	bf00      	nop
      }
      break;
 800536c:	e006      	b.n	800537c <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 800536e:	6839      	ldr	r1, [r7, #0]
 8005370:	6878      	ldr	r0, [r7, #4]
 8005372:	f001 fab2 	bl	80068da <USBD_CtlError>
      ret = USBD_FAIL;
 8005376:	2303      	movs	r3, #3
 8005378:	75fb      	strb	r3, [r7, #23]
      break;
 800537a:	bf00      	nop
  }

  return (uint8_t)ret;
 800537c:	7dfb      	ldrb	r3, [r7, #23]
}
 800537e:	4618      	mov	r0, r3
 8005380:	3718      	adds	r7, #24
 8005382:	46bd      	mov	sp, r7
 8005384:	bd80      	pop	{r7, pc}
 8005386:	bf00      	nop
 8005388:	200000a8 	.word	0x200000a8
 800538c:	20000090 	.word	0x20000090

08005390 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8005390:	b580      	push	{r7, lr}
 8005392:	b086      	sub	sp, #24
 8005394:	af00      	add	r7, sp, #0
 8005396:	60f8      	str	r0, [r7, #12]
 8005398:	60b9      	str	r1, [r7, #8]
 800539a:	4613      	mov	r3, r2
 800539c:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 800539e:	68fb      	ldr	r3, [r7, #12]
 80053a0:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80053a4:	68fb      	ldr	r3, [r7, #12]
 80053a6:	32b0      	adds	r2, #176	; 0xb0
 80053a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053ac:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80053ae:	697b      	ldr	r3, [r7, #20]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d101      	bne.n	80053b8 <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80053b4:	2303      	movs	r3, #3
 80053b6:	e014      	b.n	80053e2 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80053be:	b2db      	uxtb	r3, r3
 80053c0:	2b03      	cmp	r3, #3
 80053c2:	d10d      	bne.n	80053e0 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 80053c4:	697b      	ldr	r3, [r7, #20]
 80053c6:	7b1b      	ldrb	r3, [r3, #12]
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d109      	bne.n	80053e0 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 80053cc:	697b      	ldr	r3, [r7, #20]
 80053ce:	2201      	movs	r2, #1
 80053d0:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80053d2:	4b06      	ldr	r3, [pc, #24]	; (80053ec <USBD_HID_SendReport+0x5c>)
 80053d4:	7819      	ldrb	r1, [r3, #0]
 80053d6:	88fb      	ldrh	r3, [r7, #6]
 80053d8:	68ba      	ldr	r2, [r7, #8]
 80053da:	68f8      	ldr	r0, [r7, #12]
 80053dc:	f001 fef9 	bl	80071d2 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80053e0:	2300      	movs	r3, #0
}
 80053e2:	4618      	mov	r0, r3
 80053e4:	3718      	adds	r7, #24
 80053e6:	46bd      	mov	sp, r7
 80053e8:	bd80      	pop	{r7, pc}
 80053ea:	bf00      	nop
 80053ec:	200000e7 	.word	0x200000e7

080053f0 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80053f8:	2181      	movs	r1, #129	; 0x81
 80053fa:	4809      	ldr	r0, [pc, #36]	; (8005420 <USBD_HID_GetFSCfgDesc+0x30>)
 80053fc:	f000 fc35 	bl	8005c6a <USBD_GetEpDesc>
 8005400:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	2b00      	cmp	r3, #0
 8005406:	d002      	beq.n	800540e <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005408:	68fb      	ldr	r3, [r7, #12]
 800540a:	220a      	movs	r2, #10
 800540c:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	2222      	movs	r2, #34	; 0x22
 8005412:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005414:	4b02      	ldr	r3, [pc, #8]	; (8005420 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005416:	4618      	mov	r0, r3
 8005418:	3710      	adds	r7, #16
 800541a:	46bd      	mov	sp, r7
 800541c:	bd80      	pop	{r7, pc}
 800541e:	bf00      	nop
 8005420:	2000006c 	.word	0x2000006c

08005424 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005424:	b580      	push	{r7, lr}
 8005426:	b084      	sub	sp, #16
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 800542c:	2181      	movs	r1, #129	; 0x81
 800542e:	4809      	ldr	r0, [pc, #36]	; (8005454 <USBD_HID_GetHSCfgDesc+0x30>)
 8005430:	f000 fc1b 	bl	8005c6a <USBD_GetEpDesc>
 8005434:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	2b00      	cmp	r3, #0
 800543a:	d002      	beq.n	8005442 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 800543c:	68fb      	ldr	r3, [r7, #12]
 800543e:	2207      	movs	r2, #7
 8005440:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	2222      	movs	r2, #34	; 0x22
 8005446:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005448:	4b02      	ldr	r3, [pc, #8]	; (8005454 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800544a:	4618      	mov	r0, r3
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}
 8005452:	bf00      	nop
 8005454:	2000006c 	.word	0x2000006c

08005458 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	b084      	sub	sp, #16
 800545c:	af00      	add	r7, sp, #0
 800545e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005460:	2181      	movs	r1, #129	; 0x81
 8005462:	4809      	ldr	r0, [pc, #36]	; (8005488 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005464:	f000 fc01 	bl	8005c6a <USBD_GetEpDesc>
 8005468:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800546a:	68fb      	ldr	r3, [r7, #12]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d002      	beq.n	8005476 <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	220a      	movs	r2, #10
 8005474:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	2222      	movs	r2, #34	; 0x22
 800547a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800547c:	4b02      	ldr	r3, [pc, #8]	; (8005488 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 800547e:	4618      	mov	r0, r3
 8005480:	3710      	adds	r7, #16
 8005482:	46bd      	mov	sp, r7
 8005484:	bd80      	pop	{r7, pc}
 8005486:	bf00      	nop
 8005488:	2000006c 	.word	0x2000006c

0800548c <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 800548c:	b480      	push	{r7}
 800548e:	b083      	sub	sp, #12
 8005490:	af00      	add	r7, sp, #0
 8005492:	6078      	str	r0, [r7, #4]
 8005494:	460b      	mov	r3, r1
 8005496:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	32b0      	adds	r2, #176	; 0xb0
 80054a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054a6:	2200      	movs	r2, #0
 80054a8:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 80054aa:	2300      	movs	r3, #0
}
 80054ac:	4618      	mov	r0, r3
 80054ae:	370c      	adds	r7, #12
 80054b0:	46bd      	mov	sp, r7
 80054b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054b6:	4770      	bx	lr

080054b8 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80054b8:	b480      	push	{r7}
 80054ba:	b083      	sub	sp, #12
 80054bc:	af00      	add	r7, sp, #0
 80054be:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	220a      	movs	r2, #10
 80054c4:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80054c6:	4b03      	ldr	r3, [pc, #12]	; (80054d4 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	370c      	adds	r7, #12
 80054cc:	46bd      	mov	sp, r7
 80054ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80054d2:	4770      	bx	lr
 80054d4:	2000009c 	.word	0x2000009c

080054d8 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80054d8:	b580      	push	{r7, lr}
 80054da:	b086      	sub	sp, #24
 80054dc:	af00      	add	r7, sp, #0
 80054de:	60f8      	str	r0, [r7, #12]
 80054e0:	60b9      	str	r1, [r7, #8]
 80054e2:	4613      	mov	r3, r2
 80054e4:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d101      	bne.n	80054f0 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80054ec:	2303      	movs	r3, #3
 80054ee:	e01f      	b.n	8005530 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80054f0:	68fb      	ldr	r3, [r7, #12]
 80054f2:	2200      	movs	r2, #0
 80054f4:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	2200      	movs	r2, #0
 80054fc:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	2200      	movs	r2, #0
 8005504:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005508:	68bb      	ldr	r3, [r7, #8]
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 800550e:	68fb      	ldr	r3, [r7, #12]
 8005510:	68ba      	ldr	r2, [r7, #8]
 8005512:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2201      	movs	r2, #1
 800551a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 800551e:	68fb      	ldr	r3, [r7, #12]
 8005520:	79fa      	ldrb	r2, [r7, #7]
 8005522:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005524:	68f8      	ldr	r0, [r7, #12]
 8005526:	f001 fd1f 	bl	8006f68 <USBD_LL_Init>
 800552a:	4603      	mov	r3, r0
 800552c:	75fb      	strb	r3, [r7, #23]

  return ret;
 800552e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005530:	4618      	mov	r0, r3
 8005532:	3718      	adds	r7, #24
 8005534:	46bd      	mov	sp, r7
 8005536:	bd80      	pop	{r7, pc}

08005538 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005538:	b580      	push	{r7, lr}
 800553a:	b084      	sub	sp, #16
 800553c:	af00      	add	r7, sp, #0
 800553e:	6078      	str	r0, [r7, #4]
 8005540:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005542:	2300      	movs	r3, #0
 8005544:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005546:	683b      	ldr	r3, [r7, #0]
 8005548:	2b00      	cmp	r3, #0
 800554a:	d101      	bne.n	8005550 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 800554c:	2303      	movs	r3, #3
 800554e:	e025      	b.n	800559c <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	683a      	ldr	r2, [r7, #0]
 8005554:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	32ae      	adds	r2, #174	; 0xae
 8005562:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005566:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005568:	2b00      	cmp	r3, #0
 800556a:	d00f      	beq.n	800558c <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	32ae      	adds	r2, #174	; 0xae
 8005576:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800557a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800557c:	f107 020e 	add.w	r2, r7, #14
 8005580:	4610      	mov	r0, r2
 8005582:	4798      	blx	r3
 8005584:	4602      	mov	r2, r0
 8005586:	687b      	ldr	r3, [r7, #4]
 8005588:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005592:	1c5a      	adds	r2, r3, #1
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800559a:	2300      	movs	r3, #0
}
 800559c:	4618      	mov	r0, r3
 800559e:	3710      	adds	r7, #16
 80055a0:	46bd      	mov	sp, r7
 80055a2:	bd80      	pop	{r7, pc}

080055a4 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 80055a4:	b580      	push	{r7, lr}
 80055a6:	b082      	sub	sp, #8
 80055a8:	af00      	add	r7, sp, #0
 80055aa:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80055ac:	6878      	ldr	r0, [r7, #4]
 80055ae:	f001 fd27 	bl	8007000 <USBD_LL_Start>
 80055b2:	4603      	mov	r3, r0
}
 80055b4:	4618      	mov	r0, r3
 80055b6:	3708      	adds	r7, #8
 80055b8:	46bd      	mov	sp, r7
 80055ba:	bd80      	pop	{r7, pc}

080055bc <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80055bc:	b480      	push	{r7}
 80055be:	b083      	sub	sp, #12
 80055c0:	af00      	add	r7, sp, #0
 80055c2:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80055c4:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80055c6:	4618      	mov	r0, r3
 80055c8:	370c      	adds	r7, #12
 80055ca:	46bd      	mov	sp, r7
 80055cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d0:	4770      	bx	lr

080055d2 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80055d2:	b580      	push	{r7, lr}
 80055d4:	b084      	sub	sp, #16
 80055d6:	af00      	add	r7, sp, #0
 80055d8:	6078      	str	r0, [r7, #4]
 80055da:	460b      	mov	r3, r1
 80055dc:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d009      	beq.n	8005600 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80055f2:	681b      	ldr	r3, [r3, #0]
 80055f4:	78fa      	ldrb	r2, [r7, #3]
 80055f6:	4611      	mov	r1, r2
 80055f8:	6878      	ldr	r0, [r7, #4]
 80055fa:	4798      	blx	r3
 80055fc:	4603      	mov	r3, r0
 80055fe:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005600:	7bfb      	ldrb	r3, [r7, #15]
}
 8005602:	4618      	mov	r0, r3
 8005604:	3710      	adds	r7, #16
 8005606:	46bd      	mov	sp, r7
 8005608:	bd80      	pop	{r7, pc}

0800560a <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800560a:	b580      	push	{r7, lr}
 800560c:	b084      	sub	sp, #16
 800560e:	af00      	add	r7, sp, #0
 8005610:	6078      	str	r0, [r7, #4]
 8005612:	460b      	mov	r3, r1
 8005614:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8005616:	2300      	movs	r3, #0
 8005618:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005620:	685b      	ldr	r3, [r3, #4]
 8005622:	78fa      	ldrb	r2, [r7, #3]
 8005624:	4611      	mov	r1, r2
 8005626:	6878      	ldr	r0, [r7, #4]
 8005628:	4798      	blx	r3
 800562a:	4603      	mov	r3, r0
 800562c:	2b00      	cmp	r3, #0
 800562e:	d001      	beq.n	8005634 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8005630:	2303      	movs	r3, #3
 8005632:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005634:	7bfb      	ldrb	r3, [r7, #15]
}
 8005636:	4618      	mov	r0, r3
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b084      	sub	sp, #16
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
 8005646:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800564e:	6839      	ldr	r1, [r7, #0]
 8005650:	4618      	mov	r0, r3
 8005652:	f001 f908 	bl	8006866 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	2201      	movs	r2, #1
 800565a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8005664:	461a      	mov	r2, r3
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8005672:	f003 031f 	and.w	r3, r3, #31
 8005676:	2b02      	cmp	r3, #2
 8005678:	d01a      	beq.n	80056b0 <USBD_LL_SetupStage+0x72>
 800567a:	2b02      	cmp	r3, #2
 800567c:	d822      	bhi.n	80056c4 <USBD_LL_SetupStage+0x86>
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <USBD_LL_SetupStage+0x4a>
 8005682:	2b01      	cmp	r3, #1
 8005684:	d00a      	beq.n	800569c <USBD_LL_SetupStage+0x5e>
 8005686:	e01d      	b.n	80056c4 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800568e:	4619      	mov	r1, r3
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fb5f 	bl	8005d54 <USBD_StdDevReq>
 8005696:	4603      	mov	r3, r0
 8005698:	73fb      	strb	r3, [r7, #15]
      break;
 800569a:	e020      	b.n	80056de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056a2:	4619      	mov	r1, r3
 80056a4:	6878      	ldr	r0, [r7, #4]
 80056a6:	f000 fbc7 	bl	8005e38 <USBD_StdItfReq>
 80056aa:	4603      	mov	r3, r0
 80056ac:	73fb      	strb	r3, [r7, #15]
      break;
 80056ae:	e016      	b.n	80056de <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80056b6:	4619      	mov	r1, r3
 80056b8:	6878      	ldr	r0, [r7, #4]
 80056ba:	f000 fc29 	bl	8005f10 <USBD_StdEPReq>
 80056be:	4603      	mov	r3, r0
 80056c0:	73fb      	strb	r3, [r7, #15]
      break;
 80056c2:	e00c      	b.n	80056de <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80056ca:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80056ce:	b2db      	uxtb	r3, r3
 80056d0:	4619      	mov	r1, r3
 80056d2:	6878      	ldr	r0, [r7, #4]
 80056d4:	f001 fcf4 	bl	80070c0 <USBD_LL_StallEP>
 80056d8:	4603      	mov	r3, r0
 80056da:	73fb      	strb	r3, [r7, #15]
      break;
 80056dc:	bf00      	nop
  }

  return ret;
 80056de:	7bfb      	ldrb	r3, [r7, #15]
}
 80056e0:	4618      	mov	r0, r3
 80056e2:	3710      	adds	r7, #16
 80056e4:	46bd      	mov	sp, r7
 80056e6:	bd80      	pop	{r7, pc}

080056e8 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80056e8:	b580      	push	{r7, lr}
 80056ea:	b086      	sub	sp, #24
 80056ec:	af00      	add	r7, sp, #0
 80056ee:	60f8      	str	r0, [r7, #12]
 80056f0:	460b      	mov	r3, r1
 80056f2:	607a      	str	r2, [r7, #4]
 80056f4:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80056f6:	2300      	movs	r3, #0
 80056f8:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80056fa:	7afb      	ldrb	r3, [r7, #11]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d16e      	bne.n	80057de <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 8005706:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8005708:	68fb      	ldr	r3, [r7, #12]
 800570a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800570e:	2b03      	cmp	r3, #3
 8005710:	f040 8098 	bne.w	8005844 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8005714:	693b      	ldr	r3, [r7, #16]
 8005716:	689a      	ldr	r2, [r3, #8]
 8005718:	693b      	ldr	r3, [r7, #16]
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	429a      	cmp	r2, r3
 800571e:	d913      	bls.n	8005748 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8005720:	693b      	ldr	r3, [r7, #16]
 8005722:	689a      	ldr	r2, [r3, #8]
 8005724:	693b      	ldr	r3, [r7, #16]
 8005726:	68db      	ldr	r3, [r3, #12]
 8005728:	1ad2      	subs	r2, r2, r3
 800572a:	693b      	ldr	r3, [r7, #16]
 800572c:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	68da      	ldr	r2, [r3, #12]
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	689b      	ldr	r3, [r3, #8]
 8005736:	4293      	cmp	r3, r2
 8005738:	bf28      	it	cs
 800573a:	4613      	movcs	r3, r2
 800573c:	461a      	mov	r2, r3
 800573e:	6879      	ldr	r1, [r7, #4]
 8005740:	68f8      	ldr	r0, [r7, #12]
 8005742:	f001 f967 	bl	8006a14 <USBD_CtlContinueRx>
 8005746:	e07d      	b.n	8005844 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 800574e:	f003 031f 	and.w	r3, r3, #31
 8005752:	2b02      	cmp	r3, #2
 8005754:	d014      	beq.n	8005780 <USBD_LL_DataOutStage+0x98>
 8005756:	2b02      	cmp	r3, #2
 8005758:	d81d      	bhi.n	8005796 <USBD_LL_DataOutStage+0xae>
 800575a:	2b00      	cmp	r3, #0
 800575c:	d002      	beq.n	8005764 <USBD_LL_DataOutStage+0x7c>
 800575e:	2b01      	cmp	r3, #1
 8005760:	d003      	beq.n	800576a <USBD_LL_DataOutStage+0x82>
 8005762:	e018      	b.n	8005796 <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8005764:	2300      	movs	r3, #0
 8005766:	75bb      	strb	r3, [r7, #22]
            break;
 8005768:	e018      	b.n	800579c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005770:	b2db      	uxtb	r3, r3
 8005772:	4619      	mov	r1, r3
 8005774:	68f8      	ldr	r0, [r7, #12]
 8005776:	f000 fa5e 	bl	8005c36 <USBD_CoreFindIF>
 800577a:	4603      	mov	r3, r0
 800577c:	75bb      	strb	r3, [r7, #22]
            break;
 800577e:	e00d      	b.n	800579c <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8005780:	68fb      	ldr	r3, [r7, #12]
 8005782:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8005786:	b2db      	uxtb	r3, r3
 8005788:	4619      	mov	r1, r3
 800578a:	68f8      	ldr	r0, [r7, #12]
 800578c:	f000 fa60 	bl	8005c50 <USBD_CoreFindEP>
 8005790:	4603      	mov	r3, r0
 8005792:	75bb      	strb	r3, [r7, #22]
            break;
 8005794:	e002      	b.n	800579c <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 8005796:	2300      	movs	r3, #0
 8005798:	75bb      	strb	r3, [r7, #22]
            break;
 800579a:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 800579c:	7dbb      	ldrb	r3, [r7, #22]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d119      	bne.n	80057d6 <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80057a8:	b2db      	uxtb	r3, r3
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	d113      	bne.n	80057d6 <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80057ae:	7dba      	ldrb	r2, [r7, #22]
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	32ae      	adds	r2, #174	; 0xae
 80057b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057b8:	691b      	ldr	r3, [r3, #16]
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d00b      	beq.n	80057d6 <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80057be:	7dba      	ldrb	r2, [r7, #22]
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80057c6:	7dba      	ldrb	r2, [r7, #22]
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	32ae      	adds	r2, #174	; 0xae
 80057cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057d0:	691b      	ldr	r3, [r3, #16]
 80057d2:	68f8      	ldr	r0, [r7, #12]
 80057d4:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80057d6:	68f8      	ldr	r0, [r7, #12]
 80057d8:	f001 f92d 	bl	8006a36 <USBD_CtlSendStatus>
 80057dc:	e032      	b.n	8005844 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80057de:	7afb      	ldrb	r3, [r7, #11]
 80057e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80057e4:	b2db      	uxtb	r3, r3
 80057e6:	4619      	mov	r1, r3
 80057e8:	68f8      	ldr	r0, [r7, #12]
 80057ea:	f000 fa31 	bl	8005c50 <USBD_CoreFindEP>
 80057ee:	4603      	mov	r3, r0
 80057f0:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80057f2:	7dbb      	ldrb	r3, [r7, #22]
 80057f4:	2bff      	cmp	r3, #255	; 0xff
 80057f6:	d025      	beq.n	8005844 <USBD_LL_DataOutStage+0x15c>
 80057f8:	7dbb      	ldrb	r3, [r7, #22]
 80057fa:	2b00      	cmp	r3, #0
 80057fc:	d122      	bne.n	8005844 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80057fe:	68fb      	ldr	r3, [r7, #12]
 8005800:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005804:	b2db      	uxtb	r3, r3
 8005806:	2b03      	cmp	r3, #3
 8005808:	d117      	bne.n	800583a <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 800580a:	7dba      	ldrb	r2, [r7, #22]
 800580c:	68fb      	ldr	r3, [r7, #12]
 800580e:	32ae      	adds	r2, #174	; 0xae
 8005810:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005814:	699b      	ldr	r3, [r3, #24]
 8005816:	2b00      	cmp	r3, #0
 8005818:	d00f      	beq.n	800583a <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800581a:	7dba      	ldrb	r2, [r7, #22]
 800581c:	68fb      	ldr	r3, [r7, #12]
 800581e:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8005822:	7dba      	ldrb	r2, [r7, #22]
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	32ae      	adds	r2, #174	; 0xae
 8005828:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800582c:	699b      	ldr	r3, [r3, #24]
 800582e:	7afa      	ldrb	r2, [r7, #11]
 8005830:	4611      	mov	r1, r2
 8005832:	68f8      	ldr	r0, [r7, #12]
 8005834:	4798      	blx	r3
 8005836:	4603      	mov	r3, r0
 8005838:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800583a:	7dfb      	ldrb	r3, [r7, #23]
 800583c:	2b00      	cmp	r3, #0
 800583e:	d001      	beq.n	8005844 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8005840:	7dfb      	ldrb	r3, [r7, #23]
 8005842:	e000      	b.n	8005846 <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3718      	adds	r7, #24
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}

0800584e <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 800584e:	b580      	push	{r7, lr}
 8005850:	b086      	sub	sp, #24
 8005852:	af00      	add	r7, sp, #0
 8005854:	60f8      	str	r0, [r7, #12]
 8005856:	460b      	mov	r3, r1
 8005858:	607a      	str	r2, [r7, #4]
 800585a:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 800585c:	7afb      	ldrb	r3, [r7, #11]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d16f      	bne.n	8005942 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	3314      	adds	r3, #20
 8005866:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 800586e:	2b02      	cmp	r3, #2
 8005870:	d15a      	bne.n	8005928 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8005872:	693b      	ldr	r3, [r7, #16]
 8005874:	689a      	ldr	r2, [r3, #8]
 8005876:	693b      	ldr	r3, [r7, #16]
 8005878:	68db      	ldr	r3, [r3, #12]
 800587a:	429a      	cmp	r2, r3
 800587c:	d914      	bls.n	80058a8 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 800587e:	693b      	ldr	r3, [r7, #16]
 8005880:	689a      	ldr	r2, [r3, #8]
 8005882:	693b      	ldr	r3, [r7, #16]
 8005884:	68db      	ldr	r3, [r3, #12]
 8005886:	1ad2      	subs	r2, r2, r3
 8005888:	693b      	ldr	r3, [r7, #16]
 800588a:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 800588c:	693b      	ldr	r3, [r7, #16]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	461a      	mov	r2, r3
 8005892:	6879      	ldr	r1, [r7, #4]
 8005894:	68f8      	ldr	r0, [r7, #12]
 8005896:	f001 f8ac 	bl	80069f2 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800589a:	2300      	movs	r3, #0
 800589c:	2200      	movs	r2, #0
 800589e:	2100      	movs	r1, #0
 80058a0:	68f8      	ldr	r0, [r7, #12]
 80058a2:	f001 fcb7 	bl	8007214 <USBD_LL_PrepareReceive>
 80058a6:	e03f      	b.n	8005928 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 80058a8:	693b      	ldr	r3, [r7, #16]
 80058aa:	68da      	ldr	r2, [r3, #12]
 80058ac:	693b      	ldr	r3, [r7, #16]
 80058ae:	689b      	ldr	r3, [r3, #8]
 80058b0:	429a      	cmp	r2, r3
 80058b2:	d11c      	bne.n	80058ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80058b4:	693b      	ldr	r3, [r7, #16]
 80058b6:	685a      	ldr	r2, [r3, #4]
 80058b8:	693b      	ldr	r3, [r7, #16]
 80058ba:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80058bc:	429a      	cmp	r2, r3
 80058be:	d316      	bcc.n	80058ee <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80058c0:	693b      	ldr	r3, [r7, #16]
 80058c2:	685a      	ldr	r2, [r3, #4]
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80058ca:	429a      	cmp	r2, r3
 80058cc:	d20f      	bcs.n	80058ee <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80058ce:	2200      	movs	r2, #0
 80058d0:	2100      	movs	r1, #0
 80058d2:	68f8      	ldr	r0, [r7, #12]
 80058d4:	f001 f88d 	bl	80069f2 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80058d8:	68fb      	ldr	r3, [r7, #12]
 80058da:	2200      	movs	r2, #0
 80058dc:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80058e0:	2300      	movs	r3, #0
 80058e2:	2200      	movs	r2, #0
 80058e4:	2100      	movs	r1, #0
 80058e6:	68f8      	ldr	r0, [r7, #12]
 80058e8:	f001 fc94 	bl	8007214 <USBD_LL_PrepareReceive>
 80058ec:	e01c      	b.n	8005928 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80058f4:	b2db      	uxtb	r3, r3
 80058f6:	2b03      	cmp	r3, #3
 80058f8:	d10f      	bne.n	800591a <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005900:	68db      	ldr	r3, [r3, #12]
 8005902:	2b00      	cmp	r3, #0
 8005904:	d009      	beq.n	800591a <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	2200      	movs	r2, #0
 800590a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005914:	68db      	ldr	r3, [r3, #12]
 8005916:	68f8      	ldr	r0, [r7, #12]
 8005918:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800591a:	2180      	movs	r1, #128	; 0x80
 800591c:	68f8      	ldr	r0, [r7, #12]
 800591e:	f001 fbcf 	bl	80070c0 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8005922:	68f8      	ldr	r0, [r7, #12]
 8005924:	f001 f89a 	bl	8006a5c <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 800592e:	2b00      	cmp	r3, #0
 8005930:	d03a      	beq.n	80059a8 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8005932:	68f8      	ldr	r0, [r7, #12]
 8005934:	f7ff fe42 	bl	80055bc <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	2200      	movs	r2, #0
 800593c:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8005940:	e032      	b.n	80059a8 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8005942:	7afb      	ldrb	r3, [r7, #11]
 8005944:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8005948:	b2db      	uxtb	r3, r3
 800594a:	4619      	mov	r1, r3
 800594c:	68f8      	ldr	r0, [r7, #12]
 800594e:	f000 f97f 	bl	8005c50 <USBD_CoreFindEP>
 8005952:	4603      	mov	r3, r0
 8005954:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005956:	7dfb      	ldrb	r3, [r7, #23]
 8005958:	2bff      	cmp	r3, #255	; 0xff
 800595a:	d025      	beq.n	80059a8 <USBD_LL_DataInStage+0x15a>
 800595c:	7dfb      	ldrb	r3, [r7, #23]
 800595e:	2b00      	cmp	r3, #0
 8005960:	d122      	bne.n	80059a8 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005968:	b2db      	uxtb	r3, r3
 800596a:	2b03      	cmp	r3, #3
 800596c:	d11c      	bne.n	80059a8 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 800596e:	7dfa      	ldrb	r2, [r7, #23]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	32ae      	adds	r2, #174	; 0xae
 8005974:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005978:	695b      	ldr	r3, [r3, #20]
 800597a:	2b00      	cmp	r3, #0
 800597c:	d014      	beq.n	80059a8 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 800597e:	7dfa      	ldrb	r2, [r7, #23]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 8005986:	7dfa      	ldrb	r2, [r7, #23]
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	32ae      	adds	r2, #174	; 0xae
 800598c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005990:	695b      	ldr	r3, [r3, #20]
 8005992:	7afa      	ldrb	r2, [r7, #11]
 8005994:	4611      	mov	r1, r2
 8005996:	68f8      	ldr	r0, [r7, #12]
 8005998:	4798      	blx	r3
 800599a:	4603      	mov	r3, r0
 800599c:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 800599e:	7dbb      	ldrb	r3, [r7, #22]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d001      	beq.n	80059a8 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80059a4:	7dbb      	ldrb	r3, [r7, #22]
 80059a6:	e000      	b.n	80059aa <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 80059a8:	2300      	movs	r3, #0
}
 80059aa:	4618      	mov	r0, r3
 80059ac:	3718      	adds	r7, #24
 80059ae:	46bd      	mov	sp, r7
 80059b0:	bd80      	pop	{r7, pc}

080059b2 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80059b2:	b580      	push	{r7, lr}
 80059b4:	b084      	sub	sp, #16
 80059b6:	af00      	add	r7, sp, #0
 80059b8:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80059ba:	2300      	movs	r3, #0
 80059bc:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2201      	movs	r2, #1
 80059c2:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2200      	movs	r2, #0
 80059ca:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	2200      	movs	r2, #0
 80059d2:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	2200      	movs	r2, #0
 80059d8:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2200      	movs	r2, #0
 80059e0:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d014      	beq.n	8005a18 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80059f4:	685b      	ldr	r3, [r3, #4]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00e      	beq.n	8005a18 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005a00:	685b      	ldr	r3, [r3, #4]
 8005a02:	687a      	ldr	r2, [r7, #4]
 8005a04:	6852      	ldr	r2, [r2, #4]
 8005a06:	b2d2      	uxtb	r2, r2
 8005a08:	4611      	mov	r1, r2
 8005a0a:	6878      	ldr	r0, [r7, #4]
 8005a0c:	4798      	blx	r3
 8005a0e:	4603      	mov	r3, r0
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d001      	beq.n	8005a18 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8005a14:	2303      	movs	r3, #3
 8005a16:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a18:	2340      	movs	r3, #64	; 0x40
 8005a1a:	2200      	movs	r2, #0
 8005a1c:	2100      	movs	r1, #0
 8005a1e:	6878      	ldr	r0, [r7, #4]
 8005a20:	f001 fb09 	bl	8007036 <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2240      	movs	r2, #64	; 0x40
 8005a30:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8005a34:	2340      	movs	r3, #64	; 0x40
 8005a36:	2200      	movs	r2, #0
 8005a38:	2180      	movs	r1, #128	; 0x80
 8005a3a:	6878      	ldr	r0, [r7, #4]
 8005a3c:	f001 fafb 	bl	8007036 <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	2201      	movs	r2, #1
 8005a44:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	2240      	movs	r2, #64	; 0x40
 8005a4a:	621a      	str	r2, [r3, #32]

  return ret;
 8005a4c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005a4e:	4618      	mov	r0, r3
 8005a50:	3710      	adds	r7, #16
 8005a52:	46bd      	mov	sp, r7
 8005a54:	bd80      	pop	{r7, pc}

08005a56 <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 8005a56:	b480      	push	{r7}
 8005a58:	b083      	sub	sp, #12
 8005a5a:	af00      	add	r7, sp, #0
 8005a5c:	6078      	str	r0, [r7, #4]
 8005a5e:	460b      	mov	r3, r1
 8005a60:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	78fa      	ldrb	r2, [r7, #3]
 8005a66:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	370c      	adds	r7, #12
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr

08005a76 <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 8005a76:	b480      	push	{r7}
 8005a78:	b083      	sub	sp, #12
 8005a7a:	af00      	add	r7, sp, #0
 8005a7c:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8005a7e:	687b      	ldr	r3, [r7, #4]
 8005a80:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005a84:	b2da      	uxtb	r2, r3
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2204      	movs	r2, #4
 8005a90:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8005a94:	2300      	movs	r3, #0
}
 8005a96:	4618      	mov	r0, r3
 8005a98:	370c      	adds	r7, #12
 8005a9a:	46bd      	mov	sp, r7
 8005a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aa0:	4770      	bx	lr

08005aa2 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8005aa2:	b480      	push	{r7}
 8005aa4:	b083      	sub	sp, #12
 8005aa6:	af00      	add	r7, sp, #0
 8005aa8:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ab0:	b2db      	uxtb	r3, r3
 8005ab2:	2b04      	cmp	r3, #4
 8005ab4:	d106      	bne.n	8005ac4 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8005abc:	b2da      	uxtb	r2, r3
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 8005ac4:	2300      	movs	r3, #0
}
 8005ac6:	4618      	mov	r0, r3
 8005ac8:	370c      	adds	r7, #12
 8005aca:	46bd      	mov	sp, r7
 8005acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad0:	4770      	bx	lr

08005ad2 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8005ad2:	b580      	push	{r7, lr}
 8005ad4:	b082      	sub	sp, #8
 8005ad6:	af00      	add	r7, sp, #0
 8005ad8:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005ae0:	b2db      	uxtb	r3, r3
 8005ae2:	2b03      	cmp	r3, #3
 8005ae4:	d110      	bne.n	8005b08 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005aec:	2b00      	cmp	r3, #0
 8005aee:	d00b      	beq.n	8005b08 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005af6:	69db      	ldr	r3, [r3, #28]
 8005af8:	2b00      	cmp	r3, #0
 8005afa:	d005      	beq.n	8005b08 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005b02:	69db      	ldr	r3, [r3, #28]
 8005b04:	6878      	ldr	r0, [r7, #4]
 8005b06:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8005b08:	2300      	movs	r3, #0
}
 8005b0a:	4618      	mov	r0, r3
 8005b0c:	3708      	adds	r7, #8
 8005b0e:	46bd      	mov	sp, r7
 8005b10:	bd80      	pop	{r7, pc}

08005b12 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8005b12:	b580      	push	{r7, lr}
 8005b14:	b082      	sub	sp, #8
 8005b16:	af00      	add	r7, sp, #0
 8005b18:	6078      	str	r0, [r7, #4]
 8005b1a:	460b      	mov	r3, r1
 8005b1c:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	32ae      	adds	r2, #174	; 0xae
 8005b28:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d101      	bne.n	8005b34 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b30:	2303      	movs	r3, #3
 8005b32:	e01c      	b.n	8005b6e <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	2b03      	cmp	r3, #3
 8005b3e:	d115      	bne.n	8005b6c <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	32ae      	adds	r2, #174	; 0xae
 8005b4a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b4e:	6a1b      	ldr	r3, [r3, #32]
 8005b50:	2b00      	cmp	r3, #0
 8005b52:	d00b      	beq.n	8005b6c <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	32ae      	adds	r2, #174	; 0xae
 8005b5e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b62:	6a1b      	ldr	r3, [r3, #32]
 8005b64:	78fa      	ldrb	r2, [r7, #3]
 8005b66:	4611      	mov	r1, r2
 8005b68:	6878      	ldr	r0, [r7, #4]
 8005b6a:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005b6c:	2300      	movs	r3, #0
}
 8005b6e:	4618      	mov	r0, r3
 8005b70:	3708      	adds	r7, #8
 8005b72:	46bd      	mov	sp, r7
 8005b74:	bd80      	pop	{r7, pc}

08005b76 <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 8005b76:	b580      	push	{r7, lr}
 8005b78:	b082      	sub	sp, #8
 8005b7a:	af00      	add	r7, sp, #0
 8005b7c:	6078      	str	r0, [r7, #4]
 8005b7e:	460b      	mov	r3, r1
 8005b80:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	32ae      	adds	r2, #174	; 0xae
 8005b8c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b90:	2b00      	cmp	r3, #0
 8005b92:	d101      	bne.n	8005b98 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8005b94:	2303      	movs	r3, #3
 8005b96:	e01c      	b.n	8005bd2 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005b9e:	b2db      	uxtb	r3, r3
 8005ba0:	2b03      	cmp	r3, #3
 8005ba2:	d115      	bne.n	8005bd0 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	32ae      	adds	r2, #174	; 0xae
 8005bae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00b      	beq.n	8005bd0 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	32ae      	adds	r2, #174	; 0xae
 8005bc2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005bc8:	78fa      	ldrb	r2, [r7, #3]
 8005bca:	4611      	mov	r1, r2
 8005bcc:	6878      	ldr	r0, [r7, #4]
 8005bce:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8005bd0:	2300      	movs	r3, #0
}
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	3708      	adds	r7, #8
 8005bd6:	46bd      	mov	sp, r7
 8005bd8:	bd80      	pop	{r7, pc}

08005bda <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8005bda:	b480      	push	{r7}
 8005bdc:	b083      	sub	sp, #12
 8005bde:	af00      	add	r7, sp, #0
 8005be0:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8005be2:	2300      	movs	r3, #0
}
 8005be4:	4618      	mov	r0, r3
 8005be6:	370c      	adds	r7, #12
 8005be8:	46bd      	mov	sp, r7
 8005bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bee:	4770      	bx	lr

08005bf0 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8005bf0:	b580      	push	{r7, lr}
 8005bf2:	b084      	sub	sp, #16
 8005bf4:	af00      	add	r7, sp, #0
 8005bf6:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8005bf8:	2300      	movs	r3, #0
 8005bfa:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	2201      	movs	r2, #1
 8005c00:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 8005c04:	687b      	ldr	r3, [r7, #4]
 8005c06:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d00e      	beq.n	8005c2c <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8005c14:	685b      	ldr	r3, [r3, #4]
 8005c16:	687a      	ldr	r2, [r7, #4]
 8005c18:	6852      	ldr	r2, [r2, #4]
 8005c1a:	b2d2      	uxtb	r2, r2
 8005c1c:	4611      	mov	r1, r2
 8005c1e:	6878      	ldr	r0, [r7, #4]
 8005c20:	4798      	blx	r3
 8005c22:	4603      	mov	r3, r0
 8005c24:	2b00      	cmp	r3, #0
 8005c26:	d001      	beq.n	8005c2c <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8005c28:	2303      	movs	r3, #3
 8005c2a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8005c2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3710      	adds	r7, #16
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b083      	sub	sp, #12
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c42:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c44:	4618      	mov	r0, r3
 8005c46:	370c      	adds	r7, #12
 8005c48:	46bd      	mov	sp, r7
 8005c4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4e:	4770      	bx	lr

08005c50 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8005c50:	b480      	push	{r7}
 8005c52:	b083      	sub	sp, #12
 8005c54:	af00      	add	r7, sp, #0
 8005c56:	6078      	str	r0, [r7, #4]
 8005c58:	460b      	mov	r3, r1
 8005c5a:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8005c5c:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8005c5e:	4618      	mov	r0, r3
 8005c60:	370c      	adds	r7, #12
 8005c62:	46bd      	mov	sp, r7
 8005c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c68:	4770      	bx	lr

08005c6a <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8005c6a:	b580      	push	{r7, lr}
 8005c6c:	b086      	sub	sp, #24
 8005c6e:	af00      	add	r7, sp, #0
 8005c70:	6078      	str	r0, [r7, #4]
 8005c72:	460b      	mov	r3, r1
 8005c74:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	885b      	ldrh	r3, [r3, #2]
 8005c86:	b29a      	uxth	r2, r3
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	781b      	ldrb	r3, [r3, #0]
 8005c8c:	b29b      	uxth	r3, r3
 8005c8e:	429a      	cmp	r2, r3
 8005c90:	d920      	bls.n	8005cd4 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	781b      	ldrb	r3, [r3, #0]
 8005c96:	b29b      	uxth	r3, r3
 8005c98:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8005c9a:	e013      	b.n	8005cc4 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8005c9c:	f107 030a 	add.w	r3, r7, #10
 8005ca0:	4619      	mov	r1, r3
 8005ca2:	6978      	ldr	r0, [r7, #20]
 8005ca4:	f000 f81b 	bl	8005cde <USBD_GetNextDesc>
 8005ca8:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8005caa:	697b      	ldr	r3, [r7, #20]
 8005cac:	785b      	ldrb	r3, [r3, #1]
 8005cae:	2b05      	cmp	r3, #5
 8005cb0:	d108      	bne.n	8005cc4 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8005cb2:	697b      	ldr	r3, [r7, #20]
 8005cb4:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8005cb6:	693b      	ldr	r3, [r7, #16]
 8005cb8:	789b      	ldrb	r3, [r3, #2]
 8005cba:	78fa      	ldrb	r2, [r7, #3]
 8005cbc:	429a      	cmp	r2, r3
 8005cbe:	d008      	beq.n	8005cd2 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8005cc0:	2300      	movs	r3, #0
 8005cc2:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	885b      	ldrh	r3, [r3, #2]
 8005cc8:	b29a      	uxth	r2, r3
 8005cca:	897b      	ldrh	r3, [r7, #10]
 8005ccc:	429a      	cmp	r2, r3
 8005cce:	d8e5      	bhi.n	8005c9c <USBD_GetEpDesc+0x32>
 8005cd0:	e000      	b.n	8005cd4 <USBD_GetEpDesc+0x6a>
          break;
 8005cd2:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8005cd4:	693b      	ldr	r3, [r7, #16]
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3718      	adds	r7, #24
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b085      	sub	sp, #20
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
 8005ce6:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8005cec:	683b      	ldr	r3, [r7, #0]
 8005cee:	881a      	ldrh	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	781b      	ldrb	r3, [r3, #0]
 8005cf4:	b29b      	uxth	r3, r3
 8005cf6:	4413      	add	r3, r2
 8005cf8:	b29a      	uxth	r2, r3
 8005cfa:	683b      	ldr	r3, [r7, #0]
 8005cfc:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	781b      	ldrb	r3, [r3, #0]
 8005d02:	461a      	mov	r2, r3
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	4413      	add	r3, r2
 8005d08:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8005d0a:	68fb      	ldr	r3, [r7, #12]
}
 8005d0c:	4618      	mov	r0, r3
 8005d0e:	3714      	adds	r7, #20
 8005d10:	46bd      	mov	sp, r7
 8005d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d16:	4770      	bx	lr

08005d18 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8005d18:	b480      	push	{r7}
 8005d1a:	b087      	sub	sp, #28
 8005d1c:	af00      	add	r7, sp, #0
 8005d1e:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8005d24:	697b      	ldr	r3, [r7, #20]
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8005d2a:	697b      	ldr	r3, [r7, #20]
 8005d2c:	3301      	adds	r3, #1
 8005d2e:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8005d30:	697b      	ldr	r3, [r7, #20]
 8005d32:	781b      	ldrb	r3, [r3, #0]
 8005d34:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8005d36:	8a3b      	ldrh	r3, [r7, #16]
 8005d38:	021b      	lsls	r3, r3, #8
 8005d3a:	b21a      	sxth	r2, r3
 8005d3c:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	b21b      	sxth	r3, r3
 8005d44:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8005d46:	89fb      	ldrh	r3, [r7, #14]
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	371c      	adds	r7, #28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d52:	4770      	bx	lr

08005d54 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005d54:	b580      	push	{r7, lr}
 8005d56:	b084      	sub	sp, #16
 8005d58:	af00      	add	r7, sp, #0
 8005d5a:	6078      	str	r0, [r7, #4]
 8005d5c:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005d5e:	2300      	movs	r3, #0
 8005d60:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005d62:	683b      	ldr	r3, [r7, #0]
 8005d64:	781b      	ldrb	r3, [r3, #0]
 8005d66:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005d6a:	2b40      	cmp	r3, #64	; 0x40
 8005d6c:	d005      	beq.n	8005d7a <USBD_StdDevReq+0x26>
 8005d6e:	2b40      	cmp	r3, #64	; 0x40
 8005d70:	d857      	bhi.n	8005e22 <USBD_StdDevReq+0xce>
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d00f      	beq.n	8005d96 <USBD_StdDevReq+0x42>
 8005d76:	2b20      	cmp	r3, #32
 8005d78:	d153      	bne.n	8005e22 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	32ae      	adds	r2, #174	; 0xae
 8005d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005d88:	689b      	ldr	r3, [r3, #8]
 8005d8a:	6839      	ldr	r1, [r7, #0]
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	4798      	blx	r3
 8005d90:	4603      	mov	r3, r0
 8005d92:	73fb      	strb	r3, [r7, #15]
      break;
 8005d94:	e04a      	b.n	8005e2c <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	785b      	ldrb	r3, [r3, #1]
 8005d9a:	2b09      	cmp	r3, #9
 8005d9c:	d83b      	bhi.n	8005e16 <USBD_StdDevReq+0xc2>
 8005d9e:	a201      	add	r2, pc, #4	; (adr r2, 8005da4 <USBD_StdDevReq+0x50>)
 8005da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005da4:	08005df9 	.word	0x08005df9
 8005da8:	08005e0d 	.word	0x08005e0d
 8005dac:	08005e17 	.word	0x08005e17
 8005db0:	08005e03 	.word	0x08005e03
 8005db4:	08005e17 	.word	0x08005e17
 8005db8:	08005dd7 	.word	0x08005dd7
 8005dbc:	08005dcd 	.word	0x08005dcd
 8005dc0:	08005e17 	.word	0x08005e17
 8005dc4:	08005def 	.word	0x08005def
 8005dc8:	08005de1 	.word	0x08005de1
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8005dcc:	6839      	ldr	r1, [r7, #0]
 8005dce:	6878      	ldr	r0, [r7, #4]
 8005dd0:	f000 fa3c 	bl	800624c <USBD_GetDescriptor>
          break;
 8005dd4:	e024      	b.n	8005e20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8005dd6:	6839      	ldr	r1, [r7, #0]
 8005dd8:	6878      	ldr	r0, [r7, #4]
 8005dda:	f000 fba1 	bl	8006520 <USBD_SetAddress>
          break;
 8005dde:	e01f      	b.n	8005e20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8005de0:	6839      	ldr	r1, [r7, #0]
 8005de2:	6878      	ldr	r0, [r7, #4]
 8005de4:	f000 fbe0 	bl	80065a8 <USBD_SetConfig>
 8005de8:	4603      	mov	r3, r0
 8005dea:	73fb      	strb	r3, [r7, #15]
          break;
 8005dec:	e018      	b.n	8005e20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8005dee:	6839      	ldr	r1, [r7, #0]
 8005df0:	6878      	ldr	r0, [r7, #4]
 8005df2:	f000 fc83 	bl	80066fc <USBD_GetConfig>
          break;
 8005df6:	e013      	b.n	8005e20 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8005df8:	6839      	ldr	r1, [r7, #0]
 8005dfa:	6878      	ldr	r0, [r7, #4]
 8005dfc:	f000 fcb4 	bl	8006768 <USBD_GetStatus>
          break;
 8005e00:	e00e      	b.n	8005e20 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8005e02:	6839      	ldr	r1, [r7, #0]
 8005e04:	6878      	ldr	r0, [r7, #4]
 8005e06:	f000 fce3 	bl	80067d0 <USBD_SetFeature>
          break;
 8005e0a:	e009      	b.n	8005e20 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8005e0c:	6839      	ldr	r1, [r7, #0]
 8005e0e:	6878      	ldr	r0, [r7, #4]
 8005e10:	f000 fd07 	bl	8006822 <USBD_ClrFeature>
          break;
 8005e14:	e004      	b.n	8005e20 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8005e16:	6839      	ldr	r1, [r7, #0]
 8005e18:	6878      	ldr	r0, [r7, #4]
 8005e1a:	f000 fd5e 	bl	80068da <USBD_CtlError>
          break;
 8005e1e:	bf00      	nop
      }
      break;
 8005e20:	e004      	b.n	8005e2c <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8005e22:	6839      	ldr	r1, [r7, #0]
 8005e24:	6878      	ldr	r0, [r7, #4]
 8005e26:	f000 fd58 	bl	80068da <USBD_CtlError>
      break;
 8005e2a:	bf00      	nop
  }

  return ret;
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
}
 8005e2e:	4618      	mov	r0, r3
 8005e30:	3710      	adds	r7, #16
 8005e32:	46bd      	mov	sp, r7
 8005e34:	bd80      	pop	{r7, pc}
 8005e36:	bf00      	nop

08005e38 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005e38:	b580      	push	{r7, lr}
 8005e3a:	b084      	sub	sp, #16
 8005e3c:	af00      	add	r7, sp, #0
 8005e3e:	6078      	str	r0, [r7, #4]
 8005e40:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8005e42:	2300      	movs	r3, #0
 8005e44:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005e46:	683b      	ldr	r3, [r7, #0]
 8005e48:	781b      	ldrb	r3, [r3, #0]
 8005e4a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005e4e:	2b40      	cmp	r3, #64	; 0x40
 8005e50:	d005      	beq.n	8005e5e <USBD_StdItfReq+0x26>
 8005e52:	2b40      	cmp	r3, #64	; 0x40
 8005e54:	d852      	bhi.n	8005efc <USBD_StdItfReq+0xc4>
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d001      	beq.n	8005e5e <USBD_StdItfReq+0x26>
 8005e5a:	2b20      	cmp	r3, #32
 8005e5c:	d14e      	bne.n	8005efc <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005e64:	b2db      	uxtb	r3, r3
 8005e66:	3b01      	subs	r3, #1
 8005e68:	2b02      	cmp	r3, #2
 8005e6a:	d840      	bhi.n	8005eee <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8005e6c:	683b      	ldr	r3, [r7, #0]
 8005e6e:	889b      	ldrh	r3, [r3, #4]
 8005e70:	b2db      	uxtb	r3, r3
 8005e72:	2b01      	cmp	r3, #1
 8005e74:	d836      	bhi.n	8005ee4 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8005e76:	683b      	ldr	r3, [r7, #0]
 8005e78:	889b      	ldrh	r3, [r3, #4]
 8005e7a:	b2db      	uxtb	r3, r3
 8005e7c:	4619      	mov	r1, r3
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f7ff fed9 	bl	8005c36 <USBD_CoreFindIF>
 8005e84:	4603      	mov	r3, r0
 8005e86:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005e88:	7bbb      	ldrb	r3, [r7, #14]
 8005e8a:	2bff      	cmp	r3, #255	; 0xff
 8005e8c:	d01d      	beq.n	8005eca <USBD_StdItfReq+0x92>
 8005e8e:	7bbb      	ldrb	r3, [r7, #14]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d11a      	bne.n	8005eca <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8005e94:	7bba      	ldrb	r2, [r7, #14]
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	32ae      	adds	r2, #174	; 0xae
 8005e9a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005e9e:	689b      	ldr	r3, [r3, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d00f      	beq.n	8005ec4 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8005ea4:	7bba      	ldrb	r2, [r7, #14]
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8005eac:	7bba      	ldrb	r2, [r7, #14]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	32ae      	adds	r2, #174	; 0xae
 8005eb2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005eb6:	689b      	ldr	r3, [r3, #8]
 8005eb8:	6839      	ldr	r1, [r7, #0]
 8005eba:	6878      	ldr	r0, [r7, #4]
 8005ebc:	4798      	blx	r3
 8005ebe:	4603      	mov	r3, r0
 8005ec0:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ec2:	e004      	b.n	8005ece <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8005ec4:	2303      	movs	r3, #3
 8005ec6:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8005ec8:	e001      	b.n	8005ece <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8005eca:	2303      	movs	r3, #3
 8005ecc:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8005ece:	683b      	ldr	r3, [r7, #0]
 8005ed0:	88db      	ldrh	r3, [r3, #6]
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d110      	bne.n	8005ef8 <USBD_StdItfReq+0xc0>
 8005ed6:	7bfb      	ldrb	r3, [r7, #15]
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d10d      	bne.n	8005ef8 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 fdaa 	bl	8006a36 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8005ee2:	e009      	b.n	8005ef8 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8005ee4:	6839      	ldr	r1, [r7, #0]
 8005ee6:	6878      	ldr	r0, [r7, #4]
 8005ee8:	f000 fcf7 	bl	80068da <USBD_CtlError>
          break;
 8005eec:	e004      	b.n	8005ef8 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8005eee:	6839      	ldr	r1, [r7, #0]
 8005ef0:	6878      	ldr	r0, [r7, #4]
 8005ef2:	f000 fcf2 	bl	80068da <USBD_CtlError>
          break;
 8005ef6:	e000      	b.n	8005efa <USBD_StdItfReq+0xc2>
          break;
 8005ef8:	bf00      	nop
      }
      break;
 8005efa:	e004      	b.n	8005f06 <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8005efc:	6839      	ldr	r1, [r7, #0]
 8005efe:	6878      	ldr	r0, [r7, #4]
 8005f00:	f000 fceb 	bl	80068da <USBD_CtlError>
      break;
 8005f04:	bf00      	nop
  }

  return ret;
 8005f06:	7bfb      	ldrb	r3, [r7, #15]
}
 8005f08:	4618      	mov	r0, r3
 8005f0a:	3710      	adds	r7, #16
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	bd80      	pop	{r7, pc}

08005f10 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f10:	b580      	push	{r7, lr}
 8005f12:	b084      	sub	sp, #16
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8005f1e:	683b      	ldr	r3, [r7, #0]
 8005f20:	889b      	ldrh	r3, [r3, #4]
 8005f22:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005f24:	683b      	ldr	r3, [r7, #0]
 8005f26:	781b      	ldrb	r3, [r3, #0]
 8005f28:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005f2c:	2b40      	cmp	r3, #64	; 0x40
 8005f2e:	d007      	beq.n	8005f40 <USBD_StdEPReq+0x30>
 8005f30:	2b40      	cmp	r3, #64	; 0x40
 8005f32:	f200 817f 	bhi.w	8006234 <USBD_StdEPReq+0x324>
 8005f36:	2b00      	cmp	r3, #0
 8005f38:	d02a      	beq.n	8005f90 <USBD_StdEPReq+0x80>
 8005f3a:	2b20      	cmp	r3, #32
 8005f3c:	f040 817a 	bne.w	8006234 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8005f40:	7bbb      	ldrb	r3, [r7, #14]
 8005f42:	4619      	mov	r1, r3
 8005f44:	6878      	ldr	r0, [r7, #4]
 8005f46:	f7ff fe83 	bl	8005c50 <USBD_CoreFindEP>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8005f4e:	7b7b      	ldrb	r3, [r7, #13]
 8005f50:	2bff      	cmp	r3, #255	; 0xff
 8005f52:	f000 8174 	beq.w	800623e <USBD_StdEPReq+0x32e>
 8005f56:	7b7b      	ldrb	r3, [r7, #13]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	f040 8170 	bne.w	800623e <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8005f5e:	7b7a      	ldrb	r2, [r7, #13]
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8005f66:	7b7a      	ldrb	r2, [r7, #13]
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	32ae      	adds	r2, #174	; 0xae
 8005f6c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f70:	689b      	ldr	r3, [r3, #8]
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	f000 8163 	beq.w	800623e <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8005f78:	7b7a      	ldrb	r2, [r7, #13]
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	32ae      	adds	r2, #174	; 0xae
 8005f7e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f82:	689b      	ldr	r3, [r3, #8]
 8005f84:	6839      	ldr	r1, [r7, #0]
 8005f86:	6878      	ldr	r0, [r7, #4]
 8005f88:	4798      	blx	r3
 8005f8a:	4603      	mov	r3, r0
 8005f8c:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005f8e:	e156      	b.n	800623e <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005f90:	683b      	ldr	r3, [r7, #0]
 8005f92:	785b      	ldrb	r3, [r3, #1]
 8005f94:	2b03      	cmp	r3, #3
 8005f96:	d008      	beq.n	8005faa <USBD_StdEPReq+0x9a>
 8005f98:	2b03      	cmp	r3, #3
 8005f9a:	f300 8145 	bgt.w	8006228 <USBD_StdEPReq+0x318>
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	f000 809b 	beq.w	80060da <USBD_StdEPReq+0x1ca>
 8005fa4:	2b01      	cmp	r3, #1
 8005fa6:	d03c      	beq.n	8006022 <USBD_StdEPReq+0x112>
 8005fa8:	e13e      	b.n	8006228 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005fb0:	b2db      	uxtb	r3, r3
 8005fb2:	2b02      	cmp	r3, #2
 8005fb4:	d002      	beq.n	8005fbc <USBD_StdEPReq+0xac>
 8005fb6:	2b03      	cmp	r3, #3
 8005fb8:	d016      	beq.n	8005fe8 <USBD_StdEPReq+0xd8>
 8005fba:	e02c      	b.n	8006016 <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8005fbc:	7bbb      	ldrb	r3, [r7, #14]
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d00d      	beq.n	8005fde <USBD_StdEPReq+0xce>
 8005fc2:	7bbb      	ldrb	r3, [r7, #14]
 8005fc4:	2b80      	cmp	r3, #128	; 0x80
 8005fc6:	d00a      	beq.n	8005fde <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8005fc8:	7bbb      	ldrb	r3, [r7, #14]
 8005fca:	4619      	mov	r1, r3
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f001 f877 	bl	80070c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8005fd2:	2180      	movs	r1, #128	; 0x80
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f001 f873 	bl	80070c0 <USBD_LL_StallEP>
 8005fda:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8005fdc:	e020      	b.n	8006020 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f000 fc7a 	bl	80068da <USBD_CtlError>
              break;
 8005fe6:	e01b      	b.n	8006020 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	885b      	ldrh	r3, [r3, #2]
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d10e      	bne.n	800600e <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8005ff0:	7bbb      	ldrb	r3, [r7, #14]
 8005ff2:	2b00      	cmp	r3, #0
 8005ff4:	d00b      	beq.n	800600e <USBD_StdEPReq+0xfe>
 8005ff6:	7bbb      	ldrb	r3, [r7, #14]
 8005ff8:	2b80      	cmp	r3, #128	; 0x80
 8005ffa:	d008      	beq.n	800600e <USBD_StdEPReq+0xfe>
 8005ffc:	683b      	ldr	r3, [r7, #0]
 8005ffe:	88db      	ldrh	r3, [r3, #6]
 8006000:	2b00      	cmp	r3, #0
 8006002:	d104      	bne.n	800600e <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006004:	7bbb      	ldrb	r3, [r7, #14]
 8006006:	4619      	mov	r1, r3
 8006008:	6878      	ldr	r0, [r7, #4]
 800600a:	f001 f859 	bl	80070c0 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fd11 	bl	8006a36 <USBD_CtlSendStatus>

              break;
 8006014:	e004      	b.n	8006020 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006016:	6839      	ldr	r1, [r7, #0]
 8006018:	6878      	ldr	r0, [r7, #4]
 800601a:	f000 fc5e 	bl	80068da <USBD_CtlError>
              break;
 800601e:	bf00      	nop
          }
          break;
 8006020:	e107      	b.n	8006232 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006028:	b2db      	uxtb	r3, r3
 800602a:	2b02      	cmp	r3, #2
 800602c:	d002      	beq.n	8006034 <USBD_StdEPReq+0x124>
 800602e:	2b03      	cmp	r3, #3
 8006030:	d016      	beq.n	8006060 <USBD_StdEPReq+0x150>
 8006032:	e04b      	b.n	80060cc <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006034:	7bbb      	ldrb	r3, [r7, #14]
 8006036:	2b00      	cmp	r3, #0
 8006038:	d00d      	beq.n	8006056 <USBD_StdEPReq+0x146>
 800603a:	7bbb      	ldrb	r3, [r7, #14]
 800603c:	2b80      	cmp	r3, #128	; 0x80
 800603e:	d00a      	beq.n	8006056 <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006040:	7bbb      	ldrb	r3, [r7, #14]
 8006042:	4619      	mov	r1, r3
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f001 f83b 	bl	80070c0 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 800604a:	2180      	movs	r1, #128	; 0x80
 800604c:	6878      	ldr	r0, [r7, #4]
 800604e:	f001 f837 	bl	80070c0 <USBD_LL_StallEP>
 8006052:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006054:	e040      	b.n	80060d8 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006056:	6839      	ldr	r1, [r7, #0]
 8006058:	6878      	ldr	r0, [r7, #4]
 800605a:	f000 fc3e 	bl	80068da <USBD_CtlError>
              break;
 800605e:	e03b      	b.n	80060d8 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006060:	683b      	ldr	r3, [r7, #0]
 8006062:	885b      	ldrh	r3, [r3, #2]
 8006064:	2b00      	cmp	r3, #0
 8006066:	d136      	bne.n	80060d6 <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006068:	7bbb      	ldrb	r3, [r7, #14]
 800606a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800606e:	2b00      	cmp	r3, #0
 8006070:	d004      	beq.n	800607c <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006072:	7bbb      	ldrb	r3, [r7, #14]
 8006074:	4619      	mov	r1, r3
 8006076:	6878      	ldr	r0, [r7, #4]
 8006078:	f001 f841 	bl	80070fe <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 800607c:	6878      	ldr	r0, [r7, #4]
 800607e:	f000 fcda 	bl	8006a36 <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006082:	7bbb      	ldrb	r3, [r7, #14]
 8006084:	4619      	mov	r1, r3
 8006086:	6878      	ldr	r0, [r7, #4]
 8006088:	f7ff fde2 	bl	8005c50 <USBD_CoreFindEP>
 800608c:	4603      	mov	r3, r0
 800608e:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006090:	7b7b      	ldrb	r3, [r7, #13]
 8006092:	2bff      	cmp	r3, #255	; 0xff
 8006094:	d01f      	beq.n	80060d6 <USBD_StdEPReq+0x1c6>
 8006096:	7b7b      	ldrb	r3, [r7, #13]
 8006098:	2b00      	cmp	r3, #0
 800609a:	d11c      	bne.n	80060d6 <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 800609c:	7b7a      	ldrb	r2, [r7, #13]
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 80060a4:	7b7a      	ldrb	r2, [r7, #13]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	32ae      	adds	r2, #174	; 0xae
 80060aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	2b00      	cmp	r3, #0
 80060b2:	d010      	beq.n	80060d6 <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 80060b4:	7b7a      	ldrb	r2, [r7, #13]
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	32ae      	adds	r2, #174	; 0xae
 80060ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060be:	689b      	ldr	r3, [r3, #8]
 80060c0:	6839      	ldr	r1, [r7, #0]
 80060c2:	6878      	ldr	r0, [r7, #4]
 80060c4:	4798      	blx	r3
 80060c6:	4603      	mov	r3, r0
 80060c8:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 80060ca:	e004      	b.n	80060d6 <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 80060cc:	6839      	ldr	r1, [r7, #0]
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 fc03 	bl	80068da <USBD_CtlError>
              break;
 80060d4:	e000      	b.n	80060d8 <USBD_StdEPReq+0x1c8>
              break;
 80060d6:	bf00      	nop
          }
          break;
 80060d8:	e0ab      	b.n	8006232 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80060e0:	b2db      	uxtb	r3, r3
 80060e2:	2b02      	cmp	r3, #2
 80060e4:	d002      	beq.n	80060ec <USBD_StdEPReq+0x1dc>
 80060e6:	2b03      	cmp	r3, #3
 80060e8:	d032      	beq.n	8006150 <USBD_StdEPReq+0x240>
 80060ea:	e097      	b.n	800621c <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80060ec:	7bbb      	ldrb	r3, [r7, #14]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d007      	beq.n	8006102 <USBD_StdEPReq+0x1f2>
 80060f2:	7bbb      	ldrb	r3, [r7, #14]
 80060f4:	2b80      	cmp	r3, #128	; 0x80
 80060f6:	d004      	beq.n	8006102 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 80060f8:	6839      	ldr	r1, [r7, #0]
 80060fa:	6878      	ldr	r0, [r7, #4]
 80060fc:	f000 fbed 	bl	80068da <USBD_CtlError>
                break;
 8006100:	e091      	b.n	8006226 <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006102:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006106:	2b00      	cmp	r3, #0
 8006108:	da0b      	bge.n	8006122 <USBD_StdEPReq+0x212>
 800610a:	7bbb      	ldrb	r3, [r7, #14]
 800610c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006110:	4613      	mov	r3, r2
 8006112:	009b      	lsls	r3, r3, #2
 8006114:	4413      	add	r3, r2
 8006116:	009b      	lsls	r3, r3, #2
 8006118:	3310      	adds	r3, #16
 800611a:	687a      	ldr	r2, [r7, #4]
 800611c:	4413      	add	r3, r2
 800611e:	3304      	adds	r3, #4
 8006120:	e00b      	b.n	800613a <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006122:	7bbb      	ldrb	r3, [r7, #14]
 8006124:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006128:	4613      	mov	r3, r2
 800612a:	009b      	lsls	r3, r3, #2
 800612c:	4413      	add	r3, r2
 800612e:	009b      	lsls	r3, r3, #2
 8006130:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	4413      	add	r3, r2
 8006138:	3304      	adds	r3, #4
 800613a:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2200      	movs	r2, #0
 8006140:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	2202      	movs	r2, #2
 8006146:	4619      	mov	r1, r3
 8006148:	6878      	ldr	r0, [r7, #4]
 800614a:	f000 fc37 	bl	80069bc <USBD_CtlSendData>
              break;
 800614e:	e06a      	b.n	8006226 <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006150:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006154:	2b00      	cmp	r3, #0
 8006156:	da11      	bge.n	800617c <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006158:	7bbb      	ldrb	r3, [r7, #14]
 800615a:	f003 020f 	and.w	r2, r3, #15
 800615e:	6879      	ldr	r1, [r7, #4]
 8006160:	4613      	mov	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4413      	add	r3, r2
 8006166:	009b      	lsls	r3, r3, #2
 8006168:	440b      	add	r3, r1
 800616a:	3324      	adds	r3, #36	; 0x24
 800616c:	881b      	ldrh	r3, [r3, #0]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d117      	bne.n	80061a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006172:	6839      	ldr	r1, [r7, #0]
 8006174:	6878      	ldr	r0, [r7, #4]
 8006176:	f000 fbb0 	bl	80068da <USBD_CtlError>
                  break;
 800617a:	e054      	b.n	8006226 <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 800617c:	7bbb      	ldrb	r3, [r7, #14]
 800617e:	f003 020f 	and.w	r2, r3, #15
 8006182:	6879      	ldr	r1, [r7, #4]
 8006184:	4613      	mov	r3, r2
 8006186:	009b      	lsls	r3, r3, #2
 8006188:	4413      	add	r3, r2
 800618a:	009b      	lsls	r3, r3, #2
 800618c:	440b      	add	r3, r1
 800618e:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006192:	881b      	ldrh	r3, [r3, #0]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d104      	bne.n	80061a2 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006198:	6839      	ldr	r1, [r7, #0]
 800619a:	6878      	ldr	r0, [r7, #4]
 800619c:	f000 fb9d 	bl	80068da <USBD_CtlError>
                  break;
 80061a0:	e041      	b.n	8006226 <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061a2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80061a6:	2b00      	cmp	r3, #0
 80061a8:	da0b      	bge.n	80061c2 <USBD_StdEPReq+0x2b2>
 80061aa:	7bbb      	ldrb	r3, [r7, #14]
 80061ac:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80061b0:	4613      	mov	r3, r2
 80061b2:	009b      	lsls	r3, r3, #2
 80061b4:	4413      	add	r3, r2
 80061b6:	009b      	lsls	r3, r3, #2
 80061b8:	3310      	adds	r3, #16
 80061ba:	687a      	ldr	r2, [r7, #4]
 80061bc:	4413      	add	r3, r2
 80061be:	3304      	adds	r3, #4
 80061c0:	e00b      	b.n	80061da <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80061c2:	7bbb      	ldrb	r3, [r7, #14]
 80061c4:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80061c8:	4613      	mov	r3, r2
 80061ca:	009b      	lsls	r3, r3, #2
 80061cc:	4413      	add	r3, r2
 80061ce:	009b      	lsls	r3, r3, #2
 80061d0:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 80061d4:	687a      	ldr	r2, [r7, #4]
 80061d6:	4413      	add	r3, r2
 80061d8:	3304      	adds	r3, #4
 80061da:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 80061dc:	7bbb      	ldrb	r3, [r7, #14]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d002      	beq.n	80061e8 <USBD_StdEPReq+0x2d8>
 80061e2:	7bbb      	ldrb	r3, [r7, #14]
 80061e4:	2b80      	cmp	r3, #128	; 0x80
 80061e6:	d103      	bne.n	80061f0 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 80061e8:	68bb      	ldr	r3, [r7, #8]
 80061ea:	2200      	movs	r2, #0
 80061ec:	601a      	str	r2, [r3, #0]
 80061ee:	e00e      	b.n	800620e <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 80061f0:	7bbb      	ldrb	r3, [r7, #14]
 80061f2:	4619      	mov	r1, r3
 80061f4:	6878      	ldr	r0, [r7, #4]
 80061f6:	f000 ffa1 	bl	800713c <USBD_LL_IsStallEP>
 80061fa:	4603      	mov	r3, r0
 80061fc:	2b00      	cmp	r3, #0
 80061fe:	d003      	beq.n	8006208 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006200:	68bb      	ldr	r3, [r7, #8]
 8006202:	2201      	movs	r2, #1
 8006204:	601a      	str	r2, [r3, #0]
 8006206:	e002      	b.n	800620e <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006208:	68bb      	ldr	r3, [r7, #8]
 800620a:	2200      	movs	r2, #0
 800620c:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 800620e:	68bb      	ldr	r3, [r7, #8]
 8006210:	2202      	movs	r2, #2
 8006212:	4619      	mov	r1, r3
 8006214:	6878      	ldr	r0, [r7, #4]
 8006216:	f000 fbd1 	bl	80069bc <USBD_CtlSendData>
              break;
 800621a:	e004      	b.n	8006226 <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 800621c:	6839      	ldr	r1, [r7, #0]
 800621e:	6878      	ldr	r0, [r7, #4]
 8006220:	f000 fb5b 	bl	80068da <USBD_CtlError>
              break;
 8006224:	bf00      	nop
          }
          break;
 8006226:	e004      	b.n	8006232 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006228:	6839      	ldr	r1, [r7, #0]
 800622a:	6878      	ldr	r0, [r7, #4]
 800622c:	f000 fb55 	bl	80068da <USBD_CtlError>
          break;
 8006230:	bf00      	nop
      }
      break;
 8006232:	e005      	b.n	8006240 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006234:	6839      	ldr	r1, [r7, #0]
 8006236:	6878      	ldr	r0, [r7, #4]
 8006238:	f000 fb4f 	bl	80068da <USBD_CtlError>
      break;
 800623c:	e000      	b.n	8006240 <USBD_StdEPReq+0x330>
      break;
 800623e:	bf00      	nop
  }

  return ret;
 8006240:	7bfb      	ldrb	r3, [r7, #15]
}
 8006242:	4618      	mov	r0, r3
 8006244:	3710      	adds	r7, #16
 8006246:	46bd      	mov	sp, r7
 8006248:	bd80      	pop	{r7, pc}
	...

0800624c <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
 8006254:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006256:	2300      	movs	r3, #0
 8006258:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800625a:	2300      	movs	r3, #0
 800625c:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 800625e:	2300      	movs	r3, #0
 8006260:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006262:	683b      	ldr	r3, [r7, #0]
 8006264:	885b      	ldrh	r3, [r3, #2]
 8006266:	0a1b      	lsrs	r3, r3, #8
 8006268:	b29b      	uxth	r3, r3
 800626a:	3b01      	subs	r3, #1
 800626c:	2b06      	cmp	r3, #6
 800626e:	f200 8128 	bhi.w	80064c2 <USBD_GetDescriptor+0x276>
 8006272:	a201      	add	r2, pc, #4	; (adr r2, 8006278 <USBD_GetDescriptor+0x2c>)
 8006274:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006278:	08006295 	.word	0x08006295
 800627c:	080062ad 	.word	0x080062ad
 8006280:	080062ed 	.word	0x080062ed
 8006284:	080064c3 	.word	0x080064c3
 8006288:	080064c3 	.word	0x080064c3
 800628c:	08006463 	.word	0x08006463
 8006290:	0800648f 	.word	0x0800648f
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	687a      	ldr	r2, [r7, #4]
 800629e:	7c12      	ldrb	r2, [r2, #16]
 80062a0:	f107 0108 	add.w	r1, r7, #8
 80062a4:	4610      	mov	r0, r2
 80062a6:	4798      	blx	r3
 80062a8:	60f8      	str	r0, [r7, #12]
      break;
 80062aa:	e112      	b.n	80064d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	7c1b      	ldrb	r3, [r3, #16]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d10d      	bne.n	80062d0 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062ba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062bc:	f107 0208 	add.w	r2, r7, #8
 80062c0:	4610      	mov	r0, r2
 80062c2:	4798      	blx	r3
 80062c4:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062c6:	68fb      	ldr	r3, [r7, #12]
 80062c8:	3301      	adds	r3, #1
 80062ca:	2202      	movs	r2, #2
 80062cc:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80062ce:	e100      	b.n	80064d2 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80062d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80062d8:	f107 0208 	add.w	r2, r7, #8
 80062dc:	4610      	mov	r0, r2
 80062de:	4798      	blx	r3
 80062e0:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80062e2:	68fb      	ldr	r3, [r7, #12]
 80062e4:	3301      	adds	r3, #1
 80062e6:	2202      	movs	r2, #2
 80062e8:	701a      	strb	r2, [r3, #0]
      break;
 80062ea:	e0f2      	b.n	80064d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80062ec:	683b      	ldr	r3, [r7, #0]
 80062ee:	885b      	ldrh	r3, [r3, #2]
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b05      	cmp	r3, #5
 80062f4:	f200 80ac 	bhi.w	8006450 <USBD_GetDescriptor+0x204>
 80062f8:	a201      	add	r2, pc, #4	; (adr r2, 8006300 <USBD_GetDescriptor+0xb4>)
 80062fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062fe:	bf00      	nop
 8006300:	08006319 	.word	0x08006319
 8006304:	0800634d 	.word	0x0800634d
 8006308:	08006381 	.word	0x08006381
 800630c:	080063b5 	.word	0x080063b5
 8006310:	080063e9 	.word	0x080063e9
 8006314:	0800641d 	.word	0x0800641d
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800631e:	685b      	ldr	r3, [r3, #4]
 8006320:	2b00      	cmp	r3, #0
 8006322:	d00b      	beq.n	800633c <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	687a      	ldr	r2, [r7, #4]
 800632e:	7c12      	ldrb	r2, [r2, #16]
 8006330:	f107 0108 	add.w	r1, r7, #8
 8006334:	4610      	mov	r0, r2
 8006336:	4798      	blx	r3
 8006338:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800633a:	e091      	b.n	8006460 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800633c:	6839      	ldr	r1, [r7, #0]
 800633e:	6878      	ldr	r0, [r7, #4]
 8006340:	f000 facb 	bl	80068da <USBD_CtlError>
            err++;
 8006344:	7afb      	ldrb	r3, [r7, #11]
 8006346:	3301      	adds	r3, #1
 8006348:	72fb      	strb	r3, [r7, #11]
          break;
 800634a:	e089      	b.n	8006460 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006352:	689b      	ldr	r3, [r3, #8]
 8006354:	2b00      	cmp	r3, #0
 8006356:	d00b      	beq.n	8006370 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800635e:	689b      	ldr	r3, [r3, #8]
 8006360:	687a      	ldr	r2, [r7, #4]
 8006362:	7c12      	ldrb	r2, [r2, #16]
 8006364:	f107 0108 	add.w	r1, r7, #8
 8006368:	4610      	mov	r0, r2
 800636a:	4798      	blx	r3
 800636c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800636e:	e077      	b.n	8006460 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006370:	6839      	ldr	r1, [r7, #0]
 8006372:	6878      	ldr	r0, [r7, #4]
 8006374:	f000 fab1 	bl	80068da <USBD_CtlError>
            err++;
 8006378:	7afb      	ldrb	r3, [r7, #11]
 800637a:	3301      	adds	r3, #1
 800637c:	72fb      	strb	r3, [r7, #11]
          break;
 800637e:	e06f      	b.n	8006460 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	2b00      	cmp	r3, #0
 800638a:	d00b      	beq.n	80063a4 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 800638c:	687b      	ldr	r3, [r7, #4]
 800638e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006392:	68db      	ldr	r3, [r3, #12]
 8006394:	687a      	ldr	r2, [r7, #4]
 8006396:	7c12      	ldrb	r2, [r2, #16]
 8006398:	f107 0108 	add.w	r1, r7, #8
 800639c:	4610      	mov	r0, r2
 800639e:	4798      	blx	r3
 80063a0:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063a2:	e05d      	b.n	8006460 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063a4:	6839      	ldr	r1, [r7, #0]
 80063a6:	6878      	ldr	r0, [r7, #4]
 80063a8:	f000 fa97 	bl	80068da <USBD_CtlError>
            err++;
 80063ac:	7afb      	ldrb	r3, [r7, #11]
 80063ae:	3301      	adds	r3, #1
 80063b0:	72fb      	strb	r3, [r7, #11]
          break;
 80063b2:	e055      	b.n	8006460 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ba:	691b      	ldr	r3, [r3, #16]
 80063bc:	2b00      	cmp	r3, #0
 80063be:	d00b      	beq.n	80063d8 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063c6:	691b      	ldr	r3, [r3, #16]
 80063c8:	687a      	ldr	r2, [r7, #4]
 80063ca:	7c12      	ldrb	r2, [r2, #16]
 80063cc:	f107 0108 	add.w	r1, r7, #8
 80063d0:	4610      	mov	r0, r2
 80063d2:	4798      	blx	r3
 80063d4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80063d6:	e043      	b.n	8006460 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80063d8:	6839      	ldr	r1, [r7, #0]
 80063da:	6878      	ldr	r0, [r7, #4]
 80063dc:	f000 fa7d 	bl	80068da <USBD_CtlError>
            err++;
 80063e0:	7afb      	ldrb	r3, [r7, #11]
 80063e2:	3301      	adds	r3, #1
 80063e4:	72fb      	strb	r3, [r7, #11]
          break;
 80063e6:	e03b      	b.n	8006460 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063ee:	695b      	ldr	r3, [r3, #20]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00b      	beq.n	800640c <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80063fa:	695b      	ldr	r3, [r3, #20]
 80063fc:	687a      	ldr	r2, [r7, #4]
 80063fe:	7c12      	ldrb	r2, [r2, #16]
 8006400:	f107 0108 	add.w	r1, r7, #8
 8006404:	4610      	mov	r0, r2
 8006406:	4798      	blx	r3
 8006408:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800640a:	e029      	b.n	8006460 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 800640c:	6839      	ldr	r1, [r7, #0]
 800640e:	6878      	ldr	r0, [r7, #4]
 8006410:	f000 fa63 	bl	80068da <USBD_CtlError>
            err++;
 8006414:	7afb      	ldrb	r3, [r7, #11]
 8006416:	3301      	adds	r3, #1
 8006418:	72fb      	strb	r3, [r7, #11]
          break;
 800641a:	e021      	b.n	8006460 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006422:	699b      	ldr	r3, [r3, #24]
 8006424:	2b00      	cmp	r3, #0
 8006426:	d00b      	beq.n	8006440 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800642e:	699b      	ldr	r3, [r3, #24]
 8006430:	687a      	ldr	r2, [r7, #4]
 8006432:	7c12      	ldrb	r2, [r2, #16]
 8006434:	f107 0108 	add.w	r1, r7, #8
 8006438:	4610      	mov	r0, r2
 800643a:	4798      	blx	r3
 800643c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800643e:	e00f      	b.n	8006460 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006440:	6839      	ldr	r1, [r7, #0]
 8006442:	6878      	ldr	r0, [r7, #4]
 8006444:	f000 fa49 	bl	80068da <USBD_CtlError>
            err++;
 8006448:	7afb      	ldrb	r3, [r7, #11]
 800644a:	3301      	adds	r3, #1
 800644c:	72fb      	strb	r3, [r7, #11]
          break;
 800644e:	e007      	b.n	8006460 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006450:	6839      	ldr	r1, [r7, #0]
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fa41 	bl	80068da <USBD_CtlError>
          err++;
 8006458:	7afb      	ldrb	r3, [r7, #11]
 800645a:	3301      	adds	r3, #1
 800645c:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 800645e:	bf00      	nop
      }
      break;
 8006460:	e037      	b.n	80064d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	7c1b      	ldrb	r3, [r3, #16]
 8006466:	2b00      	cmp	r3, #0
 8006468:	d109      	bne.n	800647e <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006470:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006472:	f107 0208 	add.w	r2, r7, #8
 8006476:	4610      	mov	r0, r2
 8006478:	4798      	blx	r3
 800647a:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 800647c:	e029      	b.n	80064d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 800647e:	6839      	ldr	r1, [r7, #0]
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f000 fa2a 	bl	80068da <USBD_CtlError>
        err++;
 8006486:	7afb      	ldrb	r3, [r7, #11]
 8006488:	3301      	adds	r3, #1
 800648a:	72fb      	strb	r3, [r7, #11]
      break;
 800648c:	e021      	b.n	80064d2 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	7c1b      	ldrb	r3, [r3, #16]
 8006492:	2b00      	cmp	r3, #0
 8006494:	d10d      	bne.n	80064b2 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800649c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800649e:	f107 0208 	add.w	r2, r7, #8
 80064a2:	4610      	mov	r0, r2
 80064a4:	4798      	blx	r3
 80064a6:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	3301      	adds	r3, #1
 80064ac:	2207      	movs	r2, #7
 80064ae:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80064b0:	e00f      	b.n	80064d2 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80064b2:	6839      	ldr	r1, [r7, #0]
 80064b4:	6878      	ldr	r0, [r7, #4]
 80064b6:	f000 fa10 	bl	80068da <USBD_CtlError>
        err++;
 80064ba:	7afb      	ldrb	r3, [r7, #11]
 80064bc:	3301      	adds	r3, #1
 80064be:	72fb      	strb	r3, [r7, #11]
      break;
 80064c0:	e007      	b.n	80064d2 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80064c2:	6839      	ldr	r1, [r7, #0]
 80064c4:	6878      	ldr	r0, [r7, #4]
 80064c6:	f000 fa08 	bl	80068da <USBD_CtlError>
      err++;
 80064ca:	7afb      	ldrb	r3, [r7, #11]
 80064cc:	3301      	adds	r3, #1
 80064ce:	72fb      	strb	r3, [r7, #11]
      break;
 80064d0:	bf00      	nop
  }

  if (err != 0U)
 80064d2:	7afb      	ldrb	r3, [r7, #11]
 80064d4:	2b00      	cmp	r3, #0
 80064d6:	d11e      	bne.n	8006516 <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80064d8:	683b      	ldr	r3, [r7, #0]
 80064da:	88db      	ldrh	r3, [r3, #6]
 80064dc:	2b00      	cmp	r3, #0
 80064de:	d016      	beq.n	800650e <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80064e0:	893b      	ldrh	r3, [r7, #8]
 80064e2:	2b00      	cmp	r3, #0
 80064e4:	d00e      	beq.n	8006504 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80064e6:	683b      	ldr	r3, [r7, #0]
 80064e8:	88da      	ldrh	r2, [r3, #6]
 80064ea:	893b      	ldrh	r3, [r7, #8]
 80064ec:	4293      	cmp	r3, r2
 80064ee:	bf28      	it	cs
 80064f0:	4613      	movcs	r3, r2
 80064f2:	b29b      	uxth	r3, r3
 80064f4:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80064f6:	893b      	ldrh	r3, [r7, #8]
 80064f8:	461a      	mov	r2, r3
 80064fa:	68f9      	ldr	r1, [r7, #12]
 80064fc:	6878      	ldr	r0, [r7, #4]
 80064fe:	f000 fa5d 	bl	80069bc <USBD_CtlSendData>
 8006502:	e009      	b.n	8006518 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006504:	6839      	ldr	r1, [r7, #0]
 8006506:	6878      	ldr	r0, [r7, #4]
 8006508:	f000 f9e7 	bl	80068da <USBD_CtlError>
 800650c:	e004      	b.n	8006518 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 800650e:	6878      	ldr	r0, [r7, #4]
 8006510:	f000 fa91 	bl	8006a36 <USBD_CtlSendStatus>
 8006514:	e000      	b.n	8006518 <USBD_GetDescriptor+0x2cc>
    return;
 8006516:	bf00      	nop
  }
}
 8006518:	3710      	adds	r7, #16
 800651a:	46bd      	mov	sp, r7
 800651c:	bd80      	pop	{r7, pc}
 800651e:	bf00      	nop

08006520 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
 8006528:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800652a:	683b      	ldr	r3, [r7, #0]
 800652c:	889b      	ldrh	r3, [r3, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d131      	bne.n	8006596 <USBD_SetAddress+0x76>
 8006532:	683b      	ldr	r3, [r7, #0]
 8006534:	88db      	ldrh	r3, [r3, #6]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d12d      	bne.n	8006596 <USBD_SetAddress+0x76>
 800653a:	683b      	ldr	r3, [r7, #0]
 800653c:	885b      	ldrh	r3, [r3, #2]
 800653e:	2b7f      	cmp	r3, #127	; 0x7f
 8006540:	d829      	bhi.n	8006596 <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006542:	683b      	ldr	r3, [r7, #0]
 8006544:	885b      	ldrh	r3, [r3, #2]
 8006546:	b2db      	uxtb	r3, r3
 8006548:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800654c:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006554:	b2db      	uxtb	r3, r3
 8006556:	2b03      	cmp	r3, #3
 8006558:	d104      	bne.n	8006564 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800655a:	6839      	ldr	r1, [r7, #0]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	f000 f9bc 	bl	80068da <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006562:	e01d      	b.n	80065a0 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	7bfa      	ldrb	r2, [r7, #15]
 8006568:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 800656c:	7bfb      	ldrb	r3, [r7, #15]
 800656e:	4619      	mov	r1, r3
 8006570:	6878      	ldr	r0, [r7, #4]
 8006572:	f000 fe0f 	bl	8007194 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006576:	6878      	ldr	r0, [r7, #4]
 8006578:	f000 fa5d 	bl	8006a36 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 800657c:	7bfb      	ldrb	r3, [r7, #15]
 800657e:	2b00      	cmp	r3, #0
 8006580:	d004      	beq.n	800658c <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2202      	movs	r2, #2
 8006586:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800658a:	e009      	b.n	80065a0 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	2201      	movs	r2, #1
 8006590:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006594:	e004      	b.n	80065a0 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006596:	6839      	ldr	r1, [r7, #0]
 8006598:	6878      	ldr	r0, [r7, #4]
 800659a:	f000 f99e 	bl	80068da <USBD_CtlError>
  }
}
 800659e:	bf00      	nop
 80065a0:	bf00      	nop
 80065a2:	3710      	adds	r7, #16
 80065a4:	46bd      	mov	sp, r7
 80065a6:	bd80      	pop	{r7, pc}

080065a8 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80065a8:	b580      	push	{r7, lr}
 80065aa:	b084      	sub	sp, #16
 80065ac:	af00      	add	r7, sp, #0
 80065ae:	6078      	str	r0, [r7, #4]
 80065b0:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80065b2:	2300      	movs	r3, #0
 80065b4:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	885b      	ldrh	r3, [r3, #2]
 80065ba:	b2da      	uxtb	r2, r3
 80065bc:	4b4e      	ldr	r3, [pc, #312]	; (80066f8 <USBD_SetConfig+0x150>)
 80065be:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80065c0:	4b4d      	ldr	r3, [pc, #308]	; (80066f8 <USBD_SetConfig+0x150>)
 80065c2:	781b      	ldrb	r3, [r3, #0]
 80065c4:	2b01      	cmp	r3, #1
 80065c6:	d905      	bls.n	80065d4 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80065c8:	6839      	ldr	r1, [r7, #0]
 80065ca:	6878      	ldr	r0, [r7, #4]
 80065cc:	f000 f985 	bl	80068da <USBD_CtlError>
    return USBD_FAIL;
 80065d0:	2303      	movs	r3, #3
 80065d2:	e08c      	b.n	80066ee <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80065d4:	687b      	ldr	r3, [r7, #4]
 80065d6:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065da:	b2db      	uxtb	r3, r3
 80065dc:	2b02      	cmp	r3, #2
 80065de:	d002      	beq.n	80065e6 <USBD_SetConfig+0x3e>
 80065e0:	2b03      	cmp	r3, #3
 80065e2:	d029      	beq.n	8006638 <USBD_SetConfig+0x90>
 80065e4:	e075      	b.n	80066d2 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80065e6:	4b44      	ldr	r3, [pc, #272]	; (80066f8 <USBD_SetConfig+0x150>)
 80065e8:	781b      	ldrb	r3, [r3, #0]
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d020      	beq.n	8006630 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80065ee:	4b42      	ldr	r3, [pc, #264]	; (80066f8 <USBD_SetConfig+0x150>)
 80065f0:	781b      	ldrb	r3, [r3, #0]
 80065f2:	461a      	mov	r2, r3
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80065f8:	4b3f      	ldr	r3, [pc, #252]	; (80066f8 <USBD_SetConfig+0x150>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	4619      	mov	r1, r3
 80065fe:	6878      	ldr	r0, [r7, #4]
 8006600:	f7fe ffe7 	bl	80055d2 <USBD_SetClassConfig>
 8006604:	4603      	mov	r3, r0
 8006606:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8006608:	7bfb      	ldrb	r3, [r7, #15]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d008      	beq.n	8006620 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 800660e:	6839      	ldr	r1, [r7, #0]
 8006610:	6878      	ldr	r0, [r7, #4]
 8006612:	f000 f962 	bl	80068da <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2202      	movs	r2, #2
 800661a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 800661e:	e065      	b.n	80066ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8006620:	6878      	ldr	r0, [r7, #4]
 8006622:	f000 fa08 	bl	8006a36 <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8006626:	687b      	ldr	r3, [r7, #4]
 8006628:	2203      	movs	r2, #3
 800662a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 800662e:	e05d      	b.n	80066ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8006630:	6878      	ldr	r0, [r7, #4]
 8006632:	f000 fa00 	bl	8006a36 <USBD_CtlSendStatus>
      break;
 8006636:	e059      	b.n	80066ec <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8006638:	4b2f      	ldr	r3, [pc, #188]	; (80066f8 <USBD_SetConfig+0x150>)
 800663a:	781b      	ldrb	r3, [r3, #0]
 800663c:	2b00      	cmp	r3, #0
 800663e:	d112      	bne.n	8006666 <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2202      	movs	r2, #2
 8006644:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 8006648:	4b2b      	ldr	r3, [pc, #172]	; (80066f8 <USBD_SetConfig+0x150>)
 800664a:	781b      	ldrb	r3, [r3, #0]
 800664c:	461a      	mov	r2, r3
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8006652:	4b29      	ldr	r3, [pc, #164]	; (80066f8 <USBD_SetConfig+0x150>)
 8006654:	781b      	ldrb	r3, [r3, #0]
 8006656:	4619      	mov	r1, r3
 8006658:	6878      	ldr	r0, [r7, #4]
 800665a:	f7fe ffd6 	bl	800560a <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 800665e:	6878      	ldr	r0, [r7, #4]
 8006660:	f000 f9e9 	bl	8006a36 <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8006664:	e042      	b.n	80066ec <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 8006666:	4b24      	ldr	r3, [pc, #144]	; (80066f8 <USBD_SetConfig+0x150>)
 8006668:	781b      	ldrb	r3, [r3, #0]
 800666a:	461a      	mov	r2, r3
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	685b      	ldr	r3, [r3, #4]
 8006670:	429a      	cmp	r2, r3
 8006672:	d02a      	beq.n	80066ca <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8006674:	687b      	ldr	r3, [r7, #4]
 8006676:	685b      	ldr	r3, [r3, #4]
 8006678:	b2db      	uxtb	r3, r3
 800667a:	4619      	mov	r1, r3
 800667c:	6878      	ldr	r0, [r7, #4]
 800667e:	f7fe ffc4 	bl	800560a <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8006682:	4b1d      	ldr	r3, [pc, #116]	; (80066f8 <USBD_SetConfig+0x150>)
 8006684:	781b      	ldrb	r3, [r3, #0]
 8006686:	461a      	mov	r2, r3
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 800668c:	4b1a      	ldr	r3, [pc, #104]	; (80066f8 <USBD_SetConfig+0x150>)
 800668e:	781b      	ldrb	r3, [r3, #0]
 8006690:	4619      	mov	r1, r3
 8006692:	6878      	ldr	r0, [r7, #4]
 8006694:	f7fe ff9d 	bl	80055d2 <USBD_SetClassConfig>
 8006698:	4603      	mov	r3, r0
 800669a:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	2b00      	cmp	r3, #0
 80066a0:	d00f      	beq.n	80066c2 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80066a2:	6839      	ldr	r1, [r7, #0]
 80066a4:	6878      	ldr	r0, [r7, #4]
 80066a6:	f000 f918 	bl	80068da <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	4619      	mov	r1, r3
 80066b2:	6878      	ldr	r0, [r7, #4]
 80066b4:	f7fe ffa9 	bl	800560a <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2202      	movs	r2, #2
 80066bc:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80066c0:	e014      	b.n	80066ec <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80066c2:	6878      	ldr	r0, [r7, #4]
 80066c4:	f000 f9b7 	bl	8006a36 <USBD_CtlSendStatus>
      break;
 80066c8:	e010      	b.n	80066ec <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80066ca:	6878      	ldr	r0, [r7, #4]
 80066cc:	f000 f9b3 	bl	8006a36 <USBD_CtlSendStatus>
      break;
 80066d0:	e00c      	b.n	80066ec <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80066d2:	6839      	ldr	r1, [r7, #0]
 80066d4:	6878      	ldr	r0, [r7, #4]
 80066d6:	f000 f900 	bl	80068da <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80066da:	4b07      	ldr	r3, [pc, #28]	; (80066f8 <USBD_SetConfig+0x150>)
 80066dc:	781b      	ldrb	r3, [r3, #0]
 80066de:	4619      	mov	r1, r3
 80066e0:	6878      	ldr	r0, [r7, #4]
 80066e2:	f7fe ff92 	bl	800560a <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80066e6:	2303      	movs	r3, #3
 80066e8:	73fb      	strb	r3, [r7, #15]
      break;
 80066ea:	bf00      	nop
  }

  return ret;
 80066ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80066ee:	4618      	mov	r0, r3
 80066f0:	3710      	adds	r7, #16
 80066f2:	46bd      	mov	sp, r7
 80066f4:	bd80      	pop	{r7, pc}
 80066f6:	bf00      	nop
 80066f8:	200001b8 	.word	0x200001b8

080066fc <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80066fc:	b580      	push	{r7, lr}
 80066fe:	b082      	sub	sp, #8
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8006706:	683b      	ldr	r3, [r7, #0]
 8006708:	88db      	ldrh	r3, [r3, #6]
 800670a:	2b01      	cmp	r3, #1
 800670c:	d004      	beq.n	8006718 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 800670e:	6839      	ldr	r1, [r7, #0]
 8006710:	6878      	ldr	r0, [r7, #4]
 8006712:	f000 f8e2 	bl	80068da <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8006716:	e023      	b.n	8006760 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800671e:	b2db      	uxtb	r3, r3
 8006720:	2b02      	cmp	r3, #2
 8006722:	dc02      	bgt.n	800672a <USBD_GetConfig+0x2e>
 8006724:	2b00      	cmp	r3, #0
 8006726:	dc03      	bgt.n	8006730 <USBD_GetConfig+0x34>
 8006728:	e015      	b.n	8006756 <USBD_GetConfig+0x5a>
 800672a:	2b03      	cmp	r3, #3
 800672c:	d00b      	beq.n	8006746 <USBD_GetConfig+0x4a>
 800672e:	e012      	b.n	8006756 <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2200      	movs	r2, #0
 8006734:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 8006736:	687b      	ldr	r3, [r7, #4]
 8006738:	3308      	adds	r3, #8
 800673a:	2201      	movs	r2, #1
 800673c:	4619      	mov	r1, r3
 800673e:	6878      	ldr	r0, [r7, #4]
 8006740:	f000 f93c 	bl	80069bc <USBD_CtlSendData>
        break;
 8006744:	e00c      	b.n	8006760 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	3304      	adds	r3, #4
 800674a:	2201      	movs	r2, #1
 800674c:	4619      	mov	r1, r3
 800674e:	6878      	ldr	r0, [r7, #4]
 8006750:	f000 f934 	bl	80069bc <USBD_CtlSendData>
        break;
 8006754:	e004      	b.n	8006760 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 8006756:	6839      	ldr	r1, [r7, #0]
 8006758:	6878      	ldr	r0, [r7, #4]
 800675a:	f000 f8be 	bl	80068da <USBD_CtlError>
        break;
 800675e:	bf00      	nop
}
 8006760:	bf00      	nop
 8006762:	3708      	adds	r7, #8
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}

08006768 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006768:	b580      	push	{r7, lr}
 800676a:	b082      	sub	sp, #8
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006778:	b2db      	uxtb	r3, r3
 800677a:	3b01      	subs	r3, #1
 800677c:	2b02      	cmp	r3, #2
 800677e:	d81e      	bhi.n	80067be <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8006780:	683b      	ldr	r3, [r7, #0]
 8006782:	88db      	ldrh	r3, [r3, #6]
 8006784:	2b02      	cmp	r3, #2
 8006786:	d004      	beq.n	8006792 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 8006788:	6839      	ldr	r1, [r7, #0]
 800678a:	6878      	ldr	r0, [r7, #4]
 800678c:	f000 f8a5 	bl	80068da <USBD_CtlError>
        break;
 8006790:	e01a      	b.n	80067c8 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	2201      	movs	r2, #1
 8006796:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d005      	beq.n	80067ae <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	f043 0202 	orr.w	r2, r3, #2
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	330c      	adds	r3, #12
 80067b2:	2202      	movs	r2, #2
 80067b4:	4619      	mov	r1, r3
 80067b6:	6878      	ldr	r0, [r7, #4]
 80067b8:	f000 f900 	bl	80069bc <USBD_CtlSendData>
      break;
 80067bc:	e004      	b.n	80067c8 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80067be:	6839      	ldr	r1, [r7, #0]
 80067c0:	6878      	ldr	r0, [r7, #4]
 80067c2:	f000 f88a 	bl	80068da <USBD_CtlError>
      break;
 80067c6:	bf00      	nop
  }
}
 80067c8:	bf00      	nop
 80067ca:	3708      	adds	r7, #8
 80067cc:	46bd      	mov	sp, r7
 80067ce:	bd80      	pop	{r7, pc}

080067d0 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b082      	sub	sp, #8
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	6078      	str	r0, [r7, #4]
 80067d8:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	885b      	ldrh	r3, [r3, #2]
 80067de:	2b01      	cmp	r3, #1
 80067e0:	d107      	bne.n	80067f2 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	2201      	movs	r2, #1
 80067e6:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80067ea:	6878      	ldr	r0, [r7, #4]
 80067ec:	f000 f923 	bl	8006a36 <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80067f0:	e013      	b.n	800681a <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80067f2:	683b      	ldr	r3, [r7, #0]
 80067f4:	885b      	ldrh	r3, [r3, #2]
 80067f6:	2b02      	cmp	r3, #2
 80067f8:	d10b      	bne.n	8006812 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	889b      	ldrh	r3, [r3, #4]
 80067fe:	0a1b      	lsrs	r3, r3, #8
 8006800:	b29b      	uxth	r3, r3
 8006802:	b2da      	uxtb	r2, r3
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 800680a:	6878      	ldr	r0, [r7, #4]
 800680c:	f000 f913 	bl	8006a36 <USBD_CtlSendStatus>
}
 8006810:	e003      	b.n	800681a <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8006812:	6839      	ldr	r1, [r7, #0]
 8006814:	6878      	ldr	r0, [r7, #4]
 8006816:	f000 f860 	bl	80068da <USBD_CtlError>
}
 800681a:	bf00      	nop
 800681c:	3708      	adds	r7, #8
 800681e:	46bd      	mov	sp, r7
 8006820:	bd80      	pop	{r7, pc}

08006822 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006822:	b580      	push	{r7, lr}
 8006824:	b082      	sub	sp, #8
 8006826:	af00      	add	r7, sp, #0
 8006828:	6078      	str	r0, [r7, #4]
 800682a:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006832:	b2db      	uxtb	r3, r3
 8006834:	3b01      	subs	r3, #1
 8006836:	2b02      	cmp	r3, #2
 8006838:	d80b      	bhi.n	8006852 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	885b      	ldrh	r3, [r3, #2]
 800683e:	2b01      	cmp	r3, #1
 8006840:	d10c      	bne.n	800685c <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	2200      	movs	r2, #0
 8006846:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800684a:	6878      	ldr	r0, [r7, #4]
 800684c:	f000 f8f3 	bl	8006a36 <USBD_CtlSendStatus>
      }
      break;
 8006850:	e004      	b.n	800685c <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8006852:	6839      	ldr	r1, [r7, #0]
 8006854:	6878      	ldr	r0, [r7, #4]
 8006856:	f000 f840 	bl	80068da <USBD_CtlError>
      break;
 800685a:	e000      	b.n	800685e <USBD_ClrFeature+0x3c>
      break;
 800685c:	bf00      	nop
  }
}
 800685e:	bf00      	nop
 8006860:	3708      	adds	r7, #8
 8006862:	46bd      	mov	sp, r7
 8006864:	bd80      	pop	{r7, pc}

08006866 <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8006866:	b580      	push	{r7, lr}
 8006868:	b084      	sub	sp, #16
 800686a:	af00      	add	r7, sp, #0
 800686c:	6078      	str	r0, [r7, #4]
 800686e:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8006870:	683b      	ldr	r3, [r7, #0]
 8006872:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	781a      	ldrb	r2, [r3, #0]
 8006878:	687b      	ldr	r3, [r7, #4]
 800687a:	701a      	strb	r2, [r3, #0]

  pbuff++;
 800687c:	68fb      	ldr	r3, [r7, #12]
 800687e:	3301      	adds	r3, #1
 8006880:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8006882:	68fb      	ldr	r3, [r7, #12]
 8006884:	781a      	ldrb	r2, [r3, #0]
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800688a:	68fb      	ldr	r3, [r7, #12]
 800688c:	3301      	adds	r3, #1
 800688e:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8006890:	68f8      	ldr	r0, [r7, #12]
 8006892:	f7ff fa41 	bl	8005d18 <SWAPBYTE>
 8006896:	4603      	mov	r3, r0
 8006898:	461a      	mov	r2, r3
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	805a      	strh	r2, [r3, #2]

  pbuff++;
 800689e:	68fb      	ldr	r3, [r7, #12]
 80068a0:	3301      	adds	r3, #1
 80068a2:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068a4:	68fb      	ldr	r3, [r7, #12]
 80068a6:	3301      	adds	r3, #1
 80068a8:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 80068aa:	68f8      	ldr	r0, [r7, #12]
 80068ac:	f7ff fa34 	bl	8005d18 <SWAPBYTE>
 80068b0:	4603      	mov	r3, r0
 80068b2:	461a      	mov	r2, r3
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80068b8:	68fb      	ldr	r3, [r7, #12]
 80068ba:	3301      	adds	r3, #1
 80068bc:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80068be:	68fb      	ldr	r3, [r7, #12]
 80068c0:	3301      	adds	r3, #1
 80068c2:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f7ff fa27 	bl	8005d18 <SWAPBYTE>
 80068ca:	4603      	mov	r3, r0
 80068cc:	461a      	mov	r2, r3
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	80da      	strh	r2, [r3, #6]
}
 80068d2:	bf00      	nop
 80068d4:	3710      	adds	r7, #16
 80068d6:	46bd      	mov	sp, r7
 80068d8:	bd80      	pop	{r7, pc}

080068da <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80068da:	b580      	push	{r7, lr}
 80068dc:	b082      	sub	sp, #8
 80068de:	af00      	add	r7, sp, #0
 80068e0:	6078      	str	r0, [r7, #4]
 80068e2:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80068e4:	2180      	movs	r1, #128	; 0x80
 80068e6:	6878      	ldr	r0, [r7, #4]
 80068e8:	f000 fbea 	bl	80070c0 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80068ec:	2100      	movs	r1, #0
 80068ee:	6878      	ldr	r0, [r7, #4]
 80068f0:	f000 fbe6 	bl	80070c0 <USBD_LL_StallEP>
}
 80068f4:	bf00      	nop
 80068f6:	3708      	adds	r7, #8
 80068f8:	46bd      	mov	sp, r7
 80068fa:	bd80      	pop	{r7, pc}

080068fc <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b086      	sub	sp, #24
 8006900:	af00      	add	r7, sp, #0
 8006902:	60f8      	str	r0, [r7, #12]
 8006904:	60b9      	str	r1, [r7, #8]
 8006906:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8006908:	2300      	movs	r3, #0
 800690a:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 800690c:	68fb      	ldr	r3, [r7, #12]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d036      	beq.n	8006980 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8006912:	68fb      	ldr	r3, [r7, #12]
 8006914:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 8006916:	6938      	ldr	r0, [r7, #16]
 8006918:	f000 f836 	bl	8006988 <USBD_GetLen>
 800691c:	4603      	mov	r3, r0
 800691e:	3301      	adds	r3, #1
 8006920:	b29b      	uxth	r3, r3
 8006922:	005b      	lsls	r3, r3, #1
 8006924:	b29a      	uxth	r2, r3
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800692a:	7dfb      	ldrb	r3, [r7, #23]
 800692c:	68ba      	ldr	r2, [r7, #8]
 800692e:	4413      	add	r3, r2
 8006930:	687a      	ldr	r2, [r7, #4]
 8006932:	7812      	ldrb	r2, [r2, #0]
 8006934:	701a      	strb	r2, [r3, #0]
  idx++;
 8006936:	7dfb      	ldrb	r3, [r7, #23]
 8006938:	3301      	adds	r3, #1
 800693a:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 800693c:	7dfb      	ldrb	r3, [r7, #23]
 800693e:	68ba      	ldr	r2, [r7, #8]
 8006940:	4413      	add	r3, r2
 8006942:	2203      	movs	r2, #3
 8006944:	701a      	strb	r2, [r3, #0]
  idx++;
 8006946:	7dfb      	ldrb	r3, [r7, #23]
 8006948:	3301      	adds	r3, #1
 800694a:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 800694c:	e013      	b.n	8006976 <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 800694e:	7dfb      	ldrb	r3, [r7, #23]
 8006950:	68ba      	ldr	r2, [r7, #8]
 8006952:	4413      	add	r3, r2
 8006954:	693a      	ldr	r2, [r7, #16]
 8006956:	7812      	ldrb	r2, [r2, #0]
 8006958:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800695a:	693b      	ldr	r3, [r7, #16]
 800695c:	3301      	adds	r3, #1
 800695e:	613b      	str	r3, [r7, #16]
    idx++;
 8006960:	7dfb      	ldrb	r3, [r7, #23]
 8006962:	3301      	adds	r3, #1
 8006964:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 8006966:	7dfb      	ldrb	r3, [r7, #23]
 8006968:	68ba      	ldr	r2, [r7, #8]
 800696a:	4413      	add	r3, r2
 800696c:	2200      	movs	r2, #0
 800696e:	701a      	strb	r2, [r3, #0]
    idx++;
 8006970:	7dfb      	ldrb	r3, [r7, #23]
 8006972:	3301      	adds	r3, #1
 8006974:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 8006976:	693b      	ldr	r3, [r7, #16]
 8006978:	781b      	ldrb	r3, [r3, #0]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d1e7      	bne.n	800694e <USBD_GetString+0x52>
 800697e:	e000      	b.n	8006982 <USBD_GetString+0x86>
    return;
 8006980:	bf00      	nop
  }
}
 8006982:	3718      	adds	r7, #24
 8006984:	46bd      	mov	sp, r7
 8006986:	bd80      	pop	{r7, pc}

08006988 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8006988:	b480      	push	{r7}
 800698a:	b085      	sub	sp, #20
 800698c:	af00      	add	r7, sp, #0
 800698e:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8006990:	2300      	movs	r3, #0
 8006992:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 8006998:	e005      	b.n	80069a6 <USBD_GetLen+0x1e>
  {
    len++;
 800699a:	7bfb      	ldrb	r3, [r7, #15]
 800699c:	3301      	adds	r3, #1
 800699e:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80069a0:	68bb      	ldr	r3, [r7, #8]
 80069a2:	3301      	adds	r3, #1
 80069a4:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	781b      	ldrb	r3, [r3, #0]
 80069aa:	2b00      	cmp	r3, #0
 80069ac:	d1f5      	bne.n	800699a <USBD_GetLen+0x12>
  }

  return len;
 80069ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80069b0:	4618      	mov	r0, r3
 80069b2:	3714      	adds	r7, #20
 80069b4:	46bd      	mov	sp, r7
 80069b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ba:	4770      	bx	lr

080069bc <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80069bc:	b580      	push	{r7, lr}
 80069be:	b084      	sub	sp, #16
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	60f8      	str	r0, [r7, #12]
 80069c4:	60b9      	str	r1, [r7, #8]
 80069c6:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80069c8:	68fb      	ldr	r3, [r7, #12]
 80069ca:	2202      	movs	r2, #2
 80069cc:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	687a      	ldr	r2, [r7, #4]
 80069d4:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80069d6:	68fb      	ldr	r3, [r7, #12]
 80069d8:	687a      	ldr	r2, [r7, #4]
 80069da:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	68ba      	ldr	r2, [r7, #8]
 80069e0:	2100      	movs	r1, #0
 80069e2:	68f8      	ldr	r0, [r7, #12]
 80069e4:	f000 fbf5 	bl	80071d2 <USBD_LL_Transmit>

  return USBD_OK;
 80069e8:	2300      	movs	r3, #0
}
 80069ea:	4618      	mov	r0, r3
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}

080069f2 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80069f2:	b580      	push	{r7, lr}
 80069f4:	b084      	sub	sp, #16
 80069f6:	af00      	add	r7, sp, #0
 80069f8:	60f8      	str	r0, [r7, #12]
 80069fa:	60b9      	str	r1, [r7, #8]
 80069fc:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	68ba      	ldr	r2, [r7, #8]
 8006a02:	2100      	movs	r1, #0
 8006a04:	68f8      	ldr	r0, [r7, #12]
 8006a06:	f000 fbe4 	bl	80071d2 <USBD_LL_Transmit>

  return USBD_OK;
 8006a0a:	2300      	movs	r3, #0
}
 8006a0c:	4618      	mov	r0, r3
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b084      	sub	sp, #16
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	60f8      	str	r0, [r7, #12]
 8006a1c:	60b9      	str	r1, [r7, #8]
 8006a1e:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	68ba      	ldr	r2, [r7, #8]
 8006a24:	2100      	movs	r1, #0
 8006a26:	68f8      	ldr	r0, [r7, #12]
 8006a28:	f000 fbf4 	bl	8007214 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a2c:	2300      	movs	r3, #0
}
 8006a2e:	4618      	mov	r0, r3
 8006a30:	3710      	adds	r7, #16
 8006a32:	46bd      	mov	sp, r7
 8006a34:	bd80      	pop	{r7, pc}

08006a36 <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8006a36:	b580      	push	{r7, lr}
 8006a38:	b082      	sub	sp, #8
 8006a3a:	af00      	add	r7, sp, #0
 8006a3c:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8006a3e:	687b      	ldr	r3, [r7, #4]
 8006a40:	2204      	movs	r2, #4
 8006a42:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8006a46:	2300      	movs	r3, #0
 8006a48:	2200      	movs	r2, #0
 8006a4a:	2100      	movs	r1, #0
 8006a4c:	6878      	ldr	r0, [r7, #4]
 8006a4e:	f000 fbc0 	bl	80071d2 <USBD_LL_Transmit>

  return USBD_OK;
 8006a52:	2300      	movs	r3, #0
}
 8006a54:	4618      	mov	r0, r3
 8006a56:	3708      	adds	r7, #8
 8006a58:	46bd      	mov	sp, r7
 8006a5a:	bd80      	pop	{r7, pc}

08006a5c <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b082      	sub	sp, #8
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	2205      	movs	r2, #5
 8006a68:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	2200      	movs	r2, #0
 8006a70:	2100      	movs	r1, #0
 8006a72:	6878      	ldr	r0, [r7, #4]
 8006a74:	f000 fbce 	bl	8007214 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8006a78:	2300      	movs	r3, #0
}
 8006a7a:	4618      	mov	r0, r3
 8006a7c:	3708      	adds	r7, #8
 8006a7e:	46bd      	mov	sp, r7
 8006a80:	bd80      	pop	{r7, pc}
	...

08006a84 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8006a84:	b580      	push	{r7, lr}
 8006a86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 8006a88:	2200      	movs	r2, #0
 8006a8a:	490e      	ldr	r1, [pc, #56]	; (8006ac4 <MX_USB_DEVICE_Init+0x40>)
 8006a8c:	480e      	ldr	r0, [pc, #56]	; (8006ac8 <MX_USB_DEVICE_Init+0x44>)
 8006a8e:	f7fe fd23 	bl	80054d8 <USBD_Init>
 8006a92:	4603      	mov	r3, r0
 8006a94:	2b00      	cmp	r3, #0
 8006a96:	d001      	beq.n	8006a9c <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 8006a98:	f7f9 ffbc 	bl	8000a14 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8006a9c:	490b      	ldr	r1, [pc, #44]	; (8006acc <MX_USB_DEVICE_Init+0x48>)
 8006a9e:	480a      	ldr	r0, [pc, #40]	; (8006ac8 <MX_USB_DEVICE_Init+0x44>)
 8006aa0:	f7fe fd4a 	bl	8005538 <USBD_RegisterClass>
 8006aa4:	4603      	mov	r3, r0
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d001      	beq.n	8006aae <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8006aaa:	f7f9 ffb3 	bl	8000a14 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8006aae:	4806      	ldr	r0, [pc, #24]	; (8006ac8 <MX_USB_DEVICE_Init+0x44>)
 8006ab0:	f7fe fd78 	bl	80055a4 <USBD_Start>
 8006ab4:	4603      	mov	r3, r0
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d001      	beq.n	8006abe <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8006aba:	f7f9 ffab 	bl	8000a14 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8006abe:	bf00      	nop
 8006ac0:	bd80      	pop	{r7, pc}
 8006ac2:	bf00      	nop
 8006ac4:	200000e8 	.word	0x200000e8
 8006ac8:	200001bc 	.word	0x200001bc
 8006acc:	20000034 	.word	0x20000034

08006ad0 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ad0:	b480      	push	{r7}
 8006ad2:	b083      	sub	sp, #12
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	4603      	mov	r3, r0
 8006ad8:	6039      	str	r1, [r7, #0]
 8006ada:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8006adc:	683b      	ldr	r3, [r7, #0]
 8006ade:	2212      	movs	r2, #18
 8006ae0:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8006ae2:	4b03      	ldr	r3, [pc, #12]	; (8006af0 <USBD_FS_DeviceDescriptor+0x20>)
}
 8006ae4:	4618      	mov	r0, r3
 8006ae6:	370c      	adds	r7, #12
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006aee:	4770      	bx	lr
 8006af0:	20000104 	.word	0x20000104

08006af4 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006af4:	b480      	push	{r7}
 8006af6:	b083      	sub	sp, #12
 8006af8:	af00      	add	r7, sp, #0
 8006afa:	4603      	mov	r3, r0
 8006afc:	6039      	str	r1, [r7, #0]
 8006afe:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8006b00:	683b      	ldr	r3, [r7, #0]
 8006b02:	2204      	movs	r2, #4
 8006b04:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8006b06:	4b03      	ldr	r3, [pc, #12]	; (8006b14 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	370c      	adds	r7, #12
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b12:	4770      	bx	lr
 8006b14:	20000118 	.word	0x20000118

08006b18 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b18:	b580      	push	{r7, lr}
 8006b1a:	b082      	sub	sp, #8
 8006b1c:	af00      	add	r7, sp, #0
 8006b1e:	4603      	mov	r3, r0
 8006b20:	6039      	str	r1, [r7, #0]
 8006b22:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006b24:	79fb      	ldrb	r3, [r7, #7]
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d105      	bne.n	8006b36 <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b2a:	683a      	ldr	r2, [r7, #0]
 8006b2c:	4907      	ldr	r1, [pc, #28]	; (8006b4c <USBD_FS_ProductStrDescriptor+0x34>)
 8006b2e:	4808      	ldr	r0, [pc, #32]	; (8006b50 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b30:	f7ff fee4 	bl	80068fc <USBD_GetString>
 8006b34:	e004      	b.n	8006b40 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8006b36:	683a      	ldr	r2, [r7, #0]
 8006b38:	4904      	ldr	r1, [pc, #16]	; (8006b4c <USBD_FS_ProductStrDescriptor+0x34>)
 8006b3a:	4805      	ldr	r0, [pc, #20]	; (8006b50 <USBD_FS_ProductStrDescriptor+0x38>)
 8006b3c:	f7ff fede 	bl	80068fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006b40:	4b02      	ldr	r3, [pc, #8]	; (8006b4c <USBD_FS_ProductStrDescriptor+0x34>)
}
 8006b42:	4618      	mov	r0, r3
 8006b44:	3708      	adds	r7, #8
 8006b46:	46bd      	mov	sp, r7
 8006b48:	bd80      	pop	{r7, pc}
 8006b4a:	bf00      	nop
 8006b4c:	20000498 	.word	0x20000498
 8006b50:	08007350 	.word	0x08007350

08006b54 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b082      	sub	sp, #8
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	4603      	mov	r3, r0
 8006b5c:	6039      	str	r1, [r7, #0]
 8006b5e:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8006b60:	683a      	ldr	r2, [r7, #0]
 8006b62:	4904      	ldr	r1, [pc, #16]	; (8006b74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8006b64:	4804      	ldr	r0, [pc, #16]	; (8006b78 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 8006b66:	f7ff fec9 	bl	80068fc <USBD_GetString>
  return USBD_StrDesc;
 8006b6a:	4b02      	ldr	r3, [pc, #8]	; (8006b74 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8006b6c:	4618      	mov	r0, r3
 8006b6e:	3708      	adds	r7, #8
 8006b70:	46bd      	mov	sp, r7
 8006b72:	bd80      	pop	{r7, pc}
 8006b74:	20000498 	.word	0x20000498
 8006b78:	08007368 	.word	0x08007368

08006b7c <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006b7c:	b580      	push	{r7, lr}
 8006b7e:	b082      	sub	sp, #8
 8006b80:	af00      	add	r7, sp, #0
 8006b82:	4603      	mov	r3, r0
 8006b84:	6039      	str	r1, [r7, #0]
 8006b86:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 8006b88:	683b      	ldr	r3, [r7, #0]
 8006b8a:	221a      	movs	r2, #26
 8006b8c:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8006b8e:	f000 f843 	bl	8006c18 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8006b92:	4b02      	ldr	r3, [pc, #8]	; (8006b9c <USBD_FS_SerialStrDescriptor+0x20>)
}
 8006b94:	4618      	mov	r0, r3
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	2000011c 	.word	0x2000011c

08006ba0 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006ba0:	b580      	push	{r7, lr}
 8006ba2:	b082      	sub	sp, #8
 8006ba4:	af00      	add	r7, sp, #0
 8006ba6:	4603      	mov	r3, r0
 8006ba8:	6039      	str	r1, [r7, #0]
 8006baa:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8006bac:	79fb      	ldrb	r3, [r7, #7]
 8006bae:	2b00      	cmp	r3, #0
 8006bb0:	d105      	bne.n	8006bbe <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006bb2:	683a      	ldr	r2, [r7, #0]
 8006bb4:	4907      	ldr	r1, [pc, #28]	; (8006bd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006bb6:	4808      	ldr	r0, [pc, #32]	; (8006bd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006bb8:	f7ff fea0 	bl	80068fc <USBD_GetString>
 8006bbc:	e004      	b.n	8006bc8 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8006bbe:	683a      	ldr	r2, [r7, #0]
 8006bc0:	4904      	ldr	r1, [pc, #16]	; (8006bd4 <USBD_FS_ConfigStrDescriptor+0x34>)
 8006bc2:	4805      	ldr	r0, [pc, #20]	; (8006bd8 <USBD_FS_ConfigStrDescriptor+0x38>)
 8006bc4:	f7ff fe9a 	bl	80068fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006bc8:	4b02      	ldr	r3, [pc, #8]	; (8006bd4 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3708      	adds	r7, #8
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	20000498 	.word	0x20000498
 8006bd8:	0800737c 	.word	0x0800737c

08006bdc <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	4603      	mov	r3, r0
 8006be4:	6039      	str	r1, [r7, #0]
 8006be6:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8006be8:	79fb      	ldrb	r3, [r7, #7]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d105      	bne.n	8006bfa <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	4907      	ldr	r1, [pc, #28]	; (8006c10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006bf2:	4808      	ldr	r0, [pc, #32]	; (8006c14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006bf4:	f7ff fe82 	bl	80068fc <USBD_GetString>
 8006bf8:	e004      	b.n	8006c04 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8006bfa:	683a      	ldr	r2, [r7, #0]
 8006bfc:	4904      	ldr	r1, [pc, #16]	; (8006c10 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8006bfe:	4805      	ldr	r0, [pc, #20]	; (8006c14 <USBD_FS_InterfaceStrDescriptor+0x38>)
 8006c00:	f7ff fe7c 	bl	80068fc <USBD_GetString>
  }
  return USBD_StrDesc;
 8006c04:	4b02      	ldr	r3, [pc, #8]	; (8006c10 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 8006c06:	4618      	mov	r0, r3
 8006c08:	3708      	adds	r7, #8
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	bd80      	pop	{r7, pc}
 8006c0e:	bf00      	nop
 8006c10:	20000498 	.word	0x20000498
 8006c14:	08007388 	.word	0x08007388

08006c18 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8006c18:	b580      	push	{r7, lr}
 8006c1a:	b084      	sub	sp, #16
 8006c1c:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8006c1e:	4b0f      	ldr	r3, [pc, #60]	; (8006c5c <Get_SerialNum+0x44>)
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8006c24:	4b0e      	ldr	r3, [pc, #56]	; (8006c60 <Get_SerialNum+0x48>)
 8006c26:	681b      	ldr	r3, [r3, #0]
 8006c28:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8006c2a:	4b0e      	ldr	r3, [pc, #56]	; (8006c64 <Get_SerialNum+0x4c>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8006c30:	68fa      	ldr	r2, [r7, #12]
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	4413      	add	r3, r2
 8006c36:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d009      	beq.n	8006c52 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8006c3e:	2208      	movs	r2, #8
 8006c40:	4909      	ldr	r1, [pc, #36]	; (8006c68 <Get_SerialNum+0x50>)
 8006c42:	68f8      	ldr	r0, [r7, #12]
 8006c44:	f000 f814 	bl	8006c70 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8006c48:	2204      	movs	r2, #4
 8006c4a:	4908      	ldr	r1, [pc, #32]	; (8006c6c <Get_SerialNum+0x54>)
 8006c4c:	68b8      	ldr	r0, [r7, #8]
 8006c4e:	f000 f80f 	bl	8006c70 <IntToUnicode>
  }
}
 8006c52:	bf00      	nop
 8006c54:	3710      	adds	r7, #16
 8006c56:	46bd      	mov	sp, r7
 8006c58:	bd80      	pop	{r7, pc}
 8006c5a:	bf00      	nop
 8006c5c:	1fff7a10 	.word	0x1fff7a10
 8006c60:	1fff7a14 	.word	0x1fff7a14
 8006c64:	1fff7a18 	.word	0x1fff7a18
 8006c68:	2000011e 	.word	0x2000011e
 8006c6c:	2000012e 	.word	0x2000012e

08006c70 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8006c70:	b480      	push	{r7}
 8006c72:	b087      	sub	sp, #28
 8006c74:	af00      	add	r7, sp, #0
 8006c76:	60f8      	str	r0, [r7, #12]
 8006c78:	60b9      	str	r1, [r7, #8]
 8006c7a:	4613      	mov	r3, r2
 8006c7c:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8006c7e:	2300      	movs	r3, #0
 8006c80:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8006c82:	2300      	movs	r3, #0
 8006c84:	75fb      	strb	r3, [r7, #23]
 8006c86:	e027      	b.n	8006cd8 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8006c88:	68fb      	ldr	r3, [r7, #12]
 8006c8a:	0f1b      	lsrs	r3, r3, #28
 8006c8c:	2b09      	cmp	r3, #9
 8006c8e:	d80b      	bhi.n	8006ca8 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	0f1b      	lsrs	r3, r3, #28
 8006c94:	b2da      	uxtb	r2, r3
 8006c96:	7dfb      	ldrb	r3, [r7, #23]
 8006c98:	005b      	lsls	r3, r3, #1
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	68bb      	ldr	r3, [r7, #8]
 8006c9e:	440b      	add	r3, r1
 8006ca0:	3230      	adds	r2, #48	; 0x30
 8006ca2:	b2d2      	uxtb	r2, r2
 8006ca4:	701a      	strb	r2, [r3, #0]
 8006ca6:	e00a      	b.n	8006cbe <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8006ca8:	68fb      	ldr	r3, [r7, #12]
 8006caa:	0f1b      	lsrs	r3, r3, #28
 8006cac:	b2da      	uxtb	r2, r3
 8006cae:	7dfb      	ldrb	r3, [r7, #23]
 8006cb0:	005b      	lsls	r3, r3, #1
 8006cb2:	4619      	mov	r1, r3
 8006cb4:	68bb      	ldr	r3, [r7, #8]
 8006cb6:	440b      	add	r3, r1
 8006cb8:	3237      	adds	r2, #55	; 0x37
 8006cba:	b2d2      	uxtb	r2, r2
 8006cbc:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8006cbe:	68fb      	ldr	r3, [r7, #12]
 8006cc0:	011b      	lsls	r3, r3, #4
 8006cc2:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8006cc4:	7dfb      	ldrb	r3, [r7, #23]
 8006cc6:	005b      	lsls	r3, r3, #1
 8006cc8:	3301      	adds	r3, #1
 8006cca:	68ba      	ldr	r2, [r7, #8]
 8006ccc:	4413      	add	r3, r2
 8006cce:	2200      	movs	r2, #0
 8006cd0:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8006cd2:	7dfb      	ldrb	r3, [r7, #23]
 8006cd4:	3301      	adds	r3, #1
 8006cd6:	75fb      	strb	r3, [r7, #23]
 8006cd8:	7dfa      	ldrb	r2, [r7, #23]
 8006cda:	79fb      	ldrb	r3, [r7, #7]
 8006cdc:	429a      	cmp	r2, r3
 8006cde:	d3d3      	bcc.n	8006c88 <IntToUnicode+0x18>
  }
}
 8006ce0:	bf00      	nop
 8006ce2:	bf00      	nop
 8006ce4:	371c      	adds	r7, #28
 8006ce6:	46bd      	mov	sp, r7
 8006ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cec:	4770      	bx	lr
	...

08006cf0 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8006cf0:	b580      	push	{r7, lr}
 8006cf2:	b08a      	sub	sp, #40	; 0x28
 8006cf4:	af00      	add	r7, sp, #0
 8006cf6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006cf8:	f107 0314 	add.w	r3, r7, #20
 8006cfc:	2200      	movs	r2, #0
 8006cfe:	601a      	str	r2, [r3, #0]
 8006d00:	605a      	str	r2, [r3, #4]
 8006d02:	609a      	str	r2, [r3, #8]
 8006d04:	60da      	str	r2, [r3, #12]
 8006d06:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8006d10:	d13a      	bne.n	8006d88 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006d12:	2300      	movs	r3, #0
 8006d14:	613b      	str	r3, [r7, #16]
 8006d16:	4b1e      	ldr	r3, [pc, #120]	; (8006d90 <HAL_PCD_MspInit+0xa0>)
 8006d18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d1a:	4a1d      	ldr	r2, [pc, #116]	; (8006d90 <HAL_PCD_MspInit+0xa0>)
 8006d1c:	f043 0301 	orr.w	r3, r3, #1
 8006d20:	6313      	str	r3, [r2, #48]	; 0x30
 8006d22:	4b1b      	ldr	r3, [pc, #108]	; (8006d90 <HAL_PCD_MspInit+0xa0>)
 8006d24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006d26:	f003 0301 	and.w	r3, r3, #1
 8006d2a:	613b      	str	r3, [r7, #16]
 8006d2c:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8006d2e:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8006d32:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006d34:	2302      	movs	r3, #2
 8006d36:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d3c:	2303      	movs	r3, #3
 8006d3e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8006d40:	230a      	movs	r3, #10
 8006d42:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006d44:	f107 0314 	add.w	r3, r7, #20
 8006d48:	4619      	mov	r1, r3
 8006d4a:	4812      	ldr	r0, [pc, #72]	; (8006d94 <HAL_PCD_MspInit+0xa4>)
 8006d4c:	f7fa fcea 	bl	8001724 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8006d50:	4b0f      	ldr	r3, [pc, #60]	; (8006d90 <HAL_PCD_MspInit+0xa0>)
 8006d52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006d54:	4a0e      	ldr	r2, [pc, #56]	; (8006d90 <HAL_PCD_MspInit+0xa0>)
 8006d56:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006d5a:	6353      	str	r3, [r2, #52]	; 0x34
 8006d5c:	2300      	movs	r3, #0
 8006d5e:	60fb      	str	r3, [r7, #12]
 8006d60:	4b0b      	ldr	r3, [pc, #44]	; (8006d90 <HAL_PCD_MspInit+0xa0>)
 8006d62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d64:	4a0a      	ldr	r2, [pc, #40]	; (8006d90 <HAL_PCD_MspInit+0xa0>)
 8006d66:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006d6a:	6453      	str	r3, [r2, #68]	; 0x44
 8006d6c:	4b08      	ldr	r3, [pc, #32]	; (8006d90 <HAL_PCD_MspInit+0xa0>)
 8006d6e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006d70:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006d74:	60fb      	str	r3, [r7, #12]
 8006d76:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8006d78:	2200      	movs	r2, #0
 8006d7a:	2100      	movs	r1, #0
 8006d7c:	2043      	movs	r0, #67	; 0x43
 8006d7e:	f7fa fc9a 	bl	80016b6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8006d82:	2043      	movs	r0, #67	; 0x43
 8006d84:	f7fa fcb3 	bl	80016ee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8006d88:	bf00      	nop
 8006d8a:	3728      	adds	r7, #40	; 0x28
 8006d8c:	46bd      	mov	sp, r7
 8006d8e:	bd80      	pop	{r7, pc}
 8006d90:	40023800 	.word	0x40023800
 8006d94:	40020000 	.word	0x40020000

08006d98 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
 8006d9e:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8006da6:	687b      	ldr	r3, [r7, #4]
 8006da8:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8006dac:	4619      	mov	r1, r3
 8006dae:	4610      	mov	r0, r2
 8006db0:	f7fe fc45 	bl	800563e <USBD_LL_SetupStage>
}
 8006db4:	bf00      	nop
 8006db6:	3708      	adds	r7, #8
 8006db8:	46bd      	mov	sp, r7
 8006dba:	bd80      	pop	{r7, pc}

08006dbc <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006dbc:	b580      	push	{r7, lr}
 8006dbe:	b082      	sub	sp, #8
 8006dc0:	af00      	add	r7, sp, #0
 8006dc2:	6078      	str	r0, [r7, #4]
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8006dc8:	687b      	ldr	r3, [r7, #4]
 8006dca:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006dce:	78fa      	ldrb	r2, [r7, #3]
 8006dd0:	6879      	ldr	r1, [r7, #4]
 8006dd2:	4613      	mov	r3, r2
 8006dd4:	00db      	lsls	r3, r3, #3
 8006dd6:	4413      	add	r3, r2
 8006dd8:	009b      	lsls	r3, r3, #2
 8006dda:	440b      	add	r3, r1
 8006ddc:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8006de0:	681a      	ldr	r2, [r3, #0]
 8006de2:	78fb      	ldrb	r3, [r7, #3]
 8006de4:	4619      	mov	r1, r3
 8006de6:	f7fe fc7f 	bl	80056e8 <USBD_LL_DataOutStage>
}
 8006dea:	bf00      	nop
 8006dec:	3708      	adds	r7, #8
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006df2:	b580      	push	{r7, lr}
 8006df4:	b082      	sub	sp, #8
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
 8006dfa:	460b      	mov	r3, r1
 8006dfc:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8006e04:	78fa      	ldrb	r2, [r7, #3]
 8006e06:	6879      	ldr	r1, [r7, #4]
 8006e08:	4613      	mov	r3, r2
 8006e0a:	00db      	lsls	r3, r3, #3
 8006e0c:	4413      	add	r3, r2
 8006e0e:	009b      	lsls	r3, r3, #2
 8006e10:	440b      	add	r3, r1
 8006e12:	334c      	adds	r3, #76	; 0x4c
 8006e14:	681a      	ldr	r2, [r3, #0]
 8006e16:	78fb      	ldrb	r3, [r7, #3]
 8006e18:	4619      	mov	r1, r3
 8006e1a:	f7fe fd18 	bl	800584e <USBD_LL_DataInStage>
}
 8006e1e:	bf00      	nop
 8006e20:	3708      	adds	r7, #8
 8006e22:	46bd      	mov	sp, r7
 8006e24:	bd80      	pop	{r7, pc}

08006e26 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e26:	b580      	push	{r7, lr}
 8006e28:	b082      	sub	sp, #8
 8006e2a:	af00      	add	r7, sp, #0
 8006e2c:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e34:	4618      	mov	r0, r3
 8006e36:	f7fe fe4c 	bl	8005ad2 <USBD_LL_SOF>
}
 8006e3a:	bf00      	nop
 8006e3c:	3708      	adds	r7, #8
 8006e3e:	46bd      	mov	sp, r7
 8006e40:	bd80      	pop	{r7, pc}

08006e42 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e42:	b580      	push	{r7, lr}
 8006e44:	b084      	sub	sp, #16
 8006e46:	af00      	add	r7, sp, #0
 8006e48:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8006e4a:	2301      	movs	r3, #1
 8006e4c:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	68db      	ldr	r3, [r3, #12]
 8006e52:	2b02      	cmp	r3, #2
 8006e54:	d001      	beq.n	8006e5a <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8006e56:	f7f9 fddd 	bl	8000a14 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8006e5a:	687b      	ldr	r3, [r7, #4]
 8006e5c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e60:	7bfa      	ldrb	r2, [r7, #15]
 8006e62:	4611      	mov	r1, r2
 8006e64:	4618      	mov	r0, r3
 8006e66:	f7fe fdf6 	bl	8005a56 <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8006e6a:	687b      	ldr	r3, [r7, #4]
 8006e6c:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e70:	4618      	mov	r0, r3
 8006e72:	f7fe fd9e 	bl	80059b2 <USBD_LL_Reset>
}
 8006e76:	bf00      	nop
 8006e78:	3710      	adds	r7, #16
 8006e7a:	46bd      	mov	sp, r7
 8006e7c:	bd80      	pop	{r7, pc}
	...

08006e80 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006e80:	b580      	push	{r7, lr}
 8006e82:	b082      	sub	sp, #8
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006e8e:	4618      	mov	r0, r3
 8006e90:	f7fe fdf1 	bl	8005a76 <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8006e94:	687b      	ldr	r3, [r7, #4]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006e9c:	681b      	ldr	r3, [r3, #0]
 8006e9e:	687a      	ldr	r2, [r7, #4]
 8006ea0:	6812      	ldr	r2, [r2, #0]
 8006ea2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8006ea6:	f043 0301 	orr.w	r3, r3, #1
 8006eaa:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	6a1b      	ldr	r3, [r3, #32]
 8006eb0:	2b00      	cmp	r3, #0
 8006eb2:	d005      	beq.n	8006ec0 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8006eb4:	4b04      	ldr	r3, [pc, #16]	; (8006ec8 <HAL_PCD_SuspendCallback+0x48>)
 8006eb6:	691b      	ldr	r3, [r3, #16]
 8006eb8:	4a03      	ldr	r2, [pc, #12]	; (8006ec8 <HAL_PCD_SuspendCallback+0x48>)
 8006eba:	f043 0306 	orr.w	r3, r3, #6
 8006ebe:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8006ec0:	bf00      	nop
 8006ec2:	3708      	adds	r7, #8
 8006ec4:	46bd      	mov	sp, r7
 8006ec6:	bd80      	pop	{r7, pc}
 8006ec8:	e000ed00 	.word	0xe000ed00

08006ecc <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ecc:	b580      	push	{r7, lr}
 8006ece:	b082      	sub	sp, #8
 8006ed0:	af00      	add	r7, sp, #0
 8006ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006eda:	4618      	mov	r0, r3
 8006edc:	f7fe fde1 	bl	8005aa2 <USBD_LL_Resume>
}
 8006ee0:	bf00      	nop
 8006ee2:	3708      	adds	r7, #8
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}

08006ee8 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006ee8:	b580      	push	{r7, lr}
 8006eea:	b082      	sub	sp, #8
 8006eec:	af00      	add	r7, sp, #0
 8006eee:	6078      	str	r0, [r7, #4]
 8006ef0:	460b      	mov	r3, r1
 8006ef2:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006efa:	78fa      	ldrb	r2, [r7, #3]
 8006efc:	4611      	mov	r1, r2
 8006efe:	4618      	mov	r0, r3
 8006f00:	f7fe fe39 	bl	8005b76 <USBD_LL_IsoOUTIncomplete>
}
 8006f04:	bf00      	nop
 8006f06:	3708      	adds	r7, #8
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b082      	sub	sp, #8
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	460b      	mov	r3, r1
 8006f16:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f1e:	78fa      	ldrb	r2, [r7, #3]
 8006f20:	4611      	mov	r1, r2
 8006f22:	4618      	mov	r0, r3
 8006f24:	f7fe fdf5 	bl	8005b12 <USBD_LL_IsoINIncomplete>
}
 8006f28:	bf00      	nop
 8006f2a:	3708      	adds	r7, #8
 8006f2c:	46bd      	mov	sp, r7
 8006f2e:	bd80      	pop	{r7, pc}

08006f30 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f30:	b580      	push	{r7, lr}
 8006f32:	b082      	sub	sp, #8
 8006f34:	af00      	add	r7, sp, #0
 8006f36:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f3e:	4618      	mov	r0, r3
 8006f40:	f7fe fe4b 	bl	8005bda <USBD_LL_DevConnected>
}
 8006f44:	bf00      	nop
 8006f46:	3708      	adds	r7, #8
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}

08006f4c <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8006f54:	687b      	ldr	r3, [r7, #4]
 8006f56:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f7fe fe48 	bl	8005bf0 <USBD_LL_DevDisconnected>
}
 8006f60:	bf00      	nop
 8006f62:	3708      	adds	r7, #8
 8006f64:	46bd      	mov	sp, r7
 8006f66:	bd80      	pop	{r7, pc}

08006f68 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8006f68:	b580      	push	{r7, lr}
 8006f6a:	b082      	sub	sp, #8
 8006f6c:	af00      	add	r7, sp, #0
 8006f6e:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	781b      	ldrb	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d13c      	bne.n	8006ff2 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8006f78:	4a20      	ldr	r2, [pc, #128]	; (8006ffc <USBD_LL_Init+0x94>)
 8006f7a:	687b      	ldr	r3, [r7, #4]
 8006f7c:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8006f80:	687b      	ldr	r3, [r7, #4]
 8006f82:	4a1e      	ldr	r2, [pc, #120]	; (8006ffc <USBD_LL_Init+0x94>)
 8006f84:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8006f88:	4b1c      	ldr	r3, [pc, #112]	; (8006ffc <USBD_LL_Init+0x94>)
 8006f8a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8006f8e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8006f90:	4b1a      	ldr	r3, [pc, #104]	; (8006ffc <USBD_LL_Init+0x94>)
 8006f92:	2204      	movs	r2, #4
 8006f94:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8006f96:	4b19      	ldr	r3, [pc, #100]	; (8006ffc <USBD_LL_Init+0x94>)
 8006f98:	2202      	movs	r2, #2
 8006f9a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8006f9c:	4b17      	ldr	r3, [pc, #92]	; (8006ffc <USBD_LL_Init+0x94>)
 8006f9e:	2200      	movs	r2, #0
 8006fa0:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8006fa2:	4b16      	ldr	r3, [pc, #88]	; (8006ffc <USBD_LL_Init+0x94>)
 8006fa4:	2202      	movs	r2, #2
 8006fa6:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8006fa8:	4b14      	ldr	r3, [pc, #80]	; (8006ffc <USBD_LL_Init+0x94>)
 8006faa:	2200      	movs	r2, #0
 8006fac:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8006fae:	4b13      	ldr	r3, [pc, #76]	; (8006ffc <USBD_LL_Init+0x94>)
 8006fb0:	2200      	movs	r2, #0
 8006fb2:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8006fb4:	4b11      	ldr	r3, [pc, #68]	; (8006ffc <USBD_LL_Init+0x94>)
 8006fb6:	2200      	movs	r2, #0
 8006fb8:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8006fba:	4b10      	ldr	r3, [pc, #64]	; (8006ffc <USBD_LL_Init+0x94>)
 8006fbc:	2200      	movs	r2, #0
 8006fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8006fc0:	4b0e      	ldr	r3, [pc, #56]	; (8006ffc <USBD_LL_Init+0x94>)
 8006fc2:	2200      	movs	r2, #0
 8006fc4:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8006fc6:	480d      	ldr	r0, [pc, #52]	; (8006ffc <USBD_LL_Init+0x94>)
 8006fc8:	f7fa fd49 	bl	8001a5e <HAL_PCD_Init>
 8006fcc:	4603      	mov	r3, r0
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d001      	beq.n	8006fd6 <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8006fd2:	f7f9 fd1f 	bl	8000a14 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8006fd6:	2180      	movs	r1, #128	; 0x80
 8006fd8:	4808      	ldr	r0, [pc, #32]	; (8006ffc <USBD_LL_Init+0x94>)
 8006fda:	f7fb ff88 	bl	8002eee <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8006fde:	2240      	movs	r2, #64	; 0x40
 8006fe0:	2100      	movs	r1, #0
 8006fe2:	4806      	ldr	r0, [pc, #24]	; (8006ffc <USBD_LL_Init+0x94>)
 8006fe4:	f7fb ff3c 	bl	8002e60 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8006fe8:	2280      	movs	r2, #128	; 0x80
 8006fea:	2101      	movs	r1, #1
 8006fec:	4803      	ldr	r0, [pc, #12]	; (8006ffc <USBD_LL_Init+0x94>)
 8006fee:	f7fb ff37 	bl	8002e60 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8006ff2:	2300      	movs	r3, #0
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3708      	adds	r7, #8
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	bd80      	pop	{r7, pc}
 8006ffc:	20000698 	.word	0x20000698

08007000 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007008:	2300      	movs	r3, #0
 800700a:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800700c:	2300      	movs	r3, #0
 800700e:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007016:	4618      	mov	r0, r3
 8007018:	f7fa fe3e 	bl	8001c98 <HAL_PCD_Start>
 800701c:	4603      	mov	r3, r0
 800701e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007020:	7bfb      	ldrb	r3, [r7, #15]
 8007022:	4618      	mov	r0, r3
 8007024:	f000 f930 	bl	8007288 <USBD_Get_USB_Status>
 8007028:	4603      	mov	r3, r0
 800702a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800702c:	7bbb      	ldrb	r3, [r7, #14]
}
 800702e:	4618      	mov	r0, r3
 8007030:	3710      	adds	r7, #16
 8007032:	46bd      	mov	sp, r7
 8007034:	bd80      	pop	{r7, pc}

08007036 <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007036:	b580      	push	{r7, lr}
 8007038:	b084      	sub	sp, #16
 800703a:	af00      	add	r7, sp, #0
 800703c:	6078      	str	r0, [r7, #4]
 800703e:	4608      	mov	r0, r1
 8007040:	4611      	mov	r1, r2
 8007042:	461a      	mov	r2, r3
 8007044:	4603      	mov	r3, r0
 8007046:	70fb      	strb	r3, [r7, #3]
 8007048:	460b      	mov	r3, r1
 800704a:	70bb      	strb	r3, [r7, #2]
 800704c:	4613      	mov	r3, r2
 800704e:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007050:	2300      	movs	r3, #0
 8007052:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007054:	2300      	movs	r3, #0
 8007056:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 800705e:	78bb      	ldrb	r3, [r7, #2]
 8007060:	883a      	ldrh	r2, [r7, #0]
 8007062:	78f9      	ldrb	r1, [r7, #3]
 8007064:	f7fb fb0f 	bl	8002686 <HAL_PCD_EP_Open>
 8007068:	4603      	mov	r3, r0
 800706a:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 800706c:	7bfb      	ldrb	r3, [r7, #15]
 800706e:	4618      	mov	r0, r3
 8007070:	f000 f90a 	bl	8007288 <USBD_Get_USB_Status>
 8007074:	4603      	mov	r3, r0
 8007076:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007078:	7bbb      	ldrb	r3, [r7, #14]
}
 800707a:	4618      	mov	r0, r3
 800707c:	3710      	adds	r7, #16
 800707e:	46bd      	mov	sp, r7
 8007080:	bd80      	pop	{r7, pc}

08007082 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007082:	b580      	push	{r7, lr}
 8007084:	b084      	sub	sp, #16
 8007086:	af00      	add	r7, sp, #0
 8007088:	6078      	str	r0, [r7, #4]
 800708a:	460b      	mov	r3, r1
 800708c:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800708e:	2300      	movs	r3, #0
 8007090:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007092:	2300      	movs	r3, #0
 8007094:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800709c:	78fa      	ldrb	r2, [r7, #3]
 800709e:	4611      	mov	r1, r2
 80070a0:	4618      	mov	r0, r3
 80070a2:	f7fb fb58 	bl	8002756 <HAL_PCD_EP_Close>
 80070a6:	4603      	mov	r3, r0
 80070a8:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070aa:	7bfb      	ldrb	r3, [r7, #15]
 80070ac:	4618      	mov	r0, r3
 80070ae:	f000 f8eb 	bl	8007288 <USBD_Get_USB_Status>
 80070b2:	4603      	mov	r3, r0
 80070b4:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070b6:	7bbb      	ldrb	r3, [r7, #14]
}
 80070b8:	4618      	mov	r0, r3
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070c0:	b580      	push	{r7, lr}
 80070c2:	b084      	sub	sp, #16
 80070c4:	af00      	add	r7, sp, #0
 80070c6:	6078      	str	r0, [r7, #4]
 80070c8:	460b      	mov	r3, r1
 80070ca:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80070cc:	2300      	movs	r3, #0
 80070ce:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80070d0:	2300      	movs	r3, #0
 80070d2:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 80070d4:	687b      	ldr	r3, [r7, #4]
 80070d6:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80070da:	78fa      	ldrb	r2, [r7, #3]
 80070dc:	4611      	mov	r1, r2
 80070de:	4618      	mov	r0, r3
 80070e0:	f7fb fc18 	bl	8002914 <HAL_PCD_EP_SetStall>
 80070e4:	4603      	mov	r3, r0
 80070e6:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80070e8:	7bfb      	ldrb	r3, [r7, #15]
 80070ea:	4618      	mov	r0, r3
 80070ec:	f000 f8cc 	bl	8007288 <USBD_Get_USB_Status>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80070f4:	7bbb      	ldrb	r3, [r7, #14]
}
 80070f6:	4618      	mov	r0, r3
 80070f8:	3710      	adds	r7, #16
 80070fa:	46bd      	mov	sp, r7
 80070fc:	bd80      	pop	{r7, pc}

080070fe <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80070fe:	b580      	push	{r7, lr}
 8007100:	b084      	sub	sp, #16
 8007102:	af00      	add	r7, sp, #0
 8007104:	6078      	str	r0, [r7, #4]
 8007106:	460b      	mov	r3, r1
 8007108:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 800710a:	2300      	movs	r3, #0
 800710c:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800710e:	2300      	movs	r3, #0
 8007110:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007118:	78fa      	ldrb	r2, [r7, #3]
 800711a:	4611      	mov	r1, r2
 800711c:	4618      	mov	r0, r3
 800711e:	f7fb fc5d 	bl	80029dc <HAL_PCD_EP_ClrStall>
 8007122:	4603      	mov	r3, r0
 8007124:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007126:	7bfb      	ldrb	r3, [r7, #15]
 8007128:	4618      	mov	r0, r3
 800712a:	f000 f8ad 	bl	8007288 <USBD_Get_USB_Status>
 800712e:	4603      	mov	r3, r0
 8007130:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007132:	7bbb      	ldrb	r3, [r7, #14]
}
 8007134:	4618      	mov	r0, r3
 8007136:	3710      	adds	r7, #16
 8007138:	46bd      	mov	sp, r7
 800713a:	bd80      	pop	{r7, pc}

0800713c <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 800713c:	b480      	push	{r7}
 800713e:	b085      	sub	sp, #20
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
 8007144:	460b      	mov	r3, r1
 8007146:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 800714e:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007150:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007154:	2b00      	cmp	r3, #0
 8007156:	da0b      	bge.n	8007170 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007158:	78fb      	ldrb	r3, [r7, #3]
 800715a:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 800715e:	68f9      	ldr	r1, [r7, #12]
 8007160:	4613      	mov	r3, r2
 8007162:	00db      	lsls	r3, r3, #3
 8007164:	4413      	add	r3, r2
 8007166:	009b      	lsls	r3, r3, #2
 8007168:	440b      	add	r3, r1
 800716a:	333e      	adds	r3, #62	; 0x3e
 800716c:	781b      	ldrb	r3, [r3, #0]
 800716e:	e00b      	b.n	8007188 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007170:	78fb      	ldrb	r3, [r7, #3]
 8007172:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007176:	68f9      	ldr	r1, [r7, #12]
 8007178:	4613      	mov	r3, r2
 800717a:	00db      	lsls	r3, r3, #3
 800717c:	4413      	add	r3, r2
 800717e:	009b      	lsls	r3, r3, #2
 8007180:	440b      	add	r3, r1
 8007182:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007186:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007188:	4618      	mov	r0, r3
 800718a:	3714      	adds	r7, #20
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b084      	sub	sp, #16
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
 800719c:	460b      	mov	r3, r1
 800719e:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071a0:	2300      	movs	r3, #0
 80071a2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071a4:	2300      	movs	r3, #0
 80071a6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 80071ae:	78fa      	ldrb	r2, [r7, #3]
 80071b0:	4611      	mov	r1, r2
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fb fa42 	bl	800263c <HAL_PCD_SetAddress>
 80071b8:	4603      	mov	r3, r0
 80071ba:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071bc:	7bfb      	ldrb	r3, [r7, #15]
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 f862 	bl	8007288 <USBD_Get_USB_Status>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80071c8:	7bbb      	ldrb	r3, [r7, #14]
}
 80071ca:	4618      	mov	r0, r3
 80071cc:	3710      	adds	r7, #16
 80071ce:	46bd      	mov	sp, r7
 80071d0:	bd80      	pop	{r7, pc}

080071d2 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 80071d2:	b580      	push	{r7, lr}
 80071d4:	b086      	sub	sp, #24
 80071d6:	af00      	add	r7, sp, #0
 80071d8:	60f8      	str	r0, [r7, #12]
 80071da:	607a      	str	r2, [r7, #4]
 80071dc:	603b      	str	r3, [r7, #0]
 80071de:	460b      	mov	r3, r1
 80071e0:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80071e2:	2300      	movs	r3, #0
 80071e4:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80071e6:	2300      	movs	r3, #0
 80071e8:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 80071f0:	7af9      	ldrb	r1, [r7, #11]
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	f7fb fb43 	bl	8002880 <HAL_PCD_EP_Transmit>
 80071fa:	4603      	mov	r3, r0
 80071fc:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80071fe:	7dfb      	ldrb	r3, [r7, #23]
 8007200:	4618      	mov	r0, r3
 8007202:	f000 f841 	bl	8007288 <USBD_Get_USB_Status>
 8007206:	4603      	mov	r3, r0
 8007208:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800720a:	7dbb      	ldrb	r3, [r7, #22]
}
 800720c:	4618      	mov	r0, r3
 800720e:	3718      	adds	r7, #24
 8007210:	46bd      	mov	sp, r7
 8007212:	bd80      	pop	{r7, pc}

08007214 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b086      	sub	sp, #24
 8007218:	af00      	add	r7, sp, #0
 800721a:	60f8      	str	r0, [r7, #12]
 800721c:	607a      	str	r2, [r7, #4]
 800721e:	603b      	str	r3, [r7, #0]
 8007220:	460b      	mov	r3, r1
 8007222:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007224:	2300      	movs	r3, #0
 8007226:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007228:	2300      	movs	r3, #0
 800722a:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007232:	7af9      	ldrb	r1, [r7, #11]
 8007234:	683b      	ldr	r3, [r7, #0]
 8007236:	687a      	ldr	r2, [r7, #4]
 8007238:	f7fb fad7 	bl	80027ea <HAL_PCD_EP_Receive>
 800723c:	4603      	mov	r3, r0
 800723e:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007240:	7dfb      	ldrb	r3, [r7, #23]
 8007242:	4618      	mov	r0, r3
 8007244:	f000 f820 	bl	8007288 <USBD_Get_USB_Status>
 8007248:	4603      	mov	r3, r0
 800724a:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 800724c:	7dbb      	ldrb	r3, [r7, #22]
}
 800724e:	4618      	mov	r0, r3
 8007250:	3718      	adds	r7, #24
 8007252:	46bd      	mov	sp, r7
 8007254:	bd80      	pop	{r7, pc}
	...

08007258 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007258:	b480      	push	{r7}
 800725a:	b083      	sub	sp, #12
 800725c:	af00      	add	r7, sp, #0
 800725e:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007260:	4b03      	ldr	r3, [pc, #12]	; (8007270 <USBD_static_malloc+0x18>)
}
 8007262:	4618      	mov	r0, r3
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
 800726e:	bf00      	nop
 8007270:	20000ba4 	.word	0x20000ba4

08007274 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007274:	b480      	push	{r7}
 8007276:	b083      	sub	sp, #12
 8007278:	af00      	add	r7, sp, #0
 800727a:	6078      	str	r0, [r7, #4]

}
 800727c:	bf00      	nop
 800727e:	370c      	adds	r7, #12
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007288:	b480      	push	{r7}
 800728a:	b085      	sub	sp, #20
 800728c:	af00      	add	r7, sp, #0
 800728e:	4603      	mov	r3, r0
 8007290:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007292:	2300      	movs	r3, #0
 8007294:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007296:	79fb      	ldrb	r3, [r7, #7]
 8007298:	2b03      	cmp	r3, #3
 800729a:	d817      	bhi.n	80072cc <USBD_Get_USB_Status+0x44>
 800729c:	a201      	add	r2, pc, #4	; (adr r2, 80072a4 <USBD_Get_USB_Status+0x1c>)
 800729e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072a2:	bf00      	nop
 80072a4:	080072b5 	.word	0x080072b5
 80072a8:	080072bb 	.word	0x080072bb
 80072ac:	080072c1 	.word	0x080072c1
 80072b0:	080072c7 	.word	0x080072c7
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80072b4:	2300      	movs	r3, #0
 80072b6:	73fb      	strb	r3, [r7, #15]
    break;
 80072b8:	e00b      	b.n	80072d2 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80072ba:	2303      	movs	r3, #3
 80072bc:	73fb      	strb	r3, [r7, #15]
    break;
 80072be:	e008      	b.n	80072d2 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80072c0:	2301      	movs	r3, #1
 80072c2:	73fb      	strb	r3, [r7, #15]
    break;
 80072c4:	e005      	b.n	80072d2 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80072c6:	2303      	movs	r3, #3
 80072c8:	73fb      	strb	r3, [r7, #15]
    break;
 80072ca:	e002      	b.n	80072d2 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80072cc:	2303      	movs	r3, #3
 80072ce:	73fb      	strb	r3, [r7, #15]
    break;
 80072d0:	bf00      	nop
  }
  return usb_status;
 80072d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80072d4:	4618      	mov	r0, r3
 80072d6:	3714      	adds	r7, #20
 80072d8:	46bd      	mov	sp, r7
 80072da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072de:	4770      	bx	lr

080072e0 <__libc_init_array>:
 80072e0:	b570      	push	{r4, r5, r6, lr}
 80072e2:	4d0d      	ldr	r5, [pc, #52]	; (8007318 <__libc_init_array+0x38>)
 80072e4:	4c0d      	ldr	r4, [pc, #52]	; (800731c <__libc_init_array+0x3c>)
 80072e6:	1b64      	subs	r4, r4, r5
 80072e8:	10a4      	asrs	r4, r4, #2
 80072ea:	2600      	movs	r6, #0
 80072ec:	42a6      	cmp	r6, r4
 80072ee:	d109      	bne.n	8007304 <__libc_init_array+0x24>
 80072f0:	4d0b      	ldr	r5, [pc, #44]	; (8007320 <__libc_init_array+0x40>)
 80072f2:	4c0c      	ldr	r4, [pc, #48]	; (8007324 <__libc_init_array+0x44>)
 80072f4:	f000 f820 	bl	8007338 <_init>
 80072f8:	1b64      	subs	r4, r4, r5
 80072fa:	10a4      	asrs	r4, r4, #2
 80072fc:	2600      	movs	r6, #0
 80072fe:	42a6      	cmp	r6, r4
 8007300:	d105      	bne.n	800730e <__libc_init_array+0x2e>
 8007302:	bd70      	pop	{r4, r5, r6, pc}
 8007304:	f855 3b04 	ldr.w	r3, [r5], #4
 8007308:	4798      	blx	r3
 800730a:	3601      	adds	r6, #1
 800730c:	e7ee      	b.n	80072ec <__libc_init_array+0xc>
 800730e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007312:	4798      	blx	r3
 8007314:	3601      	adds	r6, #1
 8007316:	e7f2      	b.n	80072fe <__libc_init_array+0x1e>
 8007318:	080073b0 	.word	0x080073b0
 800731c:	080073b0 	.word	0x080073b0
 8007320:	080073b0 	.word	0x080073b0
 8007324:	080073b4 	.word	0x080073b4

08007328 <memset>:
 8007328:	4402      	add	r2, r0
 800732a:	4603      	mov	r3, r0
 800732c:	4293      	cmp	r3, r2
 800732e:	d100      	bne.n	8007332 <memset+0xa>
 8007330:	4770      	bx	lr
 8007332:	f803 1b01 	strb.w	r1, [r3], #1
 8007336:	e7f9      	b.n	800732c <memset+0x4>

08007338 <_init>:
 8007338:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800733a:	bf00      	nop
 800733c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800733e:	bc08      	pop	{r3}
 8007340:	469e      	mov	lr, r3
 8007342:	4770      	bx	lr

08007344 <_fini>:
 8007344:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007346:	bf00      	nop
 8007348:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800734a:	bc08      	pop	{r3}
 800734c:	469e      	mov	lr, r3
 800734e:	4770      	bx	lr
