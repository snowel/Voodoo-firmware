
chorduroi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c14  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08007da8  08007da8  00017da8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e18  08007e18  000204e4  2**0
                  CONTENTS
  4 .ARM          00000008  08007e18  08007e18  00017e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e20  08007e20  000204e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e20  08007e20  00017e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e24  08007e24  00017e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004e4  20000000  08007e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cb8  200004e4  0800830c  000204e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000119c  0800830c  0002119c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001074d  00000000  00000000  00020514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002ebd  00000000  00000000  00030c61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00033b20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  00034820  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cc3  00000000  00000000  000353b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116dd  00000000  00000000  0004f073  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000936a6  00000000  00000000  00060750  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3df6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033cc  00000000  00000000  000f3e48  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200004e4 	.word	0x200004e4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007d90 	.word	0x08007d90

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200004e8 	.word	0x200004e8
 80001d0:	08007d90 	.word	0x08007d90

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <checkKeyPins>:



// Update the key-press array.
// This is where the keys "index" is determined.
void checkKeyPins(uint8_t* keyRef){
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	keyRef[4] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	1d1c      	adds	r4, r3, #4
 80004e4:	2110      	movs	r1, #16
 80004e6:	4842      	ldr	r0, [pc, #264]	; (80005f0 <checkKeyPins+0x118>)
 80004e8:	f001 fffc 	bl	80024e4 <HAL_GPIO_ReadPin>
 80004ec:	4603      	mov	r3, r0
 80004ee:	7023      	strb	r3, [r4, #0]
	keyRef[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80004f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f4:	483f      	ldr	r0, [pc, #252]	; (80005f4 <checkKeyPins+0x11c>)
 80004f6:	f001 fff5 	bl	80024e4 <HAL_GPIO_ReadPin>
 80004fa:	4603      	mov	r3, r0
 80004fc:	461a      	mov	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	701a      	strb	r2, [r3, #0]
	keyRef[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	1c5c      	adds	r4, r3, #1
 8000506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800050a:	483a      	ldr	r0, [pc, #232]	; (80005f4 <checkKeyPins+0x11c>)
 800050c:	f001 ffea 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000510:	4603      	mov	r3, r0
 8000512:	7023      	strb	r3, [r4, #0]
	keyRef[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	1c9c      	adds	r4, r3, #2
 8000518:	2110      	movs	r1, #16
 800051a:	4836      	ldr	r0, [pc, #216]	; (80005f4 <checkKeyPins+0x11c>)
 800051c:	f001 ffe2 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000520:	4603      	mov	r3, r0
 8000522:	7023      	strb	r3, [r4, #0]
	keyRef[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	1cdc      	adds	r4, r3, #3
 8000528:	2120      	movs	r1, #32
 800052a:	4832      	ldr	r0, [pc, #200]	; (80005f4 <checkKeyPins+0x11c>)
 800052c:	f001 ffda 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	7023      	strb	r3, [r4, #0]
	keyRef[8] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f103 0408 	add.w	r4, r3, #8
 800053a:	2140      	movs	r1, #64	; 0x40
 800053c:	482d      	ldr	r0, [pc, #180]	; (80005f4 <checkKeyPins+0x11c>)
 800053e:	f001 ffd1 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000542:	4603      	mov	r3, r0
 8000544:	7023      	strb	r3, [r4, #0]
	keyRef[9] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f103 0409 	add.w	r4, r3, #9
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	4829      	ldr	r0, [pc, #164]	; (80005f4 <checkKeyPins+0x11c>)
 8000550:	f001 ffc8 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	7023      	strb	r3, [r4, #0]
	keyRef[10] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f103 040a 	add.w	r4, r3, #10
 800055e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000562:	4824      	ldr	r0, [pc, #144]	; (80005f4 <checkKeyPins+0x11c>)
 8000564:	f001 ffbe 	bl	80024e4 <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	7023      	strb	r3, [r4, #0]
	keyRef[11] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f103 040b 	add.w	r4, r3, #11
 8000572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000576:	481f      	ldr	r0, [pc, #124]	; (80005f4 <checkKeyPins+0x11c>)
 8000578:	f001 ffb4 	bl	80024e4 <HAL_GPIO_ReadPin>
 800057c:	4603      	mov	r3, r0
 800057e:	7023      	strb	r3, [r4, #0]
	keyRef[5] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	1d5c      	adds	r4, r3, #5
 8000584:	2120      	movs	r1, #32
 8000586:	481a      	ldr	r0, [pc, #104]	; (80005f0 <checkKeyPins+0x118>)
 8000588:	f001 ffac 	bl	80024e4 <HAL_GPIO_ReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	7023      	strb	r3, [r4, #0]
	keyRef[6] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	1d9c      	adds	r4, r3, #6
 8000594:	2140      	movs	r1, #64	; 0x40
 8000596:	4816      	ldr	r0, [pc, #88]	; (80005f0 <checkKeyPins+0x118>)
 8000598:	f001 ffa4 	bl	80024e4 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	7023      	strb	r3, [r4, #0]
	keyRef[7] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	1ddc      	adds	r4, r3, #7
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	4812      	ldr	r0, [pc, #72]	; (80005f0 <checkKeyPins+0x118>)
 80005a8:	f001 ff9c 	bl	80024e4 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	7023      	strb	r3, [r4, #0]
	keyRef[12] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f103 040c 	add.w	r4, r3, #12
 80005b6:	2101      	movs	r1, #1
 80005b8:	480e      	ldr	r0, [pc, #56]	; (80005f4 <checkKeyPins+0x11c>)
 80005ba:	f001 ff93 	bl	80024e4 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	7023      	strb	r3, [r4, #0]
	keyRef[13] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f103 040d 	add.w	r4, r3, #13
 80005c8:	2102      	movs	r1, #2
 80005ca:	480a      	ldr	r0, [pc, #40]	; (80005f4 <checkKeyPins+0x11c>)
 80005cc:	f001 ff8a 	bl	80024e4 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	7023      	strb	r3, [r4, #0]
	//keyRef[14] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2); -- Hard-fault culprit
	keyRef[15] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f103 040f 	add.w	r4, r3, #15
 80005da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <checkKeyPins+0x11c>)
 80005e0:	f001 ff80 	bl	80024e4 <HAL_GPIO_ReadPin>
 80005e4:	4603      	mov	r3, r0
 80005e6:	7023      	strb	r3, [r4, #0]
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd90      	pop	{r4, r7, pc}
 80005f0:	40020000 	.word	0x40020000
 80005f4:	40020400 	.word	0x40020400

080005f8 <setModByte>:


void setModByte(uint8_t* code, keyboardHIDReport* report){
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
	report->MOD = report->MOD | *code;
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	781a      	ldrb	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4313      	orrs	r3, r2
 800060c:	b2da      	uxtb	r2, r3
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	701a      	strb	r2, [r3, #0]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <setKeyBytes>:

void setKeyBytes(uint8_t* code, keyboardHIDReport* keyboardReport){
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	6039      	str	r1, [r7, #0]
	if(keyboardReport->K1 == 0){
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d104      	bne.n	800063a <setKeyBytes+0x1c>
		keyboardReport->K1 = *code;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	709a      	strb	r2, [r3, #2]
	} else if(keyboardReport->K5 == 0){
		keyboardReport->K5 = *code;
	} else if(keyboardReport->K6 == 0){
		keyboardReport->K6 = *code;
	}
}
 8000638:	e02b      	b.n	8000692 <setKeyBytes+0x74>
	} else if(keyboardReport->K2 == 0){
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	78db      	ldrb	r3, [r3, #3]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d104      	bne.n	800064c <setKeyBytes+0x2e>
		keyboardReport->K2 = *code;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	781a      	ldrb	r2, [r3, #0]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	70da      	strb	r2, [r3, #3]
}
 800064a:	e022      	b.n	8000692 <setKeyBytes+0x74>
	} else if(keyboardReport->K3 == 0){
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d104      	bne.n	800065e <setKeyBytes+0x40>
		keyboardReport->K3 = *code;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	781a      	ldrb	r2, [r3, #0]
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	711a      	strb	r2, [r3, #4]
}
 800065c:	e019      	b.n	8000692 <setKeyBytes+0x74>
	} else if(keyboardReport->K4 == 0){
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	795b      	ldrb	r3, [r3, #5]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d104      	bne.n	8000670 <setKeyBytes+0x52>
		keyboardReport->K4 = *code;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	781a      	ldrb	r2, [r3, #0]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	715a      	strb	r2, [r3, #5]
}
 800066e:	e010      	b.n	8000692 <setKeyBytes+0x74>
	} else if(keyboardReport->K5 == 0){
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	799b      	ldrb	r3, [r3, #6]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d104      	bne.n	8000682 <setKeyBytes+0x64>
		keyboardReport->K5 = *code;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	719a      	strb	r2, [r3, #6]
}
 8000680:	e007      	b.n	8000692 <setKeyBytes+0x74>
	} else if(keyboardReport->K6 == 0){
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	79db      	ldrb	r3, [r3, #7]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d103      	bne.n	8000692 <setKeyBytes+0x74>
		keyboardReport->K6 = *code;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	781a      	ldrb	r2, [r3, #0]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	71da      	strb	r2, [r3, #7]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <setReport>:

//TODO physical vs imp priority could be configurable
void setReport(int keypress, Layer* layer, keyboardHIDReport* keyboardReport){
 800069e:	b580      	push	{r7, lr}
 80006a0:	b088      	sub	sp, #32
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	60f8      	str	r0, [r7, #12]
 80006a6:	60b9      	str	r1, [r7, #8]
 80006a8:	607a      	str	r2, [r7, #4]
	// Temporary data store
	uint8_t * impModcode = layer->impMod;
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	681b      	ldr	r3, [r3, #0]
 80006ae:	61fb      	str	r3, [r7, #28]
	uint8_t * impKeycode = layer->impKey;
 80006b0:	68bb      	ldr	r3, [r7, #8]
 80006b2:	685b      	ldr	r3, [r3, #4]
 80006b4:	61bb      	str	r3, [r7, #24]
	uint8_t * modcode = layer->pModLayer + keypress;
 80006b6:	68bb      	ldr	r3, [r7, #8]
 80006b8:	689a      	ldr	r2, [r3, #8]
 80006ba:	68fb      	ldr	r3, [r7, #12]
 80006bc:	4413      	add	r3, r2
 80006be:	617b      	str	r3, [r7, #20]
	uint8_t * keycode = layer->pKeyLayer + keypress;
 80006c0:	68bb      	ldr	r3, [r7, #8]
 80006c2:	68da      	ldr	r2, [r3, #12]
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	4413      	add	r3, r2
 80006c8:	613b      	str	r3, [r7, #16]

	setKeyBytes(keycode, keyboardReport);
 80006ca:	6879      	ldr	r1, [r7, #4]
 80006cc:	6938      	ldr	r0, [r7, #16]
 80006ce:	f7ff ffa6 	bl	800061e <setKeyBytes>
	setModByte(modcode, keyboardReport);
 80006d2:	6879      	ldr	r1, [r7, #4]
 80006d4:	6978      	ldr	r0, [r7, #20]
 80006d6:	f7ff ff8f 	bl	80005f8 <setModByte>
	setKeyBytes(impModcode, keyboardReport);
 80006da:	6879      	ldr	r1, [r7, #4]
 80006dc:	69f8      	ldr	r0, [r7, #28]
 80006de:	f7ff ff9e 	bl	800061e <setKeyBytes>
	setModByte(impKeycode, keyboardReport);
 80006e2:	6879      	ldr	r1, [r7, #4]
 80006e4:	69b8      	ldr	r0, [r7, #24]
 80006e6:	f7ff ff87 	bl	80005f8 <setModByte>
}
 80006ea:	bf00      	nop
 80006ec:	3720      	adds	r7, #32
 80006ee:	46bd      	mov	sp, r7
 80006f0:	bd80      	pop	{r7, pc}

080006f2 <setHeld>:
	setKeyBytes(keycode);
	setModByte(modcode);
}
 * */

void setHeld(int keypress, int layerNumber, int* heldRef){
 80006f2:	b480      	push	{r7}
 80006f4:	b085      	sub	sp, #20
 80006f6:	af00      	add	r7, sp, #0
 80006f8:	60f8      	str	r0, [r7, #12]
 80006fa:	60b9      	str	r1, [r7, #8]
 80006fc:	607a      	str	r2, [r7, #4]
	heldRef[keypress] = layerNumber;
 80006fe:	68fb      	ldr	r3, [r7, #12]
 8000700:	009b      	lsls	r3, r3, #2
 8000702:	687a      	ldr	r2, [r7, #4]
 8000704:	4413      	add	r3, r2
 8000706:	68ba      	ldr	r2, [r7, #8]
 8000708:	601a      	str	r2, [r3, #0]
}
 800070a:	bf00      	nop
 800070c:	3714      	adds	r7, #20
 800070e:	46bd      	mov	sp, r7
 8000710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000714:	4770      	bx	lr

08000716 <setHeldReport>:

void setHeldReport(int keypress, Layer* keymap, int* heldRef, keyboardHIDReport* keyboardReport){
 8000716:	b580      	push	{r7, lr}
 8000718:	b086      	sub	sp, #24
 800071a:	af00      	add	r7, sp, #0
 800071c:	60f8      	str	r0, [r7, #12]
 800071e:	60b9      	str	r1, [r7, #8]
 8000720:	607a      	str	r2, [r7, #4]
 8000722:	603b      	str	r3, [r7, #0]
	Layer* heldKeyLayer = &(keymap[heldRef[keypress]]);
 8000724:	68fb      	ldr	r3, [r7, #12]
 8000726:	009b      	lsls	r3, r3, #2
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	4413      	add	r3, r2
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	461a      	mov	r2, r3
 8000730:	4613      	mov	r3, r2
 8000732:	009b      	lsls	r3, r3, #2
 8000734:	4413      	add	r3, r2
 8000736:	009b      	lsls	r3, r3, #2
 8000738:	461a      	mov	r2, r3
 800073a:	68bb      	ldr	r3, [r7, #8]
 800073c:	4413      	add	r3, r2
 800073e:	617b      	str	r3, [r7, #20]
	//if isHold[i] == 0 then the i key is not held, else it's the numebr of the layer it was pressed down in

	setReport(keypress, heldKeyLayer, keyboardReport);
 8000740:	683a      	ldr	r2, [r7, #0]
 8000742:	6979      	ldr	r1, [r7, #20]
 8000744:	68f8      	ldr	r0, [r7, #12]
 8000746:	f7ff ffaa 	bl	800069e <setReport>

}
 800074a:	bf00      	nop
 800074c:	3718      	adds	r7, #24
 800074e:	46bd      	mov	sp, r7
 8000750:	bd80      	pop	{r7, pc}

08000752 <scanKeys>:
	setReport(keypress, relMods, relKeys);

}
 * */

void scanKeys(Layer* keymap, Layer* layerRef, int* heldRef, uint8_t* keyStates, keyboardHIDReport* report){
 8000752:	b580      	push	{r7, lr}
 8000754:	b086      	sub	sp, #24
 8000756:	af00      	add	r7, sp, #0
 8000758:	60f8      	str	r0, [r7, #12]
 800075a:	60b9      	str	r1, [r7, #8]
 800075c:	607a      	str	r2, [r7, #4]
 800075e:	603b      	str	r3, [r7, #0]
	for(int i = 0; i < NUMBER_OF_KEYS; i++){
 8000760:	2300      	movs	r3, #0
 8000762:	617b      	str	r3, [r7, #20]
 8000764:	e028      	b.n	80007b8 <scanKeys+0x66>
		//Original if condition was: GPIO_PIN_RESET == HAL_GPIO_ReadPin(keyPorts[i]/, keyPins[i])
		if(keyStates[i] == 0){
 8000766:	697b      	ldr	r3, [r7, #20]
 8000768:	683a      	ldr	r2, [r7, #0]
 800076a:	4413      	add	r3, r2
 800076c:	781b      	ldrb	r3, [r3, #0]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d11a      	bne.n	80007a8 <scanKeys+0x56>
			switch(heldRef[i]){
 8000772:	697b      	ldr	r3, [r7, #20]
 8000774:	009b      	lsls	r3, r3, #2
 8000776:	687a      	ldr	r2, [r7, #4]
 8000778:	4413      	add	r3, r2
 800077a:	681b      	ldr	r3, [r3, #0]
 800077c:	2b00      	cmp	r3, #0
 800077e:	d10c      	bne.n	800079a <scanKeys+0x48>
			case 0: setReport(i, layerRef, report);
 8000780:	6a3a      	ldr	r2, [r7, #32]
 8000782:	68b9      	ldr	r1, [r7, #8]
 8000784:	6978      	ldr	r0, [r7, #20]
 8000786:	f7ff ff8a 	bl	800069e <setReport>
					setHeld(i, layerRef->layerNum, heldRef);
 800078a:	68bb      	ldr	r3, [r7, #8]
 800078c:	691b      	ldr	r3, [r3, #16]
 800078e:	687a      	ldr	r2, [r7, #4]
 8000790:	4619      	mov	r1, r3
 8000792:	6978      	ldr	r0, [r7, #20]
 8000794:	f7ff ffad 	bl	80006f2 <setHeld>
				break;
 8000798:	e00b      	b.n	80007b2 <scanKeys+0x60>
			default: setHeldReport(i, keymap, heldRef, report);
 800079a:	6a3b      	ldr	r3, [r7, #32]
 800079c:	687a      	ldr	r2, [r7, #4]
 800079e:	68f9      	ldr	r1, [r7, #12]
 80007a0:	6978      	ldr	r0, [r7, #20]
 80007a2:	f7ff ffb8 	bl	8000716 <setHeldReport>
				break;
 80007a6:	e004      	b.n	80007b2 <scanKeys+0x60>
			}

		} else {// TODO add a check?
			setHeld(i, 0, heldRef);
 80007a8:	687a      	ldr	r2, [r7, #4]
 80007aa:	2100      	movs	r1, #0
 80007ac:	6978      	ldr	r0, [r7, #20]
 80007ae:	f7ff ffa0 	bl	80006f2 <setHeld>
	for(int i = 0; i < NUMBER_OF_KEYS; i++){
 80007b2:	697b      	ldr	r3, [r7, #20]
 80007b4:	3301      	adds	r3, #1
 80007b6:	617b      	str	r3, [r7, #20]
 80007b8:	697b      	ldr	r3, [r7, #20]
 80007ba:	2b0f      	cmp	r3, #15
 80007bc:	ddd3      	ble.n	8000766 <scanKeys+0x14>
		}
	}
}
 80007be:	bf00      	nop
 80007c0:	bf00      	nop
 80007c2:	3718      	adds	r7, #24
 80007c4:	46bd      	mov	sp, r7
 80007c6:	bd80      	pop	{r7, pc}

080007c8 <clearReport>:

// scan function for keyboard settings i.e. swtichingmouse mode

// scan for thumb-stick keys, so scans held, but sets the report to a prebuilt report mapped tot hat layer... technically with that the layer could still function normally... for mod keys... probbaly a more elegant solution for most cases... but I do like the manual mod map

void clearReport(keyboardHIDReport* keyboardReport){
 80007c8:	b480      	push	{r7}
 80007ca:	b083      	sub	sp, #12
 80007cc:	af00      	add	r7, sp, #0
 80007ce:	6078      	str	r0, [r7, #4]
	keyboardReport->MOD = 0;
 80007d0:	687b      	ldr	r3, [r7, #4]
 80007d2:	2200      	movs	r2, #0
 80007d4:	701a      	strb	r2, [r3, #0]
	keyboardReport->K1 = 0;
 80007d6:	687b      	ldr	r3, [r7, #4]
 80007d8:	2200      	movs	r2, #0
 80007da:	709a      	strb	r2, [r3, #2]
	keyboardReport->K2 = 0;
 80007dc:	687b      	ldr	r3, [r7, #4]
 80007de:	2200      	movs	r2, #0
 80007e0:	70da      	strb	r2, [r3, #3]
	keyboardReport->K3 = 0;
 80007e2:	687b      	ldr	r3, [r7, #4]
 80007e4:	2200      	movs	r2, #0
 80007e6:	711a      	strb	r2, [r3, #4]
	keyboardReport->K4 = 0;
 80007e8:	687b      	ldr	r3, [r7, #4]
 80007ea:	2200      	movs	r2, #0
 80007ec:	715a      	strb	r2, [r3, #5]
	keyboardReport->K5 = 0;
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2200      	movs	r2, #0
 80007f2:	719a      	strb	r2, [r3, #6]
	keyboardReport->K6 = 0;
 80007f4:	687b      	ldr	r3, [r7, #4]
 80007f6:	2200      	movs	r2, #0
 80007f8:	71da      	strb	r2, [r3, #7]
}
 80007fa:	bf00      	nop
 80007fc:	370c      	adds	r7, #12
 80007fe:	46bd      	mov	sp, r7
 8000800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000804:	4770      	bx	lr

08000806 <categorizeJoy>:
//void initStick(uint32_t* DMA_buff, uint16_t restHandle, uint){

//}


enum joydir categorizeJoy(joystick* stick, uint32_t tresh){
 8000806:	b480      	push	{r7}
 8000808:	b087      	sub	sp, #28
 800080a:	af00      	add	r7, sp, #0
 800080c:	6078      	str	r0, [r7, #4]
 800080e:	6039      	str	r1, [r7, #0]

	int32_t xDif;
	int32_t yDif;

	// Substract the neutral and position for the sign to match cartesian convention
	if(stick->xPolarity == 0) {
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	7c1b      	ldrb	r3, [r3, #16]
 8000814:	2b00      	cmp	r3, #0
 8000816:	d107      	bne.n	8000828 <categorizeJoy+0x22>
		xDif = *(stick->xAxis) - stick->xNeutral;
 8000818:	687b      	ldr	r3, [r7, #4]
 800081a:	685b      	ldr	r3, [r3, #4]
 800081c:	681a      	ldr	r2, [r3, #0]
 800081e:	687b      	ldr	r3, [r7, #4]
 8000820:	689b      	ldr	r3, [r3, #8]
 8000822:	1ad3      	subs	r3, r2, r3
 8000824:	617b      	str	r3, [r7, #20]
 8000826:	e006      	b.n	8000836 <categorizeJoy+0x30>
	} else {
		xDif = stick->xNeutral - *(stick->xAxis);
 8000828:	687b      	ldr	r3, [r7, #4]
 800082a:	689a      	ldr	r2, [r3, #8]
 800082c:	687b      	ldr	r3, [r7, #4]
 800082e:	685b      	ldr	r3, [r3, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	1ad3      	subs	r3, r2, r3
 8000834:	617b      	str	r3, [r7, #20]
	}

	if(stick->yPolarity == 0) {
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	7c5b      	ldrb	r3, [r3, #17]
 800083a:	2b00      	cmp	r3, #0
 800083c:	d107      	bne.n	800084e <categorizeJoy+0x48>
	    yDif = *(stick->yAxis) - stick->yNeutral;
 800083e:	687b      	ldr	r3, [r7, #4]
 8000840:	681b      	ldr	r3, [r3, #0]
 8000842:	681a      	ldr	r2, [r3, #0]
 8000844:	687b      	ldr	r3, [r7, #4]
 8000846:	68db      	ldr	r3, [r3, #12]
 8000848:	1ad3      	subs	r3, r2, r3
 800084a:	613b      	str	r3, [r7, #16]
 800084c:	e006      	b.n	800085c <categorizeJoy+0x56>
	} else {
		yDif = stick->xNeutral - *(stick->xAxis);
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	689a      	ldr	r2, [r3, #8]
 8000852:	687b      	ldr	r3, [r7, #4]
 8000854:	685b      	ldr	r3, [r3, #4]
 8000856:	681b      	ldr	r3, [r3, #0]
 8000858:	1ad3      	subs	r3, r2, r3
 800085a:	613b      	str	r3, [r7, #16]
	}


	int xMag = abs(xDif);
 800085c:	697b      	ldr	r3, [r7, #20]
 800085e:	2b00      	cmp	r3, #0
 8000860:	bfb8      	it	lt
 8000862:	425b      	neglt	r3, r3
 8000864:	60fb      	str	r3, [r7, #12]
	int yMag = abs(yDif);
 8000866:	693b      	ldr	r3, [r7, #16]
 8000868:	2b00      	cmp	r3, #0
 800086a:	bfb8      	it	lt
 800086c:	425b      	neglt	r3, r3
 800086e:	60bb      	str	r3, [r7, #8]

	if(xMag <= tresh && yMag <= tresh){
 8000870:	68fb      	ldr	r3, [r7, #12]
 8000872:	683a      	ldr	r2, [r7, #0]
 8000874:	429a      	cmp	r2, r3
 8000876:	d308      	bcc.n	800088a <categorizeJoy+0x84>
 8000878:	68bb      	ldr	r3, [r7, #8]
 800087a:	683a      	ldr	r2, [r7, #0]
 800087c:	429a      	cmp	r2, r3
 800087e:	d304      	bcc.n	800088a <categorizeJoy+0x84>
		stick->position = CENTERWISE;
 8000880:	687b      	ldr	r3, [r7, #4]
 8000882:	2200      	movs	r2, #0
 8000884:	749a      	strb	r2, [r3, #18]
		return CENTERWISE; //Stick not directed
 8000886:	2300      	movs	r3, #0
 8000888:	e01c      	b.n	80008c4 <categorizeJoy+0xbe>
	}

	if(xMag > yMag) {// HORIZONTAL MOTION
 800088a:	68fa      	ldr	r2, [r7, #12]
 800088c:	68bb      	ldr	r3, [r7, #8]
 800088e:	429a      	cmp	r2, r3
 8000890:	dd0c      	ble.n	80008ac <categorizeJoy+0xa6>
		if(xDif > 0) {
 8000892:	697b      	ldr	r3, [r7, #20]
 8000894:	2b00      	cmp	r3, #0
 8000896:	dd04      	ble.n	80008a2 <categorizeJoy+0x9c>
			stick->position = EASTWISE;
 8000898:	687b      	ldr	r3, [r7, #4]
 800089a:	2201      	movs	r2, #1
 800089c:	749a      	strb	r2, [r3, #18]
			return EASTWISE;
 800089e:	2301      	movs	r3, #1
 80008a0:	e010      	b.n	80008c4 <categorizeJoy+0xbe>
		} else {
			stick->position = WESTWISE;
 80008a2:	687b      	ldr	r3, [r7, #4]
 80008a4:	2204      	movs	r2, #4
 80008a6:	749a      	strb	r2, [r3, #18]
			return WESTWISE;
 80008a8:	2304      	movs	r3, #4
 80008aa:	e00b      	b.n	80008c4 <categorizeJoy+0xbe>
		}

	} else { // VERTICAL MOTION
		if(yDif > 0) {
 80008ac:	693b      	ldr	r3, [r7, #16]
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	dd04      	ble.n	80008bc <categorizeJoy+0xb6>
			stick->position = NORTHWISE;
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	2203      	movs	r2, #3
 80008b6:	749a      	strb	r2, [r3, #18]
			return NORTHWISE;
 80008b8:	2303      	movs	r3, #3
 80008ba:	e003      	b.n	80008c4 <categorizeJoy+0xbe>
		} else {
			stick->position = SOUTHWISE;
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	2202      	movs	r2, #2
 80008c0:	749a      	strb	r2, [r3, #18]
			return SOUTHWISE;
 80008c2:	2302      	movs	r3, #2
		}
	}
 stick->position = CENTERWISE;
 return CENTERWISE; // If they're equal in magnitude they cancel out... Very Unlikely
}
 80008c4:	4618      	mov	r0, r3
 80008c6:	371c      	adds	r7, #28
 80008c8:	46bd      	mov	sp, r7
 80008ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008ce:	4770      	bx	lr

080008d0 <setJoystate>:
	layerHandle = &(keymap[layerNum]);
}

// Set byte

joystate* setJoystate(joystick* left, joystick* right, joystate* handle, uint32_t tresh){
 80008d0:	b580      	push	{r7, lr}
 80008d2:	b086      	sub	sp, #24
 80008d4:	af00      	add	r7, sp, #0
 80008d6:	60f8      	str	r0, [r7, #12]
 80008d8:	60b9      	str	r1, [r7, #8]
 80008da:	607a      	str	r2, [r7, #4]
 80008dc:	603b      	str	r3, [r7, #0]
	*handle = 0; // Reset the bits of the state mask.
 80008de:	687b      	ldr	r3, [r7, #4]
 80008e0:	2200      	movs	r2, #0
 80008e2:	701a      	strb	r2, [r3, #0]

	//TODO Redundant. Can use the joystick struct position.
	enum joydir leftDir = categorizeJoy(left, tresh);
 80008e4:	6839      	ldr	r1, [r7, #0]
 80008e6:	68f8      	ldr	r0, [r7, #12]
 80008e8:	f7ff ff8d 	bl	8000806 <categorizeJoy>
 80008ec:	4603      	mov	r3, r0
 80008ee:	75fb      	strb	r3, [r7, #23]
	enum joydir rightDir = categorizeJoy(right, tresh);
 80008f0:	6839      	ldr	r1, [r7, #0]
 80008f2:	68b8      	ldr	r0, [r7, #8]
 80008f4:	f7ff ff87 	bl	8000806 <categorizeJoy>
 80008f8:	4603      	mov	r3, r0
 80008fa:	75bb      	strb	r3, [r7, #22]



	switch(leftDir){
 80008fc:	7dfb      	ldrb	r3, [r7, #23]
 80008fe:	3b01      	subs	r3, #1
 8000900:	2b03      	cmp	r3, #3
 8000902:	d82b      	bhi.n	800095c <setJoystate+0x8c>
 8000904:	a201      	add	r2, pc, #4	; (adr r2, 800090c <setJoystate+0x3c>)
 8000906:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800090a:	bf00      	nop
 800090c:	0800092d 	.word	0x0800092d
 8000910:	0800093d 	.word	0x0800093d
 8000914:	0800091d 	.word	0x0800091d
 8000918:	0800094d 	.word	0x0800094d
		case NORTHWISE:
			*handle = *handle | LEFT_JOY_UP;
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	781b      	ldrb	r3, [r3, #0]
 8000920:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000924:	b2da      	uxtb	r2, r3
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	701a      	strb	r2, [r3, #0]
			break;
 800092a:	e017      	b.n	800095c <setJoystate+0x8c>
		case EASTWISE:
			*handle = *handle | LEFT_JOY_RIGHT;
 800092c:	687b      	ldr	r3, [r7, #4]
 800092e:	781b      	ldrb	r3, [r3, #0]
 8000930:	f043 0320 	orr.w	r3, r3, #32
 8000934:	b2da      	uxtb	r2, r3
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	701a      	strb	r2, [r3, #0]
			break;
 800093a:	e00f      	b.n	800095c <setJoystate+0x8c>
		case SOUTHWISE:
			*handle = *handle | LEFT_JOY_DOWN;
 800093c:	687b      	ldr	r3, [r7, #4]
 800093e:	781b      	ldrb	r3, [r3, #0]
 8000940:	f043 0310 	orr.w	r3, r3, #16
 8000944:	b2da      	uxtb	r2, r3
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	701a      	strb	r2, [r3, #0]
			break;
 800094a:	e007      	b.n	800095c <setJoystate+0x8c>
		case WESTWISE:
			*handle = *handle | LEFT_JOY_LEFT;
 800094c:	687b      	ldr	r3, [r7, #4]
 800094e:	781b      	ldrb	r3, [r3, #0]
 8000950:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000954:	b2da      	uxtb	r2, r3
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	701a      	strb	r2, [r3, #0]
			break;
 800095a:	bf00      	nop
	}

	switch(rightDir){
 800095c:	7dbb      	ldrb	r3, [r7, #22]
 800095e:	3b01      	subs	r3, #1
 8000960:	2b03      	cmp	r3, #3
 8000962:	d82b      	bhi.n	80009bc <setJoystate+0xec>
 8000964:	a201      	add	r2, pc, #4	; (adr r2, 800096c <setJoystate+0x9c>)
 8000966:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800096a:	bf00      	nop
 800096c:	0800098d 	.word	0x0800098d
 8000970:	0800099d 	.word	0x0800099d
 8000974:	0800097d 	.word	0x0800097d
 8000978:	080009ad 	.word	0x080009ad
		case NORTHWISE:
			*handle = *handle | RIGHT_JOY_UP;
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	781b      	ldrb	r3, [r3, #0]
 8000980:	f043 0304 	orr.w	r3, r3, #4
 8000984:	b2da      	uxtb	r2, r3
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	701a      	strb	r2, [r3, #0]
			break;
 800098a:	e017      	b.n	80009bc <setJoystate+0xec>
		case EASTWISE:
			*handle = *handle | RIGHT_JOY_RIGHT;
 800098c:	687b      	ldr	r3, [r7, #4]
 800098e:	781b      	ldrb	r3, [r3, #0]
 8000990:	f043 0302 	orr.w	r3, r3, #2
 8000994:	b2da      	uxtb	r2, r3
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	701a      	strb	r2, [r3, #0]
			break;
 800099a:	e00f      	b.n	80009bc <setJoystate+0xec>
		case SOUTHWISE:
			*handle = *handle | RIGHT_JOY_DOWN;
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	781b      	ldrb	r3, [r3, #0]
 80009a0:	f043 0301 	orr.w	r3, r3, #1
 80009a4:	b2da      	uxtb	r2, r3
 80009a6:	687b      	ldr	r3, [r7, #4]
 80009a8:	701a      	strb	r2, [r3, #0]
			break;
 80009aa:	e007      	b.n	80009bc <setJoystate+0xec>
		case WESTWISE:
			*handle = *handle | RIGHT_JOY_LEFT;
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	781b      	ldrb	r3, [r3, #0]
 80009b0:	f043 0308 	orr.w	r3, r3, #8
 80009b4:	b2da      	uxtb	r2, r3
 80009b6:	687b      	ldr	r3, [r7, #4]
 80009b8:	701a      	strb	r2, [r3, #0]
			break;
 80009ba:	bf00      	nop
		}

	return handle;
 80009bc:	687b      	ldr	r3, [r7, #4]

}
 80009be:	4618      	mov	r0, r3
 80009c0:	3718      	adds	r7, #24
 80009c2:	46bd      	mov	sp, r7
 80009c4:	bd80      	pop	{r7, pc}
 80009c6:	bf00      	nop

080009c8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009c8:	b590      	push	{r4, r7, lr}
 80009ca:	b0af      	sub	sp, #188	; 0xbc
 80009cc:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009ce:	f000 fafb 	bl	8000fc8 <HAL_Init>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009d2:	f000 f87b 	bl	8000acc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009d6:	f000 f97f 	bl	8000cd8 <MX_GPIO_Init>
  MX_ADC1_Init();
 80009da:	f000 f8e1 	bl	8000ba0 <MX_ADC1_Init>
  MX_DMA_Init();
 80009de:	f000 f95b 	bl	8000c98 <MX_DMA_Init>
  MX_USB_DEVICE_Init();
 80009e2:	f006 fd7b 	bl	80074dc <MX_USB_DEVICE_Init>


	// Init and configure the joysticks.

	joystick rightStick;
	rightStick.xAxis = &analogIn[0];// joystick structs point directly to the buffer data
 80009e6:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80009ea:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	rightStick.yAxis = &analogIn[2];
 80009ee:	f107 0394 	add.w	r3, r7, #148	; 0x94
 80009f2:	3308      	adds	r3, #8
 80009f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	rightStick.xNeutral = 2000;
 80009f8:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 80009fc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	rightStick.yNeutral = 2000;
 8000a00:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a04:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c

	joystick leftStick;
	leftStick.xAxis = &analogIn[1];
 8000a08:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a0c:	3304      	adds	r3, #4
 8000a0e:	673b      	str	r3, [r7, #112]	; 0x70
	leftStick.yAxis = &analogIn[3];
 8000a10:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a14:	330c      	adds	r3, #12
 8000a16:	66fb      	str	r3, [r7, #108]	; 0x6c
	leftStick.xNeutral = 2000;
 8000a18:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a1c:	677b      	str	r3, [r7, #116]	; 0x74
	leftStick.yNeutral = 2000;
 8000a1e:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000a22:	67bb      	str	r3, [r7, #120]	; 0x78

	// Joystick threshold, fornow uniform. TODO granular struct
	uint32_t tresh = 600;
 8000a24:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000a28:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	// Init Layer byteID and active layer handle

	joystate layerByteID = 0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
	Layer* layerHandle = keymap[1];
 8000a32:	4b23      	ldr	r3, [pc, #140]	; (8000ac0 <main+0xf8>)
 8000a34:	685b      	ldr	r3, [r3, #4]
 8000a36:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
	//laery 3 harfautls layer 1 does not...

	// Array of key and pin states

	uint8_t pinStates[NUMBER_OF_KEYS] = {1, 1, 1, 1,     1, 1, 1, 1,
 8000a3a:	4b22      	ldr	r3, [pc, #136]	; (8000ac4 <main+0xfc>)
 8000a3c:	f107 0458 	add.w	r4, r7, #88	; 0x58
 8000a40:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000a42:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			                             1, 1, 1, 1,     1, 1, 1, 1};
	int isHold[NUMBER_OF_KEYS] = {0, 0, 0, 0,     0, 0, 0, 0,
 8000a46:	f107 0318 	add.w	r3, r7, #24
 8000a4a:	2240      	movs	r2, #64	; 0x40
 8000a4c:	2100      	movs	r1, #0
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f007 f996 	bl	8007d80 <memset>
			                      0, 0, 0, 0,     0, 0, 0, 0};
	// Keyboard HID report

	keyboardHIDReport kReport = {0, 0, 0, 0, 0, 0, 0, 0};
 8000a54:	f107 0310 	add.w	r3, r7, #16
 8000a58:	2200      	movs	r2, #0
 8000a5a:	601a      	str	r2, [r3, #0]
 8000a5c:	605a      	str	r2, [r3, #4]
	keyboardHIDReport* pReport = &kReport;
 8000a5e:	f107 0310 	add.w	r3, r7, #16
 8000a62:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  // Start the DMA (?)Not sure why it doesn't run when inited outside the while (1)
	  HAL_ADC_Start_DMA(&hadc1, analogIn, 4);
 8000a66:	f107 0394 	add.w	r3, r7, #148	; 0x94
 8000a6a:	2204      	movs	r2, #4
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4816      	ldr	r0, [pc, #88]	; (8000ac8 <main+0x100>)
 8000a70:	f000 fb84 	bl	800117c <HAL_ADC_Start_DMA>

	  // Set the layer mask to the appropraite id
	  setJoystate(&leftStick, &rightStick, &layerByteID, tresh);
 8000a74:	f107 026b 	add.w	r2, r7, #107	; 0x6b
 8000a78:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8000a7c:	f107 006c 	add.w	r0, r7, #108	; 0x6c
 8000a80:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8000a84:	f7ff ff24 	bl	80008d0 <setJoystate>

	  // Get the pointer handle updated with the current active layer
	  //layerNumToRef(layerHandle, keymap[0], 1);//DEBUG hardcoded q

	  // check pressed keys
	  checkKeyPins(&pinStates[0]);
 8000a88:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8000a8c:	4618      	mov	r0, r3
 8000a8e:	f7ff fd23 	bl	80004d8 <checkKeyPins>

	  // check and set all keyboard related reports
	  //Seems to work until using keymap[0]as the starting point???
	  scanKeys(keymap[0], layerHandle, &isHold[0], pinStates, pReport);
 8000a92:	4b0b      	ldr	r3, [pc, #44]	; (8000ac0 <main+0xf8>)
 8000a94:	6818      	ldr	r0, [r3, #0]
 8000a96:	f107 0158 	add.w	r1, r7, #88	; 0x58
 8000a9a:	f107 0218 	add.w	r2, r7, #24
 8000a9e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8000aa2:	9300      	str	r3, [sp, #0]
 8000aa4:	460b      	mov	r3, r1
 8000aa6:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000aaa:	f7ff fe52 	bl	8000752 <scanKeys>

	  // send report
	  //USBD_HID_SendReport(&hUsbDeviceFS, pReport, sizeof(kReport));
  	  HAL_Delay(100);
 8000aae:	2064      	movs	r0, #100	; 0x64
 8000ab0:	f000 fafc 	bl	80010ac <HAL_Delay>
	  // clear report
	  clearReport(pReport);
 8000ab4:	f8d7 00a4 	ldr.w	r0, [r7, #164]	; 0xa4
 8000ab8:	f7ff fe86 	bl	80007c8 <clearReport>
	  HAL_ADC_Start_DMA(&hadc1, analogIn, 4);
 8000abc:	e7d3      	b.n	8000a66 <main+0x9e>
 8000abe:	bf00      	nop
 8000ac0:	2000036c 	.word	0x2000036c
 8000ac4:	08007da8 	.word	0x08007da8
 8000ac8:	200006f0 	.word	0x200006f0

08000acc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	b094      	sub	sp, #80	; 0x50
 8000ad0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ad2:	f107 0320 	add.w	r3, r7, #32
 8000ad6:	2230      	movs	r2, #48	; 0x30
 8000ad8:	2100      	movs	r1, #0
 8000ada:	4618      	mov	r0, r3
 8000adc:	f007 f950 	bl	8007d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ae0:	f107 030c 	add.w	r3, r7, #12
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000af0:	2300      	movs	r3, #0
 8000af2:	60bb      	str	r3, [r7, #8]
 8000af4:	4b28      	ldr	r3, [pc, #160]	; (8000b98 <SystemClock_Config+0xcc>)
 8000af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000af8:	4a27      	ldr	r2, [pc, #156]	; (8000b98 <SystemClock_Config+0xcc>)
 8000afa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000afe:	6413      	str	r3, [r2, #64]	; 0x40
 8000b00:	4b25      	ldr	r3, [pc, #148]	; (8000b98 <SystemClock_Config+0xcc>)
 8000b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b04:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b08:	60bb      	str	r3, [r7, #8]
 8000b0a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	607b      	str	r3, [r7, #4]
 8000b10:	4b22      	ldr	r3, [pc, #136]	; (8000b9c <SystemClock_Config+0xd0>)
 8000b12:	681b      	ldr	r3, [r3, #0]
 8000b14:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b18:	4a20      	ldr	r2, [pc, #128]	; (8000b9c <SystemClock_Config+0xd0>)
 8000b1a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b1e:	6013      	str	r3, [r2, #0]
 8000b20:	4b1e      	ldr	r3, [pc, #120]	; (8000b9c <SystemClock_Config+0xd0>)
 8000b22:	681b      	ldr	r3, [r3, #0]
 8000b24:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b28:	607b      	str	r3, [r7, #4]
 8000b2a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000b2c:	2301      	movs	r3, #1
 8000b2e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000b30:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000b34:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b36:	2302      	movs	r3, #2
 8000b38:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000b3a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000b3e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000b40:	230f      	movs	r3, #15
 8000b42:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000b44:	2390      	movs	r3, #144	; 0x90
 8000b46:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000b48:	2302      	movs	r3, #2
 8000b4a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000b4c:	2305      	movs	r3, #5
 8000b4e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b50:	f107 0320 	add.w	r3, r7, #32
 8000b54:	4618      	mov	r0, r3
 8000b56:	f002 ff43 	bl	80039e0 <HAL_RCC_OscConfig>
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	2b00      	cmp	r3, #0
 8000b5e:	d001      	beq.n	8000b64 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000b60:	f000 f912 	bl	8000d88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b64:	230f      	movs	r3, #15
 8000b66:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000b68:	2301      	movs	r3, #1
 8000b6a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b6c:	2300      	movs	r3, #0
 8000b6e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b70:	2300      	movs	r3, #0
 8000b72:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b74:	2300      	movs	r3, #0
 8000b76:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000b78:	f107 030c 	add.w	r3, r7, #12
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	4618      	mov	r0, r3
 8000b80:	f003 f9a6 	bl	8003ed0 <HAL_RCC_ClockConfig>
 8000b84:	4603      	mov	r3, r0
 8000b86:	2b00      	cmp	r3, #0
 8000b88:	d001      	beq.n	8000b8e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000b8a:	f000 f8fd 	bl	8000d88 <Error_Handler>
  }
}
 8000b8e:	bf00      	nop
 8000b90:	3750      	adds	r7, #80	; 0x50
 8000b92:	46bd      	mov	sp, r7
 8000b94:	bd80      	pop	{r7, pc}
 8000b96:	bf00      	nop
 8000b98:	40023800 	.word	0x40023800
 8000b9c:	40007000 	.word	0x40007000

08000ba0 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000ba0:	b580      	push	{r7, lr}
 8000ba2:	b084      	sub	sp, #16
 8000ba4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ba6:	463b      	mov	r3, r7
 8000ba8:	2200      	movs	r2, #0
 8000baa:	601a      	str	r2, [r3, #0]
 8000bac:	605a      	str	r2, [r3, #4]
 8000bae:	609a      	str	r2, [r3, #8]
 8000bb0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bb2:	4b36      	ldr	r3, [pc, #216]	; (8000c8c <MX_ADC1_Init+0xec>)
 8000bb4:	4a36      	ldr	r2, [pc, #216]	; (8000c90 <MX_ADC1_Init+0xf0>)
 8000bb6:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000bb8:	4b34      	ldr	r3, [pc, #208]	; (8000c8c <MX_ADC1_Init+0xec>)
 8000bba:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000bbe:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000bc0:	4b32      	ldr	r3, [pc, #200]	; (8000c8c <MX_ADC1_Init+0xec>)
 8000bc2:	2200      	movs	r2, #0
 8000bc4:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000bc6:	4b31      	ldr	r3, [pc, #196]	; (8000c8c <MX_ADC1_Init+0xec>)
 8000bc8:	2201      	movs	r2, #1
 8000bca:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000bcc:	4b2f      	ldr	r3, [pc, #188]	; (8000c8c <MX_ADC1_Init+0xec>)
 8000bce:	2201      	movs	r2, #1
 8000bd0:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bd2:	4b2e      	ldr	r3, [pc, #184]	; (8000c8c <MX_ADC1_Init+0xec>)
 8000bd4:	2200      	movs	r2, #0
 8000bd6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bda:	4b2c      	ldr	r3, [pc, #176]	; (8000c8c <MX_ADC1_Init+0xec>)
 8000bdc:	2200      	movs	r2, #0
 8000bde:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000be0:	4b2a      	ldr	r3, [pc, #168]	; (8000c8c <MX_ADC1_Init+0xec>)
 8000be2:	4a2c      	ldr	r2, [pc, #176]	; (8000c94 <MX_ADC1_Init+0xf4>)
 8000be4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000be6:	4b29      	ldr	r3, [pc, #164]	; (8000c8c <MX_ADC1_Init+0xec>)
 8000be8:	2200      	movs	r2, #0
 8000bea:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000bec:	4b27      	ldr	r3, [pc, #156]	; (8000c8c <MX_ADC1_Init+0xec>)
 8000bee:	2204      	movs	r2, #4
 8000bf0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000bf2:	4b26      	ldr	r3, [pc, #152]	; (8000c8c <MX_ADC1_Init+0xec>)
 8000bf4:	2201      	movs	r2, #1
 8000bf6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000bfa:	4b24      	ldr	r3, [pc, #144]	; (8000c8c <MX_ADC1_Init+0xec>)
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c00:	4822      	ldr	r0, [pc, #136]	; (8000c8c <MX_ADC1_Init+0xec>)
 8000c02:	f000 fa77 	bl	80010f4 <HAL_ADC_Init>
 8000c06:	4603      	mov	r3, r0
 8000c08:	2b00      	cmp	r3, #0
 8000c0a:	d001      	beq.n	8000c10 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c0c:	f000 f8bc 	bl	8000d88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000c10:	2300      	movs	r3, #0
 8000c12:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c14:	2301      	movs	r3, #1
 8000c16:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_15CYCLES;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c1c:	463b      	mov	r3, r7
 8000c1e:	4619      	mov	r1, r3
 8000c20:	481a      	ldr	r0, [pc, #104]	; (8000c8c <MX_ADC1_Init+0xec>)
 8000c22:	f000 fbb9 	bl	8001398 <HAL_ADC_ConfigChannel>
 8000c26:	4603      	mov	r3, r0
 8000c28:	2b00      	cmp	r3, #0
 8000c2a:	d001      	beq.n	8000c30 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c2c:	f000 f8ac 	bl	8000d88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000c30:	2301      	movs	r3, #1
 8000c32:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000c34:	2302      	movs	r3, #2
 8000c36:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c38:	463b      	mov	r3, r7
 8000c3a:	4619      	mov	r1, r3
 8000c3c:	4813      	ldr	r0, [pc, #76]	; (8000c8c <MX_ADC1_Init+0xec>)
 8000c3e:	f000 fbab 	bl	8001398 <HAL_ADC_ConfigChannel>
 8000c42:	4603      	mov	r3, r0
 8000c44:	2b00      	cmp	r3, #0
 8000c46:	d001      	beq.n	8000c4c <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000c48:	f000 f89e 	bl	8000d88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000c50:	2303      	movs	r3, #3
 8000c52:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c54:	463b      	mov	r3, r7
 8000c56:	4619      	mov	r1, r3
 8000c58:	480c      	ldr	r0, [pc, #48]	; (8000c8c <MX_ADC1_Init+0xec>)
 8000c5a:	f000 fb9d 	bl	8001398 <HAL_ADC_ConfigChannel>
 8000c5e:	4603      	mov	r3, r0
 8000c60:	2b00      	cmp	r3, #0
 8000c62:	d001      	beq.n	8000c68 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000c64:	f000 f890 	bl	8000d88 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000c68:	2303      	movs	r3, #3
 8000c6a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c70:	463b      	mov	r3, r7
 8000c72:	4619      	mov	r1, r3
 8000c74:	4805      	ldr	r0, [pc, #20]	; (8000c8c <MX_ADC1_Init+0xec>)
 8000c76:	f000 fb8f 	bl	8001398 <HAL_ADC_ConfigChannel>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	2b00      	cmp	r3, #0
 8000c7e:	d001      	beq.n	8000c84 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000c80:	f000 f882 	bl	8000d88 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c84:	bf00      	nop
 8000c86:	3710      	adds	r7, #16
 8000c88:	46bd      	mov	sp, r7
 8000c8a:	bd80      	pop	{r7, pc}
 8000c8c:	200006f0 	.word	0x200006f0
 8000c90:	40012000 	.word	0x40012000
 8000c94:	0f000001 	.word	0x0f000001

08000c98 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000c98:	b580      	push	{r7, lr}
 8000c9a:	b082      	sub	sp, #8
 8000c9c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c9e:	2300      	movs	r3, #0
 8000ca0:	607b      	str	r3, [r7, #4]
 8000ca2:	4b0c      	ldr	r3, [pc, #48]	; (8000cd4 <MX_DMA_Init+0x3c>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a0b      	ldr	r2, [pc, #44]	; (8000cd4 <MX_DMA_Init+0x3c>)
 8000ca8:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b09      	ldr	r3, [pc, #36]	; (8000cd4 <MX_DMA_Init+0x3c>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000cb6:	607b      	str	r3, [r7, #4]
 8000cb8:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2100      	movs	r1, #0
 8000cbe:	2038      	movs	r0, #56	; 0x38
 8000cc0:	f000 fee5 	bl	8001a8e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000cc4:	2038      	movs	r0, #56	; 0x38
 8000cc6:	f000 fefe 	bl	8001ac6 <HAL_NVIC_EnableIRQ>

}
 8000cca:	bf00      	nop
 8000ccc:	3708      	adds	r7, #8
 8000cce:	46bd      	mov	sp, r7
 8000cd0:	bd80      	pop	{r7, pc}
 8000cd2:	bf00      	nop
 8000cd4:	40023800 	.word	0x40023800

08000cd8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	b088      	sub	sp, #32
 8000cdc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cde:	f107 030c 	add.w	r3, r7, #12
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	601a      	str	r2, [r3, #0]
 8000ce6:	605a      	str	r2, [r3, #4]
 8000ce8:	609a      	str	r2, [r3, #8]
 8000cea:	60da      	str	r2, [r3, #12]
 8000cec:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000cee:	2300      	movs	r3, #0
 8000cf0:	60bb      	str	r3, [r7, #8]
 8000cf2:	4b22      	ldr	r3, [pc, #136]	; (8000d7c <MX_GPIO_Init+0xa4>)
 8000cf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cf6:	4a21      	ldr	r2, [pc, #132]	; (8000d7c <MX_GPIO_Init+0xa4>)
 8000cf8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000cfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000cfe:	4b1f      	ldr	r3, [pc, #124]	; (8000d7c <MX_GPIO_Init+0xa4>)
 8000d00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000d06:	60bb      	str	r3, [r7, #8]
 8000d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	607b      	str	r3, [r7, #4]
 8000d0e:	4b1b      	ldr	r3, [pc, #108]	; (8000d7c <MX_GPIO_Init+0xa4>)
 8000d10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d12:	4a1a      	ldr	r2, [pc, #104]	; (8000d7c <MX_GPIO_Init+0xa4>)
 8000d14:	f043 0301 	orr.w	r3, r3, #1
 8000d18:	6313      	str	r3, [r2, #48]	; 0x30
 8000d1a:	4b18      	ldr	r3, [pc, #96]	; (8000d7c <MX_GPIO_Init+0xa4>)
 8000d1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d1e:	f003 0301 	and.w	r3, r3, #1
 8000d22:	607b      	str	r3, [r7, #4]
 8000d24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	603b      	str	r3, [r7, #0]
 8000d2a:	4b14      	ldr	r3, [pc, #80]	; (8000d7c <MX_GPIO_Init+0xa4>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a13      	ldr	r2, [pc, #76]	; (8000d7c <MX_GPIO_Init+0xa4>)
 8000d30:	f043 0302 	orr.w	r3, r3, #2
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b11      	ldr	r3, [pc, #68]	; (8000d7c <MX_GPIO_Init+0xa4>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0302 	and.w	r3, r3, #2
 8000d3e:	603b      	str	r3, [r7, #0]
 8000d40:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8000d42:	23f0      	movs	r3, #240	; 0xf0
 8000d44:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d46:	2300      	movs	r3, #0
 8000d48:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d4a:	2301      	movs	r3, #1
 8000d4c:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d4e:	f107 030c 	add.w	r3, r7, #12
 8000d52:	4619      	mov	r1, r3
 8000d54:	480a      	ldr	r0, [pc, #40]	; (8000d80 <MX_GPIO_Init+0xa8>)
 8000d56:	f001 fa41 	bl	80021dc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB13 PB15 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8000d5a:	f24a 73f7 	movw	r3, #42999	; 0xa7f7
 8000d5e:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d60:	2300      	movs	r3, #0
 8000d62:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d64:	2301      	movs	r3, #1
 8000d66:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d68:	f107 030c 	add.w	r3, r7, #12
 8000d6c:	4619      	mov	r1, r3
 8000d6e:	4805      	ldr	r0, [pc, #20]	; (8000d84 <MX_GPIO_Init+0xac>)
 8000d70:	f001 fa34 	bl	80021dc <HAL_GPIO_Init>

}
 8000d74:	bf00      	nop
 8000d76:	3720      	adds	r7, #32
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	bd80      	pop	{r7, pc}
 8000d7c:	40023800 	.word	0x40023800
 8000d80:	40020000 	.word	0x40020000
 8000d84:	40020400 	.word	0x40020400

08000d88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000d88:	b480      	push	{r7}
 8000d8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000d8c:	b672      	cpsid	i
}
 8000d8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <Error_Handler+0x8>
	...

08000d94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d94:	b480      	push	{r7}
 8000d96:	b083      	sub	sp, #12
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	607b      	str	r3, [r7, #4]
 8000d9e:	4b10      	ldr	r3, [pc, #64]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000da2:	4a0f      	ldr	r2, [pc, #60]	; (8000de0 <HAL_MspInit+0x4c>)
 8000da4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000da8:	6453      	str	r3, [r2, #68]	; 0x44
 8000daa:	4b0d      	ldr	r3, [pc, #52]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000dae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000db2:	607b      	str	r3, [r7, #4]
 8000db4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db6:	2300      	movs	r3, #0
 8000db8:	603b      	str	r3, [r7, #0]
 8000dba:	4b09      	ldr	r3, [pc, #36]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dbe:	4a08      	ldr	r2, [pc, #32]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000dc4:	6413      	str	r3, [r2, #64]	; 0x40
 8000dc6:	4b06      	ldr	r3, [pc, #24]	; (8000de0 <HAL_MspInit+0x4c>)
 8000dc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000dca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dce:	603b      	str	r3, [r7, #0]
 8000dd0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000dd2:	bf00      	nop
 8000dd4:	370c      	adds	r7, #12
 8000dd6:	46bd      	mov	sp, r7
 8000dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ddc:	4770      	bx	lr
 8000dde:	bf00      	nop
 8000de0:	40023800 	.word	0x40023800

08000de4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b08a      	sub	sp, #40	; 0x28
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dec:	f107 0314 	add.w	r3, r7, #20
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a2f      	ldr	r2, [pc, #188]	; (8000ec0 <HAL_ADC_MspInit+0xdc>)
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d157      	bne.n	8000eb6 <HAL_ADC_MspInit+0xd2>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000e06:	2300      	movs	r3, #0
 8000e08:	613b      	str	r3, [r7, #16]
 8000e0a:	4b2e      	ldr	r3, [pc, #184]	; (8000ec4 <HAL_ADC_MspInit+0xe0>)
 8000e0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e0e:	4a2d      	ldr	r2, [pc, #180]	; (8000ec4 <HAL_ADC_MspInit+0xe0>)
 8000e10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e14:	6453      	str	r3, [r2, #68]	; 0x44
 8000e16:	4b2b      	ldr	r3, [pc, #172]	; (8000ec4 <HAL_ADC_MspInit+0xe0>)
 8000e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000e1e:	613b      	str	r3, [r7, #16]
 8000e20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	2300      	movs	r3, #0
 8000e24:	60fb      	str	r3, [r7, #12]
 8000e26:	4b27      	ldr	r3, [pc, #156]	; (8000ec4 <HAL_ADC_MspInit+0xe0>)
 8000e28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e2a:	4a26      	ldr	r2, [pc, #152]	; (8000ec4 <HAL_ADC_MspInit+0xe0>)
 8000e2c:	f043 0301 	orr.w	r3, r3, #1
 8000e30:	6313      	str	r3, [r2, #48]	; 0x30
 8000e32:	4b24      	ldr	r3, [pc, #144]	; (8000ec4 <HAL_ADC_MspInit+0xe0>)
 8000e34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e36:	f003 0301 	and.w	r3, r3, #1
 8000e3a:	60fb      	str	r3, [r7, #12]
 8000e3c:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000e3e:	230f      	movs	r3, #15
 8000e40:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000e42:	2303      	movs	r3, #3
 8000e44:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e46:	2300      	movs	r3, #0
 8000e48:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e4a:	f107 0314 	add.w	r3, r7, #20
 8000e4e:	4619      	mov	r1, r3
 8000e50:	481d      	ldr	r0, [pc, #116]	; (8000ec8 <HAL_ADC_MspInit+0xe4>)
 8000e52:	f001 f9c3 	bl	80021dc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e58:	4a1d      	ldr	r2, [pc, #116]	; (8000ed0 <HAL_ADC_MspInit+0xec>)
 8000e5a:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e64:	2200      	movs	r2, #0
 8000e66:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e70:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000e74:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 8000e76:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e78:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8000e7c:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8000e7e:	4b13      	ldr	r3, [pc, #76]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e80:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000e84:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_NORMAL;
 8000e86:	4b11      	ldr	r3, [pc, #68]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 8000e8c:	4b0f      	ldr	r3, [pc, #60]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e8e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000e92:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000e94:	4b0d      	ldr	r3, [pc, #52]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000e9a:	480c      	ldr	r0, [pc, #48]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000e9c:	f000 fe2e 	bl	8001afc <HAL_DMA_Init>
 8000ea0:	4603      	mov	r3, r0
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d001      	beq.n	8000eaa <HAL_ADC_MspInit+0xc6>
    {
      Error_Handler();
 8000ea6:	f7ff ff6f 	bl	8000d88 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	4a07      	ldr	r2, [pc, #28]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000eae:	639a      	str	r2, [r3, #56]	; 0x38
 8000eb0:	4a06      	ldr	r2, [pc, #24]	; (8000ecc <HAL_ADC_MspInit+0xe8>)
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000eb6:	bf00      	nop
 8000eb8:	3728      	adds	r7, #40	; 0x28
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}
 8000ebe:	bf00      	nop
 8000ec0:	40012000 	.word	0x40012000
 8000ec4:	40023800 	.word	0x40023800
 8000ec8:	40020000 	.word	0x40020000
 8000ecc:	20000738 	.word	0x20000738
 8000ed0:	40026410 	.word	0x40026410

08000ed4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ed4:	b480      	push	{r7}
 8000ed6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ed8:	e7fe      	b.n	8000ed8 <NMI_Handler+0x4>

08000eda <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000eda:	b480      	push	{r7}
 8000edc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ede:	e7fe      	b.n	8000ede <HardFault_Handler+0x4>

08000ee0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ee0:	b480      	push	{r7}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ee4:	e7fe      	b.n	8000ee4 <MemManage_Handler+0x4>

08000ee6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000eea:	e7fe      	b.n	8000eea <BusFault_Handler+0x4>

08000eec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000eec:	b480      	push	{r7}
 8000eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000ef0:	e7fe      	b.n	8000ef0 <UsageFault_Handler+0x4>

08000ef2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000ef6:	bf00      	nop
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000efe:	4770      	bx	lr

08000f00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000f00:	b480      	push	{r7}
 8000f02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000f04:	bf00      	nop
 8000f06:	46bd      	mov	sp, r7
 8000f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f0c:	4770      	bx	lr

08000f0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f0e:	b480      	push	{r7}
 8000f10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f12:	bf00      	nop
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000f20:	f000 f8a4 	bl	800106c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000f24:	bf00      	nop
 8000f26:	bd80      	pop	{r7, pc}

08000f28 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8000f2c:	4802      	ldr	r0, [pc, #8]	; (8000f38 <DMA2_Stream0_IRQHandler+0x10>)
 8000f2e:	f000 feeb 	bl	8001d08 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8000f32:	bf00      	nop
 8000f34:	bd80      	pop	{r7, pc}
 8000f36:	bf00      	nop
 8000f38:	20000738 	.word	0x20000738

08000f3c <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 8000f40:	4802      	ldr	r0, [pc, #8]	; (8000f4c <OTG_FS_IRQHandler+0x10>)
 8000f42:	f001 fc37 	bl	80027b4 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8000f46:	bf00      	nop
 8000f48:	bd80      	pop	{r7, pc}
 8000f4a:	bf00      	nop
 8000f4c:	20000c7c 	.word	0x20000c7c

08000f50 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000f50:	b480      	push	{r7}
 8000f52:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000f54:	4b06      	ldr	r3, [pc, #24]	; (8000f70 <SystemInit+0x20>)
 8000f56:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f5a:	4a05      	ldr	r2, [pc, #20]	; (8000f70 <SystemInit+0x20>)
 8000f5c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000f60:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000f64:	bf00      	nop
 8000f66:	46bd      	mov	sp, r7
 8000f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f6c:	4770      	bx	lr
 8000f6e:	bf00      	nop
 8000f70:	e000ed00 	.word	0xe000ed00

08000f74 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f74:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000fac <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f78:	480d      	ldr	r0, [pc, #52]	; (8000fb0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f7a:	490e      	ldr	r1, [pc, #56]	; (8000fb4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f7c:	4a0e      	ldr	r2, [pc, #56]	; (8000fb8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f7e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f80:	e002      	b.n	8000f88 <LoopCopyDataInit>

08000f82 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f82:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f84:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f86:	3304      	adds	r3, #4

08000f88 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f88:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f8a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f8c:	d3f9      	bcc.n	8000f82 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f8e:	4a0b      	ldr	r2, [pc, #44]	; (8000fbc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f90:	4c0b      	ldr	r4, [pc, #44]	; (8000fc0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f92:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f94:	e001      	b.n	8000f9a <LoopFillZerobss>

08000f96 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f96:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f98:	3204      	adds	r2, #4

08000f9a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f9a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f9c:	d3fb      	bcc.n	8000f96 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f9e:	f7ff ffd7 	bl	8000f50 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000fa2:	f006 fec9 	bl	8007d38 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000fa6:	f7ff fd0f 	bl	80009c8 <main>
  bx  lr    
 8000faa:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000fac:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 8000fb0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000fb4:	200004e4 	.word	0x200004e4
  ldr r2, =_sidata
 8000fb8:	08007e28 	.word	0x08007e28
  ldr r2, =_sbss
 8000fbc:	200004e4 	.word	0x200004e4
  ldr r4, =_ebss
 8000fc0:	2000119c 	.word	0x2000119c

08000fc4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000fc4:	e7fe      	b.n	8000fc4 <ADC_IRQHandler>
	...

08000fc8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000fcc:	4b0e      	ldr	r3, [pc, #56]	; (8001008 <HAL_Init+0x40>)
 8000fce:	681b      	ldr	r3, [r3, #0]
 8000fd0:	4a0d      	ldr	r2, [pc, #52]	; (8001008 <HAL_Init+0x40>)
 8000fd2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000fd6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000fd8:	4b0b      	ldr	r3, [pc, #44]	; (8001008 <HAL_Init+0x40>)
 8000fda:	681b      	ldr	r3, [r3, #0]
 8000fdc:	4a0a      	ldr	r2, [pc, #40]	; (8001008 <HAL_Init+0x40>)
 8000fde:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000fe2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000fe4:	4b08      	ldr	r3, [pc, #32]	; (8001008 <HAL_Init+0x40>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	4a07      	ldr	r2, [pc, #28]	; (8001008 <HAL_Init+0x40>)
 8000fea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000fee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ff0:	2003      	movs	r0, #3
 8000ff2:	f000 fd41 	bl	8001a78 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000ff6:	200f      	movs	r0, #15
 8000ff8:	f000 f808 	bl	800100c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000ffc:	f7ff feca 	bl	8000d94 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001000:	2300      	movs	r3, #0
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	40023c00 	.word	0x40023c00

0800100c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001014:	4b12      	ldr	r3, [pc, #72]	; (8001060 <HAL_InitTick+0x54>)
 8001016:	681a      	ldr	r2, [r3, #0]
 8001018:	4b12      	ldr	r3, [pc, #72]	; (8001064 <HAL_InitTick+0x58>)
 800101a:	781b      	ldrb	r3, [r3, #0]
 800101c:	4619      	mov	r1, r3
 800101e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001022:	fbb3 f3f1 	udiv	r3, r3, r1
 8001026:	fbb2 f3f3 	udiv	r3, r2, r3
 800102a:	4618      	mov	r0, r3
 800102c:	f000 fd59 	bl	8001ae2 <HAL_SYSTICK_Config>
 8001030:	4603      	mov	r3, r0
 8001032:	2b00      	cmp	r3, #0
 8001034:	d001      	beq.n	800103a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001036:	2301      	movs	r3, #1
 8001038:	e00e      	b.n	8001058 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800103a:	687b      	ldr	r3, [r7, #4]
 800103c:	2b0f      	cmp	r3, #15
 800103e:	d80a      	bhi.n	8001056 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001040:	2200      	movs	r2, #0
 8001042:	6879      	ldr	r1, [r7, #4]
 8001044:	f04f 30ff 	mov.w	r0, #4294967295
 8001048:	f000 fd21 	bl	8001a8e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800104c:	4a06      	ldr	r2, [pc, #24]	; (8001068 <HAL_InitTick+0x5c>)
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001052:	2300      	movs	r3, #0
 8001054:	e000      	b.n	8001058 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001056:	2301      	movs	r3, #1
}
 8001058:	4618      	mov	r0, r3
 800105a:	3708      	adds	r7, #8
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	200003d4 	.word	0x200003d4
 8001064:	200003dc 	.word	0x200003dc
 8001068:	200003d8 	.word	0x200003d8

0800106c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800106c:	b480      	push	{r7}
 800106e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001070:	4b06      	ldr	r3, [pc, #24]	; (800108c <HAL_IncTick+0x20>)
 8001072:	781b      	ldrb	r3, [r3, #0]
 8001074:	461a      	mov	r2, r3
 8001076:	4b06      	ldr	r3, [pc, #24]	; (8001090 <HAL_IncTick+0x24>)
 8001078:	681b      	ldr	r3, [r3, #0]
 800107a:	4413      	add	r3, r2
 800107c:	4a04      	ldr	r2, [pc, #16]	; (8001090 <HAL_IncTick+0x24>)
 800107e:	6013      	str	r3, [r2, #0]
}
 8001080:	bf00      	nop
 8001082:	46bd      	mov	sp, r7
 8001084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001088:	4770      	bx	lr
 800108a:	bf00      	nop
 800108c:	200003dc 	.word	0x200003dc
 8001090:	20000798 	.word	0x20000798

08001094 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001094:	b480      	push	{r7}
 8001096:	af00      	add	r7, sp, #0
  return uwTick;
 8001098:	4b03      	ldr	r3, [pc, #12]	; (80010a8 <HAL_GetTick+0x14>)
 800109a:	681b      	ldr	r3, [r3, #0]
}
 800109c:	4618      	mov	r0, r3
 800109e:	46bd      	mov	sp, r7
 80010a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010a4:	4770      	bx	lr
 80010a6:	bf00      	nop
 80010a8:	20000798 	.word	0x20000798

080010ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b084      	sub	sp, #16
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80010b4:	f7ff ffee 	bl	8001094 <HAL_GetTick>
 80010b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010c4:	d005      	beq.n	80010d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80010c6:	4b0a      	ldr	r3, [pc, #40]	; (80010f0 <HAL_Delay+0x44>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	461a      	mov	r2, r3
 80010cc:	68fb      	ldr	r3, [r7, #12]
 80010ce:	4413      	add	r3, r2
 80010d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80010d2:	bf00      	nop
 80010d4:	f7ff ffde 	bl	8001094 <HAL_GetTick>
 80010d8:	4602      	mov	r2, r0
 80010da:	68bb      	ldr	r3, [r7, #8]
 80010dc:	1ad3      	subs	r3, r2, r3
 80010de:	68fa      	ldr	r2, [r7, #12]
 80010e0:	429a      	cmp	r2, r3
 80010e2:	d8f7      	bhi.n	80010d4 <HAL_Delay+0x28>
  {
  }
}
 80010e4:	bf00      	nop
 80010e6:	bf00      	nop
 80010e8:	3710      	adds	r7, #16
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}
 80010ee:	bf00      	nop
 80010f0:	200003dc 	.word	0x200003dc

080010f4 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b084      	sub	sp, #16
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80010fc:	2300      	movs	r3, #0
 80010fe:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d101      	bne.n	800110a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001106:	2301      	movs	r3, #1
 8001108:	e033      	b.n	8001172 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800110a:	687b      	ldr	r3, [r7, #4]
 800110c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800110e:	2b00      	cmp	r3, #0
 8001110:	d109      	bne.n	8001126 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001112:	6878      	ldr	r0, [r7, #4]
 8001114:	f7ff fe66 	bl	8000de4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001118:	687b      	ldr	r3, [r7, #4]
 800111a:	2200      	movs	r2, #0
 800111c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	2200      	movs	r2, #0
 8001122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800112a:	f003 0310 	and.w	r3, r3, #16
 800112e:	2b00      	cmp	r3, #0
 8001130:	d118      	bne.n	8001164 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001132:	687b      	ldr	r3, [r7, #4]
 8001134:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001136:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800113a:	f023 0302 	bic.w	r3, r3, #2
 800113e:	f043 0202 	orr.w	r2, r3, #2
 8001142:	687b      	ldr	r3, [r7, #4]
 8001144:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001146:	6878      	ldr	r0, [r7, #4]
 8001148:	f000 fa48 	bl	80015dc <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	2200      	movs	r2, #0
 8001150:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001156:	f023 0303 	bic.w	r3, r3, #3
 800115a:	f043 0201 	orr.w	r2, r3, #1
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	641a      	str	r2, [r3, #64]	; 0x40
 8001162:	e001      	b.n	8001168 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8001164:	2301      	movs	r3, #1
 8001166:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8001168:	687b      	ldr	r3, [r7, #4]
 800116a:	2200      	movs	r2, #0
 800116c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8001170:	7bfb      	ldrb	r3, [r7, #15]
}
 8001172:	4618      	mov	r0, r3
 8001174:	3710      	adds	r7, #16
 8001176:	46bd      	mov	sp, r7
 8001178:	bd80      	pop	{r7, pc}
	...

0800117c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 800117c:	b580      	push	{r7, lr}
 800117e:	b086      	sub	sp, #24
 8001180:	af00      	add	r7, sp, #0
 8001182:	60f8      	str	r0, [r7, #12]
 8001184:	60b9      	str	r1, [r7, #8]
 8001186:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8001188:	2300      	movs	r3, #0
 800118a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800118c:	68fb      	ldr	r3, [r7, #12]
 800118e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001192:	2b01      	cmp	r3, #1
 8001194:	d101      	bne.n	800119a <HAL_ADC_Start_DMA+0x1e>
 8001196:	2302      	movs	r3, #2
 8001198:	e0ce      	b.n	8001338 <HAL_ADC_Start_DMA+0x1bc>
 800119a:	68fb      	ldr	r3, [r7, #12]
 800119c:	2201      	movs	r2, #1
 800119e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	681b      	ldr	r3, [r3, #0]
 80011a6:	689b      	ldr	r3, [r3, #8]
 80011a8:	f003 0301 	and.w	r3, r3, #1
 80011ac:	2b01      	cmp	r3, #1
 80011ae:	d018      	beq.n	80011e2 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689a      	ldr	r2, [r3, #8]
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681b      	ldr	r3, [r3, #0]
 80011ba:	f042 0201 	orr.w	r2, r2, #1
 80011be:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80011c0:	4b5f      	ldr	r3, [pc, #380]	; (8001340 <HAL_ADC_Start_DMA+0x1c4>)
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a5f      	ldr	r2, [pc, #380]	; (8001344 <HAL_ADC_Start_DMA+0x1c8>)
 80011c6:	fba2 2303 	umull	r2, r3, r2, r3
 80011ca:	0c9a      	lsrs	r2, r3, #18
 80011cc:	4613      	mov	r3, r2
 80011ce:	005b      	lsls	r3, r3, #1
 80011d0:	4413      	add	r3, r2
 80011d2:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80011d4:	e002      	b.n	80011dc <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 80011d6:	693b      	ldr	r3, [r7, #16]
 80011d8:	3b01      	subs	r3, #1
 80011da:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 80011dc:	693b      	ldr	r3, [r7, #16]
 80011de:	2b00      	cmp	r3, #0
 80011e0:	d1f9      	bne.n	80011d6 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80011ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80011f0:	d107      	bne.n	8001202 <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 80011f2:	68fb      	ldr	r3, [r7, #12]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	68fb      	ldr	r3, [r7, #12]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001200:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8001202:	68fb      	ldr	r3, [r7, #12]
 8001204:	681b      	ldr	r3, [r3, #0]
 8001206:	689b      	ldr	r3, [r3, #8]
 8001208:	f003 0301 	and.w	r3, r3, #1
 800120c:	2b01      	cmp	r3, #1
 800120e:	f040 8086 	bne.w	800131e <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8001212:	68fb      	ldr	r3, [r7, #12]
 8001214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001216:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800121a:	f023 0301 	bic.w	r3, r3, #1
 800121e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001222:	68fb      	ldr	r3, [r7, #12]
 8001224:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001226:	68fb      	ldr	r3, [r7, #12]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	685b      	ldr	r3, [r3, #4]
 800122c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001230:	2b00      	cmp	r3, #0
 8001232:	d007      	beq.n	8001244 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001238:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800123c:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001240:	68fb      	ldr	r3, [r7, #12]
 8001242:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001248:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800124c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001250:	d106      	bne.n	8001260 <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001252:	68fb      	ldr	r3, [r7, #12]
 8001254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001256:	f023 0206 	bic.w	r2, r3, #6
 800125a:	68fb      	ldr	r3, [r7, #12]
 800125c:	645a      	str	r2, [r3, #68]	; 0x44
 800125e:	e002      	b.n	8001266 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001260:	68fb      	ldr	r3, [r7, #12]
 8001262:	2200      	movs	r2, #0
 8001264:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8001266:	68fb      	ldr	r3, [r7, #12]
 8001268:	2200      	movs	r2, #0
 800126a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800126e:	4b36      	ldr	r3, [pc, #216]	; (8001348 <HAL_ADC_Start_DMA+0x1cc>)
 8001270:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8001272:	68fb      	ldr	r3, [r7, #12]
 8001274:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001276:	4a35      	ldr	r2, [pc, #212]	; (800134c <HAL_ADC_Start_DMA+0x1d0>)
 8001278:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800127e:	4a34      	ldr	r2, [pc, #208]	; (8001350 <HAL_ADC_Start_DMA+0x1d4>)
 8001280:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001286:	4a33      	ldr	r2, [pc, #204]	; (8001354 <HAL_ADC_Start_DMA+0x1d8>)
 8001288:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	681b      	ldr	r3, [r3, #0]
 800128e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8001292:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	685a      	ldr	r2, [r3, #4]
 800129a:	68fb      	ldr	r3, [r7, #12]
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80012a2:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	681b      	ldr	r3, [r3, #0]
 80012a8:	689a      	ldr	r2, [r3, #8]
 80012aa:	68fb      	ldr	r3, [r7, #12]
 80012ac:	681b      	ldr	r3, [r3, #0]
 80012ae:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80012b2:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80012b4:	68fb      	ldr	r3, [r7, #12]
 80012b6:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80012b8:	68fb      	ldr	r3, [r7, #12]
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	334c      	adds	r3, #76	; 0x4c
 80012be:	4619      	mov	r1, r3
 80012c0:	68ba      	ldr	r2, [r7, #8]
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	f000 fcc8 	bl	8001c58 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80012c8:	697b      	ldr	r3, [r7, #20]
 80012ca:	685b      	ldr	r3, [r3, #4]
 80012cc:	f003 031f 	and.w	r3, r3, #31
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d10f      	bne.n	80012f4 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80012d4:	68fb      	ldr	r3, [r7, #12]
 80012d6:	681b      	ldr	r3, [r3, #0]
 80012d8:	689b      	ldr	r3, [r3, #8]
 80012da:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d129      	bne.n	8001336 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80012e2:	68fb      	ldr	r3, [r7, #12]
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	689a      	ldr	r2, [r3, #8]
 80012e8:	68fb      	ldr	r3, [r7, #12]
 80012ea:	681b      	ldr	r3, [r3, #0]
 80012ec:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80012f0:	609a      	str	r2, [r3, #8]
 80012f2:	e020      	b.n	8001336 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80012f4:	68fb      	ldr	r3, [r7, #12]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a17      	ldr	r2, [pc, #92]	; (8001358 <HAL_ADC_Start_DMA+0x1dc>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d11b      	bne.n	8001336 <HAL_ADC_Start_DMA+0x1ba>
 80012fe:	68fb      	ldr	r3, [r7, #12]
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	689b      	ldr	r3, [r3, #8]
 8001304:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d114      	bne.n	8001336 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800130c:	68fb      	ldr	r3, [r7, #12]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	689a      	ldr	r2, [r3, #8]
 8001312:	68fb      	ldr	r3, [r7, #12]
 8001314:	681b      	ldr	r3, [r3, #0]
 8001316:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800131a:	609a      	str	r2, [r3, #8]
 800131c:	e00b      	b.n	8001336 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800131e:	68fb      	ldr	r3, [r7, #12]
 8001320:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001322:	f043 0210 	orr.w	r2, r3, #16
 8001326:	68fb      	ldr	r3, [r7, #12]
 8001328:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800132a:	68fb      	ldr	r3, [r7, #12]
 800132c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800132e:	f043 0201 	orr.w	r2, r3, #1
 8001332:	68fb      	ldr	r3, [r7, #12]
 8001334:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001336:	2300      	movs	r3, #0
}
 8001338:	4618      	mov	r0, r3
 800133a:	3718      	adds	r7, #24
 800133c:	46bd      	mov	sp, r7
 800133e:	bd80      	pop	{r7, pc}
 8001340:	200003d4 	.word	0x200003d4
 8001344:	431bde83 	.word	0x431bde83
 8001348:	40012300 	.word	0x40012300
 800134c:	080017d5 	.word	0x080017d5
 8001350:	0800188f 	.word	0x0800188f
 8001354:	080018ab 	.word	0x080018ab
 8001358:	40012000 	.word	0x40012000

0800135c <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 800135c:	b480      	push	{r7}
 800135e:	b083      	sub	sp, #12
 8001360:	af00      	add	r7, sp, #0
 8001362:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8001364:	bf00      	nop
 8001366:	370c      	adds	r7, #12
 8001368:	46bd      	mov	sp, r7
 800136a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800136e:	4770      	bx	lr

08001370 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001370:	b480      	push	{r7}
 8001372:	b083      	sub	sp, #12
 8001374:	af00      	add	r7, sp, #0
 8001376:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8001378:	bf00      	nop
 800137a:	370c      	adds	r7, #12
 800137c:	46bd      	mov	sp, r7
 800137e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001382:	4770      	bx	lr

08001384 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001384:	b480      	push	{r7}
 8001386:	b083      	sub	sp, #12
 8001388:	af00      	add	r7, sp, #0
 800138a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 800138c:	bf00      	nop
 800138e:	370c      	adds	r7, #12
 8001390:	46bd      	mov	sp, r7
 8001392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001396:	4770      	bx	lr

08001398 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8001398:	b480      	push	{r7}
 800139a:	b085      	sub	sp, #20
 800139c:	af00      	add	r7, sp, #0
 800139e:	6078      	str	r0, [r7, #4]
 80013a0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80013a2:	2300      	movs	r3, #0
 80013a4:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013a6:	687b      	ldr	r3, [r7, #4]
 80013a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013ac:	2b01      	cmp	r3, #1
 80013ae:	d101      	bne.n	80013b4 <HAL_ADC_ConfigChannel+0x1c>
 80013b0:	2302      	movs	r3, #2
 80013b2:	e105      	b.n	80015c0 <HAL_ADC_ConfigChannel+0x228>
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	2201      	movs	r2, #1
 80013b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	681b      	ldr	r3, [r3, #0]
 80013c0:	2b09      	cmp	r3, #9
 80013c2:	d925      	bls.n	8001410 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	681b      	ldr	r3, [r3, #0]
 80013c8:	68d9      	ldr	r1, [r3, #12]
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	681b      	ldr	r3, [r3, #0]
 80013ce:	b29b      	uxth	r3, r3
 80013d0:	461a      	mov	r2, r3
 80013d2:	4613      	mov	r3, r2
 80013d4:	005b      	lsls	r3, r3, #1
 80013d6:	4413      	add	r3, r2
 80013d8:	3b1e      	subs	r3, #30
 80013da:	2207      	movs	r2, #7
 80013dc:	fa02 f303 	lsl.w	r3, r2, r3
 80013e0:	43da      	mvns	r2, r3
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	400a      	ands	r2, r1
 80013e8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80013ea:	687b      	ldr	r3, [r7, #4]
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	68d9      	ldr	r1, [r3, #12]
 80013f0:	683b      	ldr	r3, [r7, #0]
 80013f2:	689a      	ldr	r2, [r3, #8]
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681b      	ldr	r3, [r3, #0]
 80013f8:	b29b      	uxth	r3, r3
 80013fa:	4618      	mov	r0, r3
 80013fc:	4603      	mov	r3, r0
 80013fe:	005b      	lsls	r3, r3, #1
 8001400:	4403      	add	r3, r0
 8001402:	3b1e      	subs	r3, #30
 8001404:	409a      	lsls	r2, r3
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	430a      	orrs	r2, r1
 800140c:	60da      	str	r2, [r3, #12]
 800140e:	e022      	b.n	8001456 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	6919      	ldr	r1, [r3, #16]
 8001416:	683b      	ldr	r3, [r7, #0]
 8001418:	681b      	ldr	r3, [r3, #0]
 800141a:	b29b      	uxth	r3, r3
 800141c:	461a      	mov	r2, r3
 800141e:	4613      	mov	r3, r2
 8001420:	005b      	lsls	r3, r3, #1
 8001422:	4413      	add	r3, r2
 8001424:	2207      	movs	r2, #7
 8001426:	fa02 f303 	lsl.w	r3, r2, r3
 800142a:	43da      	mvns	r2, r3
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	400a      	ands	r2, r1
 8001432:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	6919      	ldr	r1, [r3, #16]
 800143a:	683b      	ldr	r3, [r7, #0]
 800143c:	689a      	ldr	r2, [r3, #8]
 800143e:	683b      	ldr	r3, [r7, #0]
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	b29b      	uxth	r3, r3
 8001444:	4618      	mov	r0, r3
 8001446:	4603      	mov	r3, r0
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4403      	add	r3, r0
 800144c:	409a      	lsls	r2, r3
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	430a      	orrs	r2, r1
 8001454:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001456:	683b      	ldr	r3, [r7, #0]
 8001458:	685b      	ldr	r3, [r3, #4]
 800145a:	2b06      	cmp	r3, #6
 800145c:	d824      	bhi.n	80014a8 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001464:	683b      	ldr	r3, [r7, #0]
 8001466:	685a      	ldr	r2, [r3, #4]
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	3b05      	subs	r3, #5
 8001470:	221f      	movs	r2, #31
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	43da      	mvns	r2, r3
 8001478:	687b      	ldr	r3, [r7, #4]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	400a      	ands	r2, r1
 800147e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	681b      	ldr	r3, [r3, #0]
 8001484:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8001486:	683b      	ldr	r3, [r7, #0]
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	b29b      	uxth	r3, r3
 800148c:	4618      	mov	r0, r3
 800148e:	683b      	ldr	r3, [r7, #0]
 8001490:	685a      	ldr	r2, [r3, #4]
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	3b05      	subs	r3, #5
 800149a:	fa00 f203 	lsl.w	r2, r0, r3
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	430a      	orrs	r2, r1
 80014a4:	635a      	str	r2, [r3, #52]	; 0x34
 80014a6:	e04c      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	2b0c      	cmp	r3, #12
 80014ae:	d824      	bhi.n	80014fa <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	681b      	ldr	r3, [r3, #0]
 80014b4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014b6:	683b      	ldr	r3, [r7, #0]
 80014b8:	685a      	ldr	r2, [r3, #4]
 80014ba:	4613      	mov	r3, r2
 80014bc:	009b      	lsls	r3, r3, #2
 80014be:	4413      	add	r3, r2
 80014c0:	3b23      	subs	r3, #35	; 0x23
 80014c2:	221f      	movs	r2, #31
 80014c4:	fa02 f303 	lsl.w	r3, r2, r3
 80014c8:	43da      	mvns	r2, r3
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	400a      	ands	r2, r1
 80014d0:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014d8:	683b      	ldr	r3, [r7, #0]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	b29b      	uxth	r3, r3
 80014de:	4618      	mov	r0, r3
 80014e0:	683b      	ldr	r3, [r7, #0]
 80014e2:	685a      	ldr	r2, [r3, #4]
 80014e4:	4613      	mov	r3, r2
 80014e6:	009b      	lsls	r3, r3, #2
 80014e8:	4413      	add	r3, r2
 80014ea:	3b23      	subs	r3, #35	; 0x23
 80014ec:	fa00 f203 	lsl.w	r2, r0, r3
 80014f0:	687b      	ldr	r3, [r7, #4]
 80014f2:	681b      	ldr	r3, [r3, #0]
 80014f4:	430a      	orrs	r2, r1
 80014f6:	631a      	str	r2, [r3, #48]	; 0x30
 80014f8:	e023      	b.n	8001542 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	681b      	ldr	r3, [r3, #0]
 80014fe:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001500:	683b      	ldr	r3, [r7, #0]
 8001502:	685a      	ldr	r2, [r3, #4]
 8001504:	4613      	mov	r3, r2
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	4413      	add	r3, r2
 800150a:	3b41      	subs	r3, #65	; 0x41
 800150c:	221f      	movs	r2, #31
 800150e:	fa02 f303 	lsl.w	r3, r2, r3
 8001512:	43da      	mvns	r2, r3
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	400a      	ands	r2, r1
 800151a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	681b      	ldr	r3, [r3, #0]
 8001520:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001522:	683b      	ldr	r3, [r7, #0]
 8001524:	681b      	ldr	r3, [r3, #0]
 8001526:	b29b      	uxth	r3, r3
 8001528:	4618      	mov	r0, r3
 800152a:	683b      	ldr	r3, [r7, #0]
 800152c:	685a      	ldr	r2, [r3, #4]
 800152e:	4613      	mov	r3, r2
 8001530:	009b      	lsls	r3, r3, #2
 8001532:	4413      	add	r3, r2
 8001534:	3b41      	subs	r3, #65	; 0x41
 8001536:	fa00 f203 	lsl.w	r2, r0, r3
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	681b      	ldr	r3, [r3, #0]
 800153e:	430a      	orrs	r2, r1
 8001540:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001542:	4b22      	ldr	r3, [pc, #136]	; (80015cc <HAL_ADC_ConfigChannel+0x234>)
 8001544:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800154c:	4293      	cmp	r3, r2
 800154e:	d109      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
 8001550:	683b      	ldr	r3, [r7, #0]
 8001552:	681b      	ldr	r3, [r3, #0]
 8001554:	2b12      	cmp	r3, #18
 8001556:	d105      	bne.n	8001564 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001558:	68fb      	ldr	r3, [r7, #12]
 800155a:	685b      	ldr	r3, [r3, #4]
 800155c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8001560:	68fb      	ldr	r3, [r7, #12]
 8001562:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a19      	ldr	r2, [pc, #100]	; (80015d0 <HAL_ADC_ConfigChannel+0x238>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d123      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
 800156e:	683b      	ldr	r3, [r7, #0]
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	2b10      	cmp	r3, #16
 8001574:	d003      	beq.n	800157e <HAL_ADC_ConfigChannel+0x1e6>
 8001576:	683b      	ldr	r3, [r7, #0]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	2b11      	cmp	r3, #17
 800157c:	d11b      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	685b      	ldr	r3, [r3, #4]
 8001582:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8001586:	68fb      	ldr	r3, [r7, #12]
 8001588:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800158a:	683b      	ldr	r3, [r7, #0]
 800158c:	681b      	ldr	r3, [r3, #0]
 800158e:	2b10      	cmp	r3, #16
 8001590:	d111      	bne.n	80015b6 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8001592:	4b10      	ldr	r3, [pc, #64]	; (80015d4 <HAL_ADC_ConfigChannel+0x23c>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a10      	ldr	r2, [pc, #64]	; (80015d8 <HAL_ADC_ConfigChannel+0x240>)
 8001598:	fba2 2303 	umull	r2, r3, r2, r3
 800159c:	0c9a      	lsrs	r2, r3, #18
 800159e:	4613      	mov	r3, r2
 80015a0:	009b      	lsls	r3, r3, #2
 80015a2:	4413      	add	r3, r2
 80015a4:	005b      	lsls	r3, r3, #1
 80015a6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015a8:	e002      	b.n	80015b0 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80015aa:	68bb      	ldr	r3, [r7, #8]
 80015ac:	3b01      	subs	r3, #1
 80015ae:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80015b0:	68bb      	ldr	r3, [r7, #8]
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d1f9      	bne.n	80015aa <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	2200      	movs	r2, #0
 80015ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80015be:	2300      	movs	r3, #0
}
 80015c0:	4618      	mov	r0, r3
 80015c2:	3714      	adds	r7, #20
 80015c4:	46bd      	mov	sp, r7
 80015c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015ca:	4770      	bx	lr
 80015cc:	40012300 	.word	0x40012300
 80015d0:	40012000 	.word	0x40012000
 80015d4:	200003d4 	.word	0x200003d4
 80015d8:	431bde83 	.word	0x431bde83

080015dc <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80015dc:	b480      	push	{r7}
 80015de:	b085      	sub	sp, #20
 80015e0:	af00      	add	r7, sp, #0
 80015e2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015e4:	4b79      	ldr	r3, [pc, #484]	; (80017cc <ADC_Init+0x1f0>)
 80015e6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80015e8:	68fb      	ldr	r3, [r7, #12]
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	685a      	ldr	r2, [r3, #4]
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	685b      	ldr	r3, [r3, #4]
 80015fc:	431a      	orrs	r2, r3
 80015fe:	68fb      	ldr	r3, [r7, #12]
 8001600:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	681b      	ldr	r3, [r3, #0]
 8001606:	685a      	ldr	r2, [r3, #4]
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8001610:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	6859      	ldr	r1, [r3, #4]
 8001618:	687b      	ldr	r3, [r7, #4]
 800161a:	691b      	ldr	r3, [r3, #16]
 800161c:	021a      	lsls	r2, r3, #8
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	430a      	orrs	r2, r1
 8001624:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001626:	687b      	ldr	r3, [r7, #4]
 8001628:	681b      	ldr	r3, [r3, #0]
 800162a:	685a      	ldr	r2, [r3, #4]
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	681b      	ldr	r3, [r3, #0]
 8001630:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001634:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001636:	687b      	ldr	r3, [r7, #4]
 8001638:	681b      	ldr	r3, [r3, #0]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	689a      	ldr	r2, [r3, #8]
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	430a      	orrs	r2, r1
 8001646:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	687b      	ldr	r3, [r7, #4]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001656:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001658:	687b      	ldr	r3, [r7, #4]
 800165a:	681b      	ldr	r3, [r3, #0]
 800165c:	6899      	ldr	r1, [r3, #8]
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	68da      	ldr	r2, [r3, #12]
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	681b      	ldr	r3, [r3, #0]
 8001666:	430a      	orrs	r2, r1
 8001668:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800166e:	4a58      	ldr	r2, [pc, #352]	; (80017d0 <ADC_Init+0x1f4>)
 8001670:	4293      	cmp	r3, r2
 8001672:	d022      	beq.n	80016ba <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	681b      	ldr	r3, [r3, #0]
 8001678:	689a      	ldr	r2, [r3, #8]
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001682:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	6899      	ldr	r1, [r3, #8]
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800168e:	687b      	ldr	r3, [r7, #4]
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	430a      	orrs	r2, r1
 8001694:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001696:	687b      	ldr	r3, [r7, #4]
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016a4:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	681b      	ldr	r3, [r3, #0]
 80016aa:	6899      	ldr	r1, [r3, #8]
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	430a      	orrs	r2, r1
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	e00f      	b.n	80016da <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	689a      	ldr	r2, [r3, #8]
 80016c0:	687b      	ldr	r3, [r7, #4]
 80016c2:	681b      	ldr	r3, [r3, #0]
 80016c4:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016c8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	681b      	ldr	r3, [r3, #0]
 80016ce:	689a      	ldr	r2, [r3, #8]
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80016d8:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80016da:	687b      	ldr	r3, [r7, #4]
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	689a      	ldr	r2, [r3, #8]
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	f022 0202 	bic.w	r2, r2, #2
 80016e8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	6899      	ldr	r1, [r3, #8]
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	7e1b      	ldrb	r3, [r3, #24]
 80016f4:	005a      	lsls	r2, r3, #1
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	430a      	orrs	r2, r1
 80016fc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001704:	2b00      	cmp	r3, #0
 8001706:	d01b      	beq.n	8001740 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	681b      	ldr	r3, [r3, #0]
 800170c:	685a      	ldr	r2, [r3, #4]
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001716:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	685a      	ldr	r2, [r3, #4]
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001726:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001728:	687b      	ldr	r3, [r7, #4]
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	6859      	ldr	r1, [r3, #4]
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001732:	3b01      	subs	r3, #1
 8001734:	035a      	lsls	r2, r3, #13
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	430a      	orrs	r2, r1
 800173c:	605a      	str	r2, [r3, #4]
 800173e:	e007      	b.n	8001750 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	685a      	ldr	r2, [r3, #4]
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800174e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001756:	687b      	ldr	r3, [r7, #4]
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800175e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69db      	ldr	r3, [r3, #28]
 800176a:	3b01      	subs	r3, #1
 800176c:	051a      	lsls	r2, r3, #20
 800176e:	687b      	ldr	r3, [r7, #4]
 8001770:	681b      	ldr	r3, [r3, #0]
 8001772:	430a      	orrs	r2, r1
 8001774:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	689a      	ldr	r2, [r3, #8]
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001784:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	6899      	ldr	r1, [r3, #8]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001792:	025a      	lsls	r2, r3, #9
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	430a      	orrs	r2, r1
 800179a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	689a      	ldr	r2, [r3, #8]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80017aa:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6899      	ldr	r1, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	695b      	ldr	r3, [r3, #20]
 80017b6:	029a      	lsls	r2, r3, #10
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	681b      	ldr	r3, [r3, #0]
 80017bc:	430a      	orrs	r2, r1
 80017be:	609a      	str	r2, [r3, #8]
}
 80017c0:	bf00      	nop
 80017c2:	3714      	adds	r7, #20
 80017c4:	46bd      	mov	sp, r7
 80017c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ca:	4770      	bx	lr
 80017cc:	40012300 	.word	0x40012300
 80017d0:	0f000001 	.word	0x0f000001

080017d4 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	b084      	sub	sp, #16
 80017d8:	af00      	add	r7, sp, #0
 80017da:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017e0:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017e6:	f003 0350 	and.w	r3, r3, #80	; 0x50
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d13c      	bne.n	8001868 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80017ee:	68fb      	ldr	r3, [r7, #12]
 80017f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017f2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	681b      	ldr	r3, [r3, #0]
 80017fe:	689b      	ldr	r3, [r3, #8]
 8001800:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001804:	2b00      	cmp	r3, #0
 8001806:	d12b      	bne.n	8001860 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001808:	68fb      	ldr	r3, [r7, #12]
 800180a:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800180c:	2b00      	cmp	r3, #0
 800180e:	d127      	bne.n	8001860 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001816:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800181a:	2b00      	cmp	r3, #0
 800181c:	d006      	beq.n	800182c <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	689b      	ldr	r3, [r3, #8]
 8001824:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001828:	2b00      	cmp	r3, #0
 800182a:	d119      	bne.n	8001860 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 800182c:	68fb      	ldr	r3, [r7, #12]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	685a      	ldr	r2, [r3, #4]
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	681b      	ldr	r3, [r3, #0]
 8001836:	f022 0220 	bic.w	r2, r2, #32
 800183a:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800183c:	68fb      	ldr	r3, [r7, #12]
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001844:	68fb      	ldr	r3, [r7, #12]
 8001846:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001848:	68fb      	ldr	r3, [r7, #12]
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001850:	2b00      	cmp	r3, #0
 8001852:	d105      	bne.n	8001860 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001854:	68fb      	ldr	r3, [r7, #12]
 8001856:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001858:	f043 0201 	orr.w	r2, r3, #1
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001860:	68f8      	ldr	r0, [r7, #12]
 8001862:	f7ff fd7b 	bl	800135c <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001866:	e00e      	b.n	8001886 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001868:	68fb      	ldr	r3, [r7, #12]
 800186a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800186c:	f003 0310 	and.w	r3, r3, #16
 8001870:	2b00      	cmp	r3, #0
 8001872:	d003      	beq.n	800187c <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001874:	68f8      	ldr	r0, [r7, #12]
 8001876:	f7ff fd85 	bl	8001384 <HAL_ADC_ErrorCallback>
}
 800187a:	e004      	b.n	8001886 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001880:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001882:	6878      	ldr	r0, [r7, #4]
 8001884:	4798      	blx	r3
}
 8001886:	bf00      	nop
 8001888:	3710      	adds	r7, #16
 800188a:	46bd      	mov	sp, r7
 800188c:	bd80      	pop	{r7, pc}

0800188e <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 800188e:	b580      	push	{r7, lr}
 8001890:	b084      	sub	sp, #16
 8001892:	af00      	add	r7, sp, #0
 8001894:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001896:	687b      	ldr	r3, [r7, #4]
 8001898:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800189a:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 800189c:	68f8      	ldr	r0, [r7, #12]
 800189e:	f7ff fd67 	bl	8001370 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018a2:	bf00      	nop
 80018a4:	3710      	adds	r7, #16
 80018a6:	46bd      	mov	sp, r7
 80018a8:	bd80      	pop	{r7, pc}

080018aa <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 80018aa:	b580      	push	{r7, lr}
 80018ac:	b084      	sub	sp, #16
 80018ae:	af00      	add	r7, sp, #0
 80018b0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80018b6:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 80018b8:	68fb      	ldr	r3, [r7, #12]
 80018ba:	2240      	movs	r2, #64	; 0x40
 80018bc:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018c2:	f043 0204 	orr.w	r2, r3, #4
 80018c6:	68fb      	ldr	r3, [r7, #12]
 80018c8:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 80018ca:	68f8      	ldr	r0, [r7, #12]
 80018cc:	f7ff fd5a 	bl	8001384 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 80018d0:	bf00      	nop
 80018d2:	3710      	adds	r7, #16
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018d8:	b480      	push	{r7}
 80018da:	b085      	sub	sp, #20
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	f003 0307 	and.w	r3, r3, #7
 80018e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018e8:	4b0c      	ldr	r3, [pc, #48]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 80018ea:	68db      	ldr	r3, [r3, #12]
 80018ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018f4:	4013      	ands	r3, r2
 80018f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018fc:	68bb      	ldr	r3, [r7, #8]
 80018fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001900:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001904:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001908:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800190a:	4a04      	ldr	r2, [pc, #16]	; (800191c <__NVIC_SetPriorityGrouping+0x44>)
 800190c:	68bb      	ldr	r3, [r7, #8]
 800190e:	60d3      	str	r3, [r2, #12]
}
 8001910:	bf00      	nop
 8001912:	3714      	adds	r7, #20
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000ed00 	.word	0xe000ed00

08001920 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001920:	b480      	push	{r7}
 8001922:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001924:	4b04      	ldr	r3, [pc, #16]	; (8001938 <__NVIC_GetPriorityGrouping+0x18>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	0a1b      	lsrs	r3, r3, #8
 800192a:	f003 0307 	and.w	r3, r3, #7
}
 800192e:	4618      	mov	r0, r3
 8001930:	46bd      	mov	sp, r7
 8001932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001936:	4770      	bx	lr
 8001938:	e000ed00 	.word	0xe000ed00

0800193c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800193c:	b480      	push	{r7}
 800193e:	b083      	sub	sp, #12
 8001940:	af00      	add	r7, sp, #0
 8001942:	4603      	mov	r3, r0
 8001944:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001946:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800194a:	2b00      	cmp	r3, #0
 800194c:	db0b      	blt.n	8001966 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800194e:	79fb      	ldrb	r3, [r7, #7]
 8001950:	f003 021f 	and.w	r2, r3, #31
 8001954:	4907      	ldr	r1, [pc, #28]	; (8001974 <__NVIC_EnableIRQ+0x38>)
 8001956:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195a:	095b      	lsrs	r3, r3, #5
 800195c:	2001      	movs	r0, #1
 800195e:	fa00 f202 	lsl.w	r2, r0, r2
 8001962:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001966:	bf00      	nop
 8001968:	370c      	adds	r7, #12
 800196a:	46bd      	mov	sp, r7
 800196c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001970:	4770      	bx	lr
 8001972:	bf00      	nop
 8001974:	e000e100 	.word	0xe000e100

08001978 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	6039      	str	r1, [r7, #0]
 8001982:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001984:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001988:	2b00      	cmp	r3, #0
 800198a:	db0a      	blt.n	80019a2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800198c:	683b      	ldr	r3, [r7, #0]
 800198e:	b2da      	uxtb	r2, r3
 8001990:	490c      	ldr	r1, [pc, #48]	; (80019c4 <__NVIC_SetPriority+0x4c>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	0112      	lsls	r2, r2, #4
 8001998:	b2d2      	uxtb	r2, r2
 800199a:	440b      	add	r3, r1
 800199c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019a0:	e00a      	b.n	80019b8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4908      	ldr	r1, [pc, #32]	; (80019c8 <__NVIC_SetPriority+0x50>)
 80019a8:	79fb      	ldrb	r3, [r7, #7]
 80019aa:	f003 030f 	and.w	r3, r3, #15
 80019ae:	3b04      	subs	r3, #4
 80019b0:	0112      	lsls	r2, r2, #4
 80019b2:	b2d2      	uxtb	r2, r2
 80019b4:	440b      	add	r3, r1
 80019b6:	761a      	strb	r2, [r3, #24]
}
 80019b8:	bf00      	nop
 80019ba:	370c      	adds	r7, #12
 80019bc:	46bd      	mov	sp, r7
 80019be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100
 80019c8:	e000ed00 	.word	0xe000ed00

080019cc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b089      	sub	sp, #36	; 0x24
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	60f8      	str	r0, [r7, #12]
 80019d4:	60b9      	str	r1, [r7, #8]
 80019d6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019d8:	68fb      	ldr	r3, [r7, #12]
 80019da:	f003 0307 	and.w	r3, r3, #7
 80019de:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019e0:	69fb      	ldr	r3, [r7, #28]
 80019e2:	f1c3 0307 	rsb	r3, r3, #7
 80019e6:	2b04      	cmp	r3, #4
 80019e8:	bf28      	it	cs
 80019ea:	2304      	movcs	r3, #4
 80019ec:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ee:	69fb      	ldr	r3, [r7, #28]
 80019f0:	3304      	adds	r3, #4
 80019f2:	2b06      	cmp	r3, #6
 80019f4:	d902      	bls.n	80019fc <NVIC_EncodePriority+0x30>
 80019f6:	69fb      	ldr	r3, [r7, #28]
 80019f8:	3b03      	subs	r3, #3
 80019fa:	e000      	b.n	80019fe <NVIC_EncodePriority+0x32>
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a00:	f04f 32ff 	mov.w	r2, #4294967295
 8001a04:	69bb      	ldr	r3, [r7, #24]
 8001a06:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0a:	43da      	mvns	r2, r3
 8001a0c:	68bb      	ldr	r3, [r7, #8]
 8001a0e:	401a      	ands	r2, r3
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a14:	f04f 31ff 	mov.w	r1, #4294967295
 8001a18:	697b      	ldr	r3, [r7, #20]
 8001a1a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a1e:	43d9      	mvns	r1, r3
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a24:	4313      	orrs	r3, r2
         );
}
 8001a26:	4618      	mov	r0, r3
 8001a28:	3724      	adds	r7, #36	; 0x24
 8001a2a:	46bd      	mov	sp, r7
 8001a2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a30:	4770      	bx	lr
	...

08001a34 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	b082      	sub	sp, #8
 8001a38:	af00      	add	r7, sp, #0
 8001a3a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	3b01      	subs	r3, #1
 8001a40:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a44:	d301      	bcc.n	8001a4a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a46:	2301      	movs	r3, #1
 8001a48:	e00f      	b.n	8001a6a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a4a:	4a0a      	ldr	r2, [pc, #40]	; (8001a74 <SysTick_Config+0x40>)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	3b01      	subs	r3, #1
 8001a50:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a52:	210f      	movs	r1, #15
 8001a54:	f04f 30ff 	mov.w	r0, #4294967295
 8001a58:	f7ff ff8e 	bl	8001978 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a5c:	4b05      	ldr	r3, [pc, #20]	; (8001a74 <SysTick_Config+0x40>)
 8001a5e:	2200      	movs	r2, #0
 8001a60:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a62:	4b04      	ldr	r3, [pc, #16]	; (8001a74 <SysTick_Config+0x40>)
 8001a64:	2207      	movs	r2, #7
 8001a66:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	3708      	adds	r7, #8
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	bd80      	pop	{r7, pc}
 8001a72:	bf00      	nop
 8001a74:	e000e010 	.word	0xe000e010

08001a78 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a80:	6878      	ldr	r0, [r7, #4]
 8001a82:	f7ff ff29 	bl	80018d8 <__NVIC_SetPriorityGrouping>
}
 8001a86:	bf00      	nop
 8001a88:	3708      	adds	r7, #8
 8001a8a:	46bd      	mov	sp, r7
 8001a8c:	bd80      	pop	{r7, pc}

08001a8e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a8e:	b580      	push	{r7, lr}
 8001a90:	b086      	sub	sp, #24
 8001a92:	af00      	add	r7, sp, #0
 8001a94:	4603      	mov	r3, r0
 8001a96:	60b9      	str	r1, [r7, #8]
 8001a98:	607a      	str	r2, [r7, #4]
 8001a9a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a9c:	2300      	movs	r3, #0
 8001a9e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aa0:	f7ff ff3e 	bl	8001920 <__NVIC_GetPriorityGrouping>
 8001aa4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001aa6:	687a      	ldr	r2, [r7, #4]
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	6978      	ldr	r0, [r7, #20]
 8001aac:	f7ff ff8e 	bl	80019cc <NVIC_EncodePriority>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001ab6:	4611      	mov	r1, r2
 8001ab8:	4618      	mov	r0, r3
 8001aba:	f7ff ff5d 	bl	8001978 <__NVIC_SetPriority>
}
 8001abe:	bf00      	nop
 8001ac0:	3718      	adds	r7, #24
 8001ac2:	46bd      	mov	sp, r7
 8001ac4:	bd80      	pop	{r7, pc}

08001ac6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001ac6:	b580      	push	{r7, lr}
 8001ac8:	b082      	sub	sp, #8
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	4603      	mov	r3, r0
 8001ace:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ad0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff ff31 	bl	800193c <__NVIC_EnableIRQ>
}
 8001ada:	bf00      	nop
 8001adc:	3708      	adds	r7, #8
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b082      	sub	sp, #8
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aea:	6878      	ldr	r0, [r7, #4]
 8001aec:	f7ff ffa2 	bl	8001a34 <SysTick_Config>
 8001af0:	4603      	mov	r3, r0
}
 8001af2:	4618      	mov	r0, r3
 8001af4:	3708      	adds	r7, #8
 8001af6:	46bd      	mov	sp, r7
 8001af8:	bd80      	pop	{r7, pc}
	...

08001afc <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b086      	sub	sp, #24
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001b04:	2300      	movs	r3, #0
 8001b06:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001b08:	f7ff fac4 	bl	8001094 <HAL_GetTick>
 8001b0c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d101      	bne.n	8001b18 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e099      	b.n	8001c4c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	2202      	movs	r2, #2
 8001b1c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	2200      	movs	r2, #0
 8001b24:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	681a      	ldr	r2, [r3, #0]
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	681b      	ldr	r3, [r3, #0]
 8001b32:	f022 0201 	bic.w	r2, r2, #1
 8001b36:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b38:	e00f      	b.n	8001b5a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b3a:	f7ff faab 	bl	8001094 <HAL_GetTick>
 8001b3e:	4602      	mov	r2, r0
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	1ad3      	subs	r3, r2, r3
 8001b44:	2b05      	cmp	r3, #5
 8001b46:	d908      	bls.n	8001b5a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	2220      	movs	r2, #32
 8001b4c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	2203      	movs	r2, #3
 8001b52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001b56:	2303      	movs	r3, #3
 8001b58:	e078      	b.n	8001c4c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	f003 0301 	and.w	r3, r3, #1
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d1e8      	bne.n	8001b3a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	681b      	ldr	r3, [r3, #0]
 8001b6e:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001b70:	697a      	ldr	r2, [r7, #20]
 8001b72:	4b38      	ldr	r3, [pc, #224]	; (8001c54 <HAL_DMA_Init+0x158>)
 8001b74:	4013      	ands	r3, r2
 8001b76:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	685a      	ldr	r2, [r3, #4]
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	689b      	ldr	r3, [r3, #8]
 8001b80:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001b86:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	691b      	ldr	r3, [r3, #16]
 8001b8c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001b92:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001b9e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	6a1b      	ldr	r3, [r3, #32]
 8001ba4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ba6:	697a      	ldr	r2, [r7, #20]
 8001ba8:	4313      	orrs	r3, r2
 8001baa:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bb0:	2b04      	cmp	r3, #4
 8001bb2:	d107      	bne.n	8001bc4 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bbc:	4313      	orrs	r3, r2
 8001bbe:	697a      	ldr	r2, [r7, #20]
 8001bc0:	4313      	orrs	r3, r2
 8001bc2:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001bc4:	687b      	ldr	r3, [r7, #4]
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	697a      	ldr	r2, [r7, #20]
 8001bca:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	695b      	ldr	r3, [r3, #20]
 8001bd2:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	f023 0307 	bic.w	r3, r3, #7
 8001bda:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001be0:	697a      	ldr	r2, [r7, #20]
 8001be2:	4313      	orrs	r3, r2
 8001be4:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001bea:	2b04      	cmp	r3, #4
 8001bec:	d117      	bne.n	8001c1e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf2:	697a      	ldr	r2, [r7, #20]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d00e      	beq.n	8001c1e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001c00:	6878      	ldr	r0, [r7, #4]
 8001c02:	f000 fa6f 	bl	80020e4 <DMA_CheckFifoParam>
 8001c06:	4603      	mov	r3, r0
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d008      	beq.n	8001c1e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	2240      	movs	r2, #64	; 0x40
 8001c10:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2201      	movs	r2, #1
 8001c16:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001c1a:	2301      	movs	r3, #1
 8001c1c:	e016      	b.n	8001c4c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	697a      	ldr	r2, [r7, #20]
 8001c24:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001c26:	6878      	ldr	r0, [r7, #4]
 8001c28:	f000 fa26 	bl	8002078 <DMA_CalcBaseAndBitshift>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c34:	223f      	movs	r2, #63	; 0x3f
 8001c36:	409a      	lsls	r2, r3
 8001c38:	68fb      	ldr	r3, [r7, #12]
 8001c3a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2201      	movs	r2, #1
 8001c46:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001c4a:	2300      	movs	r3, #0
}
 8001c4c:	4618      	mov	r0, r3
 8001c4e:	3718      	adds	r7, #24
 8001c50:	46bd      	mov	sp, r7
 8001c52:	bd80      	pop	{r7, pc}
 8001c54:	f010803f 	.word	0xf010803f

08001c58 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001c58:	b580      	push	{r7, lr}
 8001c5a:	b086      	sub	sp, #24
 8001c5c:	af00      	add	r7, sp, #0
 8001c5e:	60f8      	str	r0, [r7, #12]
 8001c60:	60b9      	str	r1, [r7, #8]
 8001c62:	607a      	str	r2, [r7, #4]
 8001c64:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001c66:	2300      	movs	r3, #0
 8001c68:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6e:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001c76:	2b01      	cmp	r3, #1
 8001c78:	d101      	bne.n	8001c7e <HAL_DMA_Start_IT+0x26>
 8001c7a:	2302      	movs	r3, #2
 8001c7c:	e040      	b.n	8001d00 <HAL_DMA_Start_IT+0xa8>
 8001c7e:	68fb      	ldr	r3, [r7, #12]
 8001c80:	2201      	movs	r2, #1
 8001c82:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001c86:	68fb      	ldr	r3, [r7, #12]
 8001c88:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d12f      	bne.n	8001cf2 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001c92:	68fb      	ldr	r3, [r7, #12]
 8001c94:	2202      	movs	r2, #2
 8001c96:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	2200      	movs	r2, #0
 8001c9e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001ca0:	683b      	ldr	r3, [r7, #0]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	68b9      	ldr	r1, [r7, #8]
 8001ca6:	68f8      	ldr	r0, [r7, #12]
 8001ca8:	f000 f9b8 	bl	800201c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb0:	223f      	movs	r2, #63	; 0x3f
 8001cb2:	409a      	lsls	r2, r3
 8001cb4:	693b      	ldr	r3, [r7, #16]
 8001cb6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001cb8:	68fb      	ldr	r3, [r7, #12]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	681a      	ldr	r2, [r3, #0]
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	f042 0216 	orr.w	r2, r2, #22
 8001cc6:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d007      	beq.n	8001ce0 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8001cd0:	68fb      	ldr	r3, [r7, #12]
 8001cd2:	681b      	ldr	r3, [r3, #0]
 8001cd4:	681a      	ldr	r2, [r3, #0]
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	681b      	ldr	r3, [r3, #0]
 8001cda:	f042 0208 	orr.w	r2, r2, #8
 8001cde:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8001ce0:	68fb      	ldr	r3, [r7, #12]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	681a      	ldr	r2, [r3, #0]
 8001ce6:	68fb      	ldr	r3, [r7, #12]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f042 0201 	orr.w	r2, r2, #1
 8001cee:	601a      	str	r2, [r3, #0]
 8001cf0:	e005      	b.n	8001cfe <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8001cfa:	2302      	movs	r3, #2
 8001cfc:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8001cfe:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d00:	4618      	mov	r0, r3
 8001d02:	3718      	adds	r7, #24
 8001d04:	46bd      	mov	sp, r7
 8001d06:	bd80      	pop	{r7, pc}

08001d08 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001d08:	b580      	push	{r7, lr}
 8001d0a:	b086      	sub	sp, #24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001d10:	2300      	movs	r3, #0
 8001d12:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001d14:	4b8e      	ldr	r3, [pc, #568]	; (8001f50 <HAL_DMA_IRQHandler+0x248>)
 8001d16:	681b      	ldr	r3, [r3, #0]
 8001d18:	4a8e      	ldr	r2, [pc, #568]	; (8001f54 <HAL_DMA_IRQHandler+0x24c>)
 8001d1a:	fba2 2303 	umull	r2, r3, r2, r3
 8001d1e:	0a9b      	lsrs	r3, r3, #10
 8001d20:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d26:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8001d28:	693b      	ldr	r3, [r7, #16]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d32:	2208      	movs	r2, #8
 8001d34:	409a      	lsls	r2, r3
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	4013      	ands	r3, r2
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d01a      	beq.n	8001d74 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f003 0304 	and.w	r3, r3, #4
 8001d48:	2b00      	cmp	r3, #0
 8001d4a:	d013      	beq.n	8001d74 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	681a      	ldr	r2, [r3, #0]
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f022 0204 	bic.w	r2, r2, #4
 8001d5a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d60:	2208      	movs	r2, #8
 8001d62:	409a      	lsls	r2, r3
 8001d64:	693b      	ldr	r3, [r7, #16]
 8001d66:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d6c:	f043 0201 	orr.w	r2, r3, #1
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d78:	2201      	movs	r2, #1
 8001d7a:	409a      	lsls	r2, r3
 8001d7c:	68fb      	ldr	r3, [r7, #12]
 8001d7e:	4013      	ands	r3, r2
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d012      	beq.n	8001daa <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	681b      	ldr	r3, [r3, #0]
 8001d88:	695b      	ldr	r3, [r3, #20]
 8001d8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d00b      	beq.n	8001daa <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d96:	2201      	movs	r2, #1
 8001d98:	409a      	lsls	r2, r3
 8001d9a:	693b      	ldr	r3, [r7, #16]
 8001d9c:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da2:	f043 0202 	orr.w	r2, r3, #2
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dae:	2204      	movs	r2, #4
 8001db0:	409a      	lsls	r2, r3
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	4013      	ands	r3, r2
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d012      	beq.n	8001de0 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	681b      	ldr	r3, [r3, #0]
 8001dc0:	f003 0302 	and.w	r3, r3, #2
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00b      	beq.n	8001de0 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dcc:	2204      	movs	r2, #4
 8001dce:	409a      	lsls	r2, r3
 8001dd0:	693b      	ldr	r3, [r7, #16]
 8001dd2:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001dd8:	f043 0204 	orr.w	r2, r3, #4
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de4:	2210      	movs	r2, #16
 8001de6:	409a      	lsls	r2, r3
 8001de8:	68fb      	ldr	r3, [r7, #12]
 8001dea:	4013      	ands	r3, r2
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d043      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681b      	ldr	r3, [r3, #0]
 8001df6:	f003 0308 	and.w	r3, r3, #8
 8001dfa:	2b00      	cmp	r3, #0
 8001dfc:	d03c      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e02:	2210      	movs	r2, #16
 8001e04:	409a      	lsls	r2, r3
 8001e06:	693b      	ldr	r3, [r7, #16]
 8001e08:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001e14:	2b00      	cmp	r3, #0
 8001e16:	d018      	beq.n	8001e4a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d108      	bne.n	8001e38 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d024      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	6878      	ldr	r0, [r7, #4]
 8001e34:	4798      	blx	r3
 8001e36:	e01f      	b.n	8001e78 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e3c:	2b00      	cmp	r3, #0
 8001e3e:	d01b      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8001e40:	687b      	ldr	r3, [r7, #4]
 8001e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001e44:	6878      	ldr	r0, [r7, #4]
 8001e46:	4798      	blx	r3
 8001e48:	e016      	b.n	8001e78 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d107      	bne.n	8001e68 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001e58:	687b      	ldr	r3, [r7, #4]
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	681a      	ldr	r2, [r3, #0]
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f022 0208 	bic.w	r2, r2, #8
 8001e66:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d003      	beq.n	8001e78 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e74:	6878      	ldr	r0, [r7, #4]
 8001e76:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e7c:	2220      	movs	r2, #32
 8001e7e:	409a      	lsls	r2, r3
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	4013      	ands	r3, r2
 8001e84:	2b00      	cmp	r3, #0
 8001e86:	f000 808f 	beq.w	8001fa8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	681b      	ldr	r3, [r3, #0]
 8001e90:	f003 0310 	and.w	r3, r3, #16
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	f000 8087 	beq.w	8001fa8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e9e:	2220      	movs	r2, #32
 8001ea0:	409a      	lsls	r2, r3
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8001ea6:	687b      	ldr	r3, [r7, #4]
 8001ea8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001eac:	b2db      	uxtb	r3, r3
 8001eae:	2b05      	cmp	r3, #5
 8001eb0:	d136      	bne.n	8001f20 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	f022 0216 	bic.w	r2, r2, #22
 8001ec0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	695a      	ldr	r2, [r3, #20]
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001ed0:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d103      	bne.n	8001ee2 <HAL_DMA_IRQHandler+0x1da>
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d007      	beq.n	8001ef2 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001ee2:	687b      	ldr	r3, [r7, #4]
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	681a      	ldr	r2, [r3, #0]
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	681b      	ldr	r3, [r3, #0]
 8001eec:	f022 0208 	bic.w	r2, r2, #8
 8001ef0:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ef6:	223f      	movs	r2, #63	; 0x3f
 8001ef8:	409a      	lsls	r2, r3
 8001efa:	693b      	ldr	r3, [r7, #16]
 8001efc:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	2201      	movs	r2, #1
 8001f02:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	2200      	movs	r2, #0
 8001f0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d07e      	beq.n	8002014 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8001f16:	687b      	ldr	r3, [r7, #4]
 8001f18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001f1a:	6878      	ldr	r0, [r7, #4]
 8001f1c:	4798      	blx	r3
        }
        return;
 8001f1e:	e079      	b.n	8002014 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	681b      	ldr	r3, [r3, #0]
 8001f26:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d01d      	beq.n	8001f6a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d10d      	bne.n	8001f58 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d031      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8001f44:	687b      	ldr	r3, [r7, #4]
 8001f46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f48:	6878      	ldr	r0, [r7, #4]
 8001f4a:	4798      	blx	r3
 8001f4c:	e02c      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x2a0>
 8001f4e:	bf00      	nop
 8001f50:	200003d4 	.word	0x200003d4
 8001f54:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d023      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f64:	6878      	ldr	r0, [r7, #4]
 8001f66:	4798      	blx	r3
 8001f68:	e01e      	b.n	8001fa8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f74:	2b00      	cmp	r3, #0
 8001f76:	d10f      	bne.n	8001f98 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	681a      	ldr	r2, [r3, #0]
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	f022 0210 	bic.w	r2, r2, #16
 8001f86:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	2200      	movs	r2, #0
 8001f94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f9c:	2b00      	cmp	r3, #0
 8001f9e:	d003      	beq.n	8001fa8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8001fa0:	687b      	ldr	r3, [r7, #4]
 8001fa2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fac:	2b00      	cmp	r3, #0
 8001fae:	d032      	beq.n	8002016 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d022      	beq.n	8002002 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2205      	movs	r2, #5
 8001fc0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	681a      	ldr	r2, [r3, #0]
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	681b      	ldr	r3, [r3, #0]
 8001fce:	f022 0201 	bic.w	r2, r2, #1
 8001fd2:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	3301      	adds	r3, #1
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	697a      	ldr	r2, [r7, #20]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	d307      	bcc.n	8001ff0 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	681b      	ldr	r3, [r3, #0]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d1f2      	bne.n	8001fd4 <HAL_DMA_IRQHandler+0x2cc>
 8001fee:	e000      	b.n	8001ff2 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8001ff0:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8001ff2:	687b      	ldr	r3, [r7, #4]
 8001ff4:	2201      	movs	r2, #1
 8001ff6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002006:	2b00      	cmp	r3, #0
 8002008:	d005      	beq.n	8002016 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800200a:	687b      	ldr	r3, [r7, #4]
 800200c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800200e:	6878      	ldr	r0, [r7, #4]
 8002010:	4798      	blx	r3
 8002012:	e000      	b.n	8002016 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002014:	bf00      	nop
    }
  }
}
 8002016:	3718      	adds	r7, #24
 8002018:	46bd      	mov	sp, r7
 800201a:	bd80      	pop	{r7, pc}

0800201c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800201c:	b480      	push	{r7}
 800201e:	b085      	sub	sp, #20
 8002020:	af00      	add	r7, sp, #0
 8002022:	60f8      	str	r0, [r7, #12]
 8002024:	60b9      	str	r1, [r7, #8]
 8002026:	607a      	str	r2, [r7, #4]
 8002028:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800202a:	68fb      	ldr	r3, [r7, #12]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	68fb      	ldr	r3, [r7, #12]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002038:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800203a:	68fb      	ldr	r3, [r7, #12]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	683a      	ldr	r2, [r7, #0]
 8002040:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8002042:	68fb      	ldr	r3, [r7, #12]
 8002044:	689b      	ldr	r3, [r3, #8]
 8002046:	2b40      	cmp	r3, #64	; 0x40
 8002048:	d108      	bne.n	800205c <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	687a      	ldr	r2, [r7, #4]
 8002050:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	681b      	ldr	r3, [r3, #0]
 8002056:	68ba      	ldr	r2, [r7, #8]
 8002058:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 800205a:	e007      	b.n	800206c <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 800205c:	68fb      	ldr	r3, [r7, #12]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	68ba      	ldr	r2, [r7, #8]
 8002062:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8002064:	68fb      	ldr	r3, [r7, #12]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	60da      	str	r2, [r3, #12]
}
 800206c:	bf00      	nop
 800206e:	3714      	adds	r7, #20
 8002070:	46bd      	mov	sp, r7
 8002072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002076:	4770      	bx	lr

08002078 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002078:	b480      	push	{r7}
 800207a:	b085      	sub	sp, #20
 800207c:	af00      	add	r7, sp, #0
 800207e:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	681b      	ldr	r3, [r3, #0]
 8002084:	b2db      	uxtb	r3, r3
 8002086:	3b10      	subs	r3, #16
 8002088:	4a14      	ldr	r2, [pc, #80]	; (80020dc <DMA_CalcBaseAndBitshift+0x64>)
 800208a:	fba2 2303 	umull	r2, r3, r2, r3
 800208e:	091b      	lsrs	r3, r3, #4
 8002090:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8002092:	4a13      	ldr	r2, [pc, #76]	; (80020e0 <DMA_CalcBaseAndBitshift+0x68>)
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	4413      	add	r3, r2
 8002098:	781b      	ldrb	r3, [r3, #0]
 800209a:	461a      	mov	r2, r3
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80020a0:	68fb      	ldr	r3, [r7, #12]
 80020a2:	2b03      	cmp	r3, #3
 80020a4:	d909      	bls.n	80020ba <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80020a6:	687b      	ldr	r3, [r7, #4]
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020ae:	f023 0303 	bic.w	r3, r3, #3
 80020b2:	1d1a      	adds	r2, r3, #4
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	659a      	str	r2, [r3, #88]	; 0x58
 80020b8:	e007      	b.n	80020ca <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80020c2:	f023 0303 	bic.w	r3, r3, #3
 80020c6:	687a      	ldr	r2, [r7, #4]
 80020c8:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3714      	adds	r7, #20
 80020d2:	46bd      	mov	sp, r7
 80020d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020d8:	4770      	bx	lr
 80020da:	bf00      	nop
 80020dc:	aaaaaaab 	.word	0xaaaaaaab
 80020e0:	08007e10 	.word	0x08007e10

080020e4 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 80020e4:	b480      	push	{r7}
 80020e6:	b085      	sub	sp, #20
 80020e8:	af00      	add	r7, sp, #0
 80020ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80020ec:	2300      	movs	r3, #0
 80020ee:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020f4:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	699b      	ldr	r3, [r3, #24]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d11f      	bne.n	800213e <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 80020fe:	68bb      	ldr	r3, [r7, #8]
 8002100:	2b03      	cmp	r3, #3
 8002102:	d856      	bhi.n	80021b2 <DMA_CheckFifoParam+0xce>
 8002104:	a201      	add	r2, pc, #4	; (adr r2, 800210c <DMA_CheckFifoParam+0x28>)
 8002106:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800210a:	bf00      	nop
 800210c:	0800211d 	.word	0x0800211d
 8002110:	0800212f 	.word	0x0800212f
 8002114:	0800211d 	.word	0x0800211d
 8002118:	080021b3 	.word	0x080021b3
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002120:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002124:	2b00      	cmp	r3, #0
 8002126:	d046      	beq.n	80021b6 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002128:	2301      	movs	r3, #1
 800212a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800212c:	e043      	b.n	80021b6 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002132:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002136:	d140      	bne.n	80021ba <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800213c:	e03d      	b.n	80021ba <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	699b      	ldr	r3, [r3, #24]
 8002142:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002146:	d121      	bne.n	800218c <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	2b03      	cmp	r3, #3
 800214c:	d837      	bhi.n	80021be <DMA_CheckFifoParam+0xda>
 800214e:	a201      	add	r2, pc, #4	; (adr r2, 8002154 <DMA_CheckFifoParam+0x70>)
 8002150:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002154:	08002165 	.word	0x08002165
 8002158:	0800216b 	.word	0x0800216b
 800215c:	08002165 	.word	0x08002165
 8002160:	0800217d 	.word	0x0800217d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002164:	2301      	movs	r3, #1
 8002166:	73fb      	strb	r3, [r7, #15]
      break;
 8002168:	e030      	b.n	80021cc <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800216e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002172:	2b00      	cmp	r3, #0
 8002174:	d025      	beq.n	80021c2 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8002176:	2301      	movs	r3, #1
 8002178:	73fb      	strb	r3, [r7, #15]
      }
      break;
 800217a:	e022      	b.n	80021c2 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002180:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002184:	d11f      	bne.n	80021c6 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8002186:	2301      	movs	r3, #1
 8002188:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800218a:	e01c      	b.n	80021c6 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	2b02      	cmp	r3, #2
 8002190:	d903      	bls.n	800219a <DMA_CheckFifoParam+0xb6>
 8002192:	68bb      	ldr	r3, [r7, #8]
 8002194:	2b03      	cmp	r3, #3
 8002196:	d003      	beq.n	80021a0 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002198:	e018      	b.n	80021cc <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800219a:	2301      	movs	r3, #1
 800219c:	73fb      	strb	r3, [r7, #15]
      break;
 800219e:	e015      	b.n	80021cc <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021a4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d00e      	beq.n	80021ca <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80021ac:	2301      	movs	r3, #1
 80021ae:	73fb      	strb	r3, [r7, #15]
      break;
 80021b0:	e00b      	b.n	80021ca <DMA_CheckFifoParam+0xe6>
      break;
 80021b2:	bf00      	nop
 80021b4:	e00a      	b.n	80021cc <DMA_CheckFifoParam+0xe8>
      break;
 80021b6:	bf00      	nop
 80021b8:	e008      	b.n	80021cc <DMA_CheckFifoParam+0xe8>
      break;
 80021ba:	bf00      	nop
 80021bc:	e006      	b.n	80021cc <DMA_CheckFifoParam+0xe8>
      break;
 80021be:	bf00      	nop
 80021c0:	e004      	b.n	80021cc <DMA_CheckFifoParam+0xe8>
      break;
 80021c2:	bf00      	nop
 80021c4:	e002      	b.n	80021cc <DMA_CheckFifoParam+0xe8>
      break;   
 80021c6:	bf00      	nop
 80021c8:	e000      	b.n	80021cc <DMA_CheckFifoParam+0xe8>
      break;
 80021ca:	bf00      	nop
    }
  } 
  
  return status; 
 80021cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80021ce:	4618      	mov	r0, r3
 80021d0:	3714      	adds	r7, #20
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr
 80021da:	bf00      	nop

080021dc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80021dc:	b480      	push	{r7}
 80021de:	b089      	sub	sp, #36	; 0x24
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80021e6:	2300      	movs	r3, #0
 80021e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80021ea:	2300      	movs	r3, #0
 80021ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80021ee:	2300      	movs	r3, #0
 80021f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80021f2:	2300      	movs	r3, #0
 80021f4:	61fb      	str	r3, [r7, #28]
 80021f6:	e159      	b.n	80024ac <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80021f8:	2201      	movs	r2, #1
 80021fa:	69fb      	ldr	r3, [r7, #28]
 80021fc:	fa02 f303 	lsl.w	r3, r2, r3
 8002200:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002202:	683b      	ldr	r3, [r7, #0]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	697a      	ldr	r2, [r7, #20]
 8002208:	4013      	ands	r3, r2
 800220a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800220c:	693a      	ldr	r2, [r7, #16]
 800220e:	697b      	ldr	r3, [r7, #20]
 8002210:	429a      	cmp	r2, r3
 8002212:	f040 8148 	bne.w	80024a6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002216:	683b      	ldr	r3, [r7, #0]
 8002218:	685b      	ldr	r3, [r3, #4]
 800221a:	f003 0303 	and.w	r3, r3, #3
 800221e:	2b01      	cmp	r3, #1
 8002220:	d005      	beq.n	800222e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002222:	683b      	ldr	r3, [r7, #0]
 8002224:	685b      	ldr	r3, [r3, #4]
 8002226:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800222a:	2b02      	cmp	r3, #2
 800222c:	d130      	bne.n	8002290 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	689b      	ldr	r3, [r3, #8]
 8002232:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002234:	69fb      	ldr	r3, [r7, #28]
 8002236:	005b      	lsls	r3, r3, #1
 8002238:	2203      	movs	r2, #3
 800223a:	fa02 f303 	lsl.w	r3, r2, r3
 800223e:	43db      	mvns	r3, r3
 8002240:	69ba      	ldr	r2, [r7, #24]
 8002242:	4013      	ands	r3, r2
 8002244:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002246:	683b      	ldr	r3, [r7, #0]
 8002248:	68da      	ldr	r2, [r3, #12]
 800224a:	69fb      	ldr	r3, [r7, #28]
 800224c:	005b      	lsls	r3, r3, #1
 800224e:	fa02 f303 	lsl.w	r3, r2, r3
 8002252:	69ba      	ldr	r2, [r7, #24]
 8002254:	4313      	orrs	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	69ba      	ldr	r2, [r7, #24]
 800225c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	685b      	ldr	r3, [r3, #4]
 8002262:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002264:	2201      	movs	r2, #1
 8002266:	69fb      	ldr	r3, [r7, #28]
 8002268:	fa02 f303 	lsl.w	r3, r2, r3
 800226c:	43db      	mvns	r3, r3
 800226e:	69ba      	ldr	r2, [r7, #24]
 8002270:	4013      	ands	r3, r2
 8002272:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002274:	683b      	ldr	r3, [r7, #0]
 8002276:	685b      	ldr	r3, [r3, #4]
 8002278:	091b      	lsrs	r3, r3, #4
 800227a:	f003 0201 	and.w	r2, r3, #1
 800227e:	69fb      	ldr	r3, [r7, #28]
 8002280:	fa02 f303 	lsl.w	r3, r2, r3
 8002284:	69ba      	ldr	r2, [r7, #24]
 8002286:	4313      	orrs	r3, r2
 8002288:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	69ba      	ldr	r2, [r7, #24]
 800228e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	685b      	ldr	r3, [r3, #4]
 8002294:	f003 0303 	and.w	r3, r3, #3
 8002298:	2b03      	cmp	r3, #3
 800229a:	d017      	beq.n	80022cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	68db      	ldr	r3, [r3, #12]
 80022a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80022a2:	69fb      	ldr	r3, [r7, #28]
 80022a4:	005b      	lsls	r3, r3, #1
 80022a6:	2203      	movs	r2, #3
 80022a8:	fa02 f303 	lsl.w	r3, r2, r3
 80022ac:	43db      	mvns	r3, r3
 80022ae:	69ba      	ldr	r2, [r7, #24]
 80022b0:	4013      	ands	r3, r2
 80022b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80022b4:	683b      	ldr	r3, [r7, #0]
 80022b6:	689a      	ldr	r2, [r3, #8]
 80022b8:	69fb      	ldr	r3, [r7, #28]
 80022ba:	005b      	lsls	r3, r3, #1
 80022bc:	fa02 f303 	lsl.w	r3, r2, r3
 80022c0:	69ba      	ldr	r2, [r7, #24]
 80022c2:	4313      	orrs	r3, r2
 80022c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80022c6:	687b      	ldr	r3, [r7, #4]
 80022c8:	69ba      	ldr	r2, [r7, #24]
 80022ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022cc:	683b      	ldr	r3, [r7, #0]
 80022ce:	685b      	ldr	r3, [r3, #4]
 80022d0:	f003 0303 	and.w	r3, r3, #3
 80022d4:	2b02      	cmp	r3, #2
 80022d6:	d123      	bne.n	8002320 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80022d8:	69fb      	ldr	r3, [r7, #28]
 80022da:	08da      	lsrs	r2, r3, #3
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	3208      	adds	r2, #8
 80022e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80022e6:	69fb      	ldr	r3, [r7, #28]
 80022e8:	f003 0307 	and.w	r3, r3, #7
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	220f      	movs	r2, #15
 80022f0:	fa02 f303 	lsl.w	r3, r2, r3
 80022f4:	43db      	mvns	r3, r3
 80022f6:	69ba      	ldr	r2, [r7, #24]
 80022f8:	4013      	ands	r3, r2
 80022fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80022fc:	683b      	ldr	r3, [r7, #0]
 80022fe:	691a      	ldr	r2, [r3, #16]
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	f003 0307 	and.w	r3, r3, #7
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	fa02 f303 	lsl.w	r3, r2, r3
 800230c:	69ba      	ldr	r2, [r7, #24]
 800230e:	4313      	orrs	r3, r2
 8002310:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002312:	69fb      	ldr	r3, [r7, #28]
 8002314:	08da      	lsrs	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	3208      	adds	r2, #8
 800231a:	69b9      	ldr	r1, [r7, #24]
 800231c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002326:	69fb      	ldr	r3, [r7, #28]
 8002328:	005b      	lsls	r3, r3, #1
 800232a:	2203      	movs	r2, #3
 800232c:	fa02 f303 	lsl.w	r3, r2, r3
 8002330:	43db      	mvns	r3, r3
 8002332:	69ba      	ldr	r2, [r7, #24]
 8002334:	4013      	ands	r3, r2
 8002336:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	f003 0203 	and.w	r2, r3, #3
 8002340:	69fb      	ldr	r3, [r7, #28]
 8002342:	005b      	lsls	r3, r3, #1
 8002344:	fa02 f303 	lsl.w	r3, r2, r3
 8002348:	69ba      	ldr	r2, [r7, #24]
 800234a:	4313      	orrs	r3, r2
 800234c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	69ba      	ldr	r2, [r7, #24]
 8002352:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	685b      	ldr	r3, [r3, #4]
 8002358:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800235c:	2b00      	cmp	r3, #0
 800235e:	f000 80a2 	beq.w	80024a6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	60fb      	str	r3, [r7, #12]
 8002366:	4b57      	ldr	r3, [pc, #348]	; (80024c4 <HAL_GPIO_Init+0x2e8>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	4a56      	ldr	r2, [pc, #344]	; (80024c4 <HAL_GPIO_Init+0x2e8>)
 800236c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002370:	6453      	str	r3, [r2, #68]	; 0x44
 8002372:	4b54      	ldr	r3, [pc, #336]	; (80024c4 <HAL_GPIO_Init+0x2e8>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800237a:	60fb      	str	r3, [r7, #12]
 800237c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800237e:	4a52      	ldr	r2, [pc, #328]	; (80024c8 <HAL_GPIO_Init+0x2ec>)
 8002380:	69fb      	ldr	r3, [r7, #28]
 8002382:	089b      	lsrs	r3, r3, #2
 8002384:	3302      	adds	r3, #2
 8002386:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800238a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	f003 0303 	and.w	r3, r3, #3
 8002392:	009b      	lsls	r3, r3, #2
 8002394:	220f      	movs	r2, #15
 8002396:	fa02 f303 	lsl.w	r3, r2, r3
 800239a:	43db      	mvns	r3, r3
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	4013      	ands	r3, r2
 80023a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	4a49      	ldr	r2, [pc, #292]	; (80024cc <HAL_GPIO_Init+0x2f0>)
 80023a6:	4293      	cmp	r3, r2
 80023a8:	d019      	beq.n	80023de <HAL_GPIO_Init+0x202>
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	4a48      	ldr	r2, [pc, #288]	; (80024d0 <HAL_GPIO_Init+0x2f4>)
 80023ae:	4293      	cmp	r3, r2
 80023b0:	d013      	beq.n	80023da <HAL_GPIO_Init+0x1fe>
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	4a47      	ldr	r2, [pc, #284]	; (80024d4 <HAL_GPIO_Init+0x2f8>)
 80023b6:	4293      	cmp	r3, r2
 80023b8:	d00d      	beq.n	80023d6 <HAL_GPIO_Init+0x1fa>
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	4a46      	ldr	r2, [pc, #280]	; (80024d8 <HAL_GPIO_Init+0x2fc>)
 80023be:	4293      	cmp	r3, r2
 80023c0:	d007      	beq.n	80023d2 <HAL_GPIO_Init+0x1f6>
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	4a45      	ldr	r2, [pc, #276]	; (80024dc <HAL_GPIO_Init+0x300>)
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d101      	bne.n	80023ce <HAL_GPIO_Init+0x1f2>
 80023ca:	2304      	movs	r3, #4
 80023cc:	e008      	b.n	80023e0 <HAL_GPIO_Init+0x204>
 80023ce:	2307      	movs	r3, #7
 80023d0:	e006      	b.n	80023e0 <HAL_GPIO_Init+0x204>
 80023d2:	2303      	movs	r3, #3
 80023d4:	e004      	b.n	80023e0 <HAL_GPIO_Init+0x204>
 80023d6:	2302      	movs	r3, #2
 80023d8:	e002      	b.n	80023e0 <HAL_GPIO_Init+0x204>
 80023da:	2301      	movs	r3, #1
 80023dc:	e000      	b.n	80023e0 <HAL_GPIO_Init+0x204>
 80023de:	2300      	movs	r3, #0
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	f002 0203 	and.w	r2, r2, #3
 80023e6:	0092      	lsls	r2, r2, #2
 80023e8:	4093      	lsls	r3, r2
 80023ea:	69ba      	ldr	r2, [r7, #24]
 80023ec:	4313      	orrs	r3, r2
 80023ee:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80023f0:	4935      	ldr	r1, [pc, #212]	; (80024c8 <HAL_GPIO_Init+0x2ec>)
 80023f2:	69fb      	ldr	r3, [r7, #28]
 80023f4:	089b      	lsrs	r3, r3, #2
 80023f6:	3302      	adds	r3, #2
 80023f8:	69ba      	ldr	r2, [r7, #24]
 80023fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80023fe:	4b38      	ldr	r3, [pc, #224]	; (80024e0 <HAL_GPIO_Init+0x304>)
 8002400:	689b      	ldr	r3, [r3, #8]
 8002402:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002404:	693b      	ldr	r3, [r7, #16]
 8002406:	43db      	mvns	r3, r3
 8002408:	69ba      	ldr	r2, [r7, #24]
 800240a:	4013      	ands	r3, r2
 800240c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800240e:	683b      	ldr	r3, [r7, #0]
 8002410:	685b      	ldr	r3, [r3, #4]
 8002412:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800241a:	69ba      	ldr	r2, [r7, #24]
 800241c:	693b      	ldr	r3, [r7, #16]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002422:	4a2f      	ldr	r2, [pc, #188]	; (80024e0 <HAL_GPIO_Init+0x304>)
 8002424:	69bb      	ldr	r3, [r7, #24]
 8002426:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002428:	4b2d      	ldr	r3, [pc, #180]	; (80024e0 <HAL_GPIO_Init+0x304>)
 800242a:	68db      	ldr	r3, [r3, #12]
 800242c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800242e:	693b      	ldr	r3, [r7, #16]
 8002430:	43db      	mvns	r3, r3
 8002432:	69ba      	ldr	r2, [r7, #24]
 8002434:	4013      	ands	r3, r2
 8002436:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002438:	683b      	ldr	r3, [r7, #0]
 800243a:	685b      	ldr	r3, [r3, #4]
 800243c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d003      	beq.n	800244c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002444:	69ba      	ldr	r2, [r7, #24]
 8002446:	693b      	ldr	r3, [r7, #16]
 8002448:	4313      	orrs	r3, r2
 800244a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800244c:	4a24      	ldr	r2, [pc, #144]	; (80024e0 <HAL_GPIO_Init+0x304>)
 800244e:	69bb      	ldr	r3, [r7, #24]
 8002450:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002452:	4b23      	ldr	r3, [pc, #140]	; (80024e0 <HAL_GPIO_Init+0x304>)
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	43db      	mvns	r3, r3
 800245c:	69ba      	ldr	r2, [r7, #24]
 800245e:	4013      	ands	r3, r2
 8002460:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800246a:	2b00      	cmp	r3, #0
 800246c:	d003      	beq.n	8002476 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800246e:	69ba      	ldr	r2, [r7, #24]
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	4313      	orrs	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002476:	4a1a      	ldr	r2, [pc, #104]	; (80024e0 <HAL_GPIO_Init+0x304>)
 8002478:	69bb      	ldr	r3, [r7, #24]
 800247a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800247c:	4b18      	ldr	r3, [pc, #96]	; (80024e0 <HAL_GPIO_Init+0x304>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002482:	693b      	ldr	r3, [r7, #16]
 8002484:	43db      	mvns	r3, r3
 8002486:	69ba      	ldr	r2, [r7, #24]
 8002488:	4013      	ands	r3, r2
 800248a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	685b      	ldr	r3, [r3, #4]
 8002490:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002494:	2b00      	cmp	r3, #0
 8002496:	d003      	beq.n	80024a0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002498:	69ba      	ldr	r2, [r7, #24]
 800249a:	693b      	ldr	r3, [r7, #16]
 800249c:	4313      	orrs	r3, r2
 800249e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80024a0:	4a0f      	ldr	r2, [pc, #60]	; (80024e0 <HAL_GPIO_Init+0x304>)
 80024a2:	69bb      	ldr	r3, [r7, #24]
 80024a4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80024a6:	69fb      	ldr	r3, [r7, #28]
 80024a8:	3301      	adds	r3, #1
 80024aa:	61fb      	str	r3, [r7, #28]
 80024ac:	69fb      	ldr	r3, [r7, #28]
 80024ae:	2b0f      	cmp	r3, #15
 80024b0:	f67f aea2 	bls.w	80021f8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80024b4:	bf00      	nop
 80024b6:	bf00      	nop
 80024b8:	3724      	adds	r7, #36	; 0x24
 80024ba:	46bd      	mov	sp, r7
 80024bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c0:	4770      	bx	lr
 80024c2:	bf00      	nop
 80024c4:	40023800 	.word	0x40023800
 80024c8:	40013800 	.word	0x40013800
 80024cc:	40020000 	.word	0x40020000
 80024d0:	40020400 	.word	0x40020400
 80024d4:	40020800 	.word	0x40020800
 80024d8:	40020c00 	.word	0x40020c00
 80024dc:	40021000 	.word	0x40021000
 80024e0:	40013c00 	.word	0x40013c00

080024e4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80024e4:	b480      	push	{r7}
 80024e6:	b085      	sub	sp, #20
 80024e8:	af00      	add	r7, sp, #0
 80024ea:	6078      	str	r0, [r7, #4]
 80024ec:	460b      	mov	r3, r1
 80024ee:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	691a      	ldr	r2, [r3, #16]
 80024f4:	887b      	ldrh	r3, [r7, #2]
 80024f6:	4013      	ands	r3, r2
 80024f8:	2b00      	cmp	r3, #0
 80024fa:	d002      	beq.n	8002502 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80024fc:	2301      	movs	r3, #1
 80024fe:	73fb      	strb	r3, [r7, #15]
 8002500:	e001      	b.n	8002506 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002502:	2300      	movs	r3, #0
 8002504:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002506:	7bfb      	ldrb	r3, [r7, #15]
}
 8002508:	4618      	mov	r0, r3
 800250a:	3714      	adds	r7, #20
 800250c:	46bd      	mov	sp, r7
 800250e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002512:	4770      	bx	lr

08002514 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002514:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002516:	b08f      	sub	sp, #60	; 0x3c
 8002518:	af0a      	add	r7, sp, #40	; 0x28
 800251a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2b00      	cmp	r3, #0
 8002520:	d101      	bne.n	8002526 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e10f      	b.n	8002746 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 8002532:	b2db      	uxtb	r3, r3
 8002534:	2b00      	cmp	r3, #0
 8002536:	d106      	bne.n	8002546 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	2200      	movs	r2, #0
 800253c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f005 f901 	bl	8007748 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	2203      	movs	r2, #3
 800254a:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800254e:	68bb      	ldr	r3, [r7, #8]
 8002550:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002552:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002556:	2b00      	cmp	r3, #0
 8002558:	d102      	bne.n	8002560 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	2200      	movs	r2, #0
 800255e:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	4618      	mov	r0, r3
 8002566:	f001 ff80 	bl	800446a <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	681b      	ldr	r3, [r3, #0]
 800256e:	603b      	str	r3, [r7, #0]
 8002570:	687e      	ldr	r6, [r7, #4]
 8002572:	466d      	mov	r5, sp
 8002574:	f106 0410 	add.w	r4, r6, #16
 8002578:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800257a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800257c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800257e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002580:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002584:	e885 0003 	stmia.w	r5, {r0, r1}
 8002588:	1d33      	adds	r3, r6, #4
 800258a:	cb0e      	ldmia	r3, {r1, r2, r3}
 800258c:	6838      	ldr	r0, [r7, #0]
 800258e:	f001 fe57 	bl	8004240 <USB_CoreInit>
 8002592:	4603      	mov	r3, r0
 8002594:	2b00      	cmp	r3, #0
 8002596:	d005      	beq.n	80025a4 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2202      	movs	r2, #2
 800259c:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80025a0:	2301      	movs	r3, #1
 80025a2:	e0d0      	b.n	8002746 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	681b      	ldr	r3, [r3, #0]
 80025a8:	2100      	movs	r1, #0
 80025aa:	4618      	mov	r0, r3
 80025ac:	f001 ff6e 	bl	800448c <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80025b0:	2300      	movs	r3, #0
 80025b2:	73fb      	strb	r3, [r7, #15]
 80025b4:	e04a      	b.n	800264c <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80025b6:	7bfa      	ldrb	r2, [r7, #15]
 80025b8:	6879      	ldr	r1, [r7, #4]
 80025ba:	4613      	mov	r3, r2
 80025bc:	00db      	lsls	r3, r3, #3
 80025be:	4413      	add	r3, r2
 80025c0:	009b      	lsls	r3, r3, #2
 80025c2:	440b      	add	r3, r1
 80025c4:	333d      	adds	r3, #61	; 0x3d
 80025c6:	2201      	movs	r2, #1
 80025c8:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 80025ca:	7bfa      	ldrb	r2, [r7, #15]
 80025cc:	6879      	ldr	r1, [r7, #4]
 80025ce:	4613      	mov	r3, r2
 80025d0:	00db      	lsls	r3, r3, #3
 80025d2:	4413      	add	r3, r2
 80025d4:	009b      	lsls	r3, r3, #2
 80025d6:	440b      	add	r3, r1
 80025d8:	333c      	adds	r3, #60	; 0x3c
 80025da:	7bfa      	ldrb	r2, [r7, #15]
 80025dc:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 80025de:	7bfa      	ldrb	r2, [r7, #15]
 80025e0:	7bfb      	ldrb	r3, [r7, #15]
 80025e2:	b298      	uxth	r0, r3
 80025e4:	6879      	ldr	r1, [r7, #4]
 80025e6:	4613      	mov	r3, r2
 80025e8:	00db      	lsls	r3, r3, #3
 80025ea:	4413      	add	r3, r2
 80025ec:	009b      	lsls	r3, r3, #2
 80025ee:	440b      	add	r3, r1
 80025f0:	3344      	adds	r3, #68	; 0x44
 80025f2:	4602      	mov	r2, r0
 80025f4:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 80025f6:	7bfa      	ldrb	r2, [r7, #15]
 80025f8:	6879      	ldr	r1, [r7, #4]
 80025fa:	4613      	mov	r3, r2
 80025fc:	00db      	lsls	r3, r3, #3
 80025fe:	4413      	add	r3, r2
 8002600:	009b      	lsls	r3, r3, #2
 8002602:	440b      	add	r3, r1
 8002604:	3340      	adds	r3, #64	; 0x40
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800260a:	7bfa      	ldrb	r2, [r7, #15]
 800260c:	6879      	ldr	r1, [r7, #4]
 800260e:	4613      	mov	r3, r2
 8002610:	00db      	lsls	r3, r3, #3
 8002612:	4413      	add	r3, r2
 8002614:	009b      	lsls	r3, r3, #2
 8002616:	440b      	add	r3, r1
 8002618:	3348      	adds	r3, #72	; 0x48
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800261e:	7bfa      	ldrb	r2, [r7, #15]
 8002620:	6879      	ldr	r1, [r7, #4]
 8002622:	4613      	mov	r3, r2
 8002624:	00db      	lsls	r3, r3, #3
 8002626:	4413      	add	r3, r2
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	440b      	add	r3, r1
 800262c:	334c      	adds	r3, #76	; 0x4c
 800262e:	2200      	movs	r2, #0
 8002630:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002632:	7bfa      	ldrb	r2, [r7, #15]
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	4613      	mov	r3, r2
 8002638:	00db      	lsls	r3, r3, #3
 800263a:	4413      	add	r3, r2
 800263c:	009b      	lsls	r3, r3, #2
 800263e:	440b      	add	r3, r1
 8002640:	3354      	adds	r3, #84	; 0x54
 8002642:	2200      	movs	r2, #0
 8002644:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002646:	7bfb      	ldrb	r3, [r7, #15]
 8002648:	3301      	adds	r3, #1
 800264a:	73fb      	strb	r3, [r7, #15]
 800264c:	7bfa      	ldrb	r2, [r7, #15]
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	429a      	cmp	r2, r3
 8002654:	d3af      	bcc.n	80025b6 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002656:	2300      	movs	r3, #0
 8002658:	73fb      	strb	r3, [r7, #15]
 800265a:	e044      	b.n	80026e6 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800265c:	7bfa      	ldrb	r2, [r7, #15]
 800265e:	6879      	ldr	r1, [r7, #4]
 8002660:	4613      	mov	r3, r2
 8002662:	00db      	lsls	r3, r3, #3
 8002664:	4413      	add	r3, r2
 8002666:	009b      	lsls	r3, r3, #2
 8002668:	440b      	add	r3, r1
 800266a:	f203 237d 	addw	r3, r3, #637	; 0x27d
 800266e:	2200      	movs	r2, #0
 8002670:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002672:	7bfa      	ldrb	r2, [r7, #15]
 8002674:	6879      	ldr	r1, [r7, #4]
 8002676:	4613      	mov	r3, r2
 8002678:	00db      	lsls	r3, r3, #3
 800267a:	4413      	add	r3, r2
 800267c:	009b      	lsls	r3, r3, #2
 800267e:	440b      	add	r3, r1
 8002680:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 8002684:	7bfa      	ldrb	r2, [r7, #15]
 8002686:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002688:	7bfa      	ldrb	r2, [r7, #15]
 800268a:	6879      	ldr	r1, [r7, #4]
 800268c:	4613      	mov	r3, r2
 800268e:	00db      	lsls	r3, r3, #3
 8002690:	4413      	add	r3, r2
 8002692:	009b      	lsls	r3, r3, #2
 8002694:	440b      	add	r3, r1
 8002696:	f503 7320 	add.w	r3, r3, #640	; 0x280
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800269e:	7bfa      	ldrb	r2, [r7, #15]
 80026a0:	6879      	ldr	r1, [r7, #4]
 80026a2:	4613      	mov	r3, r2
 80026a4:	00db      	lsls	r3, r3, #3
 80026a6:	4413      	add	r3, r2
 80026a8:	009b      	lsls	r3, r3, #2
 80026aa:	440b      	add	r3, r1
 80026ac:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80026b0:	2200      	movs	r2, #0
 80026b2:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80026b4:	7bfa      	ldrb	r2, [r7, #15]
 80026b6:	6879      	ldr	r1, [r7, #4]
 80026b8:	4613      	mov	r3, r2
 80026ba:	00db      	lsls	r3, r3, #3
 80026bc:	4413      	add	r3, r2
 80026be:	009b      	lsls	r3, r3, #2
 80026c0:	440b      	add	r3, r1
 80026c2:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 80026c6:	2200      	movs	r2, #0
 80026c8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80026ca:	7bfa      	ldrb	r2, [r7, #15]
 80026cc:	6879      	ldr	r1, [r7, #4]
 80026ce:	4613      	mov	r3, r2
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4413      	add	r3, r2
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	440b      	add	r3, r1
 80026d8:	f503 7325 	add.w	r3, r3, #660	; 0x294
 80026dc:	2200      	movs	r2, #0
 80026de:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80026e0:	7bfb      	ldrb	r3, [r7, #15]
 80026e2:	3301      	adds	r3, #1
 80026e4:	73fb      	strb	r3, [r7, #15]
 80026e6:	7bfa      	ldrb	r2, [r7, #15]
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d3b5      	bcc.n	800265c <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	603b      	str	r3, [r7, #0]
 80026f6:	687e      	ldr	r6, [r7, #4]
 80026f8:	466d      	mov	r5, sp
 80026fa:	f106 0410 	add.w	r4, r6, #16
 80026fe:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002700:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002702:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002704:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002706:	e894 0003 	ldmia.w	r4, {r0, r1}
 800270a:	e885 0003 	stmia.w	r5, {r0, r1}
 800270e:	1d33      	adds	r3, r6, #4
 8002710:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002712:	6838      	ldr	r0, [r7, #0]
 8002714:	f001 ff06 	bl	8004524 <USB_DevInit>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d005      	beq.n	800272a <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	2202      	movs	r2, #2
 8002722:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002726:	2301      	movs	r3, #1
 8002728:	e00d      	b.n	8002746 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	2200      	movs	r2, #0
 800272e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	2201      	movs	r2, #1
 8002736:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	4618      	mov	r0, r3
 8002740:	f003 f855 	bl	80057ee <USB_DevDisconnect>

  return HAL_OK;
 8002744:	2300      	movs	r3, #0
}
 8002746:	4618      	mov	r0, r3
 8002748:	3714      	adds	r7, #20
 800274a:	46bd      	mov	sp, r7
 800274c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800274e <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800274e:	b580      	push	{r7, lr}
 8002750:	b084      	sub	sp, #16
 8002752:	af00      	add	r7, sp, #0
 8002754:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002762:	2b01      	cmp	r3, #1
 8002764:	d101      	bne.n	800276a <HAL_PCD_Start+0x1c>
 8002766:	2302      	movs	r3, #2
 8002768:	e020      	b.n	80027ac <HAL_PCD_Start+0x5e>
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	2201      	movs	r2, #1
 800276e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002776:	2b01      	cmp	r3, #1
 8002778:	d109      	bne.n	800278e <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 800277e:	2b01      	cmp	r3, #1
 8002780:	d005      	beq.n	800278e <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002786:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	4618      	mov	r0, r3
 8002794:	f001 fe58 	bl	8004448 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4618      	mov	r0, r3
 800279e:	f003 f805 	bl	80057ac <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	2200      	movs	r2, #0
 80027a6:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80027aa:	2300      	movs	r3, #0
}
 80027ac:	4618      	mov	r0, r3
 80027ae:	3710      	adds	r7, #16
 80027b0:	46bd      	mov	sp, r7
 80027b2:	bd80      	pop	{r7, pc}

080027b4 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 80027b4:	b590      	push	{r4, r7, lr}
 80027b6:	b08d      	sub	sp, #52	; 0x34
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80027c2:	6a3b      	ldr	r3, [r7, #32]
 80027c4:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4618      	mov	r0, r3
 80027cc:	f003 f8c3 	bl	8005956 <USB_GetMode>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f040 848a 	bne.w	80030ec <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4618      	mov	r0, r3
 80027de:	f003 f827 	bl	8005830 <USB_ReadInterrupts>
 80027e2:	4603      	mov	r3, r0
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	f000 8480 	beq.w	80030ea <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 80027ea:	69fb      	ldr	r3, [r7, #28]
 80027ec:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	0a1b      	lsrs	r3, r3, #8
 80027f4:	f3c3 020d 	ubfx	r2, r3, #0, #14
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 80027fe:	687b      	ldr	r3, [r7, #4]
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	4618      	mov	r0, r3
 8002804:	f003 f814 	bl	8005830 <USB_ReadInterrupts>
 8002808:	4603      	mov	r3, r0
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	2b02      	cmp	r3, #2
 8002810:	d107      	bne.n	8002822 <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	695a      	ldr	r2, [r3, #20]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f002 0202 	and.w	r2, r2, #2
 8002820:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f003 f802 	bl	8005830 <USB_ReadInterrupts>
 800282c:	4603      	mov	r3, r0
 800282e:	f003 0310 	and.w	r3, r3, #16
 8002832:	2b10      	cmp	r3, #16
 8002834:	d161      	bne.n	80028fa <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	699a      	ldr	r2, [r3, #24]
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f022 0210 	bic.w	r2, r2, #16
 8002844:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002846:	6a3b      	ldr	r3, [r7, #32]
 8002848:	6a1b      	ldr	r3, [r3, #32]
 800284a:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	f003 020f 	and.w	r2, r3, #15
 8002852:	4613      	mov	r3, r2
 8002854:	00db      	lsls	r3, r3, #3
 8002856:	4413      	add	r3, r2
 8002858:	009b      	lsls	r3, r3, #2
 800285a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800285e:	687a      	ldr	r2, [r7, #4]
 8002860:	4413      	add	r3, r2
 8002862:	3304      	adds	r3, #4
 8002864:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002866:	69bb      	ldr	r3, [r7, #24]
 8002868:	0c5b      	lsrs	r3, r3, #17
 800286a:	f003 030f 	and.w	r3, r3, #15
 800286e:	2b02      	cmp	r3, #2
 8002870:	d124      	bne.n	80028bc <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002872:	69ba      	ldr	r2, [r7, #24]
 8002874:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002878:	4013      	ands	r3, r2
 800287a:	2b00      	cmp	r3, #0
 800287c:	d035      	beq.n	80028ea <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 800287e:	697b      	ldr	r3, [r7, #20]
 8002880:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002882:	69bb      	ldr	r3, [r7, #24]
 8002884:	091b      	lsrs	r3, r3, #4
 8002886:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002888:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800288c:	b29b      	uxth	r3, r3
 800288e:	461a      	mov	r2, r3
 8002890:	6a38      	ldr	r0, [r7, #32]
 8002892:	f002 fe39 	bl	8005508 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002896:	697b      	ldr	r3, [r7, #20]
 8002898:	691a      	ldr	r2, [r3, #16]
 800289a:	69bb      	ldr	r3, [r7, #24]
 800289c:	091b      	lsrs	r3, r3, #4
 800289e:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028a2:	441a      	add	r2, r3
 80028a4:	697b      	ldr	r3, [r7, #20]
 80028a6:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028a8:	697b      	ldr	r3, [r7, #20]
 80028aa:	6a1a      	ldr	r2, [r3, #32]
 80028ac:	69bb      	ldr	r3, [r7, #24]
 80028ae:	091b      	lsrs	r3, r3, #4
 80028b0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028b4:	441a      	add	r2, r3
 80028b6:	697b      	ldr	r3, [r7, #20]
 80028b8:	621a      	str	r2, [r3, #32]
 80028ba:	e016      	b.n	80028ea <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 80028bc:	69bb      	ldr	r3, [r7, #24]
 80028be:	0c5b      	lsrs	r3, r3, #17
 80028c0:	f003 030f 	and.w	r3, r3, #15
 80028c4:	2b06      	cmp	r3, #6
 80028c6:	d110      	bne.n	80028ea <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80028ce:	2208      	movs	r2, #8
 80028d0:	4619      	mov	r1, r3
 80028d2:	6a38      	ldr	r0, [r7, #32]
 80028d4:	f002 fe18 	bl	8005508 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 80028d8:	697b      	ldr	r3, [r7, #20]
 80028da:	6a1a      	ldr	r2, [r3, #32]
 80028dc:	69bb      	ldr	r3, [r7, #24]
 80028de:	091b      	lsrs	r3, r3, #4
 80028e0:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80028e4:	441a      	add	r2, r3
 80028e6:	697b      	ldr	r3, [r7, #20]
 80028e8:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	699a      	ldr	r2, [r3, #24]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f042 0210 	orr.w	r2, r2, #16
 80028f8:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	681b      	ldr	r3, [r3, #0]
 80028fe:	4618      	mov	r0, r3
 8002900:	f002 ff96 	bl	8005830 <USB_ReadInterrupts>
 8002904:	4603      	mov	r3, r0
 8002906:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800290a:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 800290e:	f040 80a7 	bne.w	8002a60 <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002912:	2300      	movs	r3, #0
 8002914:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	4618      	mov	r0, r3
 800291c:	f002 ff9b 	bl	8005856 <USB_ReadDevAllOutEpInterrupt>
 8002920:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002922:	e099      	b.n	8002a58 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 808e 	beq.w	8002a4c <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002936:	b2d2      	uxtb	r2, r2
 8002938:	4611      	mov	r1, r2
 800293a:	4618      	mov	r0, r3
 800293c:	f002 ffbf 	bl	80058be <USB_ReadDevOutEPInterrupt>
 8002940:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002942:	693b      	ldr	r3, [r7, #16]
 8002944:	f003 0301 	and.w	r3, r3, #1
 8002948:	2b00      	cmp	r3, #0
 800294a:	d00c      	beq.n	8002966 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 800294c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294e:	015a      	lsls	r2, r3, #5
 8002950:	69fb      	ldr	r3, [r7, #28]
 8002952:	4413      	add	r3, r2
 8002954:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002958:	461a      	mov	r2, r3
 800295a:	2301      	movs	r3, #1
 800295c:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 800295e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002960:	6878      	ldr	r0, [r7, #4]
 8002962:	f000 feab 	bl	80036bc <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	f003 0308 	and.w	r3, r3, #8
 800296c:	2b00      	cmp	r3, #0
 800296e:	d00c      	beq.n	800298a <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002970:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002972:	015a      	lsls	r2, r3, #5
 8002974:	69fb      	ldr	r3, [r7, #28]
 8002976:	4413      	add	r3, r2
 8002978:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800297c:	461a      	mov	r2, r3
 800297e:	2308      	movs	r3, #8
 8002980:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002982:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002984:	6878      	ldr	r0, [r7, #4]
 8002986:	f000 ff81 	bl	800388c <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 800298a:	693b      	ldr	r3, [r7, #16]
 800298c:	f003 0310 	and.w	r3, r3, #16
 8002990:	2b00      	cmp	r3, #0
 8002992:	d008      	beq.n	80029a6 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002994:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002996:	015a      	lsls	r2, r3, #5
 8002998:	69fb      	ldr	r3, [r7, #28]
 800299a:	4413      	add	r3, r2
 800299c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80029a0:	461a      	mov	r2, r3
 80029a2:	2310      	movs	r3, #16
 80029a4:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	f003 0302 	and.w	r3, r3, #2
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d030      	beq.n	8002a12 <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 80029b0:	6a3b      	ldr	r3, [r7, #32]
 80029b2:	695b      	ldr	r3, [r3, #20]
 80029b4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80029b8:	2b80      	cmp	r3, #128	; 0x80
 80029ba:	d109      	bne.n	80029d0 <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 80029bc:	69fb      	ldr	r3, [r7, #28]
 80029be:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80029c2:	685b      	ldr	r3, [r3, #4]
 80029c4:	69fa      	ldr	r2, [r7, #28]
 80029c6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80029ca:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80029ce:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 80029d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80029d2:	4613      	mov	r3, r2
 80029d4:	00db      	lsls	r3, r3, #3
 80029d6:	4413      	add	r3, r2
 80029d8:	009b      	lsls	r3, r3, #2
 80029da:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80029de:	687a      	ldr	r2, [r7, #4]
 80029e0:	4413      	add	r3, r2
 80029e2:	3304      	adds	r3, #4
 80029e4:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 80029e6:	697b      	ldr	r3, [r7, #20]
 80029e8:	78db      	ldrb	r3, [r3, #3]
 80029ea:	2b01      	cmp	r3, #1
 80029ec:	d108      	bne.n	8002a00 <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	2200      	movs	r2, #0
 80029f2:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 80029f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80029f6:	b2db      	uxtb	r3, r3
 80029f8:	4619      	mov	r1, r3
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f004 ffa0 	bl	8007940 <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002a00:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a02:	015a      	lsls	r2, r3, #5
 8002a04:	69fb      	ldr	r3, [r7, #28]
 8002a06:	4413      	add	r3, r2
 8002a08:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	2302      	movs	r3, #2
 8002a10:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002a12:	693b      	ldr	r3, [r7, #16]
 8002a14:	f003 0320 	and.w	r3, r3, #32
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d008      	beq.n	8002a2e <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002a1c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a1e:	015a      	lsls	r2, r3, #5
 8002a20:	69fb      	ldr	r3, [r7, #28]
 8002a22:	4413      	add	r3, r2
 8002a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a28:	461a      	mov	r2, r3
 8002a2a:	2320      	movs	r3, #32
 8002a2c:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	d009      	beq.n	8002a4c <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002a38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a3a:	015a      	lsls	r2, r3, #5
 8002a3c:	69fb      	ldr	r3, [r7, #28]
 8002a3e:	4413      	add	r3, r2
 8002a40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002a44:	461a      	mov	r2, r3
 8002a46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002a4a:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002a4e:	3301      	adds	r3, #1
 8002a50:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a54:	085b      	lsrs	r3, r3, #1
 8002a56:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002a58:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	f47f af62 	bne.w	8002924 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	681b      	ldr	r3, [r3, #0]
 8002a64:	4618      	mov	r0, r3
 8002a66:	f002 fee3 	bl	8005830 <USB_ReadInterrupts>
 8002a6a:	4603      	mov	r3, r0
 8002a6c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002a70:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002a74:	f040 80db 	bne.w	8002c2e <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4618      	mov	r0, r3
 8002a7e:	f002 ff04 	bl	800588a <USB_ReadDevAllInEpInterrupt>
 8002a82:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002a84:	2300      	movs	r3, #0
 8002a86:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002a88:	e0cd      	b.n	8002c26 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002a8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002a8c:	f003 0301 	and.w	r3, r3, #1
 8002a90:	2b00      	cmp	r3, #0
 8002a92:	f000 80c2 	beq.w	8002c1a <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002a9c:	b2d2      	uxtb	r2, r2
 8002a9e:	4611      	mov	r1, r2
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f002 ff2a 	bl	80058fa <USB_ReadDevInEPInterrupt>
 8002aa6:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002aa8:	693b      	ldr	r3, [r7, #16]
 8002aaa:	f003 0301 	and.w	r3, r3, #1
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	d057      	beq.n	8002b62 <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ab4:	f003 030f 	and.w	r3, r3, #15
 8002ab8:	2201      	movs	r2, #1
 8002aba:	fa02 f303 	lsl.w	r3, r2, r3
 8002abe:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002ac0:	69fb      	ldr	r3, [r7, #28]
 8002ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ac6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	43db      	mvns	r3, r3
 8002acc:	69f9      	ldr	r1, [r7, #28]
 8002ace:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002ad6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ad8:	015a      	lsls	r2, r3, #5
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	4413      	add	r3, r2
 8002ade:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ae2:	461a      	mov	r2, r3
 8002ae4:	2301      	movs	r3, #1
 8002ae6:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	d132      	bne.n	8002b56 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002af0:	6879      	ldr	r1, [r7, #4]
 8002af2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002af4:	4613      	mov	r3, r2
 8002af6:	00db      	lsls	r3, r3, #3
 8002af8:	4413      	add	r3, r2
 8002afa:	009b      	lsls	r3, r3, #2
 8002afc:	440b      	add	r3, r1
 8002afe:	334c      	adds	r3, #76	; 0x4c
 8002b00:	6819      	ldr	r1, [r3, #0]
 8002b02:	6878      	ldr	r0, [r7, #4]
 8002b04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b06:	4613      	mov	r3, r2
 8002b08:	00db      	lsls	r3, r3, #3
 8002b0a:	4413      	add	r3, r2
 8002b0c:	009b      	lsls	r3, r3, #2
 8002b0e:	4403      	add	r3, r0
 8002b10:	3348      	adds	r3, #72	; 0x48
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	4419      	add	r1, r3
 8002b16:	6878      	ldr	r0, [r7, #4]
 8002b18:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b1a:	4613      	mov	r3, r2
 8002b1c:	00db      	lsls	r3, r3, #3
 8002b1e:	4413      	add	r3, r2
 8002b20:	009b      	lsls	r3, r3, #2
 8002b22:	4403      	add	r3, r0
 8002b24:	334c      	adds	r3, #76	; 0x4c
 8002b26:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d113      	bne.n	8002b56 <HAL_PCD_IRQHandler+0x3a2>
 8002b2e:	6879      	ldr	r1, [r7, #4]
 8002b30:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b32:	4613      	mov	r3, r2
 8002b34:	00db      	lsls	r3, r3, #3
 8002b36:	4413      	add	r3, r2
 8002b38:	009b      	lsls	r3, r3, #2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	3354      	adds	r3, #84	; 0x54
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b00      	cmp	r3, #0
 8002b42:	d108      	bne.n	8002b56 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	6818      	ldr	r0, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002b4e:	461a      	mov	r2, r3
 8002b50:	2101      	movs	r1, #1
 8002b52:	f002 ff31 	bl	80059b8 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002b56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b58:	b2db      	uxtb	r3, r3
 8002b5a:	4619      	mov	r1, r3
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f004 fe74 	bl	800784a <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002b62:	693b      	ldr	r3, [r7, #16]
 8002b64:	f003 0308 	and.w	r3, r3, #8
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	d008      	beq.n	8002b7e <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b6e:	015a      	lsls	r2, r3, #5
 8002b70:	69fb      	ldr	r3, [r7, #28]
 8002b72:	4413      	add	r3, r2
 8002b74:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b78:	461a      	mov	r2, r3
 8002b7a:	2308      	movs	r3, #8
 8002b7c:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002b7e:	693b      	ldr	r3, [r7, #16]
 8002b80:	f003 0310 	and.w	r3, r3, #16
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d008      	beq.n	8002b9a <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002b88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b8a:	015a      	lsls	r2, r3, #5
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	4413      	add	r3, r2
 8002b90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002b94:	461a      	mov	r2, r3
 8002b96:	2310      	movs	r3, #16
 8002b98:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002b9a:	693b      	ldr	r3, [r7, #16]
 8002b9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	d008      	beq.n	8002bb6 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ba4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ba6:	015a      	lsls	r2, r3, #5
 8002ba8:	69fb      	ldr	r3, [r7, #28]
 8002baa:	4413      	add	r3, r2
 8002bac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002bb0:	461a      	mov	r2, r3
 8002bb2:	2340      	movs	r3, #64	; 0x40
 8002bb4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002bb6:	693b      	ldr	r3, [r7, #16]
 8002bb8:	f003 0302 	and.w	r3, r3, #2
 8002bbc:	2b00      	cmp	r3, #0
 8002bbe:	d023      	beq.n	8002c08 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002bc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002bc2:	6a38      	ldr	r0, [r7, #32]
 8002bc4:	f001 fe12 	bl	80047ec <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002bc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002bca:	4613      	mov	r3, r2
 8002bcc:	00db      	lsls	r3, r3, #3
 8002bce:	4413      	add	r3, r2
 8002bd0:	009b      	lsls	r3, r3, #2
 8002bd2:	3338      	adds	r3, #56	; 0x38
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	4413      	add	r3, r2
 8002bd8:	3304      	adds	r3, #4
 8002bda:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002bdc:	697b      	ldr	r3, [r7, #20]
 8002bde:	78db      	ldrb	r3, [r3, #3]
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d108      	bne.n	8002bf6 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	2200      	movs	r2, #0
 8002be8:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002bea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	4619      	mov	r1, r3
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f004 feb7 	bl	8007964 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002bf8:	015a      	lsls	r2, r3, #5
 8002bfa:	69fb      	ldr	r3, [r7, #28]
 8002bfc:	4413      	add	r3, r2
 8002bfe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002c02:	461a      	mov	r2, r3
 8002c04:	2302      	movs	r3, #2
 8002c06:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002c08:	693b      	ldr	r3, [r7, #16]
 8002c0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c0e:	2b00      	cmp	r3, #0
 8002c10:	d003      	beq.n	8002c1a <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002c12:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c14:	6878      	ldr	r0, [r7, #4]
 8002c16:	f000 fcc3 	bl	80035a0 <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002c1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c1c:	3301      	adds	r3, #1
 8002c1e:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002c20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c22:	085b      	lsrs	r3, r3, #1
 8002c24:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002c26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	f47f af2e 	bne.w	8002a8a <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f002 fdfc 	bl	8005830 <USB_ReadInterrupts>
 8002c38:	4603      	mov	r3, r0
 8002c3a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c3e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c42:	d122      	bne.n	8002c8a <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002c44:	69fb      	ldr	r3, [r7, #28]
 8002c46:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002c4a:	685b      	ldr	r3, [r3, #4]
 8002c4c:	69fa      	ldr	r2, [r7, #28]
 8002c4e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002c52:	f023 0301 	bic.w	r3, r3, #1
 8002c56:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002c58:	687b      	ldr	r3, [r7, #4]
 8002c5a:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d108      	bne.n	8002c74 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	2200      	movs	r2, #0
 8002c66:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002c6a:	2100      	movs	r1, #0
 8002c6c:	6878      	ldr	r0, [r7, #4]
 8002c6e:	f000 feab 	bl	80039c8 <HAL_PCDEx_LPM_Callback>
 8002c72:	e002      	b.n	8002c7a <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002c74:	6878      	ldr	r0, [r7, #4]
 8002c76:	f004 fe55 	bl	8007924 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	695a      	ldr	r2, [r3, #20]
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002c88:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f002 fdce 	bl	8005830 <USB_ReadInterrupts>
 8002c94:	4603      	mov	r3, r0
 8002c96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c9a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002c9e:	d112      	bne.n	8002cc6 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ca6:	689b      	ldr	r3, [r3, #8]
 8002ca8:	f003 0301 	and.w	r3, r3, #1
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d102      	bne.n	8002cb6 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002cb0:	6878      	ldr	r0, [r7, #4]
 8002cb2:	f004 fe11 	bl	80078d8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	695a      	ldr	r2, [r3, #20]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8002cc4:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	4618      	mov	r0, r3
 8002ccc:	f002 fdb0 	bl	8005830 <USB_ReadInterrupts>
 8002cd0:	4603      	mov	r3, r0
 8002cd2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002cd6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002cda:	f040 80b7 	bne.w	8002e4c <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002ce4:	685b      	ldr	r3, [r3, #4]
 8002ce6:	69fa      	ldr	r2, [r7, #28]
 8002ce8:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002cec:	f023 0301 	bic.w	r3, r3, #1
 8002cf0:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	2110      	movs	r1, #16
 8002cf8:	4618      	mov	r0, r3
 8002cfa:	f001 fd77 	bl	80047ec <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002cfe:	2300      	movs	r3, #0
 8002d00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d02:	e046      	b.n	8002d92 <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8002d04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d06:	015a      	lsls	r2, r3, #5
 8002d08:	69fb      	ldr	r3, [r7, #28]
 8002d0a:	4413      	add	r3, r2
 8002d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d10:	461a      	mov	r2, r3
 8002d12:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d16:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8002d18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d1a:	015a      	lsls	r2, r3, #5
 8002d1c:	69fb      	ldr	r3, [r7, #28]
 8002d1e:	4413      	add	r3, r2
 8002d20:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d28:	0151      	lsls	r1, r2, #5
 8002d2a:	69fa      	ldr	r2, [r7, #28]
 8002d2c:	440a      	add	r2, r1
 8002d2e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8002d32:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d36:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8002d38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d3a:	015a      	lsls	r2, r3, #5
 8002d3c:	69fb      	ldr	r3, [r7, #28]
 8002d3e:	4413      	add	r3, r2
 8002d40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d44:	461a      	mov	r2, r3
 8002d46:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8002d4a:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8002d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d4e:	015a      	lsls	r2, r3, #5
 8002d50:	69fb      	ldr	r3, [r7, #28]
 8002d52:	4413      	add	r3, r2
 8002d54:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d5c:	0151      	lsls	r1, r2, #5
 8002d5e:	69fa      	ldr	r2, [r7, #28]
 8002d60:	440a      	add	r2, r1
 8002d62:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d66:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8002d6a:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8002d6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d6e:	015a      	lsls	r2, r3, #5
 8002d70:	69fb      	ldr	r3, [r7, #28]
 8002d72:	4413      	add	r3, r2
 8002d74:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d7c:	0151      	lsls	r1, r2, #5
 8002d7e:	69fa      	ldr	r2, [r7, #28]
 8002d80:	440a      	add	r2, r1
 8002d82:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8002d86:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8002d8a:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002d8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d8e:	3301      	adds	r3, #1
 8002d90:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	685b      	ldr	r3, [r3, #4]
 8002d96:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d98:	429a      	cmp	r2, r3
 8002d9a:	d3b3      	bcc.n	8002d04 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 8002d9c:	69fb      	ldr	r3, [r7, #28]
 8002d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002da2:	69db      	ldr	r3, [r3, #28]
 8002da4:	69fa      	ldr	r2, [r7, #28]
 8002da6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002daa:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 8002dae:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d016      	beq.n	8002de6 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dbe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002dc2:	69fa      	ldr	r2, [r7, #28]
 8002dc4:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dc8:	f043 030b 	orr.w	r3, r3, #11
 8002dcc:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 8002dd0:	69fb      	ldr	r3, [r7, #28]
 8002dd2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dd6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd8:	69fa      	ldr	r2, [r7, #28]
 8002dda:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002dde:	f043 030b 	orr.w	r3, r3, #11
 8002de2:	6453      	str	r3, [r2, #68]	; 0x44
 8002de4:	e015      	b.n	8002e12 <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002dec:	695b      	ldr	r3, [r3, #20]
 8002dee:	69fa      	ldr	r2, [r7, #28]
 8002df0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002df4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8002df8:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8002dfc:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e04:	691b      	ldr	r3, [r3, #16]
 8002e06:	69fa      	ldr	r2, [r7, #28]
 8002e08:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e0c:	f043 030b 	orr.w	r3, r3, #11
 8002e10:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002e20:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8002e24:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6818      	ldr	r0, [r3, #0]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	691b      	ldr	r3, [r3, #16]
 8002e2e:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8002e36:	461a      	mov	r2, r3
 8002e38:	f002 fdbe 	bl	80059b8 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	695a      	ldr	r2, [r3, #20]
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8002e4a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4618      	mov	r0, r3
 8002e52:	f002 fced 	bl	8005830 <USB_ReadInterrupts>
 8002e56:	4603      	mov	r3, r0
 8002e58:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002e5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002e60:	d124      	bne.n	8002eac <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f002 fd83 	bl	8005972 <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f001 fd38 	bl	80048e6 <USB_GetDevSpeed>
 8002e76:	4603      	mov	r3, r0
 8002e78:	461a      	mov	r2, r3
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681c      	ldr	r4, [r3, #0]
 8002e82:	f001 f9d1 	bl	8004228 <HAL_RCC_GetHCLKFreq>
 8002e86:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 8002e8c:	b2db      	uxtb	r3, r3
 8002e8e:	461a      	mov	r2, r3
 8002e90:	4620      	mov	r0, r4
 8002e92:	f001 fa37 	bl	8004304 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 8002e96:	6878      	ldr	r0, [r7, #4]
 8002e98:	f004 fcff 	bl	800789a <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	695a      	ldr	r2, [r3, #20]
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 8002eaa:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4618      	mov	r0, r3
 8002eb2:	f002 fcbd 	bl	8005830 <USB_ReadInterrupts>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	f003 0308 	and.w	r3, r3, #8
 8002ebc:	2b08      	cmp	r3, #8
 8002ebe:	d10a      	bne.n	8002ed6 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 8002ec0:	6878      	ldr	r0, [r7, #4]
 8002ec2:	f004 fcdc 	bl	800787e <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	695a      	ldr	r2, [r3, #20]
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	f002 0208 	and.w	r2, r2, #8
 8002ed4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8002ed6:	687b      	ldr	r3, [r7, #4]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	4618      	mov	r0, r3
 8002edc:	f002 fca8 	bl	8005830 <USB_ReadInterrupts>
 8002ee0:	4603      	mov	r3, r0
 8002ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002ee6:	2b80      	cmp	r3, #128	; 0x80
 8002ee8:	d122      	bne.n	8002f30 <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8002eea:	6a3b      	ldr	r3, [r7, #32]
 8002eec:	699b      	ldr	r3, [r3, #24]
 8002eee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002ef2:	6a3b      	ldr	r3, [r7, #32]
 8002ef4:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002ef6:	2301      	movs	r3, #1
 8002ef8:	627b      	str	r3, [r7, #36]	; 0x24
 8002efa:	e014      	b.n	8002f26 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8002efc:	6879      	ldr	r1, [r7, #4]
 8002efe:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f00:	4613      	mov	r3, r2
 8002f02:	00db      	lsls	r3, r3, #3
 8002f04:	4413      	add	r3, r2
 8002f06:	009b      	lsls	r3, r3, #2
 8002f08:	440b      	add	r3, r1
 8002f0a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	d105      	bne.n	8002f20 <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8002f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f16:	b2db      	uxtb	r3, r3
 8002f18:	4619      	mov	r1, r3
 8002f1a:	6878      	ldr	r0, [r7, #4]
 8002f1c:	f000 fb0f 	bl	800353e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f22:	3301      	adds	r3, #1
 8002f24:	627b      	str	r3, [r7, #36]	; 0x24
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	685b      	ldr	r3, [r3, #4]
 8002f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f2c:	429a      	cmp	r2, r3
 8002f2e:	d3e5      	bcc.n	8002efc <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	4618      	mov	r0, r3
 8002f36:	f002 fc7b 	bl	8005830 <USB_ReadInterrupts>
 8002f3a:	4603      	mov	r3, r0
 8002f3c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f40:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002f44:	d13b      	bne.n	8002fbe <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f46:	2301      	movs	r3, #1
 8002f48:	627b      	str	r3, [r7, #36]	; 0x24
 8002f4a:	e02b      	b.n	8002fa4 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8002f4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f4e:	015a      	lsls	r2, r3, #5
 8002f50:	69fb      	ldr	r3, [r7, #28]
 8002f52:	4413      	add	r3, r2
 8002f54:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f5c:	6879      	ldr	r1, [r7, #4]
 8002f5e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f60:	4613      	mov	r3, r2
 8002f62:	00db      	lsls	r3, r3, #3
 8002f64:	4413      	add	r3, r2
 8002f66:	009b      	lsls	r3, r3, #2
 8002f68:	440b      	add	r3, r1
 8002f6a:	3340      	adds	r3, #64	; 0x40
 8002f6c:	781b      	ldrb	r3, [r3, #0]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d115      	bne.n	8002f9e <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 8002f72:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	da12      	bge.n	8002f9e <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 8002f78:	6879      	ldr	r1, [r7, #4]
 8002f7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f7c:	4613      	mov	r3, r2
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4413      	add	r3, r2
 8002f82:	009b      	lsls	r3, r3, #2
 8002f84:	440b      	add	r3, r1
 8002f86:	333f      	adds	r3, #63	; 0x3f
 8002f88:	2201      	movs	r2, #1
 8002f8a:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 8002f8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f8e:	b2db      	uxtb	r3, r3
 8002f90:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8002f94:	b2db      	uxtb	r3, r3
 8002f96:	4619      	mov	r1, r3
 8002f98:	6878      	ldr	r0, [r7, #4]
 8002f9a:	f000 fad0 	bl	800353e <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002f9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fa0:	3301      	adds	r3, #1
 8002fa2:	627b      	str	r3, [r7, #36]	; 0x24
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	685b      	ldr	r3, [r3, #4]
 8002fa8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002faa:	429a      	cmp	r2, r3
 8002fac:	d3ce      	bcc.n	8002f4c <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	695a      	ldr	r2, [r3, #20]
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 8002fbc:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	681b      	ldr	r3, [r3, #0]
 8002fc2:	4618      	mov	r0, r3
 8002fc4:	f002 fc34 	bl	8005830 <USB_ReadInterrupts>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fce:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002fd2:	d155      	bne.n	8003080 <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8002fd4:	2301      	movs	r3, #1
 8002fd6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fd8:	e045      	b.n	8003066 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8002fda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002fdc:	015a      	lsls	r2, r3, #5
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8002fea:	6879      	ldr	r1, [r7, #4]
 8002fec:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002fee:	4613      	mov	r3, r2
 8002ff0:	00db      	lsls	r3, r3, #3
 8002ff2:	4413      	add	r3, r2
 8002ff4:	009b      	lsls	r3, r3, #2
 8002ff6:	440b      	add	r3, r1
 8002ff8:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	2b01      	cmp	r3, #1
 8003000:	d12e      	bne.n	8003060 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003002:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003004:	2b00      	cmp	r3, #0
 8003006:	da2b      	bge.n	8003060 <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003008:	69bb      	ldr	r3, [r7, #24]
 800300a:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003014:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003018:	429a      	cmp	r2, r3
 800301a:	d121      	bne.n	8003060 <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 800301c:	6879      	ldr	r1, [r7, #4]
 800301e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003020:	4613      	mov	r3, r2
 8003022:	00db      	lsls	r3, r3, #3
 8003024:	4413      	add	r3, r2
 8003026:	009b      	lsls	r3, r3, #2
 8003028:	440b      	add	r3, r1
 800302a:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800302e:	2201      	movs	r2, #1
 8003030:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 8003032:	6a3b      	ldr	r3, [r7, #32]
 8003034:	699b      	ldr	r3, [r3, #24]
 8003036:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800303a:	6a3b      	ldr	r3, [r7, #32]
 800303c:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800303e:	6a3b      	ldr	r3, [r7, #32]
 8003040:	695b      	ldr	r3, [r3, #20]
 8003042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003046:	2b00      	cmp	r3, #0
 8003048:	d10a      	bne.n	8003060 <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003050:	685b      	ldr	r3, [r3, #4]
 8003052:	69fa      	ldr	r2, [r7, #28]
 8003054:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003058:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800305c:	6053      	str	r3, [r2, #4]
            break;
 800305e:	e007      	b.n	8003070 <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003060:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003062:	3301      	adds	r3, #1
 8003064:	627b      	str	r3, [r7, #36]	; 0x24
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	685b      	ldr	r3, [r3, #4]
 800306a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800306c:	429a      	cmp	r2, r3
 800306e:	d3b4      	bcc.n	8002fda <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	695a      	ldr	r2, [r3, #20]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 800307e:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4618      	mov	r0, r3
 8003086:	f002 fbd3 	bl	8005830 <USB_ReadInterrupts>
 800308a:	4603      	mov	r3, r0
 800308c:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8003090:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003094:	d10a      	bne.n	80030ac <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 8003096:	6878      	ldr	r0, [r7, #4]
 8003098:	f004 fc76 	bl	8007988 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	695a      	ldr	r2, [r3, #20]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80030aa:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	4618      	mov	r0, r3
 80030b2:	f002 fbbd 	bl	8005830 <USB_ReadInterrupts>
 80030b6:	4603      	mov	r3, r0
 80030b8:	f003 0304 	and.w	r3, r3, #4
 80030bc:	2b04      	cmp	r3, #4
 80030be:	d115      	bne.n	80030ec <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	685b      	ldr	r3, [r3, #4]
 80030c6:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 80030c8:	69bb      	ldr	r3, [r7, #24]
 80030ca:	f003 0304 	and.w	r3, r3, #4
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d002      	beq.n	80030d8 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f004 fc66 	bl	80079a4 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	6859      	ldr	r1, [r3, #4]
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	69ba      	ldr	r2, [r7, #24]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	605a      	str	r2, [r3, #4]
 80030e8:	e000      	b.n	80030ec <HAL_PCD_IRQHandler+0x938>
      return;
 80030ea:	bf00      	nop
    }
  }
}
 80030ec:	3734      	adds	r7, #52	; 0x34
 80030ee:	46bd      	mov	sp, r7
 80030f0:	bd90      	pop	{r4, r7, pc}

080030f2 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 80030f2:	b580      	push	{r7, lr}
 80030f4:	b082      	sub	sp, #8
 80030f6:	af00      	add	r7, sp, #0
 80030f8:	6078      	str	r0, [r7, #4]
 80030fa:	460b      	mov	r3, r1
 80030fc:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003104:	2b01      	cmp	r3, #1
 8003106:	d101      	bne.n	800310c <HAL_PCD_SetAddress+0x1a>
 8003108:	2302      	movs	r3, #2
 800310a:	e013      	b.n	8003134 <HAL_PCD_SetAddress+0x42>
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	78fa      	ldrb	r2, [r7, #3]
 8003118:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	78fa      	ldrb	r2, [r7, #3]
 8003122:	4611      	mov	r1, r2
 8003124:	4618      	mov	r0, r3
 8003126:	f002 fb1b 	bl	8005760 <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2200      	movs	r2, #0
 800312e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003132:	2300      	movs	r3, #0
}
 8003134:	4618      	mov	r0, r3
 8003136:	3708      	adds	r7, #8
 8003138:	46bd      	mov	sp, r7
 800313a:	bd80      	pop	{r7, pc}

0800313c <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800313c:	b580      	push	{r7, lr}
 800313e:	b084      	sub	sp, #16
 8003140:	af00      	add	r7, sp, #0
 8003142:	6078      	str	r0, [r7, #4]
 8003144:	4608      	mov	r0, r1
 8003146:	4611      	mov	r1, r2
 8003148:	461a      	mov	r2, r3
 800314a:	4603      	mov	r3, r0
 800314c:	70fb      	strb	r3, [r7, #3]
 800314e:	460b      	mov	r3, r1
 8003150:	803b      	strh	r3, [r7, #0]
 8003152:	4613      	mov	r3, r2
 8003154:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003156:	2300      	movs	r3, #0
 8003158:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800315a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800315e:	2b00      	cmp	r3, #0
 8003160:	da0f      	bge.n	8003182 <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003162:	78fb      	ldrb	r3, [r7, #3]
 8003164:	f003 020f 	and.w	r2, r3, #15
 8003168:	4613      	mov	r3, r2
 800316a:	00db      	lsls	r3, r3, #3
 800316c:	4413      	add	r3, r2
 800316e:	009b      	lsls	r3, r3, #2
 8003170:	3338      	adds	r3, #56	; 0x38
 8003172:	687a      	ldr	r2, [r7, #4]
 8003174:	4413      	add	r3, r2
 8003176:	3304      	adds	r3, #4
 8003178:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	2201      	movs	r2, #1
 800317e:	705a      	strb	r2, [r3, #1]
 8003180:	e00f      	b.n	80031a2 <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003182:	78fb      	ldrb	r3, [r7, #3]
 8003184:	f003 020f 	and.w	r2, r3, #15
 8003188:	4613      	mov	r3, r2
 800318a:	00db      	lsls	r3, r3, #3
 800318c:	4413      	add	r3, r2
 800318e:	009b      	lsls	r3, r3, #2
 8003190:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003194:	687a      	ldr	r2, [r7, #4]
 8003196:	4413      	add	r3, r2
 8003198:	3304      	adds	r3, #4
 800319a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	2200      	movs	r2, #0
 80031a0:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80031a2:	78fb      	ldrb	r3, [r7, #3]
 80031a4:	f003 030f 	and.w	r3, r3, #15
 80031a8:	b2da      	uxtb	r2, r3
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80031ae:	883a      	ldrh	r2, [r7, #0]
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80031b4:	68fb      	ldr	r3, [r7, #12]
 80031b6:	78ba      	ldrb	r2, [r7, #2]
 80031b8:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	785b      	ldrb	r3, [r3, #1]
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d004      	beq.n	80031cc <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	781b      	ldrb	r3, [r3, #0]
 80031c6:	b29a      	uxth	r2, r3
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 80031cc:	78bb      	ldrb	r3, [r7, #2]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d102      	bne.n	80031d8 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	2200      	movs	r2, #0
 80031d6:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80031de:	2b01      	cmp	r3, #1
 80031e0:	d101      	bne.n	80031e6 <HAL_PCD_EP_Open+0xaa>
 80031e2:	2302      	movs	r3, #2
 80031e4:	e00e      	b.n	8003204 <HAL_PCD_EP_Open+0xc8>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	2201      	movs	r2, #1
 80031ea:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	68f9      	ldr	r1, [r7, #12]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f001 fb9b 	bl	8004930 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	2200      	movs	r2, #0
 80031fe:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 8003202:	7afb      	ldrb	r3, [r7, #11]
}
 8003204:	4618      	mov	r0, r3
 8003206:	3710      	adds	r7, #16
 8003208:	46bd      	mov	sp, r7
 800320a:	bd80      	pop	{r7, pc}

0800320c <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800320c:	b580      	push	{r7, lr}
 800320e:	b084      	sub	sp, #16
 8003210:	af00      	add	r7, sp, #0
 8003212:	6078      	str	r0, [r7, #4]
 8003214:	460b      	mov	r3, r1
 8003216:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003218:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800321c:	2b00      	cmp	r3, #0
 800321e:	da0f      	bge.n	8003240 <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003220:	78fb      	ldrb	r3, [r7, #3]
 8003222:	f003 020f 	and.w	r2, r3, #15
 8003226:	4613      	mov	r3, r2
 8003228:	00db      	lsls	r3, r3, #3
 800322a:	4413      	add	r3, r2
 800322c:	009b      	lsls	r3, r3, #2
 800322e:	3338      	adds	r3, #56	; 0x38
 8003230:	687a      	ldr	r2, [r7, #4]
 8003232:	4413      	add	r3, r2
 8003234:	3304      	adds	r3, #4
 8003236:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	2201      	movs	r2, #1
 800323c:	705a      	strb	r2, [r3, #1]
 800323e:	e00f      	b.n	8003260 <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003240:	78fb      	ldrb	r3, [r7, #3]
 8003242:	f003 020f 	and.w	r2, r3, #15
 8003246:	4613      	mov	r3, r2
 8003248:	00db      	lsls	r3, r3, #3
 800324a:	4413      	add	r3, r2
 800324c:	009b      	lsls	r3, r3, #2
 800324e:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003252:	687a      	ldr	r2, [r7, #4]
 8003254:	4413      	add	r3, r2
 8003256:	3304      	adds	r3, #4
 8003258:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	2200      	movs	r2, #0
 800325e:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 8003260:	78fb      	ldrb	r3, [r7, #3]
 8003262:	f003 030f 	and.w	r3, r3, #15
 8003266:	b2da      	uxtb	r2, r3
 8003268:	68fb      	ldr	r3, [r7, #12]
 800326a:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003272:	2b01      	cmp	r3, #1
 8003274:	d101      	bne.n	800327a <HAL_PCD_EP_Close+0x6e>
 8003276:	2302      	movs	r3, #2
 8003278:	e00e      	b.n	8003298 <HAL_PCD_EP_Close+0x8c>
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	2201      	movs	r2, #1
 800327e:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	68f9      	ldr	r1, [r7, #12]
 8003288:	4618      	mov	r0, r3
 800328a:	f001 fbd9 	bl	8004a40 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	2200      	movs	r2, #0
 8003292:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 8003296:	2300      	movs	r3, #0
}
 8003298:	4618      	mov	r0, r3
 800329a:	3710      	adds	r7, #16
 800329c:	46bd      	mov	sp, r7
 800329e:	bd80      	pop	{r7, pc}

080032a0 <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b086      	sub	sp, #24
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	60f8      	str	r0, [r7, #12]
 80032a8:	607a      	str	r2, [r7, #4]
 80032aa:	603b      	str	r3, [r7, #0]
 80032ac:	460b      	mov	r3, r1
 80032ae:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80032b0:	7afb      	ldrb	r3, [r7, #11]
 80032b2:	f003 020f 	and.w	r2, r3, #15
 80032b6:	4613      	mov	r3, r2
 80032b8:	00db      	lsls	r3, r3, #3
 80032ba:	4413      	add	r3, r2
 80032bc:	009b      	lsls	r3, r3, #2
 80032be:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80032c2:	68fa      	ldr	r2, [r7, #12]
 80032c4:	4413      	add	r3, r2
 80032c6:	3304      	adds	r3, #4
 80032c8:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 80032ca:	697b      	ldr	r3, [r7, #20]
 80032cc:	687a      	ldr	r2, [r7, #4]
 80032ce:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80032d0:	697b      	ldr	r3, [r7, #20]
 80032d2:	683a      	ldr	r2, [r7, #0]
 80032d4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80032d6:	697b      	ldr	r3, [r7, #20]
 80032d8:	2200      	movs	r2, #0
 80032da:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	2200      	movs	r2, #0
 80032e0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80032e2:	7afb      	ldrb	r3, [r7, #11]
 80032e4:	f003 030f 	and.w	r3, r3, #15
 80032e8:	b2da      	uxtb	r2, r3
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	691b      	ldr	r3, [r3, #16]
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d102      	bne.n	80032fc <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80032f6:	687a      	ldr	r2, [r7, #4]
 80032f8:	697b      	ldr	r3, [r7, #20]
 80032fa:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80032fc:	7afb      	ldrb	r3, [r7, #11]
 80032fe:	f003 030f 	and.w	r3, r3, #15
 8003302:	2b00      	cmp	r3, #0
 8003304:	d109      	bne.n	800331a <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	6818      	ldr	r0, [r3, #0]
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	461a      	mov	r2, r3
 8003312:	6979      	ldr	r1, [r7, #20]
 8003314:	f001 feb8 	bl	8005088 <USB_EP0StartXfer>
 8003318:	e008      	b.n	800332c <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800331a:	68fb      	ldr	r3, [r7, #12]
 800331c:	6818      	ldr	r0, [r3, #0]
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	691b      	ldr	r3, [r3, #16]
 8003322:	b2db      	uxtb	r3, r3
 8003324:	461a      	mov	r2, r3
 8003326:	6979      	ldr	r1, [r7, #20]
 8003328:	f001 fc66 	bl	8004bf8 <USB_EPStartXfer>
  }

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3718      	adds	r7, #24
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b086      	sub	sp, #24
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	607a      	str	r2, [r7, #4]
 8003340:	603b      	str	r3, [r7, #0]
 8003342:	460b      	mov	r3, r1
 8003344:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003346:	7afb      	ldrb	r3, [r7, #11]
 8003348:	f003 020f 	and.w	r2, r3, #15
 800334c:	4613      	mov	r3, r2
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	4413      	add	r3, r2
 8003352:	009b      	lsls	r3, r3, #2
 8003354:	3338      	adds	r3, #56	; 0x38
 8003356:	68fa      	ldr	r2, [r7, #12]
 8003358:	4413      	add	r3, r2
 800335a:	3304      	adds	r3, #4
 800335c:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800335e:	697b      	ldr	r3, [r7, #20]
 8003360:	687a      	ldr	r2, [r7, #4]
 8003362:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 8003364:	697b      	ldr	r3, [r7, #20]
 8003366:	683a      	ldr	r2, [r7, #0]
 8003368:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 800336a:	697b      	ldr	r3, [r7, #20]
 800336c:	2200      	movs	r2, #0
 800336e:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 8003370:	697b      	ldr	r3, [r7, #20]
 8003372:	2201      	movs	r2, #1
 8003374:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003376:	7afb      	ldrb	r3, [r7, #11]
 8003378:	f003 030f 	and.w	r3, r3, #15
 800337c:	b2da      	uxtb	r2, r3
 800337e:	697b      	ldr	r3, [r7, #20]
 8003380:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	691b      	ldr	r3, [r3, #16]
 8003386:	2b01      	cmp	r3, #1
 8003388:	d102      	bne.n	8003390 <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	697b      	ldr	r3, [r7, #20]
 800338e:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003390:	7afb      	ldrb	r3, [r7, #11]
 8003392:	f003 030f 	and.w	r3, r3, #15
 8003396:	2b00      	cmp	r3, #0
 8003398:	d109      	bne.n	80033ae <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	6818      	ldr	r0, [r3, #0]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	691b      	ldr	r3, [r3, #16]
 80033a2:	b2db      	uxtb	r3, r3
 80033a4:	461a      	mov	r2, r3
 80033a6:	6979      	ldr	r1, [r7, #20]
 80033a8:	f001 fe6e 	bl	8005088 <USB_EP0StartXfer>
 80033ac:	e008      	b.n	80033c0 <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	6818      	ldr	r0, [r3, #0]
 80033b2:	68fb      	ldr	r3, [r7, #12]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	461a      	mov	r2, r3
 80033ba:	6979      	ldr	r1, [r7, #20]
 80033bc:	f001 fc1c 	bl	8004bf8 <USB_EPStartXfer>
  }

  return HAL_OK;
 80033c0:	2300      	movs	r3, #0
}
 80033c2:	4618      	mov	r0, r3
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b084      	sub	sp, #16
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
 80033d2:	460b      	mov	r3, r1
 80033d4:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 80033d6:	78fb      	ldrb	r3, [r7, #3]
 80033d8:	f003 020f 	and.w	r2, r3, #15
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d901      	bls.n	80033e8 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 80033e4:	2301      	movs	r3, #1
 80033e6:	e050      	b.n	800348a <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80033e8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80033ec:	2b00      	cmp	r3, #0
 80033ee:	da0f      	bge.n	8003410 <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80033f0:	78fb      	ldrb	r3, [r7, #3]
 80033f2:	f003 020f 	and.w	r2, r3, #15
 80033f6:	4613      	mov	r3, r2
 80033f8:	00db      	lsls	r3, r3, #3
 80033fa:	4413      	add	r3, r2
 80033fc:	009b      	lsls	r3, r3, #2
 80033fe:	3338      	adds	r3, #56	; 0x38
 8003400:	687a      	ldr	r2, [r7, #4]
 8003402:	4413      	add	r3, r2
 8003404:	3304      	adds	r3, #4
 8003406:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	2201      	movs	r2, #1
 800340c:	705a      	strb	r2, [r3, #1]
 800340e:	e00d      	b.n	800342c <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8003410:	78fa      	ldrb	r2, [r7, #3]
 8003412:	4613      	mov	r3, r2
 8003414:	00db      	lsls	r3, r3, #3
 8003416:	4413      	add	r3, r2
 8003418:	009b      	lsls	r3, r3, #2
 800341a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800341e:	687a      	ldr	r2, [r7, #4]
 8003420:	4413      	add	r3, r2
 8003422:	3304      	adds	r3, #4
 8003424:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	2200      	movs	r2, #0
 800342a:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	2201      	movs	r2, #1
 8003430:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 8003432:	78fb      	ldrb	r3, [r7, #3]
 8003434:	f003 030f 	and.w	r3, r3, #15
 8003438:	b2da      	uxtb	r2, r3
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_PCD_EP_SetStall+0x82>
 8003448:	2302      	movs	r3, #2
 800344a:	e01e      	b.n	800348a <HAL_PCD_EP_SetStall+0xc0>
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	68f9      	ldr	r1, [r7, #12]
 800345a:	4618      	mov	r0, r3
 800345c:	f002 f8ac 	bl	80055b8 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003460:	78fb      	ldrb	r3, [r7, #3]
 8003462:	f003 030f 	and.w	r3, r3, #15
 8003466:	2b00      	cmp	r3, #0
 8003468:	d10a      	bne.n	8003480 <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	691b      	ldr	r3, [r3, #16]
 8003472:	b2d9      	uxtb	r1, r3
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 800347a:	461a      	mov	r2, r3
 800347c:	f002 fa9c 	bl	80059b8 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003488:	2300      	movs	r3, #0
}
 800348a:	4618      	mov	r0, r3
 800348c:	3710      	adds	r7, #16
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}

08003492 <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003492:	b580      	push	{r7, lr}
 8003494:	b084      	sub	sp, #16
 8003496:	af00      	add	r7, sp, #0
 8003498:	6078      	str	r0, [r7, #4]
 800349a:	460b      	mov	r3, r1
 800349c:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	f003 020f 	and.w	r2, r3, #15
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	429a      	cmp	r2, r3
 80034aa:	d901      	bls.n	80034b0 <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80034ac:	2301      	movs	r3, #1
 80034ae:	e042      	b.n	8003536 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80034b0:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	da0f      	bge.n	80034d8 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80034b8:	78fb      	ldrb	r3, [r7, #3]
 80034ba:	f003 020f 	and.w	r2, r3, #15
 80034be:	4613      	mov	r3, r2
 80034c0:	00db      	lsls	r3, r3, #3
 80034c2:	4413      	add	r3, r2
 80034c4:	009b      	lsls	r3, r3, #2
 80034c6:	3338      	adds	r3, #56	; 0x38
 80034c8:	687a      	ldr	r2, [r7, #4]
 80034ca:	4413      	add	r3, r2
 80034cc:	3304      	adds	r3, #4
 80034ce:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	2201      	movs	r2, #1
 80034d4:	705a      	strb	r2, [r3, #1]
 80034d6:	e00f      	b.n	80034f8 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034d8:	78fb      	ldrb	r3, [r7, #3]
 80034da:	f003 020f 	and.w	r2, r3, #15
 80034de:	4613      	mov	r3, r2
 80034e0:	00db      	lsls	r3, r3, #3
 80034e2:	4413      	add	r3, r2
 80034e4:	009b      	lsls	r3, r3, #2
 80034e6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034ea:	687a      	ldr	r2, [r7, #4]
 80034ec:	4413      	add	r3, r2
 80034ee:	3304      	adds	r3, #4
 80034f0:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	2200      	movs	r2, #0
 80034f6:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	2200      	movs	r2, #0
 80034fc:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80034fe:	78fb      	ldrb	r3, [r7, #3]
 8003500:	f003 030f 	and.w	r3, r3, #15
 8003504:	b2da      	uxtb	r2, r3
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003510:	2b01      	cmp	r3, #1
 8003512:	d101      	bne.n	8003518 <HAL_PCD_EP_ClrStall+0x86>
 8003514:	2302      	movs	r3, #2
 8003516:	e00e      	b.n	8003536 <HAL_PCD_EP_ClrStall+0xa4>
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2201      	movs	r2, #1
 800351c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	68f9      	ldr	r1, [r7, #12]
 8003526:	4618      	mov	r0, r3
 8003528:	f002 f8b4 	bl	8005694 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	2200      	movs	r2, #0
 8003530:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003534:	2300      	movs	r3, #0
}
 8003536:	4618      	mov	r0, r3
 8003538:	3710      	adds	r7, #16
 800353a:	46bd      	mov	sp, r7
 800353c:	bd80      	pop	{r7, pc}

0800353e <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800353e:	b580      	push	{r7, lr}
 8003540:	b084      	sub	sp, #16
 8003542:	af00      	add	r7, sp, #0
 8003544:	6078      	str	r0, [r7, #4]
 8003546:	460b      	mov	r3, r1
 8003548:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 800354a:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800354e:	2b00      	cmp	r3, #0
 8003550:	da0c      	bge.n	800356c <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003552:	78fb      	ldrb	r3, [r7, #3]
 8003554:	f003 020f 	and.w	r2, r3, #15
 8003558:	4613      	mov	r3, r2
 800355a:	00db      	lsls	r3, r3, #3
 800355c:	4413      	add	r3, r2
 800355e:	009b      	lsls	r3, r3, #2
 8003560:	3338      	adds	r3, #56	; 0x38
 8003562:	687a      	ldr	r2, [r7, #4]
 8003564:	4413      	add	r3, r2
 8003566:	3304      	adds	r3, #4
 8003568:	60fb      	str	r3, [r7, #12]
 800356a:	e00c      	b.n	8003586 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800356c:	78fb      	ldrb	r3, [r7, #3]
 800356e:	f003 020f 	and.w	r2, r3, #15
 8003572:	4613      	mov	r3, r2
 8003574:	00db      	lsls	r3, r3, #3
 8003576:	4413      	add	r3, r2
 8003578:	009b      	lsls	r3, r3, #2
 800357a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800357e:	687a      	ldr	r2, [r7, #4]
 8003580:	4413      	add	r3, r2
 8003582:	3304      	adds	r3, #4
 8003584:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	68f9      	ldr	r1, [r7, #12]
 800358c:	4618      	mov	r0, r3
 800358e:	f001 fed3 	bl	8005338 <USB_EPStopXfer>
 8003592:	4603      	mov	r3, r0
 8003594:	72fb      	strb	r3, [r7, #11]

  return ret;
 8003596:	7afb      	ldrb	r3, [r7, #11]
}
 8003598:	4618      	mov	r0, r3
 800359a:	3710      	adds	r7, #16
 800359c:	46bd      	mov	sp, r7
 800359e:	bd80      	pop	{r7, pc}

080035a0 <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	; 0x28
 80035a4:	af02      	add	r7, sp, #8
 80035a6:	6078      	str	r0, [r7, #4]
 80035a8:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80035b0:	697b      	ldr	r3, [r7, #20]
 80035b2:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80035b4:	683a      	ldr	r2, [r7, #0]
 80035b6:	4613      	mov	r3, r2
 80035b8:	00db      	lsls	r3, r3, #3
 80035ba:	4413      	add	r3, r2
 80035bc:	009b      	lsls	r3, r3, #2
 80035be:	3338      	adds	r3, #56	; 0x38
 80035c0:	687a      	ldr	r2, [r7, #4]
 80035c2:	4413      	add	r3, r2
 80035c4:	3304      	adds	r3, #4
 80035c6:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6a1a      	ldr	r2, [r3, #32]
 80035cc:	68fb      	ldr	r3, [r7, #12]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	429a      	cmp	r2, r3
 80035d2:	d901      	bls.n	80035d8 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 80035d4:	2301      	movs	r3, #1
 80035d6:	e06c      	b.n	80036b2 <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	699a      	ldr	r2, [r3, #24]
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	6a1b      	ldr	r3, [r3, #32]
 80035e0:	1ad3      	subs	r3, r2, r3
 80035e2:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 80035e4:	68fb      	ldr	r3, [r7, #12]
 80035e6:	68db      	ldr	r3, [r3, #12]
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	429a      	cmp	r2, r3
 80035ec:	d902      	bls.n	80035f4 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	68db      	ldr	r3, [r3, #12]
 80035f2:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	3303      	adds	r3, #3
 80035f8:	089b      	lsrs	r3, r3, #2
 80035fa:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80035fc:	e02b      	b.n	8003656 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 80035fe:	68fb      	ldr	r3, [r7, #12]
 8003600:	699a      	ldr	r2, [r3, #24]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	6a1b      	ldr	r3, [r3, #32]
 8003606:	1ad3      	subs	r3, r2, r3
 8003608:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	68db      	ldr	r3, [r3, #12]
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	429a      	cmp	r2, r3
 8003612:	d902      	bls.n	800361a <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	3303      	adds	r3, #3
 800361e:	089b      	lsrs	r3, r3, #2
 8003620:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6919      	ldr	r1, [r3, #16]
 8003626:	683b      	ldr	r3, [r7, #0]
 8003628:	b2da      	uxtb	r2, r3
 800362a:	69fb      	ldr	r3, [r7, #28]
 800362c:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 8003632:	b2db      	uxtb	r3, r3
 8003634:	9300      	str	r3, [sp, #0]
 8003636:	4603      	mov	r3, r0
 8003638:	6978      	ldr	r0, [r7, #20]
 800363a:	f001 ff27 	bl	800548c <USB_WritePacket>

    ep->xfer_buff  += len;
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	69fb      	ldr	r3, [r7, #28]
 8003644:	441a      	add	r2, r3
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a1a      	ldr	r2, [r3, #32]
 800364e:	69fb      	ldr	r3, [r7, #28]
 8003650:	441a      	add	r2, r3
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	015a      	lsls	r2, r3, #5
 800365a:	693b      	ldr	r3, [r7, #16]
 800365c:	4413      	add	r3, r2
 800365e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003662:	699b      	ldr	r3, [r3, #24]
 8003664:	b29b      	uxth	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	429a      	cmp	r2, r3
 800366a:	d809      	bhi.n	8003680 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	6a1a      	ldr	r2, [r3, #32]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003674:	429a      	cmp	r2, r3
 8003676:	d203      	bcs.n	8003680 <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 8003678:	68fb      	ldr	r3, [r7, #12]
 800367a:	699b      	ldr	r3, [r3, #24]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d1be      	bne.n	80035fe <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 8003680:	68fb      	ldr	r3, [r7, #12]
 8003682:	699a      	ldr	r2, [r3, #24]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6a1b      	ldr	r3, [r3, #32]
 8003688:	429a      	cmp	r2, r3
 800368a:	d811      	bhi.n	80036b0 <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 800368c:	683b      	ldr	r3, [r7, #0]
 800368e:	f003 030f 	and.w	r3, r3, #15
 8003692:	2201      	movs	r2, #1
 8003694:	fa02 f303 	lsl.w	r3, r2, r3
 8003698:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 800369a:	693b      	ldr	r3, [r7, #16]
 800369c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80036a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80036a2:	68bb      	ldr	r3, [r7, #8]
 80036a4:	43db      	mvns	r3, r3
 80036a6:	6939      	ldr	r1, [r7, #16]
 80036a8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80036ac:	4013      	ands	r3, r2
 80036ae:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80036b0:	2300      	movs	r3, #0
}
 80036b2:	4618      	mov	r0, r3
 80036b4:	3720      	adds	r7, #32
 80036b6:	46bd      	mov	sp, r7
 80036b8:	bd80      	pop	{r7, pc}
	...

080036bc <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80036bc:	b580      	push	{r7, lr}
 80036be:	b088      	sub	sp, #32
 80036c0:	af00      	add	r7, sp, #0
 80036c2:	6078      	str	r0, [r7, #4]
 80036c4:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80036cc:	69fb      	ldr	r3, [r7, #28]
 80036ce:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80036d0:	69fb      	ldr	r3, [r7, #28]
 80036d2:	333c      	adds	r3, #60	; 0x3c
 80036d4:	3304      	adds	r3, #4
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	015a      	lsls	r2, r3, #5
 80036de:	69bb      	ldr	r3, [r7, #24]
 80036e0:	4413      	add	r3, r2
 80036e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80036e6:	689b      	ldr	r3, [r3, #8]
 80036e8:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	691b      	ldr	r3, [r3, #16]
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d17b      	bne.n	80037ea <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 80036f2:	693b      	ldr	r3, [r7, #16]
 80036f4:	f003 0308 	and.w	r3, r3, #8
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d015      	beq.n	8003728 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80036fc:	697b      	ldr	r3, [r7, #20]
 80036fe:	4a61      	ldr	r2, [pc, #388]	; (8003884 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003700:	4293      	cmp	r3, r2
 8003702:	f240 80b9 	bls.w	8003878 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003706:	693b      	ldr	r3, [r7, #16]
 8003708:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 800370c:	2b00      	cmp	r3, #0
 800370e:	f000 80b3 	beq.w	8003878 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003712:	683b      	ldr	r3, [r7, #0]
 8003714:	015a      	lsls	r2, r3, #5
 8003716:	69bb      	ldr	r3, [r7, #24]
 8003718:	4413      	add	r3, r2
 800371a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800371e:	461a      	mov	r2, r3
 8003720:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003724:	6093      	str	r3, [r2, #8]
 8003726:	e0a7      	b.n	8003878 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	f003 0320 	and.w	r3, r3, #32
 800372e:	2b00      	cmp	r3, #0
 8003730:	d009      	beq.n	8003746 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	015a      	lsls	r2, r3, #5
 8003736:	69bb      	ldr	r3, [r7, #24]
 8003738:	4413      	add	r3, r2
 800373a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800373e:	461a      	mov	r2, r3
 8003740:	2320      	movs	r3, #32
 8003742:	6093      	str	r3, [r2, #8]
 8003744:	e098      	b.n	8003878 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003746:	693b      	ldr	r3, [r7, #16]
 8003748:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800374c:	2b00      	cmp	r3, #0
 800374e:	f040 8093 	bne.w	8003878 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	4a4b      	ldr	r2, [pc, #300]	; (8003884 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d90f      	bls.n	800377a <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 800375a:	693b      	ldr	r3, [r7, #16]
 800375c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003760:	2b00      	cmp	r3, #0
 8003762:	d00a      	beq.n	800377a <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	015a      	lsls	r2, r3, #5
 8003768:	69bb      	ldr	r3, [r7, #24]
 800376a:	4413      	add	r3, r2
 800376c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003770:	461a      	mov	r2, r3
 8003772:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003776:	6093      	str	r3, [r2, #8]
 8003778:	e07e      	b.n	8003878 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	4613      	mov	r3, r2
 800377e:	00db      	lsls	r3, r3, #3
 8003780:	4413      	add	r3, r2
 8003782:	009b      	lsls	r3, r3, #2
 8003784:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003788:	687a      	ldr	r2, [r7, #4]
 800378a:	4413      	add	r3, r2
 800378c:	3304      	adds	r3, #4
 800378e:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	69da      	ldr	r2, [r3, #28]
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	0159      	lsls	r1, r3, #5
 8003798:	69bb      	ldr	r3, [r7, #24]
 800379a:	440b      	add	r3, r1
 800379c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80037a0:	691b      	ldr	r3, [r3, #16]
 80037a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037a6:	1ad2      	subs	r2, r2, r3
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 80037ac:	683b      	ldr	r3, [r7, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d114      	bne.n	80037dc <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 80037b2:	68fb      	ldr	r3, [r7, #12]
 80037b4:	699b      	ldr	r3, [r3, #24]
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d109      	bne.n	80037ce <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6818      	ldr	r0, [r3, #0]
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037c4:	461a      	mov	r2, r3
 80037c6:	2101      	movs	r1, #1
 80037c8:	f002 f8f6 	bl	80059b8 <USB_EP0_OutStart>
 80037cc:	e006      	b.n	80037dc <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 80037ce:	68fb      	ldr	r3, [r7, #12]
 80037d0:	691a      	ldr	r2, [r3, #16]
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	6a1b      	ldr	r3, [r3, #32]
 80037d6:	441a      	add	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	b2db      	uxtb	r3, r3
 80037e0:	4619      	mov	r1, r3
 80037e2:	6878      	ldr	r0, [r7, #4]
 80037e4:	f004 f816 	bl	8007814 <HAL_PCD_DataOutStageCallback>
 80037e8:	e046      	b.n	8003878 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	4a26      	ldr	r2, [pc, #152]	; (8003888 <PCD_EP_OutXfrComplete_int+0x1cc>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d124      	bne.n	800383c <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 80037f2:	693b      	ldr	r3, [r7, #16]
 80037f4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	015a      	lsls	r2, r3, #5
 8003800:	69bb      	ldr	r3, [r7, #24]
 8003802:	4413      	add	r3, r2
 8003804:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003808:	461a      	mov	r2, r3
 800380a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800380e:	6093      	str	r3, [r2, #8]
 8003810:	e032      	b.n	8003878 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	f003 0320 	and.w	r3, r3, #32
 8003818:	2b00      	cmp	r3, #0
 800381a:	d008      	beq.n	800382e <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 800381c:	683b      	ldr	r3, [r7, #0]
 800381e:	015a      	lsls	r2, r3, #5
 8003820:	69bb      	ldr	r3, [r7, #24]
 8003822:	4413      	add	r3, r2
 8003824:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003828:	461a      	mov	r2, r3
 800382a:	2320      	movs	r3, #32
 800382c:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	b2db      	uxtb	r3, r3
 8003832:	4619      	mov	r1, r3
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f003 ffed 	bl	8007814 <HAL_PCD_DataOutStageCallback>
 800383a:	e01d      	b.n	8003878 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 800383c:	683b      	ldr	r3, [r7, #0]
 800383e:	2b00      	cmp	r3, #0
 8003840:	d114      	bne.n	800386c <PCD_EP_OutXfrComplete_int+0x1b0>
 8003842:	6879      	ldr	r1, [r7, #4]
 8003844:	683a      	ldr	r2, [r7, #0]
 8003846:	4613      	mov	r3, r2
 8003848:	00db      	lsls	r3, r3, #3
 800384a:	4413      	add	r3, r2
 800384c:	009b      	lsls	r3, r3, #2
 800384e:	440b      	add	r3, r1
 8003850:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	2b00      	cmp	r3, #0
 8003858:	d108      	bne.n	800386c <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	6818      	ldr	r0, [r3, #0]
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003864:	461a      	mov	r2, r3
 8003866:	2100      	movs	r1, #0
 8003868:	f002 f8a6 	bl	80059b8 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 800386c:	683b      	ldr	r3, [r7, #0]
 800386e:	b2db      	uxtb	r3, r3
 8003870:	4619      	mov	r1, r3
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f003 ffce 	bl	8007814 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003878:	2300      	movs	r3, #0
}
 800387a:	4618      	mov	r0, r3
 800387c:	3720      	adds	r7, #32
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}
 8003882:	bf00      	nop
 8003884:	4f54300a 	.word	0x4f54300a
 8003888:	4f54310a 	.word	0x4f54310a

0800388c <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 800388c:	b580      	push	{r7, lr}
 800388e:	b086      	sub	sp, #24
 8003890:	af00      	add	r7, sp, #0
 8003892:	6078      	str	r0, [r7, #4]
 8003894:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800389c:	697b      	ldr	r3, [r7, #20]
 800389e:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80038a0:	697b      	ldr	r3, [r7, #20]
 80038a2:	333c      	adds	r3, #60	; 0x3c
 80038a4:	3304      	adds	r3, #4
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 80038aa:	683b      	ldr	r3, [r7, #0]
 80038ac:	015a      	lsls	r2, r3, #5
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	4413      	add	r3, r2
 80038b2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038b6:	689b      	ldr	r3, [r3, #8]
 80038b8:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	4a15      	ldr	r2, [pc, #84]	; (8003914 <PCD_EP_OutSetupPacket_int+0x88>)
 80038be:	4293      	cmp	r3, r2
 80038c0:	d90e      	bls.n	80038e0 <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 80038c2:	68bb      	ldr	r3, [r7, #8]
 80038c4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d009      	beq.n	80038e0 <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 80038cc:	683b      	ldr	r3, [r7, #0]
 80038ce:	015a      	lsls	r2, r3, #5
 80038d0:	693b      	ldr	r3, [r7, #16]
 80038d2:	4413      	add	r3, r2
 80038d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80038d8:	461a      	mov	r2, r3
 80038da:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80038de:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 80038e0:	6878      	ldr	r0, [r7, #4]
 80038e2:	f003 ff85 	bl	80077f0 <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	4a0a      	ldr	r2, [pc, #40]	; (8003914 <PCD_EP_OutSetupPacket_int+0x88>)
 80038ea:	4293      	cmp	r3, r2
 80038ec:	d90c      	bls.n	8003908 <PCD_EP_OutSetupPacket_int+0x7c>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	691b      	ldr	r3, [r3, #16]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d108      	bne.n	8003908 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	6818      	ldr	r0, [r3, #0]
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003900:	461a      	mov	r2, r3
 8003902:	2101      	movs	r1, #1
 8003904:	f002 f858 	bl	80059b8 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003908:	2300      	movs	r3, #0
}
 800390a:	4618      	mov	r0, r3
 800390c:	3718      	adds	r7, #24
 800390e:	46bd      	mov	sp, r7
 8003910:	bd80      	pop	{r7, pc}
 8003912:	bf00      	nop
 8003914:	4f54300a 	.word	0x4f54300a

08003918 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003918:	b480      	push	{r7}
 800391a:	b085      	sub	sp, #20
 800391c:	af00      	add	r7, sp, #0
 800391e:	6078      	str	r0, [r7, #4]
 8003920:	460b      	mov	r3, r1
 8003922:	70fb      	strb	r3, [r7, #3]
 8003924:	4613      	mov	r3, r2
 8003926:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800392e:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003930:	78fb      	ldrb	r3, [r7, #3]
 8003932:	2b00      	cmp	r3, #0
 8003934:	d107      	bne.n	8003946 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003936:	883b      	ldrh	r3, [r7, #0]
 8003938:	0419      	lsls	r1, r3, #16
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	68ba      	ldr	r2, [r7, #8]
 8003940:	430a      	orrs	r2, r1
 8003942:	629a      	str	r2, [r3, #40]	; 0x28
 8003944:	e028      	b.n	8003998 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	681b      	ldr	r3, [r3, #0]
 800394a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800394c:	0c1b      	lsrs	r3, r3, #16
 800394e:	68ba      	ldr	r2, [r7, #8]
 8003950:	4413      	add	r3, r2
 8003952:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003954:	2300      	movs	r3, #0
 8003956:	73fb      	strb	r3, [r7, #15]
 8003958:	e00d      	b.n	8003976 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681a      	ldr	r2, [r3, #0]
 800395e:	7bfb      	ldrb	r3, [r7, #15]
 8003960:	3340      	adds	r3, #64	; 0x40
 8003962:	009b      	lsls	r3, r3, #2
 8003964:	4413      	add	r3, r2
 8003966:	685b      	ldr	r3, [r3, #4]
 8003968:	0c1b      	lsrs	r3, r3, #16
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	4413      	add	r3, r2
 800396e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003970:	7bfb      	ldrb	r3, [r7, #15]
 8003972:	3301      	adds	r3, #1
 8003974:	73fb      	strb	r3, [r7, #15]
 8003976:	7bfa      	ldrb	r2, [r7, #15]
 8003978:	78fb      	ldrb	r3, [r7, #3]
 800397a:	3b01      	subs	r3, #1
 800397c:	429a      	cmp	r2, r3
 800397e:	d3ec      	bcc.n	800395a <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003980:	883b      	ldrh	r3, [r7, #0]
 8003982:	0418      	lsls	r0, r3, #16
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	6819      	ldr	r1, [r3, #0]
 8003988:	78fb      	ldrb	r3, [r7, #3]
 800398a:	3b01      	subs	r3, #1
 800398c:	68ba      	ldr	r2, [r7, #8]
 800398e:	4302      	orrs	r2, r0
 8003990:	3340      	adds	r3, #64	; 0x40
 8003992:	009b      	lsls	r3, r3, #2
 8003994:	440b      	add	r3, r1
 8003996:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003998:	2300      	movs	r3, #0
}
 800399a:	4618      	mov	r0, r3
 800399c:	3714      	adds	r7, #20
 800399e:	46bd      	mov	sp, r7
 80039a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a4:	4770      	bx	lr

080039a6 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 80039a6:	b480      	push	{r7}
 80039a8:	b083      	sub	sp, #12
 80039aa:	af00      	add	r7, sp, #0
 80039ac:	6078      	str	r0, [r7, #4]
 80039ae:	460b      	mov	r3, r1
 80039b0:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	887a      	ldrh	r2, [r7, #2]
 80039b8:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80039ba:	2300      	movs	r3, #0
}
 80039bc:	4618      	mov	r0, r3
 80039be:	370c      	adds	r7, #12
 80039c0:	46bd      	mov	sp, r7
 80039c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039c6:	4770      	bx	lr

080039c8 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 80039c8:	b480      	push	{r7}
 80039ca:	b083      	sub	sp, #12
 80039cc:	af00      	add	r7, sp, #0
 80039ce:	6078      	str	r0, [r7, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 80039d4:	bf00      	nop
 80039d6:	370c      	adds	r7, #12
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b086      	sub	sp, #24
 80039e4:	af00      	add	r7, sp, #0
 80039e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d101      	bne.n	80039f2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80039ee:	2301      	movs	r3, #1
 80039f0:	e267      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f003 0301 	and.w	r3, r3, #1
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d075      	beq.n	8003aea <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80039fe:	4b88      	ldr	r3, [pc, #544]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 030c 	and.w	r3, r3, #12
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d00c      	beq.n	8003a24 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a0a:	4b85      	ldr	r3, [pc, #532]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003a0c:	689b      	ldr	r3, [r3, #8]
 8003a0e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003a12:	2b08      	cmp	r3, #8
 8003a14:	d112      	bne.n	8003a3c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003a16:	4b82      	ldr	r3, [pc, #520]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003a18:	685b      	ldr	r3, [r3, #4]
 8003a1a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003a1e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003a22:	d10b      	bne.n	8003a3c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a24:	4b7e      	ldr	r3, [pc, #504]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d05b      	beq.n	8003ae8 <HAL_RCC_OscConfig+0x108>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d157      	bne.n	8003ae8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003a38:	2301      	movs	r3, #1
 8003a3a:	e242      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	685b      	ldr	r3, [r3, #4]
 8003a40:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003a44:	d106      	bne.n	8003a54 <HAL_RCC_OscConfig+0x74>
 8003a46:	4b76      	ldr	r3, [pc, #472]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003a48:	681b      	ldr	r3, [r3, #0]
 8003a4a:	4a75      	ldr	r2, [pc, #468]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003a4c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a50:	6013      	str	r3, [r2, #0]
 8003a52:	e01d      	b.n	8003a90 <HAL_RCC_OscConfig+0xb0>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	685b      	ldr	r3, [r3, #4]
 8003a58:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003a5c:	d10c      	bne.n	8003a78 <HAL_RCC_OscConfig+0x98>
 8003a5e:	4b70      	ldr	r3, [pc, #448]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4a6f      	ldr	r2, [pc, #444]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003a64:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003a68:	6013      	str	r3, [r2, #0]
 8003a6a:	4b6d      	ldr	r3, [pc, #436]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a6c      	ldr	r2, [pc, #432]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003a70:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a74:	6013      	str	r3, [r2, #0]
 8003a76:	e00b      	b.n	8003a90 <HAL_RCC_OscConfig+0xb0>
 8003a78:	4b69      	ldr	r3, [pc, #420]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	4a68      	ldr	r2, [pc, #416]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003a7e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a82:	6013      	str	r3, [r2, #0]
 8003a84:	4b66      	ldr	r3, [pc, #408]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	4a65      	ldr	r2, [pc, #404]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003a8a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	685b      	ldr	r3, [r3, #4]
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d013      	beq.n	8003ac0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a98:	f7fd fafc 	bl	8001094 <HAL_GetTick>
 8003a9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003a9e:	e008      	b.n	8003ab2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003aa0:	f7fd faf8 	bl	8001094 <HAL_GetTick>
 8003aa4:	4602      	mov	r2, r0
 8003aa6:	693b      	ldr	r3, [r7, #16]
 8003aa8:	1ad3      	subs	r3, r2, r3
 8003aaa:	2b64      	cmp	r3, #100	; 0x64
 8003aac:	d901      	bls.n	8003ab2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e207      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ab2:	4b5b      	ldr	r3, [pc, #364]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d0f0      	beq.n	8003aa0 <HAL_RCC_OscConfig+0xc0>
 8003abe:	e014      	b.n	8003aea <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ac0:	f7fd fae8 	bl	8001094 <HAL_GetTick>
 8003ac4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ac6:	e008      	b.n	8003ada <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ac8:	f7fd fae4 	bl	8001094 <HAL_GetTick>
 8003acc:	4602      	mov	r2, r0
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	1ad3      	subs	r3, r2, r3
 8003ad2:	2b64      	cmp	r3, #100	; 0x64
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e1f3      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003ada:	4b51      	ldr	r3, [pc, #324]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003adc:	681b      	ldr	r3, [r3, #0]
 8003ade:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d1f0      	bne.n	8003ac8 <HAL_RCC_OscConfig+0xe8>
 8003ae6:	e000      	b.n	8003aea <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003ae8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0302 	and.w	r3, r3, #2
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d063      	beq.n	8003bbe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003af6:	4b4a      	ldr	r3, [pc, #296]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003af8:	689b      	ldr	r3, [r3, #8]
 8003afa:	f003 030c 	and.w	r3, r3, #12
 8003afe:	2b00      	cmp	r3, #0
 8003b00:	d00b      	beq.n	8003b1a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b02:	4b47      	ldr	r3, [pc, #284]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003b0a:	2b08      	cmp	r3, #8
 8003b0c:	d11c      	bne.n	8003b48 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003b0e:	4b44      	ldr	r3, [pc, #272]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003b10:	685b      	ldr	r3, [r3, #4]
 8003b12:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d116      	bne.n	8003b48 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b1a:	4b41      	ldr	r3, [pc, #260]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0302 	and.w	r3, r3, #2
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d005      	beq.n	8003b32 <HAL_RCC_OscConfig+0x152>
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	68db      	ldr	r3, [r3, #12]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d001      	beq.n	8003b32 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e1c7      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b32:	4b3b      	ldr	r3, [pc, #236]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	00db      	lsls	r3, r3, #3
 8003b40:	4937      	ldr	r1, [pc, #220]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003b42:	4313      	orrs	r3, r2
 8003b44:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003b46:	e03a      	b.n	8003bbe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d020      	beq.n	8003b92 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003b50:	4b34      	ldr	r3, [pc, #208]	; (8003c24 <HAL_RCC_OscConfig+0x244>)
 8003b52:	2201      	movs	r2, #1
 8003b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b56:	f7fd fa9d 	bl	8001094 <HAL_GetTick>
 8003b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5c:	e008      	b.n	8003b70 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003b5e:	f7fd fa99 	bl	8001094 <HAL_GetTick>
 8003b62:	4602      	mov	r2, r0
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	1ad3      	subs	r3, r2, r3
 8003b68:	2b02      	cmp	r3, #2
 8003b6a:	d901      	bls.n	8003b70 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003b6c:	2303      	movs	r3, #3
 8003b6e:	e1a8      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b70:	4b2b      	ldr	r3, [pc, #172]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f003 0302 	and.w	r3, r3, #2
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d0f0      	beq.n	8003b5e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b7c:	4b28      	ldr	r3, [pc, #160]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	691b      	ldr	r3, [r3, #16]
 8003b88:	00db      	lsls	r3, r3, #3
 8003b8a:	4925      	ldr	r1, [pc, #148]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	600b      	str	r3, [r1, #0]
 8003b90:	e015      	b.n	8003bbe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b92:	4b24      	ldr	r3, [pc, #144]	; (8003c24 <HAL_RCC_OscConfig+0x244>)
 8003b94:	2200      	movs	r2, #0
 8003b96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b98:	f7fd fa7c 	bl	8001094 <HAL_GetTick>
 8003b9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003b9e:	e008      	b.n	8003bb2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ba0:	f7fd fa78 	bl	8001094 <HAL_GetTick>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	1ad3      	subs	r3, r2, r3
 8003baa:	2b02      	cmp	r3, #2
 8003bac:	d901      	bls.n	8003bb2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003bae:	2303      	movs	r3, #3
 8003bb0:	e187      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003bb2:	4b1b      	ldr	r3, [pc, #108]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f003 0302 	and.w	r3, r3, #2
 8003bba:	2b00      	cmp	r3, #0
 8003bbc:	d1f0      	bne.n	8003ba0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	f003 0308 	and.w	r3, r3, #8
 8003bc6:	2b00      	cmp	r3, #0
 8003bc8:	d036      	beq.n	8003c38 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	695b      	ldr	r3, [r3, #20]
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d016      	beq.n	8003c00 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003bd2:	4b15      	ldr	r3, [pc, #84]	; (8003c28 <HAL_RCC_OscConfig+0x248>)
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bd8:	f7fd fa5c 	bl	8001094 <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003be0:	f7fd fa58 	bl	8001094 <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b02      	cmp	r3, #2
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e167      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003bf2:	4b0b      	ldr	r3, [pc, #44]	; (8003c20 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003bf6:	f003 0302 	and.w	r3, r3, #2
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0f0      	beq.n	8003be0 <HAL_RCC_OscConfig+0x200>
 8003bfe:	e01b      	b.n	8003c38 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003c00:	4b09      	ldr	r3, [pc, #36]	; (8003c28 <HAL_RCC_OscConfig+0x248>)
 8003c02:	2200      	movs	r2, #0
 8003c04:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003c06:	f7fd fa45 	bl	8001094 <HAL_GetTick>
 8003c0a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c0c:	e00e      	b.n	8003c2c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003c0e:	f7fd fa41 	bl	8001094 <HAL_GetTick>
 8003c12:	4602      	mov	r2, r0
 8003c14:	693b      	ldr	r3, [r7, #16]
 8003c16:	1ad3      	subs	r3, r2, r3
 8003c18:	2b02      	cmp	r3, #2
 8003c1a:	d907      	bls.n	8003c2c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003c1c:	2303      	movs	r3, #3
 8003c1e:	e150      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e2>
 8003c20:	40023800 	.word	0x40023800
 8003c24:	42470000 	.word	0x42470000
 8003c28:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003c2c:	4b88      	ldr	r3, [pc, #544]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003c2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003c30:	f003 0302 	and.w	r3, r3, #2
 8003c34:	2b00      	cmp	r3, #0
 8003c36:	d1ea      	bne.n	8003c0e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	f003 0304 	and.w	r3, r3, #4
 8003c40:	2b00      	cmp	r3, #0
 8003c42:	f000 8097 	beq.w	8003d74 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003c46:	2300      	movs	r3, #0
 8003c48:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003c4a:	4b81      	ldr	r3, [pc, #516]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003c4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c4e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d10f      	bne.n	8003c76 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c56:	2300      	movs	r3, #0
 8003c58:	60bb      	str	r3, [r7, #8]
 8003c5a:	4b7d      	ldr	r3, [pc, #500]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5e:	4a7c      	ldr	r2, [pc, #496]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003c60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c64:	6413      	str	r3, [r2, #64]	; 0x40
 8003c66:	4b7a      	ldr	r3, [pc, #488]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c6e:	60bb      	str	r3, [r7, #8]
 8003c70:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c72:	2301      	movs	r3, #1
 8003c74:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c76:	4b77      	ldr	r3, [pc, #476]	; (8003e54 <HAL_RCC_OscConfig+0x474>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d118      	bne.n	8003cb4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003c82:	4b74      	ldr	r3, [pc, #464]	; (8003e54 <HAL_RCC_OscConfig+0x474>)
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a73      	ldr	r2, [pc, #460]	; (8003e54 <HAL_RCC_OscConfig+0x474>)
 8003c88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c8c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c8e:	f7fd fa01 	bl	8001094 <HAL_GetTick>
 8003c92:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003c94:	e008      	b.n	8003ca8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c96:	f7fd f9fd 	bl	8001094 <HAL_GetTick>
 8003c9a:	4602      	mov	r2, r0
 8003c9c:	693b      	ldr	r3, [r7, #16]
 8003c9e:	1ad3      	subs	r3, r2, r3
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d901      	bls.n	8003ca8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003ca4:	2303      	movs	r3, #3
 8003ca6:	e10c      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003ca8:	4b6a      	ldr	r3, [pc, #424]	; (8003e54 <HAL_RCC_OscConfig+0x474>)
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb0:	2b00      	cmp	r3, #0
 8003cb2:	d0f0      	beq.n	8003c96 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	689b      	ldr	r3, [r3, #8]
 8003cb8:	2b01      	cmp	r3, #1
 8003cba:	d106      	bne.n	8003cca <HAL_RCC_OscConfig+0x2ea>
 8003cbc:	4b64      	ldr	r3, [pc, #400]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003cbe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cc0:	4a63      	ldr	r2, [pc, #396]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003cc2:	f043 0301 	orr.w	r3, r3, #1
 8003cc6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cc8:	e01c      	b.n	8003d04 <HAL_RCC_OscConfig+0x324>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	689b      	ldr	r3, [r3, #8]
 8003cce:	2b05      	cmp	r3, #5
 8003cd0:	d10c      	bne.n	8003cec <HAL_RCC_OscConfig+0x30c>
 8003cd2:	4b5f      	ldr	r3, [pc, #380]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003cd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cd6:	4a5e      	ldr	r2, [pc, #376]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003cd8:	f043 0304 	orr.w	r3, r3, #4
 8003cdc:	6713      	str	r3, [r2, #112]	; 0x70
 8003cde:	4b5c      	ldr	r3, [pc, #368]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003ce0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ce2:	4a5b      	ldr	r2, [pc, #364]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003ce4:	f043 0301 	orr.w	r3, r3, #1
 8003ce8:	6713      	str	r3, [r2, #112]	; 0x70
 8003cea:	e00b      	b.n	8003d04 <HAL_RCC_OscConfig+0x324>
 8003cec:	4b58      	ldr	r3, [pc, #352]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003cee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cf0:	4a57      	ldr	r2, [pc, #348]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003cf2:	f023 0301 	bic.w	r3, r3, #1
 8003cf6:	6713      	str	r3, [r2, #112]	; 0x70
 8003cf8:	4b55      	ldr	r3, [pc, #340]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003cfa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003cfc:	4a54      	ldr	r2, [pc, #336]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003cfe:	f023 0304 	bic.w	r3, r3, #4
 8003d02:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b00      	cmp	r3, #0
 8003d0a:	d015      	beq.n	8003d38 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d0c:	f7fd f9c2 	bl	8001094 <HAL_GetTick>
 8003d10:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d12:	e00a      	b.n	8003d2a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d14:	f7fd f9be 	bl	8001094 <HAL_GetTick>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	693b      	ldr	r3, [r7, #16]
 8003d1c:	1ad3      	subs	r3, r2, r3
 8003d1e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d901      	bls.n	8003d2a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003d26:	2303      	movs	r3, #3
 8003d28:	e0cb      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003d2a:	4b49      	ldr	r3, [pc, #292]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003d2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d2e:	f003 0302 	and.w	r3, r3, #2
 8003d32:	2b00      	cmp	r3, #0
 8003d34:	d0ee      	beq.n	8003d14 <HAL_RCC_OscConfig+0x334>
 8003d36:	e014      	b.n	8003d62 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d38:	f7fd f9ac 	bl	8001094 <HAL_GetTick>
 8003d3c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d3e:	e00a      	b.n	8003d56 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003d40:	f7fd f9a8 	bl	8001094 <HAL_GetTick>
 8003d44:	4602      	mov	r2, r0
 8003d46:	693b      	ldr	r3, [r7, #16]
 8003d48:	1ad3      	subs	r3, r2, r3
 8003d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d4e:	4293      	cmp	r3, r2
 8003d50:	d901      	bls.n	8003d56 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e0b5      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003d56:	4b3e      	ldr	r3, [pc, #248]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003d58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003d5a:	f003 0302 	and.w	r3, r3, #2
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d1ee      	bne.n	8003d40 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d62:	7dfb      	ldrb	r3, [r7, #23]
 8003d64:	2b01      	cmp	r3, #1
 8003d66:	d105      	bne.n	8003d74 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d68:	4b39      	ldr	r3, [pc, #228]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d6c:	4a38      	ldr	r2, [pc, #224]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003d6e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d72:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	f000 80a1 	beq.w	8003ec0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003d7e:	4b34      	ldr	r3, [pc, #208]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	f003 030c 	and.w	r3, r3, #12
 8003d86:	2b08      	cmp	r3, #8
 8003d88:	d05c      	beq.n	8003e44 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	2b02      	cmp	r3, #2
 8003d90:	d141      	bne.n	8003e16 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003d92:	4b31      	ldr	r3, [pc, #196]	; (8003e58 <HAL_RCC_OscConfig+0x478>)
 8003d94:	2200      	movs	r2, #0
 8003d96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003d98:	f7fd f97c 	bl	8001094 <HAL_GetTick>
 8003d9c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003d9e:	e008      	b.n	8003db2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003da0:	f7fd f978 	bl	8001094 <HAL_GetTick>
 8003da4:	4602      	mov	r2, r0
 8003da6:	693b      	ldr	r3, [r7, #16]
 8003da8:	1ad3      	subs	r3, r2, r3
 8003daa:	2b02      	cmp	r3, #2
 8003dac:	d901      	bls.n	8003db2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003dae:	2303      	movs	r3, #3
 8003db0:	e087      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003db2:	4b27      	ldr	r3, [pc, #156]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d1f0      	bne.n	8003da0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003dbe:	687b      	ldr	r3, [r7, #4]
 8003dc0:	69da      	ldr	r2, [r3, #28]
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	6a1b      	ldr	r3, [r3, #32]
 8003dc6:	431a      	orrs	r2, r3
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dcc:	019b      	lsls	r3, r3, #6
 8003dce:	431a      	orrs	r2, r3
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dd4:	085b      	lsrs	r3, r3, #1
 8003dd6:	3b01      	subs	r3, #1
 8003dd8:	041b      	lsls	r3, r3, #16
 8003dda:	431a      	orrs	r2, r3
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003de0:	061b      	lsls	r3, r3, #24
 8003de2:	491b      	ldr	r1, [pc, #108]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003de4:	4313      	orrs	r3, r2
 8003de6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003de8:	4b1b      	ldr	r3, [pc, #108]	; (8003e58 <HAL_RCC_OscConfig+0x478>)
 8003dea:	2201      	movs	r2, #1
 8003dec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dee:	f7fd f951 	bl	8001094 <HAL_GetTick>
 8003df2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003df4:	e008      	b.n	8003e08 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003df6:	f7fd f94d 	bl	8001094 <HAL_GetTick>
 8003dfa:	4602      	mov	r2, r0
 8003dfc:	693b      	ldr	r3, [r7, #16]
 8003dfe:	1ad3      	subs	r3, r2, r3
 8003e00:	2b02      	cmp	r3, #2
 8003e02:	d901      	bls.n	8003e08 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003e04:	2303      	movs	r3, #3
 8003e06:	e05c      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003e08:	4b11      	ldr	r3, [pc, #68]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d0f0      	beq.n	8003df6 <HAL_RCC_OscConfig+0x416>
 8003e14:	e054      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003e16:	4b10      	ldr	r3, [pc, #64]	; (8003e58 <HAL_RCC_OscConfig+0x478>)
 8003e18:	2200      	movs	r2, #0
 8003e1a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003e1c:	f7fd f93a 	bl	8001094 <HAL_GetTick>
 8003e20:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e22:	e008      	b.n	8003e36 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003e24:	f7fd f936 	bl	8001094 <HAL_GetTick>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	693b      	ldr	r3, [r7, #16]
 8003e2c:	1ad3      	subs	r3, r2, r3
 8003e2e:	2b02      	cmp	r3, #2
 8003e30:	d901      	bls.n	8003e36 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003e32:	2303      	movs	r3, #3
 8003e34:	e045      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003e36:	4b06      	ldr	r3, [pc, #24]	; (8003e50 <HAL_RCC_OscConfig+0x470>)
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d1f0      	bne.n	8003e24 <HAL_RCC_OscConfig+0x444>
 8003e42:	e03d      	b.n	8003ec0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	699b      	ldr	r3, [r3, #24]
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d107      	bne.n	8003e5c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003e4c:	2301      	movs	r3, #1
 8003e4e:	e038      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e2>
 8003e50:	40023800 	.word	0x40023800
 8003e54:	40007000 	.word	0x40007000
 8003e58:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003e5c:	4b1b      	ldr	r3, [pc, #108]	; (8003ecc <HAL_RCC_OscConfig+0x4ec>)
 8003e5e:	685b      	ldr	r3, [r3, #4]
 8003e60:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	699b      	ldr	r3, [r3, #24]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d028      	beq.n	8003ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003e74:	429a      	cmp	r2, r3
 8003e76:	d121      	bne.n	8003ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003e82:	429a      	cmp	r2, r3
 8003e84:	d11a      	bne.n	8003ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003e86:	68fa      	ldr	r2, [r7, #12]
 8003e88:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003e8c:	4013      	ands	r3, r2
 8003e8e:	687a      	ldr	r2, [r7, #4]
 8003e90:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003e92:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d111      	bne.n	8003ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003e98:	68fb      	ldr	r3, [r7, #12]
 8003e9a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ea2:	085b      	lsrs	r3, r3, #1
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003ea8:	429a      	cmp	r2, r3
 8003eaa:	d107      	bne.n	8003ebc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eb6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003eb8:	429a      	cmp	r2, r3
 8003eba:	d001      	beq.n	8003ec0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ebc:	2301      	movs	r3, #1
 8003ebe:	e000      	b.n	8003ec2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ec0:	2300      	movs	r3, #0
}
 8003ec2:	4618      	mov	r0, r3
 8003ec4:	3718      	adds	r7, #24
 8003ec6:	46bd      	mov	sp, r7
 8003ec8:	bd80      	pop	{r7, pc}
 8003eca:	bf00      	nop
 8003ecc:	40023800 	.word	0x40023800

08003ed0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ed0:	b580      	push	{r7, lr}
 8003ed2:	b084      	sub	sp, #16
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	2b00      	cmp	r3, #0
 8003ede:	d101      	bne.n	8003ee4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ee0:	2301      	movs	r3, #1
 8003ee2:	e0cc      	b.n	800407e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ee4:	4b68      	ldr	r3, [pc, #416]	; (8004088 <HAL_RCC_ClockConfig+0x1b8>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	683a      	ldr	r2, [r7, #0]
 8003eee:	429a      	cmp	r2, r3
 8003ef0:	d90c      	bls.n	8003f0c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ef2:	4b65      	ldr	r3, [pc, #404]	; (8004088 <HAL_RCC_ClockConfig+0x1b8>)
 8003ef4:	683a      	ldr	r2, [r7, #0]
 8003ef6:	b2d2      	uxtb	r2, r2
 8003ef8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003efa:	4b63      	ldr	r3, [pc, #396]	; (8004088 <HAL_RCC_ClockConfig+0x1b8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0307 	and.w	r3, r3, #7
 8003f02:	683a      	ldr	r2, [r7, #0]
 8003f04:	429a      	cmp	r2, r3
 8003f06:	d001      	beq.n	8003f0c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003f08:	2301      	movs	r3, #1
 8003f0a:	e0b8      	b.n	800407e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d020      	beq.n	8003f5a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f003 0304 	and.w	r3, r3, #4
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d005      	beq.n	8003f30 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003f24:	4b59      	ldr	r3, [pc, #356]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003f26:	689b      	ldr	r3, [r3, #8]
 8003f28:	4a58      	ldr	r2, [pc, #352]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003f2a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003f2e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f003 0308 	and.w	r3, r3, #8
 8003f38:	2b00      	cmp	r3, #0
 8003f3a:	d005      	beq.n	8003f48 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003f3c:	4b53      	ldr	r3, [pc, #332]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003f3e:	689b      	ldr	r3, [r3, #8]
 8003f40:	4a52      	ldr	r2, [pc, #328]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003f42:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003f46:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003f48:	4b50      	ldr	r3, [pc, #320]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003f4a:	689b      	ldr	r3, [r3, #8]
 8003f4c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	689b      	ldr	r3, [r3, #8]
 8003f54:	494d      	ldr	r1, [pc, #308]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003f56:	4313      	orrs	r3, r2
 8003f58:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	f003 0301 	and.w	r3, r3, #1
 8003f62:	2b00      	cmp	r3, #0
 8003f64:	d044      	beq.n	8003ff0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	685b      	ldr	r3, [r3, #4]
 8003f6a:	2b01      	cmp	r3, #1
 8003f6c:	d107      	bne.n	8003f7e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003f6e:	4b47      	ldr	r3, [pc, #284]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003f76:	2b00      	cmp	r3, #0
 8003f78:	d119      	bne.n	8003fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f7a:	2301      	movs	r3, #1
 8003f7c:	e07f      	b.n	800407e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	685b      	ldr	r3, [r3, #4]
 8003f82:	2b02      	cmp	r3, #2
 8003f84:	d003      	beq.n	8003f8e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003f8a:	2b03      	cmp	r3, #3
 8003f8c:	d107      	bne.n	8003f9e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f8e:	4b3f      	ldr	r3, [pc, #252]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f96:	2b00      	cmp	r3, #0
 8003f98:	d109      	bne.n	8003fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003f9a:	2301      	movs	r3, #1
 8003f9c:	e06f      	b.n	800407e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003f9e:	4b3b      	ldr	r3, [pc, #236]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f003 0302 	and.w	r3, r3, #2
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d101      	bne.n	8003fae <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003faa:	2301      	movs	r3, #1
 8003fac:	e067      	b.n	800407e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003fae:	4b37      	ldr	r3, [pc, #220]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003fb0:	689b      	ldr	r3, [r3, #8]
 8003fb2:	f023 0203 	bic.w	r2, r3, #3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	4934      	ldr	r1, [pc, #208]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003fbc:	4313      	orrs	r3, r2
 8003fbe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003fc0:	f7fd f868 	bl	8001094 <HAL_GetTick>
 8003fc4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fc6:	e00a      	b.n	8003fde <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003fc8:	f7fd f864 	bl	8001094 <HAL_GetTick>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	1ad3      	subs	r3, r2, r3
 8003fd2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d901      	bls.n	8003fde <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003fda:	2303      	movs	r3, #3
 8003fdc:	e04f      	b.n	800407e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003fde:	4b2b      	ldr	r3, [pc, #172]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8003fe0:	689b      	ldr	r3, [r3, #8]
 8003fe2:	f003 020c 	and.w	r2, r3, #12
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	685b      	ldr	r3, [r3, #4]
 8003fea:	009b      	lsls	r3, r3, #2
 8003fec:	429a      	cmp	r2, r3
 8003fee:	d1eb      	bne.n	8003fc8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003ff0:	4b25      	ldr	r3, [pc, #148]	; (8004088 <HAL_RCC_ClockConfig+0x1b8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f003 0307 	and.w	r3, r3, #7
 8003ff8:	683a      	ldr	r2, [r7, #0]
 8003ffa:	429a      	cmp	r2, r3
 8003ffc:	d20c      	bcs.n	8004018 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ffe:	4b22      	ldr	r3, [pc, #136]	; (8004088 <HAL_RCC_ClockConfig+0x1b8>)
 8004000:	683a      	ldr	r2, [r7, #0]
 8004002:	b2d2      	uxtb	r2, r2
 8004004:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004006:	4b20      	ldr	r3, [pc, #128]	; (8004088 <HAL_RCC_ClockConfig+0x1b8>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f003 0307 	and.w	r3, r3, #7
 800400e:	683a      	ldr	r2, [r7, #0]
 8004010:	429a      	cmp	r2, r3
 8004012:	d001      	beq.n	8004018 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004014:	2301      	movs	r3, #1
 8004016:	e032      	b.n	800407e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	f003 0304 	and.w	r3, r3, #4
 8004020:	2b00      	cmp	r3, #0
 8004022:	d008      	beq.n	8004036 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004024:	4b19      	ldr	r3, [pc, #100]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8004026:	689b      	ldr	r3, [r3, #8]
 8004028:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	68db      	ldr	r3, [r3, #12]
 8004030:	4916      	ldr	r1, [pc, #88]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8004032:	4313      	orrs	r3, r2
 8004034:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	f003 0308 	and.w	r3, r3, #8
 800403e:	2b00      	cmp	r3, #0
 8004040:	d009      	beq.n	8004056 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004042:	4b12      	ldr	r3, [pc, #72]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8004044:	689b      	ldr	r3, [r3, #8]
 8004046:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	691b      	ldr	r3, [r3, #16]
 800404e:	00db      	lsls	r3, r3, #3
 8004050:	490e      	ldr	r1, [pc, #56]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 8004052:	4313      	orrs	r3, r2
 8004054:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004056:	f000 f821 	bl	800409c <HAL_RCC_GetSysClockFreq>
 800405a:	4602      	mov	r2, r0
 800405c:	4b0b      	ldr	r3, [pc, #44]	; (800408c <HAL_RCC_ClockConfig+0x1bc>)
 800405e:	689b      	ldr	r3, [r3, #8]
 8004060:	091b      	lsrs	r3, r3, #4
 8004062:	f003 030f 	and.w	r3, r3, #15
 8004066:	490a      	ldr	r1, [pc, #40]	; (8004090 <HAL_RCC_ClockConfig+0x1c0>)
 8004068:	5ccb      	ldrb	r3, [r1, r3]
 800406a:	fa22 f303 	lsr.w	r3, r2, r3
 800406e:	4a09      	ldr	r2, [pc, #36]	; (8004094 <HAL_RCC_ClockConfig+0x1c4>)
 8004070:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004072:	4b09      	ldr	r3, [pc, #36]	; (8004098 <HAL_RCC_ClockConfig+0x1c8>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7fc ffc8 	bl	800100c <HAL_InitTick>

  return HAL_OK;
 800407c:	2300      	movs	r3, #0
}
 800407e:	4618      	mov	r0, r3
 8004080:	3710      	adds	r7, #16
 8004082:	46bd      	mov	sp, r7
 8004084:	bd80      	pop	{r7, pc}
 8004086:	bf00      	nop
 8004088:	40023c00 	.word	0x40023c00
 800408c:	40023800 	.word	0x40023800
 8004090:	08007e00 	.word	0x08007e00
 8004094:	200003d4 	.word	0x200003d4
 8004098:	200003d8 	.word	0x200003d8

0800409c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800409c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80040a0:	b090      	sub	sp, #64	; 0x40
 80040a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80040a4:	2300      	movs	r3, #0
 80040a6:	637b      	str	r3, [r7, #52]	; 0x34
 80040a8:	2300      	movs	r3, #0
 80040aa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80040ac:	2300      	movs	r3, #0
 80040ae:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80040b0:	2300      	movs	r3, #0
 80040b2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80040b4:	4b59      	ldr	r3, [pc, #356]	; (800421c <HAL_RCC_GetSysClockFreq+0x180>)
 80040b6:	689b      	ldr	r3, [r3, #8]
 80040b8:	f003 030c 	and.w	r3, r3, #12
 80040bc:	2b08      	cmp	r3, #8
 80040be:	d00d      	beq.n	80040dc <HAL_RCC_GetSysClockFreq+0x40>
 80040c0:	2b08      	cmp	r3, #8
 80040c2:	f200 80a1 	bhi.w	8004208 <HAL_RCC_GetSysClockFreq+0x16c>
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_RCC_GetSysClockFreq+0x34>
 80040ca:	2b04      	cmp	r3, #4
 80040cc:	d003      	beq.n	80040d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80040ce:	e09b      	b.n	8004208 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80040d0:	4b53      	ldr	r3, [pc, #332]	; (8004220 <HAL_RCC_GetSysClockFreq+0x184>)
 80040d2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80040d4:	e09b      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80040d6:	4b53      	ldr	r3, [pc, #332]	; (8004224 <HAL_RCC_GetSysClockFreq+0x188>)
 80040d8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80040da:	e098      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80040dc:	4b4f      	ldr	r3, [pc, #316]	; (800421c <HAL_RCC_GetSysClockFreq+0x180>)
 80040de:	685b      	ldr	r3, [r3, #4]
 80040e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80040e4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80040e6:	4b4d      	ldr	r3, [pc, #308]	; (800421c <HAL_RCC_GetSysClockFreq+0x180>)
 80040e8:	685b      	ldr	r3, [r3, #4]
 80040ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d028      	beq.n	8004144 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80040f2:	4b4a      	ldr	r3, [pc, #296]	; (800421c <HAL_RCC_GetSysClockFreq+0x180>)
 80040f4:	685b      	ldr	r3, [r3, #4]
 80040f6:	099b      	lsrs	r3, r3, #6
 80040f8:	2200      	movs	r2, #0
 80040fa:	623b      	str	r3, [r7, #32]
 80040fc:	627a      	str	r2, [r7, #36]	; 0x24
 80040fe:	6a3b      	ldr	r3, [r7, #32]
 8004100:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004104:	2100      	movs	r1, #0
 8004106:	4b47      	ldr	r3, [pc, #284]	; (8004224 <HAL_RCC_GetSysClockFreq+0x188>)
 8004108:	fb03 f201 	mul.w	r2, r3, r1
 800410c:	2300      	movs	r3, #0
 800410e:	fb00 f303 	mul.w	r3, r0, r3
 8004112:	4413      	add	r3, r2
 8004114:	4a43      	ldr	r2, [pc, #268]	; (8004224 <HAL_RCC_GetSysClockFreq+0x188>)
 8004116:	fba0 1202 	umull	r1, r2, r0, r2
 800411a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800411c:	460a      	mov	r2, r1
 800411e:	62ba      	str	r2, [r7, #40]	; 0x28
 8004120:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004122:	4413      	add	r3, r2
 8004124:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004126:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004128:	2200      	movs	r2, #0
 800412a:	61bb      	str	r3, [r7, #24]
 800412c:	61fa      	str	r2, [r7, #28]
 800412e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004132:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004136:	f7fc f84d 	bl	80001d4 <__aeabi_uldivmod>
 800413a:	4602      	mov	r2, r0
 800413c:	460b      	mov	r3, r1
 800413e:	4613      	mov	r3, r2
 8004140:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004142:	e053      	b.n	80041ec <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004144:	4b35      	ldr	r3, [pc, #212]	; (800421c <HAL_RCC_GetSysClockFreq+0x180>)
 8004146:	685b      	ldr	r3, [r3, #4]
 8004148:	099b      	lsrs	r3, r3, #6
 800414a:	2200      	movs	r2, #0
 800414c:	613b      	str	r3, [r7, #16]
 800414e:	617a      	str	r2, [r7, #20]
 8004150:	693b      	ldr	r3, [r7, #16]
 8004152:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004156:	f04f 0b00 	mov.w	fp, #0
 800415a:	4652      	mov	r2, sl
 800415c:	465b      	mov	r3, fp
 800415e:	f04f 0000 	mov.w	r0, #0
 8004162:	f04f 0100 	mov.w	r1, #0
 8004166:	0159      	lsls	r1, r3, #5
 8004168:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800416c:	0150      	lsls	r0, r2, #5
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	ebb2 080a 	subs.w	r8, r2, sl
 8004176:	eb63 090b 	sbc.w	r9, r3, fp
 800417a:	f04f 0200 	mov.w	r2, #0
 800417e:	f04f 0300 	mov.w	r3, #0
 8004182:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004186:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800418a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800418e:	ebb2 0408 	subs.w	r4, r2, r8
 8004192:	eb63 0509 	sbc.w	r5, r3, r9
 8004196:	f04f 0200 	mov.w	r2, #0
 800419a:	f04f 0300 	mov.w	r3, #0
 800419e:	00eb      	lsls	r3, r5, #3
 80041a0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80041a4:	00e2      	lsls	r2, r4, #3
 80041a6:	4614      	mov	r4, r2
 80041a8:	461d      	mov	r5, r3
 80041aa:	eb14 030a 	adds.w	r3, r4, sl
 80041ae:	603b      	str	r3, [r7, #0]
 80041b0:	eb45 030b 	adc.w	r3, r5, fp
 80041b4:	607b      	str	r3, [r7, #4]
 80041b6:	f04f 0200 	mov.w	r2, #0
 80041ba:	f04f 0300 	mov.w	r3, #0
 80041be:	e9d7 4500 	ldrd	r4, r5, [r7]
 80041c2:	4629      	mov	r1, r5
 80041c4:	028b      	lsls	r3, r1, #10
 80041c6:	4621      	mov	r1, r4
 80041c8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80041cc:	4621      	mov	r1, r4
 80041ce:	028a      	lsls	r2, r1, #10
 80041d0:	4610      	mov	r0, r2
 80041d2:	4619      	mov	r1, r3
 80041d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80041d6:	2200      	movs	r2, #0
 80041d8:	60bb      	str	r3, [r7, #8]
 80041da:	60fa      	str	r2, [r7, #12]
 80041dc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041e0:	f7fb fff8 	bl	80001d4 <__aeabi_uldivmod>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4613      	mov	r3, r2
 80041ea:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80041ec:	4b0b      	ldr	r3, [pc, #44]	; (800421c <HAL_RCC_GetSysClockFreq+0x180>)
 80041ee:	685b      	ldr	r3, [r3, #4]
 80041f0:	0c1b      	lsrs	r3, r3, #16
 80041f2:	f003 0303 	and.w	r3, r3, #3
 80041f6:	3301      	adds	r3, #1
 80041f8:	005b      	lsls	r3, r3, #1
 80041fa:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80041fc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80041fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004200:	fbb2 f3f3 	udiv	r3, r2, r3
 8004204:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004206:	e002      	b.n	800420e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004208:	4b05      	ldr	r3, [pc, #20]	; (8004220 <HAL_RCC_GetSysClockFreq+0x184>)
 800420a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800420c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800420e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004210:	4618      	mov	r0, r3
 8004212:	3740      	adds	r7, #64	; 0x40
 8004214:	46bd      	mov	sp, r7
 8004216:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800421a:	bf00      	nop
 800421c:	40023800 	.word	0x40023800
 8004220:	00f42400 	.word	0x00f42400
 8004224:	017d7840 	.word	0x017d7840

08004228 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004228:	b480      	push	{r7}
 800422a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800422c:	4b03      	ldr	r3, [pc, #12]	; (800423c <HAL_RCC_GetHCLKFreq+0x14>)
 800422e:	681b      	ldr	r3, [r3, #0]
}
 8004230:	4618      	mov	r0, r3
 8004232:	46bd      	mov	sp, r7
 8004234:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004238:	4770      	bx	lr
 800423a:	bf00      	nop
 800423c:	200003d4 	.word	0x200003d4

08004240 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004240:	b084      	sub	sp, #16
 8004242:	b580      	push	{r7, lr}
 8004244:	b084      	sub	sp, #16
 8004246:	af00      	add	r7, sp, #0
 8004248:	6078      	str	r0, [r7, #4]
 800424a:	f107 001c 	add.w	r0, r7, #28
 800424e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004254:	2b01      	cmp	r3, #1
 8004256:	d122      	bne.n	800429e <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	68db      	ldr	r3, [r3, #12]
 8004268:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 800426c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004270:	687a      	ldr	r2, [r7, #4]
 8004272:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	68db      	ldr	r3, [r3, #12]
 8004278:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004280:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004282:	2b01      	cmp	r3, #1
 8004284:	d105      	bne.n	8004292 <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	68db      	ldr	r3, [r3, #12]
 800428a:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004292:	6878      	ldr	r0, [r7, #4]
 8004294:	f001 fbee 	bl	8005a74 <USB_CoreReset>
 8004298:	4603      	mov	r3, r0
 800429a:	73fb      	strb	r3, [r7, #15]
 800429c:	e01a      	b.n	80042d4 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	68db      	ldr	r3, [r3, #12]
 80042a2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80042aa:	6878      	ldr	r0, [r7, #4]
 80042ac:	f001 fbe2 	bl	8005a74 <USB_CoreReset>
 80042b0:	4603      	mov	r3, r0
 80042b2:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80042b4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d106      	bne.n	80042c8 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042be:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	639a      	str	r2, [r3, #56]	; 0x38
 80042c6:	e005      	b.n	80042d4 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042cc:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 80042d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80042d6:	2b01      	cmp	r3, #1
 80042d8:	d10b      	bne.n	80042f2 <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	689b      	ldr	r3, [r3, #8]
 80042de:	f043 0206 	orr.w	r2, r3, #6
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	689b      	ldr	r3, [r3, #8]
 80042ea:	f043 0220 	orr.w	r2, r3, #32
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 80042f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80042f4:	4618      	mov	r0, r3
 80042f6:	3710      	adds	r7, #16
 80042f8:	46bd      	mov	sp, r7
 80042fa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80042fe:	b004      	add	sp, #16
 8004300:	4770      	bx	lr
	...

08004304 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004304:	b480      	push	{r7}
 8004306:	b087      	sub	sp, #28
 8004308:	af00      	add	r7, sp, #0
 800430a:	60f8      	str	r0, [r7, #12]
 800430c:	60b9      	str	r1, [r7, #8]
 800430e:	4613      	mov	r3, r2
 8004310:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 8004312:	79fb      	ldrb	r3, [r7, #7]
 8004314:	2b02      	cmp	r3, #2
 8004316:	d165      	bne.n	80043e4 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004318:	68bb      	ldr	r3, [r7, #8]
 800431a:	4a41      	ldr	r2, [pc, #260]	; (8004420 <USB_SetTurnaroundTime+0x11c>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d906      	bls.n	800432e <USB_SetTurnaroundTime+0x2a>
 8004320:	68bb      	ldr	r3, [r7, #8]
 8004322:	4a40      	ldr	r2, [pc, #256]	; (8004424 <USB_SetTurnaroundTime+0x120>)
 8004324:	4293      	cmp	r3, r2
 8004326:	d202      	bcs.n	800432e <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004328:	230f      	movs	r3, #15
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	e062      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	4a3c      	ldr	r2, [pc, #240]	; (8004424 <USB_SetTurnaroundTime+0x120>)
 8004332:	4293      	cmp	r3, r2
 8004334:	d306      	bcc.n	8004344 <USB_SetTurnaroundTime+0x40>
 8004336:	68bb      	ldr	r3, [r7, #8]
 8004338:	4a3b      	ldr	r2, [pc, #236]	; (8004428 <USB_SetTurnaroundTime+0x124>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d202      	bcs.n	8004344 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800433e:	230e      	movs	r3, #14
 8004340:	617b      	str	r3, [r7, #20]
 8004342:	e057      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004344:	68bb      	ldr	r3, [r7, #8]
 8004346:	4a38      	ldr	r2, [pc, #224]	; (8004428 <USB_SetTurnaroundTime+0x124>)
 8004348:	4293      	cmp	r3, r2
 800434a:	d306      	bcc.n	800435a <USB_SetTurnaroundTime+0x56>
 800434c:	68bb      	ldr	r3, [r7, #8]
 800434e:	4a37      	ldr	r2, [pc, #220]	; (800442c <USB_SetTurnaroundTime+0x128>)
 8004350:	4293      	cmp	r3, r2
 8004352:	d202      	bcs.n	800435a <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004354:	230d      	movs	r3, #13
 8004356:	617b      	str	r3, [r7, #20]
 8004358:	e04c      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 800435a:	68bb      	ldr	r3, [r7, #8]
 800435c:	4a33      	ldr	r2, [pc, #204]	; (800442c <USB_SetTurnaroundTime+0x128>)
 800435e:	4293      	cmp	r3, r2
 8004360:	d306      	bcc.n	8004370 <USB_SetTurnaroundTime+0x6c>
 8004362:	68bb      	ldr	r3, [r7, #8]
 8004364:	4a32      	ldr	r2, [pc, #200]	; (8004430 <USB_SetTurnaroundTime+0x12c>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d802      	bhi.n	8004370 <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 800436a:	230c      	movs	r3, #12
 800436c:	617b      	str	r3, [r7, #20]
 800436e:	e041      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 8004370:	68bb      	ldr	r3, [r7, #8]
 8004372:	4a2f      	ldr	r2, [pc, #188]	; (8004430 <USB_SetTurnaroundTime+0x12c>)
 8004374:	4293      	cmp	r3, r2
 8004376:	d906      	bls.n	8004386 <USB_SetTurnaroundTime+0x82>
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	4a2e      	ldr	r2, [pc, #184]	; (8004434 <USB_SetTurnaroundTime+0x130>)
 800437c:	4293      	cmp	r3, r2
 800437e:	d802      	bhi.n	8004386 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 8004380:	230b      	movs	r3, #11
 8004382:	617b      	str	r3, [r7, #20]
 8004384:	e036      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 8004386:	68bb      	ldr	r3, [r7, #8]
 8004388:	4a2a      	ldr	r2, [pc, #168]	; (8004434 <USB_SetTurnaroundTime+0x130>)
 800438a:	4293      	cmp	r3, r2
 800438c:	d906      	bls.n	800439c <USB_SetTurnaroundTime+0x98>
 800438e:	68bb      	ldr	r3, [r7, #8]
 8004390:	4a29      	ldr	r2, [pc, #164]	; (8004438 <USB_SetTurnaroundTime+0x134>)
 8004392:	4293      	cmp	r3, r2
 8004394:	d802      	bhi.n	800439c <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 8004396:	230a      	movs	r3, #10
 8004398:	617b      	str	r3, [r7, #20]
 800439a:	e02b      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 800439c:	68bb      	ldr	r3, [r7, #8]
 800439e:	4a26      	ldr	r2, [pc, #152]	; (8004438 <USB_SetTurnaroundTime+0x134>)
 80043a0:	4293      	cmp	r3, r2
 80043a2:	d906      	bls.n	80043b2 <USB_SetTurnaroundTime+0xae>
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	4a25      	ldr	r2, [pc, #148]	; (800443c <USB_SetTurnaroundTime+0x138>)
 80043a8:	4293      	cmp	r3, r2
 80043aa:	d202      	bcs.n	80043b2 <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80043ac:	2309      	movs	r3, #9
 80043ae:	617b      	str	r3, [r7, #20]
 80043b0:	e020      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80043b2:	68bb      	ldr	r3, [r7, #8]
 80043b4:	4a21      	ldr	r2, [pc, #132]	; (800443c <USB_SetTurnaroundTime+0x138>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d306      	bcc.n	80043c8 <USB_SetTurnaroundTime+0xc4>
 80043ba:	68bb      	ldr	r3, [r7, #8]
 80043bc:	4a20      	ldr	r2, [pc, #128]	; (8004440 <USB_SetTurnaroundTime+0x13c>)
 80043be:	4293      	cmp	r3, r2
 80043c0:	d802      	bhi.n	80043c8 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80043c2:	2308      	movs	r3, #8
 80043c4:	617b      	str	r3, [r7, #20]
 80043c6:	e015      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	4a1d      	ldr	r2, [pc, #116]	; (8004440 <USB_SetTurnaroundTime+0x13c>)
 80043cc:	4293      	cmp	r3, r2
 80043ce:	d906      	bls.n	80043de <USB_SetTurnaroundTime+0xda>
 80043d0:	68bb      	ldr	r3, [r7, #8]
 80043d2:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <USB_SetTurnaroundTime+0x140>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d202      	bcs.n	80043de <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 80043d8:	2307      	movs	r3, #7
 80043da:	617b      	str	r3, [r7, #20]
 80043dc:	e00a      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 80043de:	2306      	movs	r3, #6
 80043e0:	617b      	str	r3, [r7, #20]
 80043e2:	e007      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 80043e4:	79fb      	ldrb	r3, [r7, #7]
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	d102      	bne.n	80043f0 <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 80043ea:	2309      	movs	r3, #9
 80043ec:	617b      	str	r3, [r7, #20]
 80043ee:	e001      	b.n	80043f4 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 80043f0:	2309      	movs	r3, #9
 80043f2:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	68db      	ldr	r3, [r3, #12]
 80043f8:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	68da      	ldr	r2, [r3, #12]
 8004404:	697b      	ldr	r3, [r7, #20]
 8004406:	029b      	lsls	r3, r3, #10
 8004408:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 800440c:	431a      	orrs	r2, r3
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004412:	2300      	movs	r3, #0
}
 8004414:	4618      	mov	r0, r3
 8004416:	371c      	adds	r7, #28
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr
 8004420:	00d8acbf 	.word	0x00d8acbf
 8004424:	00e4e1c0 	.word	0x00e4e1c0
 8004428:	00f42400 	.word	0x00f42400
 800442c:	01067380 	.word	0x01067380
 8004430:	011a499f 	.word	0x011a499f
 8004434:	01312cff 	.word	0x01312cff
 8004438:	014ca43f 	.word	0x014ca43f
 800443c:	016e3600 	.word	0x016e3600
 8004440:	01a6ab1f 	.word	0x01a6ab1f
 8004444:	01e84800 	.word	0x01e84800

08004448 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	689b      	ldr	r3, [r3, #8]
 8004454:	f043 0201 	orr.w	r2, r3, #1
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	370c      	adds	r7, #12
 8004462:	46bd      	mov	sp, r7
 8004464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004468:	4770      	bx	lr

0800446a <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 800446a:	b480      	push	{r7}
 800446c:	b083      	sub	sp, #12
 800446e:	af00      	add	r7, sp, #0
 8004470:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	689b      	ldr	r3, [r3, #8]
 8004476:	f023 0201 	bic.w	r2, r3, #1
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 800447e:	2300      	movs	r3, #0
}
 8004480:	4618      	mov	r0, r3
 8004482:	370c      	adds	r7, #12
 8004484:	46bd      	mov	sp, r7
 8004486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448a:	4770      	bx	lr

0800448c <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 800448c:	b580      	push	{r7, lr}
 800448e:	b084      	sub	sp, #16
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
 8004494:	460b      	mov	r3, r1
 8004496:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 8004498:	2300      	movs	r3, #0
 800449a:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	68db      	ldr	r3, [r3, #12]
 80044a0:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80044a8:	78fb      	ldrb	r3, [r7, #3]
 80044aa:	2b01      	cmp	r3, #1
 80044ac:	d115      	bne.n	80044da <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	68db      	ldr	r3, [r3, #12]
 80044b2:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044ba:	2001      	movs	r0, #1
 80044bc:	f7fc fdf6 	bl	80010ac <HAL_Delay>
      ms++;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	3301      	adds	r3, #1
 80044c4:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 80044c6:	6878      	ldr	r0, [r7, #4]
 80044c8:	f001 fa45 	bl	8005956 <USB_GetMode>
 80044cc:	4603      	mov	r3, r0
 80044ce:	2b01      	cmp	r3, #1
 80044d0:	d01e      	beq.n	8004510 <USB_SetCurrentMode+0x84>
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2b31      	cmp	r3, #49	; 0x31
 80044d6:	d9f0      	bls.n	80044ba <USB_SetCurrentMode+0x2e>
 80044d8:	e01a      	b.n	8004510 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 80044da:	78fb      	ldrb	r3, [r7, #3]
 80044dc:	2b00      	cmp	r3, #0
 80044de:	d115      	bne.n	800450c <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	68db      	ldr	r3, [r3, #12]
 80044e4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80044ec:	2001      	movs	r0, #1
 80044ee:	f7fc fddd 	bl	80010ac <HAL_Delay>
      ms++;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	3301      	adds	r3, #1
 80044f6:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f001 fa2c 	bl	8005956 <USB_GetMode>
 80044fe:	4603      	mov	r3, r0
 8004500:	2b00      	cmp	r3, #0
 8004502:	d005      	beq.n	8004510 <USB_SetCurrentMode+0x84>
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	2b31      	cmp	r3, #49	; 0x31
 8004508:	d9f0      	bls.n	80044ec <USB_SetCurrentMode+0x60>
 800450a:	e001      	b.n	8004510 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	e005      	b.n	800451c <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	2b32      	cmp	r3, #50	; 0x32
 8004514:	d101      	bne.n	800451a <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004516:	2301      	movs	r3, #1
 8004518:	e000      	b.n	800451c <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 800451a:	2300      	movs	r3, #0
}
 800451c:	4618      	mov	r0, r3
 800451e:	3710      	adds	r7, #16
 8004520:	46bd      	mov	sp, r7
 8004522:	bd80      	pop	{r7, pc}

08004524 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004524:	b084      	sub	sp, #16
 8004526:	b580      	push	{r7, lr}
 8004528:	b086      	sub	sp, #24
 800452a:	af00      	add	r7, sp, #0
 800452c:	6078      	str	r0, [r7, #4]
 800452e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004532:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004536:	2300      	movs	r3, #0
 8004538:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800453e:	2300      	movs	r3, #0
 8004540:	613b      	str	r3, [r7, #16]
 8004542:	e009      	b.n	8004558 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004544:	687a      	ldr	r2, [r7, #4]
 8004546:	693b      	ldr	r3, [r7, #16]
 8004548:	3340      	adds	r3, #64	; 0x40
 800454a:	009b      	lsls	r3, r3, #2
 800454c:	4413      	add	r3, r2
 800454e:	2200      	movs	r2, #0
 8004550:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004552:	693b      	ldr	r3, [r7, #16]
 8004554:	3301      	adds	r3, #1
 8004556:	613b      	str	r3, [r7, #16]
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	2b0e      	cmp	r3, #14
 800455c:	d9f2      	bls.n	8004544 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800455e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004560:	2b00      	cmp	r3, #0
 8004562:	d11c      	bne.n	800459e <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800456a:	685b      	ldr	r3, [r3, #4]
 800456c:	68fa      	ldr	r2, [r7, #12]
 800456e:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004572:	f043 0302 	orr.w	r3, r3, #2
 8004576:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800457c:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004588:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004594:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	639a      	str	r2, [r3, #56]	; 0x38
 800459c:	e00b      	b.n	80045b6 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045a2:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045ae:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80045bc:	461a      	mov	r2, r3
 80045be:	2300      	movs	r3, #0
 80045c0:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045c8:	4619      	mov	r1, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045d0:	461a      	mov	r2, r3
 80045d2:	680b      	ldr	r3, [r1, #0]
 80045d4:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80045d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045d8:	2b01      	cmp	r3, #1
 80045da:	d10c      	bne.n	80045f6 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 80045dc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d104      	bne.n	80045ec <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 80045e2:	2100      	movs	r1, #0
 80045e4:	6878      	ldr	r0, [r7, #4]
 80045e6:	f000 f965 	bl	80048b4 <USB_SetDevSpeed>
 80045ea:	e008      	b.n	80045fe <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80045ec:	2101      	movs	r1, #1
 80045ee:	6878      	ldr	r0, [r7, #4]
 80045f0:	f000 f960 	bl	80048b4 <USB_SetDevSpeed>
 80045f4:	e003      	b.n	80045fe <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80045f6:	2103      	movs	r1, #3
 80045f8:	6878      	ldr	r0, [r7, #4]
 80045fa:	f000 f95b 	bl	80048b4 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80045fe:	2110      	movs	r1, #16
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f8f3 	bl	80047ec <USB_FlushTxFifo>
 8004606:	4603      	mov	r3, r0
 8004608:	2b00      	cmp	r3, #0
 800460a:	d001      	beq.n	8004610 <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 f91f 	bl	8004854 <USB_FlushRxFifo>
 8004616:	4603      	mov	r3, r0
 8004618:	2b00      	cmp	r3, #0
 800461a:	d001      	beq.n	8004620 <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004626:	461a      	mov	r2, r3
 8004628:	2300      	movs	r3, #0
 800462a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004632:	461a      	mov	r2, r3
 8004634:	2300      	movs	r3, #0
 8004636:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463e:	461a      	mov	r2, r3
 8004640:	2300      	movs	r3, #0
 8004642:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004644:	2300      	movs	r3, #0
 8004646:	613b      	str	r3, [r7, #16]
 8004648:	e043      	b.n	80046d2 <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	015a      	lsls	r2, r3, #5
 800464e:	68fb      	ldr	r3, [r7, #12]
 8004650:	4413      	add	r3, r2
 8004652:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800465c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004660:	d118      	bne.n	8004694 <USB_DevInit+0x170>
    {
      if (i == 0U)
 8004662:	693b      	ldr	r3, [r7, #16]
 8004664:	2b00      	cmp	r3, #0
 8004666:	d10a      	bne.n	800467e <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004668:	693b      	ldr	r3, [r7, #16]
 800466a:	015a      	lsls	r2, r3, #5
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	4413      	add	r3, r2
 8004670:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004674:	461a      	mov	r2, r3
 8004676:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800467a:	6013      	str	r3, [r2, #0]
 800467c:	e013      	b.n	80046a6 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	015a      	lsls	r2, r3, #5
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	4413      	add	r3, r2
 8004686:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800468a:	461a      	mov	r2, r3
 800468c:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004690:	6013      	str	r3, [r2, #0]
 8004692:	e008      	b.n	80046a6 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004694:	693b      	ldr	r3, [r7, #16]
 8004696:	015a      	lsls	r2, r3, #5
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	4413      	add	r3, r2
 800469c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046a0:	461a      	mov	r2, r3
 80046a2:	2300      	movs	r3, #0
 80046a4:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80046a6:	693b      	ldr	r3, [r7, #16]
 80046a8:	015a      	lsls	r2, r3, #5
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	4413      	add	r3, r2
 80046ae:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046b2:	461a      	mov	r2, r3
 80046b4:	2300      	movs	r3, #0
 80046b6:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80046b8:	693b      	ldr	r3, [r7, #16]
 80046ba:	015a      	lsls	r2, r3, #5
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	4413      	add	r3, r2
 80046c0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046c4:	461a      	mov	r2, r3
 80046c6:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80046ca:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046cc:	693b      	ldr	r3, [r7, #16]
 80046ce:	3301      	adds	r3, #1
 80046d0:	613b      	str	r3, [r7, #16]
 80046d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046d4:	693a      	ldr	r2, [r7, #16]
 80046d6:	429a      	cmp	r2, r3
 80046d8:	d3b7      	bcc.n	800464a <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046da:	2300      	movs	r3, #0
 80046dc:	613b      	str	r3, [r7, #16]
 80046de:	e043      	b.n	8004768 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80046e0:	693b      	ldr	r3, [r7, #16]
 80046e2:	015a      	lsls	r2, r3, #5
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4413      	add	r3, r2
 80046e8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046f2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046f6:	d118      	bne.n	800472a <USB_DevInit+0x206>
    {
      if (i == 0U)
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d10a      	bne.n	8004714 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 80046fe:	693b      	ldr	r3, [r7, #16]
 8004700:	015a      	lsls	r2, r3, #5
 8004702:	68fb      	ldr	r3, [r7, #12]
 8004704:	4413      	add	r3, r2
 8004706:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800470a:	461a      	mov	r2, r3
 800470c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004710:	6013      	str	r3, [r2, #0]
 8004712:	e013      	b.n	800473c <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004714:	693b      	ldr	r3, [r7, #16]
 8004716:	015a      	lsls	r2, r3, #5
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	4413      	add	r3, r2
 800471c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004720:	461a      	mov	r2, r3
 8004722:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004726:	6013      	str	r3, [r2, #0]
 8004728:	e008      	b.n	800473c <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 800472a:	693b      	ldr	r3, [r7, #16]
 800472c:	015a      	lsls	r2, r3, #5
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	4413      	add	r3, r2
 8004732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004736:	461a      	mov	r2, r3
 8004738:	2300      	movs	r3, #0
 800473a:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 800473c:	693b      	ldr	r3, [r7, #16]
 800473e:	015a      	lsls	r2, r3, #5
 8004740:	68fb      	ldr	r3, [r7, #12]
 8004742:	4413      	add	r3, r2
 8004744:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004748:	461a      	mov	r2, r3
 800474a:	2300      	movs	r3, #0
 800474c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 800474e:	693b      	ldr	r3, [r7, #16]
 8004750:	015a      	lsls	r2, r3, #5
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	4413      	add	r3, r2
 8004756:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800475a:	461a      	mov	r2, r3
 800475c:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004760:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004762:	693b      	ldr	r3, [r7, #16]
 8004764:	3301      	adds	r3, #1
 8004766:	613b      	str	r3, [r7, #16]
 8004768:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800476a:	693a      	ldr	r2, [r7, #16]
 800476c:	429a      	cmp	r2, r3
 800476e:	d3b7      	bcc.n	80046e0 <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	68fa      	ldr	r2, [r7, #12]
 800477a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800477e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004782:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	2200      	movs	r2, #0
 8004788:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004790:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004792:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004794:	2b00      	cmp	r3, #0
 8004796:	d105      	bne.n	80047a4 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	699b      	ldr	r3, [r3, #24]
 800479c:	f043 0210 	orr.w	r2, r3, #16
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	699a      	ldr	r2, [r3, #24]
 80047a8:	4b0f      	ldr	r3, [pc, #60]	; (80047e8 <USB_DevInit+0x2c4>)
 80047aa:	4313      	orrs	r3, r2
 80047ac:	687a      	ldr	r2, [r7, #4]
 80047ae:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 80047b0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d005      	beq.n	80047c2 <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	699b      	ldr	r3, [r3, #24]
 80047ba:	f043 0208 	orr.w	r2, r3, #8
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 80047c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80047c4:	2b01      	cmp	r3, #1
 80047c6:	d107      	bne.n	80047d8 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	699b      	ldr	r3, [r3, #24]
 80047cc:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80047d0:	f043 0304 	orr.w	r3, r3, #4
 80047d4:	687a      	ldr	r2, [r7, #4]
 80047d6:	6193      	str	r3, [r2, #24]
  }

  return ret;
 80047d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80047da:	4618      	mov	r0, r3
 80047dc:	3718      	adds	r7, #24
 80047de:	46bd      	mov	sp, r7
 80047e0:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80047e4:	b004      	add	sp, #16
 80047e6:	4770      	bx	lr
 80047e8:	803c3800 	.word	0x803c3800

080047ec <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b085      	sub	sp, #20
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
 80047f4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80047f6:	2300      	movs	r3, #0
 80047f8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	3301      	adds	r3, #1
 80047fe:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	4a13      	ldr	r2, [pc, #76]	; (8004850 <USB_FlushTxFifo+0x64>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d901      	bls.n	800480c <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004808:	2303      	movs	r3, #3
 800480a:	e01b      	b.n	8004844 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	daf2      	bge.n	80047fa <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004814:	2300      	movs	r3, #0
 8004816:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	019b      	lsls	r3, r3, #6
 800481c:	f043 0220 	orr.w	r2, r3, #32
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004824:	68fb      	ldr	r3, [r7, #12]
 8004826:	3301      	adds	r3, #1
 8004828:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	4a08      	ldr	r2, [pc, #32]	; (8004850 <USB_FlushTxFifo+0x64>)
 800482e:	4293      	cmp	r3, r2
 8004830:	d901      	bls.n	8004836 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004832:	2303      	movs	r3, #3
 8004834:	e006      	b.n	8004844 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	691b      	ldr	r3, [r3, #16]
 800483a:	f003 0320 	and.w	r3, r3, #32
 800483e:	2b20      	cmp	r3, #32
 8004840:	d0f0      	beq.n	8004824 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004842:	2300      	movs	r3, #0
}
 8004844:	4618      	mov	r0, r3
 8004846:	3714      	adds	r7, #20
 8004848:	46bd      	mov	sp, r7
 800484a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484e:	4770      	bx	lr
 8004850:	00030d40 	.word	0x00030d40

08004854 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004854:	b480      	push	{r7}
 8004856:	b085      	sub	sp, #20
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800485c:	2300      	movs	r3, #0
 800485e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	3301      	adds	r3, #1
 8004864:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	4a11      	ldr	r2, [pc, #68]	; (80048b0 <USB_FlushRxFifo+0x5c>)
 800486a:	4293      	cmp	r3, r2
 800486c:	d901      	bls.n	8004872 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800486e:	2303      	movs	r3, #3
 8004870:	e018      	b.n	80048a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	691b      	ldr	r3, [r3, #16]
 8004876:	2b00      	cmp	r3, #0
 8004878:	daf2      	bge.n	8004860 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800487a:	2300      	movs	r3, #0
 800487c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	2210      	movs	r2, #16
 8004882:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	3301      	adds	r3, #1
 8004888:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	4a08      	ldr	r2, [pc, #32]	; (80048b0 <USB_FlushRxFifo+0x5c>)
 800488e:	4293      	cmp	r3, r2
 8004890:	d901      	bls.n	8004896 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004892:	2303      	movs	r3, #3
 8004894:	e006      	b.n	80048a4 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	691b      	ldr	r3, [r3, #16]
 800489a:	f003 0310 	and.w	r3, r3, #16
 800489e:	2b10      	cmp	r3, #16
 80048a0:	d0f0      	beq.n	8004884 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 80048a2:	2300      	movs	r3, #0
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	3714      	adds	r7, #20
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr
 80048b0:	00030d40 	.word	0x00030d40

080048b4 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80048b4:	b480      	push	{r7}
 80048b6:	b085      	sub	sp, #20
 80048b8:	af00      	add	r7, sp, #0
 80048ba:	6078      	str	r0, [r7, #4]
 80048bc:	460b      	mov	r3, r1
 80048be:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80048c4:	68fb      	ldr	r3, [r7, #12]
 80048c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048ca:	681a      	ldr	r2, [r3, #0]
 80048cc:	78fb      	ldrb	r3, [r7, #3]
 80048ce:	68f9      	ldr	r1, [r7, #12]
 80048d0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80048d4:	4313      	orrs	r3, r2
 80048d6:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 80048d8:	2300      	movs	r3, #0
}
 80048da:	4618      	mov	r0, r3
 80048dc:	3714      	adds	r7, #20
 80048de:	46bd      	mov	sp, r7
 80048e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e4:	4770      	bx	lr

080048e6 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 80048e6:	b480      	push	{r7}
 80048e8:	b087      	sub	sp, #28
 80048ea:	af00      	add	r7, sp, #0
 80048ec:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 80048f2:	693b      	ldr	r3, [r7, #16]
 80048f4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048f8:	689b      	ldr	r3, [r3, #8]
 80048fa:	f003 0306 	and.w	r3, r3, #6
 80048fe:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	2b00      	cmp	r3, #0
 8004904:	d102      	bne.n	800490c <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004906:	2300      	movs	r3, #0
 8004908:	75fb      	strb	r3, [r7, #23]
 800490a:	e00a      	b.n	8004922 <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 800490c:	68fb      	ldr	r3, [r7, #12]
 800490e:	2b02      	cmp	r3, #2
 8004910:	d002      	beq.n	8004918 <USB_GetDevSpeed+0x32>
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	2b06      	cmp	r3, #6
 8004916:	d102      	bne.n	800491e <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004918:	2302      	movs	r3, #2
 800491a:	75fb      	strb	r3, [r7, #23]
 800491c:	e001      	b.n	8004922 <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 800491e:	230f      	movs	r3, #15
 8004920:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004922:	7dfb      	ldrb	r3, [r7, #23]
}
 8004924:	4618      	mov	r0, r3
 8004926:	371c      	adds	r7, #28
 8004928:	46bd      	mov	sp, r7
 800492a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492e:	4770      	bx	lr

08004930 <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004930:	b480      	push	{r7}
 8004932:	b085      	sub	sp, #20
 8004934:	af00      	add	r7, sp, #0
 8004936:	6078      	str	r0, [r7, #4]
 8004938:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 800493e:	683b      	ldr	r3, [r7, #0]
 8004940:	781b      	ldrb	r3, [r3, #0]
 8004942:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	785b      	ldrb	r3, [r3, #1]
 8004948:	2b01      	cmp	r3, #1
 800494a:	d13a      	bne.n	80049c2 <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 800494c:	68fb      	ldr	r3, [r7, #12]
 800494e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004952:	69da      	ldr	r2, [r3, #28]
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	f003 030f 	and.w	r3, r3, #15
 800495c:	2101      	movs	r1, #1
 800495e:	fa01 f303 	lsl.w	r3, r1, r3
 8004962:	b29b      	uxth	r3, r3
 8004964:	68f9      	ldr	r1, [r7, #12]
 8004966:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800496a:	4313      	orrs	r3, r2
 800496c:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 800496e:	68bb      	ldr	r3, [r7, #8]
 8004970:	015a      	lsls	r2, r3, #5
 8004972:	68fb      	ldr	r3, [r7, #12]
 8004974:	4413      	add	r3, r2
 8004976:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004980:	2b00      	cmp	r3, #0
 8004982:	d155      	bne.n	8004a30 <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	015a      	lsls	r2, r3, #5
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	4413      	add	r3, r2
 800498c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004990:	681a      	ldr	r2, [r3, #0]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68db      	ldr	r3, [r3, #12]
 8004996:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 800499a:	683b      	ldr	r3, [r7, #0]
 800499c:	791b      	ldrb	r3, [r3, #4]
 800499e:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049a0:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 80049a2:	68bb      	ldr	r3, [r7, #8]
 80049a4:	059b      	lsls	r3, r3, #22
 80049a6:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 80049a8:	4313      	orrs	r3, r2
 80049aa:	68ba      	ldr	r2, [r7, #8]
 80049ac:	0151      	lsls	r1, r2, #5
 80049ae:	68fa      	ldr	r2, [r7, #12]
 80049b0:	440a      	add	r2, r1
 80049b2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80049b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80049ba:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80049be:	6013      	str	r3, [r2, #0]
 80049c0:	e036      	b.n	8004a30 <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80049c8:	69da      	ldr	r2, [r3, #28]
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	781b      	ldrb	r3, [r3, #0]
 80049ce:	f003 030f 	and.w	r3, r3, #15
 80049d2:	2101      	movs	r1, #1
 80049d4:	fa01 f303 	lsl.w	r3, r1, r3
 80049d8:	041b      	lsls	r3, r3, #16
 80049da:	68f9      	ldr	r1, [r7, #12]
 80049dc:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80049e0:	4313      	orrs	r3, r2
 80049e2:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 80049e4:	68bb      	ldr	r3, [r7, #8]
 80049e6:	015a      	lsls	r2, r3, #5
 80049e8:	68fb      	ldr	r3, [r7, #12]
 80049ea:	4413      	add	r3, r2
 80049ec:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80049f0:	681b      	ldr	r3, [r3, #0]
 80049f2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d11a      	bne.n	8004a30 <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 80049fa:	68bb      	ldr	r3, [r7, #8]
 80049fc:	015a      	lsls	r2, r3, #5
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	4413      	add	r3, r2
 8004a02:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a06:	681a      	ldr	r2, [r3, #0]
 8004a08:	683b      	ldr	r3, [r7, #0]
 8004a0a:	68db      	ldr	r3, [r3, #12]
 8004a0c:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004a10:	683b      	ldr	r3, [r7, #0]
 8004a12:	791b      	ldrb	r3, [r3, #4]
 8004a14:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004a16:	430b      	orrs	r3, r1
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	68ba      	ldr	r2, [r7, #8]
 8004a1c:	0151      	lsls	r1, r2, #5
 8004a1e:	68fa      	ldr	r2, [r7, #12]
 8004a20:	440a      	add	r2, r1
 8004a22:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004a26:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004a2a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004a2e:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004a30:	2300      	movs	r3, #0
}
 8004a32:	4618      	mov	r0, r3
 8004a34:	3714      	adds	r7, #20
 8004a36:	46bd      	mov	sp, r7
 8004a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a3c:	4770      	bx	lr
	...

08004a40 <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004a40:	b480      	push	{r7}
 8004a42:	b085      	sub	sp, #20
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
 8004a48:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004a4e:	683b      	ldr	r3, [r7, #0]
 8004a50:	781b      	ldrb	r3, [r3, #0]
 8004a52:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004a54:	683b      	ldr	r3, [r7, #0]
 8004a56:	785b      	ldrb	r3, [r3, #1]
 8004a58:	2b01      	cmp	r3, #1
 8004a5a:	d161      	bne.n	8004b20 <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004a5c:	68bb      	ldr	r3, [r7, #8]
 8004a5e:	015a      	lsls	r2, r3, #5
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	4413      	add	r3, r2
 8004a64:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a72:	d11f      	bne.n	8004ab4 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004a74:	68bb      	ldr	r3, [r7, #8]
 8004a76:	015a      	lsls	r2, r3, #5
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	4413      	add	r3, r2
 8004a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68ba      	ldr	r2, [r7, #8]
 8004a84:	0151      	lsls	r1, r2, #5
 8004a86:	68fa      	ldr	r2, [r7, #12]
 8004a88:	440a      	add	r2, r1
 8004a8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004a8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004a92:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004a94:	68bb      	ldr	r3, [r7, #8]
 8004a96:	015a      	lsls	r2, r3, #5
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4413      	add	r3, r2
 8004a9c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	68ba      	ldr	r2, [r7, #8]
 8004aa4:	0151      	lsls	r1, r2, #5
 8004aa6:	68fa      	ldr	r2, [r7, #12]
 8004aa8:	440a      	add	r2, r1
 8004aaa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004aae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004ab2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ab4:	68fb      	ldr	r3, [r7, #12]
 8004ab6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004aba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004abc:	683b      	ldr	r3, [r7, #0]
 8004abe:	781b      	ldrb	r3, [r3, #0]
 8004ac0:	f003 030f 	and.w	r3, r3, #15
 8004ac4:	2101      	movs	r1, #1
 8004ac6:	fa01 f303 	lsl.w	r3, r1, r3
 8004aca:	b29b      	uxth	r3, r3
 8004acc:	43db      	mvns	r3, r3
 8004ace:	68f9      	ldr	r1, [r7, #12]
 8004ad0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ad4:	4013      	ands	r3, r2
 8004ad6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ade:	69da      	ldr	r2, [r3, #28]
 8004ae0:	683b      	ldr	r3, [r7, #0]
 8004ae2:	781b      	ldrb	r3, [r3, #0]
 8004ae4:	f003 030f 	and.w	r3, r3, #15
 8004ae8:	2101      	movs	r1, #1
 8004aea:	fa01 f303 	lsl.w	r3, r1, r3
 8004aee:	b29b      	uxth	r3, r3
 8004af0:	43db      	mvns	r3, r3
 8004af2:	68f9      	ldr	r1, [r7, #12]
 8004af4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004af8:	4013      	ands	r3, r2
 8004afa:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004afc:	68bb      	ldr	r3, [r7, #8]
 8004afe:	015a      	lsls	r2, r3, #5
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	4413      	add	r3, r2
 8004b04:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b08:	681a      	ldr	r2, [r3, #0]
 8004b0a:	68bb      	ldr	r3, [r7, #8]
 8004b0c:	0159      	lsls	r1, r3, #5
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	440b      	add	r3, r1
 8004b12:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004b16:	4619      	mov	r1, r3
 8004b18:	4b35      	ldr	r3, [pc, #212]	; (8004bf0 <USB_DeactivateEndpoint+0x1b0>)
 8004b1a:	4013      	ands	r3, r2
 8004b1c:	600b      	str	r3, [r1, #0]
 8004b1e:	e060      	b.n	8004be2 <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004b20:	68bb      	ldr	r3, [r7, #8]
 8004b22:	015a      	lsls	r2, r3, #5
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	4413      	add	r3, r2
 8004b28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004b32:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004b36:	d11f      	bne.n	8004b78 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004b38:	68bb      	ldr	r3, [r7, #8]
 8004b3a:	015a      	lsls	r2, r3, #5
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4413      	add	r3, r2
 8004b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	68ba      	ldr	r2, [r7, #8]
 8004b48:	0151      	lsls	r1, r2, #5
 8004b4a:	68fa      	ldr	r2, [r7, #12]
 8004b4c:	440a      	add	r2, r1
 8004b4e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b52:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004b56:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	015a      	lsls	r2, r3, #5
 8004b5c:	68fb      	ldr	r3, [r7, #12]
 8004b5e:	4413      	add	r3, r2
 8004b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	68ba      	ldr	r2, [r7, #8]
 8004b68:	0151      	lsls	r1, r2, #5
 8004b6a:	68fa      	ldr	r2, [r7, #12]
 8004b6c:	440a      	add	r2, r1
 8004b6e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004b72:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b76:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004b7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004b80:	683b      	ldr	r3, [r7, #0]
 8004b82:	781b      	ldrb	r3, [r3, #0]
 8004b84:	f003 030f 	and.w	r3, r3, #15
 8004b88:	2101      	movs	r1, #1
 8004b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8004b8e:	041b      	lsls	r3, r3, #16
 8004b90:	43db      	mvns	r3, r3
 8004b92:	68f9      	ldr	r1, [r7, #12]
 8004b94:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004b98:	4013      	ands	r3, r2
 8004b9a:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ba2:	69da      	ldr	r2, [r3, #28]
 8004ba4:	683b      	ldr	r3, [r7, #0]
 8004ba6:	781b      	ldrb	r3, [r3, #0]
 8004ba8:	f003 030f 	and.w	r3, r3, #15
 8004bac:	2101      	movs	r1, #1
 8004bae:	fa01 f303 	lsl.w	r3, r1, r3
 8004bb2:	041b      	lsls	r3, r3, #16
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	68f9      	ldr	r1, [r7, #12]
 8004bb8:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004bbc:	4013      	ands	r3, r2
 8004bbe:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004bc0:	68bb      	ldr	r3, [r7, #8]
 8004bc2:	015a      	lsls	r2, r3, #5
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	4413      	add	r3, r2
 8004bc8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bcc:	681a      	ldr	r2, [r3, #0]
 8004bce:	68bb      	ldr	r3, [r7, #8]
 8004bd0:	0159      	lsls	r1, r3, #5
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	440b      	add	r3, r1
 8004bd6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004bda:	4619      	mov	r1, r3
 8004bdc:	4b05      	ldr	r3, [pc, #20]	; (8004bf4 <USB_DeactivateEndpoint+0x1b4>)
 8004bde:	4013      	ands	r3, r2
 8004be0:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004be2:	2300      	movs	r3, #0
}
 8004be4:	4618      	mov	r0, r3
 8004be6:	3714      	adds	r7, #20
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr
 8004bf0:	ec337800 	.word	0xec337800
 8004bf4:	eff37800 	.word	0xeff37800

08004bf8 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004bf8:	b580      	push	{r7, lr}
 8004bfa:	b08a      	sub	sp, #40	; 0x28
 8004bfc:	af02      	add	r7, sp, #8
 8004bfe:	60f8      	str	r0, [r7, #12]
 8004c00:	60b9      	str	r1, [r7, #8]
 8004c02:	4613      	mov	r3, r2
 8004c04:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004c0a:	68bb      	ldr	r3, [r7, #8]
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004c10:	68bb      	ldr	r3, [r7, #8]
 8004c12:	785b      	ldrb	r3, [r3, #1]
 8004c14:	2b01      	cmp	r3, #1
 8004c16:	f040 815c 	bne.w	8004ed2 <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004c1a:	68bb      	ldr	r3, [r7, #8]
 8004c1c:	699b      	ldr	r3, [r3, #24]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d132      	bne.n	8004c88 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004c22:	69bb      	ldr	r3, [r7, #24]
 8004c24:	015a      	lsls	r2, r3, #5
 8004c26:	69fb      	ldr	r3, [r7, #28]
 8004c28:	4413      	add	r3, r2
 8004c2a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c2e:	691b      	ldr	r3, [r3, #16]
 8004c30:	69ba      	ldr	r2, [r7, #24]
 8004c32:	0151      	lsls	r1, r2, #5
 8004c34:	69fa      	ldr	r2, [r7, #28]
 8004c36:	440a      	add	r2, r1
 8004c38:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c3c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004c40:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004c44:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004c46:	69bb      	ldr	r3, [r7, #24]
 8004c48:	015a      	lsls	r2, r3, #5
 8004c4a:	69fb      	ldr	r3, [r7, #28]
 8004c4c:	4413      	add	r3, r2
 8004c4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	69ba      	ldr	r2, [r7, #24]
 8004c56:	0151      	lsls	r1, r2, #5
 8004c58:	69fa      	ldr	r2, [r7, #28]
 8004c5a:	440a      	add	r2, r1
 8004c5c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c60:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004c64:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c66:	69bb      	ldr	r3, [r7, #24]
 8004c68:	015a      	lsls	r2, r3, #5
 8004c6a:	69fb      	ldr	r3, [r7, #28]
 8004c6c:	4413      	add	r3, r2
 8004c6e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c72:	691b      	ldr	r3, [r3, #16]
 8004c74:	69ba      	ldr	r2, [r7, #24]
 8004c76:	0151      	lsls	r1, r2, #5
 8004c78:	69fa      	ldr	r2, [r7, #28]
 8004c7a:	440a      	add	r2, r1
 8004c7c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004c80:	0cdb      	lsrs	r3, r3, #19
 8004c82:	04db      	lsls	r3, r3, #19
 8004c84:	6113      	str	r3, [r2, #16]
 8004c86:	e074      	b.n	8004d72 <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004c88:	69bb      	ldr	r3, [r7, #24]
 8004c8a:	015a      	lsls	r2, r3, #5
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	4413      	add	r3, r2
 8004c90:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004c94:	691b      	ldr	r3, [r3, #16]
 8004c96:	69ba      	ldr	r2, [r7, #24]
 8004c98:	0151      	lsls	r1, r2, #5
 8004c9a:	69fa      	ldr	r2, [r7, #28]
 8004c9c:	440a      	add	r2, r1
 8004c9e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ca2:	0cdb      	lsrs	r3, r3, #19
 8004ca4:	04db      	lsls	r3, r3, #19
 8004ca6:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004ca8:	69bb      	ldr	r3, [r7, #24]
 8004caa:	015a      	lsls	r2, r3, #5
 8004cac:	69fb      	ldr	r3, [r7, #28]
 8004cae:	4413      	add	r3, r2
 8004cb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb4:	691b      	ldr	r3, [r3, #16]
 8004cb6:	69ba      	ldr	r2, [r7, #24]
 8004cb8:	0151      	lsls	r1, r2, #5
 8004cba:	69fa      	ldr	r2, [r7, #28]
 8004cbc:	440a      	add	r2, r1
 8004cbe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cc2:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004cc6:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004cca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004ccc:	69bb      	ldr	r3, [r7, #24]
 8004cce:	015a      	lsls	r2, r3, #5
 8004cd0:	69fb      	ldr	r3, [r7, #28]
 8004cd2:	4413      	add	r3, r2
 8004cd4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cd8:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8004cda:	68bb      	ldr	r3, [r7, #8]
 8004cdc:	6999      	ldr	r1, [r3, #24]
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	440b      	add	r3, r1
 8004ce4:	1e59      	subs	r1, r3, #1
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	68db      	ldr	r3, [r3, #12]
 8004cea:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cee:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8004cf0:	4b9d      	ldr	r3, [pc, #628]	; (8004f68 <USB_EPStartXfer+0x370>)
 8004cf2:	400b      	ands	r3, r1
 8004cf4:	69b9      	ldr	r1, [r7, #24]
 8004cf6:	0148      	lsls	r0, r1, #5
 8004cf8:	69f9      	ldr	r1, [r7, #28]
 8004cfa:	4401      	add	r1, r0
 8004cfc:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d00:	4313      	orrs	r3, r2
 8004d02:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8004d04:	69bb      	ldr	r3, [r7, #24]
 8004d06:	015a      	lsls	r2, r3, #5
 8004d08:	69fb      	ldr	r3, [r7, #28]
 8004d0a:	4413      	add	r3, r2
 8004d0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d10:	691a      	ldr	r2, [r3, #16]
 8004d12:	68bb      	ldr	r3, [r7, #8]
 8004d14:	699b      	ldr	r3, [r3, #24]
 8004d16:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004d1a:	69b9      	ldr	r1, [r7, #24]
 8004d1c:	0148      	lsls	r0, r1, #5
 8004d1e:	69f9      	ldr	r1, [r7, #28]
 8004d20:	4401      	add	r1, r0
 8004d22:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8004d26:	4313      	orrs	r3, r2
 8004d28:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	791b      	ldrb	r3, [r3, #4]
 8004d2e:	2b01      	cmp	r3, #1
 8004d30:	d11f      	bne.n	8004d72 <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 8004d32:	69bb      	ldr	r3, [r7, #24]
 8004d34:	015a      	lsls	r2, r3, #5
 8004d36:	69fb      	ldr	r3, [r7, #28]
 8004d38:	4413      	add	r3, r2
 8004d3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d3e:	691b      	ldr	r3, [r3, #16]
 8004d40:	69ba      	ldr	r2, [r7, #24]
 8004d42:	0151      	lsls	r1, r2, #5
 8004d44:	69fa      	ldr	r2, [r7, #28]
 8004d46:	440a      	add	r2, r1
 8004d48:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d4c:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 8004d50:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 8004d52:	69bb      	ldr	r3, [r7, #24]
 8004d54:	015a      	lsls	r2, r3, #5
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	4413      	add	r3, r2
 8004d5a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d5e:	691b      	ldr	r3, [r3, #16]
 8004d60:	69ba      	ldr	r2, [r7, #24]
 8004d62:	0151      	lsls	r1, r2, #5
 8004d64:	69fa      	ldr	r2, [r7, #28]
 8004d66:	440a      	add	r2, r1
 8004d68:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004d6c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004d70:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 8004d72:	79fb      	ldrb	r3, [r7, #7]
 8004d74:	2b01      	cmp	r3, #1
 8004d76:	d14b      	bne.n	8004e10 <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 8004d78:	68bb      	ldr	r3, [r7, #8]
 8004d7a:	695b      	ldr	r3, [r3, #20]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d009      	beq.n	8004d94 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8004d80:	69bb      	ldr	r3, [r7, #24]
 8004d82:	015a      	lsls	r2, r3, #5
 8004d84:	69fb      	ldr	r3, [r7, #28]
 8004d86:	4413      	add	r3, r2
 8004d88:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004d8c:	461a      	mov	r2, r3
 8004d8e:	68bb      	ldr	r3, [r7, #8]
 8004d90:	695b      	ldr	r3, [r3, #20]
 8004d92:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	791b      	ldrb	r3, [r3, #4]
 8004d98:	2b01      	cmp	r3, #1
 8004d9a:	d128      	bne.n	8004dee <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004d9c:	69fb      	ldr	r3, [r7, #28]
 8004d9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004da2:	689b      	ldr	r3, [r3, #8]
 8004da4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004da8:	2b00      	cmp	r3, #0
 8004daa:	d110      	bne.n	8004dce <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004dac:	69bb      	ldr	r3, [r7, #24]
 8004dae:	015a      	lsls	r2, r3, #5
 8004db0:	69fb      	ldr	r3, [r7, #28]
 8004db2:	4413      	add	r3, r2
 8004db4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69ba      	ldr	r2, [r7, #24]
 8004dbc:	0151      	lsls	r1, r2, #5
 8004dbe:	69fa      	ldr	r2, [r7, #28]
 8004dc0:	440a      	add	r2, r1
 8004dc2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dc6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	e00f      	b.n	8004dee <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004dce:	69bb      	ldr	r3, [r7, #24]
 8004dd0:	015a      	lsls	r2, r3, #5
 8004dd2:	69fb      	ldr	r3, [r7, #28]
 8004dd4:	4413      	add	r3, r2
 8004dd6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	69ba      	ldr	r2, [r7, #24]
 8004dde:	0151      	lsls	r1, r2, #5
 8004de0:	69fa      	ldr	r2, [r7, #28]
 8004de2:	440a      	add	r2, r1
 8004de4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004de8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dec:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004dee:	69bb      	ldr	r3, [r7, #24]
 8004df0:	015a      	lsls	r2, r3, #5
 8004df2:	69fb      	ldr	r3, [r7, #28]
 8004df4:	4413      	add	r3, r2
 8004df6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	69ba      	ldr	r2, [r7, #24]
 8004dfe:	0151      	lsls	r1, r2, #5
 8004e00:	69fa      	ldr	r2, [r7, #28]
 8004e02:	440a      	add	r2, r1
 8004e04:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e08:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e0c:	6013      	str	r3, [r2, #0]
 8004e0e:	e133      	b.n	8005078 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8004e10:	69bb      	ldr	r3, [r7, #24]
 8004e12:	015a      	lsls	r2, r3, #5
 8004e14:	69fb      	ldr	r3, [r7, #28]
 8004e16:	4413      	add	r3, r2
 8004e18:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	69ba      	ldr	r2, [r7, #24]
 8004e20:	0151      	lsls	r1, r2, #5
 8004e22:	69fa      	ldr	r2, [r7, #28]
 8004e24:	440a      	add	r2, r1
 8004e26:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e2a:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8004e2e:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 8004e30:	68bb      	ldr	r3, [r7, #8]
 8004e32:	791b      	ldrb	r3, [r3, #4]
 8004e34:	2b01      	cmp	r3, #1
 8004e36:	d015      	beq.n	8004e64 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	699b      	ldr	r3, [r3, #24]
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	f000 811b 	beq.w	8005078 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8004e42:	69fb      	ldr	r3, [r7, #28]
 8004e44:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e48:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	781b      	ldrb	r3, [r3, #0]
 8004e4e:	f003 030f 	and.w	r3, r3, #15
 8004e52:	2101      	movs	r1, #1
 8004e54:	fa01 f303 	lsl.w	r3, r1, r3
 8004e58:	69f9      	ldr	r1, [r7, #28]
 8004e5a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e5e:	4313      	orrs	r3, r2
 8004e60:	634b      	str	r3, [r1, #52]	; 0x34
 8004e62:	e109      	b.n	8005078 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8004e64:	69fb      	ldr	r3, [r7, #28]
 8004e66:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e6a:	689b      	ldr	r3, [r3, #8]
 8004e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e70:	2b00      	cmp	r3, #0
 8004e72:	d110      	bne.n	8004e96 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 8004e74:	69bb      	ldr	r3, [r7, #24]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	69ba      	ldr	r2, [r7, #24]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	69fa      	ldr	r2, [r7, #28]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004e8e:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8004e92:	6013      	str	r3, [r2, #0]
 8004e94:	e00f      	b.n	8004eb6 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 8004e96:	69bb      	ldr	r3, [r7, #24]
 8004e98:	015a      	lsls	r2, r3, #5
 8004e9a:	69fb      	ldr	r3, [r7, #28]
 8004e9c:	4413      	add	r3, r2
 8004e9e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	69ba      	ldr	r2, [r7, #24]
 8004ea6:	0151      	lsls	r1, r2, #5
 8004ea8:	69fa      	ldr	r2, [r7, #28]
 8004eaa:	440a      	add	r2, r1
 8004eac:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004eb0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004eb4:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 8004eb6:	68bb      	ldr	r3, [r7, #8]
 8004eb8:	6919      	ldr	r1, [r3, #16]
 8004eba:	68bb      	ldr	r3, [r7, #8]
 8004ebc:	781a      	ldrb	r2, [r3, #0]
 8004ebe:	68bb      	ldr	r3, [r7, #8]
 8004ec0:	699b      	ldr	r3, [r3, #24]
 8004ec2:	b298      	uxth	r0, r3
 8004ec4:	79fb      	ldrb	r3, [r7, #7]
 8004ec6:	9300      	str	r3, [sp, #0]
 8004ec8:	4603      	mov	r3, r0
 8004eca:	68f8      	ldr	r0, [r7, #12]
 8004ecc:	f000 fade 	bl	800548c <USB_WritePacket>
 8004ed0:	e0d2      	b.n	8005078 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8004ed2:	69bb      	ldr	r3, [r7, #24]
 8004ed4:	015a      	lsls	r2, r3, #5
 8004ed6:	69fb      	ldr	r3, [r7, #28]
 8004ed8:	4413      	add	r3, r2
 8004eda:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	0151      	lsls	r1, r2, #5
 8004ee4:	69fa      	ldr	r2, [r7, #28]
 8004ee6:	440a      	add	r2, r1
 8004ee8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eec:	0cdb      	lsrs	r3, r3, #19
 8004eee:	04db      	lsls	r3, r3, #19
 8004ef0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	015a      	lsls	r2, r3, #5
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	4413      	add	r3, r2
 8004efa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004efe:	691b      	ldr	r3, [r3, #16]
 8004f00:	69ba      	ldr	r2, [r7, #24]
 8004f02:	0151      	lsls	r1, r2, #5
 8004f04:	69fa      	ldr	r2, [r7, #28]
 8004f06:	440a      	add	r2, r1
 8004f08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f0c:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f10:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f14:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8004f16:	68bb      	ldr	r3, [r7, #8]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	d126      	bne.n	8004f6c <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 8004f1e:	69bb      	ldr	r3, [r7, #24]
 8004f20:	015a      	lsls	r2, r3, #5
 8004f22:	69fb      	ldr	r3, [r7, #28]
 8004f24:	4413      	add	r3, r2
 8004f26:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f2a:	691a      	ldr	r2, [r3, #16]
 8004f2c:	68bb      	ldr	r3, [r7, #8]
 8004f2e:	68db      	ldr	r3, [r3, #12]
 8004f30:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004f34:	69b9      	ldr	r1, [r7, #24]
 8004f36:	0148      	lsls	r0, r1, #5
 8004f38:	69f9      	ldr	r1, [r7, #28]
 8004f3a:	4401      	add	r1, r0
 8004f3c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004f40:	4313      	orrs	r3, r2
 8004f42:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8004f44:	69bb      	ldr	r3, [r7, #24]
 8004f46:	015a      	lsls	r2, r3, #5
 8004f48:	69fb      	ldr	r3, [r7, #28]
 8004f4a:	4413      	add	r3, r2
 8004f4c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f50:	691b      	ldr	r3, [r3, #16]
 8004f52:	69ba      	ldr	r2, [r7, #24]
 8004f54:	0151      	lsls	r1, r2, #5
 8004f56:	69fa      	ldr	r2, [r7, #28]
 8004f58:	440a      	add	r2, r1
 8004f5a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004f5e:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004f62:	6113      	str	r3, [r2, #16]
 8004f64:	e03a      	b.n	8004fdc <USB_EPStartXfer+0x3e4>
 8004f66:	bf00      	nop
 8004f68:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 8004f6c:	68bb      	ldr	r3, [r7, #8]
 8004f6e:	699a      	ldr	r2, [r3, #24]
 8004f70:	68bb      	ldr	r3, [r7, #8]
 8004f72:	68db      	ldr	r3, [r3, #12]
 8004f74:	4413      	add	r3, r2
 8004f76:	1e5a      	subs	r2, r3, #1
 8004f78:	68bb      	ldr	r3, [r7, #8]
 8004f7a:	68db      	ldr	r3, [r3, #12]
 8004f7c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004f80:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 8004f82:	68bb      	ldr	r3, [r7, #8]
 8004f84:	68db      	ldr	r3, [r3, #12]
 8004f86:	8afa      	ldrh	r2, [r7, #22]
 8004f88:	fb03 f202 	mul.w	r2, r3, r2
 8004f8c:	68bb      	ldr	r3, [r7, #8]
 8004f8e:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 8004f90:	69bb      	ldr	r3, [r7, #24]
 8004f92:	015a      	lsls	r2, r3, #5
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	4413      	add	r3, r2
 8004f98:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f9c:	691a      	ldr	r2, [r3, #16]
 8004f9e:	8afb      	ldrh	r3, [r7, #22]
 8004fa0:	04d9      	lsls	r1, r3, #19
 8004fa2:	4b38      	ldr	r3, [pc, #224]	; (8005084 <USB_EPStartXfer+0x48c>)
 8004fa4:	400b      	ands	r3, r1
 8004fa6:	69b9      	ldr	r1, [r7, #24]
 8004fa8:	0148      	lsls	r0, r1, #5
 8004faa:	69f9      	ldr	r1, [r7, #28]
 8004fac:	4401      	add	r1, r0
 8004fae:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fb2:	4313      	orrs	r3, r2
 8004fb4:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 8004fb6:	69bb      	ldr	r3, [r7, #24]
 8004fb8:	015a      	lsls	r2, r3, #5
 8004fba:	69fb      	ldr	r3, [r7, #28]
 8004fbc:	4413      	add	r3, r2
 8004fbe:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fc2:	691a      	ldr	r2, [r3, #16]
 8004fc4:	68bb      	ldr	r3, [r7, #8]
 8004fc6:	69db      	ldr	r3, [r3, #28]
 8004fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8004fcc:	69b9      	ldr	r1, [r7, #24]
 8004fce:	0148      	lsls	r0, r1, #5
 8004fd0:	69f9      	ldr	r1, [r7, #28]
 8004fd2:	4401      	add	r1, r0
 8004fd4:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8004fd8:	4313      	orrs	r3, r2
 8004fda:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8004fdc:	79fb      	ldrb	r3, [r7, #7]
 8004fde:	2b01      	cmp	r3, #1
 8004fe0:	d10d      	bne.n	8004ffe <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	691b      	ldr	r3, [r3, #16]
 8004fe6:	2b00      	cmp	r3, #0
 8004fe8:	d009      	beq.n	8004ffe <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8004fea:	68bb      	ldr	r3, [r7, #8]
 8004fec:	6919      	ldr	r1, [r3, #16]
 8004fee:	69bb      	ldr	r3, [r7, #24]
 8004ff0:	015a      	lsls	r2, r3, #5
 8004ff2:	69fb      	ldr	r3, [r7, #28]
 8004ff4:	4413      	add	r3, r2
 8004ff6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ffa:	460a      	mov	r2, r1
 8004ffc:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 8004ffe:	68bb      	ldr	r3, [r7, #8]
 8005000:	791b      	ldrb	r3, [r3, #4]
 8005002:	2b01      	cmp	r3, #1
 8005004:	d128      	bne.n	8005058 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800500c:	689b      	ldr	r3, [r3, #8]
 800500e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005012:	2b00      	cmp	r3, #0
 8005014:	d110      	bne.n	8005038 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005016:	69bb      	ldr	r3, [r7, #24]
 8005018:	015a      	lsls	r2, r3, #5
 800501a:	69fb      	ldr	r3, [r7, #28]
 800501c:	4413      	add	r3, r2
 800501e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	69ba      	ldr	r2, [r7, #24]
 8005026:	0151      	lsls	r1, r2, #5
 8005028:	69fa      	ldr	r2, [r7, #28]
 800502a:	440a      	add	r2, r1
 800502c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005030:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005034:	6013      	str	r3, [r2, #0]
 8005036:	e00f      	b.n	8005058 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005038:	69bb      	ldr	r3, [r7, #24]
 800503a:	015a      	lsls	r2, r3, #5
 800503c:	69fb      	ldr	r3, [r7, #28]
 800503e:	4413      	add	r3, r2
 8005040:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	69ba      	ldr	r2, [r7, #24]
 8005048:	0151      	lsls	r1, r2, #5
 800504a:	69fa      	ldr	r2, [r7, #28]
 800504c:	440a      	add	r2, r1
 800504e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005052:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005056:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005058:	69bb      	ldr	r3, [r7, #24]
 800505a:	015a      	lsls	r2, r3, #5
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	4413      	add	r3, r2
 8005060:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	69ba      	ldr	r2, [r7, #24]
 8005068:	0151      	lsls	r1, r2, #5
 800506a:	69fa      	ldr	r2, [r7, #28]
 800506c:	440a      	add	r2, r1
 800506e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005072:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005076:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005078:	2300      	movs	r3, #0
}
 800507a:	4618      	mov	r0, r3
 800507c:	3720      	adds	r7, #32
 800507e:	46bd      	mov	sp, r7
 8005080:	bd80      	pop	{r7, pc}
 8005082:	bf00      	nop
 8005084:	1ff80000 	.word	0x1ff80000

08005088 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8005088:	b480      	push	{r7}
 800508a:	b087      	sub	sp, #28
 800508c:	af00      	add	r7, sp, #0
 800508e:	60f8      	str	r0, [r7, #12]
 8005090:	60b9      	str	r1, [r7, #8]
 8005092:	4613      	mov	r3, r2
 8005094:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005096:	68fb      	ldr	r3, [r7, #12]
 8005098:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 800509a:	68bb      	ldr	r3, [r7, #8]
 800509c:	781b      	ldrb	r3, [r3, #0]
 800509e:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80050a0:	68bb      	ldr	r3, [r7, #8]
 80050a2:	785b      	ldrb	r3, [r3, #1]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	f040 80ce 	bne.w	8005246 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80050aa:	68bb      	ldr	r3, [r7, #8]
 80050ac:	699b      	ldr	r3, [r3, #24]
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d132      	bne.n	8005118 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	015a      	lsls	r2, r3, #5
 80050b6:	697b      	ldr	r3, [r7, #20]
 80050b8:	4413      	add	r3, r2
 80050ba:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050be:	691b      	ldr	r3, [r3, #16]
 80050c0:	693a      	ldr	r2, [r7, #16]
 80050c2:	0151      	lsls	r1, r2, #5
 80050c4:	697a      	ldr	r2, [r7, #20]
 80050c6:	440a      	add	r2, r1
 80050c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050cc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80050d0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80050d4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80050d6:	693b      	ldr	r3, [r7, #16]
 80050d8:	015a      	lsls	r2, r3, #5
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	4413      	add	r3, r2
 80050de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050e2:	691b      	ldr	r3, [r3, #16]
 80050e4:	693a      	ldr	r2, [r7, #16]
 80050e6:	0151      	lsls	r1, r2, #5
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	440a      	add	r2, r1
 80050ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050f0:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80050f4:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 80050f6:	693b      	ldr	r3, [r7, #16]
 80050f8:	015a      	lsls	r2, r3, #5
 80050fa:	697b      	ldr	r3, [r7, #20]
 80050fc:	4413      	add	r3, r2
 80050fe:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005102:	691b      	ldr	r3, [r3, #16]
 8005104:	693a      	ldr	r2, [r7, #16]
 8005106:	0151      	lsls	r1, r2, #5
 8005108:	697a      	ldr	r2, [r7, #20]
 800510a:	440a      	add	r2, r1
 800510c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005110:	0cdb      	lsrs	r3, r3, #19
 8005112:	04db      	lsls	r3, r3, #19
 8005114:	6113      	str	r3, [r2, #16]
 8005116:	e04e      	b.n	80051b6 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005118:	693b      	ldr	r3, [r7, #16]
 800511a:	015a      	lsls	r2, r3, #5
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	4413      	add	r3, r2
 8005120:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005124:	691b      	ldr	r3, [r3, #16]
 8005126:	693a      	ldr	r2, [r7, #16]
 8005128:	0151      	lsls	r1, r2, #5
 800512a:	697a      	ldr	r2, [r7, #20]
 800512c:	440a      	add	r2, r1
 800512e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005132:	0cdb      	lsrs	r3, r3, #19
 8005134:	04db      	lsls	r3, r3, #19
 8005136:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005138:	693b      	ldr	r3, [r7, #16]
 800513a:	015a      	lsls	r2, r3, #5
 800513c:	697b      	ldr	r3, [r7, #20]
 800513e:	4413      	add	r3, r2
 8005140:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005144:	691b      	ldr	r3, [r3, #16]
 8005146:	693a      	ldr	r2, [r7, #16]
 8005148:	0151      	lsls	r1, r2, #5
 800514a:	697a      	ldr	r2, [r7, #20]
 800514c:	440a      	add	r2, r1
 800514e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005152:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005156:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 800515a:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 800515c:	68bb      	ldr	r3, [r7, #8]
 800515e:	699a      	ldr	r2, [r3, #24]
 8005160:	68bb      	ldr	r3, [r7, #8]
 8005162:	68db      	ldr	r3, [r3, #12]
 8005164:	429a      	cmp	r2, r3
 8005166:	d903      	bls.n	8005170 <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 8005168:	68bb      	ldr	r3, [r7, #8]
 800516a:	68da      	ldr	r2, [r3, #12]
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005170:	693b      	ldr	r3, [r7, #16]
 8005172:	015a      	lsls	r2, r3, #5
 8005174:	697b      	ldr	r3, [r7, #20]
 8005176:	4413      	add	r3, r2
 8005178:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800517c:	691b      	ldr	r3, [r3, #16]
 800517e:	693a      	ldr	r2, [r7, #16]
 8005180:	0151      	lsls	r1, r2, #5
 8005182:	697a      	ldr	r2, [r7, #20]
 8005184:	440a      	add	r2, r1
 8005186:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800518a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800518e:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005190:	693b      	ldr	r3, [r7, #16]
 8005192:	015a      	lsls	r2, r3, #5
 8005194:	697b      	ldr	r3, [r7, #20]
 8005196:	4413      	add	r3, r2
 8005198:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800519c:	691a      	ldr	r2, [r3, #16]
 800519e:	68bb      	ldr	r3, [r7, #8]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80051a6:	6939      	ldr	r1, [r7, #16]
 80051a8:	0148      	lsls	r0, r1, #5
 80051aa:	6979      	ldr	r1, [r7, #20]
 80051ac:	4401      	add	r1, r0
 80051ae:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80051b2:	4313      	orrs	r3, r2
 80051b4:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80051b6:	79fb      	ldrb	r3, [r7, #7]
 80051b8:	2b01      	cmp	r3, #1
 80051ba:	d11e      	bne.n	80051fa <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80051bc:	68bb      	ldr	r3, [r7, #8]
 80051be:	695b      	ldr	r3, [r3, #20]
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d009      	beq.n	80051d8 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80051c4:	693b      	ldr	r3, [r7, #16]
 80051c6:	015a      	lsls	r2, r3, #5
 80051c8:	697b      	ldr	r3, [r7, #20]
 80051ca:	4413      	add	r3, r2
 80051cc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051d0:	461a      	mov	r2, r3
 80051d2:	68bb      	ldr	r3, [r7, #8]
 80051d4:	695b      	ldr	r3, [r3, #20]
 80051d6:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051d8:	693b      	ldr	r3, [r7, #16]
 80051da:	015a      	lsls	r2, r3, #5
 80051dc:	697b      	ldr	r3, [r7, #20]
 80051de:	4413      	add	r3, r2
 80051e0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	693a      	ldr	r2, [r7, #16]
 80051e8:	0151      	lsls	r1, r2, #5
 80051ea:	697a      	ldr	r2, [r7, #20]
 80051ec:	440a      	add	r2, r1
 80051ee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051f2:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	e097      	b.n	800532a <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 80051fa:	693b      	ldr	r3, [r7, #16]
 80051fc:	015a      	lsls	r2, r3, #5
 80051fe:	697b      	ldr	r3, [r7, #20]
 8005200:	4413      	add	r3, r2
 8005202:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	693a      	ldr	r2, [r7, #16]
 800520a:	0151      	lsls	r1, r2, #5
 800520c:	697a      	ldr	r2, [r7, #20]
 800520e:	440a      	add	r2, r1
 8005210:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005214:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005218:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 800521a:	68bb      	ldr	r3, [r7, #8]
 800521c:	699b      	ldr	r3, [r3, #24]
 800521e:	2b00      	cmp	r3, #0
 8005220:	f000 8083 	beq.w	800532a <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005224:	697b      	ldr	r3, [r7, #20]
 8005226:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800522a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800522c:	68bb      	ldr	r3, [r7, #8]
 800522e:	781b      	ldrb	r3, [r3, #0]
 8005230:	f003 030f 	and.w	r3, r3, #15
 8005234:	2101      	movs	r1, #1
 8005236:	fa01 f303 	lsl.w	r3, r1, r3
 800523a:	6979      	ldr	r1, [r7, #20]
 800523c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005240:	4313      	orrs	r3, r2
 8005242:	634b      	str	r3, [r1, #52]	; 0x34
 8005244:	e071      	b.n	800532a <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005246:	693b      	ldr	r3, [r7, #16]
 8005248:	015a      	lsls	r2, r3, #5
 800524a:	697b      	ldr	r3, [r7, #20]
 800524c:	4413      	add	r3, r2
 800524e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005252:	691b      	ldr	r3, [r3, #16]
 8005254:	693a      	ldr	r2, [r7, #16]
 8005256:	0151      	lsls	r1, r2, #5
 8005258:	697a      	ldr	r2, [r7, #20]
 800525a:	440a      	add	r2, r1
 800525c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005260:	0cdb      	lsrs	r3, r3, #19
 8005262:	04db      	lsls	r3, r3, #19
 8005264:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 8005266:	693b      	ldr	r3, [r7, #16]
 8005268:	015a      	lsls	r2, r3, #5
 800526a:	697b      	ldr	r3, [r7, #20]
 800526c:	4413      	add	r3, r2
 800526e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005272:	691b      	ldr	r3, [r3, #16]
 8005274:	693a      	ldr	r2, [r7, #16]
 8005276:	0151      	lsls	r1, r2, #5
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	440a      	add	r2, r1
 800527c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005280:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005284:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005288:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 800528a:	68bb      	ldr	r3, [r7, #8]
 800528c:	699b      	ldr	r3, [r3, #24]
 800528e:	2b00      	cmp	r3, #0
 8005290:	d003      	beq.n	800529a <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 8005292:	68bb      	ldr	r3, [r7, #8]
 8005294:	68da      	ldr	r2, [r3, #12]
 8005296:	68bb      	ldr	r3, [r7, #8]
 8005298:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 800529a:	68bb      	ldr	r3, [r7, #8]
 800529c:	68da      	ldr	r2, [r3, #12]
 800529e:	68bb      	ldr	r3, [r7, #8]
 80052a0:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80052a2:	693b      	ldr	r3, [r7, #16]
 80052a4:	015a      	lsls	r2, r3, #5
 80052a6:	697b      	ldr	r3, [r7, #20]
 80052a8:	4413      	add	r3, r2
 80052aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ae:	691b      	ldr	r3, [r3, #16]
 80052b0:	693a      	ldr	r2, [r7, #16]
 80052b2:	0151      	lsls	r1, r2, #5
 80052b4:	697a      	ldr	r2, [r7, #20]
 80052b6:	440a      	add	r2, r1
 80052b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80052bc:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80052c0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	015a      	lsls	r2, r3, #5
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	4413      	add	r3, r2
 80052ca:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052ce:	691a      	ldr	r2, [r3, #16]
 80052d0:	68bb      	ldr	r3, [r7, #8]
 80052d2:	69db      	ldr	r3, [r3, #28]
 80052d4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80052d8:	6939      	ldr	r1, [r7, #16]
 80052da:	0148      	lsls	r0, r1, #5
 80052dc:	6979      	ldr	r1, [r7, #20]
 80052de:	4401      	add	r1, r0
 80052e0:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052e4:	4313      	orrs	r3, r2
 80052e6:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	2b01      	cmp	r3, #1
 80052ec:	d10d      	bne.n	800530a <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 80052ee:	68bb      	ldr	r3, [r7, #8]
 80052f0:	691b      	ldr	r3, [r3, #16]
 80052f2:	2b00      	cmp	r3, #0
 80052f4:	d009      	beq.n	800530a <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 80052f6:	68bb      	ldr	r3, [r7, #8]
 80052f8:	6919      	ldr	r1, [r3, #16]
 80052fa:	693b      	ldr	r3, [r7, #16]
 80052fc:	015a      	lsls	r2, r3, #5
 80052fe:	697b      	ldr	r3, [r7, #20]
 8005300:	4413      	add	r3, r2
 8005302:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005306:	460a      	mov	r2, r1
 8005308:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 800530a:	693b      	ldr	r3, [r7, #16]
 800530c:	015a      	lsls	r2, r3, #5
 800530e:	697b      	ldr	r3, [r7, #20]
 8005310:	4413      	add	r3, r2
 8005312:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	693a      	ldr	r2, [r7, #16]
 800531a:	0151      	lsls	r1, r2, #5
 800531c:	697a      	ldr	r2, [r7, #20]
 800531e:	440a      	add	r2, r1
 8005320:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005324:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005328:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 800532a:	2300      	movs	r3, #0
}
 800532c:	4618      	mov	r0, r3
 800532e:	371c      	adds	r7, #28
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr

08005338 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005338:	b480      	push	{r7}
 800533a:	b087      	sub	sp, #28
 800533c:	af00      	add	r7, sp, #0
 800533e:	6078      	str	r0, [r7, #4]
 8005340:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8005342:	2300      	movs	r3, #0
 8005344:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005346:	2300      	movs	r3, #0
 8005348:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	785b      	ldrb	r3, [r3, #1]
 8005352:	2b01      	cmp	r3, #1
 8005354:	d14a      	bne.n	80053ec <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005356:	683b      	ldr	r3, [r7, #0]
 8005358:	781b      	ldrb	r3, [r3, #0]
 800535a:	015a      	lsls	r2, r3, #5
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	4413      	add	r3, r2
 8005360:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800536a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800536e:	f040 8086 	bne.w	800547e <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	781b      	ldrb	r3, [r3, #0]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	693b      	ldr	r3, [r7, #16]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	683a      	ldr	r2, [r7, #0]
 8005384:	7812      	ldrb	r2, [r2, #0]
 8005386:	0151      	lsls	r1, r2, #5
 8005388:	693a      	ldr	r2, [r7, #16]
 800538a:	440a      	add	r2, r1
 800538c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005390:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005394:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	015a      	lsls	r2, r3, #5
 800539c:	693b      	ldr	r3, [r7, #16]
 800539e:	4413      	add	r3, r2
 80053a0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	683a      	ldr	r2, [r7, #0]
 80053a8:	7812      	ldrb	r2, [r2, #0]
 80053aa:	0151      	lsls	r1, r2, #5
 80053ac:	693a      	ldr	r2, [r7, #16]
 80053ae:	440a      	add	r2, r1
 80053b0:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80053b4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80053b8:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	3301      	adds	r3, #1
 80053be:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80053c0:	68fb      	ldr	r3, [r7, #12]
 80053c2:	f242 7210 	movw	r2, #10000	; 0x2710
 80053c6:	4293      	cmp	r3, r2
 80053c8:	d902      	bls.n	80053d0 <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 80053ca:	2301      	movs	r3, #1
 80053cc:	75fb      	strb	r3, [r7, #23]
          break;
 80053ce:	e056      	b.n	800547e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 80053d0:	683b      	ldr	r3, [r7, #0]
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	015a      	lsls	r2, r3, #5
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	4413      	add	r3, r2
 80053da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053de:	681b      	ldr	r3, [r3, #0]
 80053e0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80053e4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80053e8:	d0e7      	beq.n	80053ba <USB_EPStopXfer+0x82>
 80053ea:	e048      	b.n	800547e <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80053ec:	683b      	ldr	r3, [r7, #0]
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	693b      	ldr	r3, [r7, #16]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005400:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005404:	d13b      	bne.n	800547e <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005406:	683b      	ldr	r3, [r7, #0]
 8005408:	781b      	ldrb	r3, [r3, #0]
 800540a:	015a      	lsls	r2, r3, #5
 800540c:	693b      	ldr	r3, [r7, #16]
 800540e:	4413      	add	r3, r2
 8005410:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	683a      	ldr	r2, [r7, #0]
 8005418:	7812      	ldrb	r2, [r2, #0]
 800541a:	0151      	lsls	r1, r2, #5
 800541c:	693a      	ldr	r2, [r7, #16]
 800541e:	440a      	add	r2, r1
 8005420:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005424:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005428:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 800542a:	683b      	ldr	r3, [r7, #0]
 800542c:	781b      	ldrb	r3, [r3, #0]
 800542e:	015a      	lsls	r2, r3, #5
 8005430:	693b      	ldr	r3, [r7, #16]
 8005432:	4413      	add	r3, r2
 8005434:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	683a      	ldr	r2, [r7, #0]
 800543c:	7812      	ldrb	r2, [r2, #0]
 800543e:	0151      	lsls	r1, r2, #5
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	440a      	add	r2, r1
 8005444:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005448:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800544c:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800544e:	68fb      	ldr	r3, [r7, #12]
 8005450:	3301      	adds	r3, #1
 8005452:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005454:	68fb      	ldr	r3, [r7, #12]
 8005456:	f242 7210 	movw	r2, #10000	; 0x2710
 800545a:	4293      	cmp	r3, r2
 800545c:	d902      	bls.n	8005464 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800545e:	2301      	movs	r3, #1
 8005460:	75fb      	strb	r3, [r7, #23]
          break;
 8005462:	e00c      	b.n	800547e <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 8005464:	683b      	ldr	r3, [r7, #0]
 8005466:	781b      	ldrb	r3, [r3, #0]
 8005468:	015a      	lsls	r2, r3, #5
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	4413      	add	r3, r2
 800546e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005478:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800547c:	d0e7      	beq.n	800544e <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 800547e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005480:	4618      	mov	r0, r3
 8005482:	371c      	adds	r7, #28
 8005484:	46bd      	mov	sp, r7
 8005486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800548a:	4770      	bx	lr

0800548c <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 800548c:	b480      	push	{r7}
 800548e:	b089      	sub	sp, #36	; 0x24
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	4611      	mov	r1, r2
 8005498:	461a      	mov	r2, r3
 800549a:	460b      	mov	r3, r1
 800549c:	71fb      	strb	r3, [r7, #7]
 800549e:	4613      	mov	r3, r2
 80054a0:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80054aa:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80054ae:	2b00      	cmp	r3, #0
 80054b0:	d123      	bne.n	80054fa <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80054b2:	88bb      	ldrh	r3, [r7, #4]
 80054b4:	3303      	adds	r3, #3
 80054b6:	089b      	lsrs	r3, r3, #2
 80054b8:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80054ba:	2300      	movs	r3, #0
 80054bc:	61bb      	str	r3, [r7, #24]
 80054be:	e018      	b.n	80054f2 <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80054c0:	79fb      	ldrb	r3, [r7, #7]
 80054c2:	031a      	lsls	r2, r3, #12
 80054c4:	697b      	ldr	r3, [r7, #20]
 80054c6:	4413      	add	r3, r2
 80054c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80054cc:	461a      	mov	r2, r3
 80054ce:	69fb      	ldr	r3, [r7, #28]
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	6013      	str	r3, [r2, #0]
      pSrc++;
 80054d4:	69fb      	ldr	r3, [r7, #28]
 80054d6:	3301      	adds	r3, #1
 80054d8:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054da:	69fb      	ldr	r3, [r7, #28]
 80054dc:	3301      	adds	r3, #1
 80054de:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054e0:	69fb      	ldr	r3, [r7, #28]
 80054e2:	3301      	adds	r3, #1
 80054e4:	61fb      	str	r3, [r7, #28]
      pSrc++;
 80054e6:	69fb      	ldr	r3, [r7, #28]
 80054e8:	3301      	adds	r3, #1
 80054ea:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 80054ec:	69bb      	ldr	r3, [r7, #24]
 80054ee:	3301      	adds	r3, #1
 80054f0:	61bb      	str	r3, [r7, #24]
 80054f2:	69ba      	ldr	r2, [r7, #24]
 80054f4:	693b      	ldr	r3, [r7, #16]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d3e2      	bcc.n	80054c0 <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 80054fa:	2300      	movs	r3, #0
}
 80054fc:	4618      	mov	r0, r3
 80054fe:	3724      	adds	r7, #36	; 0x24
 8005500:	46bd      	mov	sp, r7
 8005502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005506:	4770      	bx	lr

08005508 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005508:	b480      	push	{r7}
 800550a:	b08b      	sub	sp, #44	; 0x2c
 800550c:	af00      	add	r7, sp, #0
 800550e:	60f8      	str	r0, [r7, #12]
 8005510:	60b9      	str	r1, [r7, #8]
 8005512:	4613      	mov	r3, r2
 8005514:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 800551a:	68bb      	ldr	r3, [r7, #8]
 800551c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800551e:	88fb      	ldrh	r3, [r7, #6]
 8005520:	089b      	lsrs	r3, r3, #2
 8005522:	b29b      	uxth	r3, r3
 8005524:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005526:	88fb      	ldrh	r3, [r7, #6]
 8005528:	f003 0303 	and.w	r3, r3, #3
 800552c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800552e:	2300      	movs	r3, #0
 8005530:	623b      	str	r3, [r7, #32]
 8005532:	e014      	b.n	800555e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005534:	69bb      	ldr	r3, [r7, #24]
 8005536:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800553a:	681a      	ldr	r2, [r3, #0]
 800553c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800553e:	601a      	str	r2, [r3, #0]
    pDest++;
 8005540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005542:	3301      	adds	r3, #1
 8005544:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005546:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005548:	3301      	adds	r3, #1
 800554a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800554c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800554e:	3301      	adds	r3, #1
 8005550:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005554:	3301      	adds	r3, #1
 8005556:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005558:	6a3b      	ldr	r3, [r7, #32]
 800555a:	3301      	adds	r3, #1
 800555c:	623b      	str	r3, [r7, #32]
 800555e:	6a3a      	ldr	r2, [r7, #32]
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	429a      	cmp	r2, r3
 8005564:	d3e6      	bcc.n	8005534 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8005566:	8bfb      	ldrh	r3, [r7, #30]
 8005568:	2b00      	cmp	r3, #0
 800556a:	d01e      	beq.n	80055aa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8005570:	69bb      	ldr	r3, [r7, #24]
 8005572:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005576:	461a      	mov	r2, r3
 8005578:	f107 0310 	add.w	r3, r7, #16
 800557c:	6812      	ldr	r2, [r2, #0]
 800557e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8005580:	693a      	ldr	r2, [r7, #16]
 8005582:	6a3b      	ldr	r3, [r7, #32]
 8005584:	b2db      	uxtb	r3, r3
 8005586:	00db      	lsls	r3, r3, #3
 8005588:	fa22 f303 	lsr.w	r3, r2, r3
 800558c:	b2da      	uxtb	r2, r3
 800558e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005590:	701a      	strb	r2, [r3, #0]
      i++;
 8005592:	6a3b      	ldr	r3, [r7, #32]
 8005594:	3301      	adds	r3, #1
 8005596:	623b      	str	r3, [r7, #32]
      pDest++;
 8005598:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800559a:	3301      	adds	r3, #1
 800559c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 800559e:	8bfb      	ldrh	r3, [r7, #30]
 80055a0:	3b01      	subs	r3, #1
 80055a2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80055a4:	8bfb      	ldrh	r3, [r7, #30]
 80055a6:	2b00      	cmp	r3, #0
 80055a8:	d1ea      	bne.n	8005580 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80055aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80055ac:	4618      	mov	r0, r3
 80055ae:	372c      	adds	r7, #44	; 0x2c
 80055b0:	46bd      	mov	sp, r7
 80055b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055b6:	4770      	bx	lr

080055b8 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80055b8:	b480      	push	{r7}
 80055ba:	b085      	sub	sp, #20
 80055bc:	af00      	add	r7, sp, #0
 80055be:	6078      	str	r0, [r7, #4]
 80055c0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	785b      	ldrb	r3, [r3, #1]
 80055d0:	2b01      	cmp	r3, #1
 80055d2:	d12c      	bne.n	800562e <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 80055d4:	68bb      	ldr	r3, [r7, #8]
 80055d6:	015a      	lsls	r2, r3, #5
 80055d8:	68fb      	ldr	r3, [r7, #12]
 80055da:	4413      	add	r3, r2
 80055dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	db12      	blt.n	800560c <USB_EPSetStall+0x54>
 80055e6:	68bb      	ldr	r3, [r7, #8]
 80055e8:	2b00      	cmp	r3, #0
 80055ea:	d00f      	beq.n	800560c <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 80055ec:	68bb      	ldr	r3, [r7, #8]
 80055ee:	015a      	lsls	r2, r3, #5
 80055f0:	68fb      	ldr	r3, [r7, #12]
 80055f2:	4413      	add	r3, r2
 80055f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	0151      	lsls	r1, r2, #5
 80055fe:	68fa      	ldr	r2, [r7, #12]
 8005600:	440a      	add	r2, r1
 8005602:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005606:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 800560a:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	015a      	lsls	r2, r3, #5
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	4413      	add	r3, r2
 8005614:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	68ba      	ldr	r2, [r7, #8]
 800561c:	0151      	lsls	r1, r2, #5
 800561e:	68fa      	ldr	r2, [r7, #12]
 8005620:	440a      	add	r2, r1
 8005622:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005626:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800562a:	6013      	str	r3, [r2, #0]
 800562c:	e02b      	b.n	8005686 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800562e:	68bb      	ldr	r3, [r7, #8]
 8005630:	015a      	lsls	r2, r3, #5
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	4413      	add	r3, r2
 8005636:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	2b00      	cmp	r3, #0
 800563e:	db12      	blt.n	8005666 <USB_EPSetStall+0xae>
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00f      	beq.n	8005666 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005646:	68bb      	ldr	r3, [r7, #8]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	68ba      	ldr	r2, [r7, #8]
 8005656:	0151      	lsls	r1, r2, #5
 8005658:	68fa      	ldr	r2, [r7, #12]
 800565a:	440a      	add	r2, r1
 800565c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005660:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005664:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 8005666:	68bb      	ldr	r3, [r7, #8]
 8005668:	015a      	lsls	r2, r3, #5
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	4413      	add	r3, r2
 800566e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005672:	681b      	ldr	r3, [r3, #0]
 8005674:	68ba      	ldr	r2, [r7, #8]
 8005676:	0151      	lsls	r1, r2, #5
 8005678:	68fa      	ldr	r2, [r7, #12]
 800567a:	440a      	add	r2, r1
 800567c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005680:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005684:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005686:	2300      	movs	r3, #0
}
 8005688:	4618      	mov	r0, r3
 800568a:	3714      	adds	r7, #20
 800568c:	46bd      	mov	sp, r7
 800568e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005692:	4770      	bx	lr

08005694 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005694:	b480      	push	{r7}
 8005696:	b085      	sub	sp, #20
 8005698:	af00      	add	r7, sp, #0
 800569a:	6078      	str	r0, [r7, #4]
 800569c:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	785b      	ldrb	r3, [r3, #1]
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d128      	bne.n	8005702 <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	68ba      	ldr	r2, [r7, #8]
 80056c0:	0151      	lsls	r1, r2, #5
 80056c2:	68fa      	ldr	r2, [r7, #12]
 80056c4:	440a      	add	r2, r1
 80056c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056ca:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80056ce:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 80056d0:	683b      	ldr	r3, [r7, #0]
 80056d2:	791b      	ldrb	r3, [r3, #4]
 80056d4:	2b03      	cmp	r3, #3
 80056d6:	d003      	beq.n	80056e0 <USB_EPClearStall+0x4c>
 80056d8:	683b      	ldr	r3, [r7, #0]
 80056da:	791b      	ldrb	r3, [r3, #4]
 80056dc:	2b02      	cmp	r3, #2
 80056de:	d138      	bne.n	8005752 <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	015a      	lsls	r2, r3, #5
 80056e4:	68fb      	ldr	r3, [r7, #12]
 80056e6:	4413      	add	r3, r2
 80056e8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68ba      	ldr	r2, [r7, #8]
 80056f0:	0151      	lsls	r1, r2, #5
 80056f2:	68fa      	ldr	r2, [r7, #12]
 80056f4:	440a      	add	r2, r1
 80056f6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80056fe:	6013      	str	r3, [r2, #0]
 8005700:	e027      	b.n	8005752 <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	015a      	lsls	r2, r3, #5
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	4413      	add	r3, r2
 800570a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	68ba      	ldr	r2, [r7, #8]
 8005712:	0151      	lsls	r1, r2, #5
 8005714:	68fa      	ldr	r2, [r7, #12]
 8005716:	440a      	add	r2, r1
 8005718:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800571c:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005720:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	791b      	ldrb	r3, [r3, #4]
 8005726:	2b03      	cmp	r3, #3
 8005728:	d003      	beq.n	8005732 <USB_EPClearStall+0x9e>
 800572a:	683b      	ldr	r3, [r7, #0]
 800572c:	791b      	ldrb	r3, [r3, #4]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d10f      	bne.n	8005752 <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005732:	68bb      	ldr	r3, [r7, #8]
 8005734:	015a      	lsls	r2, r3, #5
 8005736:	68fb      	ldr	r3, [r7, #12]
 8005738:	4413      	add	r3, r2
 800573a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800573e:	681b      	ldr	r3, [r3, #0]
 8005740:	68ba      	ldr	r2, [r7, #8]
 8005742:	0151      	lsls	r1, r2, #5
 8005744:	68fa      	ldr	r2, [r7, #12]
 8005746:	440a      	add	r2, r1
 8005748:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800574c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005750:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005752:	2300      	movs	r3, #0
}
 8005754:	4618      	mov	r0, r3
 8005756:	3714      	adds	r7, #20
 8005758:	46bd      	mov	sp, r7
 800575a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575e:	4770      	bx	lr

08005760 <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	460b      	mov	r3, r1
 800576a:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005776:	681b      	ldr	r3, [r3, #0]
 8005778:	68fa      	ldr	r2, [r7, #12]
 800577a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800577e:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005782:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800578a:	681a      	ldr	r2, [r3, #0]
 800578c:	78fb      	ldrb	r3, [r7, #3]
 800578e:	011b      	lsls	r3, r3, #4
 8005790:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005794:	68f9      	ldr	r1, [r7, #12]
 8005796:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800579a:	4313      	orrs	r3, r2
 800579c:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 800579e:	2300      	movs	r3, #0
}
 80057a0:	4618      	mov	r0, r3
 80057a2:	3714      	adds	r7, #20
 80057a4:	46bd      	mov	sp, r7
 80057a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057aa:	4770      	bx	lr

080057ac <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057ac:	b480      	push	{r7}
 80057ae:	b085      	sub	sp, #20
 80057b0:	af00      	add	r7, sp, #0
 80057b2:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80057be:	681b      	ldr	r3, [r3, #0]
 80057c0:	68fa      	ldr	r2, [r7, #12]
 80057c2:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80057c6:	f023 0303 	bic.w	r3, r3, #3
 80057ca:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 80057cc:	68fb      	ldr	r3, [r7, #12]
 80057ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	68fa      	ldr	r2, [r7, #12]
 80057d6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80057da:	f023 0302 	bic.w	r3, r3, #2
 80057de:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80057e0:	2300      	movs	r3, #0
}
 80057e2:	4618      	mov	r0, r3
 80057e4:	3714      	adds	r7, #20
 80057e6:	46bd      	mov	sp, r7
 80057e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ec:	4770      	bx	lr

080057ee <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 80057ee:	b480      	push	{r7}
 80057f0:	b085      	sub	sp, #20
 80057f2:	af00      	add	r7, sp, #0
 80057f4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 80057fa:	68fb      	ldr	r3, [r7, #12]
 80057fc:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68fa      	ldr	r2, [r7, #12]
 8005804:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005808:	f023 0303 	bic.w	r3, r3, #3
 800580c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800580e:	68fb      	ldr	r3, [r7, #12]
 8005810:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005814:	685b      	ldr	r3, [r3, #4]
 8005816:	68fa      	ldr	r2, [r7, #12]
 8005818:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800581c:	f043 0302 	orr.w	r3, r3, #2
 8005820:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005822:	2300      	movs	r3, #0
}
 8005824:	4618      	mov	r0, r3
 8005826:	3714      	adds	r7, #20
 8005828:	46bd      	mov	sp, r7
 800582a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800582e:	4770      	bx	lr

08005830 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005830:	b480      	push	{r7}
 8005832:	b085      	sub	sp, #20
 8005834:	af00      	add	r7, sp, #0
 8005836:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	695b      	ldr	r3, [r3, #20]
 800583c:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	699b      	ldr	r3, [r3, #24]
 8005842:	68fa      	ldr	r2, [r7, #12]
 8005844:	4013      	ands	r3, r2
 8005846:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005848:	68fb      	ldr	r3, [r7, #12]
}
 800584a:	4618      	mov	r0, r3
 800584c:	3714      	adds	r7, #20
 800584e:	46bd      	mov	sp, r7
 8005850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005854:	4770      	bx	lr

08005856 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005856:	b480      	push	{r7}
 8005858:	b085      	sub	sp, #20
 800585a:	af00      	add	r7, sp, #0
 800585c:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005868:	699b      	ldr	r3, [r3, #24]
 800586a:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 800586c:	68fb      	ldr	r3, [r7, #12]
 800586e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005872:	69db      	ldr	r3, [r3, #28]
 8005874:	68ba      	ldr	r2, [r7, #8]
 8005876:	4013      	ands	r3, r2
 8005878:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 800587a:	68bb      	ldr	r3, [r7, #8]
 800587c:	0c1b      	lsrs	r3, r3, #16
}
 800587e:	4618      	mov	r0, r3
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr

0800588a <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 800588a:	b480      	push	{r7}
 800588c:	b085      	sub	sp, #20
 800588e:	af00      	add	r7, sp, #0
 8005890:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800589c:	699b      	ldr	r3, [r3, #24]
 800589e:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058a6:	69db      	ldr	r3, [r3, #28]
 80058a8:	68ba      	ldr	r2, [r7, #8]
 80058aa:	4013      	ands	r3, r2
 80058ac:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 80058ae:	68bb      	ldr	r3, [r7, #8]
 80058b0:	b29b      	uxth	r3, r3
}
 80058b2:	4618      	mov	r0, r3
 80058b4:	3714      	adds	r7, #20
 80058b6:	46bd      	mov	sp, r7
 80058b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058bc:	4770      	bx	lr

080058be <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80058be:	b480      	push	{r7}
 80058c0:	b085      	sub	sp, #20
 80058c2:	af00      	add	r7, sp, #0
 80058c4:	6078      	str	r0, [r7, #4]
 80058c6:	460b      	mov	r3, r1
 80058c8:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 80058ce:	78fb      	ldrb	r3, [r7, #3]
 80058d0:	015a      	lsls	r2, r3, #5
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	4413      	add	r3, r2
 80058d6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80058da:	689b      	ldr	r3, [r3, #8]
 80058dc:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80058e4:	695b      	ldr	r3, [r3, #20]
 80058e6:	68ba      	ldr	r2, [r7, #8]
 80058e8:	4013      	ands	r3, r2
 80058ea:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 80058ec:	68bb      	ldr	r3, [r7, #8]
}
 80058ee:	4618      	mov	r0, r3
 80058f0:	3714      	adds	r7, #20
 80058f2:	46bd      	mov	sp, r7
 80058f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f8:	4770      	bx	lr

080058fa <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 80058fa:	b480      	push	{r7}
 80058fc:	b087      	sub	sp, #28
 80058fe:	af00      	add	r7, sp, #0
 8005900:	6078      	str	r0, [r7, #4]
 8005902:	460b      	mov	r3, r1
 8005904:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 800590a:	697b      	ldr	r3, [r7, #20]
 800590c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005910:	691b      	ldr	r3, [r3, #16]
 8005912:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005914:	697b      	ldr	r3, [r7, #20]
 8005916:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800591a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591c:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 800591e:	78fb      	ldrb	r3, [r7, #3]
 8005920:	f003 030f 	and.w	r3, r3, #15
 8005924:	68fa      	ldr	r2, [r7, #12]
 8005926:	fa22 f303 	lsr.w	r3, r2, r3
 800592a:	01db      	lsls	r3, r3, #7
 800592c:	b2db      	uxtb	r3, r3
 800592e:	693a      	ldr	r2, [r7, #16]
 8005930:	4313      	orrs	r3, r2
 8005932:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005934:	78fb      	ldrb	r3, [r7, #3]
 8005936:	015a      	lsls	r2, r3, #5
 8005938:	697b      	ldr	r3, [r7, #20]
 800593a:	4413      	add	r3, r2
 800593c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005940:	689b      	ldr	r3, [r3, #8]
 8005942:	693a      	ldr	r2, [r7, #16]
 8005944:	4013      	ands	r3, r2
 8005946:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005948:	68bb      	ldr	r3, [r7, #8]
}
 800594a:	4618      	mov	r0, r3
 800594c:	371c      	adds	r7, #28
 800594e:	46bd      	mov	sp, r7
 8005950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005954:	4770      	bx	lr

08005956 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005956:	b480      	push	{r7}
 8005958:	b083      	sub	sp, #12
 800595a:	af00      	add	r7, sp, #0
 800595c:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	695b      	ldr	r3, [r3, #20]
 8005962:	f003 0301 	and.w	r3, r3, #1
}
 8005966:	4618      	mov	r0, r3
 8005968:	370c      	adds	r7, #12
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr

08005972 <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005972:	b480      	push	{r7}
 8005974:	b085      	sub	sp, #20
 8005976:	af00      	add	r7, sp, #0
 8005978:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	68fa      	ldr	r2, [r7, #12]
 8005988:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800598c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005990:	f023 0307 	bic.w	r3, r3, #7
 8005994:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800599c:	685b      	ldr	r3, [r3, #4]
 800599e:	68fa      	ldr	r2, [r7, #12]
 80059a0:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80059a4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059a8:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 80059aa:	2300      	movs	r3, #0
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3714      	adds	r7, #20
 80059b0:	46bd      	mov	sp, r7
 80059b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059b6:	4770      	bx	lr

080059b8 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 80059b8:	b480      	push	{r7}
 80059ba:	b087      	sub	sp, #28
 80059bc:	af00      	add	r7, sp, #0
 80059be:	60f8      	str	r0, [r7, #12]
 80059c0:	460b      	mov	r3, r1
 80059c2:	607a      	str	r2, [r7, #4]
 80059c4:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059c6:	68fb      	ldr	r3, [r7, #12]
 80059c8:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	333c      	adds	r3, #60	; 0x3c
 80059ce:	3304      	adds	r3, #4
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 80059d4:	693b      	ldr	r3, [r7, #16]
 80059d6:	4a26      	ldr	r2, [pc, #152]	; (8005a70 <USB_EP0_OutStart+0xb8>)
 80059d8:	4293      	cmp	r3, r2
 80059da:	d90a      	bls.n	80059f2 <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80059e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80059ec:	d101      	bne.n	80059f2 <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 80059ee:	2300      	movs	r3, #0
 80059f0:	e037      	b.n	8005a62 <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 80059f2:	697b      	ldr	r3, [r7, #20]
 80059f4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059f8:	461a      	mov	r2, r3
 80059fa:	2300      	movs	r3, #0
 80059fc:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80059fe:	697b      	ldr	r3, [r7, #20]
 8005a00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a04:	691b      	ldr	r3, [r3, #16]
 8005a06:	697a      	ldr	r2, [r7, #20]
 8005a08:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a0c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005a10:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005a12:	697b      	ldr	r3, [r7, #20]
 8005a14:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a18:	691b      	ldr	r3, [r3, #16]
 8005a1a:	697a      	ldr	r2, [r7, #20]
 8005a1c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a20:	f043 0318 	orr.w	r3, r3, #24
 8005a24:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005a26:	697b      	ldr	r3, [r7, #20]
 8005a28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	697a      	ldr	r2, [r7, #20]
 8005a30:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a34:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005a38:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005a3a:	7afb      	ldrb	r3, [r7, #11]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d10f      	bne.n	8005a60 <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005a40:	697b      	ldr	r3, [r7, #20]
 8005a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a46:	461a      	mov	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005a4c:	697b      	ldr	r3, [r7, #20]
 8005a4e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a52:	681b      	ldr	r3, [r3, #0]
 8005a54:	697a      	ldr	r2, [r7, #20]
 8005a56:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a5a:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005a5e:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005a60:	2300      	movs	r3, #0
}
 8005a62:	4618      	mov	r0, r3
 8005a64:	371c      	adds	r7, #28
 8005a66:	46bd      	mov	sp, r7
 8005a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a6c:	4770      	bx	lr
 8005a6e:	bf00      	nop
 8005a70:	4f54300a 	.word	0x4f54300a

08005a74 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005a74:	b480      	push	{r7}
 8005a76:	b085      	sub	sp, #20
 8005a78:	af00      	add	r7, sp, #0
 8005a7a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005a7c:	2300      	movs	r3, #0
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	3301      	adds	r3, #1
 8005a84:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005a86:	68fb      	ldr	r3, [r7, #12]
 8005a88:	4a13      	ldr	r2, [pc, #76]	; (8005ad8 <USB_CoreReset+0x64>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d901      	bls.n	8005a92 <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005a8e:	2303      	movs	r3, #3
 8005a90:	e01b      	b.n	8005aca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	691b      	ldr	r3, [r3, #16]
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	daf2      	bge.n	8005a80 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	691b      	ldr	r3, [r3, #16]
 8005aa2:	f043 0201 	orr.w	r2, r3, #1
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005aaa:	68fb      	ldr	r3, [r7, #12]
 8005aac:	3301      	adds	r3, #1
 8005aae:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	4a09      	ldr	r2, [pc, #36]	; (8005ad8 <USB_CoreReset+0x64>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d901      	bls.n	8005abc <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005ab8:	2303      	movs	r3, #3
 8005aba:	e006      	b.n	8005aca <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	691b      	ldr	r3, [r3, #16]
 8005ac0:	f003 0301 	and.w	r3, r3, #1
 8005ac4:	2b01      	cmp	r3, #1
 8005ac6:	d0f0      	beq.n	8005aaa <USB_CoreReset+0x36>

  return HAL_OK;
 8005ac8:	2300      	movs	r3, #0
}
 8005aca:	4618      	mov	r0, r3
 8005acc:	3714      	adds	r7, #20
 8005ace:	46bd      	mov	sp, r7
 8005ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad4:	4770      	bx	lr
 8005ad6:	bf00      	nop
 8005ad8:	00030d40 	.word	0x00030d40

08005adc <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b084      	sub	sp, #16
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
 8005ae4:	460b      	mov	r3, r1
 8005ae6:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005ae8:	2010      	movs	r0, #16
 8005aea:	f002 f8e1 	bl	8007cb0 <USBD_static_malloc>
 8005aee:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	2b00      	cmp	r3, #0
 8005af4:	d109      	bne.n	8005b0a <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	32b0      	adds	r2, #176	; 0xb0
 8005b00:	2100      	movs	r1, #0
 8005b02:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005b06:	2302      	movs	r3, #2
 8005b08:	e048      	b.n	8005b9c <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	32b0      	adds	r2, #176	; 0xb0
 8005b14:	68f9      	ldr	r1, [r7, #12]
 8005b16:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005b20:	687b      	ldr	r3, [r7, #4]
 8005b22:	32b0      	adds	r2, #176	; 0xb0
 8005b24:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	7c1b      	ldrb	r3, [r3, #16]
 8005b32:	2b00      	cmp	r3, #0
 8005b34:	d10d      	bne.n	8005b52 <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005b36:	4b1b      	ldr	r3, [pc, #108]	; (8005ba4 <USBD_HID_Init+0xc8>)
 8005b38:	781b      	ldrb	r3, [r3, #0]
 8005b3a:	f003 020f 	and.w	r2, r3, #15
 8005b3e:	6879      	ldr	r1, [r7, #4]
 8005b40:	4613      	mov	r3, r2
 8005b42:	009b      	lsls	r3, r3, #2
 8005b44:	4413      	add	r3, r2
 8005b46:	009b      	lsls	r3, r3, #2
 8005b48:	440b      	add	r3, r1
 8005b4a:	3326      	adds	r3, #38	; 0x26
 8005b4c:	2207      	movs	r2, #7
 8005b4e:	801a      	strh	r2, [r3, #0]
 8005b50:	e00c      	b.n	8005b6c <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005b52:	4b14      	ldr	r3, [pc, #80]	; (8005ba4 <USBD_HID_Init+0xc8>)
 8005b54:	781b      	ldrb	r3, [r3, #0]
 8005b56:	f003 020f 	and.w	r2, r3, #15
 8005b5a:	6879      	ldr	r1, [r7, #4]
 8005b5c:	4613      	mov	r3, r2
 8005b5e:	009b      	lsls	r3, r3, #2
 8005b60:	4413      	add	r3, r2
 8005b62:	009b      	lsls	r3, r3, #2
 8005b64:	440b      	add	r3, r1
 8005b66:	3326      	adds	r3, #38	; 0x26
 8005b68:	220a      	movs	r2, #10
 8005b6a:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005b6c:	4b0d      	ldr	r3, [pc, #52]	; (8005ba4 <USBD_HID_Init+0xc8>)
 8005b6e:	7819      	ldrb	r1, [r3, #0]
 8005b70:	2304      	movs	r3, #4
 8005b72:	2203      	movs	r2, #3
 8005b74:	6878      	ldr	r0, [r7, #4]
 8005b76:	f001 ff8a 	bl	8007a8e <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005b7a:	4b0a      	ldr	r3, [pc, #40]	; (8005ba4 <USBD_HID_Init+0xc8>)
 8005b7c:	781b      	ldrb	r3, [r3, #0]
 8005b7e:	f003 020f 	and.w	r2, r3, #15
 8005b82:	6879      	ldr	r1, [r7, #4]
 8005b84:	4613      	mov	r3, r2
 8005b86:	009b      	lsls	r3, r3, #2
 8005b88:	4413      	add	r3, r2
 8005b8a:	009b      	lsls	r3, r3, #2
 8005b8c:	440b      	add	r3, r1
 8005b8e:	3324      	adds	r3, #36	; 0x24
 8005b90:	2201      	movs	r2, #1
 8005b92:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	2200      	movs	r2, #0
 8005b98:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005b9a:	2300      	movs	r3, #0
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}
 8005ba4:	20000493 	.word	0x20000493

08005ba8 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b082      	sub	sp, #8
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	460b      	mov	r3, r1
 8005bb2:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005bb4:	4b1f      	ldr	r3, [pc, #124]	; (8005c34 <USBD_HID_DeInit+0x8c>)
 8005bb6:	781b      	ldrb	r3, [r3, #0]
 8005bb8:	4619      	mov	r1, r3
 8005bba:	6878      	ldr	r0, [r7, #4]
 8005bbc:	f001 ff8d 	bl	8007ada <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005bc0:	4b1c      	ldr	r3, [pc, #112]	; (8005c34 <USBD_HID_DeInit+0x8c>)
 8005bc2:	781b      	ldrb	r3, [r3, #0]
 8005bc4:	f003 020f 	and.w	r2, r3, #15
 8005bc8:	6879      	ldr	r1, [r7, #4]
 8005bca:	4613      	mov	r3, r2
 8005bcc:	009b      	lsls	r3, r3, #2
 8005bce:	4413      	add	r3, r2
 8005bd0:	009b      	lsls	r3, r3, #2
 8005bd2:	440b      	add	r3, r1
 8005bd4:	3324      	adds	r3, #36	; 0x24
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005bda:	4b16      	ldr	r3, [pc, #88]	; (8005c34 <USBD_HID_DeInit+0x8c>)
 8005bdc:	781b      	ldrb	r3, [r3, #0]
 8005bde:	f003 020f 	and.w	r2, r3, #15
 8005be2:	6879      	ldr	r1, [r7, #4]
 8005be4:	4613      	mov	r3, r2
 8005be6:	009b      	lsls	r3, r3, #2
 8005be8:	4413      	add	r3, r2
 8005bea:	009b      	lsls	r3, r3, #2
 8005bec:	440b      	add	r3, r1
 8005bee:	3326      	adds	r3, #38	; 0x26
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	32b0      	adds	r2, #176	; 0xb0
 8005bfe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d011      	beq.n	8005c2a <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c0c:	687b      	ldr	r3, [r7, #4]
 8005c0e:	32b0      	adds	r2, #176	; 0xb0
 8005c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c14:	4618      	mov	r0, r3
 8005c16:	f002 f859 	bl	8007ccc <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	32b0      	adds	r2, #176	; 0xb0
 8005c24:	2100      	movs	r1, #0
 8005c26:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005c2a:	2300      	movs	r3, #0
}
 8005c2c:	4618      	mov	r0, r3
 8005c2e:	3708      	adds	r7, #8
 8005c30:	46bd      	mov	sp, r7
 8005c32:	bd80      	pop	{r7, pc}
 8005c34:	20000493 	.word	0x20000493

08005c38 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005c38:	b580      	push	{r7, lr}
 8005c3a:	b086      	sub	sp, #24
 8005c3c:	af00      	add	r7, sp, #0
 8005c3e:	6078      	str	r0, [r7, #4]
 8005c40:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	32b0      	adds	r2, #176	; 0xb0
 8005c4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005c50:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005c52:	2300      	movs	r3, #0
 8005c54:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005c56:	2300      	movs	r3, #0
 8005c58:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005c5a:	68fb      	ldr	r3, [r7, #12]
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d101      	bne.n	8005c64 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005c60:	2303      	movs	r3, #3
 8005c62:	e0e8      	b.n	8005e36 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005c64:	683b      	ldr	r3, [r7, #0]
 8005c66:	781b      	ldrb	r3, [r3, #0]
 8005c68:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d046      	beq.n	8005cfe <USBD_HID_Setup+0xc6>
 8005c70:	2b20      	cmp	r3, #32
 8005c72:	f040 80d8 	bne.w	8005e26 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	785b      	ldrb	r3, [r3, #1]
 8005c7a:	3b02      	subs	r3, #2
 8005c7c:	2b09      	cmp	r3, #9
 8005c7e:	d836      	bhi.n	8005cee <USBD_HID_Setup+0xb6>
 8005c80:	a201      	add	r2, pc, #4	; (adr r2, 8005c88 <USBD_HID_Setup+0x50>)
 8005c82:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c86:	bf00      	nop
 8005c88:	08005cdf 	.word	0x08005cdf
 8005c8c:	08005cbf 	.word	0x08005cbf
 8005c90:	08005cef 	.word	0x08005cef
 8005c94:	08005cef 	.word	0x08005cef
 8005c98:	08005cef 	.word	0x08005cef
 8005c9c:	08005cef 	.word	0x08005cef
 8005ca0:	08005cef 	.word	0x08005cef
 8005ca4:	08005cef 	.word	0x08005cef
 8005ca8:	08005ccd 	.word	0x08005ccd
 8005cac:	08005cb1 	.word	0x08005cb1
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005cb0:	683b      	ldr	r3, [r7, #0]
 8005cb2:	885b      	ldrh	r3, [r3, #2]
 8005cb4:	b2db      	uxtb	r3, r3
 8005cb6:	461a      	mov	r2, r3
 8005cb8:	68fb      	ldr	r3, [r7, #12]
 8005cba:	601a      	str	r2, [r3, #0]
          break;
 8005cbc:	e01e      	b.n	8005cfc <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2201      	movs	r2, #1
 8005cc2:	4619      	mov	r1, r3
 8005cc4:	6878      	ldr	r0, [r7, #4]
 8005cc6:	f001 fba5 	bl	8007414 <USBD_CtlSendData>
          break;
 8005cca:	e017      	b.n	8005cfc <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8005ccc:	683b      	ldr	r3, [r7, #0]
 8005cce:	885b      	ldrh	r3, [r3, #2]
 8005cd0:	0a1b      	lsrs	r3, r3, #8
 8005cd2:	b29b      	uxth	r3, r3
 8005cd4:	b2db      	uxtb	r3, r3
 8005cd6:	461a      	mov	r2, r3
 8005cd8:	68fb      	ldr	r3, [r7, #12]
 8005cda:	605a      	str	r2, [r3, #4]
          break;
 8005cdc:	e00e      	b.n	8005cfc <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	3304      	adds	r3, #4
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	6878      	ldr	r0, [r7, #4]
 8005ce8:	f001 fb94 	bl	8007414 <USBD_CtlSendData>
          break;
 8005cec:	e006      	b.n	8005cfc <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 8005cee:	6839      	ldr	r1, [r7, #0]
 8005cf0:	6878      	ldr	r0, [r7, #4]
 8005cf2:	f001 fb1e 	bl	8007332 <USBD_CtlError>
          ret = USBD_FAIL;
 8005cf6:	2303      	movs	r3, #3
 8005cf8:	75fb      	strb	r3, [r7, #23]
          break;
 8005cfa:	bf00      	nop
      }
      break;
 8005cfc:	e09a      	b.n	8005e34 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	785b      	ldrb	r3, [r3, #1]
 8005d02:	2b0b      	cmp	r3, #11
 8005d04:	f200 8086 	bhi.w	8005e14 <USBD_HID_Setup+0x1dc>
 8005d08:	a201      	add	r2, pc, #4	; (adr r2, 8005d10 <USBD_HID_Setup+0xd8>)
 8005d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005d0e:	bf00      	nop
 8005d10:	08005d41 	.word	0x08005d41
 8005d14:	08005e23 	.word	0x08005e23
 8005d18:	08005e15 	.word	0x08005e15
 8005d1c:	08005e15 	.word	0x08005e15
 8005d20:	08005e15 	.word	0x08005e15
 8005d24:	08005e15 	.word	0x08005e15
 8005d28:	08005d6b 	.word	0x08005d6b
 8005d2c:	08005e15 	.word	0x08005e15
 8005d30:	08005e15 	.word	0x08005e15
 8005d34:	08005e15 	.word	0x08005e15
 8005d38:	08005dc3 	.word	0x08005dc3
 8005d3c:	08005ded 	.word	0x08005ded
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005d46:	b2db      	uxtb	r3, r3
 8005d48:	2b03      	cmp	r3, #3
 8005d4a:	d107      	bne.n	8005d5c <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8005d4c:	f107 030a 	add.w	r3, r7, #10
 8005d50:	2202      	movs	r2, #2
 8005d52:	4619      	mov	r1, r3
 8005d54:	6878      	ldr	r0, [r7, #4]
 8005d56:	f001 fb5d 	bl	8007414 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005d5a:	e063      	b.n	8005e24 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	6878      	ldr	r0, [r7, #4]
 8005d60:	f001 fae7 	bl	8007332 <USBD_CtlError>
            ret = USBD_FAIL;
 8005d64:	2303      	movs	r3, #3
 8005d66:	75fb      	strb	r3, [r7, #23]
          break;
 8005d68:	e05c      	b.n	8005e24 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 8005d6a:	683b      	ldr	r3, [r7, #0]
 8005d6c:	885b      	ldrh	r3, [r3, #2]
 8005d6e:	0a1b      	lsrs	r3, r3, #8
 8005d70:	b29b      	uxth	r3, r3
 8005d72:	2b22      	cmp	r3, #34	; 0x22
 8005d74:	d108      	bne.n	8005d88 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 8005d76:	683b      	ldr	r3, [r7, #0]
 8005d78:	88db      	ldrh	r3, [r3, #6]
 8005d7a:	2b3f      	cmp	r3, #63	; 0x3f
 8005d7c:	bf28      	it	cs
 8005d7e:	233f      	movcs	r3, #63	; 0x3f
 8005d80:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 8005d82:	4b2f      	ldr	r3, [pc, #188]	; (8005e40 <USBD_HID_Setup+0x208>)
 8005d84:	613b      	str	r3, [r7, #16]
 8005d86:	e015      	b.n	8005db4 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 8005d88:	683b      	ldr	r3, [r7, #0]
 8005d8a:	885b      	ldrh	r3, [r3, #2]
 8005d8c:	0a1b      	lsrs	r3, r3, #8
 8005d8e:	b29b      	uxth	r3, r3
 8005d90:	2b21      	cmp	r3, #33	; 0x21
 8005d92:	d108      	bne.n	8005da6 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 8005d94:	4b2b      	ldr	r3, [pc, #172]	; (8005e44 <USBD_HID_Setup+0x20c>)
 8005d96:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 8005d98:	683b      	ldr	r3, [r7, #0]
 8005d9a:	88db      	ldrh	r3, [r3, #6]
 8005d9c:	2b09      	cmp	r3, #9
 8005d9e:	bf28      	it	cs
 8005da0:	2309      	movcs	r3, #9
 8005da2:	82bb      	strh	r3, [r7, #20]
 8005da4:	e006      	b.n	8005db4 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 8005da6:	6839      	ldr	r1, [r7, #0]
 8005da8:	6878      	ldr	r0, [r7, #4]
 8005daa:	f001 fac2 	bl	8007332 <USBD_CtlError>
            ret = USBD_FAIL;
 8005dae:	2303      	movs	r3, #3
 8005db0:	75fb      	strb	r3, [r7, #23]
            break;
 8005db2:	e037      	b.n	8005e24 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 8005db4:	8abb      	ldrh	r3, [r7, #20]
 8005db6:	461a      	mov	r2, r3
 8005db8:	6939      	ldr	r1, [r7, #16]
 8005dba:	6878      	ldr	r0, [r7, #4]
 8005dbc:	f001 fb2a 	bl	8007414 <USBD_CtlSendData>
          break;
 8005dc0:	e030      	b.n	8005e24 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005dc8:	b2db      	uxtb	r3, r3
 8005dca:	2b03      	cmp	r3, #3
 8005dcc:	d107      	bne.n	8005dde <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 8005dce:	68fb      	ldr	r3, [r7, #12]
 8005dd0:	3308      	adds	r3, #8
 8005dd2:	2201      	movs	r2, #1
 8005dd4:	4619      	mov	r1, r3
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f001 fb1c 	bl	8007414 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005ddc:	e022      	b.n	8005e24 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005dde:	6839      	ldr	r1, [r7, #0]
 8005de0:	6878      	ldr	r0, [r7, #4]
 8005de2:	f001 faa6 	bl	8007332 <USBD_CtlError>
            ret = USBD_FAIL;
 8005de6:	2303      	movs	r3, #3
 8005de8:	75fb      	strb	r3, [r7, #23]
          break;
 8005dea:	e01b      	b.n	8005e24 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8005df2:	b2db      	uxtb	r3, r3
 8005df4:	2b03      	cmp	r3, #3
 8005df6:	d106      	bne.n	8005e06 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	885b      	ldrh	r3, [r3, #2]
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	461a      	mov	r2, r3
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8005e04:	e00e      	b.n	8005e24 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8005e06:	6839      	ldr	r1, [r7, #0]
 8005e08:	6878      	ldr	r0, [r7, #4]
 8005e0a:	f001 fa92 	bl	8007332 <USBD_CtlError>
            ret = USBD_FAIL;
 8005e0e:	2303      	movs	r3, #3
 8005e10:	75fb      	strb	r3, [r7, #23]
          break;
 8005e12:	e007      	b.n	8005e24 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8005e14:	6839      	ldr	r1, [r7, #0]
 8005e16:	6878      	ldr	r0, [r7, #4]
 8005e18:	f001 fa8b 	bl	8007332 <USBD_CtlError>
          ret = USBD_FAIL;
 8005e1c:	2303      	movs	r3, #3
 8005e1e:	75fb      	strb	r3, [r7, #23]
          break;
 8005e20:	e000      	b.n	8005e24 <USBD_HID_Setup+0x1ec>
          break;
 8005e22:	bf00      	nop
      }
      break;
 8005e24:	e006      	b.n	8005e34 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8005e26:	6839      	ldr	r1, [r7, #0]
 8005e28:	6878      	ldr	r0, [r7, #4]
 8005e2a:	f001 fa82 	bl	8007332 <USBD_CtlError>
      ret = USBD_FAIL;
 8005e2e:	2303      	movs	r3, #3
 8005e30:	75fb      	strb	r3, [r7, #23]
      break;
 8005e32:	bf00      	nop
  }

  return (uint8_t)ret;
 8005e34:	7dfb      	ldrb	r3, [r7, #23]
}
 8005e36:	4618      	mov	r0, r3
 8005e38:	3718      	adds	r7, #24
 8005e3a:	46bd      	mov	sp, r7
 8005e3c:	bd80      	pop	{r7, pc}
 8005e3e:	bf00      	nop
 8005e40:	20000454 	.word	0x20000454
 8005e44:	2000043c 	.word	0x2000043c

08005e48 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 8005e48:	b580      	push	{r7, lr}
 8005e4a:	b084      	sub	sp, #16
 8005e4c:	af00      	add	r7, sp, #0
 8005e4e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e50:	2181      	movs	r1, #129	; 0x81
 8005e52:	4809      	ldr	r0, [pc, #36]	; (8005e78 <USBD_HID_GetFSCfgDesc+0x30>)
 8005e54:	f000 fc35 	bl	80066c2 <USBD_GetEpDesc>
 8005e58:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	2b00      	cmp	r3, #0
 8005e5e:	d002      	beq.n	8005e66 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	220a      	movs	r2, #10
 8005e64:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	2222      	movs	r2, #34	; 0x22
 8005e6a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005e6c:	4b02      	ldr	r3, [pc, #8]	; (8005e78 <USBD_HID_GetFSCfgDesc+0x30>)
}
 8005e6e:	4618      	mov	r0, r3
 8005e70:	3710      	adds	r7, #16
 8005e72:	46bd      	mov	sp, r7
 8005e74:	bd80      	pop	{r7, pc}
 8005e76:	bf00      	nop
 8005e78:	20000418 	.word	0x20000418

08005e7c <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b084      	sub	sp, #16
 8005e80:	af00      	add	r7, sp, #0
 8005e82:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005e84:	2181      	movs	r1, #129	; 0x81
 8005e86:	4809      	ldr	r0, [pc, #36]	; (8005eac <USBD_HID_GetHSCfgDesc+0x30>)
 8005e88:	f000 fc1b 	bl	80066c2 <USBD_GetEpDesc>
 8005e8c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005e8e:	68fb      	ldr	r3, [r7, #12]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d002      	beq.n	8005e9a <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	2207      	movs	r2, #7
 8005e98:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	2222      	movs	r2, #34	; 0x22
 8005e9e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005ea0:	4b02      	ldr	r3, [pc, #8]	; (8005eac <USBD_HID_GetHSCfgDesc+0x30>)
}
 8005ea2:	4618      	mov	r0, r3
 8005ea4:	3710      	adds	r7, #16
 8005ea6:	46bd      	mov	sp, r7
 8005ea8:	bd80      	pop	{r7, pc}
 8005eaa:	bf00      	nop
 8005eac:	20000418 	.word	0x20000418

08005eb0 <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8005eb8:	2181      	movs	r1, #129	; 0x81
 8005eba:	4809      	ldr	r0, [pc, #36]	; (8005ee0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8005ebc:	f000 fc01 	bl	80066c2 <USBD_GetEpDesc>
 8005ec0:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d002      	beq.n	8005ece <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8005ec8:	68fb      	ldr	r3, [r7, #12]
 8005eca:	220a      	movs	r2, #10
 8005ecc:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2222      	movs	r2, #34	; 0x22
 8005ed2:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8005ed4:	4b02      	ldr	r3, [pc, #8]	; (8005ee0 <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8005ed6:	4618      	mov	r0, r3
 8005ed8:	3710      	adds	r7, #16
 8005eda:	46bd      	mov	sp, r7
 8005edc:	bd80      	pop	{r7, pc}
 8005ede:	bf00      	nop
 8005ee0:	20000418 	.word	0x20000418

08005ee4 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8005ee4:	b480      	push	{r7}
 8005ee6:	b083      	sub	sp, #12
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	32b0      	adds	r2, #176	; 0xb0
 8005efa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005efe:	2200      	movs	r2, #0
 8005f00:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	370c      	adds	r7, #12
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0e:	4770      	bx	lr

08005f10 <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b083      	sub	sp, #12
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	220a      	movs	r2, #10
 8005f1c:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 8005f1e:	4b03      	ldr	r3, [pc, #12]	; (8005f2c <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 8005f20:	4618      	mov	r0, r3
 8005f22:	370c      	adds	r7, #12
 8005f24:	46bd      	mov	sp, r7
 8005f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f2a:	4770      	bx	lr
 8005f2c:	20000448 	.word	0x20000448

08005f30 <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8005f30:	b580      	push	{r7, lr}
 8005f32:	b086      	sub	sp, #24
 8005f34:	af00      	add	r7, sp, #0
 8005f36:	60f8      	str	r0, [r7, #12]
 8005f38:	60b9      	str	r1, [r7, #8]
 8005f3a:	4613      	mov	r3, r2
 8005f3c:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d101      	bne.n	8005f48 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005f44:	2303      	movs	r3, #3
 8005f46:	e01f      	b.n	8005f88 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2200      	movs	r2, #0
 8005f4c:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	2200      	movs	r2, #0
 8005f54:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8005f60:	68bb      	ldr	r3, [r7, #8]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d003      	beq.n	8005f6e <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8005f66:	68fb      	ldr	r3, [r7, #12]
 8005f68:	68ba      	ldr	r2, [r7, #8]
 8005f6a:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8005f76:	68fb      	ldr	r3, [r7, #12]
 8005f78:	79fa      	ldrb	r2, [r7, #7]
 8005f7a:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8005f7c:	68f8      	ldr	r0, [r7, #12]
 8005f7e:	f001 fd1f 	bl	80079c0 <USBD_LL_Init>
 8005f82:	4603      	mov	r3, r0
 8005f84:	75fb      	strb	r3, [r7, #23]

  return ret;
 8005f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8005f88:	4618      	mov	r0, r3
 8005f8a:	3718      	adds	r7, #24
 8005f8c:	46bd      	mov	sp, r7
 8005f8e:	bd80      	pop	{r7, pc}

08005f90 <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	b084      	sub	sp, #16
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8005f9a:	2300      	movs	r3, #0
 8005f9c:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 8005f9e:	683b      	ldr	r3, [r7, #0]
 8005fa0:	2b00      	cmp	r3, #0
 8005fa2:	d101      	bne.n	8005fa8 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8005fa4:	2303      	movs	r3, #3
 8005fa6:	e025      	b.n	8005ff4 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	683a      	ldr	r2, [r7, #0]
 8005fac:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	32ae      	adds	r2, #174	; 0xae
 8005fba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fc0:	2b00      	cmp	r3, #0
 8005fc2:	d00f      	beq.n	8005fe4 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	32ae      	adds	r2, #174	; 0xae
 8005fce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005fd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005fd4:	f107 020e 	add.w	r2, r7, #14
 8005fd8:	4610      	mov	r0, r2
 8005fda:	4798      	blx	r3
 8005fdc:	4602      	mov	r2, r0
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8005fea:	1c5a      	adds	r2, r3, #1
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3710      	adds	r7, #16
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b082      	sub	sp, #8
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 8006004:	6878      	ldr	r0, [r7, #4]
 8006006:	f001 fd27 	bl	8007a58 <USBD_LL_Start>
 800600a:	4603      	mov	r3, r0
}
 800600c:	4618      	mov	r0, r3
 800600e:	3708      	adds	r7, #8
 8006010:	46bd      	mov	sp, r7
 8006012:	bd80      	pop	{r7, pc}

08006014 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 8006014:	b480      	push	{r7}
 8006016:	b083      	sub	sp, #12
 8006018:	af00      	add	r7, sp, #0
 800601a:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800601c:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 800601e:	4618      	mov	r0, r3
 8006020:	370c      	adds	r7, #12
 8006022:	46bd      	mov	sp, r7
 8006024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006028:	4770      	bx	lr

0800602a <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 800602a:	b580      	push	{r7, lr}
 800602c:	b084      	sub	sp, #16
 800602e:	af00      	add	r7, sp, #0
 8006030:	6078      	str	r0, [r7, #4]
 8006032:	460b      	mov	r3, r1
 8006034:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 8006036:	2300      	movs	r3, #0
 8006038:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006040:	2b00      	cmp	r3, #0
 8006042:	d009      	beq.n	8006058 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800604a:	681b      	ldr	r3, [r3, #0]
 800604c:	78fa      	ldrb	r2, [r7, #3]
 800604e:	4611      	mov	r1, r2
 8006050:	6878      	ldr	r0, [r7, #4]
 8006052:	4798      	blx	r3
 8006054:	4603      	mov	r3, r0
 8006056:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006058:	7bfb      	ldrb	r3, [r7, #15]
}
 800605a:	4618      	mov	r0, r3
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8006062:	b580      	push	{r7, lr}
 8006064:	b084      	sub	sp, #16
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
 800606a:	460b      	mov	r3, r1
 800606c:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800606e:	2300      	movs	r3, #0
 8006070:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006078:	685b      	ldr	r3, [r3, #4]
 800607a:	78fa      	ldrb	r2, [r7, #3]
 800607c:	4611      	mov	r1, r2
 800607e:	6878      	ldr	r0, [r7, #4]
 8006080:	4798      	blx	r3
 8006082:	4603      	mov	r3, r0
 8006084:	2b00      	cmp	r3, #0
 8006086:	d001      	beq.n	800608c <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006088:	2303      	movs	r3, #3
 800608a:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 800608c:	7bfb      	ldrb	r3, [r7, #15]
}
 800608e:	4618      	mov	r0, r3
 8006090:	3710      	adds	r7, #16
 8006092:	46bd      	mov	sp, r7
 8006094:	bd80      	pop	{r7, pc}

08006096 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006096:	b580      	push	{r7, lr}
 8006098:	b084      	sub	sp, #16
 800609a:	af00      	add	r7, sp, #0
 800609c:	6078      	str	r0, [r7, #4]
 800609e:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060a6:	6839      	ldr	r1, [r7, #0]
 80060a8:	4618      	mov	r0, r3
 80060aa:	f001 f908 	bl	80072be <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	2201      	movs	r2, #1
 80060b2:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 80060b6:	687b      	ldr	r3, [r7, #4]
 80060b8:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 80060bc:	461a      	mov	r2, r3
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80060ca:	f003 031f 	and.w	r3, r3, #31
 80060ce:	2b02      	cmp	r3, #2
 80060d0:	d01a      	beq.n	8006108 <USBD_LL_SetupStage+0x72>
 80060d2:	2b02      	cmp	r3, #2
 80060d4:	d822      	bhi.n	800611c <USBD_LL_SetupStage+0x86>
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d002      	beq.n	80060e0 <USBD_LL_SetupStage+0x4a>
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d00a      	beq.n	80060f4 <USBD_LL_SetupStage+0x5e>
 80060de:	e01d      	b.n	800611c <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060e6:	4619      	mov	r1, r3
 80060e8:	6878      	ldr	r0, [r7, #4]
 80060ea:	f000 fb5f 	bl	80067ac <USBD_StdDevReq>
 80060ee:	4603      	mov	r3, r0
 80060f0:	73fb      	strb	r3, [r7, #15]
      break;
 80060f2:	e020      	b.n	8006136 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80060fa:	4619      	mov	r1, r3
 80060fc:	6878      	ldr	r0, [r7, #4]
 80060fe:	f000 fbc7 	bl	8006890 <USBD_StdItfReq>
 8006102:	4603      	mov	r3, r0
 8006104:	73fb      	strb	r3, [r7, #15]
      break;
 8006106:	e016      	b.n	8006136 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 800610e:	4619      	mov	r1, r3
 8006110:	6878      	ldr	r0, [r7, #4]
 8006112:	f000 fc29 	bl	8006968 <USBD_StdEPReq>
 8006116:	4603      	mov	r3, r0
 8006118:	73fb      	strb	r3, [r7, #15]
      break;
 800611a:	e00c      	b.n	8006136 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006122:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 8006126:	b2db      	uxtb	r3, r3
 8006128:	4619      	mov	r1, r3
 800612a:	6878      	ldr	r0, [r7, #4]
 800612c:	f001 fcf4 	bl	8007b18 <USBD_LL_StallEP>
 8006130:	4603      	mov	r3, r0
 8006132:	73fb      	strb	r3, [r7, #15]
      break;
 8006134:	bf00      	nop
  }

  return ret;
 8006136:	7bfb      	ldrb	r3, [r7, #15]
}
 8006138:	4618      	mov	r0, r3
 800613a:	3710      	adds	r7, #16
 800613c:	46bd      	mov	sp, r7
 800613e:	bd80      	pop	{r7, pc}

08006140 <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8006140:	b580      	push	{r7, lr}
 8006142:	b086      	sub	sp, #24
 8006144:	af00      	add	r7, sp, #0
 8006146:	60f8      	str	r0, [r7, #12]
 8006148:	460b      	mov	r3, r1
 800614a:	607a      	str	r2, [r7, #4]
 800614c:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 800614e:	2300      	movs	r3, #0
 8006150:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 8006152:	7afb      	ldrb	r3, [r7, #11]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d16e      	bne.n	8006236 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 800615e:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8006160:	68fb      	ldr	r3, [r7, #12]
 8006162:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006166:	2b03      	cmp	r3, #3
 8006168:	f040 8098 	bne.w	800629c <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 800616c:	693b      	ldr	r3, [r7, #16]
 800616e:	689a      	ldr	r2, [r3, #8]
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	68db      	ldr	r3, [r3, #12]
 8006174:	429a      	cmp	r2, r3
 8006176:	d913      	bls.n	80061a0 <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006178:	693b      	ldr	r3, [r7, #16]
 800617a:	689a      	ldr	r2, [r3, #8]
 800617c:	693b      	ldr	r3, [r7, #16]
 800617e:	68db      	ldr	r3, [r3, #12]
 8006180:	1ad2      	subs	r2, r2, r3
 8006182:	693b      	ldr	r3, [r7, #16]
 8006184:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006186:	693b      	ldr	r3, [r7, #16]
 8006188:	68da      	ldr	r2, [r3, #12]
 800618a:	693b      	ldr	r3, [r7, #16]
 800618c:	689b      	ldr	r3, [r3, #8]
 800618e:	4293      	cmp	r3, r2
 8006190:	bf28      	it	cs
 8006192:	4613      	movcs	r3, r2
 8006194:	461a      	mov	r2, r3
 8006196:	6879      	ldr	r1, [r7, #4]
 8006198:	68f8      	ldr	r0, [r7, #12]
 800619a:	f001 f967 	bl	800746c <USBD_CtlContinueRx>
 800619e:	e07d      	b.n	800629c <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 80061a0:	68fb      	ldr	r3, [r7, #12]
 80061a2:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80061a6:	f003 031f 	and.w	r3, r3, #31
 80061aa:	2b02      	cmp	r3, #2
 80061ac:	d014      	beq.n	80061d8 <USBD_LL_DataOutStage+0x98>
 80061ae:	2b02      	cmp	r3, #2
 80061b0:	d81d      	bhi.n	80061ee <USBD_LL_DataOutStage+0xae>
 80061b2:	2b00      	cmp	r3, #0
 80061b4:	d002      	beq.n	80061bc <USBD_LL_DataOutStage+0x7c>
 80061b6:	2b01      	cmp	r3, #1
 80061b8:	d003      	beq.n	80061c2 <USBD_LL_DataOutStage+0x82>
 80061ba:	e018      	b.n	80061ee <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 80061bc:	2300      	movs	r3, #0
 80061be:	75bb      	strb	r3, [r7, #22]
            break;
 80061c0:	e018      	b.n	80061f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 80061c2:	68fb      	ldr	r3, [r7, #12]
 80061c4:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80061c8:	b2db      	uxtb	r3, r3
 80061ca:	4619      	mov	r1, r3
 80061cc:	68f8      	ldr	r0, [r7, #12]
 80061ce:	f000 fa5e 	bl	800668e <USBD_CoreFindIF>
 80061d2:	4603      	mov	r3, r0
 80061d4:	75bb      	strb	r3, [r7, #22]
            break;
 80061d6:	e00d      	b.n	80061f4 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 80061de:	b2db      	uxtb	r3, r3
 80061e0:	4619      	mov	r1, r3
 80061e2:	68f8      	ldr	r0, [r7, #12]
 80061e4:	f000 fa60 	bl	80066a8 <USBD_CoreFindEP>
 80061e8:	4603      	mov	r3, r0
 80061ea:	75bb      	strb	r3, [r7, #22]
            break;
 80061ec:	e002      	b.n	80061f4 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 80061ee:	2300      	movs	r3, #0
 80061f0:	75bb      	strb	r3, [r7, #22]
            break;
 80061f2:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 80061f4:	7dbb      	ldrb	r3, [r7, #22]
 80061f6:	2b00      	cmp	r3, #0
 80061f8:	d119      	bne.n	800622e <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006200:	b2db      	uxtb	r3, r3
 8006202:	2b03      	cmp	r3, #3
 8006204:	d113      	bne.n	800622e <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 8006206:	7dba      	ldrb	r2, [r7, #22]
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	32ae      	adds	r2, #174	; 0xae
 800620c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006210:	691b      	ldr	r3, [r3, #16]
 8006212:	2b00      	cmp	r3, #0
 8006214:	d00b      	beq.n	800622e <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 8006216:	7dba      	ldrb	r2, [r7, #22]
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 800621e:	7dba      	ldrb	r2, [r7, #22]
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	32ae      	adds	r2, #174	; 0xae
 8006224:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006228:	691b      	ldr	r3, [r3, #16]
 800622a:	68f8      	ldr	r0, [r7, #12]
 800622c:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 800622e:	68f8      	ldr	r0, [r7, #12]
 8006230:	f001 f92d 	bl	800748e <USBD_CtlSendStatus>
 8006234:	e032      	b.n	800629c <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 8006236:	7afb      	ldrb	r3, [r7, #11]
 8006238:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800623c:	b2db      	uxtb	r3, r3
 800623e:	4619      	mov	r1, r3
 8006240:	68f8      	ldr	r0, [r7, #12]
 8006242:	f000 fa31 	bl	80066a8 <USBD_CoreFindEP>
 8006246:	4603      	mov	r3, r0
 8006248:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800624a:	7dbb      	ldrb	r3, [r7, #22]
 800624c:	2bff      	cmp	r3, #255	; 0xff
 800624e:	d025      	beq.n	800629c <USBD_LL_DataOutStage+0x15c>
 8006250:	7dbb      	ldrb	r3, [r7, #22]
 8006252:	2b00      	cmp	r3, #0
 8006254:	d122      	bne.n	800629c <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006256:	68fb      	ldr	r3, [r7, #12]
 8006258:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800625c:	b2db      	uxtb	r3, r3
 800625e:	2b03      	cmp	r3, #3
 8006260:	d117      	bne.n	8006292 <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 8006262:	7dba      	ldrb	r2, [r7, #22]
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	32ae      	adds	r2, #174	; 0xae
 8006268:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800626c:	699b      	ldr	r3, [r3, #24]
 800626e:	2b00      	cmp	r3, #0
 8006270:	d00f      	beq.n	8006292 <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 8006272:	7dba      	ldrb	r2, [r7, #22]
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 800627a:	7dba      	ldrb	r2, [r7, #22]
 800627c:	68fb      	ldr	r3, [r7, #12]
 800627e:	32ae      	adds	r2, #174	; 0xae
 8006280:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006284:	699b      	ldr	r3, [r3, #24]
 8006286:	7afa      	ldrb	r2, [r7, #11]
 8006288:	4611      	mov	r1, r2
 800628a:	68f8      	ldr	r0, [r7, #12]
 800628c:	4798      	blx	r3
 800628e:	4603      	mov	r3, r0
 8006290:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 8006292:	7dfb      	ldrb	r3, [r7, #23]
 8006294:	2b00      	cmp	r3, #0
 8006296:	d001      	beq.n	800629c <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006298:	7dfb      	ldrb	r3, [r7, #23]
 800629a:	e000      	b.n	800629e <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 800629c:	2300      	movs	r3, #0
}
 800629e:	4618      	mov	r0, r3
 80062a0:	3718      	adds	r7, #24
 80062a2:	46bd      	mov	sp, r7
 80062a4:	bd80      	pop	{r7, pc}

080062a6 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 80062a6:	b580      	push	{r7, lr}
 80062a8:	b086      	sub	sp, #24
 80062aa:	af00      	add	r7, sp, #0
 80062ac:	60f8      	str	r0, [r7, #12]
 80062ae:	460b      	mov	r3, r1
 80062b0:	607a      	str	r2, [r7, #4]
 80062b2:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 80062b4:	7afb      	ldrb	r3, [r7, #11]
 80062b6:	2b00      	cmp	r3, #0
 80062b8:	d16f      	bne.n	800639a <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 80062ba:	68fb      	ldr	r3, [r7, #12]
 80062bc:	3314      	adds	r3, #20
 80062be:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 80062c6:	2b02      	cmp	r3, #2
 80062c8:	d15a      	bne.n	8006380 <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 80062ca:	693b      	ldr	r3, [r7, #16]
 80062cc:	689a      	ldr	r2, [r3, #8]
 80062ce:	693b      	ldr	r3, [r7, #16]
 80062d0:	68db      	ldr	r3, [r3, #12]
 80062d2:	429a      	cmp	r2, r3
 80062d4:	d914      	bls.n	8006300 <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 80062d6:	693b      	ldr	r3, [r7, #16]
 80062d8:	689a      	ldr	r2, [r3, #8]
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	68db      	ldr	r3, [r3, #12]
 80062de:	1ad2      	subs	r2, r2, r3
 80062e0:	693b      	ldr	r3, [r7, #16]
 80062e2:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 80062e4:	693b      	ldr	r3, [r7, #16]
 80062e6:	689b      	ldr	r3, [r3, #8]
 80062e8:	461a      	mov	r2, r3
 80062ea:	6879      	ldr	r1, [r7, #4]
 80062ec:	68f8      	ldr	r0, [r7, #12]
 80062ee:	f001 f8ac 	bl	800744a <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80062f2:	2300      	movs	r3, #0
 80062f4:	2200      	movs	r2, #0
 80062f6:	2100      	movs	r1, #0
 80062f8:	68f8      	ldr	r0, [r7, #12]
 80062fa:	f001 fcb7 	bl	8007c6c <USBD_LL_PrepareReceive>
 80062fe:	e03f      	b.n	8006380 <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 8006300:	693b      	ldr	r3, [r7, #16]
 8006302:	68da      	ldr	r2, [r3, #12]
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	689b      	ldr	r3, [r3, #8]
 8006308:	429a      	cmp	r2, r3
 800630a:	d11c      	bne.n	8006346 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 800630c:	693b      	ldr	r3, [r7, #16]
 800630e:	685a      	ldr	r2, [r3, #4]
 8006310:	693b      	ldr	r3, [r7, #16]
 8006312:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 8006314:	429a      	cmp	r2, r3
 8006316:	d316      	bcc.n	8006346 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	685a      	ldr	r2, [r3, #4]
 800631c:	68fb      	ldr	r3, [r7, #12]
 800631e:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 8006322:	429a      	cmp	r2, r3
 8006324:	d20f      	bcs.n	8006346 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 8006326:	2200      	movs	r2, #0
 8006328:	2100      	movs	r1, #0
 800632a:	68f8      	ldr	r0, [r7, #12]
 800632c:	f001 f88d 	bl	800744a <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	2200      	movs	r2, #0
 8006334:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8006338:	2300      	movs	r3, #0
 800633a:	2200      	movs	r2, #0
 800633c:	2100      	movs	r1, #0
 800633e:	68f8      	ldr	r0, [r7, #12]
 8006340:	f001 fc94 	bl	8007c6c <USBD_LL_PrepareReceive>
 8006344:	e01c      	b.n	8006380 <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b03      	cmp	r3, #3
 8006350:	d10f      	bne.n	8006372 <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 8006352:	68fb      	ldr	r3, [r7, #12]
 8006354:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006358:	68db      	ldr	r3, [r3, #12]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d009      	beq.n	8006372 <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	2200      	movs	r2, #0
 8006362:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800636c:	68db      	ldr	r3, [r3, #12]
 800636e:	68f8      	ldr	r0, [r7, #12]
 8006370:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 8006372:	2180      	movs	r1, #128	; 0x80
 8006374:	68f8      	ldr	r0, [r7, #12]
 8006376:	f001 fbcf 	bl	8007b18 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 800637a:	68f8      	ldr	r0, [r7, #12]
 800637c:	f001 f89a 	bl	80074b4 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006386:	2b00      	cmp	r3, #0
 8006388:	d03a      	beq.n	8006400 <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 800638a:	68f8      	ldr	r0, [r7, #12]
 800638c:	f7ff fe42 	bl	8006014 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	2200      	movs	r2, #0
 8006394:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006398:	e032      	b.n	8006400 <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 800639a:	7afb      	ldrb	r3, [r7, #11]
 800639c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80063a0:	b2db      	uxtb	r3, r3
 80063a2:	4619      	mov	r1, r3
 80063a4:	68f8      	ldr	r0, [r7, #12]
 80063a6:	f000 f97f 	bl	80066a8 <USBD_CoreFindEP>
 80063aa:	4603      	mov	r3, r0
 80063ac:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80063ae:	7dfb      	ldrb	r3, [r7, #23]
 80063b0:	2bff      	cmp	r3, #255	; 0xff
 80063b2:	d025      	beq.n	8006400 <USBD_LL_DataInStage+0x15a>
 80063b4:	7dfb      	ldrb	r3, [r7, #23]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d122      	bne.n	8006400 <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80063c0:	b2db      	uxtb	r3, r3
 80063c2:	2b03      	cmp	r3, #3
 80063c4:	d11c      	bne.n	8006400 <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 80063c6:	7dfa      	ldrb	r2, [r7, #23]
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	32ae      	adds	r2, #174	; 0xae
 80063cc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063d0:	695b      	ldr	r3, [r3, #20]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d014      	beq.n	8006400 <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 80063d6:	7dfa      	ldrb	r2, [r7, #23]
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 80063de:	7dfa      	ldrb	r2, [r7, #23]
 80063e0:	68fb      	ldr	r3, [r7, #12]
 80063e2:	32ae      	adds	r2, #174	; 0xae
 80063e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80063e8:	695b      	ldr	r3, [r3, #20]
 80063ea:	7afa      	ldrb	r2, [r7, #11]
 80063ec:	4611      	mov	r1, r2
 80063ee:	68f8      	ldr	r0, [r7, #12]
 80063f0:	4798      	blx	r3
 80063f2:	4603      	mov	r3, r0
 80063f4:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 80063f6:	7dbb      	ldrb	r3, [r7, #22]
 80063f8:	2b00      	cmp	r3, #0
 80063fa:	d001      	beq.n	8006400 <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 80063fc:	7dbb      	ldrb	r3, [r7, #22]
 80063fe:	e000      	b.n	8006402 <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 8006400:	2300      	movs	r3, #0
}
 8006402:	4618      	mov	r0, r3
 8006404:	3718      	adds	r7, #24
 8006406:	46bd      	mov	sp, r7
 8006408:	bd80      	pop	{r7, pc}

0800640a <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 800640a:	b580      	push	{r7, lr}
 800640c:	b084      	sub	sp, #16
 800640e:	af00      	add	r7, sp, #0
 8006410:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 8006412:	2300      	movs	r3, #0
 8006414:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	2201      	movs	r2, #1
 800641a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	2200      	movs	r2, #0
 8006422:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	2200      	movs	r2, #0
 800642a:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	2200      	movs	r2, #0
 8006430:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	2200      	movs	r2, #0
 8006438:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006442:	2b00      	cmp	r3, #0
 8006444:	d014      	beq.n	8006470 <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800644c:	685b      	ldr	r3, [r3, #4]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d00e      	beq.n	8006470 <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006458:	685b      	ldr	r3, [r3, #4]
 800645a:	687a      	ldr	r2, [r7, #4]
 800645c:	6852      	ldr	r2, [r2, #4]
 800645e:	b2d2      	uxtb	r2, r2
 8006460:	4611      	mov	r1, r2
 8006462:	6878      	ldr	r0, [r7, #4]
 8006464:	4798      	blx	r3
 8006466:	4603      	mov	r3, r0
 8006468:	2b00      	cmp	r3, #0
 800646a:	d001      	beq.n	8006470 <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 800646c:	2303      	movs	r3, #3
 800646e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006470:	2340      	movs	r3, #64	; 0x40
 8006472:	2200      	movs	r2, #0
 8006474:	2100      	movs	r1, #0
 8006476:	6878      	ldr	r0, [r7, #4]
 8006478:	f001 fb09 	bl	8007a8e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	2201      	movs	r2, #1
 8006480:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2240      	movs	r2, #64	; 0x40
 8006488:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800648c:	2340      	movs	r3, #64	; 0x40
 800648e:	2200      	movs	r2, #0
 8006490:	2180      	movs	r1, #128	; 0x80
 8006492:	6878      	ldr	r0, [r7, #4]
 8006494:	f001 fafb 	bl	8007a8e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	2201      	movs	r2, #1
 800649c:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2240      	movs	r2, #64	; 0x40
 80064a2:	621a      	str	r2, [r3, #32]

  return ret;
 80064a4:	7bfb      	ldrb	r3, [r7, #15]
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3710      	adds	r7, #16
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}

080064ae <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80064ae:	b480      	push	{r7}
 80064b0:	b083      	sub	sp, #12
 80064b2:	af00      	add	r7, sp, #0
 80064b4:	6078      	str	r0, [r7, #4]
 80064b6:	460b      	mov	r3, r1
 80064b8:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	78fa      	ldrb	r2, [r7, #3]
 80064be:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80064c0:	2300      	movs	r3, #0
}
 80064c2:	4618      	mov	r0, r3
 80064c4:	370c      	adds	r7, #12
 80064c6:	46bd      	mov	sp, r7
 80064c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064cc:	4770      	bx	lr

080064ce <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80064ce:	b480      	push	{r7}
 80064d0:	b083      	sub	sp, #12
 80064d2:	af00      	add	r7, sp, #0
 80064d4:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80064dc:	b2da      	uxtb	r2, r3
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 80064e4:	687b      	ldr	r3, [r7, #4]
 80064e6:	2204      	movs	r2, #4
 80064e8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 80064ec:	2300      	movs	r3, #0
}
 80064ee:	4618      	mov	r0, r3
 80064f0:	370c      	adds	r7, #12
 80064f2:	46bd      	mov	sp, r7
 80064f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f8:	4770      	bx	lr

080064fa <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 80064fa:	b480      	push	{r7}
 80064fc:	b083      	sub	sp, #12
 80064fe:	af00      	add	r7, sp, #0
 8006500:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006508:	b2db      	uxtb	r3, r3
 800650a:	2b04      	cmp	r3, #4
 800650c:	d106      	bne.n	800651c <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 8006514:	b2da      	uxtb	r2, r3
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 800651c:	2300      	movs	r3, #0
}
 800651e:	4618      	mov	r0, r3
 8006520:	370c      	adds	r7, #12
 8006522:	46bd      	mov	sp, r7
 8006524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006528:	4770      	bx	lr

0800652a <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b082      	sub	sp, #8
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006538:	b2db      	uxtb	r3, r3
 800653a:	2b03      	cmp	r3, #3
 800653c:	d110      	bne.n	8006560 <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006544:	2b00      	cmp	r3, #0
 8006546:	d00b      	beq.n	8006560 <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800654e:	69db      	ldr	r3, [r3, #28]
 8006550:	2b00      	cmp	r3, #0
 8006552:	d005      	beq.n	8006560 <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800655a:	69db      	ldr	r3, [r3, #28]
 800655c:	6878      	ldr	r0, [r7, #4]
 800655e:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 8006560:	2300      	movs	r3, #0
}
 8006562:	4618      	mov	r0, r3
 8006564:	3708      	adds	r7, #8
 8006566:	46bd      	mov	sp, r7
 8006568:	bd80      	pop	{r7, pc}

0800656a <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 800656a:	b580      	push	{r7, lr}
 800656c:	b082      	sub	sp, #8
 800656e:	af00      	add	r7, sp, #0
 8006570:	6078      	str	r0, [r7, #4]
 8006572:	460b      	mov	r3, r1
 8006574:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	32ae      	adds	r2, #174	; 0xae
 8006580:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006584:	2b00      	cmp	r3, #0
 8006586:	d101      	bne.n	800658c <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006588:	2303      	movs	r3, #3
 800658a:	e01c      	b.n	80065c6 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006592:	b2db      	uxtb	r3, r3
 8006594:	2b03      	cmp	r3, #3
 8006596:	d115      	bne.n	80065c4 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006598:	687b      	ldr	r3, [r7, #4]
 800659a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	32ae      	adds	r2, #174	; 0xae
 80065a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065a6:	6a1b      	ldr	r3, [r3, #32]
 80065a8:	2b00      	cmp	r3, #0
 80065aa:	d00b      	beq.n	80065c4 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	32ae      	adds	r2, #174	; 0xae
 80065b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ba:	6a1b      	ldr	r3, [r3, #32]
 80065bc:	78fa      	ldrb	r2, [r7, #3]
 80065be:	4611      	mov	r1, r2
 80065c0:	6878      	ldr	r0, [r7, #4]
 80065c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80065c4:	2300      	movs	r3, #0
}
 80065c6:	4618      	mov	r0, r3
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}

080065ce <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 80065ce:	b580      	push	{r7, lr}
 80065d0:	b082      	sub	sp, #8
 80065d2:	af00      	add	r7, sp, #0
 80065d4:	6078      	str	r0, [r7, #4]
 80065d6:	460b      	mov	r3, r1
 80065d8:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	32ae      	adds	r2, #174	; 0xae
 80065e4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065e8:	2b00      	cmp	r3, #0
 80065ea:	d101      	bne.n	80065f0 <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 80065ec:	2303      	movs	r3, #3
 80065ee:	e01c      	b.n	800662a <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f6:	b2db      	uxtb	r3, r3
 80065f8:	2b03      	cmp	r3, #3
 80065fa:	d115      	bne.n	8006628 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	32ae      	adds	r2, #174	; 0xae
 8006606:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800660a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800660c:	2b00      	cmp	r3, #0
 800660e:	d00b      	beq.n	8006628 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	32ae      	adds	r2, #174	; 0xae
 800661a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800661e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006620:	78fa      	ldrb	r2, [r7, #3]
 8006622:	4611      	mov	r1, r2
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006628:	2300      	movs	r3, #0
}
 800662a:	4618      	mov	r0, r3
 800662c:	3708      	adds	r7, #8
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}

08006632 <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 8006632:	b480      	push	{r7}
 8006634:	b083      	sub	sp, #12
 8006636:	af00      	add	r7, sp, #0
 8006638:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 800663a:	2300      	movs	r3, #0
}
 800663c:	4618      	mov	r0, r3
 800663e:	370c      	adds	r7, #12
 8006640:	46bd      	mov	sp, r7
 8006642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006646:	4770      	bx	lr

08006648 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 8006648:	b580      	push	{r7, lr}
 800664a:	b084      	sub	sp, #16
 800664c:	af00      	add	r7, sp, #0
 800664e:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 8006650:	2300      	movs	r3, #0
 8006652:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2201      	movs	r2, #1
 8006658:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006662:	2b00      	cmp	r3, #0
 8006664:	d00e      	beq.n	8006684 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 800666c:	685b      	ldr	r3, [r3, #4]
 800666e:	687a      	ldr	r2, [r7, #4]
 8006670:	6852      	ldr	r2, [r2, #4]
 8006672:	b2d2      	uxtb	r2, r2
 8006674:	4611      	mov	r1, r2
 8006676:	6878      	ldr	r0, [r7, #4]
 8006678:	4798      	blx	r3
 800667a:	4603      	mov	r3, r0
 800667c:	2b00      	cmp	r3, #0
 800667e:	d001      	beq.n	8006684 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006680:	2303      	movs	r3, #3
 8006682:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006684:	7bfb      	ldrb	r3, [r7, #15]
}
 8006686:	4618      	mov	r0, r3
 8006688:	3710      	adds	r7, #16
 800668a:	46bd      	mov	sp, r7
 800668c:	bd80      	pop	{r7, pc}

0800668e <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 800668e:	b480      	push	{r7}
 8006690:	b083      	sub	sp, #12
 8006692:	af00      	add	r7, sp, #0
 8006694:	6078      	str	r0, [r7, #4]
 8006696:	460b      	mov	r3, r1
 8006698:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 800669a:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 800669c:	4618      	mov	r0, r3
 800669e:	370c      	adds	r7, #12
 80066a0:	46bd      	mov	sp, r7
 80066a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066a6:	4770      	bx	lr

080066a8 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 80066a8:	b480      	push	{r7}
 80066aa:	b083      	sub	sp, #12
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	460b      	mov	r3, r1
 80066b2:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 80066b4:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 80066b6:	4618      	mov	r0, r3
 80066b8:	370c      	adds	r7, #12
 80066ba:	46bd      	mov	sp, r7
 80066bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066c0:	4770      	bx	lr

080066c2 <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 80066c2:	b580      	push	{r7, lr}
 80066c4:	b086      	sub	sp, #24
 80066c6:	af00      	add	r7, sp, #0
 80066c8:	6078      	str	r0, [r7, #4]
 80066ca:	460b      	mov	r3, r1
 80066cc:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 80066da:	68fb      	ldr	r3, [r7, #12]
 80066dc:	885b      	ldrh	r3, [r3, #2]
 80066de:	b29a      	uxth	r2, r3
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	781b      	ldrb	r3, [r3, #0]
 80066e4:	b29b      	uxth	r3, r3
 80066e6:	429a      	cmp	r2, r3
 80066e8:	d920      	bls.n	800672c <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 80066ea:	68fb      	ldr	r3, [r7, #12]
 80066ec:	781b      	ldrb	r3, [r3, #0]
 80066ee:	b29b      	uxth	r3, r3
 80066f0:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 80066f2:	e013      	b.n	800671c <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 80066f4:	f107 030a 	add.w	r3, r7, #10
 80066f8:	4619      	mov	r1, r3
 80066fa:	6978      	ldr	r0, [r7, #20]
 80066fc:	f000 f81b 	bl	8006736 <USBD_GetNextDesc>
 8006700:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	785b      	ldrb	r3, [r3, #1]
 8006706:	2b05      	cmp	r3, #5
 8006708:	d108      	bne.n	800671c <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 800670a:	697b      	ldr	r3, [r7, #20]
 800670c:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 800670e:	693b      	ldr	r3, [r7, #16]
 8006710:	789b      	ldrb	r3, [r3, #2]
 8006712:	78fa      	ldrb	r2, [r7, #3]
 8006714:	429a      	cmp	r2, r3
 8006716:	d008      	beq.n	800672a <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006718:	2300      	movs	r3, #0
 800671a:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	885b      	ldrh	r3, [r3, #2]
 8006720:	b29a      	uxth	r2, r3
 8006722:	897b      	ldrh	r3, [r7, #10]
 8006724:	429a      	cmp	r2, r3
 8006726:	d8e5      	bhi.n	80066f4 <USBD_GetEpDesc+0x32>
 8006728:	e000      	b.n	800672c <USBD_GetEpDesc+0x6a>
          break;
 800672a:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 800672c:	693b      	ldr	r3, [r7, #16]
}
 800672e:	4618      	mov	r0, r3
 8006730:	3718      	adds	r7, #24
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006736:	b480      	push	{r7}
 8006738:	b085      	sub	sp, #20
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
 800673e:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006744:	683b      	ldr	r3, [r7, #0]
 8006746:	881a      	ldrh	r2, [r3, #0]
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	781b      	ldrb	r3, [r3, #0]
 800674c:	b29b      	uxth	r3, r3
 800674e:	4413      	add	r3, r2
 8006750:	b29a      	uxth	r2, r3
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	781b      	ldrb	r3, [r3, #0]
 800675a:	461a      	mov	r2, r3
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	4413      	add	r3, r2
 8006760:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006762:	68fb      	ldr	r3, [r7, #12]
}
 8006764:	4618      	mov	r0, r3
 8006766:	3714      	adds	r7, #20
 8006768:	46bd      	mov	sp, r7
 800676a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676e:	4770      	bx	lr

08006770 <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006770:	b480      	push	{r7}
 8006772:	b087      	sub	sp, #28
 8006774:	af00      	add	r7, sp, #0
 8006776:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 800677c:	697b      	ldr	r3, [r7, #20]
 800677e:	781b      	ldrb	r3, [r3, #0]
 8006780:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006782:	697b      	ldr	r3, [r7, #20]
 8006784:	3301      	adds	r3, #1
 8006786:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	781b      	ldrb	r3, [r3, #0]
 800678c:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 800678e:	8a3b      	ldrh	r3, [r7, #16]
 8006790:	021b      	lsls	r3, r3, #8
 8006792:	b21a      	sxth	r2, r3
 8006794:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006798:	4313      	orrs	r3, r2
 800679a:	b21b      	sxth	r3, r3
 800679c:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 800679e:	89fb      	ldrh	r3, [r7, #14]
}
 80067a0:	4618      	mov	r0, r3
 80067a2:	371c      	adds	r7, #28
 80067a4:	46bd      	mov	sp, r7
 80067a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067aa:	4770      	bx	lr

080067ac <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80067ac:	b580      	push	{r7, lr}
 80067ae:	b084      	sub	sp, #16
 80067b0:	af00      	add	r7, sp, #0
 80067b2:	6078      	str	r0, [r7, #4]
 80067b4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80067b6:	2300      	movs	r3, #0
 80067b8:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 80067ba:	683b      	ldr	r3, [r7, #0]
 80067bc:	781b      	ldrb	r3, [r3, #0]
 80067be:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80067c2:	2b40      	cmp	r3, #64	; 0x40
 80067c4:	d005      	beq.n	80067d2 <USBD_StdDevReq+0x26>
 80067c6:	2b40      	cmp	r3, #64	; 0x40
 80067c8:	d857      	bhi.n	800687a <USBD_StdDevReq+0xce>
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d00f      	beq.n	80067ee <USBD_StdDevReq+0x42>
 80067ce:	2b20      	cmp	r3, #32
 80067d0:	d153      	bne.n	800687a <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	32ae      	adds	r2, #174	; 0xae
 80067dc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	6839      	ldr	r1, [r7, #0]
 80067e4:	6878      	ldr	r0, [r7, #4]
 80067e6:	4798      	blx	r3
 80067e8:	4603      	mov	r3, r0
 80067ea:	73fb      	strb	r3, [r7, #15]
      break;
 80067ec:	e04a      	b.n	8006884 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80067ee:	683b      	ldr	r3, [r7, #0]
 80067f0:	785b      	ldrb	r3, [r3, #1]
 80067f2:	2b09      	cmp	r3, #9
 80067f4:	d83b      	bhi.n	800686e <USBD_StdDevReq+0xc2>
 80067f6:	a201      	add	r2, pc, #4	; (adr r2, 80067fc <USBD_StdDevReq+0x50>)
 80067f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067fc:	08006851 	.word	0x08006851
 8006800:	08006865 	.word	0x08006865
 8006804:	0800686f 	.word	0x0800686f
 8006808:	0800685b 	.word	0x0800685b
 800680c:	0800686f 	.word	0x0800686f
 8006810:	0800682f 	.word	0x0800682f
 8006814:	08006825 	.word	0x08006825
 8006818:	0800686f 	.word	0x0800686f
 800681c:	08006847 	.word	0x08006847
 8006820:	08006839 	.word	0x08006839
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006824:	6839      	ldr	r1, [r7, #0]
 8006826:	6878      	ldr	r0, [r7, #4]
 8006828:	f000 fa3c 	bl	8006ca4 <USBD_GetDescriptor>
          break;
 800682c:	e024      	b.n	8006878 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 800682e:	6839      	ldr	r1, [r7, #0]
 8006830:	6878      	ldr	r0, [r7, #4]
 8006832:	f000 fba1 	bl	8006f78 <USBD_SetAddress>
          break;
 8006836:	e01f      	b.n	8006878 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006838:	6839      	ldr	r1, [r7, #0]
 800683a:	6878      	ldr	r0, [r7, #4]
 800683c:	f000 fbe0 	bl	8007000 <USBD_SetConfig>
 8006840:	4603      	mov	r3, r0
 8006842:	73fb      	strb	r3, [r7, #15]
          break;
 8006844:	e018      	b.n	8006878 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006846:	6839      	ldr	r1, [r7, #0]
 8006848:	6878      	ldr	r0, [r7, #4]
 800684a:	f000 fc83 	bl	8007154 <USBD_GetConfig>
          break;
 800684e:	e013      	b.n	8006878 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006850:	6839      	ldr	r1, [r7, #0]
 8006852:	6878      	ldr	r0, [r7, #4]
 8006854:	f000 fcb4 	bl	80071c0 <USBD_GetStatus>
          break;
 8006858:	e00e      	b.n	8006878 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 800685a:	6839      	ldr	r1, [r7, #0]
 800685c:	6878      	ldr	r0, [r7, #4]
 800685e:	f000 fce3 	bl	8007228 <USBD_SetFeature>
          break;
 8006862:	e009      	b.n	8006878 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	6878      	ldr	r0, [r7, #4]
 8006868:	f000 fd07 	bl	800727a <USBD_ClrFeature>
          break;
 800686c:	e004      	b.n	8006878 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 800686e:	6839      	ldr	r1, [r7, #0]
 8006870:	6878      	ldr	r0, [r7, #4]
 8006872:	f000 fd5e 	bl	8007332 <USBD_CtlError>
          break;
 8006876:	bf00      	nop
      }
      break;
 8006878:	e004      	b.n	8006884 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 800687a:	6839      	ldr	r1, [r7, #0]
 800687c:	6878      	ldr	r0, [r7, #4]
 800687e:	f000 fd58 	bl	8007332 <USBD_CtlError>
      break;
 8006882:	bf00      	nop
  }

  return ret;
 8006884:	7bfb      	ldrb	r3, [r7, #15]
}
 8006886:	4618      	mov	r0, r3
 8006888:	3710      	adds	r7, #16
 800688a:	46bd      	mov	sp, r7
 800688c:	bd80      	pop	{r7, pc}
 800688e:	bf00      	nop

08006890 <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006890:	b580      	push	{r7, lr}
 8006892:	b084      	sub	sp, #16
 8006894:	af00      	add	r7, sp, #0
 8006896:	6078      	str	r0, [r7, #4]
 8006898:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800689a:	2300      	movs	r3, #0
 800689c:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800689e:	683b      	ldr	r3, [r7, #0]
 80068a0:	781b      	ldrb	r3, [r3, #0]
 80068a2:	f003 0360 	and.w	r3, r3, #96	; 0x60
 80068a6:	2b40      	cmp	r3, #64	; 0x40
 80068a8:	d005      	beq.n	80068b6 <USBD_StdItfReq+0x26>
 80068aa:	2b40      	cmp	r3, #64	; 0x40
 80068ac:	d852      	bhi.n	8006954 <USBD_StdItfReq+0xc4>
 80068ae:	2b00      	cmp	r3, #0
 80068b0:	d001      	beq.n	80068b6 <USBD_StdItfReq+0x26>
 80068b2:	2b20      	cmp	r3, #32
 80068b4:	d14e      	bne.n	8006954 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068bc:	b2db      	uxtb	r3, r3
 80068be:	3b01      	subs	r3, #1
 80068c0:	2b02      	cmp	r3, #2
 80068c2:	d840      	bhi.n	8006946 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80068c4:	683b      	ldr	r3, [r7, #0]
 80068c6:	889b      	ldrh	r3, [r3, #4]
 80068c8:	b2db      	uxtb	r3, r3
 80068ca:	2b01      	cmp	r3, #1
 80068cc:	d836      	bhi.n	800693c <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 80068ce:	683b      	ldr	r3, [r7, #0]
 80068d0:	889b      	ldrh	r3, [r3, #4]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	4619      	mov	r1, r3
 80068d6:	6878      	ldr	r0, [r7, #4]
 80068d8:	f7ff fed9 	bl	800668e <USBD_CoreFindIF>
 80068dc:	4603      	mov	r3, r0
 80068de:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80068e0:	7bbb      	ldrb	r3, [r7, #14]
 80068e2:	2bff      	cmp	r3, #255	; 0xff
 80068e4:	d01d      	beq.n	8006922 <USBD_StdItfReq+0x92>
 80068e6:	7bbb      	ldrb	r3, [r7, #14]
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d11a      	bne.n	8006922 <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 80068ec:	7bba      	ldrb	r2, [r7, #14]
 80068ee:	687b      	ldr	r3, [r7, #4]
 80068f0:	32ae      	adds	r2, #174	; 0xae
 80068f2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d00f      	beq.n	800691c <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 80068fc:	7bba      	ldrb	r2, [r7, #14]
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006904:	7bba      	ldrb	r2, [r7, #14]
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	32ae      	adds	r2, #174	; 0xae
 800690a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800690e:	689b      	ldr	r3, [r3, #8]
 8006910:	6839      	ldr	r1, [r7, #0]
 8006912:	6878      	ldr	r0, [r7, #4]
 8006914:	4798      	blx	r3
 8006916:	4603      	mov	r3, r0
 8006918:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 800691a:	e004      	b.n	8006926 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 800691c:	2303      	movs	r3, #3
 800691e:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006920:	e001      	b.n	8006926 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006922:	2303      	movs	r3, #3
 8006924:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006926:	683b      	ldr	r3, [r7, #0]
 8006928:	88db      	ldrh	r3, [r3, #6]
 800692a:	2b00      	cmp	r3, #0
 800692c:	d110      	bne.n	8006950 <USBD_StdItfReq+0xc0>
 800692e:	7bfb      	ldrb	r3, [r7, #15]
 8006930:	2b00      	cmp	r3, #0
 8006932:	d10d      	bne.n	8006950 <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006934:	6878      	ldr	r0, [r7, #4]
 8006936:	f000 fdaa 	bl	800748e <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 800693a:	e009      	b.n	8006950 <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 800693c:	6839      	ldr	r1, [r7, #0]
 800693e:	6878      	ldr	r0, [r7, #4]
 8006940:	f000 fcf7 	bl	8007332 <USBD_CtlError>
          break;
 8006944:	e004      	b.n	8006950 <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006946:	6839      	ldr	r1, [r7, #0]
 8006948:	6878      	ldr	r0, [r7, #4]
 800694a:	f000 fcf2 	bl	8007332 <USBD_CtlError>
          break;
 800694e:	e000      	b.n	8006952 <USBD_StdItfReq+0xc2>
          break;
 8006950:	bf00      	nop
      }
      break;
 8006952:	e004      	b.n	800695e <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006954:	6839      	ldr	r1, [r7, #0]
 8006956:	6878      	ldr	r0, [r7, #4]
 8006958:	f000 fceb 	bl	8007332 <USBD_CtlError>
      break;
 800695c:	bf00      	nop
  }

  return ret;
 800695e:	7bfb      	ldrb	r3, [r7, #15]
}
 8006960:	4618      	mov	r0, r3
 8006962:	3710      	adds	r7, #16
 8006964:	46bd      	mov	sp, r7
 8006966:	bd80      	pop	{r7, pc}

08006968 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006968:	b580      	push	{r7, lr}
 800696a:	b084      	sub	sp, #16
 800696c:	af00      	add	r7, sp, #0
 800696e:	6078      	str	r0, [r7, #4]
 8006970:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006972:	2300      	movs	r3, #0
 8006974:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006976:	683b      	ldr	r3, [r7, #0]
 8006978:	889b      	ldrh	r3, [r3, #4]
 800697a:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 800697c:	683b      	ldr	r3, [r7, #0]
 800697e:	781b      	ldrb	r3, [r3, #0]
 8006980:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006984:	2b40      	cmp	r3, #64	; 0x40
 8006986:	d007      	beq.n	8006998 <USBD_StdEPReq+0x30>
 8006988:	2b40      	cmp	r3, #64	; 0x40
 800698a:	f200 817f 	bhi.w	8006c8c <USBD_StdEPReq+0x324>
 800698e:	2b00      	cmp	r3, #0
 8006990:	d02a      	beq.n	80069e8 <USBD_StdEPReq+0x80>
 8006992:	2b20      	cmp	r3, #32
 8006994:	f040 817a 	bne.w	8006c8c <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006998:	7bbb      	ldrb	r3, [r7, #14]
 800699a:	4619      	mov	r1, r3
 800699c:	6878      	ldr	r0, [r7, #4]
 800699e:	f7ff fe83 	bl	80066a8 <USBD_CoreFindEP>
 80069a2:	4603      	mov	r3, r0
 80069a4:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80069a6:	7b7b      	ldrb	r3, [r7, #13]
 80069a8:	2bff      	cmp	r3, #255	; 0xff
 80069aa:	f000 8174 	beq.w	8006c96 <USBD_StdEPReq+0x32e>
 80069ae:	7b7b      	ldrb	r3, [r7, #13]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	f040 8170 	bne.w	8006c96 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 80069b6:	7b7a      	ldrb	r2, [r7, #13]
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 80069be:	7b7a      	ldrb	r2, [r7, #13]
 80069c0:	687b      	ldr	r3, [r7, #4]
 80069c2:	32ae      	adds	r2, #174	; 0xae
 80069c4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069c8:	689b      	ldr	r3, [r3, #8]
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 8163 	beq.w	8006c96 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 80069d0:	7b7a      	ldrb	r2, [r7, #13]
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	32ae      	adds	r2, #174	; 0xae
 80069d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069da:	689b      	ldr	r3, [r3, #8]
 80069dc:	6839      	ldr	r1, [r7, #0]
 80069de:	6878      	ldr	r0, [r7, #4]
 80069e0:	4798      	blx	r3
 80069e2:	4603      	mov	r3, r0
 80069e4:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80069e6:	e156      	b.n	8006c96 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	785b      	ldrb	r3, [r3, #1]
 80069ec:	2b03      	cmp	r3, #3
 80069ee:	d008      	beq.n	8006a02 <USBD_StdEPReq+0x9a>
 80069f0:	2b03      	cmp	r3, #3
 80069f2:	f300 8145 	bgt.w	8006c80 <USBD_StdEPReq+0x318>
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	f000 809b 	beq.w	8006b32 <USBD_StdEPReq+0x1ca>
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d03c      	beq.n	8006a7a <USBD_StdEPReq+0x112>
 8006a00:	e13e      	b.n	8006c80 <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a08:	b2db      	uxtb	r3, r3
 8006a0a:	2b02      	cmp	r3, #2
 8006a0c:	d002      	beq.n	8006a14 <USBD_StdEPReq+0xac>
 8006a0e:	2b03      	cmp	r3, #3
 8006a10:	d016      	beq.n	8006a40 <USBD_StdEPReq+0xd8>
 8006a12:	e02c      	b.n	8006a6e <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a14:	7bbb      	ldrb	r3, [r7, #14]
 8006a16:	2b00      	cmp	r3, #0
 8006a18:	d00d      	beq.n	8006a36 <USBD_StdEPReq+0xce>
 8006a1a:	7bbb      	ldrb	r3, [r7, #14]
 8006a1c:	2b80      	cmp	r3, #128	; 0x80
 8006a1e:	d00a      	beq.n	8006a36 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a20:	7bbb      	ldrb	r3, [r7, #14]
 8006a22:	4619      	mov	r1, r3
 8006a24:	6878      	ldr	r0, [r7, #4]
 8006a26:	f001 f877 	bl	8007b18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006a2a:	2180      	movs	r1, #128	; 0x80
 8006a2c:	6878      	ldr	r0, [r7, #4]
 8006a2e:	f001 f873 	bl	8007b18 <USBD_LL_StallEP>
 8006a32:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006a34:	e020      	b.n	8006a78 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006a36:	6839      	ldr	r1, [r7, #0]
 8006a38:	6878      	ldr	r0, [r7, #4]
 8006a3a:	f000 fc7a 	bl	8007332 <USBD_CtlError>
              break;
 8006a3e:	e01b      	b.n	8006a78 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006a40:	683b      	ldr	r3, [r7, #0]
 8006a42:	885b      	ldrh	r3, [r3, #2]
 8006a44:	2b00      	cmp	r3, #0
 8006a46:	d10e      	bne.n	8006a66 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006a48:	7bbb      	ldrb	r3, [r7, #14]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d00b      	beq.n	8006a66 <USBD_StdEPReq+0xfe>
 8006a4e:	7bbb      	ldrb	r3, [r7, #14]
 8006a50:	2b80      	cmp	r3, #128	; 0x80
 8006a52:	d008      	beq.n	8006a66 <USBD_StdEPReq+0xfe>
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	88db      	ldrh	r3, [r3, #6]
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d104      	bne.n	8006a66 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a5c:	7bbb      	ldrb	r3, [r7, #14]
 8006a5e:	4619      	mov	r1, r3
 8006a60:	6878      	ldr	r0, [r7, #4]
 8006a62:	f001 f859 	bl	8007b18 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006a66:	6878      	ldr	r0, [r7, #4]
 8006a68:	f000 fd11 	bl	800748e <USBD_CtlSendStatus>

              break;
 8006a6c:	e004      	b.n	8006a78 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006a6e:	6839      	ldr	r1, [r7, #0]
 8006a70:	6878      	ldr	r0, [r7, #4]
 8006a72:	f000 fc5e 	bl	8007332 <USBD_CtlError>
              break;
 8006a76:	bf00      	nop
          }
          break;
 8006a78:	e107      	b.n	8006c8a <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006a7a:	687b      	ldr	r3, [r7, #4]
 8006a7c:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	2b02      	cmp	r3, #2
 8006a84:	d002      	beq.n	8006a8c <USBD_StdEPReq+0x124>
 8006a86:	2b03      	cmp	r3, #3
 8006a88:	d016      	beq.n	8006ab8 <USBD_StdEPReq+0x150>
 8006a8a:	e04b      	b.n	8006b24 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006a8c:	7bbb      	ldrb	r3, [r7, #14]
 8006a8e:	2b00      	cmp	r3, #0
 8006a90:	d00d      	beq.n	8006aae <USBD_StdEPReq+0x146>
 8006a92:	7bbb      	ldrb	r3, [r7, #14]
 8006a94:	2b80      	cmp	r3, #128	; 0x80
 8006a96:	d00a      	beq.n	8006aae <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006a98:	7bbb      	ldrb	r3, [r7, #14]
 8006a9a:	4619      	mov	r1, r3
 8006a9c:	6878      	ldr	r0, [r7, #4]
 8006a9e:	f001 f83b 	bl	8007b18 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006aa2:	2180      	movs	r1, #128	; 0x80
 8006aa4:	6878      	ldr	r0, [r7, #4]
 8006aa6:	f001 f837 	bl	8007b18 <USBD_LL_StallEP>
 8006aaa:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006aac:	e040      	b.n	8006b30 <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006aae:	6839      	ldr	r1, [r7, #0]
 8006ab0:	6878      	ldr	r0, [r7, #4]
 8006ab2:	f000 fc3e 	bl	8007332 <USBD_CtlError>
              break;
 8006ab6:	e03b      	b.n	8006b30 <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ab8:	683b      	ldr	r3, [r7, #0]
 8006aba:	885b      	ldrh	r3, [r3, #2]
 8006abc:	2b00      	cmp	r3, #0
 8006abe:	d136      	bne.n	8006b2e <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006ac0:	7bbb      	ldrb	r3, [r7, #14]
 8006ac2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d004      	beq.n	8006ad4 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006aca:	7bbb      	ldrb	r3, [r7, #14]
 8006acc:	4619      	mov	r1, r3
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f001 f841 	bl	8007b56 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006ad4:	6878      	ldr	r0, [r7, #4]
 8006ad6:	f000 fcda 	bl	800748e <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006ada:	7bbb      	ldrb	r3, [r7, #14]
 8006adc:	4619      	mov	r1, r3
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f7ff fde2 	bl	80066a8 <USBD_CoreFindEP>
 8006ae4:	4603      	mov	r3, r0
 8006ae6:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006ae8:	7b7b      	ldrb	r3, [r7, #13]
 8006aea:	2bff      	cmp	r3, #255	; 0xff
 8006aec:	d01f      	beq.n	8006b2e <USBD_StdEPReq+0x1c6>
 8006aee:	7b7b      	ldrb	r3, [r7, #13]
 8006af0:	2b00      	cmp	r3, #0
 8006af2:	d11c      	bne.n	8006b2e <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006af4:	7b7a      	ldrb	r2, [r7, #13]
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006afc:	7b7a      	ldrb	r2, [r7, #13]
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	32ae      	adds	r2, #174	; 0xae
 8006b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b06:	689b      	ldr	r3, [r3, #8]
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d010      	beq.n	8006b2e <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006b0c:	7b7a      	ldrb	r2, [r7, #13]
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	32ae      	adds	r2, #174	; 0xae
 8006b12:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b16:	689b      	ldr	r3, [r3, #8]
 8006b18:	6839      	ldr	r1, [r7, #0]
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	4798      	blx	r3
 8006b1e:	4603      	mov	r3, r0
 8006b20:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006b22:	e004      	b.n	8006b2e <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006b24:	6839      	ldr	r1, [r7, #0]
 8006b26:	6878      	ldr	r0, [r7, #4]
 8006b28:	f000 fc03 	bl	8007332 <USBD_CtlError>
              break;
 8006b2c:	e000      	b.n	8006b30 <USBD_StdEPReq+0x1c8>
              break;
 8006b2e:	bf00      	nop
          }
          break;
 8006b30:	e0ab      	b.n	8006c8a <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006b38:	b2db      	uxtb	r3, r3
 8006b3a:	2b02      	cmp	r3, #2
 8006b3c:	d002      	beq.n	8006b44 <USBD_StdEPReq+0x1dc>
 8006b3e:	2b03      	cmp	r3, #3
 8006b40:	d032      	beq.n	8006ba8 <USBD_StdEPReq+0x240>
 8006b42:	e097      	b.n	8006c74 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006b44:	7bbb      	ldrb	r3, [r7, #14]
 8006b46:	2b00      	cmp	r3, #0
 8006b48:	d007      	beq.n	8006b5a <USBD_StdEPReq+0x1f2>
 8006b4a:	7bbb      	ldrb	r3, [r7, #14]
 8006b4c:	2b80      	cmp	r3, #128	; 0x80
 8006b4e:	d004      	beq.n	8006b5a <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006b50:	6839      	ldr	r1, [r7, #0]
 8006b52:	6878      	ldr	r0, [r7, #4]
 8006b54:	f000 fbed 	bl	8007332 <USBD_CtlError>
                break;
 8006b58:	e091      	b.n	8006c7e <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b5a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	da0b      	bge.n	8006b7a <USBD_StdEPReq+0x212>
 8006b62:	7bbb      	ldrb	r3, [r7, #14]
 8006b64:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006b68:	4613      	mov	r3, r2
 8006b6a:	009b      	lsls	r3, r3, #2
 8006b6c:	4413      	add	r3, r2
 8006b6e:	009b      	lsls	r3, r3, #2
 8006b70:	3310      	adds	r3, #16
 8006b72:	687a      	ldr	r2, [r7, #4]
 8006b74:	4413      	add	r3, r2
 8006b76:	3304      	adds	r3, #4
 8006b78:	e00b      	b.n	8006b92 <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006b7a:	7bbb      	ldrb	r3, [r7, #14]
 8006b7c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006b80:	4613      	mov	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4413      	add	r3, r2
 8006b86:	009b      	lsls	r3, r3, #2
 8006b88:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006b8c:	687a      	ldr	r2, [r7, #4]
 8006b8e:	4413      	add	r3, r2
 8006b90:	3304      	adds	r3, #4
 8006b92:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	2200      	movs	r2, #0
 8006b98:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006b9a:	68bb      	ldr	r3, [r7, #8]
 8006b9c:	2202      	movs	r2, #2
 8006b9e:	4619      	mov	r1, r3
 8006ba0:	6878      	ldr	r0, [r7, #4]
 8006ba2:	f000 fc37 	bl	8007414 <USBD_CtlSendData>
              break;
 8006ba6:	e06a      	b.n	8006c7e <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006ba8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	da11      	bge.n	8006bd4 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006bb0:	7bbb      	ldrb	r3, [r7, #14]
 8006bb2:	f003 020f 	and.w	r2, r3, #15
 8006bb6:	6879      	ldr	r1, [r7, #4]
 8006bb8:	4613      	mov	r3, r2
 8006bba:	009b      	lsls	r3, r3, #2
 8006bbc:	4413      	add	r3, r2
 8006bbe:	009b      	lsls	r3, r3, #2
 8006bc0:	440b      	add	r3, r1
 8006bc2:	3324      	adds	r3, #36	; 0x24
 8006bc4:	881b      	ldrh	r3, [r3, #0]
 8006bc6:	2b00      	cmp	r3, #0
 8006bc8:	d117      	bne.n	8006bfa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fbb0 	bl	8007332 <USBD_CtlError>
                  break;
 8006bd2:	e054      	b.n	8006c7e <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006bd4:	7bbb      	ldrb	r3, [r7, #14]
 8006bd6:	f003 020f 	and.w	r2, r3, #15
 8006bda:	6879      	ldr	r1, [r7, #4]
 8006bdc:	4613      	mov	r3, r2
 8006bde:	009b      	lsls	r3, r3, #2
 8006be0:	4413      	add	r3, r2
 8006be2:	009b      	lsls	r3, r3, #2
 8006be4:	440b      	add	r3, r1
 8006be6:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006bea:	881b      	ldrh	r3, [r3, #0]
 8006bec:	2b00      	cmp	r3, #0
 8006bee:	d104      	bne.n	8006bfa <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006bf0:	6839      	ldr	r1, [r7, #0]
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f000 fb9d 	bl	8007332 <USBD_CtlError>
                  break;
 8006bf8:	e041      	b.n	8006c7e <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006bfa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006bfe:	2b00      	cmp	r3, #0
 8006c00:	da0b      	bge.n	8006c1a <USBD_StdEPReq+0x2b2>
 8006c02:	7bbb      	ldrb	r3, [r7, #14]
 8006c04:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006c08:	4613      	mov	r3, r2
 8006c0a:	009b      	lsls	r3, r3, #2
 8006c0c:	4413      	add	r3, r2
 8006c0e:	009b      	lsls	r3, r3, #2
 8006c10:	3310      	adds	r3, #16
 8006c12:	687a      	ldr	r2, [r7, #4]
 8006c14:	4413      	add	r3, r2
 8006c16:	3304      	adds	r3, #4
 8006c18:	e00b      	b.n	8006c32 <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006c1a:	7bbb      	ldrb	r3, [r7, #14]
 8006c1c:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006c20:	4613      	mov	r3, r2
 8006c22:	009b      	lsls	r3, r3, #2
 8006c24:	4413      	add	r3, r2
 8006c26:	009b      	lsls	r3, r3, #2
 8006c28:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006c2c:	687a      	ldr	r2, [r7, #4]
 8006c2e:	4413      	add	r3, r2
 8006c30:	3304      	adds	r3, #4
 8006c32:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006c34:	7bbb      	ldrb	r3, [r7, #14]
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d002      	beq.n	8006c40 <USBD_StdEPReq+0x2d8>
 8006c3a:	7bbb      	ldrb	r3, [r7, #14]
 8006c3c:	2b80      	cmp	r3, #128	; 0x80
 8006c3e:	d103      	bne.n	8006c48 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006c40:	68bb      	ldr	r3, [r7, #8]
 8006c42:	2200      	movs	r2, #0
 8006c44:	601a      	str	r2, [r3, #0]
 8006c46:	e00e      	b.n	8006c66 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006c48:	7bbb      	ldrb	r3, [r7, #14]
 8006c4a:	4619      	mov	r1, r3
 8006c4c:	6878      	ldr	r0, [r7, #4]
 8006c4e:	f000 ffa1 	bl	8007b94 <USBD_LL_IsStallEP>
 8006c52:	4603      	mov	r3, r0
 8006c54:	2b00      	cmp	r3, #0
 8006c56:	d003      	beq.n	8006c60 <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006c58:	68bb      	ldr	r3, [r7, #8]
 8006c5a:	2201      	movs	r2, #1
 8006c5c:	601a      	str	r2, [r3, #0]
 8006c5e:	e002      	b.n	8006c66 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006c60:	68bb      	ldr	r3, [r7, #8]
 8006c62:	2200      	movs	r2, #0
 8006c64:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006c66:	68bb      	ldr	r3, [r7, #8]
 8006c68:	2202      	movs	r2, #2
 8006c6a:	4619      	mov	r1, r3
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fbd1 	bl	8007414 <USBD_CtlSendData>
              break;
 8006c72:	e004      	b.n	8006c7e <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8006c74:	6839      	ldr	r1, [r7, #0]
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fb5b 	bl	8007332 <USBD_CtlError>
              break;
 8006c7c:	bf00      	nop
          }
          break;
 8006c7e:	e004      	b.n	8006c8a <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 8006c80:	6839      	ldr	r1, [r7, #0]
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 fb55 	bl	8007332 <USBD_CtlError>
          break;
 8006c88:	bf00      	nop
      }
      break;
 8006c8a:	e005      	b.n	8006c98 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8006c8c:	6839      	ldr	r1, [r7, #0]
 8006c8e:	6878      	ldr	r0, [r7, #4]
 8006c90:	f000 fb4f 	bl	8007332 <USBD_CtlError>
      break;
 8006c94:	e000      	b.n	8006c98 <USBD_StdEPReq+0x330>
      break;
 8006c96:	bf00      	nop
  }

  return ret;
 8006c98:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c9a:	4618      	mov	r0, r3
 8006c9c:	3710      	adds	r7, #16
 8006c9e:	46bd      	mov	sp, r7
 8006ca0:	bd80      	pop	{r7, pc}
	...

08006ca4 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006ca4:	b580      	push	{r7, lr}
 8006ca6:	b084      	sub	sp, #16
 8006ca8:	af00      	add	r7, sp, #0
 8006caa:	6078      	str	r0, [r7, #4]
 8006cac:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006cae:	2300      	movs	r3, #0
 8006cb0:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 8006cb2:	2300      	movs	r3, #0
 8006cb4:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8006cb6:	2300      	movs	r3, #0
 8006cb8:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8006cba:	683b      	ldr	r3, [r7, #0]
 8006cbc:	885b      	ldrh	r3, [r3, #2]
 8006cbe:	0a1b      	lsrs	r3, r3, #8
 8006cc0:	b29b      	uxth	r3, r3
 8006cc2:	3b01      	subs	r3, #1
 8006cc4:	2b06      	cmp	r3, #6
 8006cc6:	f200 8128 	bhi.w	8006f1a <USBD_GetDescriptor+0x276>
 8006cca:	a201      	add	r2, pc, #4	; (adr r2, 8006cd0 <USBD_GetDescriptor+0x2c>)
 8006ccc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006cd0:	08006ced 	.word	0x08006ced
 8006cd4:	08006d05 	.word	0x08006d05
 8006cd8:	08006d45 	.word	0x08006d45
 8006cdc:	08006f1b 	.word	0x08006f1b
 8006ce0:	08006f1b 	.word	0x08006f1b
 8006ce4:	08006ebb 	.word	0x08006ebb
 8006ce8:	08006ee7 	.word	0x08006ee7
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	687a      	ldr	r2, [r7, #4]
 8006cf6:	7c12      	ldrb	r2, [r2, #16]
 8006cf8:	f107 0108 	add.w	r1, r7, #8
 8006cfc:	4610      	mov	r0, r2
 8006cfe:	4798      	blx	r3
 8006d00:	60f8      	str	r0, [r7, #12]
      break;
 8006d02:	e112      	b.n	8006f2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006d04:	687b      	ldr	r3, [r7, #4]
 8006d06:	7c1b      	ldrb	r3, [r3, #16]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d10d      	bne.n	8006d28 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d14:	f107 0208 	add.w	r2, r7, #8
 8006d18:	4610      	mov	r0, r2
 8006d1a:	4798      	blx	r3
 8006d1c:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	3301      	adds	r3, #1
 8006d22:	2202      	movs	r2, #2
 8006d24:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8006d26:	e100      	b.n	8006f2a <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006d2e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d30:	f107 0208 	add.w	r2, r7, #8
 8006d34:	4610      	mov	r0, r2
 8006d36:	4798      	blx	r3
 8006d38:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 8006d3a:	68fb      	ldr	r3, [r7, #12]
 8006d3c:	3301      	adds	r3, #1
 8006d3e:	2202      	movs	r2, #2
 8006d40:	701a      	strb	r2, [r3, #0]
      break;
 8006d42:	e0f2      	b.n	8006f2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8006d44:	683b      	ldr	r3, [r7, #0]
 8006d46:	885b      	ldrh	r3, [r3, #2]
 8006d48:	b2db      	uxtb	r3, r3
 8006d4a:	2b05      	cmp	r3, #5
 8006d4c:	f200 80ac 	bhi.w	8006ea8 <USBD_GetDescriptor+0x204>
 8006d50:	a201      	add	r2, pc, #4	; (adr r2, 8006d58 <USBD_GetDescriptor+0xb4>)
 8006d52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d56:	bf00      	nop
 8006d58:	08006d71 	.word	0x08006d71
 8006d5c:	08006da5 	.word	0x08006da5
 8006d60:	08006dd9 	.word	0x08006dd9
 8006d64:	08006e0d 	.word	0x08006e0d
 8006d68:	08006e41 	.word	0x08006e41
 8006d6c:	08006e75 	.word	0x08006e75
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	2b00      	cmp	r3, #0
 8006d7a:	d00b      	beq.n	8006d94 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006d82:	685b      	ldr	r3, [r3, #4]
 8006d84:	687a      	ldr	r2, [r7, #4]
 8006d86:	7c12      	ldrb	r2, [r2, #16]
 8006d88:	f107 0108 	add.w	r1, r7, #8
 8006d8c:	4610      	mov	r0, r2
 8006d8e:	4798      	blx	r3
 8006d90:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006d92:	e091      	b.n	8006eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006d94:	6839      	ldr	r1, [r7, #0]
 8006d96:	6878      	ldr	r0, [r7, #4]
 8006d98:	f000 facb 	bl	8007332 <USBD_CtlError>
            err++;
 8006d9c:	7afb      	ldrb	r3, [r7, #11]
 8006d9e:	3301      	adds	r3, #1
 8006da0:	72fb      	strb	r3, [r7, #11]
          break;
 8006da2:	e089      	b.n	8006eb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006daa:	689b      	ldr	r3, [r3, #8]
 8006dac:	2b00      	cmp	r3, #0
 8006dae:	d00b      	beq.n	8006dc8 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006db6:	689b      	ldr	r3, [r3, #8]
 8006db8:	687a      	ldr	r2, [r7, #4]
 8006dba:	7c12      	ldrb	r2, [r2, #16]
 8006dbc:	f107 0108 	add.w	r1, r7, #8
 8006dc0:	4610      	mov	r0, r2
 8006dc2:	4798      	blx	r3
 8006dc4:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dc6:	e077      	b.n	8006eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dc8:	6839      	ldr	r1, [r7, #0]
 8006dca:	6878      	ldr	r0, [r7, #4]
 8006dcc:	f000 fab1 	bl	8007332 <USBD_CtlError>
            err++;
 8006dd0:	7afb      	ldrb	r3, [r7, #11]
 8006dd2:	3301      	adds	r3, #1
 8006dd4:	72fb      	strb	r3, [r7, #11]
          break;
 8006dd6:	e06f      	b.n	8006eb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dde:	68db      	ldr	r3, [r3, #12]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d00b      	beq.n	8006dfc <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006dea:	68db      	ldr	r3, [r3, #12]
 8006dec:	687a      	ldr	r2, [r7, #4]
 8006dee:	7c12      	ldrb	r2, [r2, #16]
 8006df0:	f107 0108 	add.w	r1, r7, #8
 8006df4:	4610      	mov	r0, r2
 8006df6:	4798      	blx	r3
 8006df8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006dfa:	e05d      	b.n	8006eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006dfc:	6839      	ldr	r1, [r7, #0]
 8006dfe:	6878      	ldr	r0, [r7, #4]
 8006e00:	f000 fa97 	bl	8007332 <USBD_CtlError>
            err++;
 8006e04:	7afb      	ldrb	r3, [r7, #11]
 8006e06:	3301      	adds	r3, #1
 8006e08:	72fb      	strb	r3, [r7, #11]
          break;
 8006e0a:	e055      	b.n	8006eb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8006e0c:	687b      	ldr	r3, [r7, #4]
 8006e0e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e12:	691b      	ldr	r3, [r3, #16]
 8006e14:	2b00      	cmp	r3, #0
 8006e16:	d00b      	beq.n	8006e30 <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e1e:	691b      	ldr	r3, [r3, #16]
 8006e20:	687a      	ldr	r2, [r7, #4]
 8006e22:	7c12      	ldrb	r2, [r2, #16]
 8006e24:	f107 0108 	add.w	r1, r7, #8
 8006e28:	4610      	mov	r0, r2
 8006e2a:	4798      	blx	r3
 8006e2c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e2e:	e043      	b.n	8006eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e30:	6839      	ldr	r1, [r7, #0]
 8006e32:	6878      	ldr	r0, [r7, #4]
 8006e34:	f000 fa7d 	bl	8007332 <USBD_CtlError>
            err++;
 8006e38:	7afb      	ldrb	r3, [r7, #11]
 8006e3a:	3301      	adds	r3, #1
 8006e3c:	72fb      	strb	r3, [r7, #11]
          break;
 8006e3e:	e03b      	b.n	8006eb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e46:	695b      	ldr	r3, [r3, #20]
 8006e48:	2b00      	cmp	r3, #0
 8006e4a:	d00b      	beq.n	8006e64 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 8006e4c:	687b      	ldr	r3, [r7, #4]
 8006e4e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e52:	695b      	ldr	r3, [r3, #20]
 8006e54:	687a      	ldr	r2, [r7, #4]
 8006e56:	7c12      	ldrb	r2, [r2, #16]
 8006e58:	f107 0108 	add.w	r1, r7, #8
 8006e5c:	4610      	mov	r0, r2
 8006e5e:	4798      	blx	r3
 8006e60:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e62:	e029      	b.n	8006eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e64:	6839      	ldr	r1, [r7, #0]
 8006e66:	6878      	ldr	r0, [r7, #4]
 8006e68:	f000 fa63 	bl	8007332 <USBD_CtlError>
            err++;
 8006e6c:	7afb      	ldrb	r3, [r7, #11]
 8006e6e:	3301      	adds	r3, #1
 8006e70:	72fb      	strb	r3, [r7, #11]
          break;
 8006e72:	e021      	b.n	8006eb8 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8006e74:	687b      	ldr	r3, [r7, #4]
 8006e76:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e7a:	699b      	ldr	r3, [r3, #24]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d00b      	beq.n	8006e98 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8006e86:	699b      	ldr	r3, [r3, #24]
 8006e88:	687a      	ldr	r2, [r7, #4]
 8006e8a:	7c12      	ldrb	r2, [r2, #16]
 8006e8c:	f107 0108 	add.w	r1, r7, #8
 8006e90:	4610      	mov	r0, r2
 8006e92:	4798      	blx	r3
 8006e94:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8006e96:	e00f      	b.n	8006eb8 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8006e98:	6839      	ldr	r1, [r7, #0]
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 fa49 	bl	8007332 <USBD_CtlError>
            err++;
 8006ea0:	7afb      	ldrb	r3, [r7, #11]
 8006ea2:	3301      	adds	r3, #1
 8006ea4:	72fb      	strb	r3, [r7, #11]
          break;
 8006ea6:	e007      	b.n	8006eb8 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8006ea8:	6839      	ldr	r1, [r7, #0]
 8006eaa:	6878      	ldr	r0, [r7, #4]
 8006eac:	f000 fa41 	bl	8007332 <USBD_CtlError>
          err++;
 8006eb0:	7afb      	ldrb	r3, [r7, #11]
 8006eb2:	3301      	adds	r3, #1
 8006eb4:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8006eb6:	bf00      	nop
      }
      break;
 8006eb8:	e037      	b.n	8006f2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	7c1b      	ldrb	r3, [r3, #16]
 8006ebe:	2b00      	cmp	r3, #0
 8006ec0:	d109      	bne.n	8006ed6 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ec8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006eca:	f107 0208 	add.w	r2, r7, #8
 8006ece:	4610      	mov	r0, r2
 8006ed0:	4798      	blx	r3
 8006ed2:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006ed4:	e029      	b.n	8006f2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006ed6:	6839      	ldr	r1, [r7, #0]
 8006ed8:	6878      	ldr	r0, [r7, #4]
 8006eda:	f000 fa2a 	bl	8007332 <USBD_CtlError>
        err++;
 8006ede:	7afb      	ldrb	r3, [r7, #11]
 8006ee0:	3301      	adds	r3, #1
 8006ee2:	72fb      	strb	r3, [r7, #11]
      break;
 8006ee4:	e021      	b.n	8006f2a <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	7c1b      	ldrb	r3, [r3, #16]
 8006eea:	2b00      	cmp	r3, #0
 8006eec:	d10d      	bne.n	8006f0a <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ef6:	f107 0208 	add.w	r2, r7, #8
 8006efa:	4610      	mov	r0, r2
 8006efc:	4798      	blx	r3
 8006efe:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	3301      	adds	r3, #1
 8006f04:	2207      	movs	r2, #7
 8006f06:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8006f08:	e00f      	b.n	8006f2a <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8006f0a:	6839      	ldr	r1, [r7, #0]
 8006f0c:	6878      	ldr	r0, [r7, #4]
 8006f0e:	f000 fa10 	bl	8007332 <USBD_CtlError>
        err++;
 8006f12:	7afb      	ldrb	r3, [r7, #11]
 8006f14:	3301      	adds	r3, #1
 8006f16:	72fb      	strb	r3, [r7, #11]
      break;
 8006f18:	e007      	b.n	8006f2a <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 8006f1a:	6839      	ldr	r1, [r7, #0]
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f000 fa08 	bl	8007332 <USBD_CtlError>
      err++;
 8006f22:	7afb      	ldrb	r3, [r7, #11]
 8006f24:	3301      	adds	r3, #1
 8006f26:	72fb      	strb	r3, [r7, #11]
      break;
 8006f28:	bf00      	nop
  }

  if (err != 0U)
 8006f2a:	7afb      	ldrb	r3, [r7, #11]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d11e      	bne.n	8006f6e <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 8006f30:	683b      	ldr	r3, [r7, #0]
 8006f32:	88db      	ldrh	r3, [r3, #6]
 8006f34:	2b00      	cmp	r3, #0
 8006f36:	d016      	beq.n	8006f66 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 8006f38:	893b      	ldrh	r3, [r7, #8]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	d00e      	beq.n	8006f5c <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 8006f3e:	683b      	ldr	r3, [r7, #0]
 8006f40:	88da      	ldrh	r2, [r3, #6]
 8006f42:	893b      	ldrh	r3, [r7, #8]
 8006f44:	4293      	cmp	r3, r2
 8006f46:	bf28      	it	cs
 8006f48:	4613      	movcs	r3, r2
 8006f4a:	b29b      	uxth	r3, r3
 8006f4c:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8006f4e:	893b      	ldrh	r3, [r7, #8]
 8006f50:	461a      	mov	r2, r3
 8006f52:	68f9      	ldr	r1, [r7, #12]
 8006f54:	6878      	ldr	r0, [r7, #4]
 8006f56:	f000 fa5d 	bl	8007414 <USBD_CtlSendData>
 8006f5a:	e009      	b.n	8006f70 <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 8006f5c:	6839      	ldr	r1, [r7, #0]
 8006f5e:	6878      	ldr	r0, [r7, #4]
 8006f60:	f000 f9e7 	bl	8007332 <USBD_CtlError>
 8006f64:	e004      	b.n	8006f70 <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8006f66:	6878      	ldr	r0, [r7, #4]
 8006f68:	f000 fa91 	bl	800748e <USBD_CtlSendStatus>
 8006f6c:	e000      	b.n	8006f70 <USBD_GetDescriptor+0x2cc>
    return;
 8006f6e:	bf00      	nop
  }
}
 8006f70:	3710      	adds	r7, #16
 8006f72:	46bd      	mov	sp, r7
 8006f74:	bd80      	pop	{r7, pc}
 8006f76:	bf00      	nop

08006f78 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006f78:	b580      	push	{r7, lr}
 8006f7a:	b084      	sub	sp, #16
 8006f7c:	af00      	add	r7, sp, #0
 8006f7e:	6078      	str	r0, [r7, #4]
 8006f80:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	889b      	ldrh	r3, [r3, #4]
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	d131      	bne.n	8006fee <USBD_SetAddress+0x76>
 8006f8a:	683b      	ldr	r3, [r7, #0]
 8006f8c:	88db      	ldrh	r3, [r3, #6]
 8006f8e:	2b00      	cmp	r3, #0
 8006f90:	d12d      	bne.n	8006fee <USBD_SetAddress+0x76>
 8006f92:	683b      	ldr	r3, [r7, #0]
 8006f94:	885b      	ldrh	r3, [r3, #2]
 8006f96:	2b7f      	cmp	r3, #127	; 0x7f
 8006f98:	d829      	bhi.n	8006fee <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8006f9a:	683b      	ldr	r3, [r7, #0]
 8006f9c:	885b      	ldrh	r3, [r3, #2]
 8006f9e:	b2db      	uxtb	r3, r3
 8006fa0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006fa4:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fa6:	687b      	ldr	r3, [r7, #4]
 8006fa8:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006fac:	b2db      	uxtb	r3, r3
 8006fae:	2b03      	cmp	r3, #3
 8006fb0:	d104      	bne.n	8006fbc <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 8006fb2:	6839      	ldr	r1, [r7, #0]
 8006fb4:	6878      	ldr	r0, [r7, #4]
 8006fb6:	f000 f9bc 	bl	8007332 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fba:	e01d      	b.n	8006ff8 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	7bfa      	ldrb	r2, [r7, #15]
 8006fc0:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8006fc4:	7bfb      	ldrb	r3, [r7, #15]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	6878      	ldr	r0, [r7, #4]
 8006fca:	f000 fe0f 	bl	8007bec <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 fa5d 	bl	800748e <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8006fd4:	7bfb      	ldrb	r3, [r7, #15]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d004      	beq.n	8006fe4 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2202      	movs	r2, #2
 8006fde:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fe2:	e009      	b.n	8006ff8 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	2201      	movs	r2, #1
 8006fe8:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006fec:	e004      	b.n	8006ff8 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8006fee:	6839      	ldr	r1, [r7, #0]
 8006ff0:	6878      	ldr	r0, [r7, #4]
 8006ff2:	f000 f99e 	bl	8007332 <USBD_CtlError>
  }
}
 8006ff6:	bf00      	nop
 8006ff8:	bf00      	nop
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}

08007000 <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007000:	b580      	push	{r7, lr}
 8007002:	b084      	sub	sp, #16
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
 8007008:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 800700a:	2300      	movs	r3, #0
 800700c:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	885b      	ldrh	r3, [r3, #2]
 8007012:	b2da      	uxtb	r2, r3
 8007014:	4b4e      	ldr	r3, [pc, #312]	; (8007150 <USBD_SetConfig+0x150>)
 8007016:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8007018:	4b4d      	ldr	r3, [pc, #308]	; (8007150 <USBD_SetConfig+0x150>)
 800701a:	781b      	ldrb	r3, [r3, #0]
 800701c:	2b01      	cmp	r3, #1
 800701e:	d905      	bls.n	800702c <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 8007020:	6839      	ldr	r1, [r7, #0]
 8007022:	6878      	ldr	r0, [r7, #4]
 8007024:	f000 f985 	bl	8007332 <USBD_CtlError>
    return USBD_FAIL;
 8007028:	2303      	movs	r3, #3
 800702a:	e08c      	b.n	8007146 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007032:	b2db      	uxtb	r3, r3
 8007034:	2b02      	cmp	r3, #2
 8007036:	d002      	beq.n	800703e <USBD_SetConfig+0x3e>
 8007038:	2b03      	cmp	r3, #3
 800703a:	d029      	beq.n	8007090 <USBD_SetConfig+0x90>
 800703c:	e075      	b.n	800712a <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 800703e:	4b44      	ldr	r3, [pc, #272]	; (8007150 <USBD_SetConfig+0x150>)
 8007040:	781b      	ldrb	r3, [r3, #0]
 8007042:	2b00      	cmp	r3, #0
 8007044:	d020      	beq.n	8007088 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 8007046:	4b42      	ldr	r3, [pc, #264]	; (8007150 <USBD_SetConfig+0x150>)
 8007048:	781b      	ldrb	r3, [r3, #0]
 800704a:	461a      	mov	r2, r3
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007050:	4b3f      	ldr	r3, [pc, #252]	; (8007150 <USBD_SetConfig+0x150>)
 8007052:	781b      	ldrb	r3, [r3, #0]
 8007054:	4619      	mov	r1, r3
 8007056:	6878      	ldr	r0, [r7, #4]
 8007058:	f7fe ffe7 	bl	800602a <USBD_SetClassConfig>
 800705c:	4603      	mov	r3, r0
 800705e:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 8007060:	7bfb      	ldrb	r3, [r7, #15]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d008      	beq.n	8007078 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007066:	6839      	ldr	r1, [r7, #0]
 8007068:	6878      	ldr	r0, [r7, #4]
 800706a:	f000 f962 	bl	8007332 <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	2202      	movs	r2, #2
 8007072:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007076:	e065      	b.n	8007144 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007078:	6878      	ldr	r0, [r7, #4]
 800707a:	f000 fa08 	bl	800748e <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	2203      	movs	r2, #3
 8007082:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007086:	e05d      	b.n	8007144 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007088:	6878      	ldr	r0, [r7, #4]
 800708a:	f000 fa00 	bl	800748e <USBD_CtlSendStatus>
      break;
 800708e:	e059      	b.n	8007144 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 8007090:	4b2f      	ldr	r3, [pc, #188]	; (8007150 <USBD_SetConfig+0x150>)
 8007092:	781b      	ldrb	r3, [r3, #0]
 8007094:	2b00      	cmp	r3, #0
 8007096:	d112      	bne.n	80070be <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	2202      	movs	r2, #2
 800709c:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 80070a0:	4b2b      	ldr	r3, [pc, #172]	; (8007150 <USBD_SetConfig+0x150>)
 80070a2:	781b      	ldrb	r3, [r3, #0]
 80070a4:	461a      	mov	r2, r3
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 80070aa:	4b29      	ldr	r3, [pc, #164]	; (8007150 <USBD_SetConfig+0x150>)
 80070ac:	781b      	ldrb	r3, [r3, #0]
 80070ae:	4619      	mov	r1, r3
 80070b0:	6878      	ldr	r0, [r7, #4]
 80070b2:	f7fe ffd6 	bl	8006062 <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 80070b6:	6878      	ldr	r0, [r7, #4]
 80070b8:	f000 f9e9 	bl	800748e <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 80070bc:	e042      	b.n	8007144 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 80070be:	4b24      	ldr	r3, [pc, #144]	; (8007150 <USBD_SetConfig+0x150>)
 80070c0:	781b      	ldrb	r3, [r3, #0]
 80070c2:	461a      	mov	r2, r3
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	685b      	ldr	r3, [r3, #4]
 80070c8:	429a      	cmp	r2, r3
 80070ca:	d02a      	beq.n	8007122 <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 80070cc:	687b      	ldr	r3, [r7, #4]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	b2db      	uxtb	r3, r3
 80070d2:	4619      	mov	r1, r3
 80070d4:	6878      	ldr	r0, [r7, #4]
 80070d6:	f7fe ffc4 	bl	8006062 <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 80070da:	4b1d      	ldr	r3, [pc, #116]	; (8007150 <USBD_SetConfig+0x150>)
 80070dc:	781b      	ldrb	r3, [r3, #0]
 80070de:	461a      	mov	r2, r3
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 80070e4:	4b1a      	ldr	r3, [pc, #104]	; (8007150 <USBD_SetConfig+0x150>)
 80070e6:	781b      	ldrb	r3, [r3, #0]
 80070e8:	4619      	mov	r1, r3
 80070ea:	6878      	ldr	r0, [r7, #4]
 80070ec:	f7fe ff9d 	bl	800602a <USBD_SetClassConfig>
 80070f0:	4603      	mov	r3, r0
 80070f2:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 80070f4:	7bfb      	ldrb	r3, [r7, #15]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d00f      	beq.n	800711a <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 80070fa:	6839      	ldr	r1, [r7, #0]
 80070fc:	6878      	ldr	r0, [r7, #4]
 80070fe:	f000 f918 	bl	8007332 <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007102:	687b      	ldr	r3, [r7, #4]
 8007104:	685b      	ldr	r3, [r3, #4]
 8007106:	b2db      	uxtb	r3, r3
 8007108:	4619      	mov	r1, r3
 800710a:	6878      	ldr	r0, [r7, #4]
 800710c:	f7fe ffa9 	bl	8006062 <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007118:	e014      	b.n	8007144 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 800711a:	6878      	ldr	r0, [r7, #4]
 800711c:	f000 f9b7 	bl	800748e <USBD_CtlSendStatus>
      break;
 8007120:	e010      	b.n	8007144 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007122:	6878      	ldr	r0, [r7, #4]
 8007124:	f000 f9b3 	bl	800748e <USBD_CtlSendStatus>
      break;
 8007128:	e00c      	b.n	8007144 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 800712a:	6839      	ldr	r1, [r7, #0]
 800712c:	6878      	ldr	r0, [r7, #4]
 800712e:	f000 f900 	bl	8007332 <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007132:	4b07      	ldr	r3, [pc, #28]	; (8007150 <USBD_SetConfig+0x150>)
 8007134:	781b      	ldrb	r3, [r3, #0]
 8007136:	4619      	mov	r1, r3
 8007138:	6878      	ldr	r0, [r7, #4]
 800713a:	f7fe ff92 	bl	8006062 <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 800713e:	2303      	movs	r3, #3
 8007140:	73fb      	strb	r3, [r7, #15]
      break;
 8007142:	bf00      	nop
  }

  return ret;
 8007144:	7bfb      	ldrb	r3, [r7, #15]
}
 8007146:	4618      	mov	r0, r3
 8007148:	3710      	adds	r7, #16
 800714a:	46bd      	mov	sp, r7
 800714c:	bd80      	pop	{r7, pc}
 800714e:	bf00      	nop
 8007150:	2000079c 	.word	0x2000079c

08007154 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b082      	sub	sp, #8
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 800715e:	683b      	ldr	r3, [r7, #0]
 8007160:	88db      	ldrh	r3, [r3, #6]
 8007162:	2b01      	cmp	r3, #1
 8007164:	d004      	beq.n	8007170 <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007166:	6839      	ldr	r1, [r7, #0]
 8007168:	6878      	ldr	r0, [r7, #4]
 800716a:	f000 f8e2 	bl	8007332 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800716e:	e023      	b.n	80071b8 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007176:	b2db      	uxtb	r3, r3
 8007178:	2b02      	cmp	r3, #2
 800717a:	dc02      	bgt.n	8007182 <USBD_GetConfig+0x2e>
 800717c:	2b00      	cmp	r3, #0
 800717e:	dc03      	bgt.n	8007188 <USBD_GetConfig+0x34>
 8007180:	e015      	b.n	80071ae <USBD_GetConfig+0x5a>
 8007182:	2b03      	cmp	r3, #3
 8007184:	d00b      	beq.n	800719e <USBD_GetConfig+0x4a>
 8007186:	e012      	b.n	80071ae <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	2200      	movs	r2, #0
 800718c:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	3308      	adds	r3, #8
 8007192:	2201      	movs	r2, #1
 8007194:	4619      	mov	r1, r3
 8007196:	6878      	ldr	r0, [r7, #4]
 8007198:	f000 f93c 	bl	8007414 <USBD_CtlSendData>
        break;
 800719c:	e00c      	b.n	80071b8 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	3304      	adds	r3, #4
 80071a2:	2201      	movs	r2, #1
 80071a4:	4619      	mov	r1, r3
 80071a6:	6878      	ldr	r0, [r7, #4]
 80071a8:	f000 f934 	bl	8007414 <USBD_CtlSendData>
        break;
 80071ac:	e004      	b.n	80071b8 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 80071ae:	6839      	ldr	r1, [r7, #0]
 80071b0:	6878      	ldr	r0, [r7, #4]
 80071b2:	f000 f8be 	bl	8007332 <USBD_CtlError>
        break;
 80071b6:	bf00      	nop
}
 80071b8:	bf00      	nop
 80071ba:	3708      	adds	r7, #8
 80071bc:	46bd      	mov	sp, r7
 80071be:	bd80      	pop	{r7, pc}

080071c0 <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80071c0:	b580      	push	{r7, lr}
 80071c2:	b082      	sub	sp, #8
 80071c4:	af00      	add	r7, sp, #0
 80071c6:	6078      	str	r0, [r7, #4]
 80071c8:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80071d0:	b2db      	uxtb	r3, r3
 80071d2:	3b01      	subs	r3, #1
 80071d4:	2b02      	cmp	r3, #2
 80071d6:	d81e      	bhi.n	8007216 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 80071d8:	683b      	ldr	r3, [r7, #0]
 80071da:	88db      	ldrh	r3, [r3, #6]
 80071dc:	2b02      	cmp	r3, #2
 80071de:	d004      	beq.n	80071ea <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 80071e0:	6839      	ldr	r1, [r7, #0]
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f8a5 	bl	8007332 <USBD_CtlError>
        break;
 80071e8:	e01a      	b.n	8007220 <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	2201      	movs	r2, #1
 80071ee:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 80071f6:	2b00      	cmp	r3, #0
 80071f8:	d005      	beq.n	8007206 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	68db      	ldr	r3, [r3, #12]
 80071fe:	f043 0202 	orr.w	r2, r3, #2
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	330c      	adds	r3, #12
 800720a:	2202      	movs	r2, #2
 800720c:	4619      	mov	r1, r3
 800720e:	6878      	ldr	r0, [r7, #4]
 8007210:	f000 f900 	bl	8007414 <USBD_CtlSendData>
      break;
 8007214:	e004      	b.n	8007220 <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 8007216:	6839      	ldr	r1, [r7, #0]
 8007218:	6878      	ldr	r0, [r7, #4]
 800721a:	f000 f88a 	bl	8007332 <USBD_CtlError>
      break;
 800721e:	bf00      	nop
  }
}
 8007220:	bf00      	nop
 8007222:	3708      	adds	r7, #8
 8007224:	46bd      	mov	sp, r7
 8007226:	bd80      	pop	{r7, pc}

08007228 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007228:	b580      	push	{r7, lr}
 800722a:	b082      	sub	sp, #8
 800722c:	af00      	add	r7, sp, #0
 800722e:	6078      	str	r0, [r7, #4]
 8007230:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	885b      	ldrh	r3, [r3, #2]
 8007236:	2b01      	cmp	r3, #1
 8007238:	d107      	bne.n	800724a <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	2201      	movs	r2, #1
 800723e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 8007242:	6878      	ldr	r0, [r7, #4]
 8007244:	f000 f923 	bl	800748e <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 8007248:	e013      	b.n	8007272 <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	885b      	ldrh	r3, [r3, #2]
 800724e:	2b02      	cmp	r3, #2
 8007250:	d10b      	bne.n	800726a <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 8007252:	683b      	ldr	r3, [r7, #0]
 8007254:	889b      	ldrh	r3, [r3, #4]
 8007256:	0a1b      	lsrs	r3, r3, #8
 8007258:	b29b      	uxth	r3, r3
 800725a:	b2da      	uxtb	r2, r3
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 8007262:	6878      	ldr	r0, [r7, #4]
 8007264:	f000 f913 	bl	800748e <USBD_CtlSendStatus>
}
 8007268:	e003      	b.n	8007272 <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 800726a:	6839      	ldr	r1, [r7, #0]
 800726c:	6878      	ldr	r0, [r7, #4]
 800726e:	f000 f860 	bl	8007332 <USBD_CtlError>
}
 8007272:	bf00      	nop
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800727a:	b580      	push	{r7, lr}
 800727c:	b082      	sub	sp, #8
 800727e:	af00      	add	r7, sp, #0
 8007280:	6078      	str	r0, [r7, #4]
 8007282:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007284:	687b      	ldr	r3, [r7, #4]
 8007286:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800728a:	b2db      	uxtb	r3, r3
 800728c:	3b01      	subs	r3, #1
 800728e:	2b02      	cmp	r3, #2
 8007290:	d80b      	bhi.n	80072aa <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8007292:	683b      	ldr	r3, [r7, #0]
 8007294:	885b      	ldrh	r3, [r3, #2]
 8007296:	2b01      	cmp	r3, #1
 8007298:	d10c      	bne.n	80072b4 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	2200      	movs	r2, #0
 800729e:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 80072a2:	6878      	ldr	r0, [r7, #4]
 80072a4:	f000 f8f3 	bl	800748e <USBD_CtlSendStatus>
      }
      break;
 80072a8:	e004      	b.n	80072b4 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 80072aa:	6839      	ldr	r1, [r7, #0]
 80072ac:	6878      	ldr	r0, [r7, #4]
 80072ae:	f000 f840 	bl	8007332 <USBD_CtlError>
      break;
 80072b2:	e000      	b.n	80072b6 <USBD_ClrFeature+0x3c>
      break;
 80072b4:	bf00      	nop
  }
}
 80072b6:	bf00      	nop
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}

080072be <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 80072be:	b580      	push	{r7, lr}
 80072c0:	b084      	sub	sp, #16
 80072c2:	af00      	add	r7, sp, #0
 80072c4:	6078      	str	r0, [r7, #4]
 80072c6:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	781a      	ldrb	r2, [r3, #0]
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	701a      	strb	r2, [r3, #0]

  pbuff++;
 80072d4:	68fb      	ldr	r3, [r7, #12]
 80072d6:	3301      	adds	r3, #1
 80072d8:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	781a      	ldrb	r2, [r3, #0]
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	705a      	strb	r2, [r3, #1]

  pbuff++;
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	3301      	adds	r3, #1
 80072e6:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 80072e8:	68f8      	ldr	r0, [r7, #12]
 80072ea:	f7ff fa41 	bl	8006770 <SWAPBYTE>
 80072ee:	4603      	mov	r3, r0
 80072f0:	461a      	mov	r2, r3
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	805a      	strh	r2, [r3, #2]

  pbuff++;
 80072f6:	68fb      	ldr	r3, [r7, #12]
 80072f8:	3301      	adds	r3, #1
 80072fa:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	3301      	adds	r3, #1
 8007300:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 8007302:	68f8      	ldr	r0, [r7, #12]
 8007304:	f7ff fa34 	bl	8006770 <SWAPBYTE>
 8007308:	4603      	mov	r3, r0
 800730a:	461a      	mov	r2, r3
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	809a      	strh	r2, [r3, #4]

  pbuff++;
 8007310:	68fb      	ldr	r3, [r7, #12]
 8007312:	3301      	adds	r3, #1
 8007314:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007316:	68fb      	ldr	r3, [r7, #12]
 8007318:	3301      	adds	r3, #1
 800731a:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 800731c:	68f8      	ldr	r0, [r7, #12]
 800731e:	f7ff fa27 	bl	8006770 <SWAPBYTE>
 8007322:	4603      	mov	r3, r0
 8007324:	461a      	mov	r2, r3
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	80da      	strh	r2, [r3, #6]
}
 800732a:	bf00      	nop
 800732c:	3710      	adds	r7, #16
 800732e:	46bd      	mov	sp, r7
 8007330:	bd80      	pop	{r7, pc}

08007332 <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007332:	b580      	push	{r7, lr}
 8007334:	b082      	sub	sp, #8
 8007336:	af00      	add	r7, sp, #0
 8007338:	6078      	str	r0, [r7, #4]
 800733a:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 800733c:	2180      	movs	r1, #128	; 0x80
 800733e:	6878      	ldr	r0, [r7, #4]
 8007340:	f000 fbea 	bl	8007b18 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 8007344:	2100      	movs	r1, #0
 8007346:	6878      	ldr	r0, [r7, #4]
 8007348:	f000 fbe6 	bl	8007b18 <USBD_LL_StallEP>
}
 800734c:	bf00      	nop
 800734e:	3708      	adds	r7, #8
 8007350:	46bd      	mov	sp, r7
 8007352:	bd80      	pop	{r7, pc}

08007354 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8007354:	b580      	push	{r7, lr}
 8007356:	b086      	sub	sp, #24
 8007358:	af00      	add	r7, sp, #0
 800735a:	60f8      	str	r0, [r7, #12]
 800735c:	60b9      	str	r1, [r7, #8]
 800735e:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8007360:	2300      	movs	r3, #0
 8007362:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d036      	beq.n	80073d8 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800736e:	6938      	ldr	r0, [r7, #16]
 8007370:	f000 f836 	bl	80073e0 <USBD_GetLen>
 8007374:	4603      	mov	r3, r0
 8007376:	3301      	adds	r3, #1
 8007378:	b29b      	uxth	r3, r3
 800737a:	005b      	lsls	r3, r3, #1
 800737c:	b29a      	uxth	r2, r3
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 8007382:	7dfb      	ldrb	r3, [r7, #23]
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	4413      	add	r3, r2
 8007388:	687a      	ldr	r2, [r7, #4]
 800738a:	7812      	ldrb	r2, [r2, #0]
 800738c:	701a      	strb	r2, [r3, #0]
  idx++;
 800738e:	7dfb      	ldrb	r3, [r7, #23]
 8007390:	3301      	adds	r3, #1
 8007392:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007394:	7dfb      	ldrb	r3, [r7, #23]
 8007396:	68ba      	ldr	r2, [r7, #8]
 8007398:	4413      	add	r3, r2
 800739a:	2203      	movs	r2, #3
 800739c:	701a      	strb	r2, [r3, #0]
  idx++;
 800739e:	7dfb      	ldrb	r3, [r7, #23]
 80073a0:	3301      	adds	r3, #1
 80073a2:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 80073a4:	e013      	b.n	80073ce <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 80073a6:	7dfb      	ldrb	r3, [r7, #23]
 80073a8:	68ba      	ldr	r2, [r7, #8]
 80073aa:	4413      	add	r3, r2
 80073ac:	693a      	ldr	r2, [r7, #16]
 80073ae:	7812      	ldrb	r2, [r2, #0]
 80073b0:	701a      	strb	r2, [r3, #0]
    pdesc++;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	3301      	adds	r3, #1
 80073b6:	613b      	str	r3, [r7, #16]
    idx++;
 80073b8:	7dfb      	ldrb	r3, [r7, #23]
 80073ba:	3301      	adds	r3, #1
 80073bc:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 80073be:	7dfb      	ldrb	r3, [r7, #23]
 80073c0:	68ba      	ldr	r2, [r7, #8]
 80073c2:	4413      	add	r3, r2
 80073c4:	2200      	movs	r2, #0
 80073c6:	701a      	strb	r2, [r3, #0]
    idx++;
 80073c8:	7dfb      	ldrb	r3, [r7, #23]
 80073ca:	3301      	adds	r3, #1
 80073cc:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 80073ce:	693b      	ldr	r3, [r7, #16]
 80073d0:	781b      	ldrb	r3, [r3, #0]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d1e7      	bne.n	80073a6 <USBD_GetString+0x52>
 80073d6:	e000      	b.n	80073da <USBD_GetString+0x86>
    return;
 80073d8:	bf00      	nop
  }
}
 80073da:	3718      	adds	r7, #24
 80073dc:	46bd      	mov	sp, r7
 80073de:	bd80      	pop	{r7, pc}

080073e0 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 80073e0:	b480      	push	{r7}
 80073e2:	b085      	sub	sp, #20
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 80073e8:	2300      	movs	r3, #0
 80073ea:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 80073f0:	e005      	b.n	80073fe <USBD_GetLen+0x1e>
  {
    len++;
 80073f2:	7bfb      	ldrb	r3, [r7, #15]
 80073f4:	3301      	adds	r3, #1
 80073f6:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 80073f8:	68bb      	ldr	r3, [r7, #8]
 80073fa:	3301      	adds	r3, #1
 80073fc:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 80073fe:	68bb      	ldr	r3, [r7, #8]
 8007400:	781b      	ldrb	r3, [r3, #0]
 8007402:	2b00      	cmp	r3, #0
 8007404:	d1f5      	bne.n	80073f2 <USBD_GetLen+0x12>
  }

  return len;
 8007406:	7bfb      	ldrb	r3, [r7, #15]
}
 8007408:	4618      	mov	r0, r3
 800740a:	3714      	adds	r7, #20
 800740c:	46bd      	mov	sp, r7
 800740e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007412:	4770      	bx	lr

08007414 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 8007414:	b580      	push	{r7, lr}
 8007416:	b084      	sub	sp, #16
 8007418:	af00      	add	r7, sp, #0
 800741a:	60f8      	str	r0, [r7, #12]
 800741c:	60b9      	str	r1, [r7, #8]
 800741e:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2202      	movs	r2, #2
 8007424:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	687a      	ldr	r2, [r7, #4]
 800742c:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 800742e:	68fb      	ldr	r3, [r7, #12]
 8007430:	687a      	ldr	r2, [r7, #4]
 8007432:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	68ba      	ldr	r2, [r7, #8]
 8007438:	2100      	movs	r1, #0
 800743a:	68f8      	ldr	r0, [r7, #12]
 800743c:	f000 fbf5 	bl	8007c2a <USBD_LL_Transmit>

  return USBD_OK;
 8007440:	2300      	movs	r3, #0
}
 8007442:	4618      	mov	r0, r3
 8007444:	3710      	adds	r7, #16
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}

0800744a <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 800744a:	b580      	push	{r7, lr}
 800744c:	b084      	sub	sp, #16
 800744e:	af00      	add	r7, sp, #0
 8007450:	60f8      	str	r0, [r7, #12]
 8007452:	60b9      	str	r1, [r7, #8]
 8007454:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	68ba      	ldr	r2, [r7, #8]
 800745a:	2100      	movs	r1, #0
 800745c:	68f8      	ldr	r0, [r7, #12]
 800745e:	f000 fbe4 	bl	8007c2a <USBD_LL_Transmit>

  return USBD_OK;
 8007462:	2300      	movs	r3, #0
}
 8007464:	4618      	mov	r0, r3
 8007466:	3710      	adds	r7, #16
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}

0800746c <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 800746c:	b580      	push	{r7, lr}
 800746e:	b084      	sub	sp, #16
 8007470:	af00      	add	r7, sp, #0
 8007472:	60f8      	str	r0, [r7, #12]
 8007474:	60b9      	str	r1, [r7, #8]
 8007476:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	68ba      	ldr	r2, [r7, #8]
 800747c:	2100      	movs	r1, #0
 800747e:	68f8      	ldr	r0, [r7, #12]
 8007480:	f000 fbf4 	bl	8007c6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007484:	2300      	movs	r3, #0
}
 8007486:	4618      	mov	r0, r3
 8007488:	3710      	adds	r7, #16
 800748a:	46bd      	mov	sp, r7
 800748c:	bd80      	pop	{r7, pc}

0800748e <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800748e:	b580      	push	{r7, lr}
 8007490:	b082      	sub	sp, #8
 8007492:	af00      	add	r7, sp, #0
 8007494:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	2204      	movs	r2, #4
 800749a:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800749e:	2300      	movs	r3, #0
 80074a0:	2200      	movs	r2, #0
 80074a2:	2100      	movs	r1, #0
 80074a4:	6878      	ldr	r0, [r7, #4]
 80074a6:	f000 fbc0 	bl	8007c2a <USBD_LL_Transmit>

  return USBD_OK;
 80074aa:	2300      	movs	r3, #0
}
 80074ac:	4618      	mov	r0, r3
 80074ae:	3708      	adds	r7, #8
 80074b0:	46bd      	mov	sp, r7
 80074b2:	bd80      	pop	{r7, pc}

080074b4 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80074b4:	b580      	push	{r7, lr}
 80074b6:	b082      	sub	sp, #8
 80074b8:	af00      	add	r7, sp, #0
 80074ba:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2205      	movs	r2, #5
 80074c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80074c4:	2300      	movs	r3, #0
 80074c6:	2200      	movs	r2, #0
 80074c8:	2100      	movs	r1, #0
 80074ca:	6878      	ldr	r0, [r7, #4]
 80074cc:	f000 fbce 	bl	8007c6c <USBD_LL_PrepareReceive>

  return USBD_OK;
 80074d0:	2300      	movs	r3, #0
}
 80074d2:	4618      	mov	r0, r3
 80074d4:	3708      	adds	r7, #8
 80074d6:	46bd      	mov	sp, r7
 80074d8:	bd80      	pop	{r7, pc}
	...

080074dc <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80074dc:	b580      	push	{r7, lr}
 80074de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80074e0:	2200      	movs	r2, #0
 80074e2:	490e      	ldr	r1, [pc, #56]	; (800751c <MX_USB_DEVICE_Init+0x40>)
 80074e4:	480e      	ldr	r0, [pc, #56]	; (8007520 <MX_USB_DEVICE_Init+0x44>)
 80074e6:	f7fe fd23 	bl	8005f30 <USBD_Init>
 80074ea:	4603      	mov	r3, r0
 80074ec:	2b00      	cmp	r3, #0
 80074ee:	d001      	beq.n	80074f4 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80074f0:	f7f9 fc4a 	bl	8000d88 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 80074f4:	490b      	ldr	r1, [pc, #44]	; (8007524 <MX_USB_DEVICE_Init+0x48>)
 80074f6:	480a      	ldr	r0, [pc, #40]	; (8007520 <MX_USB_DEVICE_Init+0x44>)
 80074f8:	f7fe fd4a 	bl	8005f90 <USBD_RegisterClass>
 80074fc:	4603      	mov	r3, r0
 80074fe:	2b00      	cmp	r3, #0
 8007500:	d001      	beq.n	8007506 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 8007502:	f7f9 fc41 	bl	8000d88 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8007506:	4806      	ldr	r0, [pc, #24]	; (8007520 <MX_USB_DEVICE_Init+0x44>)
 8007508:	f7fe fd78 	bl	8005ffc <USBD_Start>
 800750c:	4603      	mov	r3, r0
 800750e:	2b00      	cmp	r3, #0
 8007510:	d001      	beq.n	8007516 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 8007512:	f7f9 fc39 	bl	8000d88 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8007516:	bf00      	nop
 8007518:	bd80      	pop	{r7, pc}
 800751a:	bf00      	nop
 800751c:	20000494 	.word	0x20000494
 8007520:	200007a0 	.word	0x200007a0
 8007524:	200003e0 	.word	0x200003e0

08007528 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007528:	b480      	push	{r7}
 800752a:	b083      	sub	sp, #12
 800752c:	af00      	add	r7, sp, #0
 800752e:	4603      	mov	r3, r0
 8007530:	6039      	str	r1, [r7, #0]
 8007532:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	2212      	movs	r2, #18
 8007538:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 800753a:	4b03      	ldr	r3, [pc, #12]	; (8007548 <USBD_FS_DeviceDescriptor+0x20>)
}
 800753c:	4618      	mov	r0, r3
 800753e:	370c      	adds	r7, #12
 8007540:	46bd      	mov	sp, r7
 8007542:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007546:	4770      	bx	lr
 8007548:	200004b0 	.word	0x200004b0

0800754c <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800754c:	b480      	push	{r7}
 800754e:	b083      	sub	sp, #12
 8007550:	af00      	add	r7, sp, #0
 8007552:	4603      	mov	r3, r0
 8007554:	6039      	str	r1, [r7, #0]
 8007556:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 8007558:	683b      	ldr	r3, [r7, #0]
 800755a:	2204      	movs	r2, #4
 800755c:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 800755e:	4b03      	ldr	r3, [pc, #12]	; (800756c <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8007560:	4618      	mov	r0, r3
 8007562:	370c      	adds	r7, #12
 8007564:	46bd      	mov	sp, r7
 8007566:	f85d 7b04 	ldr.w	r7, [sp], #4
 800756a:	4770      	bx	lr
 800756c:	200004c4 	.word	0x200004c4

08007570 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007570:	b580      	push	{r7, lr}
 8007572:	b082      	sub	sp, #8
 8007574:	af00      	add	r7, sp, #0
 8007576:	4603      	mov	r3, r0
 8007578:	6039      	str	r1, [r7, #0]
 800757a:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 800757c:	79fb      	ldrb	r3, [r7, #7]
 800757e:	2b00      	cmp	r3, #0
 8007580:	d105      	bne.n	800758e <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8007582:	683a      	ldr	r2, [r7, #0]
 8007584:	4907      	ldr	r1, [pc, #28]	; (80075a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007586:	4808      	ldr	r0, [pc, #32]	; (80075a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007588:	f7ff fee4 	bl	8007354 <USBD_GetString>
 800758c:	e004      	b.n	8007598 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800758e:	683a      	ldr	r2, [r7, #0]
 8007590:	4904      	ldr	r1, [pc, #16]	; (80075a4 <USBD_FS_ProductStrDescriptor+0x34>)
 8007592:	4805      	ldr	r0, [pc, #20]	; (80075a8 <USBD_FS_ProductStrDescriptor+0x38>)
 8007594:	f7ff fede 	bl	8007354 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007598:	4b02      	ldr	r3, [pc, #8]	; (80075a4 <USBD_FS_ProductStrDescriptor+0x34>)
}
 800759a:	4618      	mov	r0, r3
 800759c:	3708      	adds	r7, #8
 800759e:	46bd      	mov	sp, r7
 80075a0:	bd80      	pop	{r7, pc}
 80075a2:	bf00      	nop
 80075a4:	20000a7c 	.word	0x20000a7c
 80075a8:	08007db8 	.word	0x08007db8

080075ac <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075ac:	b580      	push	{r7, lr}
 80075ae:	b082      	sub	sp, #8
 80075b0:	af00      	add	r7, sp, #0
 80075b2:	4603      	mov	r3, r0
 80075b4:	6039      	str	r1, [r7, #0]
 80075b6:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80075b8:	683a      	ldr	r2, [r7, #0]
 80075ba:	4904      	ldr	r1, [pc, #16]	; (80075cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
 80075bc:	4804      	ldr	r0, [pc, #16]	; (80075d0 <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80075be:	f7ff fec9 	bl	8007354 <USBD_GetString>
  return USBD_StrDesc;
 80075c2:	4b02      	ldr	r3, [pc, #8]	; (80075cc <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 80075c4:	4618      	mov	r0, r3
 80075c6:	3708      	adds	r7, #8
 80075c8:	46bd      	mov	sp, r7
 80075ca:	bd80      	pop	{r7, pc}
 80075cc:	20000a7c 	.word	0x20000a7c
 80075d0:	08007dd0 	.word	0x08007dd0

080075d4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b082      	sub	sp, #8
 80075d8:	af00      	add	r7, sp, #0
 80075da:	4603      	mov	r3, r0
 80075dc:	6039      	str	r1, [r7, #0]
 80075de:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80075e0:	683b      	ldr	r3, [r7, #0]
 80075e2:	221a      	movs	r2, #26
 80075e4:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80075e6:	f000 f843 	bl	8007670 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80075ea:	4b02      	ldr	r3, [pc, #8]	; (80075f4 <USBD_FS_SerialStrDescriptor+0x20>)
}
 80075ec:	4618      	mov	r0, r3
 80075ee:	3708      	adds	r7, #8
 80075f0:	46bd      	mov	sp, r7
 80075f2:	bd80      	pop	{r7, pc}
 80075f4:	200004c8 	.word	0x200004c8

080075f8 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80075f8:	b580      	push	{r7, lr}
 80075fa:	b082      	sub	sp, #8
 80075fc:	af00      	add	r7, sp, #0
 80075fe:	4603      	mov	r3, r0
 8007600:	6039      	str	r1, [r7, #0]
 8007602:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 8007604:	79fb      	ldrb	r3, [r7, #7]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d105      	bne.n	8007616 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 800760a:	683a      	ldr	r2, [r7, #0]
 800760c:	4907      	ldr	r1, [pc, #28]	; (800762c <USBD_FS_ConfigStrDescriptor+0x34>)
 800760e:	4808      	ldr	r0, [pc, #32]	; (8007630 <USBD_FS_ConfigStrDescriptor+0x38>)
 8007610:	f7ff fea0 	bl	8007354 <USBD_GetString>
 8007614:	e004      	b.n	8007620 <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	4904      	ldr	r1, [pc, #16]	; (800762c <USBD_FS_ConfigStrDescriptor+0x34>)
 800761a:	4805      	ldr	r0, [pc, #20]	; (8007630 <USBD_FS_ConfigStrDescriptor+0x38>)
 800761c:	f7ff fe9a 	bl	8007354 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007620:	4b02      	ldr	r3, [pc, #8]	; (800762c <USBD_FS_ConfigStrDescriptor+0x34>)
}
 8007622:	4618      	mov	r0, r3
 8007624:	3708      	adds	r7, #8
 8007626:	46bd      	mov	sp, r7
 8007628:	bd80      	pop	{r7, pc}
 800762a:	bf00      	nop
 800762c:	20000a7c 	.word	0x20000a7c
 8007630:	08007de4 	.word	0x08007de4

08007634 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007634:	b580      	push	{r7, lr}
 8007636:	b082      	sub	sp, #8
 8007638:	af00      	add	r7, sp, #0
 800763a:	4603      	mov	r3, r0
 800763c:	6039      	str	r1, [r7, #0]
 800763e:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007640:	79fb      	ldrb	r3, [r7, #7]
 8007642:	2b00      	cmp	r3, #0
 8007644:	d105      	bne.n	8007652 <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007646:	683a      	ldr	r2, [r7, #0]
 8007648:	4907      	ldr	r1, [pc, #28]	; (8007668 <USBD_FS_InterfaceStrDescriptor+0x34>)
 800764a:	4808      	ldr	r0, [pc, #32]	; (800766c <USBD_FS_InterfaceStrDescriptor+0x38>)
 800764c:	f7ff fe82 	bl	8007354 <USBD_GetString>
 8007650:	e004      	b.n	800765c <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8007652:	683a      	ldr	r2, [r7, #0]
 8007654:	4904      	ldr	r1, [pc, #16]	; (8007668 <USBD_FS_InterfaceStrDescriptor+0x34>)
 8007656:	4805      	ldr	r0, [pc, #20]	; (800766c <USBD_FS_InterfaceStrDescriptor+0x38>)
 8007658:	f7ff fe7c 	bl	8007354 <USBD_GetString>
  }
  return USBD_StrDesc;
 800765c:	4b02      	ldr	r3, [pc, #8]	; (8007668 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 800765e:	4618      	mov	r0, r3
 8007660:	3708      	adds	r7, #8
 8007662:	46bd      	mov	sp, r7
 8007664:	bd80      	pop	{r7, pc}
 8007666:	bf00      	nop
 8007668:	20000a7c 	.word	0x20000a7c
 800766c:	08007df0 	.word	0x08007df0

08007670 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007670:	b580      	push	{r7, lr}
 8007672:	b084      	sub	sp, #16
 8007674:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007676:	4b0f      	ldr	r3, [pc, #60]	; (80076b4 <Get_SerialNum+0x44>)
 8007678:	681b      	ldr	r3, [r3, #0]
 800767a:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 800767c:	4b0e      	ldr	r3, [pc, #56]	; (80076b8 <Get_SerialNum+0x48>)
 800767e:	681b      	ldr	r3, [r3, #0]
 8007680:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007682:	4b0e      	ldr	r3, [pc, #56]	; (80076bc <Get_SerialNum+0x4c>)
 8007684:	681b      	ldr	r3, [r3, #0]
 8007686:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007688:	68fa      	ldr	r2, [r7, #12]
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	4413      	add	r3, r2
 800768e:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007690:	68fb      	ldr	r3, [r7, #12]
 8007692:	2b00      	cmp	r3, #0
 8007694:	d009      	beq.n	80076aa <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007696:	2208      	movs	r2, #8
 8007698:	4909      	ldr	r1, [pc, #36]	; (80076c0 <Get_SerialNum+0x50>)
 800769a:	68f8      	ldr	r0, [r7, #12]
 800769c:	f000 f814 	bl	80076c8 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80076a0:	2204      	movs	r2, #4
 80076a2:	4908      	ldr	r1, [pc, #32]	; (80076c4 <Get_SerialNum+0x54>)
 80076a4:	68b8      	ldr	r0, [r7, #8]
 80076a6:	f000 f80f 	bl	80076c8 <IntToUnicode>
  }
}
 80076aa:	bf00      	nop
 80076ac:	3710      	adds	r7, #16
 80076ae:	46bd      	mov	sp, r7
 80076b0:	bd80      	pop	{r7, pc}
 80076b2:	bf00      	nop
 80076b4:	1fff7a10 	.word	0x1fff7a10
 80076b8:	1fff7a14 	.word	0x1fff7a14
 80076bc:	1fff7a18 	.word	0x1fff7a18
 80076c0:	200004ca 	.word	0x200004ca
 80076c4:	200004da 	.word	0x200004da

080076c8 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80076c8:	b480      	push	{r7}
 80076ca:	b087      	sub	sp, #28
 80076cc:	af00      	add	r7, sp, #0
 80076ce:	60f8      	str	r0, [r7, #12]
 80076d0:	60b9      	str	r1, [r7, #8]
 80076d2:	4613      	mov	r3, r2
 80076d4:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 80076d6:	2300      	movs	r3, #0
 80076d8:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 80076da:	2300      	movs	r3, #0
 80076dc:	75fb      	strb	r3, [r7, #23]
 80076de:	e027      	b.n	8007730 <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 80076e0:	68fb      	ldr	r3, [r7, #12]
 80076e2:	0f1b      	lsrs	r3, r3, #28
 80076e4:	2b09      	cmp	r3, #9
 80076e6:	d80b      	bhi.n	8007700 <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80076e8:	68fb      	ldr	r3, [r7, #12]
 80076ea:	0f1b      	lsrs	r3, r3, #28
 80076ec:	b2da      	uxtb	r2, r3
 80076ee:	7dfb      	ldrb	r3, [r7, #23]
 80076f0:	005b      	lsls	r3, r3, #1
 80076f2:	4619      	mov	r1, r3
 80076f4:	68bb      	ldr	r3, [r7, #8]
 80076f6:	440b      	add	r3, r1
 80076f8:	3230      	adds	r2, #48	; 0x30
 80076fa:	b2d2      	uxtb	r2, r2
 80076fc:	701a      	strb	r2, [r3, #0]
 80076fe:	e00a      	b.n	8007716 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	0f1b      	lsrs	r3, r3, #28
 8007704:	b2da      	uxtb	r2, r3
 8007706:	7dfb      	ldrb	r3, [r7, #23]
 8007708:	005b      	lsls	r3, r3, #1
 800770a:	4619      	mov	r1, r3
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	440b      	add	r3, r1
 8007710:	3237      	adds	r2, #55	; 0x37
 8007712:	b2d2      	uxtb	r2, r2
 8007714:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	011b      	lsls	r3, r3, #4
 800771a:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 800771c:	7dfb      	ldrb	r3, [r7, #23]
 800771e:	005b      	lsls	r3, r3, #1
 8007720:	3301      	adds	r3, #1
 8007722:	68ba      	ldr	r2, [r7, #8]
 8007724:	4413      	add	r3, r2
 8007726:	2200      	movs	r2, #0
 8007728:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	3301      	adds	r3, #1
 800772e:	75fb      	strb	r3, [r7, #23]
 8007730:	7dfa      	ldrb	r2, [r7, #23]
 8007732:	79fb      	ldrb	r3, [r7, #7]
 8007734:	429a      	cmp	r2, r3
 8007736:	d3d3      	bcc.n	80076e0 <IntToUnicode+0x18>
  }
}
 8007738:	bf00      	nop
 800773a:	bf00      	nop
 800773c:	371c      	adds	r7, #28
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
	...

08007748 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b08a      	sub	sp, #40	; 0x28
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007750:	f107 0314 	add.w	r3, r7, #20
 8007754:	2200      	movs	r2, #0
 8007756:	601a      	str	r2, [r3, #0]
 8007758:	605a      	str	r2, [r3, #4]
 800775a:	609a      	str	r2, [r3, #8]
 800775c:	60da      	str	r2, [r3, #12]
 800775e:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007768:	d13a      	bne.n	80077e0 <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800776a:	2300      	movs	r3, #0
 800776c:	613b      	str	r3, [r7, #16]
 800776e:	4b1e      	ldr	r3, [pc, #120]	; (80077e8 <HAL_PCD_MspInit+0xa0>)
 8007770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007772:	4a1d      	ldr	r2, [pc, #116]	; (80077e8 <HAL_PCD_MspInit+0xa0>)
 8007774:	f043 0301 	orr.w	r3, r3, #1
 8007778:	6313      	str	r3, [r2, #48]	; 0x30
 800777a:	4b1b      	ldr	r3, [pc, #108]	; (80077e8 <HAL_PCD_MspInit+0xa0>)
 800777c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800777e:	f003 0301 	and.w	r3, r3, #1
 8007782:	613b      	str	r3, [r7, #16]
 8007784:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007786:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800778a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800778c:	2302      	movs	r3, #2
 800778e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007790:	2300      	movs	r3, #0
 8007792:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007794:	2303      	movs	r3, #3
 8007796:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007798:	230a      	movs	r3, #10
 800779a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800779c:	f107 0314 	add.w	r3, r7, #20
 80077a0:	4619      	mov	r1, r3
 80077a2:	4812      	ldr	r0, [pc, #72]	; (80077ec <HAL_PCD_MspInit+0xa4>)
 80077a4:	f7fa fd1a 	bl	80021dc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80077a8:	4b0f      	ldr	r3, [pc, #60]	; (80077e8 <HAL_PCD_MspInit+0xa0>)
 80077aa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80077ac:	4a0e      	ldr	r2, [pc, #56]	; (80077e8 <HAL_PCD_MspInit+0xa0>)
 80077ae:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80077b2:	6353      	str	r3, [r2, #52]	; 0x34
 80077b4:	2300      	movs	r3, #0
 80077b6:	60fb      	str	r3, [r7, #12]
 80077b8:	4b0b      	ldr	r3, [pc, #44]	; (80077e8 <HAL_PCD_MspInit+0xa0>)
 80077ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077bc:	4a0a      	ldr	r2, [pc, #40]	; (80077e8 <HAL_PCD_MspInit+0xa0>)
 80077be:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80077c2:	6453      	str	r3, [r2, #68]	; 0x44
 80077c4:	4b08      	ldr	r3, [pc, #32]	; (80077e8 <HAL_PCD_MspInit+0xa0>)
 80077c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80077c8:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80077cc:	60fb      	str	r3, [r7, #12]
 80077ce:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80077d0:	2200      	movs	r2, #0
 80077d2:	2100      	movs	r1, #0
 80077d4:	2043      	movs	r0, #67	; 0x43
 80077d6:	f7fa f95a 	bl	8001a8e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 80077da:	2043      	movs	r0, #67	; 0x43
 80077dc:	f7fa f973 	bl	8001ac6 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 80077e0:	bf00      	nop
 80077e2:	3728      	adds	r7, #40	; 0x28
 80077e4:	46bd      	mov	sp, r7
 80077e6:	bd80      	pop	{r7, pc}
 80077e8:	40023800 	.word	0x40023800
 80077ec:	40020000 	.word	0x40020000

080077f0 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80077f0:	b580      	push	{r7, lr}
 80077f2:	b082      	sub	sp, #8
 80077f4:	af00      	add	r7, sp, #0
 80077f6:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 80077fe:	687b      	ldr	r3, [r7, #4]
 8007800:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007804:	4619      	mov	r1, r3
 8007806:	4610      	mov	r0, r2
 8007808:	f7fe fc45 	bl	8006096 <USBD_LL_SetupStage>
}
 800780c:	bf00      	nop
 800780e:	3708      	adds	r7, #8
 8007810:	46bd      	mov	sp, r7
 8007812:	bd80      	pop	{r7, pc}

08007814 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b082      	sub	sp, #8
 8007818:	af00      	add	r7, sp, #0
 800781a:	6078      	str	r0, [r7, #4]
 800781c:	460b      	mov	r3, r1
 800781e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007826:	78fa      	ldrb	r2, [r7, #3]
 8007828:	6879      	ldr	r1, [r7, #4]
 800782a:	4613      	mov	r3, r2
 800782c:	00db      	lsls	r3, r3, #3
 800782e:	4413      	add	r3, r2
 8007830:	009b      	lsls	r3, r3, #2
 8007832:	440b      	add	r3, r1
 8007834:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007838:	681a      	ldr	r2, [r3, #0]
 800783a:	78fb      	ldrb	r3, [r7, #3]
 800783c:	4619      	mov	r1, r3
 800783e:	f7fe fc7f 	bl	8006140 <USBD_LL_DataOutStage>
}
 8007842:	bf00      	nop
 8007844:	3708      	adds	r7, #8
 8007846:	46bd      	mov	sp, r7
 8007848:	bd80      	pop	{r7, pc}

0800784a <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800784a:	b580      	push	{r7, lr}
 800784c:	b082      	sub	sp, #8
 800784e:	af00      	add	r7, sp, #0
 8007850:	6078      	str	r0, [r7, #4]
 8007852:	460b      	mov	r3, r1
 8007854:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 800785c:	78fa      	ldrb	r2, [r7, #3]
 800785e:	6879      	ldr	r1, [r7, #4]
 8007860:	4613      	mov	r3, r2
 8007862:	00db      	lsls	r3, r3, #3
 8007864:	4413      	add	r3, r2
 8007866:	009b      	lsls	r3, r3, #2
 8007868:	440b      	add	r3, r1
 800786a:	334c      	adds	r3, #76	; 0x4c
 800786c:	681a      	ldr	r2, [r3, #0]
 800786e:	78fb      	ldrb	r3, [r7, #3]
 8007870:	4619      	mov	r1, r3
 8007872:	f7fe fd18 	bl	80062a6 <USBD_LL_DataInStage>
}
 8007876:	bf00      	nop
 8007878:	3708      	adds	r7, #8
 800787a:	46bd      	mov	sp, r7
 800787c:	bd80      	pop	{r7, pc}

0800787e <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800787e:	b580      	push	{r7, lr}
 8007880:	b082      	sub	sp, #8
 8007882:	af00      	add	r7, sp, #0
 8007884:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 800788c:	4618      	mov	r0, r3
 800788e:	f7fe fe4c 	bl	800652a <USBD_LL_SOF>
}
 8007892:	bf00      	nop
 8007894:	3708      	adds	r7, #8
 8007896:	46bd      	mov	sp, r7
 8007898:	bd80      	pop	{r7, pc}

0800789a <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 800789a:	b580      	push	{r7, lr}
 800789c:	b084      	sub	sp, #16
 800789e:	af00      	add	r7, sp, #0
 80078a0:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 80078a2:	2301      	movs	r3, #1
 80078a4:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	68db      	ldr	r3, [r3, #12]
 80078aa:	2b02      	cmp	r3, #2
 80078ac:	d001      	beq.n	80078b2 <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 80078ae:	f7f9 fa6b 	bl	8000d88 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 80078b2:	687b      	ldr	r3, [r7, #4]
 80078b4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078b8:	7bfa      	ldrb	r2, [r7, #15]
 80078ba:	4611      	mov	r1, r2
 80078bc:	4618      	mov	r0, r3
 80078be:	f7fe fdf6 	bl	80064ae <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078c8:	4618      	mov	r0, r3
 80078ca:	f7fe fd9e 	bl	800640a <USBD_LL_Reset>
}
 80078ce:	bf00      	nop
 80078d0:	3710      	adds	r7, #16
 80078d2:	46bd      	mov	sp, r7
 80078d4:	bd80      	pop	{r7, pc}
	...

080078d8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80078d8:	b580      	push	{r7, lr}
 80078da:	b082      	sub	sp, #8
 80078dc:	af00      	add	r7, sp, #0
 80078de:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80078e6:	4618      	mov	r0, r3
 80078e8:	f7fe fdf1 	bl	80064ce <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	687a      	ldr	r2, [r7, #4]
 80078f8:	6812      	ldr	r2, [r2, #0]
 80078fa:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 80078fe:	f043 0301 	orr.w	r3, r3, #1
 8007902:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	6a1b      	ldr	r3, [r3, #32]
 8007908:	2b00      	cmp	r3, #0
 800790a:	d005      	beq.n	8007918 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 800790c:	4b04      	ldr	r3, [pc, #16]	; (8007920 <HAL_PCD_SuspendCallback+0x48>)
 800790e:	691b      	ldr	r3, [r3, #16]
 8007910:	4a03      	ldr	r2, [pc, #12]	; (8007920 <HAL_PCD_SuspendCallback+0x48>)
 8007912:	f043 0306 	orr.w	r3, r3, #6
 8007916:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007918:	bf00      	nop
 800791a:	3708      	adds	r7, #8
 800791c:	46bd      	mov	sp, r7
 800791e:	bd80      	pop	{r7, pc}
 8007920:	e000ed00 	.word	0xe000ed00

08007924 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007924:	b580      	push	{r7, lr}
 8007926:	b082      	sub	sp, #8
 8007928:	af00      	add	r7, sp, #0
 800792a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007932:	4618      	mov	r0, r3
 8007934:	f7fe fde1 	bl	80064fa <USBD_LL_Resume>
}
 8007938:	bf00      	nop
 800793a:	3708      	adds	r7, #8
 800793c:	46bd      	mov	sp, r7
 800793e:	bd80      	pop	{r7, pc}

08007940 <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007940:	b580      	push	{r7, lr}
 8007942:	b082      	sub	sp, #8
 8007944:	af00      	add	r7, sp, #0
 8007946:	6078      	str	r0, [r7, #4]
 8007948:	460b      	mov	r3, r1
 800794a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007952:	78fa      	ldrb	r2, [r7, #3]
 8007954:	4611      	mov	r1, r2
 8007956:	4618      	mov	r0, r3
 8007958:	f7fe fe39 	bl	80065ce <USBD_LL_IsoOUTIncomplete>
}
 800795c:	bf00      	nop
 800795e:	3708      	adds	r7, #8
 8007960:	46bd      	mov	sp, r7
 8007962:	bd80      	pop	{r7, pc}

08007964 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007964:	b580      	push	{r7, lr}
 8007966:	b082      	sub	sp, #8
 8007968:	af00      	add	r7, sp, #0
 800796a:	6078      	str	r0, [r7, #4]
 800796c:	460b      	mov	r3, r1
 800796e:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007976:	78fa      	ldrb	r2, [r7, #3]
 8007978:	4611      	mov	r1, r2
 800797a:	4618      	mov	r0, r3
 800797c:	f7fe fdf5 	bl	800656a <USBD_LL_IsoINIncomplete>
}
 8007980:	bf00      	nop
 8007982:	3708      	adds	r7, #8
 8007984:	46bd      	mov	sp, r7
 8007986:	bd80      	pop	{r7, pc}

08007988 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007988:	b580      	push	{r7, lr}
 800798a:	b082      	sub	sp, #8
 800798c:	af00      	add	r7, sp, #0
 800798e:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007996:	4618      	mov	r0, r3
 8007998:	f7fe fe4b 	bl	8006632 <USBD_LL_DevConnected>
}
 800799c:	bf00      	nop
 800799e:	3708      	adds	r7, #8
 80079a0:	46bd      	mov	sp, r7
 80079a2:	bd80      	pop	{r7, pc}

080079a4 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80079a4:	b580      	push	{r7, lr}
 80079a6:	b082      	sub	sp, #8
 80079a8:	af00      	add	r7, sp, #0
 80079aa:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 80079b2:	4618      	mov	r0, r3
 80079b4:	f7fe fe48 	bl	8006648 <USBD_LL_DevDisconnected>
}
 80079b8:	bf00      	nop
 80079ba:	3708      	adds	r7, #8
 80079bc:	46bd      	mov	sp, r7
 80079be:	bd80      	pop	{r7, pc}

080079c0 <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 80079c0:	b580      	push	{r7, lr}
 80079c2:	b082      	sub	sp, #8
 80079c4:	af00      	add	r7, sp, #0
 80079c6:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	781b      	ldrb	r3, [r3, #0]
 80079cc:	2b00      	cmp	r3, #0
 80079ce:	d13c      	bne.n	8007a4a <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 80079d0:	4a20      	ldr	r2, [pc, #128]	; (8007a54 <USBD_LL_Init+0x94>)
 80079d2:	687b      	ldr	r3, [r7, #4]
 80079d4:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	4a1e      	ldr	r2, [pc, #120]	; (8007a54 <USBD_LL_Init+0x94>)
 80079dc:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80079e0:	4b1c      	ldr	r3, [pc, #112]	; (8007a54 <USBD_LL_Init+0x94>)
 80079e2:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80079e6:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 80079e8:	4b1a      	ldr	r3, [pc, #104]	; (8007a54 <USBD_LL_Init+0x94>)
 80079ea:	2204      	movs	r2, #4
 80079ec:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80079ee:	4b19      	ldr	r3, [pc, #100]	; (8007a54 <USBD_LL_Init+0x94>)
 80079f0:	2202      	movs	r2, #2
 80079f2:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80079f4:	4b17      	ldr	r3, [pc, #92]	; (8007a54 <USBD_LL_Init+0x94>)
 80079f6:	2200      	movs	r2, #0
 80079f8:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80079fa:	4b16      	ldr	r3, [pc, #88]	; (8007a54 <USBD_LL_Init+0x94>)
 80079fc:	2202      	movs	r2, #2
 80079fe:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007a00:	4b14      	ldr	r3, [pc, #80]	; (8007a54 <USBD_LL_Init+0x94>)
 8007a02:	2200      	movs	r2, #0
 8007a04:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007a06:	4b13      	ldr	r3, [pc, #76]	; (8007a54 <USBD_LL_Init+0x94>)
 8007a08:	2200      	movs	r2, #0
 8007a0a:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007a0c:	4b11      	ldr	r3, [pc, #68]	; (8007a54 <USBD_LL_Init+0x94>)
 8007a0e:	2200      	movs	r2, #0
 8007a10:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007a12:	4b10      	ldr	r3, [pc, #64]	; (8007a54 <USBD_LL_Init+0x94>)
 8007a14:	2200      	movs	r2, #0
 8007a16:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007a18:	4b0e      	ldr	r3, [pc, #56]	; (8007a54 <USBD_LL_Init+0x94>)
 8007a1a:	2200      	movs	r2, #0
 8007a1c:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007a1e:	480d      	ldr	r0, [pc, #52]	; (8007a54 <USBD_LL_Init+0x94>)
 8007a20:	f7fa fd78 	bl	8002514 <HAL_PCD_Init>
 8007a24:	4603      	mov	r3, r0
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d001      	beq.n	8007a2e <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007a2a:	f7f9 f9ad 	bl	8000d88 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007a2e:	2180      	movs	r1, #128	; 0x80
 8007a30:	4808      	ldr	r0, [pc, #32]	; (8007a54 <USBD_LL_Init+0x94>)
 8007a32:	f7fb ffb8 	bl	80039a6 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007a36:	2240      	movs	r2, #64	; 0x40
 8007a38:	2100      	movs	r1, #0
 8007a3a:	4806      	ldr	r0, [pc, #24]	; (8007a54 <USBD_LL_Init+0x94>)
 8007a3c:	f7fb ff6c 	bl	8003918 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007a40:	2280      	movs	r2, #128	; 0x80
 8007a42:	2101      	movs	r1, #1
 8007a44:	4803      	ldr	r0, [pc, #12]	; (8007a54 <USBD_LL_Init+0x94>)
 8007a46:	f7fb ff67 	bl	8003918 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007a4a:	2300      	movs	r3, #0
}
 8007a4c:	4618      	mov	r0, r3
 8007a4e:	3708      	adds	r7, #8
 8007a50:	46bd      	mov	sp, r7
 8007a52:	bd80      	pop	{r7, pc}
 8007a54:	20000c7c 	.word	0x20000c7c

08007a58 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b084      	sub	sp, #16
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007a60:	2300      	movs	r3, #0
 8007a62:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007a64:	2300      	movs	r3, #0
 8007a66:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7fa fe6d 	bl	800274e <HAL_PCD_Start>
 8007a74:	4603      	mov	r3, r0
 8007a76:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007a78:	7bfb      	ldrb	r3, [r7, #15]
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	f000 f930 	bl	8007ce0 <USBD_Get_USB_Status>
 8007a80:	4603      	mov	r3, r0
 8007a82:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007a84:	7bbb      	ldrb	r3, [r7, #14]
}
 8007a86:	4618      	mov	r0, r3
 8007a88:	3710      	adds	r7, #16
 8007a8a:	46bd      	mov	sp, r7
 8007a8c:	bd80      	pop	{r7, pc}

08007a8e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007a8e:	b580      	push	{r7, lr}
 8007a90:	b084      	sub	sp, #16
 8007a92:	af00      	add	r7, sp, #0
 8007a94:	6078      	str	r0, [r7, #4]
 8007a96:	4608      	mov	r0, r1
 8007a98:	4611      	mov	r1, r2
 8007a9a:	461a      	mov	r2, r3
 8007a9c:	4603      	mov	r3, r0
 8007a9e:	70fb      	strb	r3, [r7, #3]
 8007aa0:	460b      	mov	r3, r1
 8007aa2:	70bb      	strb	r3, [r7, #2]
 8007aa4:	4613      	mov	r3, r2
 8007aa6:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007aa8:	2300      	movs	r3, #0
 8007aaa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aac:	2300      	movs	r3, #0
 8007aae:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007ab0:	687b      	ldr	r3, [r7, #4]
 8007ab2:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007ab6:	78bb      	ldrb	r3, [r7, #2]
 8007ab8:	883a      	ldrh	r2, [r7, #0]
 8007aba:	78f9      	ldrb	r1, [r7, #3]
 8007abc:	f7fb fb3e 	bl	800313c <HAL_PCD_EP_Open>
 8007ac0:	4603      	mov	r3, r0
 8007ac2:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ac4:	7bfb      	ldrb	r3, [r7, #15]
 8007ac6:	4618      	mov	r0, r3
 8007ac8:	f000 f90a 	bl	8007ce0 <USBD_Get_USB_Status>
 8007acc:	4603      	mov	r3, r0
 8007ace:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ad0:	7bbb      	ldrb	r3, [r7, #14]
}
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	3710      	adds	r7, #16
 8007ad6:	46bd      	mov	sp, r7
 8007ad8:	bd80      	pop	{r7, pc}

08007ada <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ada:	b580      	push	{r7, lr}
 8007adc:	b084      	sub	sp, #16
 8007ade:	af00      	add	r7, sp, #0
 8007ae0:	6078      	str	r0, [r7, #4]
 8007ae2:	460b      	mov	r3, r1
 8007ae4:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007aea:	2300      	movs	r3, #0
 8007aec:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007af4:	78fa      	ldrb	r2, [r7, #3]
 8007af6:	4611      	mov	r1, r2
 8007af8:	4618      	mov	r0, r3
 8007afa:	f7fb fb87 	bl	800320c <HAL_PCD_EP_Close>
 8007afe:	4603      	mov	r3, r0
 8007b00:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b02:	7bfb      	ldrb	r3, [r7, #15]
 8007b04:	4618      	mov	r0, r3
 8007b06:	f000 f8eb 	bl	8007ce0 <USBD_Get_USB_Status>
 8007b0a:	4603      	mov	r3, r0
 8007b0c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b0e:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b10:	4618      	mov	r0, r3
 8007b12:	3710      	adds	r7, #16
 8007b14:	46bd      	mov	sp, r7
 8007b16:	bd80      	pop	{r7, pc}

08007b18 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b084      	sub	sp, #16
 8007b1c:	af00      	add	r7, sp, #0
 8007b1e:	6078      	str	r0, [r7, #4]
 8007b20:	460b      	mov	r3, r1
 8007b22:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b24:	2300      	movs	r3, #0
 8007b26:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b28:	2300      	movs	r3, #0
 8007b2a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007b2c:	687b      	ldr	r3, [r7, #4]
 8007b2e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b32:	78fa      	ldrb	r2, [r7, #3]
 8007b34:	4611      	mov	r1, r2
 8007b36:	4618      	mov	r0, r3
 8007b38:	f7fb fc47 	bl	80033ca <HAL_PCD_EP_SetStall>
 8007b3c:	4603      	mov	r3, r0
 8007b3e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b40:	7bfb      	ldrb	r3, [r7, #15]
 8007b42:	4618      	mov	r0, r3
 8007b44:	f000 f8cc 	bl	8007ce0 <USBD_Get_USB_Status>
 8007b48:	4603      	mov	r3, r0
 8007b4a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b4c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b4e:	4618      	mov	r0, r3
 8007b50:	3710      	adds	r7, #16
 8007b52:	46bd      	mov	sp, r7
 8007b54:	bd80      	pop	{r7, pc}

08007b56 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b56:	b580      	push	{r7, lr}
 8007b58:	b084      	sub	sp, #16
 8007b5a:	af00      	add	r7, sp, #0
 8007b5c:	6078      	str	r0, [r7, #4]
 8007b5e:	460b      	mov	r3, r1
 8007b60:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007b62:	2300      	movs	r3, #0
 8007b64:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007b66:	2300      	movs	r3, #0
 8007b68:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007b70:	78fa      	ldrb	r2, [r7, #3]
 8007b72:	4611      	mov	r1, r2
 8007b74:	4618      	mov	r0, r3
 8007b76:	f7fb fc8c 	bl	8003492 <HAL_PCD_EP_ClrStall>
 8007b7a:	4603      	mov	r3, r0
 8007b7c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007b7e:	7bfb      	ldrb	r3, [r7, #15]
 8007b80:	4618      	mov	r0, r3
 8007b82:	f000 f8ad 	bl	8007ce0 <USBD_Get_USB_Status>
 8007b86:	4603      	mov	r3, r0
 8007b88:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007b8a:	7bbb      	ldrb	r3, [r7, #14]
}
 8007b8c:	4618      	mov	r0, r3
 8007b8e:	3710      	adds	r7, #16
 8007b90:	46bd      	mov	sp, r7
 8007b92:	bd80      	pop	{r7, pc}

08007b94 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007b94:	b480      	push	{r7}
 8007b96:	b085      	sub	sp, #20
 8007b98:	af00      	add	r7, sp, #0
 8007b9a:	6078      	str	r0, [r7, #4]
 8007b9c:	460b      	mov	r3, r1
 8007b9e:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ba6:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007ba8:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	da0b      	bge.n	8007bc8 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007bb0:	78fb      	ldrb	r3, [r7, #3]
 8007bb2:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bb6:	68f9      	ldr	r1, [r7, #12]
 8007bb8:	4613      	mov	r3, r2
 8007bba:	00db      	lsls	r3, r3, #3
 8007bbc:	4413      	add	r3, r2
 8007bbe:	009b      	lsls	r3, r3, #2
 8007bc0:	440b      	add	r3, r1
 8007bc2:	333e      	adds	r3, #62	; 0x3e
 8007bc4:	781b      	ldrb	r3, [r3, #0]
 8007bc6:	e00b      	b.n	8007be0 <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007bc8:	78fb      	ldrb	r3, [r7, #3]
 8007bca:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007bce:	68f9      	ldr	r1, [r7, #12]
 8007bd0:	4613      	mov	r3, r2
 8007bd2:	00db      	lsls	r3, r3, #3
 8007bd4:	4413      	add	r3, r2
 8007bd6:	009b      	lsls	r3, r3, #2
 8007bd8:	440b      	add	r3, r1
 8007bda:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007bde:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007be0:	4618      	mov	r0, r3
 8007be2:	3714      	adds	r7, #20
 8007be4:	46bd      	mov	sp, r7
 8007be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bea:	4770      	bx	lr

08007bec <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007bec:	b580      	push	{r7, lr}
 8007bee:	b084      	sub	sp, #16
 8007bf0:	af00      	add	r7, sp, #0
 8007bf2:	6078      	str	r0, [r7, #4]
 8007bf4:	460b      	mov	r3, r1
 8007bf6:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007bf8:	2300      	movs	r3, #0
 8007bfa:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007bfc:	2300      	movs	r3, #0
 8007bfe:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007c06:	78fa      	ldrb	r2, [r7, #3]
 8007c08:	4611      	mov	r1, r2
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	f7fb fa71 	bl	80030f2 <HAL_PCD_SetAddress>
 8007c10:	4603      	mov	r3, r0
 8007c12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c14:	7bfb      	ldrb	r3, [r7, #15]
 8007c16:	4618      	mov	r0, r3
 8007c18:	f000 f862 	bl	8007ce0 <USBD_Get_USB_Status>
 8007c1c:	4603      	mov	r3, r0
 8007c1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007c20:	7bbb      	ldrb	r3, [r7, #14]
}
 8007c22:	4618      	mov	r0, r3
 8007c24:	3710      	adds	r7, #16
 8007c26:	46bd      	mov	sp, r7
 8007c28:	bd80      	pop	{r7, pc}

08007c2a <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c2a:	b580      	push	{r7, lr}
 8007c2c:	b086      	sub	sp, #24
 8007c2e:	af00      	add	r7, sp, #0
 8007c30:	60f8      	str	r0, [r7, #12]
 8007c32:	607a      	str	r2, [r7, #4]
 8007c34:	603b      	str	r3, [r7, #0]
 8007c36:	460b      	mov	r3, r1
 8007c38:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c3a:	2300      	movs	r3, #0
 8007c3c:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c3e:	2300      	movs	r3, #0
 8007c40:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007c42:	68fb      	ldr	r3, [r7, #12]
 8007c44:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c48:	7af9      	ldrb	r1, [r7, #11]
 8007c4a:	683b      	ldr	r3, [r7, #0]
 8007c4c:	687a      	ldr	r2, [r7, #4]
 8007c4e:	f7fb fb72 	bl	8003336 <HAL_PCD_EP_Transmit>
 8007c52:	4603      	mov	r3, r0
 8007c54:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c56:	7dfb      	ldrb	r3, [r7, #23]
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f000 f841 	bl	8007ce0 <USBD_Get_USB_Status>
 8007c5e:	4603      	mov	r3, r0
 8007c60:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007c62:	7dbb      	ldrb	r3, [r7, #22]
}
 8007c64:	4618      	mov	r0, r3
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}

08007c6c <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007c6c:	b580      	push	{r7, lr}
 8007c6e:	b086      	sub	sp, #24
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	60f8      	str	r0, [r7, #12]
 8007c74:	607a      	str	r2, [r7, #4]
 8007c76:	603b      	str	r3, [r7, #0]
 8007c78:	460b      	mov	r3, r1
 8007c7a:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007c7c:	2300      	movs	r3, #0
 8007c7e:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007c80:	2300      	movs	r3, #0
 8007c82:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8007c84:	68fb      	ldr	r3, [r7, #12]
 8007c86:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007c8a:	7af9      	ldrb	r1, [r7, #11]
 8007c8c:	683b      	ldr	r3, [r7, #0]
 8007c8e:	687a      	ldr	r2, [r7, #4]
 8007c90:	f7fb fb06 	bl	80032a0 <HAL_PCD_EP_Receive>
 8007c94:	4603      	mov	r3, r0
 8007c96:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007c98:	7dfb      	ldrb	r3, [r7, #23]
 8007c9a:	4618      	mov	r0, r3
 8007c9c:	f000 f820 	bl	8007ce0 <USBD_Get_USB_Status>
 8007ca0:	4603      	mov	r3, r0
 8007ca2:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ca4:	7dbb      	ldrb	r3, [r7, #22]
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	3718      	adds	r7, #24
 8007caa:	46bd      	mov	sp, r7
 8007cac:	bd80      	pop	{r7, pc}
	...

08007cb0 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8007cb0:	b480      	push	{r7}
 8007cb2:	b083      	sub	sp, #12
 8007cb4:	af00      	add	r7, sp, #0
 8007cb6:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8007cb8:	4b03      	ldr	r3, [pc, #12]	; (8007cc8 <USBD_static_malloc+0x18>)
}
 8007cba:	4618      	mov	r0, r3
 8007cbc:	370c      	adds	r7, #12
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	20001188 	.word	0x20001188

08007ccc <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8007ccc:	b480      	push	{r7}
 8007cce:	b083      	sub	sp, #12
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]

}
 8007cd4:	bf00      	nop
 8007cd6:	370c      	adds	r7, #12
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cde:	4770      	bx	lr

08007ce0 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8007ce0:	b480      	push	{r7}
 8007ce2:	b085      	sub	sp, #20
 8007ce4:	af00      	add	r7, sp, #0
 8007ce6:	4603      	mov	r3, r0
 8007ce8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007cea:	2300      	movs	r3, #0
 8007cec:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8007cee:	79fb      	ldrb	r3, [r7, #7]
 8007cf0:	2b03      	cmp	r3, #3
 8007cf2:	d817      	bhi.n	8007d24 <USBD_Get_USB_Status+0x44>
 8007cf4:	a201      	add	r2, pc, #4	; (adr r2, 8007cfc <USBD_Get_USB_Status+0x1c>)
 8007cf6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007cfa:	bf00      	nop
 8007cfc:	08007d0d 	.word	0x08007d0d
 8007d00:	08007d13 	.word	0x08007d13
 8007d04:	08007d19 	.word	0x08007d19
 8007d08:	08007d1f 	.word	0x08007d1f
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8007d0c:	2300      	movs	r3, #0
 8007d0e:	73fb      	strb	r3, [r7, #15]
    break;
 8007d10:	e00b      	b.n	8007d2a <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8007d12:	2303      	movs	r3, #3
 8007d14:	73fb      	strb	r3, [r7, #15]
    break;
 8007d16:	e008      	b.n	8007d2a <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8007d18:	2301      	movs	r3, #1
 8007d1a:	73fb      	strb	r3, [r7, #15]
    break;
 8007d1c:	e005      	b.n	8007d2a <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8007d1e:	2303      	movs	r3, #3
 8007d20:	73fb      	strb	r3, [r7, #15]
    break;
 8007d22:	e002      	b.n	8007d2a <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 8007d24:	2303      	movs	r3, #3
 8007d26:	73fb      	strb	r3, [r7, #15]
    break;
 8007d28:	bf00      	nop
  }
  return usb_status;
 8007d2a:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d2c:	4618      	mov	r0, r3
 8007d2e:	3714      	adds	r7, #20
 8007d30:	46bd      	mov	sp, r7
 8007d32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d36:	4770      	bx	lr

08007d38 <__libc_init_array>:
 8007d38:	b570      	push	{r4, r5, r6, lr}
 8007d3a:	4d0d      	ldr	r5, [pc, #52]	; (8007d70 <__libc_init_array+0x38>)
 8007d3c:	4c0d      	ldr	r4, [pc, #52]	; (8007d74 <__libc_init_array+0x3c>)
 8007d3e:	1b64      	subs	r4, r4, r5
 8007d40:	10a4      	asrs	r4, r4, #2
 8007d42:	2600      	movs	r6, #0
 8007d44:	42a6      	cmp	r6, r4
 8007d46:	d109      	bne.n	8007d5c <__libc_init_array+0x24>
 8007d48:	4d0b      	ldr	r5, [pc, #44]	; (8007d78 <__libc_init_array+0x40>)
 8007d4a:	4c0c      	ldr	r4, [pc, #48]	; (8007d7c <__libc_init_array+0x44>)
 8007d4c:	f000 f820 	bl	8007d90 <_init>
 8007d50:	1b64      	subs	r4, r4, r5
 8007d52:	10a4      	asrs	r4, r4, #2
 8007d54:	2600      	movs	r6, #0
 8007d56:	42a6      	cmp	r6, r4
 8007d58:	d105      	bne.n	8007d66 <__libc_init_array+0x2e>
 8007d5a:	bd70      	pop	{r4, r5, r6, pc}
 8007d5c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d60:	4798      	blx	r3
 8007d62:	3601      	adds	r6, #1
 8007d64:	e7ee      	b.n	8007d44 <__libc_init_array+0xc>
 8007d66:	f855 3b04 	ldr.w	r3, [r5], #4
 8007d6a:	4798      	blx	r3
 8007d6c:	3601      	adds	r6, #1
 8007d6e:	e7f2      	b.n	8007d56 <__libc_init_array+0x1e>
 8007d70:	08007e20 	.word	0x08007e20
 8007d74:	08007e20 	.word	0x08007e20
 8007d78:	08007e20 	.word	0x08007e20
 8007d7c:	08007e24 	.word	0x08007e24

08007d80 <memset>:
 8007d80:	4402      	add	r2, r0
 8007d82:	4603      	mov	r3, r0
 8007d84:	4293      	cmp	r3, r2
 8007d86:	d100      	bne.n	8007d8a <memset+0xa>
 8007d88:	4770      	bx	lr
 8007d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8007d8e:	e7f9      	b.n	8007d84 <memset+0x4>

08007d90 <_init>:
 8007d90:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d92:	bf00      	nop
 8007d94:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007d96:	bc08      	pop	{r3}
 8007d98:	469e      	mov	lr, r3
 8007d9a:	4770      	bx	lr

08007d9c <_fini>:
 8007d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9e:	bf00      	nop
 8007da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da2:	bc08      	pop	{r3}
 8007da4:	469e      	mov	lr, r3
 8007da6:	4770      	bx	lr
