
chorduroi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007fb0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000070  08008144  08008144  00018144  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080081b4  080081b4  000204e4  2**0
                  CONTENTS
  4 .ARM          00000008  080081b4  080081b4  000181b4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080081bc  080081bc  000204e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080081bc  080081bc  000181bc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080081c0  080081c0  000181c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000004e4  20000000  080081c4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000cb8  200004e4  080086a8  000204e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000119c  080086a8  0002119c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000204e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00010c0f  00000000  00000000  00020514  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002f1b  00000000  00000000  00031123  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d00  00000000  00000000  00034040  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000b90  00000000  00000000  00034d40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00019cc3  00000000  00000000  000358d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116e9  00000000  00000000  0004f593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00093693  00000000  00000000  00060c7c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f430f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000033c8  00000000  00000000  000f4360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200004e4 	.word	0x200004e4
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800812c 	.word	0x0800812c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200004e8 	.word	0x200004e8
 80001d0:	0800812c 	.word	0x0800812c

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <checkKeyPins>:



// Update the key-press array.
// This is where the keys "index" is determined.
void checkKeyPins(uint8_t* keyRef){
 80004d8:	b590      	push	{r4, r7, lr}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	6078      	str	r0, [r7, #4]
	keyRef[4] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_4);
 80004e0:	687b      	ldr	r3, [r7, #4]
 80004e2:	1d1c      	adds	r4, r3, #4
 80004e4:	2110      	movs	r1, #16
 80004e6:	4842      	ldr	r0, [pc, #264]	; (80005f0 <checkKeyPins+0x118>)
 80004e8:	f002 f99a 	bl	8002820 <HAL_GPIO_ReadPin>
 80004ec:	4603      	mov	r3, r0
 80004ee:	7023      	strb	r3, [r4, #0]
	keyRef[0] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_13);
 80004f0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80004f4:	483f      	ldr	r0, [pc, #252]	; (80005f4 <checkKeyPins+0x11c>)
 80004f6:	f002 f993 	bl	8002820 <HAL_GPIO_ReadPin>
 80004fa:	4603      	mov	r3, r0
 80004fc:	461a      	mov	r2, r3
 80004fe:	687b      	ldr	r3, [r7, #4]
 8000500:	701a      	strb	r2, [r3, #0]
	keyRef[1] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_15);
 8000502:	687b      	ldr	r3, [r7, #4]
 8000504:	1c5c      	adds	r4, r3, #1
 8000506:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800050a:	483a      	ldr	r0, [pc, #232]	; (80005f4 <checkKeyPins+0x11c>)
 800050c:	f002 f988 	bl	8002820 <HAL_GPIO_ReadPin>
 8000510:	4603      	mov	r3, r0
 8000512:	7023      	strb	r3, [r4, #0]
	keyRef[2] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_4);
 8000514:	687b      	ldr	r3, [r7, #4]
 8000516:	1c9c      	adds	r4, r3, #2
 8000518:	2110      	movs	r1, #16
 800051a:	4836      	ldr	r0, [pc, #216]	; (80005f4 <checkKeyPins+0x11c>)
 800051c:	f002 f980 	bl	8002820 <HAL_GPIO_ReadPin>
 8000520:	4603      	mov	r3, r0
 8000522:	7023      	strb	r3, [r4, #0]
	keyRef[3] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_5);
 8000524:	687b      	ldr	r3, [r7, #4]
 8000526:	1cdc      	adds	r4, r3, #3
 8000528:	2120      	movs	r1, #32
 800052a:	4832      	ldr	r0, [pc, #200]	; (80005f4 <checkKeyPins+0x11c>)
 800052c:	f002 f978 	bl	8002820 <HAL_GPIO_ReadPin>
 8000530:	4603      	mov	r3, r0
 8000532:	7023      	strb	r3, [r4, #0]
	keyRef[8] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_6);
 8000534:	687b      	ldr	r3, [r7, #4]
 8000536:	f103 0408 	add.w	r4, r3, #8
 800053a:	2140      	movs	r1, #64	; 0x40
 800053c:	482d      	ldr	r0, [pc, #180]	; (80005f4 <checkKeyPins+0x11c>)
 800053e:	f002 f96f 	bl	8002820 <HAL_GPIO_ReadPin>
 8000542:	4603      	mov	r3, r0
 8000544:	7023      	strb	r3, [r4, #0]
	keyRef[9] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_7);
 8000546:	687b      	ldr	r3, [r7, #4]
 8000548:	f103 0409 	add.w	r4, r3, #9
 800054c:	2180      	movs	r1, #128	; 0x80
 800054e:	4829      	ldr	r0, [pc, #164]	; (80005f4 <checkKeyPins+0x11c>)
 8000550:	f002 f966 	bl	8002820 <HAL_GPIO_ReadPin>
 8000554:	4603      	mov	r3, r0
 8000556:	7023      	strb	r3, [r4, #0]
	keyRef[10] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_8);
 8000558:	687b      	ldr	r3, [r7, #4]
 800055a:	f103 040a 	add.w	r4, r3, #10
 800055e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8000562:	4824      	ldr	r0, [pc, #144]	; (80005f4 <checkKeyPins+0x11c>)
 8000564:	f002 f95c 	bl	8002820 <HAL_GPIO_ReadPin>
 8000568:	4603      	mov	r3, r0
 800056a:	7023      	strb	r3, [r4, #0]
	keyRef[11] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_9);
 800056c:	687b      	ldr	r3, [r7, #4]
 800056e:	f103 040b 	add.w	r4, r3, #11
 8000572:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000576:	481f      	ldr	r0, [pc, #124]	; (80005f4 <checkKeyPins+0x11c>)
 8000578:	f002 f952 	bl	8002820 <HAL_GPIO_ReadPin>
 800057c:	4603      	mov	r3, r0
 800057e:	7023      	strb	r3, [r4, #0]
	keyRef[5] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_5);
 8000580:	687b      	ldr	r3, [r7, #4]
 8000582:	1d5c      	adds	r4, r3, #5
 8000584:	2120      	movs	r1, #32
 8000586:	481a      	ldr	r0, [pc, #104]	; (80005f0 <checkKeyPins+0x118>)
 8000588:	f002 f94a 	bl	8002820 <HAL_GPIO_ReadPin>
 800058c:	4603      	mov	r3, r0
 800058e:	7023      	strb	r3, [r4, #0]
	keyRef[6] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_6);
 8000590:	687b      	ldr	r3, [r7, #4]
 8000592:	1d9c      	adds	r4, r3, #6
 8000594:	2140      	movs	r1, #64	; 0x40
 8000596:	4816      	ldr	r0, [pc, #88]	; (80005f0 <checkKeyPins+0x118>)
 8000598:	f002 f942 	bl	8002820 <HAL_GPIO_ReadPin>
 800059c:	4603      	mov	r3, r0
 800059e:	7023      	strb	r3, [r4, #0]
	keyRef[7] = HAL_GPIO_ReadPin(GPIOA, GPIO_PIN_7);
 80005a0:	687b      	ldr	r3, [r7, #4]
 80005a2:	1ddc      	adds	r4, r3, #7
 80005a4:	2180      	movs	r1, #128	; 0x80
 80005a6:	4812      	ldr	r0, [pc, #72]	; (80005f0 <checkKeyPins+0x118>)
 80005a8:	f002 f93a 	bl	8002820 <HAL_GPIO_ReadPin>
 80005ac:	4603      	mov	r3, r0
 80005ae:	7023      	strb	r3, [r4, #0]
	keyRef[12] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_0);
 80005b0:	687b      	ldr	r3, [r7, #4]
 80005b2:	f103 040c 	add.w	r4, r3, #12
 80005b6:	2101      	movs	r1, #1
 80005b8:	480e      	ldr	r0, [pc, #56]	; (80005f4 <checkKeyPins+0x11c>)
 80005ba:	f002 f931 	bl	8002820 <HAL_GPIO_ReadPin>
 80005be:	4603      	mov	r3, r0
 80005c0:	7023      	strb	r3, [r4, #0]
	keyRef[13] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_1);
 80005c2:	687b      	ldr	r3, [r7, #4]
 80005c4:	f103 040d 	add.w	r4, r3, #13
 80005c8:	2102      	movs	r1, #2
 80005ca:	480a      	ldr	r0, [pc, #40]	; (80005f4 <checkKeyPins+0x11c>)
 80005cc:	f002 f928 	bl	8002820 <HAL_GPIO_ReadPin>
 80005d0:	4603      	mov	r3, r0
 80005d2:	7023      	strb	r3, [r4, #0]
	//keyRef[14] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_2); -- Hard-fault culprit
	keyRef[15] = HAL_GPIO_ReadPin(GPIOB, GPIO_PIN_10);
 80005d4:	687b      	ldr	r3, [r7, #4]
 80005d6:	f103 040f 	add.w	r4, r3, #15
 80005da:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80005de:	4805      	ldr	r0, [pc, #20]	; (80005f4 <checkKeyPins+0x11c>)
 80005e0:	f002 f91e 	bl	8002820 <HAL_GPIO_ReadPin>
 80005e4:	4603      	mov	r3, r0
 80005e6:	7023      	strb	r3, [r4, #0]
}
 80005e8:	bf00      	nop
 80005ea:	370c      	adds	r7, #12
 80005ec:	46bd      	mov	sp, r7
 80005ee:	bd90      	pop	{r4, r7, pc}
 80005f0:	40020000 	.word	0x40020000
 80005f4:	40020400 	.word	0x40020400

080005f8 <setModByte>:


void setModByte(uint8_t* code, keyboardHIDReport* report){
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
 8000600:	6039      	str	r1, [r7, #0]
	report->MOD = report->MOD | *code;
 8000602:	683b      	ldr	r3, [r7, #0]
 8000604:	781a      	ldrb	r2, [r3, #0]
 8000606:	687b      	ldr	r3, [r7, #4]
 8000608:	781b      	ldrb	r3, [r3, #0]
 800060a:	4313      	orrs	r3, r2
 800060c:	b2da      	uxtb	r2, r3
 800060e:	683b      	ldr	r3, [r7, #0]
 8000610:	701a      	strb	r2, [r3, #0]
}
 8000612:	bf00      	nop
 8000614:	370c      	adds	r7, #12
 8000616:	46bd      	mov	sp, r7
 8000618:	f85d 7b04 	ldr.w	r7, [sp], #4
 800061c:	4770      	bx	lr

0800061e <setKeyBytes>:

void setKeyBytes(uint8_t* code, keyboardHIDReport* keyboardReport){
 800061e:	b480      	push	{r7}
 8000620:	b083      	sub	sp, #12
 8000622:	af00      	add	r7, sp, #0
 8000624:	6078      	str	r0, [r7, #4]
 8000626:	6039      	str	r1, [r7, #0]
	if(keyboardReport->K1 == 0){
 8000628:	683b      	ldr	r3, [r7, #0]
 800062a:	789b      	ldrb	r3, [r3, #2]
 800062c:	2b00      	cmp	r3, #0
 800062e:	d104      	bne.n	800063a <setKeyBytes+0x1c>
		keyboardReport->K1 = *code;
 8000630:	687b      	ldr	r3, [r7, #4]
 8000632:	781a      	ldrb	r2, [r3, #0]
 8000634:	683b      	ldr	r3, [r7, #0]
 8000636:	709a      	strb	r2, [r3, #2]
	} else if(keyboardReport->K5 == 0){
		keyboardReport->K5 = *code;
	} else if(keyboardReport->K6 == 0){
		keyboardReport->K6 = *code;
	}
}
 8000638:	e02b      	b.n	8000692 <setKeyBytes+0x74>
	} else if(keyboardReport->K2 == 0){
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	78db      	ldrb	r3, [r3, #3]
 800063e:	2b00      	cmp	r3, #0
 8000640:	d104      	bne.n	800064c <setKeyBytes+0x2e>
		keyboardReport->K2 = *code;
 8000642:	687b      	ldr	r3, [r7, #4]
 8000644:	781a      	ldrb	r2, [r3, #0]
 8000646:	683b      	ldr	r3, [r7, #0]
 8000648:	70da      	strb	r2, [r3, #3]
}
 800064a:	e022      	b.n	8000692 <setKeyBytes+0x74>
	} else if(keyboardReport->K3 == 0){
 800064c:	683b      	ldr	r3, [r7, #0]
 800064e:	791b      	ldrb	r3, [r3, #4]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d104      	bne.n	800065e <setKeyBytes+0x40>
		keyboardReport->K3 = *code;
 8000654:	687b      	ldr	r3, [r7, #4]
 8000656:	781a      	ldrb	r2, [r3, #0]
 8000658:	683b      	ldr	r3, [r7, #0]
 800065a:	711a      	strb	r2, [r3, #4]
}
 800065c:	e019      	b.n	8000692 <setKeyBytes+0x74>
	} else if(keyboardReport->K4 == 0){
 800065e:	683b      	ldr	r3, [r7, #0]
 8000660:	795b      	ldrb	r3, [r3, #5]
 8000662:	2b00      	cmp	r3, #0
 8000664:	d104      	bne.n	8000670 <setKeyBytes+0x52>
		keyboardReport->K4 = *code;
 8000666:	687b      	ldr	r3, [r7, #4]
 8000668:	781a      	ldrb	r2, [r3, #0]
 800066a:	683b      	ldr	r3, [r7, #0]
 800066c:	715a      	strb	r2, [r3, #5]
}
 800066e:	e010      	b.n	8000692 <setKeyBytes+0x74>
	} else if(keyboardReport->K5 == 0){
 8000670:	683b      	ldr	r3, [r7, #0]
 8000672:	799b      	ldrb	r3, [r3, #6]
 8000674:	2b00      	cmp	r3, #0
 8000676:	d104      	bne.n	8000682 <setKeyBytes+0x64>
		keyboardReport->K5 = *code;
 8000678:	687b      	ldr	r3, [r7, #4]
 800067a:	781a      	ldrb	r2, [r3, #0]
 800067c:	683b      	ldr	r3, [r7, #0]
 800067e:	719a      	strb	r2, [r3, #6]
}
 8000680:	e007      	b.n	8000692 <setKeyBytes+0x74>
	} else if(keyboardReport->K6 == 0){
 8000682:	683b      	ldr	r3, [r7, #0]
 8000684:	79db      	ldrb	r3, [r3, #7]
 8000686:	2b00      	cmp	r3, #0
 8000688:	d103      	bne.n	8000692 <setKeyBytes+0x74>
		keyboardReport->K6 = *code;
 800068a:	687b      	ldr	r3, [r7, #4]
 800068c:	781a      	ldrb	r2, [r3, #0]
 800068e:	683b      	ldr	r3, [r7, #0]
 8000690:	71da      	strb	r2, [r3, #7]
}
 8000692:	bf00      	nop
 8000694:	370c      	adds	r7, #12
 8000696:	46bd      	mov	sp, r7
 8000698:	f85d 7b04 	ldr.w	r7, [sp], #4
 800069c:	4770      	bx	lr

0800069e <setReport>:

//TODO physical vs imp priority could be configurable
// Redundant?
void setReport(int keypress, Layer* layer, keyboardHIDReport* keyboardReport){
 800069e:	b580      	push	{r7, lr}
 80006a0:	b086      	sub	sp, #24
 80006a2:	af00      	add	r7, sp, #0
 80006a4:	60f8      	str	r0, [r7, #12]
 80006a6:	60b9      	str	r1, [r7, #8]
 80006a8:	607a      	str	r2, [r7, #4]
	// Temporary data store
	uint8_t * modcode = layer->pModLayer + keypress;
 80006aa:	68bb      	ldr	r3, [r7, #8]
 80006ac:	689a      	ldr	r2, [r3, #8]
 80006ae:	68fb      	ldr	r3, [r7, #12]
 80006b0:	4413      	add	r3, r2
 80006b2:	617b      	str	r3, [r7, #20]
	uint8_t * keycode = layer->pKeyLayer + keypress;
 80006b4:	68bb      	ldr	r3, [r7, #8]
 80006b6:	68da      	ldr	r2, [r3, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	4413      	add	r3, r2
 80006bc:	613b      	str	r3, [r7, #16]

	setKeyBytes(keycode, keyboardReport);
 80006be:	6879      	ldr	r1, [r7, #4]
 80006c0:	6938      	ldr	r0, [r7, #16]
 80006c2:	f7ff ffac 	bl	800061e <setKeyBytes>
	setModByte(modcode, keyboardReport);
 80006c6:	6879      	ldr	r1, [r7, #4]
 80006c8:	6978      	ldr	r0, [r7, #20]
 80006ca:	f7ff ff95 	bl	80005f8 <setModByte>
}
 80006ce:	bf00      	nop
 80006d0:	3718      	adds	r7, #24
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bd80      	pop	{r7, pc}

080006d6 <setImpReport>:

void setImpReport(Layer* layer, keyboardHIDReport* keyboardReport){
 80006d6:	b580      	push	{r7, lr}
 80006d8:	b084      	sub	sp, #16
 80006da:	af00      	add	r7, sp, #0
 80006dc:	6078      	str	r0, [r7, #4]
 80006de:	6039      	str	r1, [r7, #0]
	// Temporary data store
	uint8_t * impModcode = layer->impMod;
 80006e0:	687b      	ldr	r3, [r7, #4]
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	60fb      	str	r3, [r7, #12]
	uint8_t * impKeycode = layer->impKey;
 80006e6:	687b      	ldr	r3, [r7, #4]
 80006e8:	685b      	ldr	r3, [r3, #4]
 80006ea:	60bb      	str	r3, [r7, #8]

	setKeyBytes(impKeycode, keyboardReport);
 80006ec:	6839      	ldr	r1, [r7, #0]
 80006ee:	68b8      	ldr	r0, [r7, #8]
 80006f0:	f7ff ff95 	bl	800061e <setKeyBytes>
	setModByte(impModcode, keyboardReport);
 80006f4:	6839      	ldr	r1, [r7, #0]
 80006f6:	68f8      	ldr	r0, [r7, #12]
 80006f8:	f7ff ff7e 	bl	80005f8 <setModByte>
}
 80006fc:	bf00      	nop
 80006fe:	3710      	adds	r7, #16
 8000700:	46bd      	mov	sp, r7
 8000702:	bd80      	pop	{r7, pc}

08000704 <setHeld>:
	setKeyBytes(keycode);
	setModByte(modcode);
}
 * */

void setHeld(int keypress, int layerNumber, int* heldRef){
 8000704:	b480      	push	{r7}
 8000706:	b085      	sub	sp, #20
 8000708:	af00      	add	r7, sp, #0
 800070a:	60f8      	str	r0, [r7, #12]
 800070c:	60b9      	str	r1, [r7, #8]
 800070e:	607a      	str	r2, [r7, #4]
	heldRef[keypress] = layerNumber;
 8000710:	68fb      	ldr	r3, [r7, #12]
 8000712:	009b      	lsls	r3, r3, #2
 8000714:	687a      	ldr	r2, [r7, #4]
 8000716:	4413      	add	r3, r2
 8000718:	68ba      	ldr	r2, [r7, #8]
 800071a:	601a      	str	r2, [r3, #0]
}
 800071c:	bf00      	nop
 800071e:	3714      	adds	r7, #20
 8000720:	46bd      	mov	sp, r7
 8000722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000726:	4770      	bx	lr

08000728 <setHeldReport>:


// TODO setHeldReport could be simplified by using: Layer* helpRef[], so that the held keys automatically know which layer to use... In fact there wouldn't be a need for setHeldReport.
void setHeldReport(int keyIndex, const Layer** keymap, int* heldRef, keyboardHIDReport* keyboardReport){
 8000728:	b580      	push	{r7, lr}
 800072a:	b086      	sub	sp, #24
 800072c:	af00      	add	r7, sp, #0
 800072e:	60f8      	str	r0, [r7, #12]
 8000730:	60b9      	str	r1, [r7, #8]
 8000732:	607a      	str	r2, [r7, #4]
 8000734:	603b      	str	r3, [r7, #0]
	Layer* heldKeyLayer = keymap[heldRef[keyIndex]];
 8000736:	68fb      	ldr	r3, [r7, #12]
 8000738:	009b      	lsls	r3, r3, #2
 800073a:	687a      	ldr	r2, [r7, #4]
 800073c:	4413      	add	r3, r2
 800073e:	681b      	ldr	r3, [r3, #0]
 8000740:	009b      	lsls	r3, r3, #2
 8000742:	68ba      	ldr	r2, [r7, #8]
 8000744:	4413      	add	r3, r2
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	617b      	str	r3, [r7, #20]
	//if isHold[i] == 0 then the i key is not held, else it's the numebr of the layer it was pressed down in

	setReport(keyIndex, heldKeyLayer, keyboardReport);
 800074a:	683a      	ldr	r2, [r7, #0]
 800074c:	6979      	ldr	r1, [r7, #20]
 800074e:	68f8      	ldr	r0, [r7, #12]
 8000750:	f7ff ffa5 	bl	800069e <setReport>

}
 8000754:	bf00      	nop
 8000756:	3718      	adds	r7, #24
 8000758:	46bd      	mov	sp, r7
 800075a:	bd80      	pop	{r7, pc}

0800075c <scanKeys>:
	setReport(keypress, relMods, relKeys);

}
 * */

void scanKeys(const Layer** keymap, Layer* layerRef, int* heldRef, uint8_t* keyStates, keyboardHIDReport* report){
 800075c:	b580      	push	{r7, lr}
 800075e:	b086      	sub	sp, #24
 8000760:	af00      	add	r7, sp, #0
 8000762:	60f8      	str	r0, [r7, #12]
 8000764:	60b9      	str	r1, [r7, #8]
 8000766:	607a      	str	r2, [r7, #4]
 8000768:	603b      	str	r3, [r7, #0]
	if (layerRef->impKey != 0 || layerRef->impMod != 0){setImpReport(layerRef, report);};
 800076a:	68bb      	ldr	r3, [r7, #8]
 800076c:	685b      	ldr	r3, [r3, #4]
 800076e:	2b00      	cmp	r3, #0
 8000770:	d103      	bne.n	800077a <scanKeys+0x1e>
 8000772:	68bb      	ldr	r3, [r7, #8]
 8000774:	681b      	ldr	r3, [r3, #0]
 8000776:	2b00      	cmp	r3, #0
 8000778:	d003      	beq.n	8000782 <scanKeys+0x26>
 800077a:	6a39      	ldr	r1, [r7, #32]
 800077c:	68b8      	ldr	r0, [r7, #8]
 800077e:	f7ff ffaa 	bl	80006d6 <setImpReport>

	for(int i = 0; i < NUMBER_OF_KEYS; i++){
 8000782:	2300      	movs	r3, #0
 8000784:	617b      	str	r3, [r7, #20]
 8000786:	e028      	b.n	80007da <scanKeys+0x7e>
		//Original if condition was: GPIO_PIN_RESET == HAL_GPIO_ReadPin(keyPorts[i]/, keyPins[i])


		if (keyStates[i] == 0){
 8000788:	697b      	ldr	r3, [r7, #20]
 800078a:	683a      	ldr	r2, [r7, #0]
 800078c:	4413      	add	r3, r2
 800078e:	781b      	ldrb	r3, [r3, #0]
 8000790:	2b00      	cmp	r3, #0
 8000792:	d11a      	bne.n	80007ca <scanKeys+0x6e>
			switch(heldRef[i]){
 8000794:	697b      	ldr	r3, [r7, #20]
 8000796:	009b      	lsls	r3, r3, #2
 8000798:	687a      	ldr	r2, [r7, #4]
 800079a:	4413      	add	r3, r2
 800079c:	681b      	ldr	r3, [r3, #0]
 800079e:	2b00      	cmp	r3, #0
 80007a0:	d10c      	bne.n	80007bc <scanKeys+0x60>
			case 0: setReport(i, layerRef, report);
 80007a2:	6a3a      	ldr	r2, [r7, #32]
 80007a4:	68b9      	ldr	r1, [r7, #8]
 80007a6:	6978      	ldr	r0, [r7, #20]
 80007a8:	f7ff ff79 	bl	800069e <setReport>
					setHeld(i, layerRef->layerNum, heldRef);
 80007ac:	68bb      	ldr	r3, [r7, #8]
 80007ae:	691b      	ldr	r3, [r3, #16]
 80007b0:	687a      	ldr	r2, [r7, #4]
 80007b2:	4619      	mov	r1, r3
 80007b4:	6978      	ldr	r0, [r7, #20]
 80007b6:	f7ff ffa5 	bl	8000704 <setHeld>
				break;
 80007ba:	e00b      	b.n	80007d4 <scanKeys+0x78>
			default: setHeldReport(i, keymap, heldRef, report);
 80007bc:	6a3b      	ldr	r3, [r7, #32]
 80007be:	687a      	ldr	r2, [r7, #4]
 80007c0:	68f9      	ldr	r1, [r7, #12]
 80007c2:	6978      	ldr	r0, [r7, #20]
 80007c4:	f7ff ffb0 	bl	8000728 <setHeldReport>
				break;
 80007c8:	e004      	b.n	80007d4 <scanKeys+0x78>
			}

		} else {// TODO add a check?
			setHeld(i, 0, heldRef);
 80007ca:	687a      	ldr	r2, [r7, #4]
 80007cc:	2100      	movs	r1, #0
 80007ce:	6978      	ldr	r0, [r7, #20]
 80007d0:	f7ff ff98 	bl	8000704 <setHeld>
	for(int i = 0; i < NUMBER_OF_KEYS; i++){
 80007d4:	697b      	ldr	r3, [r7, #20]
 80007d6:	3301      	adds	r3, #1
 80007d8:	617b      	str	r3, [r7, #20]
 80007da:	697b      	ldr	r3, [r7, #20]
 80007dc:	2b0f      	cmp	r3, #15
 80007de:	ddd3      	ble.n	8000788 <scanKeys+0x2c>
		}
	}
}
 80007e0:	bf00      	nop
 80007e2:	bf00      	nop
 80007e4:	3718      	adds	r7, #24
 80007e6:	46bd      	mov	sp, r7
 80007e8:	bd80      	pop	{r7, pc}

080007ea <clearReport>:

// scan function for keyboard settings i.e. swtichingmouse mode

// scan for thumb-stick keys, so scans held, but sets the report to a prebuilt report mapped tot hat layer... technically with that the layer could still function normally... for mod keys... probbaly a more elegant solution for most cases... but I do like the manual mod map

void clearReport(keyboardHIDReport* keyboardReport){
 80007ea:	b480      	push	{r7}
 80007ec:	b083      	sub	sp, #12
 80007ee:	af00      	add	r7, sp, #0
 80007f0:	6078      	str	r0, [r7, #4]
	keyboardReport->MOD = 0;
 80007f2:	687b      	ldr	r3, [r7, #4]
 80007f4:	2200      	movs	r2, #0
 80007f6:	701a      	strb	r2, [r3, #0]
	keyboardReport->K1 = 0;
 80007f8:	687b      	ldr	r3, [r7, #4]
 80007fa:	2200      	movs	r2, #0
 80007fc:	709a      	strb	r2, [r3, #2]
	keyboardReport->K2 = 0;
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	2200      	movs	r2, #0
 8000802:	70da      	strb	r2, [r3, #3]
	keyboardReport->K3 = 0;
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	2200      	movs	r2, #0
 8000808:	711a      	strb	r2, [r3, #4]
	keyboardReport->K4 = 0;
 800080a:	687b      	ldr	r3, [r7, #4]
 800080c:	2200      	movs	r2, #0
 800080e:	715a      	strb	r2, [r3, #5]
	keyboardReport->K5 = 0;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	2200      	movs	r2, #0
 8000814:	719a      	strb	r2, [r3, #6]
	keyboardReport->K6 = 0;
 8000816:	687b      	ldr	r3, [r7, #4]
 8000818:	2200      	movs	r2, #0
 800081a:	71da      	strb	r2, [r3, #7]
}
 800081c:	bf00      	nop
 800081e:	370c      	adds	r7, #12
 8000820:	46bd      	mov	sp, r7
 8000822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000826:	4770      	bx	lr

08000828 <categorizeJoy>:
//void initStick(uint32_t* DMA_buff, uint16_t restHandle, uint){

//}


enum joydir categorizeJoy(joystick* stick, uint32_t* tresh){
 8000828:	b480      	push	{r7}
 800082a:	b087      	sub	sp, #28
 800082c:	af00      	add	r7, sp, #0
 800082e:	6078      	str	r0, [r7, #4]
 8000830:	6039      	str	r1, [r7, #0]

	// Set the sign to match Cartesian convention
	int32_t xDif = ((*(stick->xAxis)) - stick->xNeutral) * (stick->xPolarity);
 8000832:	687b      	ldr	r3, [r7, #4]
 8000834:	685b      	ldr	r3, [r3, #4]
 8000836:	681a      	ldr	r2, [r3, #0]
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	689b      	ldr	r3, [r3, #8]
 800083c:	1ad3      	subs	r3, r2, r3
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	6912      	ldr	r2, [r2, #16]
 8000842:	fb02 f303 	mul.w	r3, r2, r3
 8000846:	617b      	str	r3, [r7, #20]
	int32_t yDif = ((*(stick->yAxis)) - stick->yNeutral) * (stick->yPolarity);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	681a      	ldr	r2, [r3, #0]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	68db      	ldr	r3, [r3, #12]
 8000852:	1ad3      	subs	r3, r2, r3
 8000854:	687a      	ldr	r2, [r7, #4]
 8000856:	6952      	ldr	r2, [r2, #20]
 8000858:	fb02 f303 	mul.w	r3, r2, r3
 800085c:	613b      	str	r3, [r7, #16]


	int xMag = abs((int)xDif);
 800085e:	697b      	ldr	r3, [r7, #20]
 8000860:	2b00      	cmp	r3, #0
 8000862:	bfb8      	it	lt
 8000864:	425b      	neglt	r3, r3
 8000866:	60fb      	str	r3, [r7, #12]
	int yMag = abs((int)yDif);
 8000868:	693b      	ldr	r3, [r7, #16]
 800086a:	2b00      	cmp	r3, #0
 800086c:	bfb8      	it	lt
 800086e:	425b      	neglt	r3, r3
 8000870:	60bb      	str	r3, [r7, #8]

	if(xMag <= *tresh && yMag <= *tresh){
 8000872:	683b      	ldr	r3, [r7, #0]
 8000874:	681a      	ldr	r2, [r3, #0]
 8000876:	68fb      	ldr	r3, [r7, #12]
 8000878:	429a      	cmp	r2, r3
 800087a:	d309      	bcc.n	8000890 <categorizeJoy+0x68>
 800087c:	683b      	ldr	r3, [r7, #0]
 800087e:	681a      	ldr	r2, [r3, #0]
 8000880:	68bb      	ldr	r3, [r7, #8]
 8000882:	429a      	cmp	r2, r3
 8000884:	d304      	bcc.n	8000890 <categorizeJoy+0x68>
		stick->position = CENTERWISE;
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	2200      	movs	r2, #0
 800088a:	761a      	strb	r2, [r3, #24]
		return CENTERWISE; //Stick not directed
 800088c:	2300      	movs	r3, #0
 800088e:	e01c      	b.n	80008ca <categorizeJoy+0xa2>
	}

	if(xMag > yMag) {// HORIZONTAL MOTION
 8000890:	68fa      	ldr	r2, [r7, #12]
 8000892:	68bb      	ldr	r3, [r7, #8]
 8000894:	429a      	cmp	r2, r3
 8000896:	dd0c      	ble.n	80008b2 <categorizeJoy+0x8a>
		if(xDif > 0) {
 8000898:	697b      	ldr	r3, [r7, #20]
 800089a:	2b00      	cmp	r3, #0
 800089c:	dd04      	ble.n	80008a8 <categorizeJoy+0x80>
			stick->position = EASTWISE;
 800089e:	687b      	ldr	r3, [r7, #4]
 80008a0:	2201      	movs	r2, #1
 80008a2:	761a      	strb	r2, [r3, #24]
			return EASTWISE;
 80008a4:	2301      	movs	r3, #1
 80008a6:	e010      	b.n	80008ca <categorizeJoy+0xa2>
		} else {
			stick->position = WESTWISE;
 80008a8:	687b      	ldr	r3, [r7, #4]
 80008aa:	2204      	movs	r2, #4
 80008ac:	761a      	strb	r2, [r3, #24]
			return WESTWISE;
 80008ae:	2304      	movs	r3, #4
 80008b0:	e00b      	b.n	80008ca <categorizeJoy+0xa2>
		}

	} else { // VERTICAL MOTION
		if(yDif > 0) {
 80008b2:	693b      	ldr	r3, [r7, #16]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	dd04      	ble.n	80008c2 <categorizeJoy+0x9a>
			stick->position = NORTHWISE;
 80008b8:	687b      	ldr	r3, [r7, #4]
 80008ba:	2203      	movs	r2, #3
 80008bc:	761a      	strb	r2, [r3, #24]
			return NORTHWISE;
 80008be:	2303      	movs	r3, #3
 80008c0:	e003      	b.n	80008ca <categorizeJoy+0xa2>
		} else {
			stick->position = SOUTHWISE;
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	2202      	movs	r2, #2
 80008c6:	761a      	strb	r2, [r3, #24]
			return SOUTHWISE;
 80008c8:	2302      	movs	r3, #2
		}
	}
 stick->position = CENTERWISE;
 return CENTERWISE; // If they're equal in magnitude they cancel out... Very Unlikely
}
 80008ca:	4618      	mov	r0, r3
 80008cc:	371c      	adds	r7, #28
 80008ce:	46bd      	mov	sp, r7
 80008d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008d4:	4770      	bx	lr
	...

080008d8 <bitmaskToLayer>:
#define DEFAULT_TRESH 500

typedef uint8_t joystate;

// byte ID to layer number
int bitmaskToLayer(uint8_t* byteID){
 80008d8:	b480      	push	{r7}
 80008da:	b083      	sub	sp, #12
 80008dc:	af00      	add	r7, sp, #0
 80008de:	6078      	str	r0, [r7, #4]
	switch (*byteID) {
 80008e0:	687b      	ldr	r3, [r7, #4]
 80008e2:	781b      	ldrb	r3, [r3, #0]
 80008e4:	2b88      	cmp	r3, #136	; 0x88
 80008e6:	f200 8147 	bhi.w	8000b78 <bitmaskToLayer+0x2a0>
 80008ea:	a201      	add	r2, pc, #4	; (adr r2, 80008f0 <bitmaskToLayer+0x18>)
 80008ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80008f0:	08000b15 	.word	0x08000b15
 80008f4:	08000b19 	.word	0x08000b19
 80008f8:	08000b1d 	.word	0x08000b1d
 80008fc:	08000b79 	.word	0x08000b79
 8000900:	08000b21 	.word	0x08000b21
 8000904:	08000b79 	.word	0x08000b79
 8000908:	08000b79 	.word	0x08000b79
 800090c:	08000b79 	.word	0x08000b79
 8000910:	08000b25 	.word	0x08000b25
 8000914:	08000b79 	.word	0x08000b79
 8000918:	08000b79 	.word	0x08000b79
 800091c:	08000b79 	.word	0x08000b79
 8000920:	08000b79 	.word	0x08000b79
 8000924:	08000b79 	.word	0x08000b79
 8000928:	08000b79 	.word	0x08000b79
 800092c:	08000b79 	.word	0x08000b79
 8000930:	08000b29 	.word	0x08000b29
 8000934:	08000b2d 	.word	0x08000b2d
 8000938:	08000b31 	.word	0x08000b31
 800093c:	08000b79 	.word	0x08000b79
 8000940:	08000b35 	.word	0x08000b35
 8000944:	08000b79 	.word	0x08000b79
 8000948:	08000b79 	.word	0x08000b79
 800094c:	08000b79 	.word	0x08000b79
 8000950:	08000b39 	.word	0x08000b39
 8000954:	08000b79 	.word	0x08000b79
 8000958:	08000b79 	.word	0x08000b79
 800095c:	08000b79 	.word	0x08000b79
 8000960:	08000b79 	.word	0x08000b79
 8000964:	08000b79 	.word	0x08000b79
 8000968:	08000b79 	.word	0x08000b79
 800096c:	08000b79 	.word	0x08000b79
 8000970:	08000b3d 	.word	0x08000b3d
 8000974:	08000b41 	.word	0x08000b41
 8000978:	08000b45 	.word	0x08000b45
 800097c:	08000b79 	.word	0x08000b79
 8000980:	08000b49 	.word	0x08000b49
 8000984:	08000b79 	.word	0x08000b79
 8000988:	08000b79 	.word	0x08000b79
 800098c:	08000b79 	.word	0x08000b79
 8000990:	08000b4d 	.word	0x08000b4d
 8000994:	08000b79 	.word	0x08000b79
 8000998:	08000b79 	.word	0x08000b79
 800099c:	08000b79 	.word	0x08000b79
 80009a0:	08000b79 	.word	0x08000b79
 80009a4:	08000b79 	.word	0x08000b79
 80009a8:	08000b79 	.word	0x08000b79
 80009ac:	08000b79 	.word	0x08000b79
 80009b0:	08000b79 	.word	0x08000b79
 80009b4:	08000b79 	.word	0x08000b79
 80009b8:	08000b79 	.word	0x08000b79
 80009bc:	08000b79 	.word	0x08000b79
 80009c0:	08000b79 	.word	0x08000b79
 80009c4:	08000b79 	.word	0x08000b79
 80009c8:	08000b79 	.word	0x08000b79
 80009cc:	08000b79 	.word	0x08000b79
 80009d0:	08000b79 	.word	0x08000b79
 80009d4:	08000b79 	.word	0x08000b79
 80009d8:	08000b79 	.word	0x08000b79
 80009dc:	08000b79 	.word	0x08000b79
 80009e0:	08000b79 	.word	0x08000b79
 80009e4:	08000b79 	.word	0x08000b79
 80009e8:	08000b79 	.word	0x08000b79
 80009ec:	08000b79 	.word	0x08000b79
 80009f0:	08000b51 	.word	0x08000b51
 80009f4:	08000b55 	.word	0x08000b55
 80009f8:	08000b59 	.word	0x08000b59
 80009fc:	08000b79 	.word	0x08000b79
 8000a00:	08000b5d 	.word	0x08000b5d
 8000a04:	08000b79 	.word	0x08000b79
 8000a08:	08000b79 	.word	0x08000b79
 8000a0c:	08000b79 	.word	0x08000b79
 8000a10:	08000b61 	.word	0x08000b61
 8000a14:	08000b79 	.word	0x08000b79
 8000a18:	08000b79 	.word	0x08000b79
 8000a1c:	08000b79 	.word	0x08000b79
 8000a20:	08000b79 	.word	0x08000b79
 8000a24:	08000b79 	.word	0x08000b79
 8000a28:	08000b79 	.word	0x08000b79
 8000a2c:	08000b79 	.word	0x08000b79
 8000a30:	08000b79 	.word	0x08000b79
 8000a34:	08000b79 	.word	0x08000b79
 8000a38:	08000b79 	.word	0x08000b79
 8000a3c:	08000b79 	.word	0x08000b79
 8000a40:	08000b79 	.word	0x08000b79
 8000a44:	08000b79 	.word	0x08000b79
 8000a48:	08000b79 	.word	0x08000b79
 8000a4c:	08000b79 	.word	0x08000b79
 8000a50:	08000b79 	.word	0x08000b79
 8000a54:	08000b79 	.word	0x08000b79
 8000a58:	08000b79 	.word	0x08000b79
 8000a5c:	08000b79 	.word	0x08000b79
 8000a60:	08000b79 	.word	0x08000b79
 8000a64:	08000b79 	.word	0x08000b79
 8000a68:	08000b79 	.word	0x08000b79
 8000a6c:	08000b79 	.word	0x08000b79
 8000a70:	08000b79 	.word	0x08000b79
 8000a74:	08000b79 	.word	0x08000b79
 8000a78:	08000b79 	.word	0x08000b79
 8000a7c:	08000b79 	.word	0x08000b79
 8000a80:	08000b79 	.word	0x08000b79
 8000a84:	08000b79 	.word	0x08000b79
 8000a88:	08000b79 	.word	0x08000b79
 8000a8c:	08000b79 	.word	0x08000b79
 8000a90:	08000b79 	.word	0x08000b79
 8000a94:	08000b79 	.word	0x08000b79
 8000a98:	08000b79 	.word	0x08000b79
 8000a9c:	08000b79 	.word	0x08000b79
 8000aa0:	08000b79 	.word	0x08000b79
 8000aa4:	08000b79 	.word	0x08000b79
 8000aa8:	08000b79 	.word	0x08000b79
 8000aac:	08000b79 	.word	0x08000b79
 8000ab0:	08000b79 	.word	0x08000b79
 8000ab4:	08000b79 	.word	0x08000b79
 8000ab8:	08000b79 	.word	0x08000b79
 8000abc:	08000b79 	.word	0x08000b79
 8000ac0:	08000b79 	.word	0x08000b79
 8000ac4:	08000b79 	.word	0x08000b79
 8000ac8:	08000b79 	.word	0x08000b79
 8000acc:	08000b79 	.word	0x08000b79
 8000ad0:	08000b79 	.word	0x08000b79
 8000ad4:	08000b79 	.word	0x08000b79
 8000ad8:	08000b79 	.word	0x08000b79
 8000adc:	08000b79 	.word	0x08000b79
 8000ae0:	08000b79 	.word	0x08000b79
 8000ae4:	08000b79 	.word	0x08000b79
 8000ae8:	08000b79 	.word	0x08000b79
 8000aec:	08000b79 	.word	0x08000b79
 8000af0:	08000b65 	.word	0x08000b65
 8000af4:	08000b69 	.word	0x08000b69
 8000af8:	08000b6d 	.word	0x08000b6d
 8000afc:	08000b79 	.word	0x08000b79
 8000b00:	08000b71 	.word	0x08000b71
 8000b04:	08000b79 	.word	0x08000b79
 8000b08:	08000b79 	.word	0x08000b79
 8000b0c:	08000b79 	.word	0x08000b79
 8000b10:	08000b75 	.word	0x08000b75
		case LAYER_1_ID :
			return 1;
 8000b14:	2301      	movs	r3, #1
 8000b16:	e031      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_2_ID :
			return 2;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	e02f      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_3_ID :
			return 3;
 8000b1c:	2303      	movs	r3, #3
 8000b1e:	e02d      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_4_ID :
			return 4;
 8000b20:	2304      	movs	r3, #4
 8000b22:	e02b      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_5_ID :
			return 5;
 8000b24:	2305      	movs	r3, #5
 8000b26:	e029      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_6_ID :
			return 6;
 8000b28:	2306      	movs	r3, #6
 8000b2a:	e027      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_7_ID :
			return 7;
 8000b2c:	2307      	movs	r3, #7
 8000b2e:	e025      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_8_ID :
			return 8;
 8000b30:	2308      	movs	r3, #8
 8000b32:	e023      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_9_ID :
			return 9;
 8000b34:	2309      	movs	r3, #9
 8000b36:	e021      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_10_ID:
			return 10;
 8000b38:	230a      	movs	r3, #10
 8000b3a:	e01f      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_11_ID:
			return 11;
 8000b3c:	230b      	movs	r3, #11
 8000b3e:	e01d      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_12_ID:
			return 12;
 8000b40:	230c      	movs	r3, #12
 8000b42:	e01b      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_13_ID:
			return 13;
 8000b44:	230d      	movs	r3, #13
 8000b46:	e019      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_14_ID:
			return 14;
 8000b48:	230e      	movs	r3, #14
 8000b4a:	e017      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_15_ID:
			return 15;
 8000b4c:	230f      	movs	r3, #15
 8000b4e:	e015      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_16_ID:
			return 16;
 8000b50:	2310      	movs	r3, #16
 8000b52:	e013      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_17_ID:
			return 17;
 8000b54:	2311      	movs	r3, #17
 8000b56:	e011      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_18_ID:
			return 18;
 8000b58:	2312      	movs	r3, #18
 8000b5a:	e00f      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_19_ID:
			return 19;
 8000b5c:	2313      	movs	r3, #19
 8000b5e:	e00d      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_20_ID:
			return 20;
 8000b60:	2314      	movs	r3, #20
 8000b62:	e00b      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_21_ID:
			return 21;
 8000b64:	2315      	movs	r3, #21
 8000b66:	e009      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_22_ID:
			return 22;
 8000b68:	2316      	movs	r3, #22
 8000b6a:	e007      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_23_ID:
			return 23;
 8000b6c:	2317      	movs	r3, #23
 8000b6e:	e005      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_24_ID:
			return 24;
 8000b70:	2318      	movs	r3, #24
 8000b72:	e003      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
		case LAYER_25_ID:
			return 25;
 8000b74:	2319      	movs	r3, #25
 8000b76:	e001      	b.n	8000b7c <bitmaskToLayer+0x2a4>
			break;
	}
	return -1; // ERROR
 8000b78:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	370c      	adds	r7, #12
 8000b80:	46bd      	mov	sp, r7
 8000b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b86:	4770      	bx	lr

08000b88 <layerNumToRef>:

// Set's layer
void layerNumToRef(Layer* layerHandle, const Layer** keymap, int layerNum){
 8000b88:	b480      	push	{r7}
 8000b8a:	b085      	sub	sp, #20
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	60f8      	str	r0, [r7, #12]
 8000b90:	60b9      	str	r1, [r7, #8]
 8000b92:	607a      	str	r2, [r7, #4]
	layerHandle = keymap[layerNum];
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	009b      	lsls	r3, r3, #2
 8000b98:	68ba      	ldr	r2, [r7, #8]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	60fb      	str	r3, [r7, #12]
}
 8000ba0:	bf00      	nop
 8000ba2:	3714      	adds	r7, #20
 8000ba4:	46bd      	mov	sp, r7
 8000ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000baa:	4770      	bx	lr

08000bac <setByteID>:

// Set byte

joystate* setByteID(joystick* left, joystick* right, joystate* handle, uint32_t* tresh){
 8000bac:	b580      	push	{r7, lr}
 8000bae:	b086      	sub	sp, #24
 8000bb0:	af00      	add	r7, sp, #0
 8000bb2:	60f8      	str	r0, [r7, #12]
 8000bb4:	60b9      	str	r1, [r7, #8]
 8000bb6:	607a      	str	r2, [r7, #4]
 8000bb8:	603b      	str	r3, [r7, #0]
	*handle = 0; // Reset the bits of the byteID.
 8000bba:	687b      	ldr	r3, [r7, #4]
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	701a      	strb	r2, [r3, #0]

	//TODO Redundant. Can use the joystick struct position.
	enum joydir leftDir = categorizeJoy(left, tresh);
 8000bc0:	6839      	ldr	r1, [r7, #0]
 8000bc2:	68f8      	ldr	r0, [r7, #12]
 8000bc4:	f7ff fe30 	bl	8000828 <categorizeJoy>
 8000bc8:	4603      	mov	r3, r0
 8000bca:	75fb      	strb	r3, [r7, #23]
	enum joydir rightDir = categorizeJoy(right, tresh);
 8000bcc:	6839      	ldr	r1, [r7, #0]
 8000bce:	68b8      	ldr	r0, [r7, #8]
 8000bd0:	f7ff fe2a 	bl	8000828 <categorizeJoy>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	75bb      	strb	r3, [r7, #22]

	joystate val;

	switch(leftDir){
 8000bd8:	7dfb      	ldrb	r3, [r7, #23]
 8000bda:	3b01      	subs	r3, #1
 8000bdc:	2b03      	cmp	r3, #3
 8000bde:	d833      	bhi.n	8000c48 <setByteID+0x9c>
 8000be0:	a201      	add	r2, pc, #4	; (adr r2, 8000be8 <setByteID+0x3c>)
 8000be2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000be6:	bf00      	nop
 8000be8:	08000c0d 	.word	0x08000c0d
 8000bec:	08000c21 	.word	0x08000c21
 8000bf0:	08000bf9 	.word	0x08000bf9
 8000bf4:	08000c35 	.word	0x08000c35
		case NORTHWISE:
			val = LEFT_JOY_UP;
 8000bf8:	2340      	movs	r3, #64	; 0x40
 8000bfa:	757b      	strb	r3, [r7, #21]
			*handle = *handle | val;
 8000bfc:	687b      	ldr	r3, [r7, #4]
 8000bfe:	781a      	ldrb	r2, [r3, #0]
 8000c00:	7d7b      	ldrb	r3, [r7, #21]
 8000c02:	4313      	orrs	r3, r2
 8000c04:	b2da      	uxtb	r2, r3
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	701a      	strb	r2, [r3, #0]
			break;
 8000c0a:	e01d      	b.n	8000c48 <setByteID+0x9c>
		case EASTWISE:
			val = LEFT_JOY_RIGHT;
 8000c0c:	2320      	movs	r3, #32
 8000c0e:	757b      	strb	r3, [r7, #21]
			*handle = *handle | val;
 8000c10:	687b      	ldr	r3, [r7, #4]
 8000c12:	781a      	ldrb	r2, [r3, #0]
 8000c14:	7d7b      	ldrb	r3, [r7, #21]
 8000c16:	4313      	orrs	r3, r2
 8000c18:	b2da      	uxtb	r2, r3
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	701a      	strb	r2, [r3, #0]
			break;
 8000c1e:	e013      	b.n	8000c48 <setByteID+0x9c>
		case SOUTHWISE:
			val = LEFT_JOY_DOWN;
 8000c20:	2310      	movs	r3, #16
 8000c22:	757b      	strb	r3, [r7, #21]
			*handle = *handle | val;
 8000c24:	687b      	ldr	r3, [r7, #4]
 8000c26:	781a      	ldrb	r2, [r3, #0]
 8000c28:	7d7b      	ldrb	r3, [r7, #21]
 8000c2a:	4313      	orrs	r3, r2
 8000c2c:	b2da      	uxtb	r2, r3
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	701a      	strb	r2, [r3, #0]
			break;
 8000c32:	e009      	b.n	8000c48 <setByteID+0x9c>
		case WESTWISE:
			val = LEFT_JOY_LEFT;
 8000c34:	2380      	movs	r3, #128	; 0x80
 8000c36:	757b      	strb	r3, [r7, #21]
			*handle = *handle | val;
 8000c38:	687b      	ldr	r3, [r7, #4]
 8000c3a:	781a      	ldrb	r2, [r3, #0]
 8000c3c:	7d7b      	ldrb	r3, [r7, #21]
 8000c3e:	4313      	orrs	r3, r2
 8000c40:	b2da      	uxtb	r2, r3
 8000c42:	687b      	ldr	r3, [r7, #4]
 8000c44:	701a      	strb	r2, [r3, #0]
			break;
 8000c46:	bf00      	nop
	}

	switch(rightDir){
 8000c48:	7dbb      	ldrb	r3, [r7, #22]
 8000c4a:	3b01      	subs	r3, #1
 8000c4c:	2b03      	cmp	r3, #3
 8000c4e:	d833      	bhi.n	8000cb8 <setByteID+0x10c>
 8000c50:	a201      	add	r2, pc, #4	; (adr r2, 8000c58 <setByteID+0xac>)
 8000c52:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000c56:	bf00      	nop
 8000c58:	08000c7d 	.word	0x08000c7d
 8000c5c:	08000c91 	.word	0x08000c91
 8000c60:	08000c69 	.word	0x08000c69
 8000c64:	08000ca5 	.word	0x08000ca5
		case NORTHWISE:
			val = RIGHT_JOY_UP;
 8000c68:	2304      	movs	r3, #4
 8000c6a:	757b      	strb	r3, [r7, #21]
			*handle = *handle | val;
 8000c6c:	687b      	ldr	r3, [r7, #4]
 8000c6e:	781a      	ldrb	r2, [r3, #0]
 8000c70:	7d7b      	ldrb	r3, [r7, #21]
 8000c72:	4313      	orrs	r3, r2
 8000c74:	b2da      	uxtb	r2, r3
 8000c76:	687b      	ldr	r3, [r7, #4]
 8000c78:	701a      	strb	r2, [r3, #0]
			break;
 8000c7a:	e01d      	b.n	8000cb8 <setByteID+0x10c>
		case EASTWISE:
			val = RIGHT_JOY_RIGHT;
 8000c7c:	2302      	movs	r3, #2
 8000c7e:	757b      	strb	r3, [r7, #21]
			*handle = *handle | val;
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	781a      	ldrb	r2, [r3, #0]
 8000c84:	7d7b      	ldrb	r3, [r7, #21]
 8000c86:	4313      	orrs	r3, r2
 8000c88:	b2da      	uxtb	r2, r3
 8000c8a:	687b      	ldr	r3, [r7, #4]
 8000c8c:	701a      	strb	r2, [r3, #0]
			break;
 8000c8e:	e013      	b.n	8000cb8 <setByteID+0x10c>
		case SOUTHWISE:
			val = RIGHT_JOY_DOWN;
 8000c90:	2301      	movs	r3, #1
 8000c92:	757b      	strb	r3, [r7, #21]
			*handle = *handle | val;
 8000c94:	687b      	ldr	r3, [r7, #4]
 8000c96:	781a      	ldrb	r2, [r3, #0]
 8000c98:	7d7b      	ldrb	r3, [r7, #21]
 8000c9a:	4313      	orrs	r3, r2
 8000c9c:	b2da      	uxtb	r2, r3
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	701a      	strb	r2, [r3, #0]
			break;
 8000ca2:	e009      	b.n	8000cb8 <setByteID+0x10c>
		case WESTWISE:
			val = RIGHT_JOY_LEFT;
 8000ca4:	2308      	movs	r3, #8
 8000ca6:	757b      	strb	r3, [r7, #21]
			*handle = *handle | val;
 8000ca8:	687b      	ldr	r3, [r7, #4]
 8000caa:	781a      	ldrb	r2, [r3, #0]
 8000cac:	7d7b      	ldrb	r3, [r7, #21]
 8000cae:	4313      	orrs	r3, r2
 8000cb0:	b2da      	uxtb	r2, r3
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	701a      	strb	r2, [r3, #0]
			break;
 8000cb6:	bf00      	nop
		}

	return handle;
 8000cb8:	687b      	ldr	r3, [r7, #4]

}
 8000cba:	4618      	mov	r0, r3
 8000cbc:	3718      	adds	r7, #24
 8000cbe:	46bd      	mov	sp, r7
 8000cc0:	bd80      	pop	{r7, pc}
 8000cc2:	bf00      	nop

08000cc4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000cc4:	b590      	push	{r4, r7, lr}
 8000cc6:	b0b1      	sub	sp, #196	; 0xc4
 8000cc8:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000cca:	f000 fb1b 	bl	8001304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cce:	f000 f89b 	bl	8000e08 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cd2:	f000 f99f 	bl	8001014 <MX_GPIO_Init>
  MX_DMA_Init();
 8000cd6:	f000 f97d 	bl	8000fd4 <MX_DMA_Init>
  MX_ADC1_Init();
 8000cda:	f000 f8ff 	bl	8000edc <MX_ADC1_Init>

  MX_USB_DEVICE_Init();
 8000cde:	f006 fdcb 	bl	8007878 <MX_USB_DEVICE_Init>


	// Init and configure the joysticks.

	joystick rightStick;
	rightStick.xAxis = &analogIn[2];// joystick structs point directly to the buffer data
 8000ce2:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000ce6:	3308      	adds	r3, #8
 8000ce8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
	rightStick.yAxis = &analogIn[0];
 8000cec:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000cf0:	67fb      	str	r3, [r7, #124]	; 0x7c
	rightStick.xNeutral = 2000;
 8000cf2:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000cf6:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
	rightStick.yNeutral = 2000;
 8000cfa:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000cfe:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
	rightStick.xPolarity = -1;
 8000d02:	f04f 33ff 	mov.w	r3, #4294967295
 8000d06:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
	rightStick.yPolarity = -1;
 8000d0a:	f04f 33ff 	mov.w	r3, #4294967295
 8000d0e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

	joystick leftStick;
	leftStick.xAxis = &analogIn[3];
 8000d12:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d16:	330c      	adds	r3, #12
 8000d18:	667b      	str	r3, [r7, #100]	; 0x64
	leftStick.yAxis = &analogIn[1];
 8000d1a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d1e:	3304      	adds	r3, #4
 8000d20:	663b      	str	r3, [r7, #96]	; 0x60
	leftStick.xNeutral = 2000;
 8000d22:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d26:	66bb      	str	r3, [r7, #104]	; 0x68
	leftStick.yNeutral = 2000;
 8000d28:	f44f 63fa 	mov.w	r3, #2000	; 0x7d0
 8000d2c:	66fb      	str	r3, [r7, #108]	; 0x6c
	leftStick.yPolarity = 1;
 8000d2e:	2301      	movs	r3, #1
 8000d30:	677b      	str	r3, [r7, #116]	; 0x74
	leftStick.xPolarity = 1;
 8000d32:	2301      	movs	r3, #1
 8000d34:	673b      	str	r3, [r7, #112]	; 0x70

	// Joystick threshold, fornow uniform. TODO granular struct
	uint32_t tresh = 600;
 8000d36:	f44f 7316 	mov.w	r3, #600	; 0x258
 8000d3a:	65fb      	str	r3, [r7, #92]	; 0x5c

	// Init Layer byteID and active layer handle

	joystate* layerByteID;
	*layerByteID = 0;
 8000d3c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]

	Layer* layerHandle = (Layer*)keymap[1];
 8000d44:	4b2c      	ldr	r3, [pc, #176]	; (8000df8 <main+0x134>)
 8000d46:	685b      	ldr	r3, [r3, #4]
 8000d48:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
	const Layer** keymapRef = &keymap[0];
 8000d4c:	4b2a      	ldr	r3, [pc, #168]	; (8000df8 <main+0x134>)
 8000d4e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac

	// Array of key and pin states

	uint8_t pinStates[NUMBER_OF_KEYS] = {1, 1, 1, 1,     1, 1, 1, 1,
 8000d52:	4b2a      	ldr	r3, [pc, #168]	; (8000dfc <main+0x138>)
 8000d54:	f107 044c 	add.w	r4, r7, #76	; 0x4c
 8000d58:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000d5a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			                             1, 1, 1, 1,     1, 1, 1, 1};
	int isHold[NUMBER_OF_KEYS] = {0, 0, 0, 0,     0, 0, 0, 0,
 8000d5e:	f107 030c 	add.w	r3, r7, #12
 8000d62:	2240      	movs	r2, #64	; 0x40
 8000d64:	2100      	movs	r1, #0
 8000d66:	4618      	mov	r0, r3
 8000d68:	f007 f9d8 	bl	800811c <memset>
			                      0, 0, 0, 0,     0, 0, 0, 0};
	// Keyboard HID report
	keyboardHIDReport kReport = {0, 0, 0, 0, 0, 0, 0, 0};
 8000d6c:	1d3b      	adds	r3, r7, #4
 8000d6e:	2200      	movs	r2, #0
 8000d70:	601a      	str	r2, [r3, #0]
 8000d72:	605a      	str	r2, [r3, #4]
	keyboardHIDReport* pReport = &kReport;
 8000d74:	1d3b      	adds	r3, r7, #4
 8000d76:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8

	// Start the DMA
	HAL_ADC_Start_DMA(&hadc1, analogIn, 4);
 8000d7a:	f107 0398 	add.w	r3, r7, #152	; 0x98
 8000d7e:	2204      	movs	r2, #4
 8000d80:	4619      	mov	r1, r3
 8000d82:	481f      	ldr	r0, [pc, #124]	; (8000e00 <main+0x13c>)
 8000d84:	f000 fb98 	bl	80014b8 <HAL_ADC_Start_DMA>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  // Set the layer ID
	  setByteID(&leftStick, &rightStick, layerByteID, &tresh);
 8000d88:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8000d8c:	f107 017c 	add.w	r1, r7, #124	; 0x7c
 8000d90:	f107 0060 	add.w	r0, r7, #96	; 0x60
 8000d94:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8000d98:	f7ff ff08 	bl	8000bac <setByteID>

	  // Get the pointer handle updated with the current active layer
	  layerNumToRef(layerHandle, keymapRef, bitmaskToLayer(layerByteID));
 8000d9c:	f8d7 00b4 	ldr.w	r0, [r7, #180]	; 0xb4
 8000da0:	f7ff fd9a 	bl	80008d8 <bitmaskToLayer>
 8000da4:	4603      	mov	r3, r0
 8000da6:	461a      	mov	r2, r3
 8000da8:	f8d7 10ac 	ldr.w	r1, [r7, #172]	; 0xac
 8000dac:	f8d7 00b0 	ldr.w	r0, [r7, #176]	; 0xb0
 8000db0:	f7ff feea 	bl	8000b88 <layerNumToRef>

	  // check pressed keys
	  checkKeyPins(&pinStates[0]);
 8000db4:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fb8d 	bl	80004d8 <checkKeyPins>

	  // Check and set all keyboard related reports
	  // Seems to work until using keymap[0]as the starting point???
	  scanKeys(keymapRef, layerHandle, &isHold[0], pinStates, pReport);
 8000dbe:	f107 014c 	add.w	r1, r7, #76	; 0x4c
 8000dc2:	f107 020c 	add.w	r2, r7, #12
 8000dc6:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8000dca:	9300      	str	r3, [sp, #0]
 8000dcc:	460b      	mov	r3, r1
 8000dce:	f8d7 10b0 	ldr.w	r1, [r7, #176]	; 0xb0
 8000dd2:	f8d7 00ac 	ldr.w	r0, [r7, #172]	; 0xac
 8000dd6:	f7ff fcc1 	bl	800075c <scanKeys>

	  // send report
	  USBD_HID_SendReport(&hUsbDeviceFS, pReport, sizeof(kReport));
 8000dda:	2208      	movs	r2, #8
 8000ddc:	f8d7 10a8 	ldr.w	r1, [r7, #168]	; 0xa8
 8000de0:	4808      	ldr	r0, [pc, #32]	; (8000e04 <main+0x140>)
 8000de2:	f005 f9cf 	bl	8006184 <USBD_HID_SendReport>
	  // wait?
		  HAL_Delay(100);
 8000de6:	2064      	movs	r0, #100	; 0x64
 8000de8:	f000 fafe 	bl	80013e8 <HAL_Delay>


	  // Clear report
	  clearReport(pReport);
 8000dec:	f8d7 00a8 	ldr.w	r0, [r7, #168]	; 0xa8
 8000df0:	f7ff fcfb 	bl	80007ea <clearReport>
	  setByteID(&leftStick, &rightStick, layerByteID, &tresh);
 8000df4:	e7c8      	b.n	8000d88 <main+0xc4>
 8000df6:	bf00      	nop
 8000df8:	2000036c 	.word	0x2000036c
 8000dfc:	08008144 	.word	0x08008144
 8000e00:	200006f0 	.word	0x200006f0
 8000e04:	200007a0 	.word	0x200007a0

08000e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b094      	sub	sp, #80	; 0x50
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 0320 	add.w	r3, r7, #32
 8000e12:	2230      	movs	r2, #48	; 0x30
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f007 f980 	bl	800811c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	f107 030c 	add.w	r3, r7, #12
 8000e20:	2200      	movs	r2, #0
 8000e22:	601a      	str	r2, [r3, #0]
 8000e24:	605a      	str	r2, [r3, #4]
 8000e26:	609a      	str	r2, [r3, #8]
 8000e28:	60da      	str	r2, [r3, #12]
 8000e2a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000e2c:	2300      	movs	r3, #0
 8000e2e:	60bb      	str	r3, [r7, #8]
 8000e30:	4b28      	ldr	r3, [pc, #160]	; (8000ed4 <SystemClock_Config+0xcc>)
 8000e32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e34:	4a27      	ldr	r2, [pc, #156]	; (8000ed4 <SystemClock_Config+0xcc>)
 8000e36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e3a:	6413      	str	r3, [r2, #64]	; 0x40
 8000e3c:	4b25      	ldr	r3, [pc, #148]	; (8000ed4 <SystemClock_Config+0xcc>)
 8000e3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e40:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e44:	60bb      	str	r3, [r7, #8]
 8000e46:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e48:	2300      	movs	r3, #0
 8000e4a:	607b      	str	r3, [r7, #4]
 8000e4c:	4b22      	ldr	r3, [pc, #136]	; (8000ed8 <SystemClock_Config+0xd0>)
 8000e4e:	681b      	ldr	r3, [r3, #0]
 8000e50:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000e54:	4a20      	ldr	r2, [pc, #128]	; (8000ed8 <SystemClock_Config+0xd0>)
 8000e56:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000e5a:	6013      	str	r3, [r2, #0]
 8000e5c:	4b1e      	ldr	r3, [pc, #120]	; (8000ed8 <SystemClock_Config+0xd0>)
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e64:	607b      	str	r3, [r7, #4]
 8000e66:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e68:	2301      	movs	r3, #1
 8000e6a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e6c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000e70:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e72:	2302      	movs	r3, #2
 8000e74:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e76:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 15;
 8000e7c:	230f      	movs	r3, #15
 8000e7e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 144;
 8000e80:	2390      	movs	r3, #144	; 0x90
 8000e82:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e84:	2302      	movs	r3, #2
 8000e86:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 5;
 8000e88:	2305      	movs	r3, #5
 8000e8a:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e8c:	f107 0320 	add.w	r3, r7, #32
 8000e90:	4618      	mov	r0, r3
 8000e92:	f002 ff43 	bl	8003d1c <HAL_RCC_OscConfig>
 8000e96:	4603      	mov	r3, r0
 8000e98:	2b00      	cmp	r3, #0
 8000e9a:	d001      	beq.n	8000ea0 <SystemClock_Config+0x98>
  {
    Error_Handler();
 8000e9c:	f000 f912 	bl	80010c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ea0:	230f      	movs	r3, #15
 8000ea2:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSE;
 8000ea4:	2301      	movs	r3, #1
 8000ea6:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ea8:	2300      	movs	r3, #0
 8000eaa:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000eac:	2300      	movs	r3, #0
 8000eae:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000eb0:	2300      	movs	r3, #0
 8000eb2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000eb4:	f107 030c 	add.w	r3, r7, #12
 8000eb8:	2100      	movs	r1, #0
 8000eba:	4618      	mov	r0, r3
 8000ebc:	f003 f9a6 	bl	800420c <HAL_RCC_ClockConfig>
 8000ec0:	4603      	mov	r3, r0
 8000ec2:	2b00      	cmp	r3, #0
 8000ec4:	d001      	beq.n	8000eca <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ec6:	f000 f8fd 	bl	80010c4 <Error_Handler>
  }
}
 8000eca:	bf00      	nop
 8000ecc:	3750      	adds	r7, #80	; 0x50
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	40023800 	.word	0x40023800
 8000ed8:	40007000 	.word	0x40007000

08000edc <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b084      	sub	sp, #16
 8000ee0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000ee2:	463b      	mov	r3, r7
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	601a      	str	r2, [r3, #0]
 8000ee8:	605a      	str	r2, [r3, #4]
 8000eea:	609a      	str	r2, [r3, #8]
 8000eec:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000eee:	4b36      	ldr	r3, [pc, #216]	; (8000fc8 <MX_ADC1_Init+0xec>)
 8000ef0:	4a36      	ldr	r2, [pc, #216]	; (8000fcc <MX_ADC1_Init+0xf0>)
 8000ef2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000ef4:	4b34      	ldr	r3, [pc, #208]	; (8000fc8 <MX_ADC1_Init+0xec>)
 8000ef6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000efa:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000efc:	4b32      	ldr	r3, [pc, #200]	; (8000fc8 <MX_ADC1_Init+0xec>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8000f02:	4b31      	ldr	r3, [pc, #196]	; (8000fc8 <MX_ADC1_Init+0xec>)
 8000f04:	2201      	movs	r2, #1
 8000f06:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000f08:	4b2f      	ldr	r3, [pc, #188]	; (8000fc8 <MX_ADC1_Init+0xec>)
 8000f0a:	2201      	movs	r2, #1
 8000f0c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f0e:	4b2e      	ldr	r3, [pc, #184]	; (8000fc8 <MX_ADC1_Init+0xec>)
 8000f10:	2200      	movs	r2, #0
 8000f12:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f16:	4b2c      	ldr	r3, [pc, #176]	; (8000fc8 <MX_ADC1_Init+0xec>)
 8000f18:	2200      	movs	r2, #0
 8000f1a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f1c:	4b2a      	ldr	r3, [pc, #168]	; (8000fc8 <MX_ADC1_Init+0xec>)
 8000f1e:	4a2c      	ldr	r2, [pc, #176]	; (8000fd0 <MX_ADC1_Init+0xf4>)
 8000f20:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f22:	4b29      	ldr	r3, [pc, #164]	; (8000fc8 <MX_ADC1_Init+0xec>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 4;
 8000f28:	4b27      	ldr	r3, [pc, #156]	; (8000fc8 <MX_ADC1_Init+0xec>)
 8000f2a:	2204      	movs	r2, #4
 8000f2c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f2e:	4b26      	ldr	r3, [pc, #152]	; (8000fc8 <MX_ADC1_Init+0xec>)
 8000f30:	2201      	movs	r2, #1
 8000f32:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 8000f36:	4b24      	ldr	r3, [pc, #144]	; (8000fc8 <MX_ADC1_Init+0xec>)
 8000f38:	2200      	movs	r2, #0
 8000f3a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f3c:	4822      	ldr	r0, [pc, #136]	; (8000fc8 <MX_ADC1_Init+0xec>)
 8000f3e:	f000 fa77 	bl	8001430 <HAL_ADC_Init>
 8000f42:	4603      	mov	r3, r0
 8000f44:	2b00      	cmp	r3, #0
 8000f46:	d001      	beq.n	8000f4c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000f48:	f000 f8bc 	bl	80010c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000f4c:	2300      	movs	r3, #0
 8000f4e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000f50:	2301      	movs	r3, #1
 8000f52:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8000f54:	2305      	movs	r3, #5
 8000f56:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f58:	463b      	mov	r3, r7
 8000f5a:	4619      	mov	r1, r3
 8000f5c:	481a      	ldr	r0, [pc, #104]	; (8000fc8 <MX_ADC1_Init+0xec>)
 8000f5e:	f000 fbb9 	bl	80016d4 <HAL_ADC_ConfigChannel>
 8000f62:	4603      	mov	r3, r0
 8000f64:	2b00      	cmp	r3, #0
 8000f66:	d001      	beq.n	8000f6c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000f68:	f000 f8ac 	bl	80010c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000f6c:	2301      	movs	r3, #1
 8000f6e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 8000f70:	2302      	movs	r3, #2
 8000f72:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f74:	463b      	mov	r3, r7
 8000f76:	4619      	mov	r1, r3
 8000f78:	4813      	ldr	r0, [pc, #76]	; (8000fc8 <MX_ADC1_Init+0xec>)
 8000f7a:	f000 fbab 	bl	80016d4 <HAL_ADC_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000f84:	f000 f89e 	bl	80010c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000f88:	2302      	movs	r3, #2
 8000f8a:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 3;
 8000f8c:	2303      	movs	r3, #3
 8000f8e:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000f90:	463b      	mov	r3, r7
 8000f92:	4619      	mov	r1, r3
 8000f94:	480c      	ldr	r0, [pc, #48]	; (8000fc8 <MX_ADC1_Init+0xec>)
 8000f96:	f000 fb9d 	bl	80016d4 <HAL_ADC_ConfigChannel>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_ADC1_Init+0xc8>
  {
    Error_Handler();
 8000fa0:	f000 f890 	bl	80010c4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 8000fa4:	2303      	movs	r3, #3
 8000fa6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 4;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fac:	463b      	mov	r3, r7
 8000fae:	4619      	mov	r1, r3
 8000fb0:	4805      	ldr	r0, [pc, #20]	; (8000fc8 <MX_ADC1_Init+0xec>)
 8000fb2:	f000 fb8f 	bl	80016d4 <HAL_ADC_ConfigChannel>
 8000fb6:	4603      	mov	r3, r0
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d001      	beq.n	8000fc0 <MX_ADC1_Init+0xe4>
  {
    Error_Handler();
 8000fbc:	f000 f882 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000fc0:	bf00      	nop
 8000fc2:	3710      	adds	r7, #16
 8000fc4:	46bd      	mov	sp, r7
 8000fc6:	bd80      	pop	{r7, pc}
 8000fc8:	200006f0 	.word	0x200006f0
 8000fcc:	40012000 	.word	0x40012000
 8000fd0:	0f000001 	.word	0x0f000001

08000fd4 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8000fd4:	b580      	push	{r7, lr}
 8000fd6:	b082      	sub	sp, #8
 8000fd8:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000fda:	2300      	movs	r3, #0
 8000fdc:	607b      	str	r3, [r7, #4]
 8000fde:	4b0c      	ldr	r3, [pc, #48]	; (8001010 <MX_DMA_Init+0x3c>)
 8000fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fe2:	4a0b      	ldr	r2, [pc, #44]	; (8001010 <MX_DMA_Init+0x3c>)
 8000fe4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000fe8:	6313      	str	r3, [r2, #48]	; 0x30
 8000fea:	4b09      	ldr	r3, [pc, #36]	; (8001010 <MX_DMA_Init+0x3c>)
 8000fec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000ff2:	607b      	str	r3, [r7, #4]
 8000ff4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 0, 0);
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	2100      	movs	r1, #0
 8000ffa:	2038      	movs	r0, #56	; 0x38
 8000ffc:	f000 fee5 	bl	8001dca <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8001000:	2038      	movs	r0, #56	; 0x38
 8001002:	f000 fefe 	bl	8001e02 <HAL_NVIC_EnableIRQ>

}
 8001006:	bf00      	nop
 8001008:	3708      	adds	r7, #8
 800100a:	46bd      	mov	sp, r7
 800100c:	bd80      	pop	{r7, pc}
 800100e:	bf00      	nop
 8001010:	40023800 	.word	0x40023800

08001014 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001014:	b580      	push	{r7, lr}
 8001016:	b088      	sub	sp, #32
 8001018:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800101a:	f107 030c 	add.w	r3, r7, #12
 800101e:	2200      	movs	r2, #0
 8001020:	601a      	str	r2, [r3, #0]
 8001022:	605a      	str	r2, [r3, #4]
 8001024:	609a      	str	r2, [r3, #8]
 8001026:	60da      	str	r2, [r3, #12]
 8001028:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800102a:	2300      	movs	r3, #0
 800102c:	60bb      	str	r3, [r7, #8]
 800102e:	4b22      	ldr	r3, [pc, #136]	; (80010b8 <MX_GPIO_Init+0xa4>)
 8001030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001032:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <MX_GPIO_Init+0xa4>)
 8001034:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001038:	6313      	str	r3, [r2, #48]	; 0x30
 800103a:	4b1f      	ldr	r3, [pc, #124]	; (80010b8 <MX_GPIO_Init+0xa4>)
 800103c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800103e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001042:	60bb      	str	r3, [r7, #8]
 8001044:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001046:	2300      	movs	r3, #0
 8001048:	607b      	str	r3, [r7, #4]
 800104a:	4b1b      	ldr	r3, [pc, #108]	; (80010b8 <MX_GPIO_Init+0xa4>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	4a1a      	ldr	r2, [pc, #104]	; (80010b8 <MX_GPIO_Init+0xa4>)
 8001050:	f043 0301 	orr.w	r3, r3, #1
 8001054:	6313      	str	r3, [r2, #48]	; 0x30
 8001056:	4b18      	ldr	r3, [pc, #96]	; (80010b8 <MX_GPIO_Init+0xa4>)
 8001058:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800105a:	f003 0301 	and.w	r3, r3, #1
 800105e:	607b      	str	r3, [r7, #4]
 8001060:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001062:	2300      	movs	r3, #0
 8001064:	603b      	str	r3, [r7, #0]
 8001066:	4b14      	ldr	r3, [pc, #80]	; (80010b8 <MX_GPIO_Init+0xa4>)
 8001068:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800106a:	4a13      	ldr	r2, [pc, #76]	; (80010b8 <MX_GPIO_Init+0xa4>)
 800106c:	f043 0302 	orr.w	r3, r3, #2
 8001070:	6313      	str	r3, [r2, #48]	; 0x30
 8001072:	4b11      	ldr	r3, [pc, #68]	; (80010b8 <MX_GPIO_Init+0xa4>)
 8001074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001076:	f003 0302 	and.w	r3, r3, #2
 800107a:	603b      	str	r3, [r7, #0]
 800107c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pins : PA4 PA5 PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800107e:	23f0      	movs	r3, #240	; 0xf0
 8001080:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001082:	2300      	movs	r3, #0
 8001084:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001086:	2301      	movs	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800108a:	f107 030c 	add.w	r3, r7, #12
 800108e:	4619      	mov	r1, r3
 8001090:	480a      	ldr	r0, [pc, #40]	; (80010bc <MX_GPIO_Init+0xa8>)
 8001092:	f001 fa41 	bl	8002518 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB0 PB1 PB2 PB10
                           PB13 PB15 PB4 PB5
                           PB6 PB7 PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_10
 8001096:	f24a 73f7 	movw	r3, #42999	; 0xa7f7
 800109a:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_13|GPIO_PIN_15|GPIO_PIN_4|GPIO_PIN_5
                          |GPIO_PIN_6|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800109c:	2300      	movs	r3, #0
 800109e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010a0:	2301      	movs	r3, #1
 80010a2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010a4:	f107 030c 	add.w	r3, r7, #12
 80010a8:	4619      	mov	r1, r3
 80010aa:	4805      	ldr	r0, [pc, #20]	; (80010c0 <MX_GPIO_Init+0xac>)
 80010ac:	f001 fa34 	bl	8002518 <HAL_GPIO_Init>

}
 80010b0:	bf00      	nop
 80010b2:	3720      	adds	r7, #32
 80010b4:	46bd      	mov	sp, r7
 80010b6:	bd80      	pop	{r7, pc}
 80010b8:	40023800 	.word	0x40023800
 80010bc:	40020000 	.word	0x40020000
 80010c0:	40020400 	.word	0x40020400

080010c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010cc:	e7fe      	b.n	80010cc <Error_Handler+0x8>
	...

080010d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b083      	sub	sp, #12
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b10      	ldr	r3, [pc, #64]	; (800111c <HAL_MspInit+0x4c>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a0f      	ldr	r2, [pc, #60]	; (800111c <HAL_MspInit+0x4c>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b0d      	ldr	r3, [pc, #52]	; (800111c <HAL_MspInit+0x4c>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	4b09      	ldr	r3, [pc, #36]	; (800111c <HAL_MspInit+0x4c>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a08      	ldr	r2, [pc, #32]	; (800111c <HAL_MspInit+0x4c>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b06      	ldr	r3, [pc, #24]	; (800111c <HAL_MspInit+0x4c>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800110e:	bf00      	nop
 8001110:	370c      	adds	r7, #12
 8001112:	46bd      	mov	sp, r7
 8001114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001118:	4770      	bx	lr
 800111a:	bf00      	nop
 800111c:	40023800 	.word	0x40023800

08001120 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a2f      	ldr	r2, [pc, #188]	; (80011fc <HAL_ADC_MspInit+0xdc>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d158      	bne.n	80011f4 <HAL_ADC_MspInit+0xd4>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001142:	2300      	movs	r3, #0
 8001144:	613b      	str	r3, [r7, #16]
 8001146:	4b2e      	ldr	r3, [pc, #184]	; (8001200 <HAL_ADC_MspInit+0xe0>)
 8001148:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114a:	4a2d      	ldr	r2, [pc, #180]	; (8001200 <HAL_ADC_MspInit+0xe0>)
 800114c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001150:	6453      	str	r3, [r2, #68]	; 0x44
 8001152:	4b2b      	ldr	r3, [pc, #172]	; (8001200 <HAL_ADC_MspInit+0xe0>)
 8001154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001156:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800115a:	613b      	str	r3, [r7, #16]
 800115c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	60fb      	str	r3, [r7, #12]
 8001162:	4b27      	ldr	r3, [pc, #156]	; (8001200 <HAL_ADC_MspInit+0xe0>)
 8001164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001166:	4a26      	ldr	r2, [pc, #152]	; (8001200 <HAL_ADC_MspInit+0xe0>)
 8001168:	f043 0301 	orr.w	r3, r3, #1
 800116c:	6313      	str	r3, [r2, #48]	; 0x30
 800116e:	4b24      	ldr	r3, [pc, #144]	; (8001200 <HAL_ADC_MspInit+0xe0>)
 8001170:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001172:	f003 0301 	and.w	r3, r3, #1
 8001176:	60fb      	str	r3, [r7, #12]
 8001178:	68fb      	ldr	r3, [r7, #12]
    PA0-WKUP     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    PA2     ------> ADC1_IN2
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 800117a:	230f      	movs	r3, #15
 800117c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800117e:	2303      	movs	r3, #3
 8001180:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001182:	2300      	movs	r3, #0
 8001184:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001186:	f107 0314 	add.w	r3, r7, #20
 800118a:	4619      	mov	r1, r3
 800118c:	481d      	ldr	r0, [pc, #116]	; (8001204 <HAL_ADC_MspInit+0xe4>)
 800118e:	f001 f9c3 	bl	8002518 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 8001192:	4b1d      	ldr	r3, [pc, #116]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 8001194:	4a1d      	ldr	r2, [pc, #116]	; (800120c <HAL_ADC_MspInit+0xec>)
 8001196:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8001198:	4b1b      	ldr	r3, [pc, #108]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 800119a:	2200      	movs	r2, #0
 800119c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800119e:	4b1a      	ldr	r3, [pc, #104]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80011a4:	4b18      	ldr	r3, [pc, #96]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80011aa:	4b17      	ldr	r3, [pc, #92]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011ac:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011b0:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80011b2:	4b15      	ldr	r3, [pc, #84]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011b4:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80011b8:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80011ba:	4b13      	ldr	r3, [pc, #76]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011bc:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80011c0:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80011c2:	4b11      	ldr	r3, [pc, #68]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011c4:	f44f 7280 	mov.w	r2, #256	; 0x100
 80011c8:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_MEDIUM;
 80011ca:	4b0f      	ldr	r3, [pc, #60]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011cc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80011d0:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011d2:	4b0d      	ldr	r3, [pc, #52]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80011d8:	480b      	ldr	r0, [pc, #44]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011da:	f000 fe2d 	bl	8001e38 <HAL_DMA_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <HAL_ADC_MspInit+0xc8>
    {
      Error_Handler();
 80011e4:	f7ff ff6e 	bl	80010c4 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	4a07      	ldr	r2, [pc, #28]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011ec:	639a      	str	r2, [r3, #56]	; 0x38
 80011ee:	4a06      	ldr	r2, [pc, #24]	; (8001208 <HAL_ADC_MspInit+0xe8>)
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80011f4:	bf00      	nop
 80011f6:	3728      	adds	r7, #40	; 0x28
 80011f8:	46bd      	mov	sp, r7
 80011fa:	bd80      	pop	{r7, pc}
 80011fc:	40012000 	.word	0x40012000
 8001200:	40023800 	.word	0x40023800
 8001204:	40020000 	.word	0x40020000
 8001208:	20000738 	.word	0x20000738
 800120c:	40026410 	.word	0x40026410

08001210 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001210:	b480      	push	{r7}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001214:	e7fe      	b.n	8001214 <NMI_Handler+0x4>

08001216 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001216:	b480      	push	{r7}
 8001218:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800121a:	e7fe      	b.n	800121a <HardFault_Handler+0x4>

0800121c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800121c:	b480      	push	{r7}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001220:	e7fe      	b.n	8001220 <MemManage_Handler+0x4>

08001222 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001222:	b480      	push	{r7}
 8001224:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001226:	e7fe      	b.n	8001226 <BusFault_Handler+0x4>

08001228 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001228:	b480      	push	{r7}
 800122a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800122c:	e7fe      	b.n	800122c <UsageFault_Handler+0x4>

0800122e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800122e:	b480      	push	{r7}
 8001230:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001232:	bf00      	nop
 8001234:	46bd      	mov	sp, r7
 8001236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800123a:	4770      	bx	lr

0800123c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800123c:	b480      	push	{r7}
 800123e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001240:	bf00      	nop
 8001242:	46bd      	mov	sp, r7
 8001244:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001248:	4770      	bx	lr

0800124a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800124a:	b480      	push	{r7}
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800124e:	bf00      	nop
 8001250:	46bd      	mov	sp, r7
 8001252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001256:	4770      	bx	lr

08001258 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800125c:	f000 f8a4 	bl	80013a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001260:	bf00      	nop
 8001262:	bd80      	pop	{r7, pc}

08001264 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001268:	4802      	ldr	r0, [pc, #8]	; (8001274 <DMA2_Stream0_IRQHandler+0x10>)
 800126a:	f000 feeb 	bl	8002044 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 800126e:	bf00      	nop
 8001270:	bd80      	pop	{r7, pc}
 8001272:	bf00      	nop
 8001274:	20000738 	.word	0x20000738

08001278 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB On The Go FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_OTG_FS);
 800127c:	4802      	ldr	r0, [pc, #8]	; (8001288 <OTG_FS_IRQHandler+0x10>)
 800127e:	f001 fc37 	bl	8002af0 <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 8001282:	bf00      	nop
 8001284:	bd80      	pop	{r7, pc}
 8001286:	bf00      	nop
 8001288:	20000c7c 	.word	0x20000c7c

0800128c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800128c:	b480      	push	{r7}
 800128e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001290:	4b06      	ldr	r3, [pc, #24]	; (80012ac <SystemInit+0x20>)
 8001292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001296:	4a05      	ldr	r2, [pc, #20]	; (80012ac <SystemInit+0x20>)
 8001298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800129c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012a0:	bf00      	nop
 80012a2:	46bd      	mov	sp, r7
 80012a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012a8:	4770      	bx	lr
 80012aa:	bf00      	nop
 80012ac:	e000ed00 	.word	0xe000ed00

080012b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80012b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80012e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80012b4:	480d      	ldr	r0, [pc, #52]	; (80012ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80012b6:	490e      	ldr	r1, [pc, #56]	; (80012f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80012b8:	4a0e      	ldr	r2, [pc, #56]	; (80012f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80012ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80012bc:	e002      	b.n	80012c4 <LoopCopyDataInit>

080012be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80012be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80012c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80012c2:	3304      	adds	r3, #4

080012c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80012c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80012c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80012c8:	d3f9      	bcc.n	80012be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80012ca:	4a0b      	ldr	r2, [pc, #44]	; (80012f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80012cc:	4c0b      	ldr	r4, [pc, #44]	; (80012fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80012ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80012d0:	e001      	b.n	80012d6 <LoopFillZerobss>

080012d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80012d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80012d4:	3204      	adds	r2, #4

080012d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80012d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80012d8:	d3fb      	bcc.n	80012d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80012da:	f7ff ffd7 	bl	800128c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80012de:	f006 fef9 	bl	80080d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80012e2:	f7ff fcef 	bl	8000cc4 <main>
  bx  lr    
 80012e6:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80012e8:	20010000 	.word	0x20010000
  ldr r0, =_sdata
 80012ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80012f0:	200004e4 	.word	0x200004e4
  ldr r2, =_sidata
 80012f4:	080081c4 	.word	0x080081c4
  ldr r2, =_sbss
 80012f8:	200004e4 	.word	0x200004e4
  ldr r4, =_ebss
 80012fc:	2000119c 	.word	0x2000119c

08001300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001300:	e7fe      	b.n	8001300 <ADC_IRQHandler>
	...

08001304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001304:	b580      	push	{r7, lr}
 8001306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001308:	4b0e      	ldr	r3, [pc, #56]	; (8001344 <HAL_Init+0x40>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	4a0d      	ldr	r2, [pc, #52]	; (8001344 <HAL_Init+0x40>)
 800130e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001312:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001314:	4b0b      	ldr	r3, [pc, #44]	; (8001344 <HAL_Init+0x40>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	4a0a      	ldr	r2, [pc, #40]	; (8001344 <HAL_Init+0x40>)
 800131a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800131e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001320:	4b08      	ldr	r3, [pc, #32]	; (8001344 <HAL_Init+0x40>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	4a07      	ldr	r2, [pc, #28]	; (8001344 <HAL_Init+0x40>)
 8001326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800132a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800132c:	2003      	movs	r0, #3
 800132e:	f000 fd41 	bl	8001db4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001332:	200f      	movs	r0, #15
 8001334:	f000 f808 	bl	8001348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001338:	f7ff feca 	bl	80010d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800133c:	2300      	movs	r3, #0
}
 800133e:	4618      	mov	r0, r3
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	40023c00 	.word	0x40023c00

08001348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001350:	4b12      	ldr	r3, [pc, #72]	; (800139c <HAL_InitTick+0x54>)
 8001352:	681a      	ldr	r2, [r3, #0]
 8001354:	4b12      	ldr	r3, [pc, #72]	; (80013a0 <HAL_InitTick+0x58>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	4619      	mov	r1, r3
 800135a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800135e:	fbb3 f3f1 	udiv	r3, r3, r1
 8001362:	fbb2 f3f3 	udiv	r3, r2, r3
 8001366:	4618      	mov	r0, r3
 8001368:	f000 fd59 	bl	8001e1e <HAL_SYSTICK_Config>
 800136c:	4603      	mov	r3, r0
 800136e:	2b00      	cmp	r3, #0
 8001370:	d001      	beq.n	8001376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001372:	2301      	movs	r3, #1
 8001374:	e00e      	b.n	8001394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	2b0f      	cmp	r3, #15
 800137a:	d80a      	bhi.n	8001392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800137c:	2200      	movs	r2, #0
 800137e:	6879      	ldr	r1, [r7, #4]
 8001380:	f04f 30ff 	mov.w	r0, #4294967295
 8001384:	f000 fd21 	bl	8001dca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001388:	4a06      	ldr	r2, [pc, #24]	; (80013a4 <HAL_InitTick+0x5c>)
 800138a:	687b      	ldr	r3, [r7, #4]
 800138c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800138e:	2300      	movs	r3, #0
 8001390:	e000      	b.n	8001394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001392:	2301      	movs	r3, #1
}
 8001394:	4618      	mov	r0, r3
 8001396:	3708      	adds	r7, #8
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200003d4 	.word	0x200003d4
 80013a0:	200003dc 	.word	0x200003dc
 80013a4:	200003d8 	.word	0x200003d8

080013a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80013a8:	b480      	push	{r7}
 80013aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80013ac:	4b06      	ldr	r3, [pc, #24]	; (80013c8 <HAL_IncTick+0x20>)
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	461a      	mov	r2, r3
 80013b2:	4b06      	ldr	r3, [pc, #24]	; (80013cc <HAL_IncTick+0x24>)
 80013b4:	681b      	ldr	r3, [r3, #0]
 80013b6:	4413      	add	r3, r2
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <HAL_IncTick+0x24>)
 80013ba:	6013      	str	r3, [r2, #0]
}
 80013bc:	bf00      	nop
 80013be:	46bd      	mov	sp, r7
 80013c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013c4:	4770      	bx	lr
 80013c6:	bf00      	nop
 80013c8:	200003dc 	.word	0x200003dc
 80013cc:	20000798 	.word	0x20000798

080013d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80013d0:	b480      	push	{r7}
 80013d2:	af00      	add	r7, sp, #0
  return uwTick;
 80013d4:	4b03      	ldr	r3, [pc, #12]	; (80013e4 <HAL_GetTick+0x14>)
 80013d6:	681b      	ldr	r3, [r3, #0]
}
 80013d8:	4618      	mov	r0, r3
 80013da:	46bd      	mov	sp, r7
 80013dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e0:	4770      	bx	lr
 80013e2:	bf00      	nop
 80013e4:	20000798 	.word	0x20000798

080013e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b084      	sub	sp, #16
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80013f0:	f7ff ffee 	bl	80013d0 <HAL_GetTick>
 80013f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80013fa:	68fb      	ldr	r3, [r7, #12]
 80013fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001400:	d005      	beq.n	800140e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001402:	4b0a      	ldr	r3, [pc, #40]	; (800142c <HAL_Delay+0x44>)
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	461a      	mov	r2, r3
 8001408:	68fb      	ldr	r3, [r7, #12]
 800140a:	4413      	add	r3, r2
 800140c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800140e:	bf00      	nop
 8001410:	f7ff ffde 	bl	80013d0 <HAL_GetTick>
 8001414:	4602      	mov	r2, r0
 8001416:	68bb      	ldr	r3, [r7, #8]
 8001418:	1ad3      	subs	r3, r2, r3
 800141a:	68fa      	ldr	r2, [r7, #12]
 800141c:	429a      	cmp	r2, r3
 800141e:	d8f7      	bhi.n	8001410 <HAL_Delay+0x28>
  {
  }
}
 8001420:	bf00      	nop
 8001422:	bf00      	nop
 8001424:	3710      	adds	r7, #16
 8001426:	46bd      	mov	sp, r7
 8001428:	bd80      	pop	{r7, pc}
 800142a:	bf00      	nop
 800142c:	200003dc 	.word	0x200003dc

08001430 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	b084      	sub	sp, #16
 8001434:	af00      	add	r7, sp, #0
 8001436:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001438:	2300      	movs	r3, #0
 800143a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	2b00      	cmp	r3, #0
 8001440:	d101      	bne.n	8001446 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001442:	2301      	movs	r3, #1
 8001444:	e033      	b.n	80014ae <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800144a:	2b00      	cmp	r3, #0
 800144c:	d109      	bne.n	8001462 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800144e:	6878      	ldr	r0, [r7, #4]
 8001450:	f7ff fe66 	bl	8001120 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2200      	movs	r2, #0
 8001458:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	2200      	movs	r2, #0
 800145e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001466:	f003 0310 	and.w	r3, r3, #16
 800146a:	2b00      	cmp	r3, #0
 800146c:	d118      	bne.n	80014a0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001472:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8001476:	f023 0302 	bic.w	r3, r3, #2
 800147a:	f043 0202 	orr.w	r2, r3, #2
 800147e:	687b      	ldr	r3, [r7, #4]
 8001480:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8001482:	6878      	ldr	r0, [r7, #4]
 8001484:	f000 fa48 	bl	8001918 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001492:	f023 0303 	bic.w	r3, r3, #3
 8001496:	f043 0201 	orr.w	r2, r3, #1
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	641a      	str	r2, [r3, #64]	; 0x40
 800149e:	e001      	b.n	80014a4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80014a0:	2301      	movs	r3, #1
 80014a2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2200      	movs	r2, #0
 80014a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80014ac:	7bfb      	ldrb	r3, [r7, #15]
}
 80014ae:	4618      	mov	r0, r3
 80014b0:	3710      	adds	r7, #16
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bd80      	pop	{r7, pc}
	...

080014b8 <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 80014b8:	b580      	push	{r7, lr}
 80014ba:	b086      	sub	sp, #24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	60f8      	str	r0, [r7, #12]
 80014c0:	60b9      	str	r1, [r7, #8]
 80014c2:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 80014c4:	2300      	movs	r3, #0
 80014c6:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80014c8:	68fb      	ldr	r3, [r7, #12]
 80014ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80014ce:	2b01      	cmp	r3, #1
 80014d0:	d101      	bne.n	80014d6 <HAL_ADC_Start_DMA+0x1e>
 80014d2:	2302      	movs	r3, #2
 80014d4:	e0ce      	b.n	8001674 <HAL_ADC_Start_DMA+0x1bc>
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	2201      	movs	r2, #1
 80014da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80014de:	68fb      	ldr	r3, [r7, #12]
 80014e0:	681b      	ldr	r3, [r3, #0]
 80014e2:	689b      	ldr	r3, [r3, #8]
 80014e4:	f003 0301 	and.w	r3, r3, #1
 80014e8:	2b01      	cmp	r3, #1
 80014ea:	d018      	beq.n	800151e <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	681b      	ldr	r3, [r3, #0]
 80014f0:	689a      	ldr	r2, [r3, #8]
 80014f2:	68fb      	ldr	r3, [r7, #12]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	f042 0201 	orr.w	r2, r2, #1
 80014fa:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80014fc:	4b5f      	ldr	r3, [pc, #380]	; (800167c <HAL_ADC_Start_DMA+0x1c4>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a5f      	ldr	r2, [pc, #380]	; (8001680 <HAL_ADC_Start_DMA+0x1c8>)
 8001502:	fba2 2303 	umull	r2, r3, r2, r3
 8001506:	0c9a      	lsrs	r2, r3, #18
 8001508:	4613      	mov	r3, r2
 800150a:	005b      	lsls	r3, r3, #1
 800150c:	4413      	add	r3, r2
 800150e:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001510:	e002      	b.n	8001518 <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8001512:	693b      	ldr	r3, [r7, #16]
 8001514:	3b01      	subs	r3, #1
 8001516:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8001518:	693b      	ldr	r3, [r7, #16]
 800151a:	2b00      	cmp	r3, #0
 800151c:	d1f9      	bne.n	8001512 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Check ADC DMA Mode                                                     */
  /* - disable the DMA Mode if it is already enabled                        */
  if((hadc->Instance->CR2 & ADC_CR2_DMA) == ADC_CR2_DMA)
 800151e:	68fb      	ldr	r3, [r7, #12]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	689b      	ldr	r3, [r3, #8]
 8001524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001528:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800152c:	d107      	bne.n	800153e <HAL_ADC_Start_DMA+0x86>
  {
    CLEAR_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 800152e:	68fb      	ldr	r3, [r7, #12]
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	689a      	ldr	r2, [r3, #8]
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800153c:	609a      	str	r2, [r3, #8]
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800153e:	68fb      	ldr	r3, [r7, #12]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	689b      	ldr	r3, [r3, #8]
 8001544:	f003 0301 	and.w	r3, r3, #1
 8001548:	2b01      	cmp	r3, #1
 800154a:	f040 8086 	bne.w	800165a <HAL_ADC_Start_DMA+0x1a2>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001552:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8001556:	f023 0301 	bic.w	r3, r3, #1
 800155a:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800155e:	68fb      	ldr	r3, [r7, #12]
 8001560:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	681b      	ldr	r3, [r3, #0]
 8001566:	685b      	ldr	r3, [r3, #4]
 8001568:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800156c:	2b00      	cmp	r3, #0
 800156e:	d007      	beq.n	8001580 <HAL_ADC_Start_DMA+0xc8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8001570:	68fb      	ldr	r3, [r7, #12]
 8001572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001574:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001578:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001584:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001588:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800158c:	d106      	bne.n	800159c <HAL_ADC_Start_DMA+0xe4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800158e:	68fb      	ldr	r3, [r7, #12]
 8001590:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001592:	f023 0206 	bic.w	r2, r3, #6
 8001596:	68fb      	ldr	r3, [r7, #12]
 8001598:	645a      	str	r2, [r3, #68]	; 0x44
 800159a:	e002      	b.n	80015a2 <HAL_ADC_Start_DMA+0xea>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800159c:	68fb      	ldr	r3, [r7, #12]
 800159e:	2200      	movs	r2, #0
 80015a0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 80015a2:	68fb      	ldr	r3, [r7, #12]
 80015a4:	2200      	movs	r2, #0
 80015a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80015aa:	4b36      	ldr	r3, [pc, #216]	; (8001684 <HAL_ADC_Start_DMA+0x1cc>)
 80015ac:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 80015ae:	68fb      	ldr	r3, [r7, #12]
 80015b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015b2:	4a35      	ldr	r2, [pc, #212]	; (8001688 <HAL_ADC_Start_DMA+0x1d0>)
 80015b4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 80015b6:	68fb      	ldr	r3, [r7, #12]
 80015b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015ba:	4a34      	ldr	r2, [pc, #208]	; (800168c <HAL_ADC_Start_DMA+0x1d4>)
 80015bc:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 80015be:	68fb      	ldr	r3, [r7, #12]
 80015c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80015c2:	4a33      	ldr	r2, [pc, #204]	; (8001690 <HAL_ADC_Start_DMA+0x1d8>)
 80015c4:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80015c6:	68fb      	ldr	r3, [r7, #12]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80015ce:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80015d0:	68fb      	ldr	r3, [r7, #12]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	685a      	ldr	r2, [r3, #4]
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 80015de:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	689a      	ldr	r2, [r3, #8]
 80015e6:	68fb      	ldr	r3, [r7, #12]
 80015e8:	681b      	ldr	r3, [r3, #0]
 80015ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80015ee:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 80015f0:	68fb      	ldr	r3, [r7, #12]
 80015f2:	6b98      	ldr	r0, [r3, #56]	; 0x38
 80015f4:	68fb      	ldr	r3, [r7, #12]
 80015f6:	681b      	ldr	r3, [r3, #0]
 80015f8:	334c      	adds	r3, #76	; 0x4c
 80015fa:	4619      	mov	r1, r3
 80015fc:	68ba      	ldr	r2, [r7, #8]
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	f000 fcc8 	bl	8001f94 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	685b      	ldr	r3, [r3, #4]
 8001608:	f003 031f 	and.w	r3, r3, #31
 800160c:	2b00      	cmp	r3, #0
 800160e:	d10f      	bne.n	8001630 <HAL_ADC_Start_DMA+0x178>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8001610:	68fb      	ldr	r3, [r7, #12]
 8001612:	681b      	ldr	r3, [r3, #0]
 8001614:	689b      	ldr	r3, [r3, #8]
 8001616:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800161a:	2b00      	cmp	r3, #0
 800161c:	d129      	bne.n	8001672 <HAL_ADC_Start_DMA+0x1ba>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800161e:	68fb      	ldr	r3, [r7, #12]
 8001620:	681b      	ldr	r3, [r3, #0]
 8001622:	689a      	ldr	r2, [r3, #8]
 8001624:	68fb      	ldr	r3, [r7, #12]
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	e020      	b.n	8001672 <HAL_ADC_Start_DMA+0x1ba>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8001630:	68fb      	ldr	r3, [r7, #12]
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a17      	ldr	r2, [pc, #92]	; (8001694 <HAL_ADC_Start_DMA+0x1dc>)
 8001636:	4293      	cmp	r3, r2
 8001638:	d11b      	bne.n	8001672 <HAL_ADC_Start_DMA+0x1ba>
 800163a:	68fb      	ldr	r3, [r7, #12]
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	689b      	ldr	r3, [r3, #8]
 8001640:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001644:	2b00      	cmp	r3, #0
 8001646:	d114      	bne.n	8001672 <HAL_ADC_Start_DMA+0x1ba>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001648:	68fb      	ldr	r3, [r7, #12]
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	689a      	ldr	r2, [r3, #8]
 800164e:	68fb      	ldr	r3, [r7, #12]
 8001650:	681b      	ldr	r3, [r3, #0]
 8001652:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001656:	609a      	str	r2, [r3, #8]
 8001658:	e00b      	b.n	8001672 <HAL_ADC_Start_DMA+0x1ba>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800165a:	68fb      	ldr	r3, [r7, #12]
 800165c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800165e:	f043 0210 	orr.w	r2, r3, #16
 8001662:	68fb      	ldr	r3, [r7, #12]
 8001664:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800166a:	f043 0201 	orr.w	r2, r3, #1
 800166e:	68fb      	ldr	r3, [r7, #12]
 8001670:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001672:	2300      	movs	r3, #0
}
 8001674:	4618      	mov	r0, r3
 8001676:	3718      	adds	r7, #24
 8001678:	46bd      	mov	sp, r7
 800167a:	bd80      	pop	{r7, pc}
 800167c:	200003d4 	.word	0x200003d4
 8001680:	431bde83 	.word	0x431bde83
 8001684:	40012300 	.word	0x40012300
 8001688:	08001b11 	.word	0x08001b11
 800168c:	08001bcb 	.word	0x08001bcb
 8001690:	08001be7 	.word	0x08001be7
 8001694:	40012000 	.word	0x40012000

08001698 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8001698:	b480      	push	{r7}
 800169a:	b083      	sub	sp, #12
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 80016a0:	bf00      	nop
 80016a2:	370c      	adds	r7, #12
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr

080016ac <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 80016ac:	b480      	push	{r7}
 80016ae:	b083      	sub	sp, #12
 80016b0:	af00      	add	r7, sp, #0
 80016b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 80016b4:	bf00      	nop
 80016b6:	370c      	adds	r7, #12
 80016b8:	46bd      	mov	sp, r7
 80016ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016be:	4770      	bx	lr

080016c0 <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80016c0:	b480      	push	{r7}
 80016c2:	b083      	sub	sp, #12
 80016c4:	af00      	add	r7, sp, #0
 80016c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 80016c8:	bf00      	nop
 80016ca:	370c      	adds	r7, #12
 80016cc:	46bd      	mov	sp, r7
 80016ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d2:	4770      	bx	lr

080016d4 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80016d4:	b480      	push	{r7}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
 80016dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80016de:	2300      	movs	r3, #0
 80016e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80016e2:	687b      	ldr	r3, [r7, #4]
 80016e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80016e8:	2b01      	cmp	r3, #1
 80016ea:	d101      	bne.n	80016f0 <HAL_ADC_ConfigChannel+0x1c>
 80016ec:	2302      	movs	r3, #2
 80016ee:	e105      	b.n	80018fc <HAL_ADC_ConfigChannel+0x228>
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	2201      	movs	r2, #1
 80016f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80016f8:	683b      	ldr	r3, [r7, #0]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	2b09      	cmp	r3, #9
 80016fe:	d925      	bls.n	800174c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	68d9      	ldr	r1, [r3, #12]
 8001706:	683b      	ldr	r3, [r7, #0]
 8001708:	681b      	ldr	r3, [r3, #0]
 800170a:	b29b      	uxth	r3, r3
 800170c:	461a      	mov	r2, r3
 800170e:	4613      	mov	r3, r2
 8001710:	005b      	lsls	r3, r3, #1
 8001712:	4413      	add	r3, r2
 8001714:	3b1e      	subs	r3, #30
 8001716:	2207      	movs	r2, #7
 8001718:	fa02 f303 	lsl.w	r3, r2, r3
 800171c:	43da      	mvns	r2, r3
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	400a      	ands	r2, r1
 8001724:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	68d9      	ldr	r1, [r3, #12]
 800172c:	683b      	ldr	r3, [r7, #0]
 800172e:	689a      	ldr	r2, [r3, #8]
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	b29b      	uxth	r3, r3
 8001736:	4618      	mov	r0, r3
 8001738:	4603      	mov	r3, r0
 800173a:	005b      	lsls	r3, r3, #1
 800173c:	4403      	add	r3, r0
 800173e:	3b1e      	subs	r3, #30
 8001740:	409a      	lsls	r2, r3
 8001742:	687b      	ldr	r3, [r7, #4]
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	430a      	orrs	r2, r1
 8001748:	60da      	str	r2, [r3, #12]
 800174a:	e022      	b.n	8001792 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	6919      	ldr	r1, [r3, #16]
 8001752:	683b      	ldr	r3, [r7, #0]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	b29b      	uxth	r3, r3
 8001758:	461a      	mov	r2, r3
 800175a:	4613      	mov	r3, r2
 800175c:	005b      	lsls	r3, r3, #1
 800175e:	4413      	add	r3, r2
 8001760:	2207      	movs	r2, #7
 8001762:	fa02 f303 	lsl.w	r3, r2, r3
 8001766:	43da      	mvns	r2, r3
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	400a      	ands	r2, r1
 800176e:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	6919      	ldr	r1, [r3, #16]
 8001776:	683b      	ldr	r3, [r7, #0]
 8001778:	689a      	ldr	r2, [r3, #8]
 800177a:	683b      	ldr	r3, [r7, #0]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	b29b      	uxth	r3, r3
 8001780:	4618      	mov	r0, r3
 8001782:	4603      	mov	r3, r0
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4403      	add	r3, r0
 8001788:	409a      	lsls	r2, r3
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	681b      	ldr	r3, [r3, #0]
 800178e:	430a      	orrs	r2, r1
 8001790:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	685b      	ldr	r3, [r3, #4]
 8001796:	2b06      	cmp	r3, #6
 8001798:	d824      	bhi.n	80017e4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017a0:	683b      	ldr	r3, [r7, #0]
 80017a2:	685a      	ldr	r2, [r3, #4]
 80017a4:	4613      	mov	r3, r2
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	4413      	add	r3, r2
 80017aa:	3b05      	subs	r3, #5
 80017ac:	221f      	movs	r2, #31
 80017ae:	fa02 f303 	lsl.w	r3, r2, r3
 80017b2:	43da      	mvns	r2, r3
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	400a      	ands	r2, r1
 80017ba:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80017c2:	683b      	ldr	r3, [r7, #0]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	b29b      	uxth	r3, r3
 80017c8:	4618      	mov	r0, r3
 80017ca:	683b      	ldr	r3, [r7, #0]
 80017cc:	685a      	ldr	r2, [r3, #4]
 80017ce:	4613      	mov	r3, r2
 80017d0:	009b      	lsls	r3, r3, #2
 80017d2:	4413      	add	r3, r2
 80017d4:	3b05      	subs	r3, #5
 80017d6:	fa00 f203 	lsl.w	r2, r0, r3
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	430a      	orrs	r2, r1
 80017e0:	635a      	str	r2, [r3, #52]	; 0x34
 80017e2:	e04c      	b.n	800187e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80017e4:	683b      	ldr	r3, [r7, #0]
 80017e6:	685b      	ldr	r3, [r3, #4]
 80017e8:	2b0c      	cmp	r3, #12
 80017ea:	d824      	bhi.n	8001836 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80017ec:	687b      	ldr	r3, [r7, #4]
 80017ee:	681b      	ldr	r3, [r3, #0]
 80017f0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80017f2:	683b      	ldr	r3, [r7, #0]
 80017f4:	685a      	ldr	r2, [r3, #4]
 80017f6:	4613      	mov	r3, r2
 80017f8:	009b      	lsls	r3, r3, #2
 80017fa:	4413      	add	r3, r2
 80017fc:	3b23      	subs	r3, #35	; 0x23
 80017fe:	221f      	movs	r2, #31
 8001800:	fa02 f303 	lsl.w	r3, r2, r3
 8001804:	43da      	mvns	r2, r3
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	681b      	ldr	r3, [r3, #0]
 800180a:	400a      	ands	r2, r1
 800180c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001814:	683b      	ldr	r3, [r7, #0]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	b29b      	uxth	r3, r3
 800181a:	4618      	mov	r0, r3
 800181c:	683b      	ldr	r3, [r7, #0]
 800181e:	685a      	ldr	r2, [r3, #4]
 8001820:	4613      	mov	r3, r2
 8001822:	009b      	lsls	r3, r3, #2
 8001824:	4413      	add	r3, r2
 8001826:	3b23      	subs	r3, #35	; 0x23
 8001828:	fa00 f203 	lsl.w	r2, r0, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	430a      	orrs	r2, r1
 8001832:	631a      	str	r2, [r3, #48]	; 0x30
 8001834:	e023      	b.n	800187e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800183c:	683b      	ldr	r3, [r7, #0]
 800183e:	685a      	ldr	r2, [r3, #4]
 8001840:	4613      	mov	r3, r2
 8001842:	009b      	lsls	r3, r3, #2
 8001844:	4413      	add	r3, r2
 8001846:	3b41      	subs	r3, #65	; 0x41
 8001848:	221f      	movs	r2, #31
 800184a:	fa02 f303 	lsl.w	r3, r2, r3
 800184e:	43da      	mvns	r2, r3
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	681b      	ldr	r3, [r3, #0]
 8001854:	400a      	ands	r2, r1
 8001856:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800185e:	683b      	ldr	r3, [r7, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	b29b      	uxth	r3, r3
 8001864:	4618      	mov	r0, r3
 8001866:	683b      	ldr	r3, [r7, #0]
 8001868:	685a      	ldr	r2, [r3, #4]
 800186a:	4613      	mov	r3, r2
 800186c:	009b      	lsls	r3, r3, #2
 800186e:	4413      	add	r3, r2
 8001870:	3b41      	subs	r3, #65	; 0x41
 8001872:	fa00 f203 	lsl.w	r2, r0, r3
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	681b      	ldr	r3, [r3, #0]
 800187a:	430a      	orrs	r2, r1
 800187c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800187e:	4b22      	ldr	r3, [pc, #136]	; (8001908 <HAL_ADC_ConfigChannel+0x234>)
 8001880:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8001882:	687b      	ldr	r3, [r7, #4]
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	4a21      	ldr	r2, [pc, #132]	; (800190c <HAL_ADC_ConfigChannel+0x238>)
 8001888:	4293      	cmp	r3, r2
 800188a:	d109      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x1cc>
 800188c:	683b      	ldr	r3, [r7, #0]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	2b12      	cmp	r3, #18
 8001892:	d105      	bne.n	80018a0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8001894:	68fb      	ldr	r3, [r7, #12]
 8001896:	685b      	ldr	r3, [r3, #4]
 8001898:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 800189c:	68fb      	ldr	r3, [r7, #12]
 800189e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a19      	ldr	r2, [pc, #100]	; (800190c <HAL_ADC_ConfigChannel+0x238>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d123      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x21e>
 80018aa:	683b      	ldr	r3, [r7, #0]
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b10      	cmp	r3, #16
 80018b0:	d003      	beq.n	80018ba <HAL_ADC_ConfigChannel+0x1e6>
 80018b2:	683b      	ldr	r3, [r7, #0]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	2b11      	cmp	r3, #17
 80018b8:	d11b      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80018ba:	68fb      	ldr	r3, [r7, #12]
 80018bc:	685b      	ldr	r3, [r3, #4]
 80018be:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80018c6:	683b      	ldr	r3, [r7, #0]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	2b10      	cmp	r3, #16
 80018cc:	d111      	bne.n	80018f2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80018ce:	4b10      	ldr	r3, [pc, #64]	; (8001910 <HAL_ADC_ConfigChannel+0x23c>)
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a10      	ldr	r2, [pc, #64]	; (8001914 <HAL_ADC_ConfigChannel+0x240>)
 80018d4:	fba2 2303 	umull	r2, r3, r2, r3
 80018d8:	0c9a      	lsrs	r2, r3, #18
 80018da:	4613      	mov	r3, r2
 80018dc:	009b      	lsls	r3, r3, #2
 80018de:	4413      	add	r3, r2
 80018e0:	005b      	lsls	r3, r3, #1
 80018e2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018e4:	e002      	b.n	80018ec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 80018e6:	68bb      	ldr	r3, [r7, #8]
 80018e8:	3b01      	subs	r3, #1
 80018ea:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 80018ec:	68bb      	ldr	r3, [r7, #8]
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d1f9      	bne.n	80018e6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2200      	movs	r2, #0
 80018f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80018fa:	2300      	movs	r3, #0
}
 80018fc:	4618      	mov	r0, r3
 80018fe:	3714      	adds	r7, #20
 8001900:	46bd      	mov	sp, r7
 8001902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001906:	4770      	bx	lr
 8001908:	40012300 	.word	0x40012300
 800190c:	40012000 	.word	0x40012000
 8001910:	200003d4 	.word	0x200003d4
 8001914:	431bde83 	.word	0x431bde83

08001918 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001918:	b480      	push	{r7}
 800191a:	b085      	sub	sp, #20
 800191c:	af00      	add	r7, sp, #0
 800191e:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8001920:	4b79      	ldr	r3, [pc, #484]	; (8001b08 <ADC_Init+0x1f0>)
 8001922:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	685b      	ldr	r3, [r3, #4]
 8001928:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	685a      	ldr	r2, [r3, #4]
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	685b      	ldr	r3, [r3, #4]
 8001938:	431a      	orrs	r2, r3
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	685a      	ldr	r2, [r3, #4]
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800194c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800194e:	687b      	ldr	r3, [r7, #4]
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	6859      	ldr	r1, [r3, #4]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	691b      	ldr	r3, [r3, #16]
 8001958:	021a      	lsls	r2, r3, #8
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	681b      	ldr	r3, [r3, #0]
 800195e:	430a      	orrs	r2, r1
 8001960:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001962:	687b      	ldr	r3, [r7, #4]
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	685a      	ldr	r2, [r3, #4]
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001970:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	6859      	ldr	r1, [r3, #4]
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689a      	ldr	r2, [r3, #8]
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	430a      	orrs	r2, r1
 8001982:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	681b      	ldr	r3, [r3, #0]
 8001988:	689a      	ldr	r2, [r3, #8]
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	681b      	ldr	r3, [r3, #0]
 800198e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001992:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	6899      	ldr	r1, [r3, #8]
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	68da      	ldr	r2, [r3, #12]
 800199e:	687b      	ldr	r3, [r7, #4]
 80019a0:	681b      	ldr	r3, [r3, #0]
 80019a2:	430a      	orrs	r2, r1
 80019a4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80019aa:	4a58      	ldr	r2, [pc, #352]	; (8001b0c <ADC_Init+0x1f4>)
 80019ac:	4293      	cmp	r3, r2
 80019ae:	d022      	beq.n	80019f6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	681b      	ldr	r3, [r3, #0]
 80019b4:	689a      	ldr	r2, [r3, #8]
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80019be:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	681b      	ldr	r3, [r3, #0]
 80019c4:	6899      	ldr	r1, [r3, #8]
 80019c6:	687b      	ldr	r3, [r7, #4]
 80019c8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	430a      	orrs	r2, r1
 80019d0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	689a      	ldr	r2, [r3, #8]
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80019e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	6899      	ldr	r1, [r3, #8]
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	430a      	orrs	r2, r1
 80019f2:	609a      	str	r2, [r3, #8]
 80019f4:	e00f      	b.n	8001a16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80019f6:	687b      	ldr	r3, [r7, #4]
 80019f8:	681b      	ldr	r3, [r3, #0]
 80019fa:	689a      	ldr	r2, [r3, #8]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001a04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	681b      	ldr	r3, [r3, #0]
 8001a0a:	689a      	ldr	r2, [r3, #8]
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001a14:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	689a      	ldr	r2, [r3, #8]
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	f022 0202 	bic.w	r2, r2, #2
 8001a24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001a26:	687b      	ldr	r3, [r7, #4]
 8001a28:	681b      	ldr	r3, [r3, #0]
 8001a2a:	6899      	ldr	r1, [r3, #8]
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	7e1b      	ldrb	r3, [r3, #24]
 8001a30:	005a      	lsls	r2, r3, #1
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	430a      	orrs	r2, r1
 8001a38:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001a40:	2b00      	cmp	r3, #0
 8001a42:	d01b      	beq.n	8001a7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685a      	ldr	r2, [r3, #4]
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	681b      	ldr	r3, [r3, #0]
 8001a4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001a52:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001a54:	687b      	ldr	r3, [r7, #4]
 8001a56:	681b      	ldr	r3, [r3, #0]
 8001a58:	685a      	ldr	r2, [r3, #4]
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001a62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	6859      	ldr	r1, [r3, #4]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001a6e:	3b01      	subs	r3, #1
 8001a70:	035a      	lsls	r2, r3, #13
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	430a      	orrs	r2, r1
 8001a78:	605a      	str	r2, [r3, #4]
 8001a7a:	e007      	b.n	8001a8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	685a      	ldr	r2, [r3, #4]
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001a8a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8001a9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69db      	ldr	r3, [r3, #28]
 8001aa6:	3b01      	subs	r3, #1
 8001aa8:	051a      	lsls	r2, r3, #20
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	430a      	orrs	r2, r1
 8001ab0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	681b      	ldr	r3, [r3, #0]
 8001ab6:	689a      	ldr	r2, [r3, #8]
 8001ab8:	687b      	ldr	r3, [r7, #4]
 8001aba:	681b      	ldr	r3, [r3, #0]
 8001abc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8001ac0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	6899      	ldr	r1, [r3, #8]
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8001ace:	025a      	lsls	r2, r3, #9
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	430a      	orrs	r2, r1
 8001ad6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	681b      	ldr	r3, [r3, #0]
 8001adc:	689a      	ldr	r2, [r3, #8]
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001ae6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001ae8:	687b      	ldr	r3, [r7, #4]
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	6899      	ldr	r1, [r3, #8]
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	695b      	ldr	r3, [r3, #20]
 8001af2:	029a      	lsls	r2, r3, #10
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	681b      	ldr	r3, [r3, #0]
 8001af8:	430a      	orrs	r2, r1
 8001afa:	609a      	str	r2, [r3, #8]
}
 8001afc:	bf00      	nop
 8001afe:	3714      	adds	r7, #20
 8001b00:	46bd      	mov	sp, r7
 8001b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b06:	4770      	bx	lr
 8001b08:	40012300 	.word	0x40012300
 8001b0c:	0f000001 	.word	0x0f000001

08001b10 <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b084      	sub	sp, #16
 8001b14:	af00      	add	r7, sp, #0
 8001b16:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001b1c:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b22:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8001b26:	2b00      	cmp	r3, #0
 8001b28:	d13c      	bne.n	8001ba4 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001b2a:	68fb      	ldr	r3, [r7, #12]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001b32:	68fb      	ldr	r3, [r7, #12]
 8001b34:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	689b      	ldr	r3, [r3, #8]
 8001b3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	d12b      	bne.n	8001b9c <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b44:	68fb      	ldr	r3, [r7, #12]
 8001b46:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d127      	bne.n	8001b9c <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b4c:	68fb      	ldr	r3, [r7, #12]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d006      	beq.n	8001b68 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001b5a:	68fb      	ldr	r3, [r7, #12]
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d119      	bne.n	8001b9c <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8001b68:	68fb      	ldr	r3, [r7, #12]
 8001b6a:	681b      	ldr	r3, [r3, #0]
 8001b6c:	685a      	ldr	r2, [r3, #4]
 8001b6e:	68fb      	ldr	r3, [r7, #12]
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	f022 0220 	bic.w	r2, r2, #32
 8001b76:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001b78:	68fb      	ldr	r3, [r7, #12]
 8001b7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b7c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8001b84:	68fb      	ldr	r3, [r7, #12]
 8001b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b8c:	2b00      	cmp	r3, #0
 8001b8e:	d105      	bne.n	8001b9c <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b94:	f043 0201 	orr.w	r2, r3, #1
 8001b98:	68fb      	ldr	r3, [r7, #12]
 8001b9a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001b9c:	68f8      	ldr	r0, [r7, #12]
 8001b9e:	f7ff fd7b 	bl	8001698 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8001ba2:	e00e      	b.n	8001bc2 <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8001ba4:	68fb      	ldr	r3, [r7, #12]
 8001ba6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ba8:	f003 0310 	and.w	r3, r3, #16
 8001bac:	2b00      	cmp	r3, #0
 8001bae:	d003      	beq.n	8001bb8 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 8001bb0:	68f8      	ldr	r0, [r7, #12]
 8001bb2:	f7ff fd85 	bl	80016c0 <HAL_ADC_ErrorCallback>
}
 8001bb6:	e004      	b.n	8001bc2 <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8001bb8:	68fb      	ldr	r3, [r7, #12]
 8001bba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001bbe:	6878      	ldr	r0, [r7, #4]
 8001bc0:	4798      	blx	r3
}
 8001bc2:	bf00      	nop
 8001bc4:	3710      	adds	r7, #16
 8001bc6:	46bd      	mov	sp, r7
 8001bc8:	bd80      	pop	{r7, pc}

08001bca <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001bca:	b580      	push	{r7, lr}
 8001bcc:	b084      	sub	sp, #16
 8001bce:	af00      	add	r7, sp, #0
 8001bd0:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bd6:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001bd8:	68f8      	ldr	r0, [r7, #12]
 8001bda:	f7ff fd67 	bl	80016ac <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001bde:	bf00      	nop
 8001be0:	3710      	adds	r7, #16
 8001be2:	46bd      	mov	sp, r7
 8001be4:	bd80      	pop	{r7, pc}

08001be6 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8001be6:	b580      	push	{r7, lr}
 8001be8:	b084      	sub	sp, #16
 8001bea:	af00      	add	r7, sp, #0
 8001bec:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bf2:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8001bf4:	68fb      	ldr	r3, [r7, #12]
 8001bf6:	2240      	movs	r2, #64	; 0x40
 8001bf8:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8001bfa:	68fb      	ldr	r3, [r7, #12]
 8001bfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001bfe:	f043 0204 	orr.w	r2, r3, #4
 8001c02:	68fb      	ldr	r3, [r7, #12]
 8001c04:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f7ff fd5a 	bl	80016c0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001c0c:	bf00      	nop
 8001c0e:	3710      	adds	r7, #16
 8001c10:	46bd      	mov	sp, r7
 8001c12:	bd80      	pop	{r7, pc}

08001c14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b085      	sub	sp, #20
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	f003 0307 	and.w	r3, r3, #7
 8001c22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001c24:	4b0c      	ldr	r3, [pc, #48]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001c2a:	68ba      	ldr	r2, [r7, #8]
 8001c2c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001c30:	4013      	ands	r3, r2
 8001c32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001c34:	68fb      	ldr	r3, [r7, #12]
 8001c36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001c3c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001c40:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001c44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001c46:	4a04      	ldr	r2, [pc, #16]	; (8001c58 <__NVIC_SetPriorityGrouping+0x44>)
 8001c48:	68bb      	ldr	r3, [r7, #8]
 8001c4a:	60d3      	str	r3, [r2, #12]
}
 8001c4c:	bf00      	nop
 8001c4e:	3714      	adds	r7, #20
 8001c50:	46bd      	mov	sp, r7
 8001c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c56:	4770      	bx	lr
 8001c58:	e000ed00 	.word	0xe000ed00

08001c5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001c5c:	b480      	push	{r7}
 8001c5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001c60:	4b04      	ldr	r3, [pc, #16]	; (8001c74 <__NVIC_GetPriorityGrouping+0x18>)
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	0a1b      	lsrs	r3, r3, #8
 8001c66:	f003 0307 	and.w	r3, r3, #7
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	46bd      	mov	sp, r7
 8001c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c72:	4770      	bx	lr
 8001c74:	e000ed00 	.word	0xe000ed00

08001c78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c78:	b480      	push	{r7}
 8001c7a:	b083      	sub	sp, #12
 8001c7c:	af00      	add	r7, sp, #0
 8001c7e:	4603      	mov	r3, r0
 8001c80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	db0b      	blt.n	8001ca2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	f003 021f 	and.w	r2, r3, #31
 8001c90:	4907      	ldr	r1, [pc, #28]	; (8001cb0 <__NVIC_EnableIRQ+0x38>)
 8001c92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c96:	095b      	lsrs	r3, r3, #5
 8001c98:	2001      	movs	r0, #1
 8001c9a:	fa00 f202 	lsl.w	r2, r0, r2
 8001c9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001ca2:	bf00      	nop
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr
 8001cae:	bf00      	nop
 8001cb0:	e000e100 	.word	0xe000e100

08001cb4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b083      	sub	sp, #12
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	6039      	str	r1, [r7, #0]
 8001cbe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cc4:	2b00      	cmp	r3, #0
 8001cc6:	db0a      	blt.n	8001cde <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cc8:	683b      	ldr	r3, [r7, #0]
 8001cca:	b2da      	uxtb	r2, r3
 8001ccc:	490c      	ldr	r1, [pc, #48]	; (8001d00 <__NVIC_SetPriority+0x4c>)
 8001cce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001cd2:	0112      	lsls	r2, r2, #4
 8001cd4:	b2d2      	uxtb	r2, r2
 8001cd6:	440b      	add	r3, r1
 8001cd8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001cdc:	e00a      	b.n	8001cf4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001cde:	683b      	ldr	r3, [r7, #0]
 8001ce0:	b2da      	uxtb	r2, r3
 8001ce2:	4908      	ldr	r1, [pc, #32]	; (8001d04 <__NVIC_SetPriority+0x50>)
 8001ce4:	79fb      	ldrb	r3, [r7, #7]
 8001ce6:	f003 030f 	and.w	r3, r3, #15
 8001cea:	3b04      	subs	r3, #4
 8001cec:	0112      	lsls	r2, r2, #4
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	440b      	add	r3, r1
 8001cf2:	761a      	strb	r2, [r3, #24]
}
 8001cf4:	bf00      	nop
 8001cf6:	370c      	adds	r7, #12
 8001cf8:	46bd      	mov	sp, r7
 8001cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfe:	4770      	bx	lr
 8001d00:	e000e100 	.word	0xe000e100
 8001d04:	e000ed00 	.word	0xe000ed00

08001d08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001d08:	b480      	push	{r7}
 8001d0a:	b089      	sub	sp, #36	; 0x24
 8001d0c:	af00      	add	r7, sp, #0
 8001d0e:	60f8      	str	r0, [r7, #12]
 8001d10:	60b9      	str	r1, [r7, #8]
 8001d12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001d14:	68fb      	ldr	r3, [r7, #12]
 8001d16:	f003 0307 	and.w	r3, r3, #7
 8001d1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001d1c:	69fb      	ldr	r3, [r7, #28]
 8001d1e:	f1c3 0307 	rsb	r3, r3, #7
 8001d22:	2b04      	cmp	r3, #4
 8001d24:	bf28      	it	cs
 8001d26:	2304      	movcs	r3, #4
 8001d28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001d2a:	69fb      	ldr	r3, [r7, #28]
 8001d2c:	3304      	adds	r3, #4
 8001d2e:	2b06      	cmp	r3, #6
 8001d30:	d902      	bls.n	8001d38 <NVIC_EncodePriority+0x30>
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	3b03      	subs	r3, #3
 8001d36:	e000      	b.n	8001d3a <NVIC_EncodePriority+0x32>
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001d40:	69bb      	ldr	r3, [r7, #24]
 8001d42:	fa02 f303 	lsl.w	r3, r2, r3
 8001d46:	43da      	mvns	r2, r3
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	401a      	ands	r2, r3
 8001d4c:	697b      	ldr	r3, [r7, #20]
 8001d4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001d50:	f04f 31ff 	mov.w	r1, #4294967295
 8001d54:	697b      	ldr	r3, [r7, #20]
 8001d56:	fa01 f303 	lsl.w	r3, r1, r3
 8001d5a:	43d9      	mvns	r1, r3
 8001d5c:	687b      	ldr	r3, [r7, #4]
 8001d5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001d60:	4313      	orrs	r3, r2
         );
}
 8001d62:	4618      	mov	r0, r3
 8001d64:	3724      	adds	r7, #36	; 0x24
 8001d66:	46bd      	mov	sp, r7
 8001d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6c:	4770      	bx	lr
	...

08001d70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b082      	sub	sp, #8
 8001d74:	af00      	add	r7, sp, #0
 8001d76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001d80:	d301      	bcc.n	8001d86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001d82:	2301      	movs	r3, #1
 8001d84:	e00f      	b.n	8001da6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001d86:	4a0a      	ldr	r2, [pc, #40]	; (8001db0 <SysTick_Config+0x40>)
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	3b01      	subs	r3, #1
 8001d8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001d8e:	210f      	movs	r1, #15
 8001d90:	f04f 30ff 	mov.w	r0, #4294967295
 8001d94:	f7ff ff8e 	bl	8001cb4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001d98:	4b05      	ldr	r3, [pc, #20]	; (8001db0 <SysTick_Config+0x40>)
 8001d9a:	2200      	movs	r2, #0
 8001d9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001d9e:	4b04      	ldr	r3, [pc, #16]	; (8001db0 <SysTick_Config+0x40>)
 8001da0:	2207      	movs	r2, #7
 8001da2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001da4:	2300      	movs	r3, #0
}
 8001da6:	4618      	mov	r0, r3
 8001da8:	3708      	adds	r7, #8
 8001daa:	46bd      	mov	sp, r7
 8001dac:	bd80      	pop	{r7, pc}
 8001dae:	bf00      	nop
 8001db0:	e000e010 	.word	0xe000e010

08001db4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001db4:	b580      	push	{r7, lr}
 8001db6:	b082      	sub	sp, #8
 8001db8:	af00      	add	r7, sp, #0
 8001dba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001dbc:	6878      	ldr	r0, [r7, #4]
 8001dbe:	f7ff ff29 	bl	8001c14 <__NVIC_SetPriorityGrouping>
}
 8001dc2:	bf00      	nop
 8001dc4:	3708      	adds	r7, #8
 8001dc6:	46bd      	mov	sp, r7
 8001dc8:	bd80      	pop	{r7, pc}

08001dca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001dca:	b580      	push	{r7, lr}
 8001dcc:	b086      	sub	sp, #24
 8001dce:	af00      	add	r7, sp, #0
 8001dd0:	4603      	mov	r3, r0
 8001dd2:	60b9      	str	r1, [r7, #8]
 8001dd4:	607a      	str	r2, [r7, #4]
 8001dd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001dd8:	2300      	movs	r3, #0
 8001dda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ddc:	f7ff ff3e 	bl	8001c5c <__NVIC_GetPriorityGrouping>
 8001de0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001de2:	687a      	ldr	r2, [r7, #4]
 8001de4:	68b9      	ldr	r1, [r7, #8]
 8001de6:	6978      	ldr	r0, [r7, #20]
 8001de8:	f7ff ff8e 	bl	8001d08 <NVIC_EncodePriority>
 8001dec:	4602      	mov	r2, r0
 8001dee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001df2:	4611      	mov	r1, r2
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7ff ff5d 	bl	8001cb4 <__NVIC_SetPriority>
}
 8001dfa:	bf00      	nop
 8001dfc:	3718      	adds	r7, #24
 8001dfe:	46bd      	mov	sp, r7
 8001e00:	bd80      	pop	{r7, pc}

08001e02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001e02:	b580      	push	{r7, lr}
 8001e04:	b082      	sub	sp, #8
 8001e06:	af00      	add	r7, sp, #0
 8001e08:	4603      	mov	r3, r0
 8001e0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001e0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e10:	4618      	mov	r0, r3
 8001e12:	f7ff ff31 	bl	8001c78 <__NVIC_EnableIRQ>
}
 8001e16:	bf00      	nop
 8001e18:	3708      	adds	r7, #8
 8001e1a:	46bd      	mov	sp, r7
 8001e1c:	bd80      	pop	{r7, pc}

08001e1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001e1e:	b580      	push	{r7, lr}
 8001e20:	b082      	sub	sp, #8
 8001e22:	af00      	add	r7, sp, #0
 8001e24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001e26:	6878      	ldr	r0, [r7, #4]
 8001e28:	f7ff ffa2 	bl	8001d70 <SysTick_Config>
 8001e2c:	4603      	mov	r3, r0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	3708      	adds	r7, #8
 8001e32:	46bd      	mov	sp, r7
 8001e34:	bd80      	pop	{r7, pc}
	...

08001e38 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b086      	sub	sp, #24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001e40:	2300      	movs	r3, #0
 8001e42:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001e44:	f7ff fac4 	bl	80013d0 <HAL_GetTick>
 8001e48:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	d101      	bne.n	8001e54 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001e50:	2301      	movs	r3, #1
 8001e52:	e099      	b.n	8001f88 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	2202      	movs	r2, #2
 8001e58:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2200      	movs	r2, #0
 8001e60:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	681a      	ldr	r2, [r3, #0]
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	f022 0201 	bic.w	r2, r2, #1
 8001e72:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e74:	e00f      	b.n	8001e96 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001e76:	f7ff faab 	bl	80013d0 <HAL_GetTick>
 8001e7a:	4602      	mov	r2, r0
 8001e7c:	693b      	ldr	r3, [r7, #16]
 8001e7e:	1ad3      	subs	r3, r2, r3
 8001e80:	2b05      	cmp	r3, #5
 8001e82:	d908      	bls.n	8001e96 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2220      	movs	r2, #32
 8001e88:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001e8a:	687b      	ldr	r3, [r7, #4]
 8001e8c:	2203      	movs	r2, #3
 8001e8e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001e92:	2303      	movs	r3, #3
 8001e94:	e078      	b.n	8001f88 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	681b      	ldr	r3, [r3, #0]
 8001e9a:	681b      	ldr	r3, [r3, #0]
 8001e9c:	f003 0301 	and.w	r3, r3, #1
 8001ea0:	2b00      	cmp	r3, #0
 8001ea2:	d1e8      	bne.n	8001e76 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001eac:	697a      	ldr	r2, [r7, #20]
 8001eae:	4b38      	ldr	r3, [pc, #224]	; (8001f90 <HAL_DMA_Init+0x158>)
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	685a      	ldr	r2, [r3, #4]
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	689b      	ldr	r3, [r3, #8]
 8001ebc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ec2:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001ece:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	699b      	ldr	r3, [r3, #24]
 8001ed4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ed6:	687b      	ldr	r3, [r7, #4]
 8001ed8:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001eda:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	6a1b      	ldr	r3, [r3, #32]
 8001ee0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ee2:	697a      	ldr	r2, [r7, #20]
 8001ee4:	4313      	orrs	r3, r2
 8001ee6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001eec:	2b04      	cmp	r3, #4
 8001eee:	d107      	bne.n	8001f00 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001ef4:	687b      	ldr	r3, [r7, #4]
 8001ef6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef8:	4313      	orrs	r3, r2
 8001efa:	697a      	ldr	r2, [r7, #20]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	697a      	ldr	r2, [r7, #20]
 8001f06:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001f08:	687b      	ldr	r3, [r7, #4]
 8001f0a:	681b      	ldr	r3, [r3, #0]
 8001f0c:	695b      	ldr	r3, [r3, #20]
 8001f0e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001f10:	697b      	ldr	r3, [r7, #20]
 8001f12:	f023 0307 	bic.w	r3, r3, #7
 8001f16:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f1c:	697a      	ldr	r2, [r7, #20]
 8001f1e:	4313      	orrs	r3, r2
 8001f20:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f26:	2b04      	cmp	r3, #4
 8001f28:	d117      	bne.n	8001f5a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001f2e:	697a      	ldr	r2, [r7, #20]
 8001f30:	4313      	orrs	r3, r2
 8001f32:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001f38:	2b00      	cmp	r3, #0
 8001f3a:	d00e      	beq.n	8001f5a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001f3c:	6878      	ldr	r0, [r7, #4]
 8001f3e:	f000 fa6f 	bl	8002420 <DMA_CheckFifoParam>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d008      	beq.n	8001f5a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2240      	movs	r2, #64	; 0x40
 8001f4c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	2201      	movs	r2, #1
 8001f52:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001f56:	2301      	movs	r3, #1
 8001f58:	e016      	b.n	8001f88 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	681b      	ldr	r3, [r3, #0]
 8001f5e:	697a      	ldr	r2, [r7, #20]
 8001f60:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001f62:	6878      	ldr	r0, [r7, #4]
 8001f64:	f000 fa26 	bl	80023b4 <DMA_CalcBaseAndBitshift>
 8001f68:	4603      	mov	r3, r0
 8001f6a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f70:	223f      	movs	r2, #63	; 0x3f
 8001f72:	409a      	lsls	r2, r3
 8001f74:	68fb      	ldr	r3, [r7, #12]
 8001f76:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001f78:	687b      	ldr	r3, [r7, #4]
 8001f7a:	2200      	movs	r2, #0
 8001f7c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	2201      	movs	r2, #1
 8001f82:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001f86:	2300      	movs	r3, #0
}
 8001f88:	4618      	mov	r0, r3
 8001f8a:	3718      	adds	r7, #24
 8001f8c:	46bd      	mov	sp, r7
 8001f8e:	bd80      	pop	{r7, pc}
 8001f90:	f010803f 	.word	0xf010803f

08001f94 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001f94:	b580      	push	{r7, lr}
 8001f96:	b086      	sub	sp, #24
 8001f98:	af00      	add	r7, sp, #0
 8001f9a:	60f8      	str	r0, [r7, #12]
 8001f9c:	60b9      	str	r1, [r7, #8]
 8001f9e:	607a      	str	r2, [r7, #4]
 8001fa0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001fa6:	68fb      	ldr	r3, [r7, #12]
 8001fa8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001faa:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8001fb2:	2b01      	cmp	r3, #1
 8001fb4:	d101      	bne.n	8001fba <HAL_DMA_Start_IT+0x26>
 8001fb6:	2302      	movs	r3, #2
 8001fb8:	e040      	b.n	800203c <HAL_DMA_Start_IT+0xa8>
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fc8:	b2db      	uxtb	r3, r3
 8001fca:	2b01      	cmp	r3, #1
 8001fcc:	d12f      	bne.n	800202e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2202      	movs	r2, #2
 8001fd2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001fd6:	68fb      	ldr	r3, [r7, #12]
 8001fd8:	2200      	movs	r2, #0
 8001fda:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001fdc:	683b      	ldr	r3, [r7, #0]
 8001fde:	687a      	ldr	r2, [r7, #4]
 8001fe0:	68b9      	ldr	r1, [r7, #8]
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	f000 f9b8 	bl	8002358 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001fe8:	68fb      	ldr	r3, [r7, #12]
 8001fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fec:	223f      	movs	r2, #63	; 0x3f
 8001fee:	409a      	lsls	r2, r3
 8001ff0:	693b      	ldr	r3, [r7, #16]
 8001ff2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8001ff4:	68fb      	ldr	r3, [r7, #12]
 8001ff6:	681b      	ldr	r3, [r3, #0]
 8001ff8:	681a      	ldr	r2, [r3, #0]
 8001ffa:	68fb      	ldr	r3, [r7, #12]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	f042 0216 	orr.w	r2, r2, #22
 8002002:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8002004:	68fb      	ldr	r3, [r7, #12]
 8002006:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002008:	2b00      	cmp	r3, #0
 800200a:	d007      	beq.n	800201c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 800200c:	68fb      	ldr	r3, [r7, #12]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	681a      	ldr	r2, [r3, #0]
 8002012:	68fb      	ldr	r3, [r7, #12]
 8002014:	681b      	ldr	r3, [r3, #0]
 8002016:	f042 0208 	orr.w	r2, r2, #8
 800201a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800201c:	68fb      	ldr	r3, [r7, #12]
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	681a      	ldr	r2, [r3, #0]
 8002022:	68fb      	ldr	r3, [r7, #12]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	f042 0201 	orr.w	r2, r2, #1
 800202a:	601a      	str	r2, [r3, #0]
 800202c:	e005      	b.n	800203a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2200      	movs	r2, #0
 8002032:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8002036:	2302      	movs	r3, #2
 8002038:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800203a:	7dfb      	ldrb	r3, [r7, #23]
}
 800203c:	4618      	mov	r0, r3
 800203e:	3718      	adds	r7, #24
 8002040:	46bd      	mov	sp, r7
 8002042:	bd80      	pop	{r7, pc}

08002044 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b086      	sub	sp, #24
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800204c:	2300      	movs	r3, #0
 800204e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8002050:	4b8e      	ldr	r3, [pc, #568]	; (800228c <HAL_DMA_IRQHandler+0x248>)
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a8e      	ldr	r2, [pc, #568]	; (8002290 <HAL_DMA_IRQHandler+0x24c>)
 8002056:	fba2 2303 	umull	r2, r3, r2, r3
 800205a:	0a9b      	lsrs	r3, r3, #10
 800205c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002062:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8002064:	693b      	ldr	r3, [r7, #16]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800206e:	2208      	movs	r2, #8
 8002070:	409a      	lsls	r2, r3
 8002072:	68fb      	ldr	r3, [r7, #12]
 8002074:	4013      	ands	r3, r2
 8002076:	2b00      	cmp	r3, #0
 8002078:	d01a      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	f003 0304 	and.w	r3, r3, #4
 8002084:	2b00      	cmp	r3, #0
 8002086:	d013      	beq.n	80020b0 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	681a      	ldr	r2, [r3, #0]
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f022 0204 	bic.w	r2, r2, #4
 8002096:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800209c:	2208      	movs	r2, #8
 800209e:	409a      	lsls	r2, r3
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020a8:	f043 0201 	orr.w	r2, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b4:	2201      	movs	r2, #1
 80020b6:	409a      	lsls	r2, r3
 80020b8:	68fb      	ldr	r3, [r7, #12]
 80020ba:	4013      	ands	r3, r2
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d012      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	681b      	ldr	r3, [r3, #0]
 80020c4:	695b      	ldr	r3, [r3, #20]
 80020c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d00b      	beq.n	80020e6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020d2:	2201      	movs	r2, #1
 80020d4:	409a      	lsls	r2, r3
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020de:	f043 0202 	orr.w	r2, r3, #2
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020ea:	2204      	movs	r2, #4
 80020ec:	409a      	lsls	r2, r3
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	4013      	ands	r3, r2
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d012      	beq.n	800211c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f003 0302 	and.w	r3, r3, #2
 8002100:	2b00      	cmp	r3, #0
 8002102:	d00b      	beq.n	800211c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002108:	2204      	movs	r2, #4
 800210a:	409a      	lsls	r2, r3
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002114:	f043 0204 	orr.w	r2, r3, #4
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002120:	2210      	movs	r2, #16
 8002122:	409a      	lsls	r2, r3
 8002124:	68fb      	ldr	r3, [r7, #12]
 8002126:	4013      	ands	r3, r2
 8002128:	2b00      	cmp	r3, #0
 800212a:	d043      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	f003 0308 	and.w	r3, r3, #8
 8002136:	2b00      	cmp	r3, #0
 8002138:	d03c      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800213e:	2210      	movs	r2, #16
 8002140:	409a      	lsls	r2, r3
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002150:	2b00      	cmp	r3, #0
 8002152:	d018      	beq.n	8002186 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800215e:	2b00      	cmp	r3, #0
 8002160:	d108      	bne.n	8002174 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002166:	2b00      	cmp	r3, #0
 8002168:	d024      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800216e:	6878      	ldr	r0, [r7, #4]
 8002170:	4798      	blx	r3
 8002172:	e01f      	b.n	80021b4 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002178:	2b00      	cmp	r3, #0
 800217a:	d01b      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002180:	6878      	ldr	r0, [r7, #4]
 8002182:	4798      	blx	r3
 8002184:	e016      	b.n	80021b4 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	681b      	ldr	r3, [r3, #0]
 800218c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002190:	2b00      	cmp	r3, #0
 8002192:	d107      	bne.n	80021a4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002194:	687b      	ldr	r3, [r7, #4]
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	681a      	ldr	r2, [r3, #0]
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	681b      	ldr	r3, [r3, #0]
 800219e:	f022 0208 	bic.w	r2, r2, #8
 80021a2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d003      	beq.n	80021b4 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b0:	6878      	ldr	r0, [r7, #4]
 80021b2:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80021b4:	687b      	ldr	r3, [r7, #4]
 80021b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021b8:	2220      	movs	r2, #32
 80021ba:	409a      	lsls	r2, r3
 80021bc:	68fb      	ldr	r3, [r7, #12]
 80021be:	4013      	ands	r3, r2
 80021c0:	2b00      	cmp	r3, #0
 80021c2:	f000 808f 	beq.w	80022e4 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0310 	and.w	r3, r3, #16
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	f000 8087 	beq.w	80022e4 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	2220      	movs	r2, #32
 80021dc:	409a      	lsls	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b05      	cmp	r3, #5
 80021ec:	d136      	bne.n	800225c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021ee:	687b      	ldr	r3, [r7, #4]
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	681a      	ldr	r2, [r3, #0]
 80021f4:	687b      	ldr	r3, [r7, #4]
 80021f6:	681b      	ldr	r3, [r3, #0]
 80021f8:	f022 0216 	bic.w	r2, r2, #22
 80021fc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021fe:	687b      	ldr	r3, [r7, #4]
 8002200:	681b      	ldr	r3, [r3, #0]
 8002202:	695a      	ldr	r2, [r3, #20]
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800220c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002212:	2b00      	cmp	r3, #0
 8002214:	d103      	bne.n	800221e <HAL_DMA_IRQHandler+0x1da>
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800221a:	2b00      	cmp	r3, #0
 800221c:	d007      	beq.n	800222e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681a      	ldr	r2, [r3, #0]
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f022 0208 	bic.w	r2, r2, #8
 800222c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002232:	223f      	movs	r2, #63	; 0x3f
 8002234:	409a      	lsls	r2, r3
 8002236:	693b      	ldr	r3, [r7, #16]
 8002238:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2200      	movs	r2, #0
 8002246:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800224e:	2b00      	cmp	r3, #0
 8002250:	d07e      	beq.n	8002350 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	4798      	blx	r3
        }
        return;
 800225a:	e079      	b.n	8002350 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002266:	2b00      	cmp	r3, #0
 8002268:	d01d      	beq.n	80022a6 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002274:	2b00      	cmp	r3, #0
 8002276:	d10d      	bne.n	8002294 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227c:	2b00      	cmp	r3, #0
 800227e:	d031      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002284:	6878      	ldr	r0, [r7, #4]
 8002286:	4798      	blx	r3
 8002288:	e02c      	b.n	80022e4 <HAL_DMA_IRQHandler+0x2a0>
 800228a:	bf00      	nop
 800228c:	200003d4 	.word	0x200003d4
 8002290:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002298:	2b00      	cmp	r3, #0
 800229a:	d023      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022a0:	6878      	ldr	r0, [r7, #4]
 80022a2:	4798      	blx	r3
 80022a4:	e01e      	b.n	80022e4 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d10f      	bne.n	80022d4 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80022b4:	687b      	ldr	r3, [r7, #4]
 80022b6:	681b      	ldr	r3, [r3, #0]
 80022b8:	681a      	ldr	r2, [r3, #0]
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	f022 0210 	bic.w	r2, r2, #16
 80022c2:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	2201      	movs	r2, #1
 80022c8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	2200      	movs	r2, #0
 80022d0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022d8:	2b00      	cmp	r3, #0
 80022da:	d003      	beq.n	80022e4 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80022e0:	6878      	ldr	r0, [r7, #4]
 80022e2:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d032      	beq.n	8002352 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80022f0:	f003 0301 	and.w	r3, r3, #1
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d022      	beq.n	800233e <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	2205      	movs	r2, #5
 80022fc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	681a      	ldr	r2, [r3, #0]
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	f022 0201 	bic.w	r2, r2, #1
 800230e:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	3301      	adds	r3, #1
 8002314:	60bb      	str	r3, [r7, #8]
 8002316:	697a      	ldr	r2, [r7, #20]
 8002318:	429a      	cmp	r2, r3
 800231a:	d307      	bcc.n	800232c <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0301 	and.w	r3, r3, #1
 8002326:	2b00      	cmp	r3, #0
 8002328:	d1f2      	bne.n	8002310 <HAL_DMA_IRQHandler+0x2cc>
 800232a:	e000      	b.n	800232e <HAL_DMA_IRQHandler+0x2ea>
          break;
 800232c:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	2201      	movs	r2, #1
 8002332:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	2200      	movs	r2, #0
 800233a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002342:	2b00      	cmp	r3, #0
 8002344:	d005      	beq.n	8002352 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800234a:	6878      	ldr	r0, [r7, #4]
 800234c:	4798      	blx	r3
 800234e:	e000      	b.n	8002352 <HAL_DMA_IRQHandler+0x30e>
        return;
 8002350:	bf00      	nop
    }
  }
}
 8002352:	3718      	adds	r7, #24
 8002354:	46bd      	mov	sp, r7
 8002356:	bd80      	pop	{r7, pc}

08002358 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002358:	b480      	push	{r7}
 800235a:	b085      	sub	sp, #20
 800235c:	af00      	add	r7, sp, #0
 800235e:	60f8      	str	r0, [r7, #12]
 8002360:	60b9      	str	r1, [r7, #8]
 8002362:	607a      	str	r2, [r7, #4]
 8002364:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8002366:	68fb      	ldr	r3, [r7, #12]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	68fb      	ldr	r3, [r7, #12]
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8002374:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8002376:	68fb      	ldr	r3, [r7, #12]
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	683a      	ldr	r2, [r7, #0]
 800237c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	689b      	ldr	r3, [r3, #8]
 8002382:	2b40      	cmp	r3, #64	; 0x40
 8002384:	d108      	bne.n	8002398 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	687a      	ldr	r2, [r7, #4]
 800238c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	68ba      	ldr	r2, [r7, #8]
 8002394:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8002396:	e007      	b.n	80023a8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	68ba      	ldr	r2, [r7, #8]
 800239e:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	681b      	ldr	r3, [r3, #0]
 80023a4:	687a      	ldr	r2, [r7, #4]
 80023a6:	60da      	str	r2, [r3, #12]
}
 80023a8:	bf00      	nop
 80023aa:	3714      	adds	r7, #20
 80023ac:	46bd      	mov	sp, r7
 80023ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023b2:	4770      	bx	lr

080023b4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80023b4:	b480      	push	{r7}
 80023b6:	b085      	sub	sp, #20
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	b2db      	uxtb	r3, r3
 80023c2:	3b10      	subs	r3, #16
 80023c4:	4a14      	ldr	r2, [pc, #80]	; (8002418 <DMA_CalcBaseAndBitshift+0x64>)
 80023c6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ca:	091b      	lsrs	r3, r3, #4
 80023cc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80023ce:	4a13      	ldr	r2, [pc, #76]	; (800241c <DMA_CalcBaseAndBitshift+0x68>)
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	4413      	add	r3, r2
 80023d4:	781b      	ldrb	r3, [r3, #0]
 80023d6:	461a      	mov	r2, r3
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80023dc:	68fb      	ldr	r3, [r7, #12]
 80023de:	2b03      	cmp	r3, #3
 80023e0:	d909      	bls.n	80023f6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023ea:	f023 0303 	bic.w	r3, r3, #3
 80023ee:	1d1a      	adds	r2, r3, #4
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	659a      	str	r2, [r3, #88]	; 0x58
 80023f4:	e007      	b.n	8002406 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80023fe:	f023 0303 	bic.w	r3, r3, #3
 8002402:	687a      	ldr	r2, [r7, #4]
 8002404:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800240a:	4618      	mov	r0, r3
 800240c:	3714      	adds	r7, #20
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	aaaaaaab 	.word	0xaaaaaaab
 800241c:	080081ac 	.word	0x080081ac

08002420 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002420:	b480      	push	{r7}
 8002422:	b085      	sub	sp, #20
 8002424:	af00      	add	r7, sp, #0
 8002426:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002428:	2300      	movs	r3, #0
 800242a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002430:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	699b      	ldr	r3, [r3, #24]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d11f      	bne.n	800247a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800243a:	68bb      	ldr	r3, [r7, #8]
 800243c:	2b03      	cmp	r3, #3
 800243e:	d856      	bhi.n	80024ee <DMA_CheckFifoParam+0xce>
 8002440:	a201      	add	r2, pc, #4	; (adr r2, 8002448 <DMA_CheckFifoParam+0x28>)
 8002442:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002446:	bf00      	nop
 8002448:	08002459 	.word	0x08002459
 800244c:	0800246b 	.word	0x0800246b
 8002450:	08002459 	.word	0x08002459
 8002454:	080024ef 	.word	0x080024ef
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800245c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002460:	2b00      	cmp	r3, #0
 8002462:	d046      	beq.n	80024f2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002464:	2301      	movs	r3, #1
 8002466:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002468:	e043      	b.n	80024f2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800246e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002472:	d140      	bne.n	80024f6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002474:	2301      	movs	r3, #1
 8002476:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002478:	e03d      	b.n	80024f6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	699b      	ldr	r3, [r3, #24]
 800247e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002482:	d121      	bne.n	80024c8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002484:	68bb      	ldr	r3, [r7, #8]
 8002486:	2b03      	cmp	r3, #3
 8002488:	d837      	bhi.n	80024fa <DMA_CheckFifoParam+0xda>
 800248a:	a201      	add	r2, pc, #4	; (adr r2, 8002490 <DMA_CheckFifoParam+0x70>)
 800248c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002490:	080024a1 	.word	0x080024a1
 8002494:	080024a7 	.word	0x080024a7
 8002498:	080024a1 	.word	0x080024a1
 800249c:	080024b9 	.word	0x080024b9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80024a0:	2301      	movs	r3, #1
 80024a2:	73fb      	strb	r3, [r7, #15]
      break;
 80024a4:	e030      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024aa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d025      	beq.n	80024fe <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80024b6:	e022      	b.n	80024fe <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80024b8:	687b      	ldr	r3, [r7, #4]
 80024ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024bc:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80024c0:	d11f      	bne.n	8002502 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
 80024c4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80024c6:	e01c      	b.n	8002502 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80024c8:	68bb      	ldr	r3, [r7, #8]
 80024ca:	2b02      	cmp	r3, #2
 80024cc:	d903      	bls.n	80024d6 <DMA_CheckFifoParam+0xb6>
 80024ce:	68bb      	ldr	r3, [r7, #8]
 80024d0:	2b03      	cmp	r3, #3
 80024d2:	d003      	beq.n	80024dc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80024d4:	e018      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80024d6:	2301      	movs	r3, #1
 80024d8:	73fb      	strb	r3, [r7, #15]
      break;
 80024da:	e015      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80024e0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d00e      	beq.n	8002506 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80024e8:	2301      	movs	r3, #1
 80024ea:	73fb      	strb	r3, [r7, #15]
      break;
 80024ec:	e00b      	b.n	8002506 <DMA_CheckFifoParam+0xe6>
      break;
 80024ee:	bf00      	nop
 80024f0:	e00a      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      break;
 80024f2:	bf00      	nop
 80024f4:	e008      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      break;
 80024f6:	bf00      	nop
 80024f8:	e006      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      break;
 80024fa:	bf00      	nop
 80024fc:	e004      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      break;
 80024fe:	bf00      	nop
 8002500:	e002      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      break;   
 8002502:	bf00      	nop
 8002504:	e000      	b.n	8002508 <DMA_CheckFifoParam+0xe8>
      break;
 8002506:	bf00      	nop
    }
  } 
  
  return status; 
 8002508:	7bfb      	ldrb	r3, [r7, #15]
}
 800250a:	4618      	mov	r0, r3
 800250c:	3714      	adds	r7, #20
 800250e:	46bd      	mov	sp, r7
 8002510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002514:	4770      	bx	lr
 8002516:	bf00      	nop

08002518 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002518:	b480      	push	{r7}
 800251a:	b089      	sub	sp, #36	; 0x24
 800251c:	af00      	add	r7, sp, #0
 800251e:	6078      	str	r0, [r7, #4]
 8002520:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002522:	2300      	movs	r3, #0
 8002524:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002526:	2300      	movs	r3, #0
 8002528:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800252a:	2300      	movs	r3, #0
 800252c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800252e:	2300      	movs	r3, #0
 8002530:	61fb      	str	r3, [r7, #28]
 8002532:	e159      	b.n	80027e8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002534:	2201      	movs	r2, #1
 8002536:	69fb      	ldr	r3, [r7, #28]
 8002538:	fa02 f303 	lsl.w	r3, r2, r3
 800253c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800253e:	683b      	ldr	r3, [r7, #0]
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	697a      	ldr	r2, [r7, #20]
 8002544:	4013      	ands	r3, r2
 8002546:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002548:	693a      	ldr	r2, [r7, #16]
 800254a:	697b      	ldr	r3, [r7, #20]
 800254c:	429a      	cmp	r2, r3
 800254e:	f040 8148 	bne.w	80027e2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002552:	683b      	ldr	r3, [r7, #0]
 8002554:	685b      	ldr	r3, [r3, #4]
 8002556:	f003 0303 	and.w	r3, r3, #3
 800255a:	2b01      	cmp	r3, #1
 800255c:	d005      	beq.n	800256a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800255e:	683b      	ldr	r3, [r7, #0]
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002566:	2b02      	cmp	r3, #2
 8002568:	d130      	bne.n	80025cc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	689b      	ldr	r3, [r3, #8]
 800256e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002570:	69fb      	ldr	r3, [r7, #28]
 8002572:	005b      	lsls	r3, r3, #1
 8002574:	2203      	movs	r2, #3
 8002576:	fa02 f303 	lsl.w	r3, r2, r3
 800257a:	43db      	mvns	r3, r3
 800257c:	69ba      	ldr	r2, [r7, #24]
 800257e:	4013      	ands	r3, r2
 8002580:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002582:	683b      	ldr	r3, [r7, #0]
 8002584:	68da      	ldr	r2, [r3, #12]
 8002586:	69fb      	ldr	r3, [r7, #28]
 8002588:	005b      	lsls	r3, r3, #1
 800258a:	fa02 f303 	lsl.w	r3, r2, r3
 800258e:	69ba      	ldr	r2, [r7, #24]
 8002590:	4313      	orrs	r3, r2
 8002592:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	69ba      	ldr	r2, [r7, #24]
 8002598:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	685b      	ldr	r3, [r3, #4]
 800259e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80025a0:	2201      	movs	r2, #1
 80025a2:	69fb      	ldr	r3, [r7, #28]
 80025a4:	fa02 f303 	lsl.w	r3, r2, r3
 80025a8:	43db      	mvns	r3, r3
 80025aa:	69ba      	ldr	r2, [r7, #24]
 80025ac:	4013      	ands	r3, r2
 80025ae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80025b0:	683b      	ldr	r3, [r7, #0]
 80025b2:	685b      	ldr	r3, [r3, #4]
 80025b4:	091b      	lsrs	r3, r3, #4
 80025b6:	f003 0201 	and.w	r2, r3, #1
 80025ba:	69fb      	ldr	r3, [r7, #28]
 80025bc:	fa02 f303 	lsl.w	r3, r2, r3
 80025c0:	69ba      	ldr	r2, [r7, #24]
 80025c2:	4313      	orrs	r3, r2
 80025c4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80025cc:	683b      	ldr	r3, [r7, #0]
 80025ce:	685b      	ldr	r3, [r3, #4]
 80025d0:	f003 0303 	and.w	r3, r3, #3
 80025d4:	2b03      	cmp	r3, #3
 80025d6:	d017      	beq.n	8002608 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80025d8:	687b      	ldr	r3, [r7, #4]
 80025da:	68db      	ldr	r3, [r3, #12]
 80025dc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80025de:	69fb      	ldr	r3, [r7, #28]
 80025e0:	005b      	lsls	r3, r3, #1
 80025e2:	2203      	movs	r2, #3
 80025e4:	fa02 f303 	lsl.w	r3, r2, r3
 80025e8:	43db      	mvns	r3, r3
 80025ea:	69ba      	ldr	r2, [r7, #24]
 80025ec:	4013      	ands	r3, r2
 80025ee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	689a      	ldr	r2, [r3, #8]
 80025f4:	69fb      	ldr	r3, [r7, #28]
 80025f6:	005b      	lsls	r3, r3, #1
 80025f8:	fa02 f303 	lsl.w	r3, r2, r3
 80025fc:	69ba      	ldr	r2, [r7, #24]
 80025fe:	4313      	orrs	r3, r2
 8002600:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	69ba      	ldr	r2, [r7, #24]
 8002606:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f003 0303 	and.w	r3, r3, #3
 8002610:	2b02      	cmp	r3, #2
 8002612:	d123      	bne.n	800265c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	08da      	lsrs	r2, r3, #3
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	3208      	adds	r2, #8
 800261c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002620:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002622:	69fb      	ldr	r3, [r7, #28]
 8002624:	f003 0307 	and.w	r3, r3, #7
 8002628:	009b      	lsls	r3, r3, #2
 800262a:	220f      	movs	r2, #15
 800262c:	fa02 f303 	lsl.w	r3, r2, r3
 8002630:	43db      	mvns	r3, r3
 8002632:	69ba      	ldr	r2, [r7, #24]
 8002634:	4013      	ands	r3, r2
 8002636:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	691a      	ldr	r2, [r3, #16]
 800263c:	69fb      	ldr	r3, [r7, #28]
 800263e:	f003 0307 	and.w	r3, r3, #7
 8002642:	009b      	lsls	r3, r3, #2
 8002644:	fa02 f303 	lsl.w	r3, r2, r3
 8002648:	69ba      	ldr	r2, [r7, #24]
 800264a:	4313      	orrs	r3, r2
 800264c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800264e:	69fb      	ldr	r3, [r7, #28]
 8002650:	08da      	lsrs	r2, r3, #3
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	3208      	adds	r2, #8
 8002656:	69b9      	ldr	r1, [r7, #24]
 8002658:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	681b      	ldr	r3, [r3, #0]
 8002660:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	005b      	lsls	r3, r3, #1
 8002666:	2203      	movs	r2, #3
 8002668:	fa02 f303 	lsl.w	r3, r2, r3
 800266c:	43db      	mvns	r3, r3
 800266e:	69ba      	ldr	r2, [r7, #24]
 8002670:	4013      	ands	r3, r2
 8002672:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	685b      	ldr	r3, [r3, #4]
 8002678:	f003 0203 	and.w	r2, r3, #3
 800267c:	69fb      	ldr	r3, [r7, #28]
 800267e:	005b      	lsls	r3, r3, #1
 8002680:	fa02 f303 	lsl.w	r3, r2, r3
 8002684:	69ba      	ldr	r2, [r7, #24]
 8002686:	4313      	orrs	r3, r2
 8002688:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	69ba      	ldr	r2, [r7, #24]
 800268e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002698:	2b00      	cmp	r3, #0
 800269a:	f000 80a2 	beq.w	80027e2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800269e:	2300      	movs	r3, #0
 80026a0:	60fb      	str	r3, [r7, #12]
 80026a2:	4b57      	ldr	r3, [pc, #348]	; (8002800 <HAL_GPIO_Init+0x2e8>)
 80026a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026a6:	4a56      	ldr	r2, [pc, #344]	; (8002800 <HAL_GPIO_Init+0x2e8>)
 80026a8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026ac:	6453      	str	r3, [r2, #68]	; 0x44
 80026ae:	4b54      	ldr	r3, [pc, #336]	; (8002800 <HAL_GPIO_Init+0x2e8>)
 80026b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026b2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80026b6:	60fb      	str	r3, [r7, #12]
 80026b8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80026ba:	4a52      	ldr	r2, [pc, #328]	; (8002804 <HAL_GPIO_Init+0x2ec>)
 80026bc:	69fb      	ldr	r3, [r7, #28]
 80026be:	089b      	lsrs	r3, r3, #2
 80026c0:	3302      	adds	r3, #2
 80026c2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80026c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80026c8:	69fb      	ldr	r3, [r7, #28]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	220f      	movs	r2, #15
 80026d2:	fa02 f303 	lsl.w	r3, r2, r3
 80026d6:	43db      	mvns	r3, r3
 80026d8:	69ba      	ldr	r2, [r7, #24]
 80026da:	4013      	ands	r3, r2
 80026dc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80026de:	687b      	ldr	r3, [r7, #4]
 80026e0:	4a49      	ldr	r2, [pc, #292]	; (8002808 <HAL_GPIO_Init+0x2f0>)
 80026e2:	4293      	cmp	r3, r2
 80026e4:	d019      	beq.n	800271a <HAL_GPIO_Init+0x202>
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	4a48      	ldr	r2, [pc, #288]	; (800280c <HAL_GPIO_Init+0x2f4>)
 80026ea:	4293      	cmp	r3, r2
 80026ec:	d013      	beq.n	8002716 <HAL_GPIO_Init+0x1fe>
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	4a47      	ldr	r2, [pc, #284]	; (8002810 <HAL_GPIO_Init+0x2f8>)
 80026f2:	4293      	cmp	r3, r2
 80026f4:	d00d      	beq.n	8002712 <HAL_GPIO_Init+0x1fa>
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	4a46      	ldr	r2, [pc, #280]	; (8002814 <HAL_GPIO_Init+0x2fc>)
 80026fa:	4293      	cmp	r3, r2
 80026fc:	d007      	beq.n	800270e <HAL_GPIO_Init+0x1f6>
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	4a45      	ldr	r2, [pc, #276]	; (8002818 <HAL_GPIO_Init+0x300>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d101      	bne.n	800270a <HAL_GPIO_Init+0x1f2>
 8002706:	2304      	movs	r3, #4
 8002708:	e008      	b.n	800271c <HAL_GPIO_Init+0x204>
 800270a:	2307      	movs	r3, #7
 800270c:	e006      	b.n	800271c <HAL_GPIO_Init+0x204>
 800270e:	2303      	movs	r3, #3
 8002710:	e004      	b.n	800271c <HAL_GPIO_Init+0x204>
 8002712:	2302      	movs	r3, #2
 8002714:	e002      	b.n	800271c <HAL_GPIO_Init+0x204>
 8002716:	2301      	movs	r3, #1
 8002718:	e000      	b.n	800271c <HAL_GPIO_Init+0x204>
 800271a:	2300      	movs	r3, #0
 800271c:	69fa      	ldr	r2, [r7, #28]
 800271e:	f002 0203 	and.w	r2, r2, #3
 8002722:	0092      	lsls	r2, r2, #2
 8002724:	4093      	lsls	r3, r2
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4313      	orrs	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800272c:	4935      	ldr	r1, [pc, #212]	; (8002804 <HAL_GPIO_Init+0x2ec>)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	089b      	lsrs	r3, r3, #2
 8002732:	3302      	adds	r3, #2
 8002734:	69ba      	ldr	r2, [r7, #24]
 8002736:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800273a:	4b38      	ldr	r3, [pc, #224]	; (800281c <HAL_GPIO_Init+0x304>)
 800273c:	689b      	ldr	r3, [r3, #8]
 800273e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002740:	693b      	ldr	r3, [r7, #16]
 8002742:	43db      	mvns	r3, r3
 8002744:	69ba      	ldr	r2, [r7, #24]
 8002746:	4013      	ands	r3, r2
 8002748:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	685b      	ldr	r3, [r3, #4]
 800274e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002756:	69ba      	ldr	r2, [r7, #24]
 8002758:	693b      	ldr	r3, [r7, #16]
 800275a:	4313      	orrs	r3, r2
 800275c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800275e:	4a2f      	ldr	r2, [pc, #188]	; (800281c <HAL_GPIO_Init+0x304>)
 8002760:	69bb      	ldr	r3, [r7, #24]
 8002762:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002764:	4b2d      	ldr	r3, [pc, #180]	; (800281c <HAL_GPIO_Init+0x304>)
 8002766:	68db      	ldr	r3, [r3, #12]
 8002768:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800276a:	693b      	ldr	r3, [r7, #16]
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800277c:	2b00      	cmp	r3, #0
 800277e:	d003      	beq.n	8002788 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002780:	69ba      	ldr	r2, [r7, #24]
 8002782:	693b      	ldr	r3, [r7, #16]
 8002784:	4313      	orrs	r3, r2
 8002786:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002788:	4a24      	ldr	r2, [pc, #144]	; (800281c <HAL_GPIO_Init+0x304>)
 800278a:	69bb      	ldr	r3, [r7, #24]
 800278c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800278e:	4b23      	ldr	r3, [pc, #140]	; (800281c <HAL_GPIO_Init+0x304>)
 8002790:	685b      	ldr	r3, [r3, #4]
 8002792:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002794:	693b      	ldr	r3, [r7, #16]
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	685b      	ldr	r3, [r3, #4]
 80027a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d003      	beq.n	80027b2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	693b      	ldr	r3, [r7, #16]
 80027ae:	4313      	orrs	r3, r2
 80027b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80027b2:	4a1a      	ldr	r2, [pc, #104]	; (800281c <HAL_GPIO_Init+0x304>)
 80027b4:	69bb      	ldr	r3, [r7, #24]
 80027b6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80027b8:	4b18      	ldr	r3, [pc, #96]	; (800281c <HAL_GPIO_Init+0x304>)
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	43db      	mvns	r3, r3
 80027c2:	69ba      	ldr	r2, [r7, #24]
 80027c4:	4013      	ands	r3, r2
 80027c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80027c8:	683b      	ldr	r3, [r7, #0]
 80027ca:	685b      	ldr	r3, [r3, #4]
 80027cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80027d0:	2b00      	cmp	r3, #0
 80027d2:	d003      	beq.n	80027dc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80027d4:	69ba      	ldr	r2, [r7, #24]
 80027d6:	693b      	ldr	r3, [r7, #16]
 80027d8:	4313      	orrs	r3, r2
 80027da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80027dc:	4a0f      	ldr	r2, [pc, #60]	; (800281c <HAL_GPIO_Init+0x304>)
 80027de:	69bb      	ldr	r3, [r7, #24]
 80027e0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80027e2:	69fb      	ldr	r3, [r7, #28]
 80027e4:	3301      	adds	r3, #1
 80027e6:	61fb      	str	r3, [r7, #28]
 80027e8:	69fb      	ldr	r3, [r7, #28]
 80027ea:	2b0f      	cmp	r3, #15
 80027ec:	f67f aea2 	bls.w	8002534 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80027f0:	bf00      	nop
 80027f2:	bf00      	nop
 80027f4:	3724      	adds	r7, #36	; 0x24
 80027f6:	46bd      	mov	sp, r7
 80027f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027fc:	4770      	bx	lr
 80027fe:	bf00      	nop
 8002800:	40023800 	.word	0x40023800
 8002804:	40013800 	.word	0x40013800
 8002808:	40020000 	.word	0x40020000
 800280c:	40020400 	.word	0x40020400
 8002810:	40020800 	.word	0x40020800
 8002814:	40020c00 	.word	0x40020c00
 8002818:	40021000 	.word	0x40021000
 800281c:	40013c00 	.word	0x40013c00

08002820 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8002820:	b480      	push	{r7}
 8002822:	b085      	sub	sp, #20
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
 8002828:	460b      	mov	r3, r1
 800282a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	691a      	ldr	r2, [r3, #16]
 8002830:	887b      	ldrh	r3, [r7, #2]
 8002832:	4013      	ands	r3, r2
 8002834:	2b00      	cmp	r3, #0
 8002836:	d002      	beq.n	800283e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002838:	2301      	movs	r3, #1
 800283a:	73fb      	strb	r3, [r7, #15]
 800283c:	e001      	b.n	8002842 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800283e:	2300      	movs	r3, #0
 8002840:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002842:	7bfb      	ldrb	r3, [r7, #15]
}
 8002844:	4618      	mov	r0, r3
 8002846:	3714      	adds	r7, #20
 8002848:	46bd      	mov	sp, r7
 800284a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800284e:	4770      	bx	lr

08002850 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8002850:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002852:	b08f      	sub	sp, #60	; 0x3c
 8002854:	af0a      	add	r7, sp, #40	; 0x28
 8002856:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	2b00      	cmp	r3, #0
 800285c:	d101      	bne.n	8002862 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800285e:	2301      	movs	r3, #1
 8002860:	e10f      	b.n	8002a82 <HAL_PCD_Init+0x232>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	f893 34bd 	ldrb.w	r3, [r3, #1213]	; 0x4bd
 800286e:	b2db      	uxtb	r3, r3
 8002870:	2b00      	cmp	r3, #0
 8002872:	d106      	bne.n	8002882 <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2200      	movs	r2, #0
 8002878:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800287c:	6878      	ldr	r0, [r7, #4]
 800287e:	f005 f931 	bl	8007ae4 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	2203      	movs	r2, #3
 8002886:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800288e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002892:	2b00      	cmp	r3, #0
 8002894:	d102      	bne.n	800289c <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4618      	mov	r0, r3
 80028a2:	f001 ff80 	bl	80047a6 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	687e      	ldr	r6, [r7, #4]
 80028ae:	466d      	mov	r5, sp
 80028b0:	f106 0410 	add.w	r4, r6, #16
 80028b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80028ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80028bc:	e894 0003 	ldmia.w	r4, {r0, r1}
 80028c0:	e885 0003 	stmia.w	r5, {r0, r1}
 80028c4:	1d33      	adds	r3, r6, #4
 80028c6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80028c8:	6838      	ldr	r0, [r7, #0]
 80028ca:	f001 fe57 	bl	800457c <USB_CoreInit>
 80028ce:	4603      	mov	r3, r0
 80028d0:	2b00      	cmp	r3, #0
 80028d2:	d005      	beq.n	80028e0 <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2202      	movs	r2, #2
 80028d8:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 80028dc:	2301      	movs	r3, #1
 80028de:	e0d0      	b.n	8002a82 <HAL_PCD_Init+0x232>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2100      	movs	r1, #0
 80028e6:	4618      	mov	r0, r3
 80028e8:	f001 ff6e 	bl	80047c8 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80028ec:	2300      	movs	r3, #0
 80028ee:	73fb      	strb	r3, [r7, #15]
 80028f0:	e04a      	b.n	8002988 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 80028f2:	7bfa      	ldrb	r2, [r7, #15]
 80028f4:	6879      	ldr	r1, [r7, #4]
 80028f6:	4613      	mov	r3, r2
 80028f8:	00db      	lsls	r3, r3, #3
 80028fa:	4413      	add	r3, r2
 80028fc:	009b      	lsls	r3, r3, #2
 80028fe:	440b      	add	r3, r1
 8002900:	333d      	adds	r3, #61	; 0x3d
 8002902:	2201      	movs	r2, #1
 8002904:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002906:	7bfa      	ldrb	r2, [r7, #15]
 8002908:	6879      	ldr	r1, [r7, #4]
 800290a:	4613      	mov	r3, r2
 800290c:	00db      	lsls	r3, r3, #3
 800290e:	4413      	add	r3, r2
 8002910:	009b      	lsls	r3, r3, #2
 8002912:	440b      	add	r3, r1
 8002914:	333c      	adds	r3, #60	; 0x3c
 8002916:	7bfa      	ldrb	r2, [r7, #15]
 8002918:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 800291a:	7bfa      	ldrb	r2, [r7, #15]
 800291c:	7bfb      	ldrb	r3, [r7, #15]
 800291e:	b298      	uxth	r0, r3
 8002920:	6879      	ldr	r1, [r7, #4]
 8002922:	4613      	mov	r3, r2
 8002924:	00db      	lsls	r3, r3, #3
 8002926:	4413      	add	r3, r2
 8002928:	009b      	lsls	r3, r3, #2
 800292a:	440b      	add	r3, r1
 800292c:	3344      	adds	r3, #68	; 0x44
 800292e:	4602      	mov	r2, r0
 8002930:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002932:	7bfa      	ldrb	r2, [r7, #15]
 8002934:	6879      	ldr	r1, [r7, #4]
 8002936:	4613      	mov	r3, r2
 8002938:	00db      	lsls	r3, r3, #3
 800293a:	4413      	add	r3, r2
 800293c:	009b      	lsls	r3, r3, #2
 800293e:	440b      	add	r3, r1
 8002940:	3340      	adds	r3, #64	; 0x40
 8002942:	2200      	movs	r2, #0
 8002944:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002946:	7bfa      	ldrb	r2, [r7, #15]
 8002948:	6879      	ldr	r1, [r7, #4]
 800294a:	4613      	mov	r3, r2
 800294c:	00db      	lsls	r3, r3, #3
 800294e:	4413      	add	r3, r2
 8002950:	009b      	lsls	r3, r3, #2
 8002952:	440b      	add	r3, r1
 8002954:	3348      	adds	r3, #72	; 0x48
 8002956:	2200      	movs	r2, #0
 8002958:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800295a:	7bfa      	ldrb	r2, [r7, #15]
 800295c:	6879      	ldr	r1, [r7, #4]
 800295e:	4613      	mov	r3, r2
 8002960:	00db      	lsls	r3, r3, #3
 8002962:	4413      	add	r3, r2
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	440b      	add	r3, r1
 8002968:	334c      	adds	r3, #76	; 0x4c
 800296a:	2200      	movs	r2, #0
 800296c:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800296e:	7bfa      	ldrb	r2, [r7, #15]
 8002970:	6879      	ldr	r1, [r7, #4]
 8002972:	4613      	mov	r3, r2
 8002974:	00db      	lsls	r3, r3, #3
 8002976:	4413      	add	r3, r2
 8002978:	009b      	lsls	r3, r3, #2
 800297a:	440b      	add	r3, r1
 800297c:	3354      	adds	r3, #84	; 0x54
 800297e:	2200      	movs	r2, #0
 8002980:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002982:	7bfb      	ldrb	r3, [r7, #15]
 8002984:	3301      	adds	r3, #1
 8002986:	73fb      	strb	r3, [r7, #15]
 8002988:	7bfa      	ldrb	r2, [r7, #15]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	429a      	cmp	r2, r3
 8002990:	d3af      	bcc.n	80028f2 <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002992:	2300      	movs	r3, #0
 8002994:	73fb      	strb	r3, [r7, #15]
 8002996:	e044      	b.n	8002a22 <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002998:	7bfa      	ldrb	r2, [r7, #15]
 800299a:	6879      	ldr	r1, [r7, #4]
 800299c:	4613      	mov	r3, r2
 800299e:	00db      	lsls	r3, r3, #3
 80029a0:	4413      	add	r3, r2
 80029a2:	009b      	lsls	r3, r3, #2
 80029a4:	440b      	add	r3, r1
 80029a6:	f203 237d 	addw	r3, r3, #637	; 0x27d
 80029aa:	2200      	movs	r2, #0
 80029ac:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 80029ae:	7bfa      	ldrb	r2, [r7, #15]
 80029b0:	6879      	ldr	r1, [r7, #4]
 80029b2:	4613      	mov	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	4413      	add	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	440b      	add	r3, r1
 80029bc:	f503 731f 	add.w	r3, r3, #636	; 0x27c
 80029c0:	7bfa      	ldrb	r2, [r7, #15]
 80029c2:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 80029c4:	7bfa      	ldrb	r2, [r7, #15]
 80029c6:	6879      	ldr	r1, [r7, #4]
 80029c8:	4613      	mov	r3, r2
 80029ca:	00db      	lsls	r3, r3, #3
 80029cc:	4413      	add	r3, r2
 80029ce:	009b      	lsls	r3, r3, #2
 80029d0:	440b      	add	r3, r1
 80029d2:	f503 7320 	add.w	r3, r3, #640	; 0x280
 80029d6:	2200      	movs	r2, #0
 80029d8:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 80029da:	7bfa      	ldrb	r2, [r7, #15]
 80029dc:	6879      	ldr	r1, [r7, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	00db      	lsls	r3, r3, #3
 80029e2:	4413      	add	r3, r2
 80029e4:	009b      	lsls	r3, r3, #2
 80029e6:	440b      	add	r3, r1
 80029e8:	f503 7322 	add.w	r3, r3, #648	; 0x288
 80029ec:	2200      	movs	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80029f0:	7bfa      	ldrb	r2, [r7, #15]
 80029f2:	6879      	ldr	r1, [r7, #4]
 80029f4:	4613      	mov	r3, r2
 80029f6:	00db      	lsls	r3, r3, #3
 80029f8:	4413      	add	r3, r2
 80029fa:	009b      	lsls	r3, r3, #2
 80029fc:	440b      	add	r3, r1
 80029fe:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002a06:	7bfa      	ldrb	r2, [r7, #15]
 8002a08:	6879      	ldr	r1, [r7, #4]
 8002a0a:	4613      	mov	r3, r2
 8002a0c:	00db      	lsls	r3, r3, #3
 8002a0e:	4413      	add	r3, r2
 8002a10:	009b      	lsls	r3, r3, #2
 8002a12:	440b      	add	r3, r1
 8002a14:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8002a18:	2200      	movs	r2, #0
 8002a1a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a1c:	7bfb      	ldrb	r3, [r7, #15]
 8002a1e:	3301      	adds	r3, #1
 8002a20:	73fb      	strb	r3, [r7, #15]
 8002a22:	7bfa      	ldrb	r2, [r7, #15]
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	685b      	ldr	r3, [r3, #4]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d3b5      	bcc.n	8002998 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	681b      	ldr	r3, [r3, #0]
 8002a30:	603b      	str	r3, [r7, #0]
 8002a32:	687e      	ldr	r6, [r7, #4]
 8002a34:	466d      	mov	r5, sp
 8002a36:	f106 0410 	add.w	r4, r6, #16
 8002a3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a42:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a46:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a4a:	1d33      	adds	r3, r6, #4
 8002a4c:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a4e:	6838      	ldr	r0, [r7, #0]
 8002a50:	f001 ff06 	bl	8004860 <USB_DevInit>
 8002a54:	4603      	mov	r3, r0
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d005      	beq.n	8002a66 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2202      	movs	r2, #2
 8002a5e:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
    return HAL_ERROR;
 8002a62:	2301      	movs	r3, #1
 8002a64:	e00d      	b.n	8002a82 <HAL_PCD_Init+0x232>
  }

  hpcd->USB_Address = 0U;
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	2200      	movs	r2, #0
 8002a6a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2201      	movs	r2, #1
 8002a72:	f883 24bd 	strb.w	r2, [r3, #1213]	; 0x4bd
  if (hpcd->Init.lpm_enable == 1U)
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
  (void)USB_DevDisconnect(hpcd->Instance);
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4618      	mov	r0, r3
 8002a7c:	f003 f855 	bl	8005b2a <USB_DevDisconnect>

  return HAL_OK;
 8002a80:	2300      	movs	r3, #0
}
 8002a82:	4618      	mov	r0, r3
 8002a84:	3714      	adds	r7, #20
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bdf0      	pop	{r4, r5, r6, r7, pc}

08002a8a <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 8002a8a:	b580      	push	{r7, lr}
 8002a8c:	b084      	sub	sp, #16
 8002a8e:	af00      	add	r7, sp, #0
 8002a90:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	60fb      	str	r3, [r7, #12]

  __HAL_LOCK(hpcd);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8002a9e:	2b01      	cmp	r3, #1
 8002aa0:	d101      	bne.n	8002aa6 <HAL_PCD_Start+0x1c>
 8002aa2:	2302      	movs	r3, #2
 8002aa4:	e020      	b.n	8002ae8 <HAL_PCD_Start+0x5e>
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	2201      	movs	r2, #1
 8002aaa:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ab2:	2b01      	cmp	r3, #1
 8002ab4:	d109      	bne.n	8002aca <HAL_PCD_Start+0x40>
      (hpcd->Init.phy_itface != USB_OTG_ULPI_PHY))
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	699b      	ldr	r3, [r3, #24]
  if ((hpcd->Init.battery_charging_enable == 1U) &&
 8002aba:	2b01      	cmp	r3, #1
 8002abc:	d005      	beq.n	8002aca <HAL_PCD_Start+0x40>
  {
    /* Enable USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002ac2:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	639a      	str	r2, [r3, #56]	; 0x38
  }

  __HAL_PCD_ENABLE(hpcd);
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	4618      	mov	r0, r3
 8002ad0:	f001 fe58 	bl	8004784 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	4618      	mov	r0, r3
 8002ada:	f003 f805 	bl	8005ae8 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	2200      	movs	r2, #0
 8002ae2:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	3710      	adds	r7, #16
 8002aec:	46bd      	mov	sp, r7
 8002aee:	bd80      	pop	{r7, pc}

08002af0 <HAL_PCD_IRQHandler>:
  * @brief  Handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 8002af0:	b590      	push	{r4, r7, lr}
 8002af2:	b08d      	sub	sp, #52	; 0x34
 8002af4:	af00      	add	r7, sp, #0
 8002af6:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	623b      	str	r3, [r7, #32]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002afe:	6a3b      	ldr	r3, [r7, #32]
 8002b00:	61fb      	str	r3, [r7, #28]
  uint32_t epnum;
  uint32_t fifoemptymsk;
  uint32_t RegVal;

  /* ensure that we are in device mode */
  if (USB_GetMode(hpcd->Instance) == USB_OTG_MODE_DEVICE)
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	4618      	mov	r0, r3
 8002b08:	f003 f8c3 	bl	8005c92 <USB_GetMode>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	f040 848a 	bne.w	8003428 <HAL_PCD_IRQHandler+0x938>
  {
    /* avoid spurious interrupt */
    if (__HAL_PCD_IS_INVALID_INTERRUPT(hpcd))
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4618      	mov	r0, r3
 8002b1a:	f003 f827 	bl	8005b6c <USB_ReadInterrupts>
 8002b1e:	4603      	mov	r3, r0
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	f000 8480 	beq.w	8003426 <HAL_PCD_IRQHandler+0x936>
    {
      return;
    }

    /* store current frame number */
    hpcd->FrameNumber = (USBx_DEVICE->DSTS & USB_OTG_DSTS_FNSOF_Msk) >> USB_OTG_DSTS_FNSOF_Pos;
 8002b26:	69fb      	ldr	r3, [r7, #28]
 8002b28:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002b2c:	689b      	ldr	r3, [r3, #8]
 8002b2e:	0a1b      	lsrs	r3, r3, #8
 8002b30:	f3c3 020d 	ubfx	r2, r3, #0, #14
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	f8c3 24fc 	str.w	r2, [r3, #1276]	; 0x4fc

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_MMIS))
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f003 f814 	bl	8005b6c <USB_ReadInterrupts>
 8002b44:	4603      	mov	r3, r0
 8002b46:	f003 0302 	and.w	r3, r3, #2
 8002b4a:	2b02      	cmp	r3, #2
 8002b4c:	d107      	bne.n	8002b5e <HAL_PCD_IRQHandler+0x6e>
    {
      /* incorrect mode, acknowledge the interrupt */
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_MMIS);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	695a      	ldr	r2, [r3, #20]
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	f002 0202 	and.w	r2, r2, #2
 8002b5c:	615a      	str	r2, [r3, #20]
    }

    /* Handle RxQLevel Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_RXFLVL))
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4618      	mov	r0, r3
 8002b64:	f003 f802 	bl	8005b6c <USB_ReadInterrupts>
 8002b68:	4603      	mov	r3, r0
 8002b6a:	f003 0310 	and.w	r3, r3, #16
 8002b6e:	2b10      	cmp	r3, #16
 8002b70:	d161      	bne.n	8002c36 <HAL_PCD_IRQHandler+0x146>
    {
      USB_MASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	699a      	ldr	r2, [r3, #24]
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f022 0210 	bic.w	r2, r2, #16
 8002b80:	619a      	str	r2, [r3, #24]

      RegVal = USBx->GRXSTSP;
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	61bb      	str	r3, [r7, #24]

      ep = &hpcd->OUT_ep[RegVal & USB_OTG_GRXSTSP_EPNUM];
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	f003 020f 	and.w	r2, r3, #15
 8002b8e:	4613      	mov	r3, r2
 8002b90:	00db      	lsls	r3, r3, #3
 8002b92:	4413      	add	r3, r2
 8002b94:	009b      	lsls	r3, r3, #2
 8002b96:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	4413      	add	r3, r2
 8002b9e:	3304      	adds	r3, #4
 8002ba0:	617b      	str	r3, [r7, #20]

      if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) ==  STS_DATA_UPDT)
 8002ba2:	69bb      	ldr	r3, [r7, #24]
 8002ba4:	0c5b      	lsrs	r3, r3, #17
 8002ba6:	f003 030f 	and.w	r3, r3, #15
 8002baa:	2b02      	cmp	r3, #2
 8002bac:	d124      	bne.n	8002bf8 <HAL_PCD_IRQHandler+0x108>
      {
        if ((RegVal & USB_OTG_GRXSTSP_BCNT) != 0U)
 8002bae:	69ba      	ldr	r2, [r7, #24]
 8002bb0:	f647 73f0 	movw	r3, #32752	; 0x7ff0
 8002bb4:	4013      	ands	r3, r2
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d035      	beq.n	8002c26 <HAL_PCD_IRQHandler+0x136>
        {
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bba:	697b      	ldr	r3, [r7, #20]
 8002bbc:	6919      	ldr	r1, [r3, #16]
                               (uint16_t)((RegVal & USB_OTG_GRXSTSP_BCNT) >> 4));
 8002bbe:	69bb      	ldr	r3, [r7, #24]
 8002bc0:	091b      	lsrs	r3, r3, #4
 8002bc2:	b29b      	uxth	r3, r3
          (void)USB_ReadPacket(USBx, ep->xfer_buff,
 8002bc4:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	461a      	mov	r2, r3
 8002bcc:	6a38      	ldr	r0, [r7, #32]
 8002bce:	f002 fe39 	bl	8005844 <USB_ReadPacket>

          ep->xfer_buff += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	691a      	ldr	r2, [r3, #16]
 8002bd6:	69bb      	ldr	r3, [r7, #24]
 8002bd8:	091b      	lsrs	r3, r3, #4
 8002bda:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bde:	441a      	add	r2, r3
 8002be0:	697b      	ldr	r3, [r7, #20]
 8002be2:	611a      	str	r2, [r3, #16]
          ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	6a1a      	ldr	r2, [r3, #32]
 8002be8:	69bb      	ldr	r3, [r7, #24]
 8002bea:	091b      	lsrs	r3, r3, #4
 8002bec:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002bf0:	441a      	add	r2, r3
 8002bf2:	697b      	ldr	r3, [r7, #20]
 8002bf4:	621a      	str	r2, [r3, #32]
 8002bf6:	e016      	b.n	8002c26 <HAL_PCD_IRQHandler+0x136>
        }
      }
      else if (((RegVal & USB_OTG_GRXSTSP_PKTSTS) >> 17) == STS_SETUP_UPDT)
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	0c5b      	lsrs	r3, r3, #17
 8002bfc:	f003 030f 	and.w	r3, r3, #15
 8002c00:	2b06      	cmp	r3, #6
 8002c02:	d110      	bne.n	8002c26 <HAL_PCD_IRQHandler+0x136>
      {
        (void)USB_ReadPacket(USBx, (uint8_t *)hpcd->Setup, 8U);
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002c0a:	2208      	movs	r2, #8
 8002c0c:	4619      	mov	r1, r3
 8002c0e:	6a38      	ldr	r0, [r7, #32]
 8002c10:	f002 fe18 	bl	8005844 <USB_ReadPacket>
        ep->xfer_count += (RegVal & USB_OTG_GRXSTSP_BCNT) >> 4;
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	6a1a      	ldr	r2, [r3, #32]
 8002c18:	69bb      	ldr	r3, [r7, #24]
 8002c1a:	091b      	lsrs	r3, r3, #4
 8002c1c:	f3c3 030a 	ubfx	r3, r3, #0, #11
 8002c20:	441a      	add	r2, r3
 8002c22:	697b      	ldr	r3, [r7, #20]
 8002c24:	621a      	str	r2, [r3, #32]
      else
      {
        /* ... */
      }

      USB_UNMASK_INTERRUPT(hpcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	699a      	ldr	r2, [r3, #24]
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	f042 0210 	orr.w	r2, r2, #16
 8002c34:	619a      	str	r2, [r3, #24]
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OEPINT))
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	4618      	mov	r0, r3
 8002c3c:	f002 ff96 	bl	8005b6c <USB_ReadInterrupts>
 8002c40:	4603      	mov	r3, r0
 8002c42:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002c46:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002c4a:	f040 80a7 	bne.w	8002d9c <HAL_PCD_IRQHandler+0x2ac>
    {
      epnum = 0U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	627b      	str	r3, [r7, #36]	; 0x24

      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllOutEpInterrupt(hpcd->Instance);
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	4618      	mov	r0, r3
 8002c58:	f002 ff9b 	bl	8005b92 <USB_ReadDevAllOutEpInterrupt>
 8002c5c:	62b8      	str	r0, [r7, #40]	; 0x28

      while (ep_intr != 0U)
 8002c5e:	e099      	b.n	8002d94 <HAL_PCD_IRQHandler+0x2a4>
      {
        if ((ep_intr & 0x1U) != 0U)
 8002c60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c62:	f003 0301 	and.w	r3, r3, #1
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	f000 808e 	beq.w	8002d88 <HAL_PCD_IRQHandler+0x298>
        {
          epint = USB_ReadDevOutEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002c72:	b2d2      	uxtb	r2, r2
 8002c74:	4611      	mov	r1, r2
 8002c76:	4618      	mov	r0, r3
 8002c78:	f002 ffbf 	bl	8005bfa <USB_ReadDevOutEPInterrupt>
 8002c7c:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DOEPINT_XFRC) == USB_OTG_DOEPINT_XFRC)
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b00      	cmp	r3, #0
 8002c86:	d00c      	beq.n	8002ca2 <HAL_PCD_IRQHandler+0x1b2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_XFRC);
 8002c88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8a:	015a      	lsls	r2, r3, #5
 8002c8c:	69fb      	ldr	r3, [r7, #28]
 8002c8e:	4413      	add	r3, r2
 8002c90:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002c94:	461a      	mov	r2, r3
 8002c96:	2301      	movs	r3, #1
 8002c98:	6093      	str	r3, [r2, #8]
            (void)PCD_EP_OutXfrComplete_int(hpcd, epnum);
 8002c9a:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002c9c:	6878      	ldr	r0, [r7, #4]
 8002c9e:	f000 feab 	bl	80039f8 <PCD_EP_OutXfrComplete_int>
          }

          if ((epint & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP)
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	f003 0308 	and.w	r3, r3, #8
 8002ca8:	2b00      	cmp	r3, #0
 8002caa:	d00c      	beq.n	8002cc6 <HAL_PCD_IRQHandler+0x1d6>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STUP);
 8002cac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cae:	015a      	lsls	r2, r3, #5
 8002cb0:	69fb      	ldr	r3, [r7, #28]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cb8:	461a      	mov	r2, r3
 8002cba:	2308      	movs	r3, #8
 8002cbc:	6093      	str	r3, [r2, #8]
            /* Class B setup phase done for previous decoded setup */
            (void)PCD_EP_OutSetupPacket_int(hpcd, epnum);
 8002cbe:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002cc0:	6878      	ldr	r0, [r7, #4]
 8002cc2:	f000 ff81 	bl	8003bc8 <PCD_EP_OutSetupPacket_int>
          }

          if ((epint & USB_OTG_DOEPINT_OTEPDIS) == USB_OTG_DOEPINT_OTEPDIS)
 8002cc6:	693b      	ldr	r3, [r7, #16]
 8002cc8:	f003 0310 	and.w	r3, r3, #16
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	d008      	beq.n	8002ce2 <HAL_PCD_IRQHandler+0x1f2>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPDIS);
 8002cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002cd2:	015a      	lsls	r2, r3, #5
 8002cd4:	69fb      	ldr	r3, [r7, #28]
 8002cd6:	4413      	add	r3, r2
 8002cd8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002cdc:	461a      	mov	r2, r3
 8002cde:	2310      	movs	r3, #16
 8002ce0:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT Endpoint disable interrupt */
          if ((epint & USB_OTG_DOEPINT_EPDISD) == USB_OTG_DOEPINT_EPDISD)
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	f003 0302 	and.w	r3, r3, #2
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d030      	beq.n	8002d4e <HAL_PCD_IRQHandler+0x25e>
          {
            if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == USB_OTG_GINTSTS_BOUTNAKEFF)
 8002cec:	6a3b      	ldr	r3, [r7, #32]
 8002cee:	695b      	ldr	r3, [r3, #20]
 8002cf0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002cf4:	2b80      	cmp	r3, #128	; 0x80
 8002cf6:	d109      	bne.n	8002d0c <HAL_PCD_IRQHandler+0x21c>
            {
              USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGONAK;
 8002cf8:	69fb      	ldr	r3, [r7, #28]
 8002cfa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002cfe:	685b      	ldr	r3, [r3, #4]
 8002d00:	69fa      	ldr	r2, [r7, #28]
 8002d02:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002d06:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d0a:	6053      	str	r3, [r2, #4]
            }

            ep = &hpcd->OUT_ep[epnum];
 8002d0c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002d0e:	4613      	mov	r3, r2
 8002d10:	00db      	lsls	r3, r3, #3
 8002d12:	4413      	add	r3, r2
 8002d14:	009b      	lsls	r3, r3, #2
 8002d16:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8002d1a:	687a      	ldr	r2, [r7, #4]
 8002d1c:	4413      	add	r3, r2
 8002d1e:	3304      	adds	r3, #4
 8002d20:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002d22:	697b      	ldr	r3, [r7, #20]
 8002d24:	78db      	ldrb	r3, [r3, #3]
 8002d26:	2b01      	cmp	r3, #1
 8002d28:	d108      	bne.n	8002d3c <HAL_PCD_IRQHandler+0x24c>
            {
              ep->is_iso_incomplete = 0U;
 8002d2a:	697b      	ldr	r3, [r7, #20]
 8002d2c:	2200      	movs	r2, #0
 8002d2e:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOOUTIncompleteCallback(hpcd, (uint8_t)epnum);
 8002d30:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d32:	b2db      	uxtb	r3, r3
 8002d34:	4619      	mov	r1, r3
 8002d36:	6878      	ldr	r0, [r7, #4]
 8002d38:	f004 ffd0 	bl	8007cdc <HAL_PCD_ISOOUTIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_EPDISD);
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d3e:	015a      	lsls	r2, r3, #5
 8002d40:	69fb      	ldr	r3, [r7, #28]
 8002d42:	4413      	add	r3, r2
 8002d44:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d48:	461a      	mov	r2, r3
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	6093      	str	r3, [r2, #8]
          }

          /* Clear Status Phase Received interrupt */
          if ((epint & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	f003 0320 	and.w	r3, r3, #32
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d008      	beq.n	8002d6a <HAL_PCD_IRQHandler+0x27a>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8002d58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d5a:	015a      	lsls	r2, r3, #5
 8002d5c:	69fb      	ldr	r3, [r7, #28]
 8002d5e:	4413      	add	r3, r2
 8002d60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d64:	461a      	mov	r2, r3
 8002d66:	2320      	movs	r3, #32
 8002d68:	6093      	str	r3, [r2, #8]
          }

          /* Clear OUT NAK interrupt */
          if ((epint & USB_OTG_DOEPINT_NAK) == USB_OTG_DOEPINT_NAK)
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002d70:	2b00      	cmp	r3, #0
 8002d72:	d009      	beq.n	8002d88 <HAL_PCD_IRQHandler+0x298>
          {
            CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_NAK);
 8002d74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d76:	015a      	lsls	r2, r3, #5
 8002d78:	69fb      	ldr	r3, [r7, #28]
 8002d7a:	4413      	add	r3, r2
 8002d7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8002d80:	461a      	mov	r2, r3
 8002d82:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002d86:	6093      	str	r3, [r2, #8]
          }
        }
        epnum++;
 8002d88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002d8a:	3301      	adds	r3, #1
 8002d8c:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002d8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d90:	085b      	lsrs	r3, r3, #1
 8002d92:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002d94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	f47f af62 	bne.w	8002c60 <HAL_PCD_IRQHandler+0x170>
      }
    }

    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IEPINT))
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	4618      	mov	r0, r3
 8002da2:	f002 fee3 	bl	8005b6c <USB_ReadInterrupts>
 8002da6:	4603      	mov	r3, r0
 8002da8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002dac:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002db0:	f040 80db 	bne.w	8002f6a <HAL_PCD_IRQHandler+0x47a>
    {
      /* Read in the device interrupt bits */
      ep_intr = USB_ReadDevAllInEpInterrupt(hpcd->Instance);
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	4618      	mov	r0, r3
 8002dba:	f002 ff04 	bl	8005bc6 <USB_ReadDevAllInEpInterrupt>
 8002dbe:	62b8      	str	r0, [r7, #40]	; 0x28

      epnum = 0U;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	627b      	str	r3, [r7, #36]	; 0x24

      while (ep_intr != 0U)
 8002dc4:	e0cd      	b.n	8002f62 <HAL_PCD_IRQHandler+0x472>
      {
        if ((ep_intr & 0x1U) != 0U) /* In ITR */
 8002dc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002dc8:	f003 0301 	and.w	r3, r3, #1
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	f000 80c2 	beq.w	8002f56 <HAL_PCD_IRQHandler+0x466>
        {
          epint = USB_ReadDevInEPInterrupt(hpcd->Instance, (uint8_t)epnum);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	4611      	mov	r1, r2
 8002ddc:	4618      	mov	r0, r3
 8002dde:	f002 ff2a 	bl	8005c36 <USB_ReadDevInEPInterrupt>
 8002de2:	6138      	str	r0, [r7, #16]

          if ((epint & USB_OTG_DIEPINT_XFRC) == USB_OTG_DIEPINT_XFRC)
 8002de4:	693b      	ldr	r3, [r7, #16]
 8002de6:	f003 0301 	and.w	r3, r3, #1
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d057      	beq.n	8002e9e <HAL_PCD_IRQHandler+0x3ae>
          {
            fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 8002dee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002df0:	f003 030f 	and.w	r3, r3, #15
 8002df4:	2201      	movs	r2, #1
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	60fb      	str	r3, [r7, #12]
            USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 8002dfc:	69fb      	ldr	r3, [r7, #28]
 8002dfe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002e02:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	43db      	mvns	r3, r3
 8002e08:	69f9      	ldr	r1, [r7, #28]
 8002e0a:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8002e0e:	4013      	ands	r3, r2
 8002e10:	634b      	str	r3, [r1, #52]	; 0x34

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_XFRC);
 8002e12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e14:	015a      	lsls	r2, r3, #5
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	4413      	add	r3, r2
 8002e1a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002e1e:	461a      	mov	r2, r3
 8002e20:	2301      	movs	r3, #1
 8002e22:	6093      	str	r3, [r2, #8]

            if (hpcd->Init.dma_enable == 1U)
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	691b      	ldr	r3, [r3, #16]
 8002e28:	2b01      	cmp	r3, #1
 8002e2a:	d132      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x3a2>
            {
              hpcd->IN_ep[epnum].xfer_buff += hpcd->IN_ep[epnum].maxpacket;
 8002e2c:	6879      	ldr	r1, [r7, #4]
 8002e2e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e30:	4613      	mov	r3, r2
 8002e32:	00db      	lsls	r3, r3, #3
 8002e34:	4413      	add	r3, r2
 8002e36:	009b      	lsls	r3, r3, #2
 8002e38:	440b      	add	r3, r1
 8002e3a:	334c      	adds	r3, #76	; 0x4c
 8002e3c:	6819      	ldr	r1, [r3, #0]
 8002e3e:	6878      	ldr	r0, [r7, #4]
 8002e40:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e42:	4613      	mov	r3, r2
 8002e44:	00db      	lsls	r3, r3, #3
 8002e46:	4413      	add	r3, r2
 8002e48:	009b      	lsls	r3, r3, #2
 8002e4a:	4403      	add	r3, r0
 8002e4c:	3348      	adds	r3, #72	; 0x48
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	4419      	add	r1, r3
 8002e52:	6878      	ldr	r0, [r7, #4]
 8002e54:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e56:	4613      	mov	r3, r2
 8002e58:	00db      	lsls	r3, r3, #3
 8002e5a:	4413      	add	r3, r2
 8002e5c:	009b      	lsls	r3, r3, #2
 8002e5e:	4403      	add	r3, r0
 8002e60:	334c      	adds	r3, #76	; 0x4c
 8002e62:	6019      	str	r1, [r3, #0]

              /* this is ZLP, so prepare EP0 for next setup */
              if ((epnum == 0U) && (hpcd->IN_ep[epnum].xfer_len == 0U))
 8002e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d113      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x3a2>
 8002e6a:	6879      	ldr	r1, [r7, #4]
 8002e6c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002e6e:	4613      	mov	r3, r2
 8002e70:	00db      	lsls	r3, r3, #3
 8002e72:	4413      	add	r3, r2
 8002e74:	009b      	lsls	r3, r3, #2
 8002e76:	440b      	add	r3, r1
 8002e78:	3354      	adds	r3, #84	; 0x54
 8002e7a:	681b      	ldr	r3, [r3, #0]
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d108      	bne.n	8002e92 <HAL_PCD_IRQHandler+0x3a2>
              {
                /* prepare to rx more setup packets */
                (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	6818      	ldr	r0, [r3, #0]
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8002e8a:	461a      	mov	r2, r3
 8002e8c:	2101      	movs	r1, #1
 8002e8e:	f002 ff31 	bl	8005cf4 <USB_EP0_OutStart>
            }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataInStageCallback(hpcd, (uint8_t)epnum);
#else
            HAL_PCD_DataInStageCallback(hpcd, (uint8_t)epnum);
 8002e92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	4619      	mov	r1, r3
 8002e98:	6878      	ldr	r0, [r7, #4]
 8002e9a:	f004 fea4 	bl	8007be6 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }
          if ((epint & USB_OTG_DIEPINT_TOC) == USB_OTG_DIEPINT_TOC)
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f003 0308 	and.w	r3, r3, #8
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d008      	beq.n	8002eba <HAL_PCD_IRQHandler+0x3ca>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_TOC);
 8002ea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eaa:	015a      	lsls	r2, r3, #5
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	4413      	add	r3, r2
 8002eb0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eb4:	461a      	mov	r2, r3
 8002eb6:	2308      	movs	r3, #8
 8002eb8:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_ITTXFE) == USB_OTG_DIEPINT_ITTXFE)
 8002eba:	693b      	ldr	r3, [r7, #16]
 8002ebc:	f003 0310 	and.w	r3, r3, #16
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d008      	beq.n	8002ed6 <HAL_PCD_IRQHandler+0x3e6>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_ITTXFE);
 8002ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ec6:	015a      	lsls	r2, r3, #5
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	4413      	add	r3, r2
 8002ecc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002ed0:	461a      	mov	r2, r3
 8002ed2:	2310      	movs	r3, #16
 8002ed4:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_INEPNE) == USB_OTG_DIEPINT_INEPNE)
 8002ed6:	693b      	ldr	r3, [r7, #16]
 8002ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d008      	beq.n	8002ef2 <HAL_PCD_IRQHandler+0x402>
          {
            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_INEPNE);
 8002ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002ee2:	015a      	lsls	r2, r3, #5
 8002ee4:	69fb      	ldr	r3, [r7, #28]
 8002ee6:	4413      	add	r3, r2
 8002ee8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002eec:	461a      	mov	r2, r3
 8002eee:	2340      	movs	r3, #64	; 0x40
 8002ef0:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_EPDISD) == USB_OTG_DIEPINT_EPDISD)
 8002ef2:	693b      	ldr	r3, [r7, #16]
 8002ef4:	f003 0302 	and.w	r3, r3, #2
 8002ef8:	2b00      	cmp	r3, #0
 8002efa:	d023      	beq.n	8002f44 <HAL_PCD_IRQHandler+0x454>
          {
            (void)USB_FlushTxFifo(USBx, epnum);
 8002efc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002efe:	6a38      	ldr	r0, [r7, #32]
 8002f00:	f001 fe12 	bl	8004b28 <USB_FlushTxFifo>

            ep = &hpcd->IN_ep[epnum];
 8002f04:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002f06:	4613      	mov	r3, r2
 8002f08:	00db      	lsls	r3, r3, #3
 8002f0a:	4413      	add	r3, r2
 8002f0c:	009b      	lsls	r3, r3, #2
 8002f0e:	3338      	adds	r3, #56	; 0x38
 8002f10:	687a      	ldr	r2, [r7, #4]
 8002f12:	4413      	add	r3, r2
 8002f14:	3304      	adds	r3, #4
 8002f16:	617b      	str	r3, [r7, #20]

            if (ep->is_iso_incomplete == 1U)
 8002f18:	697b      	ldr	r3, [r7, #20]
 8002f1a:	78db      	ldrb	r3, [r3, #3]
 8002f1c:	2b01      	cmp	r3, #1
 8002f1e:	d108      	bne.n	8002f32 <HAL_PCD_IRQHandler+0x442>
            {
              ep->is_iso_incomplete = 0U;
 8002f20:	697b      	ldr	r3, [r7, #20]
 8002f22:	2200      	movs	r2, #0
 8002f24:	70da      	strb	r2, [r3, #3]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
#else
              HAL_PCD_ISOINIncompleteCallback(hpcd, (uint8_t)epnum);
 8002f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	4619      	mov	r1, r3
 8002f2c:	6878      	ldr	r0, [r7, #4]
 8002f2e:	f004 fee7 	bl	8007d00 <HAL_PCD_ISOINIncompleteCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }

            CLEAR_IN_EP_INTR(epnum, USB_OTG_DIEPINT_EPDISD);
 8002f32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f34:	015a      	lsls	r2, r3, #5
 8002f36:	69fb      	ldr	r3, [r7, #28]
 8002f38:	4413      	add	r3, r2
 8002f3a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8002f3e:	461a      	mov	r2, r3
 8002f40:	2302      	movs	r3, #2
 8002f42:	6093      	str	r3, [r2, #8]
          }
          if ((epint & USB_OTG_DIEPINT_TXFE) == USB_OTG_DIEPINT_TXFE)
 8002f44:	693b      	ldr	r3, [r7, #16]
 8002f46:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d003      	beq.n	8002f56 <HAL_PCD_IRQHandler+0x466>
          {
            (void)PCD_WriteEmptyTxFifo(hpcd, epnum);
 8002f4e:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8002f50:	6878      	ldr	r0, [r7, #4]
 8002f52:	f000 fcc3 	bl	80038dc <PCD_WriteEmptyTxFifo>
          }
        }
        epnum++;
 8002f56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002f58:	3301      	adds	r3, #1
 8002f5a:	627b      	str	r3, [r7, #36]	; 0x24
        ep_intr >>= 1U;
 8002f5c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f5e:	085b      	lsrs	r3, r3, #1
 8002f60:	62bb      	str	r3, [r7, #40]	; 0x28
      while (ep_intr != 0U)
 8002f62:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	f47f af2e 	bne.w	8002dc6 <HAL_PCD_IRQHandler+0x2d6>
      }
    }

    /* Handle Resume Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4618      	mov	r0, r3
 8002f70:	f002 fdfc 	bl	8005b6c <USB_ReadInterrupts>
 8002f74:	4603      	mov	r3, r0
 8002f76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002f7a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002f7e:	d122      	bne.n	8002fc6 <HAL_PCD_IRQHandler+0x4d6>
    {
      /* Clear the Remote Wake-up Signaling */
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 8002f80:	69fb      	ldr	r3, [r7, #28]
 8002f82:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002f86:	685b      	ldr	r3, [r3, #4]
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8002f8e:	f023 0301 	bic.w	r3, r3, #1
 8002f92:	6053      	str	r3, [r2, #4]

      if (hpcd->LPM_State == LPM_L1)
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	f893 34f4 	ldrb.w	r3, [r3, #1268]	; 0x4f4
 8002f9a:	2b01      	cmp	r3, #1
 8002f9c:	d108      	bne.n	8002fb0 <HAL_PCD_IRQHandler+0x4c0>
      {
        hpcd->LPM_State = LPM_L0;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	2200      	movs	r2, #0
 8002fa2:	f883 24f4 	strb.w	r2, [r3, #1268]	; 0x4f4

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
        HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 8002fa6:	2100      	movs	r1, #0
 8002fa8:	6878      	ldr	r0, [r7, #4]
 8002faa:	f000 feab 	bl	8003d04 <HAL_PCDEx_LPM_Callback>
 8002fae:	e002      	b.n	8002fb6 <HAL_PCD_IRQHandler+0x4c6>
      else
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->ResumeCallback(hpcd);
#else
        HAL_PCD_ResumeCallback(hpcd);
 8002fb0:	6878      	ldr	r0, [r7, #4]
 8002fb2:	f004 fe85 	bl	8007cc0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_WKUINT);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	695a      	ldr	r2, [r3, #20]
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f002 4200 	and.w	r2, r2, #2147483648	; 0x80000000
 8002fc4:	615a      	str	r2, [r3, #20]
    }

    /* Handle Suspend Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP))
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f002 fdce 	bl	8005b6c <USB_ReadInterrupts>
 8002fd0:	4603      	mov	r3, r0
 8002fd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002fd6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002fda:	d112      	bne.n	8003002 <HAL_PCD_IRQHandler+0x512>
    {
      if ((USBx_DEVICE->DSTS & USB_OTG_DSTS_SUSPSTS) == USB_OTG_DSTS_SUSPSTS)
 8002fdc:	69fb      	ldr	r3, [r7, #28]
 8002fde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002fe2:	689b      	ldr	r3, [r3, #8]
 8002fe4:	f003 0301 	and.w	r3, r3, #1
 8002fe8:	2b01      	cmp	r3, #1
 8002fea:	d102      	bne.n	8002ff2 <HAL_PCD_IRQHandler+0x502>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->SuspendCallback(hpcd);
#else
        HAL_PCD_SuspendCallback(hpcd);
 8002fec:	6878      	ldr	r0, [r7, #4]
 8002fee:	f004 fe41 	bl	8007c74 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBSUSP);
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	695a      	ldr	r2, [r3, #20]
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f402 6200 	and.w	r2, r2, #2048	; 0x800
 8003000:	615a      	str	r2, [r3, #20]
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */
    /* Handle Reset Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_USBRST))
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f002 fdb0 	bl	8005b6c <USB_ReadInterrupts>
 800300c:	4603      	mov	r3, r0
 800300e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003016:	f040 80b7 	bne.w	8003188 <HAL_PCD_IRQHandler+0x698>
    {
      USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_RWUSIG;
 800301a:	69fb      	ldr	r3, [r7, #28]
 800301c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003020:	685b      	ldr	r3, [r3, #4]
 8003022:	69fa      	ldr	r2, [r7, #28]
 8003024:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003028:	f023 0301 	bic.w	r3, r3, #1
 800302c:	6053      	str	r3, [r2, #4]
      (void)USB_FlushTxFifo(hpcd->Instance, 0x10U);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	2110      	movs	r1, #16
 8003034:	4618      	mov	r0, r3
 8003036:	f001 fd77 	bl	8004b28 <USB_FlushTxFifo>

      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800303a:	2300      	movs	r3, #0
 800303c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800303e:	e046      	b.n	80030ce <HAL_PCD_IRQHandler+0x5de>
      {
        USBx_INEP(i)->DIEPINT = 0xFB7FU;
 8003040:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003042:	015a      	lsls	r2, r3, #5
 8003044:	69fb      	ldr	r3, [r7, #28]
 8003046:	4413      	add	r3, r2
 8003048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800304c:	461a      	mov	r2, r3
 800304e:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003052:	6093      	str	r3, [r2, #8]
        USBx_INEP(i)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 8003054:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003056:	015a      	lsls	r2, r3, #5
 8003058:	69fb      	ldr	r3, [r7, #28]
 800305a:	4413      	add	r3, r2
 800305c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003064:	0151      	lsls	r1, r2, #5
 8003066:	69fa      	ldr	r2, [r7, #28]
 8003068:	440a      	add	r2, r1
 800306a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800306e:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8003072:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPINT = 0xFB7FU;
 8003074:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003076:	015a      	lsls	r2, r3, #5
 8003078:	69fb      	ldr	r3, [r7, #28]
 800307a:	4413      	add	r3, r2
 800307c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003080:	461a      	mov	r2, r3
 8003082:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003086:	6093      	str	r3, [r2, #8]
        USBx_OUTEP(i)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8003088:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800308a:	015a      	lsls	r2, r3, #5
 800308c:	69fb      	ldr	r3, [r7, #28]
 800308e:	4413      	add	r3, r2
 8003090:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003098:	0151      	lsls	r1, r2, #5
 800309a:	69fa      	ldr	r2, [r7, #28]
 800309c:	440a      	add	r2, r1
 800309e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030a2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80030a6:	6013      	str	r3, [r2, #0]
        USBx_OUTEP(i)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 80030a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030aa:	015a      	lsls	r2, r3, #5
 80030ac:	69fb      	ldr	r3, [r7, #28]
 80030ae:	4413      	add	r3, r2
 80030b0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030b8:	0151      	lsls	r1, r2, #5
 80030ba:	69fa      	ldr	r2, [r7, #28]
 80030bc:	440a      	add	r2, r1
 80030be:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80030c2:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80030c6:	6013      	str	r3, [r2, #0]
      for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80030c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80030ca:	3301      	adds	r3, #1
 80030cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80030d4:	429a      	cmp	r2, r3
 80030d6:	d3b3      	bcc.n	8003040 <HAL_PCD_IRQHandler+0x550>
      }
      USBx_DEVICE->DAINTMSK |= 0x10001U;
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030de:	69db      	ldr	r3, [r3, #28]
 80030e0:	69fa      	ldr	r2, [r7, #28]
 80030e2:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80030e6:	f043 1301 	orr.w	r3, r3, #65537	; 0x10001
 80030ea:	61d3      	str	r3, [r2, #28]

      if (hpcd->Init.use_dedicated_ep1 != 0U)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d016      	beq.n	8003122 <HAL_PCD_IRQHandler+0x632>
      {
        USBx_DEVICE->DOUTEP1MSK |= USB_OTG_DOEPMSK_STUPM |
 80030f4:	69fb      	ldr	r3, [r7, #28]
 80030f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80030fa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030fe:	69fa      	ldr	r2, [r7, #28]
 8003100:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003104:	f043 030b 	orr.w	r3, r3, #11
 8003108:	f8c2 3084 	str.w	r3, [r2, #132]	; 0x84
                                   USB_OTG_DOEPMSK_XFRCM |
                                   USB_OTG_DOEPMSK_EPDM;

        USBx_DEVICE->DINEP1MSK |= USB_OTG_DIEPMSK_TOM |
 800310c:	69fb      	ldr	r3, [r7, #28]
 800310e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003112:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003114:	69fa      	ldr	r2, [r7, #28]
 8003116:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800311a:	f043 030b 	orr.w	r3, r3, #11
 800311e:	6453      	str	r3, [r2, #68]	; 0x44
 8003120:	e015      	b.n	800314e <HAL_PCD_IRQHandler+0x65e>
                                  USB_OTG_DIEPMSK_XFRCM |
                                  USB_OTG_DIEPMSK_EPDM;
      }
      else
      {
        USBx_DEVICE->DOEPMSK |= USB_OTG_DOEPMSK_STUPM |
 8003122:	69fb      	ldr	r3, [r7, #28]
 8003124:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003128:	695b      	ldr	r3, [r3, #20]
 800312a:	69fa      	ldr	r2, [r7, #28]
 800312c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003130:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003134:	f043 032b 	orr.w	r3, r3, #43	; 0x2b
 8003138:	6153      	str	r3, [r2, #20]
                                USB_OTG_DOEPMSK_XFRCM |
                                USB_OTG_DOEPMSK_EPDM |
                                USB_OTG_DOEPMSK_OTEPSPRM |
                                USB_OTG_DOEPMSK_NAKM;

        USBx_DEVICE->DIEPMSK |= USB_OTG_DIEPMSK_TOM |
 800313a:	69fb      	ldr	r3, [r7, #28]
 800313c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003140:	691b      	ldr	r3, [r3, #16]
 8003142:	69fa      	ldr	r2, [r7, #28]
 8003144:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003148:	f043 030b 	orr.w	r3, r3, #11
 800314c:	6113      	str	r3, [r2, #16]
                                USB_OTG_DIEPMSK_XFRCM |
                                USB_OTG_DIEPMSK_EPDM;
      }

      /* Set Default Address to 0 */
      USBx_DEVICE->DCFG &= ~USB_OTG_DCFG_DAD;
 800314e:	69fb      	ldr	r3, [r7, #28]
 8003150:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	69fa      	ldr	r2, [r7, #28]
 8003158:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800315c:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8003160:	6013      	str	r3, [r2, #0]

      /* setup EP0 to receive SETUP packets */
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	6818      	ldr	r0, [r3, #0]
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	691b      	ldr	r3, [r3, #16]
 800316a:	b2d9      	uxtb	r1, r3
                             (uint8_t *)hpcd->Setup);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
      (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable,
 8003172:	461a      	mov	r2, r3
 8003174:	f002 fdbe 	bl	8005cf4 <USB_EP0_OutStart>

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_USBRST);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	695a      	ldr	r2, [r3, #20]
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	f402 5280 	and.w	r2, r2, #4096	; 0x1000
 8003186:	615a      	str	r2, [r3, #20]
    }

    /* Handle Enumeration done Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE))
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	4618      	mov	r0, r3
 800318e:	f002 fced 	bl	8005b6c <USB_ReadInterrupts>
 8003192:	4603      	mov	r3, r0
 8003194:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003198:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800319c:	d124      	bne.n	80031e8 <HAL_PCD_IRQHandler+0x6f8>
    {
      (void)USB_ActivateSetup(hpcd->Instance);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	4618      	mov	r0, r3
 80031a4:	f002 fd83 	bl	8005cae <USB_ActivateSetup>
      hpcd->Init.speed = USB_GetDevSpeed(hpcd->Instance);
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	4618      	mov	r0, r3
 80031ae:	f001 fd38 	bl	8004c22 <USB_GetDevSpeed>
 80031b2:	4603      	mov	r3, r0
 80031b4:	461a      	mov	r2, r3
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	60da      	str	r2, [r3, #12]

      /* Set USB Turnaround time */
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681c      	ldr	r4, [r3, #0]
 80031be:	f001 f9d1 	bl	8004564 <HAL_RCC_GetHCLKFreq>
 80031c2:	4601      	mov	r1, r0
                                  HAL_RCC_GetHCLKFreq(),
                                  (uint8_t)hpcd->Init.speed);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	68db      	ldr	r3, [r3, #12]
      (void)USB_SetTurnaroundTime(hpcd->Instance,
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	461a      	mov	r2, r3
 80031cc:	4620      	mov	r0, r4
 80031ce:	f001 fa37 	bl	8004640 <USB_SetTurnaroundTime>

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ResetCallback(hpcd);
#else
      HAL_PCD_ResetCallback(hpcd);
 80031d2:	6878      	ldr	r0, [r7, #4]
 80031d4:	f004 fd2f 	bl	8007c36 <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_ENUMDNE);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	f402 5200 	and.w	r2, r2, #8192	; 0x2000
 80031e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle SOF Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SOF))
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	4618      	mov	r0, r3
 80031ee:	f002 fcbd 	bl	8005b6c <USB_ReadInterrupts>
 80031f2:	4603      	mov	r3, r0
 80031f4:	f003 0308 	and.w	r3, r3, #8
 80031f8:	2b08      	cmp	r3, #8
 80031fa:	d10a      	bne.n	8003212 <HAL_PCD_IRQHandler+0x722>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->SOFCallback(hpcd);
#else
      HAL_PCD_SOFCallback(hpcd);
 80031fc:	6878      	ldr	r0, [r7, #4]
 80031fe:	f004 fd0c 	bl	8007c1a <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SOF);
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	695a      	ldr	r2, [r3, #20]
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f002 0208 	and.w	r2, r2, #8
 8003210:	615a      	str	r2, [r3, #20]
    }

    /* Handle Global OUT NAK effective Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_BOUTNAKEFF))
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4618      	mov	r0, r3
 8003218:	f002 fca8 	bl	8005b6c <USB_ReadInterrupts>
 800321c:	4603      	mov	r3, r0
 800321e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003222:	2b80      	cmp	r3, #128	; 0x80
 8003224:	d122      	bne.n	800326c <HAL_PCD_IRQHandler+0x77c>
    {
      USBx->GINTMSK &= ~USB_OTG_GINTMSK_GONAKEFFM;
 8003226:	6a3b      	ldr	r3, [r7, #32]
 8003228:	699b      	ldr	r3, [r3, #24]
 800322a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800322e:	6a3b      	ldr	r3, [r7, #32]
 8003230:	619a      	str	r2, [r3, #24]

      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003232:	2301      	movs	r3, #1
 8003234:	627b      	str	r3, [r7, #36]	; 0x24
 8003236:	e014      	b.n	8003262 <HAL_PCD_IRQHandler+0x772>
      {
        if (hpcd->OUT_ep[epnum].is_iso_incomplete == 1U)
 8003238:	6879      	ldr	r1, [r7, #4]
 800323a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800323c:	4613      	mov	r3, r2
 800323e:	00db      	lsls	r3, r3, #3
 8003240:	4413      	add	r3, r2
 8003242:	009b      	lsls	r3, r3, #2
 8003244:	440b      	add	r3, r1
 8003246:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800324a:	781b      	ldrb	r3, [r3, #0]
 800324c:	2b01      	cmp	r3, #1
 800324e:	d105      	bne.n	800325c <HAL_PCD_IRQHandler+0x76c>
        {
          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)epnum);
 8003250:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003252:	b2db      	uxtb	r3, r3
 8003254:	4619      	mov	r1, r3
 8003256:	6878      	ldr	r0, [r7, #4]
 8003258:	f000 fb0f 	bl	800387a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800325c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800325e:	3301      	adds	r3, #1
 8003260:	627b      	str	r3, [r7, #36]	; 0x24
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003268:	429a      	cmp	r2, r3
 800326a:	d3e5      	bcc.n	8003238 <HAL_PCD_IRQHandler+0x748>
        }
      }
    }

    /* Handle Incomplete ISO IN Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR))
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	4618      	mov	r0, r3
 8003272:	f002 fc7b 	bl	8005b6c <USB_ReadInterrupts>
 8003276:	4603      	mov	r3, r0
 8003278:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800327c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003280:	d13b      	bne.n	80032fa <HAL_PCD_IRQHandler+0x80a>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003282:	2301      	movs	r3, #1
 8003284:	627b      	str	r3, [r7, #36]	; 0x24
 8003286:	e02b      	b.n	80032e0 <HAL_PCD_IRQHandler+0x7f0>
      {
        RegVal = USBx_INEP(epnum)->DIEPCTL;
 8003288:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800328a:	015a      	lsls	r2, r3, #5
 800328c:	69fb      	ldr	r3, [r7, #28]
 800328e:	4413      	add	r3, r2
 8003290:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	61bb      	str	r3, [r7, #24]

        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 8003298:	6879      	ldr	r1, [r7, #4]
 800329a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800329c:	4613      	mov	r3, r2
 800329e:	00db      	lsls	r3, r3, #3
 80032a0:	4413      	add	r3, r2
 80032a2:	009b      	lsls	r3, r3, #2
 80032a4:	440b      	add	r3, r1
 80032a6:	3340      	adds	r3, #64	; 0x40
 80032a8:	781b      	ldrb	r3, [r3, #0]
 80032aa:	2b01      	cmp	r3, #1
 80032ac:	d115      	bne.n	80032da <HAL_PCD_IRQHandler+0x7ea>
            ((RegVal & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA))
 80032ae:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->IN_ep[epnum].type == EP_TYPE_ISOC) &&
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	da12      	bge.n	80032da <HAL_PCD_IRQHandler+0x7ea>
        {
          hpcd->IN_ep[epnum].is_iso_incomplete = 1U;
 80032b4:	6879      	ldr	r1, [r7, #4]
 80032b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032b8:	4613      	mov	r3, r2
 80032ba:	00db      	lsls	r3, r3, #3
 80032bc:	4413      	add	r3, r2
 80032be:	009b      	lsls	r3, r3, #2
 80032c0:	440b      	add	r3, r1
 80032c2:	333f      	adds	r3, #63	; 0x3f
 80032c4:	2201      	movs	r2, #1
 80032c6:	701a      	strb	r2, [r3, #0]

          /* Abort current transaction and disable the EP */
          (void)HAL_PCD_EP_Abort(hpcd, (uint8_t)(epnum | 0x80U));
 80032c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ca:	b2db      	uxtb	r3, r3
 80032cc:	f063 037f 	orn	r3, r3, #127	; 0x7f
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	4619      	mov	r1, r3
 80032d4:	6878      	ldr	r0, [r7, #4]
 80032d6:	f000 fad0 	bl	800387a <HAL_PCD_EP_Abort>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 80032da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032dc:	3301      	adds	r3, #1
 80032de:	627b      	str	r3, [r7, #36]	; 0x24
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	685b      	ldr	r3, [r3, #4]
 80032e4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80032e6:	429a      	cmp	r2, r3
 80032e8:	d3ce      	bcc.n	8003288 <HAL_PCD_IRQHandler+0x798>
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_IISOIXFR);
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	695a      	ldr	r2, [r3, #20]
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f402 1280 	and.w	r2, r2, #1048576	; 0x100000
 80032f8:	615a      	str	r2, [r3, #20]
    }

    /* Handle Incomplete ISO OUT Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4618      	mov	r0, r3
 8003300:	f002 fc34 	bl	8005b6c <USB_ReadInterrupts>
 8003304:	4603      	mov	r3, r0
 8003306:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800330a:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800330e:	d155      	bne.n	80033bc <HAL_PCD_IRQHandler+0x8cc>
    {
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 8003310:	2301      	movs	r3, #1
 8003312:	627b      	str	r3, [r7, #36]	; 0x24
 8003314:	e045      	b.n	80033a2 <HAL_PCD_IRQHandler+0x8b2>
      {
        RegVal = USBx_OUTEP(epnum)->DOEPCTL;
 8003316:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003318:	015a      	lsls	r2, r3, #5
 800331a:	69fb      	ldr	r3, [r7, #28]
 800331c:	4413      	add	r3, r2
 800331e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	61bb      	str	r3, [r7, #24]

        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003326:	6879      	ldr	r1, [r7, #4]
 8003328:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800332a:	4613      	mov	r3, r2
 800332c:	00db      	lsls	r3, r3, #3
 800332e:	4413      	add	r3, r2
 8003330:	009b      	lsls	r3, r3, #2
 8003332:	440b      	add	r3, r1
 8003334:	f503 7320 	add.w	r3, r3, #640	; 0x280
 8003338:	781b      	ldrb	r3, [r3, #0]
 800333a:	2b01      	cmp	r3, #1
 800333c:	d12e      	bne.n	800339c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 800333e:	69bb      	ldr	r3, [r7, #24]
        if ((hpcd->OUT_ep[epnum].type == EP_TYPE_ISOC) &&
 8003340:	2b00      	cmp	r3, #0
 8003342:	da2b      	bge.n	800339c <HAL_PCD_IRQHandler+0x8ac>
            ((RegVal & (0x1U << 16)) == (hpcd->FrameNumber & 0x1U)))
 8003344:	69bb      	ldr	r3, [r7, #24]
 8003346:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	f8d3 34fc 	ldr.w	r3, [r3, #1276]	; 0x4fc
 8003350:	f003 0301 	and.w	r3, r3, #1
            ((RegVal & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA) &&
 8003354:	429a      	cmp	r2, r3
 8003356:	d121      	bne.n	800339c <HAL_PCD_IRQHandler+0x8ac>
        {
          hpcd->OUT_ep[epnum].is_iso_incomplete = 1U;
 8003358:	6879      	ldr	r1, [r7, #4]
 800335a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800335c:	4613      	mov	r3, r2
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	4413      	add	r3, r2
 8003362:	009b      	lsls	r3, r3, #2
 8003364:	440b      	add	r3, r1
 8003366:	f203 237f 	addw	r3, r3, #639	; 0x27f
 800336a:	2201      	movs	r2, #1
 800336c:	701a      	strb	r2, [r3, #0]

          USBx->GINTMSK |= USB_OTG_GINTMSK_GONAKEFFM;
 800336e:	6a3b      	ldr	r3, [r7, #32]
 8003370:	699b      	ldr	r3, [r3, #24]
 8003372:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003376:	6a3b      	ldr	r3, [r7, #32]
 8003378:	619a      	str	r2, [r3, #24]

          if ((USBx->GINTSTS & USB_OTG_GINTSTS_BOUTNAKEFF) == 0U)
 800337a:	6a3b      	ldr	r3, [r7, #32]
 800337c:	695b      	ldr	r3, [r3, #20]
 800337e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003382:	2b00      	cmp	r3, #0
 8003384:	d10a      	bne.n	800339c <HAL_PCD_IRQHandler+0x8ac>
          {
            USBx_DEVICE->DCTL |= USB_OTG_DCTL_SGONAK;
 8003386:	69fb      	ldr	r3, [r7, #28]
 8003388:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	69fa      	ldr	r2, [r7, #28]
 8003390:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003394:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003398:	6053      	str	r3, [r2, #4]
            break;
 800339a:	e007      	b.n	80033ac <HAL_PCD_IRQHandler+0x8bc>
      for (epnum = 1U; epnum < hpcd->Init.dev_endpoints; epnum++)
 800339c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800339e:	3301      	adds	r3, #1
 80033a0:	627b      	str	r3, [r7, #36]	; 0x24
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80033a8:	429a      	cmp	r2, r3
 80033aa:	d3b4      	bcc.n	8003316 <HAL_PCD_IRQHandler+0x826>
          }
        }
      }

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	695a      	ldr	r2, [r3, #20]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	f402 1200 	and.w	r2, r2, #2097152	; 0x200000
 80033ba:	615a      	str	r2, [r3, #20]
    }

    /* Handle Connection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT))
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	4618      	mov	r0, r3
 80033c2:	f002 fbd3 	bl	8005b6c <USB_ReadInterrupts>
 80033c6:	4603      	mov	r3, r0
 80033c8:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80033cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033d0:	d10a      	bne.n	80033e8 <HAL_PCD_IRQHandler+0x8f8>
    {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->ConnectCallback(hpcd);
#else
      HAL_PCD_ConnectCallback(hpcd);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f004 fca6 	bl	8007d24 <HAL_PCD_ConnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      __HAL_PCD_CLEAR_FLAG(hpcd, USB_OTG_GINTSTS_SRQINT);
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	695a      	ldr	r2, [r3, #20]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 80033e6:	615a      	str	r2, [r3, #20]
    }

    /* Handle Disconnection event Interrupt */
    if (__HAL_PCD_GET_FLAG(hpcd, USB_OTG_GINTSTS_OTGINT))
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	4618      	mov	r0, r3
 80033ee:	f002 fbbd 	bl	8005b6c <USB_ReadInterrupts>
 80033f2:	4603      	mov	r3, r0
 80033f4:	f003 0304 	and.w	r3, r3, #4
 80033f8:	2b04      	cmp	r3, #4
 80033fa:	d115      	bne.n	8003428 <HAL_PCD_IRQHandler+0x938>
    {
      RegVal = hpcd->Instance->GOTGINT;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	61bb      	str	r3, [r7, #24]

      if ((RegVal & USB_OTG_GOTGINT_SEDET) == USB_OTG_GOTGINT_SEDET)
 8003404:	69bb      	ldr	r3, [r7, #24]
 8003406:	f003 0304 	and.w	r3, r3, #4
 800340a:	2b00      	cmp	r3, #0
 800340c:	d002      	beq.n	8003414 <HAL_PCD_IRQHandler+0x924>
      {
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DisconnectCallback(hpcd);
#else
        HAL_PCD_DisconnectCallback(hpcd);
 800340e:	6878      	ldr	r0, [r7, #4]
 8003410:	f004 fc96 	bl	8007d40 <HAL_PCD_DisconnectCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
      hpcd->Instance->GOTGINT |= RegVal;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	6859      	ldr	r1, [r3, #4]
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	430a      	orrs	r2, r1
 8003422:	605a      	str	r2, [r3, #4]
 8003424:	e000      	b.n	8003428 <HAL_PCD_IRQHandler+0x938>
      return;
 8003426:	bf00      	nop
    }
  }
}
 8003428:	3734      	adds	r7, #52	; 0x34
 800342a:	46bd      	mov	sp, r7
 800342c:	bd90      	pop	{r4, r7, pc}

0800342e <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800342e:	b580      	push	{r7, lr}
 8003430:	b082      	sub	sp, #8
 8003432:	af00      	add	r7, sp, #0
 8003434:	6078      	str	r0, [r7, #4]
 8003436:	460b      	mov	r3, r1
 8003438:	70fb      	strb	r3, [r7, #3]
  __HAL_LOCK(hpcd);
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003440:	2b01      	cmp	r3, #1
 8003442:	d101      	bne.n	8003448 <HAL_PCD_SetAddress+0x1a>
 8003444:	2302      	movs	r3, #2
 8003446:	e013      	b.n	8003470 <HAL_PCD_SetAddress+0x42>
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  hpcd->USB_Address = address;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	78fa      	ldrb	r2, [r7, #3]
 8003454:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  (void)USB_SetDevAddress(hpcd->Instance, address);
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	78fa      	ldrb	r2, [r7, #3]
 800345e:	4611      	mov	r1, r2
 8003460:	4618      	mov	r0, r3
 8003462:	f002 fb1b 	bl	8005a9c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2200      	movs	r2, #0
 800346a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 800346e:	2300      	movs	r3, #0
}
 8003470:	4618      	mov	r0, r3
 8003472:	3708      	adds	r7, #8
 8003474:	46bd      	mov	sp, r7
 8003476:	bd80      	pop	{r7, pc}

08003478 <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	b084      	sub	sp, #16
 800347c:	af00      	add	r7, sp, #0
 800347e:	6078      	str	r0, [r7, #4]
 8003480:	4608      	mov	r0, r1
 8003482:	4611      	mov	r1, r2
 8003484:	461a      	mov	r2, r3
 8003486:	4603      	mov	r3, r0
 8003488:	70fb      	strb	r3, [r7, #3]
 800348a:	460b      	mov	r3, r1
 800348c:	803b      	strh	r3, [r7, #0]
 800348e:	4613      	mov	r3, r2
 8003490:	70bb      	strb	r3, [r7, #2]
  HAL_StatusTypeDef  ret = HAL_OK;
 8003492:	2300      	movs	r3, #0
 8003494:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003496:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800349a:	2b00      	cmp	r3, #0
 800349c:	da0f      	bge.n	80034be <HAL_PCD_EP_Open+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800349e:	78fb      	ldrb	r3, [r7, #3]
 80034a0:	f003 020f 	and.w	r2, r3, #15
 80034a4:	4613      	mov	r3, r2
 80034a6:	00db      	lsls	r3, r3, #3
 80034a8:	4413      	add	r3, r2
 80034aa:	009b      	lsls	r3, r3, #2
 80034ac:	3338      	adds	r3, #56	; 0x38
 80034ae:	687a      	ldr	r2, [r7, #4]
 80034b0:	4413      	add	r3, r2
 80034b2:	3304      	adds	r3, #4
 80034b4:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	2201      	movs	r2, #1
 80034ba:	705a      	strb	r2, [r3, #1]
 80034bc:	e00f      	b.n	80034de <HAL_PCD_EP_Open+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80034be:	78fb      	ldrb	r3, [r7, #3]
 80034c0:	f003 020f 	and.w	r2, r3, #15
 80034c4:	4613      	mov	r3, r2
 80034c6:	00db      	lsls	r3, r3, #3
 80034c8:	4413      	add	r3, r2
 80034ca:	009b      	lsls	r3, r3, #2
 80034cc:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	4413      	add	r3, r2
 80034d4:	3304      	adds	r3, #4
 80034d6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80034d8:	68fb      	ldr	r3, [r7, #12]
 80034da:	2200      	movs	r2, #0
 80034dc:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 80034de:	78fb      	ldrb	r3, [r7, #3]
 80034e0:	f003 030f 	and.w	r3, r3, #15
 80034e4:	b2da      	uxtb	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 80034ea:	883a      	ldrh	r2, [r7, #0]
 80034ec:	68fb      	ldr	r3, [r7, #12]
 80034ee:	60da      	str	r2, [r3, #12]
  ep->type = ep_type;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	78ba      	ldrb	r2, [r7, #2]
 80034f4:	711a      	strb	r2, [r3, #4]

  if (ep->is_in != 0U)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	785b      	ldrb	r3, [r3, #1]
 80034fa:	2b00      	cmp	r3, #0
 80034fc:	d004      	beq.n	8003508 <HAL_PCD_EP_Open+0x90>
  {
    /* Assign a Tx FIFO */
    ep->tx_fifo_num = ep->num;
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	781b      	ldrb	r3, [r3, #0]
 8003502:	b29a      	uxth	r2, r3
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	811a      	strh	r2, [r3, #8]
  }
  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 8003508:	78bb      	ldrb	r3, [r7, #2]
 800350a:	2b02      	cmp	r3, #2
 800350c:	d102      	bne.n	8003514 <HAL_PCD_EP_Open+0x9c>
  {
    ep->data_pid_start = 0U;
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	2200      	movs	r2, #0
 8003512:	715a      	strb	r2, [r3, #5]
  }

  __HAL_LOCK(hpcd);
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800351a:	2b01      	cmp	r3, #1
 800351c:	d101      	bne.n	8003522 <HAL_PCD_EP_Open+0xaa>
 800351e:	2302      	movs	r3, #2
 8003520:	e00e      	b.n	8003540 <HAL_PCD_EP_Open+0xc8>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	2201      	movs	r2, #1
 8003526:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	68f9      	ldr	r1, [r7, #12]
 8003530:	4618      	mov	r0, r3
 8003532:	f001 fb9b 	bl	8004c6c <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	2200      	movs	r2, #0
 800353a:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return ret;
 800353e:	7afb      	ldrb	r3, [r7, #11]
}
 8003540:	4618      	mov	r0, r3
 8003542:	3710      	adds	r7, #16
 8003544:	46bd      	mov	sp, r7
 8003546:	bd80      	pop	{r7, pc}

08003548 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003548:	b580      	push	{r7, lr}
 800354a:	b084      	sub	sp, #16
 800354c:	af00      	add	r7, sp, #0
 800354e:	6078      	str	r0, [r7, #4]
 8003550:	460b      	mov	r3, r1
 8003552:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 8003554:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003558:	2b00      	cmp	r3, #0
 800355a:	da0f      	bge.n	800357c <HAL_PCD_EP_Close+0x34>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800355c:	78fb      	ldrb	r3, [r7, #3]
 800355e:	f003 020f 	and.w	r2, r3, #15
 8003562:	4613      	mov	r3, r2
 8003564:	00db      	lsls	r3, r3, #3
 8003566:	4413      	add	r3, r2
 8003568:	009b      	lsls	r3, r3, #2
 800356a:	3338      	adds	r3, #56	; 0x38
 800356c:	687a      	ldr	r2, [r7, #4]
 800356e:	4413      	add	r3, r2
 8003570:	3304      	adds	r3, #4
 8003572:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	2201      	movs	r2, #1
 8003578:	705a      	strb	r2, [r3, #1]
 800357a:	e00f      	b.n	800359c <HAL_PCD_EP_Close+0x54>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800357c:	78fb      	ldrb	r3, [r7, #3]
 800357e:	f003 020f 	and.w	r2, r3, #15
 8003582:	4613      	mov	r3, r2
 8003584:	00db      	lsls	r3, r3, #3
 8003586:	4413      	add	r3, r2
 8003588:	009b      	lsls	r3, r3, #2
 800358a:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800358e:	687a      	ldr	r2, [r7, #4]
 8003590:	4413      	add	r3, r2
 8003592:	3304      	adds	r3, #4
 8003594:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2200      	movs	r2, #0
 800359a:	705a      	strb	r2, [r3, #1]
  }
  ep->num   = ep_addr & EP_ADDR_MSK;
 800359c:	78fb      	ldrb	r3, [r7, #3]
 800359e:	f003 030f 	and.w	r3, r3, #15
 80035a2:	b2da      	uxtb	r2, r3
 80035a4:	68fb      	ldr	r3, [r7, #12]
 80035a6:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 80035ae:	2b01      	cmp	r3, #1
 80035b0:	d101      	bne.n	80035b6 <HAL_PCD_EP_Close+0x6e>
 80035b2:	2302      	movs	r3, #2
 80035b4:	e00e      	b.n	80035d4 <HAL_PCD_EP_Close+0x8c>
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	2201      	movs	r2, #1
 80035ba:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	68f9      	ldr	r1, [r7, #12]
 80035c4:	4618      	mov	r0, r3
 80035c6:	f001 fbd9 	bl	8004d7c <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	2200      	movs	r2, #0
 80035ce:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  return HAL_OK;
 80035d2:	2300      	movs	r3, #0
}
 80035d4:	4618      	mov	r0, r3
 80035d6:	3710      	adds	r7, #16
 80035d8:	46bd      	mov	sp, r7
 80035da:	bd80      	pop	{r7, pc}

080035dc <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80035dc:	b580      	push	{r7, lr}
 80035de:	b086      	sub	sp, #24
 80035e0:	af00      	add	r7, sp, #0
 80035e2:	60f8      	str	r0, [r7, #12]
 80035e4:	607a      	str	r2, [r7, #4]
 80035e6:	603b      	str	r3, [r7, #0]
 80035e8:	460b      	mov	r3, r1
 80035ea:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80035ec:	7afb      	ldrb	r3, [r7, #11]
 80035ee:	f003 020f 	and.w	r2, r3, #15
 80035f2:	4613      	mov	r3, r2
 80035f4:	00db      	lsls	r3, r3, #3
 80035f6:	4413      	add	r3, r2
 80035f8:	009b      	lsls	r3, r3, #2
 80035fa:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80035fe:	68fa      	ldr	r2, [r7, #12]
 8003600:	4413      	add	r3, r2
 8003602:	3304      	adds	r3, #4
 8003604:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8003606:	697b      	ldr	r3, [r7, #20]
 8003608:	687a      	ldr	r2, [r7, #4]
 800360a:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 800360c:	697b      	ldr	r3, [r7, #20]
 800360e:	683a      	ldr	r2, [r7, #0]
 8003610:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8003612:	697b      	ldr	r3, [r7, #20]
 8003614:	2200      	movs	r2, #0
 8003616:	621a      	str	r2, [r3, #32]
  ep->is_in = 0U;
 8003618:	697b      	ldr	r3, [r7, #20]
 800361a:	2200      	movs	r2, #0
 800361c:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 800361e:	7afb      	ldrb	r3, [r7, #11]
 8003620:	f003 030f 	and.w	r3, r3, #15
 8003624:	b2da      	uxtb	r2, r3
 8003626:	697b      	ldr	r3, [r7, #20]
 8003628:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	691b      	ldr	r3, [r3, #16]
 800362e:	2b01      	cmp	r3, #1
 8003630:	d102      	bne.n	8003638 <HAL_PCD_EP_Receive+0x5c>
  {
    ep->dma_addr = (uint32_t)pBuf;
 8003632:	687a      	ldr	r2, [r7, #4]
 8003634:	697b      	ldr	r3, [r7, #20]
 8003636:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 8003638:	7afb      	ldrb	r3, [r7, #11]
 800363a:	f003 030f 	and.w	r3, r3, #15
 800363e:	2b00      	cmp	r3, #0
 8003640:	d109      	bne.n	8003656 <HAL_PCD_EP_Receive+0x7a>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6818      	ldr	r0, [r3, #0]
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	691b      	ldr	r3, [r3, #16]
 800364a:	b2db      	uxtb	r3, r3
 800364c:	461a      	mov	r2, r3
 800364e:	6979      	ldr	r1, [r7, #20]
 8003650:	f001 feb8 	bl	80053c4 <USB_EP0StartXfer>
 8003654:	e008      	b.n	8003668 <HAL_PCD_EP_Receive+0x8c>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 8003656:	68fb      	ldr	r3, [r7, #12]
 8003658:	6818      	ldr	r0, [r3, #0]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	691b      	ldr	r3, [r3, #16]
 800365e:	b2db      	uxtb	r3, r3
 8003660:	461a      	mov	r2, r3
 8003662:	6979      	ldr	r1, [r7, #20]
 8003664:	f001 fc66 	bl	8004f34 <USB_EPStartXfer>
  }

  return HAL_OK;
 8003668:	2300      	movs	r3, #0
}
 800366a:	4618      	mov	r0, r3
 800366c:	3718      	adds	r7, #24
 800366e:	46bd      	mov	sp, r7
 8003670:	bd80      	pop	{r7, pc}

08003672 <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 8003672:	b580      	push	{r7, lr}
 8003674:	b086      	sub	sp, #24
 8003676:	af00      	add	r7, sp, #0
 8003678:	60f8      	str	r0, [r7, #12]
 800367a:	607a      	str	r2, [r7, #4]
 800367c:	603b      	str	r3, [r7, #0]
 800367e:	460b      	mov	r3, r1
 8003680:	72fb      	strb	r3, [r7, #11]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8003682:	7afb      	ldrb	r3, [r7, #11]
 8003684:	f003 020f 	and.w	r2, r3, #15
 8003688:	4613      	mov	r3, r2
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	4413      	add	r3, r2
 800368e:	009b      	lsls	r3, r3, #2
 8003690:	3338      	adds	r3, #56	; 0x38
 8003692:	68fa      	ldr	r2, [r7, #12]
 8003694:	4413      	add	r3, r2
 8003696:	3304      	adds	r3, #4
 8003698:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 800369a:	697b      	ldr	r3, [r7, #20]
 800369c:	687a      	ldr	r2, [r7, #4]
 800369e:	611a      	str	r2, [r3, #16]
  ep->xfer_len = len;
 80036a0:	697b      	ldr	r3, [r7, #20]
 80036a2:	683a      	ldr	r2, [r7, #0]
 80036a4:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 80036a6:	697b      	ldr	r3, [r7, #20]
 80036a8:	2200      	movs	r2, #0
 80036aa:	621a      	str	r2, [r3, #32]
  ep->is_in = 1U;
 80036ac:	697b      	ldr	r3, [r7, #20]
 80036ae:	2201      	movs	r2, #1
 80036b0:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 80036b2:	7afb      	ldrb	r3, [r7, #11]
 80036b4:	f003 030f 	and.w	r3, r3, #15
 80036b8:	b2da      	uxtb	r2, r3
 80036ba:	697b      	ldr	r3, [r7, #20]
 80036bc:	701a      	strb	r2, [r3, #0]

  if (hpcd->Init.dma_enable == 1U)
 80036be:	68fb      	ldr	r3, [r7, #12]
 80036c0:	691b      	ldr	r3, [r3, #16]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d102      	bne.n	80036cc <HAL_PCD_EP_Transmit+0x5a>
  {
    ep->dma_addr = (uint32_t)pBuf;
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	697b      	ldr	r3, [r7, #20]
 80036ca:	615a      	str	r2, [r3, #20]
  }

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 80036cc:	7afb      	ldrb	r3, [r7, #11]
 80036ce:	f003 030f 	and.w	r3, r3, #15
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d109      	bne.n	80036ea <HAL_PCD_EP_Transmit+0x78>
  {
    (void)USB_EP0StartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	6818      	ldr	r0, [r3, #0]
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	691b      	ldr	r3, [r3, #16]
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	461a      	mov	r2, r3
 80036e2:	6979      	ldr	r1, [r7, #20]
 80036e4:	f001 fe6e 	bl	80053c4 <USB_EP0StartXfer>
 80036e8:	e008      	b.n	80036fc <HAL_PCD_EP_Transmit+0x8a>
  }
  else
  {
    (void)USB_EPStartXfer(hpcd->Instance, ep, (uint8_t)hpcd->Init.dma_enable);
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	6818      	ldr	r0, [r3, #0]
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	691b      	ldr	r3, [r3, #16]
 80036f2:	b2db      	uxtb	r3, r3
 80036f4:	461a      	mov	r2, r3
 80036f6:	6979      	ldr	r1, [r7, #20]
 80036f8:	f001 fc1c 	bl	8004f34 <USB_EPStartXfer>
  }

  return HAL_OK;
 80036fc:	2300      	movs	r3, #0
}
 80036fe:	4618      	mov	r0, r3
 8003700:	3718      	adds	r7, #24
 8003702:	46bd      	mov	sp, r7
 8003704:	bd80      	pop	{r7, pc}

08003706 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8003706:	b580      	push	{r7, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
 800370c:	6078      	str	r0, [r7, #4]
 800370e:	460b      	mov	r3, r1
 8003710:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8003712:	78fb      	ldrb	r3, [r7, #3]
 8003714:	f003 020f 	and.w	r2, r3, #15
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	429a      	cmp	r2, r3
 800371e:	d901      	bls.n	8003724 <HAL_PCD_EP_SetStall+0x1e>
  {
    return HAL_ERROR;
 8003720:	2301      	movs	r3, #1
 8003722:	e050      	b.n	80037c6 <HAL_PCD_EP_SetStall+0xc0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8003724:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8003728:	2b00      	cmp	r3, #0
 800372a:	da0f      	bge.n	800374c <HAL_PCD_EP_SetStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800372c:	78fb      	ldrb	r3, [r7, #3]
 800372e:	f003 020f 	and.w	r2, r3, #15
 8003732:	4613      	mov	r3, r2
 8003734:	00db      	lsls	r3, r3, #3
 8003736:	4413      	add	r3, r2
 8003738:	009b      	lsls	r3, r3, #2
 800373a:	3338      	adds	r3, #56	; 0x38
 800373c:	687a      	ldr	r2, [r7, #4]
 800373e:	4413      	add	r3, r2
 8003740:	3304      	adds	r3, #4
 8003742:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2201      	movs	r2, #1
 8003748:	705a      	strb	r2, [r3, #1]
 800374a:	e00d      	b.n	8003768 <HAL_PCD_EP_SetStall+0x62>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 800374c:	78fa      	ldrb	r2, [r7, #3]
 800374e:	4613      	mov	r3, r2
 8003750:	00db      	lsls	r3, r3, #3
 8003752:	4413      	add	r3, r2
 8003754:	009b      	lsls	r3, r3, #2
 8003756:	f503 731e 	add.w	r3, r3, #632	; 0x278
 800375a:	687a      	ldr	r2, [r7, #4]
 800375c:	4413      	add	r3, r2
 800375e:	3304      	adds	r3, #4
 8003760:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8003762:	68fb      	ldr	r3, [r7, #12]
 8003764:	2200      	movs	r2, #0
 8003766:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	2201      	movs	r2, #1
 800376c:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800376e:	78fb      	ldrb	r3, [r7, #3]
 8003770:	f003 030f 	and.w	r3, r3, #15
 8003774:	b2da      	uxtb	r2, r3
 8003776:	68fb      	ldr	r3, [r7, #12]
 8003778:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 8003780:	2b01      	cmp	r3, #1
 8003782:	d101      	bne.n	8003788 <HAL_PCD_EP_SetStall+0x82>
 8003784:	2302      	movs	r3, #2
 8003786:	e01e      	b.n	80037c6 <HAL_PCD_EP_SetStall+0xc0>
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	2201      	movs	r2, #1
 800378c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  (void)USB_EPSetStall(hpcd->Instance, ep);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68f9      	ldr	r1, [r7, #12]
 8003796:	4618      	mov	r0, r3
 8003798:	f002 f8ac 	bl	80058f4 <USB_EPSetStall>

  if ((ep_addr & EP_ADDR_MSK) == 0U)
 800379c:	78fb      	ldrb	r3, [r7, #3]
 800379e:	f003 030f 	and.w	r3, r3, #15
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d10a      	bne.n	80037bc <HAL_PCD_EP_SetStall+0xb6>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, (uint8_t)hpcd->Init.dma_enable, (uint8_t *)hpcd->Setup);
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	6818      	ldr	r0, [r3, #0]
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	691b      	ldr	r3, [r3, #16]
 80037ae:	b2d9      	uxtb	r1, r3
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 80037b6:	461a      	mov	r2, r3
 80037b8:	f002 fa9c 	bl	8005cf4 <USB_EP0_OutStart>
  }

  __HAL_UNLOCK(hpcd);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 80037c4:	2300      	movs	r3, #0
}
 80037c6:	4618      	mov	r0, r3
 80037c8:	3710      	adds	r7, #16
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}

080037ce <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80037ce:	b580      	push	{r7, lr}
 80037d0:	b084      	sub	sp, #16
 80037d2:	af00      	add	r7, sp, #0
 80037d4:	6078      	str	r0, [r7, #4]
 80037d6:	460b      	mov	r3, r1
 80037d8:	70fb      	strb	r3, [r7, #3]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 80037da:	78fb      	ldrb	r3, [r7, #3]
 80037dc:	f003 020f 	and.w	r2, r3, #15
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	685b      	ldr	r3, [r3, #4]
 80037e4:	429a      	cmp	r2, r3
 80037e6:	d901      	bls.n	80037ec <HAL_PCD_EP_ClrStall+0x1e>
  {
    return HAL_ERROR;
 80037e8:	2301      	movs	r3, #1
 80037ea:	e042      	b.n	8003872 <HAL_PCD_EP_ClrStall+0xa4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 80037ec:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	da0f      	bge.n	8003814 <HAL_PCD_EP_ClrStall+0x46>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80037f4:	78fb      	ldrb	r3, [r7, #3]
 80037f6:	f003 020f 	and.w	r2, r3, #15
 80037fa:	4613      	mov	r3, r2
 80037fc:	00db      	lsls	r3, r3, #3
 80037fe:	4413      	add	r3, r2
 8003800:	009b      	lsls	r3, r3, #2
 8003802:	3338      	adds	r3, #56	; 0x38
 8003804:	687a      	ldr	r2, [r7, #4]
 8003806:	4413      	add	r3, r2
 8003808:	3304      	adds	r3, #4
 800380a:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800380c:	68fb      	ldr	r3, [r7, #12]
 800380e:	2201      	movs	r2, #1
 8003810:	705a      	strb	r2, [r3, #1]
 8003812:	e00f      	b.n	8003834 <HAL_PCD_EP_ClrStall+0x66>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8003814:	78fb      	ldrb	r3, [r7, #3]
 8003816:	f003 020f 	and.w	r2, r3, #15
 800381a:	4613      	mov	r3, r2
 800381c:	00db      	lsls	r3, r3, #3
 800381e:	4413      	add	r3, r2
 8003820:	009b      	lsls	r3, r3, #2
 8003822:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003826:	687a      	ldr	r2, [r7, #4]
 8003828:	4413      	add	r3, r2
 800382a:	3304      	adds	r3, #4
 800382c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	2200      	movs	r2, #0
 8003832:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	2200      	movs	r2, #0
 8003838:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 800383a:	78fb      	ldrb	r3, [r7, #3]
 800383c:	f003 030f 	and.w	r3, r3, #15
 8003840:	b2da      	uxtb	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	f893 34bc 	ldrb.w	r3, [r3, #1212]	; 0x4bc
 800384c:	2b01      	cmp	r3, #1
 800384e:	d101      	bne.n	8003854 <HAL_PCD_EP_ClrStall+0x86>
 8003850:	2302      	movs	r3, #2
 8003852:	e00e      	b.n	8003872 <HAL_PCD_EP_ClrStall+0xa4>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	2201      	movs	r2, #1
 8003858:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc
  (void)USB_EPClearStall(hpcd->Instance, ep);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	68f9      	ldr	r1, [r7, #12]
 8003862:	4618      	mov	r0, r3
 8003864:	f002 f8b4 	bl	80059d0 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2200      	movs	r2, #0
 800386c:	f883 24bc 	strb.w	r2, [r3, #1212]	; 0x4bc

  return HAL_OK;
 8003870:	2300      	movs	r3, #0
}
 8003872:	4618      	mov	r0, r3
 8003874:	3710      	adds	r7, #16
 8003876:	46bd      	mov	sp, r7
 8003878:	bd80      	pop	{r7, pc}

0800387a <HAL_PCD_EP_Abort>:
   * @param  hpcd PCD handle
   * @param  ep_addr endpoint address
   * @retval HAL status
   */
HAL_StatusTypeDef HAL_PCD_EP_Abort(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800387a:	b580      	push	{r7, lr}
 800387c:	b084      	sub	sp, #16
 800387e:	af00      	add	r7, sp, #0
 8003880:	6078      	str	r0, [r7, #4]
 8003882:	460b      	mov	r3, r1
 8003884:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef ret;
  PCD_EPTypeDef *ep;

  if ((0x80U & ep_addr) == 0x80U)
 8003886:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800388a:	2b00      	cmp	r3, #0
 800388c:	da0c      	bge.n	80038a8 <HAL_PCD_EP_Abort+0x2e>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	f003 020f 	and.w	r2, r3, #15
 8003894:	4613      	mov	r3, r2
 8003896:	00db      	lsls	r3, r3, #3
 8003898:	4413      	add	r3, r2
 800389a:	009b      	lsls	r3, r3, #2
 800389c:	3338      	adds	r3, #56	; 0x38
 800389e:	687a      	ldr	r2, [r7, #4]
 80038a0:	4413      	add	r3, r2
 80038a2:	3304      	adds	r3, #4
 80038a4:	60fb      	str	r3, [r7, #12]
 80038a6:	e00c      	b.n	80038c2 <HAL_PCD_EP_Abort+0x48>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 80038a8:	78fb      	ldrb	r3, [r7, #3]
 80038aa:	f003 020f 	and.w	r2, r3, #15
 80038ae:	4613      	mov	r3, r2
 80038b0:	00db      	lsls	r3, r3, #3
 80038b2:	4413      	add	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	f503 731e 	add.w	r3, r3, #632	; 0x278
 80038ba:	687a      	ldr	r2, [r7, #4]
 80038bc:	4413      	add	r3, r2
 80038be:	3304      	adds	r3, #4
 80038c0:	60fb      	str	r3, [r7, #12]
  }

  /* Stop Xfer */
  ret = USB_EPStopXfer(hpcd->Instance, ep);
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	68f9      	ldr	r1, [r7, #12]
 80038c8:	4618      	mov	r0, r3
 80038ca:	f001 fed3 	bl	8005674 <USB_EPStopXfer>
 80038ce:	4603      	mov	r3, r0
 80038d0:	72fb      	strb	r3, [r7, #11]

  return ret;
 80038d2:	7afb      	ldrb	r3, [r7, #11]
}
 80038d4:	4618      	mov	r0, r3
 80038d6:	3710      	adds	r7, #16
 80038d8:	46bd      	mov	sp, r7
 80038da:	bd80      	pop	{r7, pc}

080038dc <PCD_WriteEmptyTxFifo>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_WriteEmptyTxFifo(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80038dc:	b580      	push	{r7, lr}
 80038de:	b08a      	sub	sp, #40	; 0x28
 80038e0:	af02      	add	r7, sp, #8
 80038e2:	6078      	str	r0, [r7, #4]
 80038e4:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038ec:	697b      	ldr	r3, [r7, #20]
 80038ee:	613b      	str	r3, [r7, #16]
  USB_OTG_EPTypeDef *ep;
  uint32_t len;
  uint32_t len32b;
  uint32_t fifoemptymsk;

  ep = &hpcd->IN_ep[epnum];
 80038f0:	683a      	ldr	r2, [r7, #0]
 80038f2:	4613      	mov	r3, r2
 80038f4:	00db      	lsls	r3, r3, #3
 80038f6:	4413      	add	r3, r2
 80038f8:	009b      	lsls	r3, r3, #2
 80038fa:	3338      	adds	r3, #56	; 0x38
 80038fc:	687a      	ldr	r2, [r7, #4]
 80038fe:	4413      	add	r3, r2
 8003900:	3304      	adds	r3, #4
 8003902:	60fb      	str	r3, [r7, #12]

  if (ep->xfer_count > ep->xfer_len)
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6a1a      	ldr	r2, [r3, #32]
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	699b      	ldr	r3, [r3, #24]
 800390c:	429a      	cmp	r2, r3
 800390e:	d901      	bls.n	8003914 <PCD_WriteEmptyTxFifo+0x38>
  {
    return HAL_ERROR;
 8003910:	2301      	movs	r3, #1
 8003912:	e06c      	b.n	80039ee <PCD_WriteEmptyTxFifo+0x112>
  }

  len = ep->xfer_len - ep->xfer_count;
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	699a      	ldr	r2, [r3, #24]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	6a1b      	ldr	r3, [r3, #32]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	61fb      	str	r3, [r7, #28]

  if (len > ep->maxpacket)
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	68db      	ldr	r3, [r3, #12]
 8003924:	69fa      	ldr	r2, [r7, #28]
 8003926:	429a      	cmp	r2, r3
 8003928:	d902      	bls.n	8003930 <PCD_WriteEmptyTxFifo+0x54>
  {
    len = ep->maxpacket;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	68db      	ldr	r3, [r3, #12]
 800392e:	61fb      	str	r3, [r7, #28]
  }

  len32b = (len + 3U) / 4U;
 8003930:	69fb      	ldr	r3, [r7, #28]
 8003932:	3303      	adds	r3, #3
 8003934:	089b      	lsrs	r3, r3, #2
 8003936:	61bb      	str	r3, [r7, #24]

  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003938:	e02b      	b.n	8003992 <PCD_WriteEmptyTxFifo+0xb6>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
  {
    /* Write the FIFO */
    len = ep->xfer_len - ep->xfer_count;
 800393a:	68fb      	ldr	r3, [r7, #12]
 800393c:	699a      	ldr	r2, [r3, #24]
 800393e:	68fb      	ldr	r3, [r7, #12]
 8003940:	6a1b      	ldr	r3, [r3, #32]
 8003942:	1ad3      	subs	r3, r2, r3
 8003944:	61fb      	str	r3, [r7, #28]

    if (len > ep->maxpacket)
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	68db      	ldr	r3, [r3, #12]
 800394a:	69fa      	ldr	r2, [r7, #28]
 800394c:	429a      	cmp	r2, r3
 800394e:	d902      	bls.n	8003956 <PCD_WriteEmptyTxFifo+0x7a>
    {
      len = ep->maxpacket;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	68db      	ldr	r3, [r3, #12]
 8003954:	61fb      	str	r3, [r7, #28]
    }
    len32b = (len + 3U) / 4U;
 8003956:	69fb      	ldr	r3, [r7, #28]
 8003958:	3303      	adds	r3, #3
 800395a:	089b      	lsrs	r3, r3, #2
 800395c:	61bb      	str	r3, [r7, #24]

    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	6919      	ldr	r1, [r3, #16]
 8003962:	683b      	ldr	r3, [r7, #0]
 8003964:	b2da      	uxtb	r2, r3
 8003966:	69fb      	ldr	r3, [r7, #28]
 8003968:	b298      	uxth	r0, r3
                          (uint8_t)hpcd->Init.dma_enable);
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	691b      	ldr	r3, [r3, #16]
    (void)USB_WritePacket(USBx, ep->xfer_buff, (uint8_t)epnum, (uint16_t)len,
 800396e:	b2db      	uxtb	r3, r3
 8003970:	9300      	str	r3, [sp, #0]
 8003972:	4603      	mov	r3, r0
 8003974:	6978      	ldr	r0, [r7, #20]
 8003976:	f001 ff27 	bl	80057c8 <USB_WritePacket>

    ep->xfer_buff  += len;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	691a      	ldr	r2, [r3, #16]
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	441a      	add	r2, r3
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	611a      	str	r2, [r3, #16]
    ep->xfer_count += len;
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	6a1a      	ldr	r2, [r3, #32]
 800398a:	69fb      	ldr	r3, [r7, #28]
 800398c:	441a      	add	r2, r3
 800398e:	68fb      	ldr	r3, [r7, #12]
 8003990:	621a      	str	r2, [r3, #32]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	015a      	lsls	r2, r3, #5
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	4413      	add	r3, r2
 800399a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800399e:	699b      	ldr	r3, [r3, #24]
 80039a0:	b29b      	uxth	r3, r3
 80039a2:	69ba      	ldr	r2, [r7, #24]
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d809      	bhi.n	80039bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	6a1a      	ldr	r2, [r3, #32]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	699b      	ldr	r3, [r3, #24]
  while (((USBx_INEP(epnum)->DTXFSTS & USB_OTG_DTXFSTS_INEPTFSAV) >= len32b) &&
 80039b0:	429a      	cmp	r2, r3
 80039b2:	d203      	bcs.n	80039bc <PCD_WriteEmptyTxFifo+0xe0>
         (ep->xfer_count < ep->xfer_len) && (ep->xfer_len != 0U))
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	699b      	ldr	r3, [r3, #24]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1be      	bne.n	800393a <PCD_WriteEmptyTxFifo+0x5e>
  }

  if (ep->xfer_len <= ep->xfer_count)
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	699a      	ldr	r2, [r3, #24]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	6a1b      	ldr	r3, [r3, #32]
 80039c4:	429a      	cmp	r2, r3
 80039c6:	d811      	bhi.n	80039ec <PCD_WriteEmptyTxFifo+0x110>
  {
    fifoemptymsk = (uint32_t)(0x1UL << (epnum & EP_ADDR_MSK));
 80039c8:	683b      	ldr	r3, [r7, #0]
 80039ca:	f003 030f 	and.w	r3, r3, #15
 80039ce:	2201      	movs	r2, #1
 80039d0:	fa02 f303 	lsl.w	r3, r2, r3
 80039d4:	60bb      	str	r3, [r7, #8]
    USBx_DEVICE->DIEPEMPMSK &= ~fifoemptymsk;
 80039d6:	693b      	ldr	r3, [r7, #16]
 80039d8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	43db      	mvns	r3, r3
 80039e2:	6939      	ldr	r1, [r7, #16]
 80039e4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 80039e8:	4013      	ands	r3, r2
 80039ea:	634b      	str	r3, [r1, #52]	; 0x34
  }

  return HAL_OK;
 80039ec:	2300      	movs	r3, #0
}
 80039ee:	4618      	mov	r0, r3
 80039f0:	3720      	adds	r7, #32
 80039f2:	46bd      	mov	sp, r7
 80039f4:	bd80      	pop	{r7, pc}
	...

080039f8 <PCD_EP_OutXfrComplete_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutXfrComplete_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 80039f8:	b580      	push	{r7, lr}
 80039fa:	b088      	sub	sp, #32
 80039fc:	af00      	add	r7, sp, #0
 80039fe:	6078      	str	r0, [r7, #4]
 8003a00:	6039      	str	r1, [r7, #0]
  USB_OTG_EPTypeDef *ep;
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003a08:	69fb      	ldr	r3, [r7, #28]
 8003a0a:	61bb      	str	r3, [r7, #24]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003a0c:	69fb      	ldr	r3, [r7, #28]
 8003a0e:	333c      	adds	r3, #60	; 0x3c
 8003a10:	3304      	adds	r3, #4
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	617b      	str	r3, [r7, #20]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003a16:	683b      	ldr	r3, [r7, #0]
 8003a18:	015a      	lsls	r2, r3, #5
 8003a1a:	69bb      	ldr	r3, [r7, #24]
 8003a1c:	4413      	add	r3, r2
 8003a1e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a22:	689b      	ldr	r3, [r3, #8]
 8003a24:	613b      	str	r3, [r7, #16]

  if (hpcd->Init.dma_enable == 1U)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	691b      	ldr	r3, [r3, #16]
 8003a2a:	2b01      	cmp	r3, #1
 8003a2c:	d17b      	bne.n	8003b26 <PCD_EP_OutXfrComplete_int+0x12e>
  {
    if ((DoepintReg & USB_OTG_DOEPINT_STUP) == USB_OTG_DOEPINT_STUP) /* Class C */
 8003a2e:	693b      	ldr	r3, [r7, #16]
 8003a30:	f003 0308 	and.w	r3, r3, #8
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d015      	beq.n	8003a64 <PCD_EP_OutXfrComplete_int+0x6c>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a38:	697b      	ldr	r3, [r7, #20]
 8003a3a:	4a61      	ldr	r2, [pc, #388]	; (8003bc0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a3c:	4293      	cmp	r3, r2
 8003a3e:	f240 80b9 	bls.w	8003bb4 <PCD_EP_OutXfrComplete_int+0x1bc>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a42:	693b      	ldr	r3, [r7, #16]
 8003a44:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a48:	2b00      	cmp	r3, #0
 8003a4a:	f000 80b3 	beq.w	8003bb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003a4e:	683b      	ldr	r3, [r7, #0]
 8003a50:	015a      	lsls	r2, r3, #5
 8003a52:	69bb      	ldr	r3, [r7, #24]
 8003a54:	4413      	add	r3, r2
 8003a56:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a5a:	461a      	mov	r2, r3
 8003a5c:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a60:	6093      	str	r3, [r2, #8]
 8003a62:	e0a7      	b.n	8003bb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
    }
    else if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR) /* Class E */
 8003a64:	693b      	ldr	r3, [r7, #16]
 8003a66:	f003 0320 	and.w	r3, r3, #32
 8003a6a:	2b00      	cmp	r3, #0
 8003a6c:	d009      	beq.n	8003a82 <PCD_EP_OutXfrComplete_int+0x8a>
    {
      CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003a6e:	683b      	ldr	r3, [r7, #0]
 8003a70:	015a      	lsls	r2, r3, #5
 8003a72:	69bb      	ldr	r3, [r7, #24]
 8003a74:	4413      	add	r3, r2
 8003a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003a7a:	461a      	mov	r2, r3
 8003a7c:	2320      	movs	r3, #32
 8003a7e:	6093      	str	r3, [r2, #8]
 8003a80:	e098      	b.n	8003bb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    }
    else if ((DoepintReg & (USB_OTG_DOEPINT_STUP | USB_OTG_DOEPINT_OTEPSPR)) == 0U)
 8003a82:	693b      	ldr	r3, [r7, #16]
 8003a84:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	f040 8093 	bne.w	8003bb4 <PCD_EP_OutXfrComplete_int+0x1bc>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	4a4b      	ldr	r2, [pc, #300]	; (8003bc0 <PCD_EP_OutXfrComplete_int+0x1c8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d90f      	bls.n	8003ab6 <PCD_EP_OutXfrComplete_int+0xbe>
          ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003a96:	693b      	ldr	r3, [r7, #16]
 8003a98:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
      if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d00a      	beq.n	8003ab6 <PCD_EP_OutXfrComplete_int+0xbe>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003aa0:	683b      	ldr	r3, [r7, #0]
 8003aa2:	015a      	lsls	r2, r3, #5
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	4413      	add	r3, r2
 8003aa8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aac:	461a      	mov	r2, r3
 8003aae:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003ab2:	6093      	str	r3, [r2, #8]
 8003ab4:	e07e      	b.n	8003bb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        ep = &hpcd->OUT_ep[epnum];
 8003ab6:	683a      	ldr	r2, [r7, #0]
 8003ab8:	4613      	mov	r3, r2
 8003aba:	00db      	lsls	r3, r3, #3
 8003abc:	4413      	add	r3, r2
 8003abe:	009b      	lsls	r3, r3, #2
 8003ac0:	f503 731e 	add.w	r3, r3, #632	; 0x278
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	4413      	add	r3, r2
 8003ac8:	3304      	adds	r3, #4
 8003aca:	60fb      	str	r3, [r7, #12]

        /* out data packet received over EP */
        ep->xfer_count = ep->xfer_size - (USBx_OUTEP(epnum)->DOEPTSIZ & USB_OTG_DOEPTSIZ_XFRSIZ);
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	69da      	ldr	r2, [r3, #28]
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	0159      	lsls	r1, r3, #5
 8003ad4:	69bb      	ldr	r3, [r7, #24]
 8003ad6:	440b      	add	r3, r1
 8003ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003adc:	691b      	ldr	r3, [r3, #16]
 8003ade:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003ae2:	1ad2      	subs	r2, r2, r3
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	621a      	str	r2, [r3, #32]

        if (epnum == 0U)
 8003ae8:	683b      	ldr	r3, [r7, #0]
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d114      	bne.n	8003b18 <PCD_EP_OutXfrComplete_int+0x120>
        {
          if (ep->xfer_len == 0U)
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	699b      	ldr	r3, [r3, #24]
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d109      	bne.n	8003b0a <PCD_EP_OutXfrComplete_int+0x112>
          {
            /* this is ZLP, so prepare EP0 for next setup */
            (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6818      	ldr	r0, [r3, #0]
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003b00:	461a      	mov	r2, r3
 8003b02:	2101      	movs	r1, #1
 8003b04:	f002 f8f6 	bl	8005cf4 <USB_EP0_OutStart>
 8003b08:	e006      	b.n	8003b18 <PCD_EP_OutXfrComplete_int+0x120>
          }
          else
          {
            ep->xfer_buff += ep->xfer_count;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	691a      	ldr	r2, [r3, #16]
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6a1b      	ldr	r3, [r3, #32]
 8003b12:	441a      	add	r2, r3
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	611a      	str	r2, [r3, #16]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b18:	683b      	ldr	r3, [r7, #0]
 8003b1a:	b2db      	uxtb	r3, r3
 8003b1c:	4619      	mov	r1, r3
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f004 f846 	bl	8007bb0 <HAL_PCD_DataOutStageCallback>
 8003b24:	e046      	b.n	8003bb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      /* ... */
    }
  }
  else
  {
    if (gSNPSiD == USB_OTG_CORE_ID_310A)
 8003b26:	697b      	ldr	r3, [r7, #20]
 8003b28:	4a26      	ldr	r2, [pc, #152]	; (8003bc4 <PCD_EP_OutXfrComplete_int+0x1cc>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d124      	bne.n	8003b78 <PCD_EP_OutXfrComplete_int+0x180>
    {
      /* StupPktRcvd = 1 this is a setup packet */
      if ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX)
 8003b2e:	693b      	ldr	r3, [r7, #16]
 8003b30:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d00a      	beq.n	8003b4e <PCD_EP_OutXfrComplete_int+0x156>
      {
        CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003b38:	683b      	ldr	r3, [r7, #0]
 8003b3a:	015a      	lsls	r2, r3, #5
 8003b3c:	69bb      	ldr	r3, [r7, #24]
 8003b3e:	4413      	add	r3, r2
 8003b40:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b44:	461a      	mov	r2, r3
 8003b46:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003b4a:	6093      	str	r3, [r2, #8]
 8003b4c:	e032      	b.n	8003bb4 <PCD_EP_OutXfrComplete_int+0x1bc>
      }
      else
      {
        if ((DoepintReg & USB_OTG_DOEPINT_OTEPSPR) == USB_OTG_DOEPINT_OTEPSPR)
 8003b4e:	693b      	ldr	r3, [r7, #16]
 8003b50:	f003 0320 	and.w	r3, r3, #32
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d008      	beq.n	8003b6a <PCD_EP_OutXfrComplete_int+0x172>
        {
          CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_OTEPSPR);
 8003b58:	683b      	ldr	r3, [r7, #0]
 8003b5a:	015a      	lsls	r2, r3, #5
 8003b5c:	69bb      	ldr	r3, [r7, #24]
 8003b5e:	4413      	add	r3, r2
 8003b60:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b64:	461a      	mov	r2, r3
 8003b66:	2320      	movs	r3, #32
 8003b68:	6093      	str	r3, [r2, #8]
        }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
        HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	b2db      	uxtb	r3, r3
 8003b6e:	4619      	mov	r1, r3
 8003b70:	6878      	ldr	r0, [r7, #4]
 8003b72:	f004 f81d 	bl	8007bb0 <HAL_PCD_DataOutStageCallback>
 8003b76:	e01d      	b.n	8003bb4 <PCD_EP_OutXfrComplete_int+0x1bc>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
      }
    }
    else
    {
      if ((epnum == 0U) && (hpcd->OUT_ep[epnum].xfer_len == 0U))
 8003b78:	683b      	ldr	r3, [r7, #0]
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d114      	bne.n	8003ba8 <PCD_EP_OutXfrComplete_int+0x1b0>
 8003b7e:	6879      	ldr	r1, [r7, #4]
 8003b80:	683a      	ldr	r2, [r7, #0]
 8003b82:	4613      	mov	r3, r2
 8003b84:	00db      	lsls	r3, r3, #3
 8003b86:	4413      	add	r3, r2
 8003b88:	009b      	lsls	r3, r3, #2
 8003b8a:	440b      	add	r3, r1
 8003b8c:	f503 7325 	add.w	r3, r3, #660	; 0x294
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d108      	bne.n	8003ba8 <PCD_EP_OutXfrComplete_int+0x1b0>
      {
        /* this is ZLP, so prepare EP0 for next setup */
        (void)USB_EP0_OutStart(hpcd->Instance, 0U, (uint8_t *)hpcd->Setup);
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	6818      	ldr	r0, [r3, #0]
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003ba0:	461a      	mov	r2, r3
 8003ba2:	2100      	movs	r1, #0
 8003ba4:	f002 f8a6 	bl	8005cf4 <USB_EP0_OutStart>
      }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataOutStageCallback(hpcd, (uint8_t)epnum);
#else
      HAL_PCD_DataOutStageCallback(hpcd, (uint8_t)epnum);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	b2db      	uxtb	r3, r3
 8003bac:	4619      	mov	r1, r3
 8003bae:	6878      	ldr	r0, [r7, #4]
 8003bb0:	f003 fffe 	bl	8007bb0 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }
  }

  return HAL_OK;
 8003bb4:	2300      	movs	r3, #0
}
 8003bb6:	4618      	mov	r0, r3
 8003bb8:	3720      	adds	r7, #32
 8003bba:	46bd      	mov	sp, r7
 8003bbc:	bd80      	pop	{r7, pc}
 8003bbe:	bf00      	nop
 8003bc0:	4f54300a 	.word	0x4f54300a
 8003bc4:	4f54310a 	.word	0x4f54310a

08003bc8 <PCD_EP_OutSetupPacket_int>:
  * @param  hpcd PCD handle
  * @param  epnum endpoint number
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_OutSetupPacket_int(PCD_HandleTypeDef *hpcd, uint32_t epnum)
{
 8003bc8:	b580      	push	{r7, lr}
 8003bca:	b086      	sub	sp, #24
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
 8003bd0:	6039      	str	r1, [r7, #0]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003bd8:	697b      	ldr	r3, [r7, #20]
 8003bda:	613b      	str	r3, [r7, #16]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8003bdc:	697b      	ldr	r3, [r7, #20]
 8003bde:	333c      	adds	r3, #60	; 0x3c
 8003be0:	3304      	adds	r3, #4
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	60fb      	str	r3, [r7, #12]
  uint32_t DoepintReg = USBx_OUTEP(epnum)->DOEPINT;
 8003be6:	683b      	ldr	r3, [r7, #0]
 8003be8:	015a      	lsls	r2, r3, #5
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	4413      	add	r3, r2
 8003bee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003bf2:	689b      	ldr	r3, [r3, #8]
 8003bf4:	60bb      	str	r3, [r7, #8]

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	4a15      	ldr	r2, [pc, #84]	; (8003c50 <PCD_EP_OutSetupPacket_int+0x88>)
 8003bfa:	4293      	cmp	r3, r2
 8003bfc:	d90e      	bls.n	8003c1c <PCD_EP_OutSetupPacket_int+0x54>
      ((DoepintReg & USB_OTG_DOEPINT_STPKTRX) == USB_OTG_DOEPINT_STPKTRX))
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
  if ((gSNPSiD > USB_OTG_CORE_ID_300A) &&
 8003c04:	2b00      	cmp	r3, #0
 8003c06:	d009      	beq.n	8003c1c <PCD_EP_OutSetupPacket_int+0x54>
  {
    CLEAR_OUT_EP_INTR(epnum, USB_OTG_DOEPINT_STPKTRX);
 8003c08:	683b      	ldr	r3, [r7, #0]
 8003c0a:	015a      	lsls	r2, r3, #5
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	4413      	add	r3, r2
 8003c10:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003c14:	461a      	mov	r2, r3
 8003c16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003c1a:	6093      	str	r3, [r2, #8]

  /* Inform the upper layer that a setup packet is available */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
  hpcd->SetupStageCallback(hpcd);
#else
  HAL_PCD_SetupStageCallback(hpcd);
 8003c1c:	6878      	ldr	r0, [r7, #4]
 8003c1e:	f003 ffb5 	bl	8007b8c <HAL_PCD_SetupStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

  if ((gSNPSiD > USB_OTG_CORE_ID_300A) && (hpcd->Init.dma_enable == 1U))
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	4a0a      	ldr	r2, [pc, #40]	; (8003c50 <PCD_EP_OutSetupPacket_int+0x88>)
 8003c26:	4293      	cmp	r3, r2
 8003c28:	d90c      	bls.n	8003c44 <PCD_EP_OutSetupPacket_int+0x7c>
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	691b      	ldr	r3, [r3, #16]
 8003c2e:	2b01      	cmp	r3, #1
 8003c30:	d108      	bne.n	8003c44 <PCD_EP_OutSetupPacket_int+0x7c>
  {
    (void)USB_EP0_OutStart(hpcd->Instance, 1U, (uint8_t *)hpcd->Setup);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	6818      	ldr	r0, [r3, #0]
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8003c3c:	461a      	mov	r2, r3
 8003c3e:	2101      	movs	r1, #1
 8003c40:	f002 f858 	bl	8005cf4 <USB_EP0_OutStart>
  }

  return HAL_OK;
 8003c44:	2300      	movs	r3, #0
}
 8003c46:	4618      	mov	r0, r3
 8003c48:	3718      	adds	r7, #24
 8003c4a:	46bd      	mov	sp, r7
 8003c4c:	bd80      	pop	{r7, pc}
 8003c4e:	bf00      	nop
 8003c50:	4f54300a 	.word	0x4f54300a

08003c54 <HAL_PCDEx_SetTxFiFo>:
  * @param  fifo The number of Tx fifo
  * @param  size Fifo size
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetTxFiFo(PCD_HandleTypeDef *hpcd, uint8_t fifo, uint16_t size)
{
 8003c54:	b480      	push	{r7}
 8003c56:	b085      	sub	sp, #20
 8003c58:	af00      	add	r7, sp, #0
 8003c5a:	6078      	str	r0, [r7, #4]
 8003c5c:	460b      	mov	r3, r1
 8003c5e:	70fb      	strb	r3, [r7, #3]
 8003c60:	4613      	mov	r3, r2
 8003c62:	803b      	strh	r3, [r7, #0]
         --> Txn should be configured with the minimum space of 16 words
     The FIFO is used optimally when used TxFIFOs are allocated in the top
         of the FIFO.Ex: use EP1 and EP2 as IN instead of EP1 and EP3 as IN ones.
     When DMA is used 3n * FIFO locations should be reserved for internal DMA registers */

  Tx_Offset = hpcd->Instance->GRXFSIZ;
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c6a:	60bb      	str	r3, [r7, #8]

  if (fifo == 0U)
 8003c6c:	78fb      	ldrb	r3, [r7, #3]
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d107      	bne.n	8003c82 <HAL_PCDEx_SetTxFiFo+0x2e>
  {
    hpcd->Instance->DIEPTXF0_HNPTXFSIZ = ((uint32_t)size << 16) | Tx_Offset;
 8003c72:	883b      	ldrh	r3, [r7, #0]
 8003c74:	0419      	lsls	r1, r3, #16
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	68ba      	ldr	r2, [r7, #8]
 8003c7c:	430a      	orrs	r2, r1
 8003c7e:	629a      	str	r2, [r3, #40]	; 0x28
 8003c80:	e028      	b.n	8003cd4 <HAL_PCDEx_SetTxFiFo+0x80>
  }
  else
  {
    Tx_Offset += (hpcd->Instance->DIEPTXF0_HNPTXFSIZ) >> 16;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c88:	0c1b      	lsrs	r3, r3, #16
 8003c8a:	68ba      	ldr	r2, [r7, #8]
 8003c8c:	4413      	add	r3, r2
 8003c8e:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003c90:	2300      	movs	r3, #0
 8003c92:	73fb      	strb	r3, [r7, #15]
 8003c94:	e00d      	b.n	8003cb2 <HAL_PCDEx_SetTxFiFo+0x5e>
    {
      Tx_Offset += (hpcd->Instance->DIEPTXF[i] >> 16);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681a      	ldr	r2, [r3, #0]
 8003c9a:	7bfb      	ldrb	r3, [r7, #15]
 8003c9c:	3340      	adds	r3, #64	; 0x40
 8003c9e:	009b      	lsls	r3, r3, #2
 8003ca0:	4413      	add	r3, r2
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	0c1b      	lsrs	r3, r3, #16
 8003ca6:	68ba      	ldr	r2, [r7, #8]
 8003ca8:	4413      	add	r3, r2
 8003caa:	60bb      	str	r3, [r7, #8]
    for (i = 0U; i < (fifo - 1U); i++)
 8003cac:	7bfb      	ldrb	r3, [r7, #15]
 8003cae:	3301      	adds	r3, #1
 8003cb0:	73fb      	strb	r3, [r7, #15]
 8003cb2:	7bfa      	ldrb	r2, [r7, #15]
 8003cb4:	78fb      	ldrb	r3, [r7, #3]
 8003cb6:	3b01      	subs	r3, #1
 8003cb8:	429a      	cmp	r2, r3
 8003cba:	d3ec      	bcc.n	8003c96 <HAL_PCDEx_SetTxFiFo+0x42>
    }

    /* Multiply Tx_Size by 2 to get higher performance */
    hpcd->Instance->DIEPTXF[fifo - 1U] = ((uint32_t)size << 16) | Tx_Offset;
 8003cbc:	883b      	ldrh	r3, [r7, #0]
 8003cbe:	0418      	lsls	r0, r3, #16
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6819      	ldr	r1, [r3, #0]
 8003cc4:	78fb      	ldrb	r3, [r7, #3]
 8003cc6:	3b01      	subs	r3, #1
 8003cc8:	68ba      	ldr	r2, [r7, #8]
 8003cca:	4302      	orrs	r2, r0
 8003ccc:	3340      	adds	r3, #64	; 0x40
 8003cce:	009b      	lsls	r3, r3, #2
 8003cd0:	440b      	add	r3, r1
 8003cd2:	605a      	str	r2, [r3, #4]
  }

  return HAL_OK;
 8003cd4:	2300      	movs	r3, #0
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	3714      	adds	r7, #20
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ce0:	4770      	bx	lr

08003ce2 <HAL_PCDEx_SetRxFiFo>:
  * @param  hpcd PCD handle
  * @param  size Size of Rx fifo
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_SetRxFiFo(PCD_HandleTypeDef *hpcd, uint16_t size)
{
 8003ce2:	b480      	push	{r7}
 8003ce4:	b083      	sub	sp, #12
 8003ce6:	af00      	add	r7, sp, #0
 8003ce8:	6078      	str	r0, [r7, #4]
 8003cea:	460b      	mov	r3, r1
 8003cec:	807b      	strh	r3, [r7, #2]
  hpcd->Instance->GRXFSIZ = size;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	887a      	ldrh	r2, [r7, #2]
 8003cf4:	625a      	str	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8003cf6:	2300      	movs	r3, #0
}
 8003cf8:	4618      	mov	r0, r3
 8003cfa:	370c      	adds	r7, #12
 8003cfc:	46bd      	mov	sp, r7
 8003cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d02:	4770      	bx	lr

08003d04 <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 8003d04:	b480      	push	{r7}
 8003d06:	b083      	sub	sp, #12
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	6078      	str	r0, [r7, #4]
 8003d0c:	460b      	mov	r3, r1
 8003d0e:	70fb      	strb	r3, [r7, #3]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 8003d10:	bf00      	nop
 8003d12:	370c      	adds	r7, #12
 8003d14:	46bd      	mov	sp, r7
 8003d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1a:	4770      	bx	lr

08003d1c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003d1c:	b580      	push	{r7, lr}
 8003d1e:	b086      	sub	sp, #24
 8003d20:	af00      	add	r7, sp, #0
 8003d22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	d101      	bne.n	8003d2e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003d2a:	2301      	movs	r3, #1
 8003d2c:	e267      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f003 0301 	and.w	r3, r3, #1
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d075      	beq.n	8003e26 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d3a:	4b88      	ldr	r3, [pc, #544]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	f003 030c 	and.w	r3, r3, #12
 8003d42:	2b04      	cmp	r3, #4
 8003d44:	d00c      	beq.n	8003d60 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d46:	4b85      	ldr	r3, [pc, #532]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003d48:	689b      	ldr	r3, [r3, #8]
 8003d4a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003d4e:	2b08      	cmp	r3, #8
 8003d50:	d112      	bne.n	8003d78 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003d52:	4b82      	ldr	r3, [pc, #520]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003d54:	685b      	ldr	r3, [r3, #4]
 8003d56:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003d5a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003d5e:	d10b      	bne.n	8003d78 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d60:	4b7e      	ldr	r3, [pc, #504]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d05b      	beq.n	8003e24 <HAL_RCC_OscConfig+0x108>
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	685b      	ldr	r3, [r3, #4]
 8003d70:	2b00      	cmp	r3, #0
 8003d72:	d157      	bne.n	8003e24 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003d74:	2301      	movs	r3, #1
 8003d76:	e242      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	685b      	ldr	r3, [r3, #4]
 8003d7c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003d80:	d106      	bne.n	8003d90 <HAL_RCC_OscConfig+0x74>
 8003d82:	4b76      	ldr	r3, [pc, #472]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4a75      	ldr	r2, [pc, #468]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003d88:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003d8c:	6013      	str	r3, [r2, #0]
 8003d8e:	e01d      	b.n	8003dcc <HAL_RCC_OscConfig+0xb0>
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	685b      	ldr	r3, [r3, #4]
 8003d94:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003d98:	d10c      	bne.n	8003db4 <HAL_RCC_OscConfig+0x98>
 8003d9a:	4b70      	ldr	r3, [pc, #448]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	4a6f      	ldr	r2, [pc, #444]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003da0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003da4:	6013      	str	r3, [r2, #0]
 8003da6:	4b6d      	ldr	r3, [pc, #436]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	4a6c      	ldr	r2, [pc, #432]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003dac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003db0:	6013      	str	r3, [r2, #0]
 8003db2:	e00b      	b.n	8003dcc <HAL_RCC_OscConfig+0xb0>
 8003db4:	4b69      	ldr	r3, [pc, #420]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003db6:	681b      	ldr	r3, [r3, #0]
 8003db8:	4a68      	ldr	r2, [pc, #416]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003dba:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003dbe:	6013      	str	r3, [r2, #0]
 8003dc0:	4b66      	ldr	r3, [pc, #408]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	4a65      	ldr	r2, [pc, #404]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003dc6:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003dca:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	685b      	ldr	r3, [r3, #4]
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d013      	beq.n	8003dfc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dd4:	f7fd fafc 	bl	80013d0 <HAL_GetTick>
 8003dd8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dda:	e008      	b.n	8003dee <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003ddc:	f7fd faf8 	bl	80013d0 <HAL_GetTick>
 8003de0:	4602      	mov	r2, r0
 8003de2:	693b      	ldr	r3, [r7, #16]
 8003de4:	1ad3      	subs	r3, r2, r3
 8003de6:	2b64      	cmp	r3, #100	; 0x64
 8003de8:	d901      	bls.n	8003dee <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003dea:	2303      	movs	r3, #3
 8003dec:	e207      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003dee:	4b5b      	ldr	r3, [pc, #364]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003df6:	2b00      	cmp	r3, #0
 8003df8:	d0f0      	beq.n	8003ddc <HAL_RCC_OscConfig+0xc0>
 8003dfa:	e014      	b.n	8003e26 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003dfc:	f7fd fae8 	bl	80013d0 <HAL_GetTick>
 8003e00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e02:	e008      	b.n	8003e16 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003e04:	f7fd fae4 	bl	80013d0 <HAL_GetTick>
 8003e08:	4602      	mov	r2, r0
 8003e0a:	693b      	ldr	r3, [r7, #16]
 8003e0c:	1ad3      	subs	r3, r2, r3
 8003e0e:	2b64      	cmp	r3, #100	; 0x64
 8003e10:	d901      	bls.n	8003e16 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003e12:	2303      	movs	r3, #3
 8003e14:	e1f3      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003e16:	4b51      	ldr	r3, [pc, #324]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d1f0      	bne.n	8003e04 <HAL_RCC_OscConfig+0xe8>
 8003e22:	e000      	b.n	8003e26 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e24:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f003 0302 	and.w	r3, r3, #2
 8003e2e:	2b00      	cmp	r3, #0
 8003e30:	d063      	beq.n	8003efa <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e32:	4b4a      	ldr	r3, [pc, #296]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003e34:	689b      	ldr	r3, [r3, #8]
 8003e36:	f003 030c 	and.w	r3, r3, #12
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d00b      	beq.n	8003e56 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e3e:	4b47      	ldr	r3, [pc, #284]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003e40:	689b      	ldr	r3, [r3, #8]
 8003e42:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003e46:	2b08      	cmp	r3, #8
 8003e48:	d11c      	bne.n	8003e84 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003e4a:	4b44      	ldr	r3, [pc, #272]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d116      	bne.n	8003e84 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e56:	4b41      	ldr	r3, [pc, #260]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	f003 0302 	and.w	r3, r3, #2
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d005      	beq.n	8003e6e <HAL_RCC_OscConfig+0x152>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	68db      	ldr	r3, [r3, #12]
 8003e66:	2b01      	cmp	r3, #1
 8003e68:	d001      	beq.n	8003e6e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e1c7      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e6e:	4b3b      	ldr	r3, [pc, #236]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	691b      	ldr	r3, [r3, #16]
 8003e7a:	00db      	lsls	r3, r3, #3
 8003e7c:	4937      	ldr	r1, [pc, #220]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003e7e:	4313      	orrs	r3, r2
 8003e80:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003e82:	e03a      	b.n	8003efa <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	68db      	ldr	r3, [r3, #12]
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	d020      	beq.n	8003ece <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003e8c:	4b34      	ldr	r3, [pc, #208]	; (8003f60 <HAL_RCC_OscConfig+0x244>)
 8003e8e:	2201      	movs	r2, #1
 8003e90:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003e92:	f7fd fa9d 	bl	80013d0 <HAL_GetTick>
 8003e96:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003e98:	e008      	b.n	8003eac <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003e9a:	f7fd fa99 	bl	80013d0 <HAL_GetTick>
 8003e9e:	4602      	mov	r2, r0
 8003ea0:	693b      	ldr	r3, [r7, #16]
 8003ea2:	1ad3      	subs	r3, r2, r3
 8003ea4:	2b02      	cmp	r3, #2
 8003ea6:	d901      	bls.n	8003eac <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003ea8:	2303      	movs	r3, #3
 8003eaa:	e1a8      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003eac:	4b2b      	ldr	r3, [pc, #172]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f003 0302 	and.w	r3, r3, #2
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d0f0      	beq.n	8003e9a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003eb8:	4b28      	ldr	r3, [pc, #160]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	691b      	ldr	r3, [r3, #16]
 8003ec4:	00db      	lsls	r3, r3, #3
 8003ec6:	4925      	ldr	r1, [pc, #148]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003ec8:	4313      	orrs	r3, r2
 8003eca:	600b      	str	r3, [r1, #0]
 8003ecc:	e015      	b.n	8003efa <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003ece:	4b24      	ldr	r3, [pc, #144]	; (8003f60 <HAL_RCC_OscConfig+0x244>)
 8003ed0:	2200      	movs	r2, #0
 8003ed2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003ed4:	f7fd fa7c 	bl	80013d0 <HAL_GetTick>
 8003ed8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eda:	e008      	b.n	8003eee <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003edc:	f7fd fa78 	bl	80013d0 <HAL_GetTick>
 8003ee0:	4602      	mov	r2, r0
 8003ee2:	693b      	ldr	r3, [r7, #16]
 8003ee4:	1ad3      	subs	r3, r2, r3
 8003ee6:	2b02      	cmp	r3, #2
 8003ee8:	d901      	bls.n	8003eee <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003eea:	2303      	movs	r3, #3
 8003eec:	e187      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003eee:	4b1b      	ldr	r3, [pc, #108]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f003 0302 	and.w	r3, r3, #2
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d1f0      	bne.n	8003edc <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f003 0308 	and.w	r3, r3, #8
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d036      	beq.n	8003f74 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	695b      	ldr	r3, [r3, #20]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d016      	beq.n	8003f3c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f0e:	4b15      	ldr	r3, [pc, #84]	; (8003f64 <HAL_RCC_OscConfig+0x248>)
 8003f10:	2201      	movs	r2, #1
 8003f12:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f14:	f7fd fa5c 	bl	80013d0 <HAL_GetTick>
 8003f18:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f1a:	e008      	b.n	8003f2e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f1c:	f7fd fa58 	bl	80013d0 <HAL_GetTick>
 8003f20:	4602      	mov	r2, r0
 8003f22:	693b      	ldr	r3, [r7, #16]
 8003f24:	1ad3      	subs	r3, r2, r3
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d901      	bls.n	8003f2e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003f2a:	2303      	movs	r3, #3
 8003f2c:	e167      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003f2e:	4b0b      	ldr	r3, [pc, #44]	; (8003f5c <HAL_RCC_OscConfig+0x240>)
 8003f30:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f32:	f003 0302 	and.w	r3, r3, #2
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d0f0      	beq.n	8003f1c <HAL_RCC_OscConfig+0x200>
 8003f3a:	e01b      	b.n	8003f74 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003f3c:	4b09      	ldr	r3, [pc, #36]	; (8003f64 <HAL_RCC_OscConfig+0x248>)
 8003f3e:	2200      	movs	r2, #0
 8003f40:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003f42:	f7fd fa45 	bl	80013d0 <HAL_GetTick>
 8003f46:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f48:	e00e      	b.n	8003f68 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003f4a:	f7fd fa41 	bl	80013d0 <HAL_GetTick>
 8003f4e:	4602      	mov	r2, r0
 8003f50:	693b      	ldr	r3, [r7, #16]
 8003f52:	1ad3      	subs	r3, r2, r3
 8003f54:	2b02      	cmp	r3, #2
 8003f56:	d907      	bls.n	8003f68 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003f58:	2303      	movs	r3, #3
 8003f5a:	e150      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
 8003f5c:	40023800 	.word	0x40023800
 8003f60:	42470000 	.word	0x42470000
 8003f64:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003f68:	4b88      	ldr	r3, [pc, #544]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8003f6a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003f6c:	f003 0302 	and.w	r3, r3, #2
 8003f70:	2b00      	cmp	r3, #0
 8003f72:	d1ea      	bne.n	8003f4a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	f003 0304 	and.w	r3, r3, #4
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	f000 8097 	beq.w	80040b0 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003f82:	2300      	movs	r3, #0
 8003f84:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003f86:	4b81      	ldr	r3, [pc, #516]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8003f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	d10f      	bne.n	8003fb2 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003f92:	2300      	movs	r3, #0
 8003f94:	60bb      	str	r3, [r7, #8]
 8003f96:	4b7d      	ldr	r3, [pc, #500]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8003f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f9a:	4a7c      	ldr	r2, [pc, #496]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8003f9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003fa0:	6413      	str	r3, [r2, #64]	; 0x40
 8003fa2:	4b7a      	ldr	r3, [pc, #488]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003faa:	60bb      	str	r3, [r7, #8]
 8003fac:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003fae:	2301      	movs	r3, #1
 8003fb0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fb2:	4b77      	ldr	r3, [pc, #476]	; (8004190 <HAL_RCC_OscConfig+0x474>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fba:	2b00      	cmp	r3, #0
 8003fbc:	d118      	bne.n	8003ff0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003fbe:	4b74      	ldr	r3, [pc, #464]	; (8004190 <HAL_RCC_OscConfig+0x474>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a73      	ldr	r2, [pc, #460]	; (8004190 <HAL_RCC_OscConfig+0x474>)
 8003fc4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003fca:	f7fd fa01 	bl	80013d0 <HAL_GetTick>
 8003fce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fd0:	e008      	b.n	8003fe4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003fd2:	f7fd f9fd 	bl	80013d0 <HAL_GetTick>
 8003fd6:	4602      	mov	r2, r0
 8003fd8:	693b      	ldr	r3, [r7, #16]
 8003fda:	1ad3      	subs	r3, r2, r3
 8003fdc:	2b02      	cmp	r3, #2
 8003fde:	d901      	bls.n	8003fe4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003fe0:	2303      	movs	r3, #3
 8003fe2:	e10c      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003fe4:	4b6a      	ldr	r3, [pc, #424]	; (8004190 <HAL_RCC_OscConfig+0x474>)
 8003fe6:	681b      	ldr	r3, [r3, #0]
 8003fe8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003fec:	2b00      	cmp	r3, #0
 8003fee:	d0f0      	beq.n	8003fd2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	2b01      	cmp	r3, #1
 8003ff6:	d106      	bne.n	8004006 <HAL_RCC_OscConfig+0x2ea>
 8003ff8:	4b64      	ldr	r3, [pc, #400]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8003ffa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003ffc:	4a63      	ldr	r2, [pc, #396]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8003ffe:	f043 0301 	orr.w	r3, r3, #1
 8004002:	6713      	str	r3, [r2, #112]	; 0x70
 8004004:	e01c      	b.n	8004040 <HAL_RCC_OscConfig+0x324>
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	689b      	ldr	r3, [r3, #8]
 800400a:	2b05      	cmp	r3, #5
 800400c:	d10c      	bne.n	8004028 <HAL_RCC_OscConfig+0x30c>
 800400e:	4b5f      	ldr	r3, [pc, #380]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8004010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004012:	4a5e      	ldr	r2, [pc, #376]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8004014:	f043 0304 	orr.w	r3, r3, #4
 8004018:	6713      	str	r3, [r2, #112]	; 0x70
 800401a:	4b5c      	ldr	r3, [pc, #368]	; (800418c <HAL_RCC_OscConfig+0x470>)
 800401c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800401e:	4a5b      	ldr	r2, [pc, #364]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8004020:	f043 0301 	orr.w	r3, r3, #1
 8004024:	6713      	str	r3, [r2, #112]	; 0x70
 8004026:	e00b      	b.n	8004040 <HAL_RCC_OscConfig+0x324>
 8004028:	4b58      	ldr	r3, [pc, #352]	; (800418c <HAL_RCC_OscConfig+0x470>)
 800402a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800402c:	4a57      	ldr	r2, [pc, #348]	; (800418c <HAL_RCC_OscConfig+0x470>)
 800402e:	f023 0301 	bic.w	r3, r3, #1
 8004032:	6713      	str	r3, [r2, #112]	; 0x70
 8004034:	4b55      	ldr	r3, [pc, #340]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8004036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004038:	4a54      	ldr	r2, [pc, #336]	; (800418c <HAL_RCC_OscConfig+0x470>)
 800403a:	f023 0304 	bic.w	r3, r3, #4
 800403e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	689b      	ldr	r3, [r3, #8]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d015      	beq.n	8004074 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004048:	f7fd f9c2 	bl	80013d0 <HAL_GetTick>
 800404c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800404e:	e00a      	b.n	8004066 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004050:	f7fd f9be 	bl	80013d0 <HAL_GetTick>
 8004054:	4602      	mov	r2, r0
 8004056:	693b      	ldr	r3, [r7, #16]
 8004058:	1ad3      	subs	r3, r2, r3
 800405a:	f241 3288 	movw	r2, #5000	; 0x1388
 800405e:	4293      	cmp	r3, r2
 8004060:	d901      	bls.n	8004066 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004062:	2303      	movs	r3, #3
 8004064:	e0cb      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004066:	4b49      	ldr	r3, [pc, #292]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8004068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800406a:	f003 0302 	and.w	r3, r3, #2
 800406e:	2b00      	cmp	r3, #0
 8004070:	d0ee      	beq.n	8004050 <HAL_RCC_OscConfig+0x334>
 8004072:	e014      	b.n	800409e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004074:	f7fd f9ac 	bl	80013d0 <HAL_GetTick>
 8004078:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800407a:	e00a      	b.n	8004092 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800407c:	f7fd f9a8 	bl	80013d0 <HAL_GetTick>
 8004080:	4602      	mov	r2, r0
 8004082:	693b      	ldr	r3, [r7, #16]
 8004084:	1ad3      	subs	r3, r2, r3
 8004086:	f241 3288 	movw	r2, #5000	; 0x1388
 800408a:	4293      	cmp	r3, r2
 800408c:	d901      	bls.n	8004092 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800408e:	2303      	movs	r3, #3
 8004090:	e0b5      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004092:	4b3e      	ldr	r3, [pc, #248]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8004094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004096:	f003 0302 	and.w	r3, r3, #2
 800409a:	2b00      	cmp	r3, #0
 800409c:	d1ee      	bne.n	800407c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800409e:	7dfb      	ldrb	r3, [r7, #23]
 80040a0:	2b01      	cmp	r3, #1
 80040a2:	d105      	bne.n	80040b0 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80040a4:	4b39      	ldr	r3, [pc, #228]	; (800418c <HAL_RCC_OscConfig+0x470>)
 80040a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040a8:	4a38      	ldr	r2, [pc, #224]	; (800418c <HAL_RCC_OscConfig+0x470>)
 80040aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80040ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	699b      	ldr	r3, [r3, #24]
 80040b4:	2b00      	cmp	r3, #0
 80040b6:	f000 80a1 	beq.w	80041fc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80040ba:	4b34      	ldr	r3, [pc, #208]	; (800418c <HAL_RCC_OscConfig+0x470>)
 80040bc:	689b      	ldr	r3, [r3, #8]
 80040be:	f003 030c 	and.w	r3, r3, #12
 80040c2:	2b08      	cmp	r3, #8
 80040c4:	d05c      	beq.n	8004180 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	699b      	ldr	r3, [r3, #24]
 80040ca:	2b02      	cmp	r3, #2
 80040cc:	d141      	bne.n	8004152 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80040ce:	4b31      	ldr	r3, [pc, #196]	; (8004194 <HAL_RCC_OscConfig+0x478>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040d4:	f7fd f97c 	bl	80013d0 <HAL_GetTick>
 80040d8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040da:	e008      	b.n	80040ee <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80040dc:	f7fd f978 	bl	80013d0 <HAL_GetTick>
 80040e0:	4602      	mov	r2, r0
 80040e2:	693b      	ldr	r3, [r7, #16]
 80040e4:	1ad3      	subs	r3, r2, r3
 80040e6:	2b02      	cmp	r3, #2
 80040e8:	d901      	bls.n	80040ee <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80040ea:	2303      	movs	r3, #3
 80040ec:	e087      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80040ee:	4b27      	ldr	r3, [pc, #156]	; (800418c <HAL_RCC_OscConfig+0x470>)
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d1f0      	bne.n	80040dc <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	69da      	ldr	r2, [r3, #28]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	6a1b      	ldr	r3, [r3, #32]
 8004102:	431a      	orrs	r2, r3
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004108:	019b      	lsls	r3, r3, #6
 800410a:	431a      	orrs	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004110:	085b      	lsrs	r3, r3, #1
 8004112:	3b01      	subs	r3, #1
 8004114:	041b      	lsls	r3, r3, #16
 8004116:	431a      	orrs	r2, r3
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800411c:	061b      	lsls	r3, r3, #24
 800411e:	491b      	ldr	r1, [pc, #108]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8004120:	4313      	orrs	r3, r2
 8004122:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004124:	4b1b      	ldr	r3, [pc, #108]	; (8004194 <HAL_RCC_OscConfig+0x478>)
 8004126:	2201      	movs	r2, #1
 8004128:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800412a:	f7fd f951 	bl	80013d0 <HAL_GetTick>
 800412e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004130:	e008      	b.n	8004144 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004132:	f7fd f94d 	bl	80013d0 <HAL_GetTick>
 8004136:	4602      	mov	r2, r0
 8004138:	693b      	ldr	r3, [r7, #16]
 800413a:	1ad3      	subs	r3, r2, r3
 800413c:	2b02      	cmp	r3, #2
 800413e:	d901      	bls.n	8004144 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004140:	2303      	movs	r3, #3
 8004142:	e05c      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004144:	4b11      	ldr	r3, [pc, #68]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800414c:	2b00      	cmp	r3, #0
 800414e:	d0f0      	beq.n	8004132 <HAL_RCC_OscConfig+0x416>
 8004150:	e054      	b.n	80041fc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004152:	4b10      	ldr	r3, [pc, #64]	; (8004194 <HAL_RCC_OscConfig+0x478>)
 8004154:	2200      	movs	r2, #0
 8004156:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004158:	f7fd f93a 	bl	80013d0 <HAL_GetTick>
 800415c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800415e:	e008      	b.n	8004172 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004160:	f7fd f936 	bl	80013d0 <HAL_GetTick>
 8004164:	4602      	mov	r2, r0
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	1ad3      	subs	r3, r2, r3
 800416a:	2b02      	cmp	r3, #2
 800416c:	d901      	bls.n	8004172 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800416e:	2303      	movs	r3, #3
 8004170:	e045      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004172:	4b06      	ldr	r3, [pc, #24]	; (800418c <HAL_RCC_OscConfig+0x470>)
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800417a:	2b00      	cmp	r3, #0
 800417c:	d1f0      	bne.n	8004160 <HAL_RCC_OscConfig+0x444>
 800417e:	e03d      	b.n	80041fc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d107      	bne.n	8004198 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004188:	2301      	movs	r3, #1
 800418a:	e038      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
 800418c:	40023800 	.word	0x40023800
 8004190:	40007000 	.word	0x40007000
 8004194:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004198:	4b1b      	ldr	r3, [pc, #108]	; (8004208 <HAL_RCC_OscConfig+0x4ec>)
 800419a:	685b      	ldr	r3, [r3, #4]
 800419c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	2b01      	cmp	r3, #1
 80041a4:	d028      	beq.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80041b0:	429a      	cmp	r2, r3
 80041b2:	d121      	bne.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80041be:	429a      	cmp	r2, r3
 80041c0:	d11a      	bne.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80041c8:	4013      	ands	r3, r2
 80041ca:	687a      	ldr	r2, [r7, #4]
 80041cc:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80041ce:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d111      	bne.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041de:	085b      	lsrs	r3, r3, #1
 80041e0:	3b01      	subs	r3, #1
 80041e2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80041e4:	429a      	cmp	r2, r3
 80041e6:	d107      	bne.n	80041f8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041f2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80041f4:	429a      	cmp	r2, r3
 80041f6:	d001      	beq.n	80041fc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80041f8:	2301      	movs	r3, #1
 80041fa:	e000      	b.n	80041fe <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80041fc:	2300      	movs	r3, #0
}
 80041fe:	4618      	mov	r0, r3
 8004200:	3718      	adds	r7, #24
 8004202:	46bd      	mov	sp, r7
 8004204:	bd80      	pop	{r7, pc}
 8004206:	bf00      	nop
 8004208:	40023800 	.word	0x40023800

0800420c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b084      	sub	sp, #16
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
 8004214:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2b00      	cmp	r3, #0
 800421a:	d101      	bne.n	8004220 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800421c:	2301      	movs	r3, #1
 800421e:	e0cc      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004220:	4b68      	ldr	r3, [pc, #416]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f003 0307 	and.w	r3, r3, #7
 8004228:	683a      	ldr	r2, [r7, #0]
 800422a:	429a      	cmp	r2, r3
 800422c:	d90c      	bls.n	8004248 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800422e:	4b65      	ldr	r3, [pc, #404]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004230:	683a      	ldr	r2, [r7, #0]
 8004232:	b2d2      	uxtb	r2, r2
 8004234:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004236:	4b63      	ldr	r3, [pc, #396]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	f003 0307 	and.w	r3, r3, #7
 800423e:	683a      	ldr	r2, [r7, #0]
 8004240:	429a      	cmp	r2, r3
 8004242:	d001      	beq.n	8004248 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004244:	2301      	movs	r3, #1
 8004246:	e0b8      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f003 0302 	and.w	r3, r3, #2
 8004250:	2b00      	cmp	r3, #0
 8004252:	d020      	beq.n	8004296 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f003 0304 	and.w	r3, r3, #4
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004260:	4b59      	ldr	r3, [pc, #356]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004262:	689b      	ldr	r3, [r3, #8]
 8004264:	4a58      	ldr	r2, [pc, #352]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004266:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800426a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0308 	and.w	r3, r3, #8
 8004274:	2b00      	cmp	r3, #0
 8004276:	d005      	beq.n	8004284 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004278:	4b53      	ldr	r3, [pc, #332]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800427a:	689b      	ldr	r3, [r3, #8]
 800427c:	4a52      	ldr	r2, [pc, #328]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800427e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004282:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004284:	4b50      	ldr	r3, [pc, #320]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004286:	689b      	ldr	r3, [r3, #8]
 8004288:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	689b      	ldr	r3, [r3, #8]
 8004290:	494d      	ldr	r1, [pc, #308]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004292:	4313      	orrs	r3, r2
 8004294:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	f003 0301 	and.w	r3, r3, #1
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d044      	beq.n	800432c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	685b      	ldr	r3, [r3, #4]
 80042a6:	2b01      	cmp	r3, #1
 80042a8:	d107      	bne.n	80042ba <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80042aa:	4b47      	ldr	r3, [pc, #284]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d119      	bne.n	80042ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e07f      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	685b      	ldr	r3, [r3, #4]
 80042be:	2b02      	cmp	r3, #2
 80042c0:	d003      	beq.n	80042ca <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80042c6:	2b03      	cmp	r3, #3
 80042c8:	d107      	bne.n	80042da <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80042ca:	4b3f      	ldr	r3, [pc, #252]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042cc:	681b      	ldr	r3, [r3, #0]
 80042ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d109      	bne.n	80042ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042d6:	2301      	movs	r3, #1
 80042d8:	e06f      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80042da:	4b3b      	ldr	r3, [pc, #236]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042dc:	681b      	ldr	r3, [r3, #0]
 80042de:	f003 0302 	and.w	r3, r3, #2
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d101      	bne.n	80042ea <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80042e6:	2301      	movs	r3, #1
 80042e8:	e067      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80042ea:	4b37      	ldr	r3, [pc, #220]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042ec:	689b      	ldr	r3, [r3, #8]
 80042ee:	f023 0203 	bic.w	r2, r3, #3
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	685b      	ldr	r3, [r3, #4]
 80042f6:	4934      	ldr	r1, [pc, #208]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 80042f8:	4313      	orrs	r3, r2
 80042fa:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80042fc:	f7fd f868 	bl	80013d0 <HAL_GetTick>
 8004300:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004302:	e00a      	b.n	800431a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004304:	f7fd f864 	bl	80013d0 <HAL_GetTick>
 8004308:	4602      	mov	r2, r0
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	1ad3      	subs	r3, r2, r3
 800430e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004312:	4293      	cmp	r3, r2
 8004314:	d901      	bls.n	800431a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004316:	2303      	movs	r3, #3
 8004318:	e04f      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800431a:	4b2b      	ldr	r3, [pc, #172]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800431c:	689b      	ldr	r3, [r3, #8]
 800431e:	f003 020c 	and.w	r2, r3, #12
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	685b      	ldr	r3, [r3, #4]
 8004326:	009b      	lsls	r3, r3, #2
 8004328:	429a      	cmp	r2, r3
 800432a:	d1eb      	bne.n	8004304 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800432c:	4b25      	ldr	r3, [pc, #148]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0307 	and.w	r3, r3, #7
 8004334:	683a      	ldr	r2, [r7, #0]
 8004336:	429a      	cmp	r2, r3
 8004338:	d20c      	bcs.n	8004354 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800433a:	4b22      	ldr	r3, [pc, #136]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 800433c:	683a      	ldr	r2, [r7, #0]
 800433e:	b2d2      	uxtb	r2, r2
 8004340:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004342:	4b20      	ldr	r3, [pc, #128]	; (80043c4 <HAL_RCC_ClockConfig+0x1b8>)
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	683a      	ldr	r2, [r7, #0]
 800434c:	429a      	cmp	r2, r3
 800434e:	d001      	beq.n	8004354 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e032      	b.n	80043ba <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f003 0304 	and.w	r3, r3, #4
 800435c:	2b00      	cmp	r3, #0
 800435e:	d008      	beq.n	8004372 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004360:	4b19      	ldr	r3, [pc, #100]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004362:	689b      	ldr	r3, [r3, #8]
 8004364:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	4916      	ldr	r1, [pc, #88]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800436e:	4313      	orrs	r3, r2
 8004370:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	f003 0308 	and.w	r3, r3, #8
 800437a:	2b00      	cmp	r3, #0
 800437c:	d009      	beq.n	8004392 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800437e:	4b12      	ldr	r3, [pc, #72]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 8004380:	689b      	ldr	r3, [r3, #8]
 8004382:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	691b      	ldr	r3, [r3, #16]
 800438a:	00db      	lsls	r3, r3, #3
 800438c:	490e      	ldr	r1, [pc, #56]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800438e:	4313      	orrs	r3, r2
 8004390:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004392:	f000 f821 	bl	80043d8 <HAL_RCC_GetSysClockFreq>
 8004396:	4602      	mov	r2, r0
 8004398:	4b0b      	ldr	r3, [pc, #44]	; (80043c8 <HAL_RCC_ClockConfig+0x1bc>)
 800439a:	689b      	ldr	r3, [r3, #8]
 800439c:	091b      	lsrs	r3, r3, #4
 800439e:	f003 030f 	and.w	r3, r3, #15
 80043a2:	490a      	ldr	r1, [pc, #40]	; (80043cc <HAL_RCC_ClockConfig+0x1c0>)
 80043a4:	5ccb      	ldrb	r3, [r1, r3]
 80043a6:	fa22 f303 	lsr.w	r3, r2, r3
 80043aa:	4a09      	ldr	r2, [pc, #36]	; (80043d0 <HAL_RCC_ClockConfig+0x1c4>)
 80043ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80043ae:	4b09      	ldr	r3, [pc, #36]	; (80043d4 <HAL_RCC_ClockConfig+0x1c8>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4618      	mov	r0, r3
 80043b4:	f7fc ffc8 	bl	8001348 <HAL_InitTick>

  return HAL_OK;
 80043b8:	2300      	movs	r3, #0
}
 80043ba:	4618      	mov	r0, r3
 80043bc:	3710      	adds	r7, #16
 80043be:	46bd      	mov	sp, r7
 80043c0:	bd80      	pop	{r7, pc}
 80043c2:	bf00      	nop
 80043c4:	40023c00 	.word	0x40023c00
 80043c8:	40023800 	.word	0x40023800
 80043cc:	0800819c 	.word	0x0800819c
 80043d0:	200003d4 	.word	0x200003d4
 80043d4:	200003d8 	.word	0x200003d8

080043d8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80043d8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80043dc:	b090      	sub	sp, #64	; 0x40
 80043de:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80043e0:	2300      	movs	r3, #0
 80043e2:	637b      	str	r3, [r7, #52]	; 0x34
 80043e4:	2300      	movs	r3, #0
 80043e6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80043e8:	2300      	movs	r3, #0
 80043ea:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80043ec:	2300      	movs	r3, #0
 80043ee:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80043f0:	4b59      	ldr	r3, [pc, #356]	; (8004558 <HAL_RCC_GetSysClockFreq+0x180>)
 80043f2:	689b      	ldr	r3, [r3, #8]
 80043f4:	f003 030c 	and.w	r3, r3, #12
 80043f8:	2b08      	cmp	r3, #8
 80043fa:	d00d      	beq.n	8004418 <HAL_RCC_GetSysClockFreq+0x40>
 80043fc:	2b08      	cmp	r3, #8
 80043fe:	f200 80a1 	bhi.w	8004544 <HAL_RCC_GetSysClockFreq+0x16c>
 8004402:	2b00      	cmp	r3, #0
 8004404:	d002      	beq.n	800440c <HAL_RCC_GetSysClockFreq+0x34>
 8004406:	2b04      	cmp	r3, #4
 8004408:	d003      	beq.n	8004412 <HAL_RCC_GetSysClockFreq+0x3a>
 800440a:	e09b      	b.n	8004544 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800440c:	4b53      	ldr	r3, [pc, #332]	; (800455c <HAL_RCC_GetSysClockFreq+0x184>)
 800440e:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004410:	e09b      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004412:	4b53      	ldr	r3, [pc, #332]	; (8004560 <HAL_RCC_GetSysClockFreq+0x188>)
 8004414:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004416:	e098      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004418:	4b4f      	ldr	r3, [pc, #316]	; (8004558 <HAL_RCC_GetSysClockFreq+0x180>)
 800441a:	685b      	ldr	r3, [r3, #4]
 800441c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004420:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004422:	4b4d      	ldr	r3, [pc, #308]	; (8004558 <HAL_RCC_GetSysClockFreq+0x180>)
 8004424:	685b      	ldr	r3, [r3, #4]
 8004426:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800442a:	2b00      	cmp	r3, #0
 800442c:	d028      	beq.n	8004480 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800442e:	4b4a      	ldr	r3, [pc, #296]	; (8004558 <HAL_RCC_GetSysClockFreq+0x180>)
 8004430:	685b      	ldr	r3, [r3, #4]
 8004432:	099b      	lsrs	r3, r3, #6
 8004434:	2200      	movs	r2, #0
 8004436:	623b      	str	r3, [r7, #32]
 8004438:	627a      	str	r2, [r7, #36]	; 0x24
 800443a:	6a3b      	ldr	r3, [r7, #32]
 800443c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004440:	2100      	movs	r1, #0
 8004442:	4b47      	ldr	r3, [pc, #284]	; (8004560 <HAL_RCC_GetSysClockFreq+0x188>)
 8004444:	fb03 f201 	mul.w	r2, r3, r1
 8004448:	2300      	movs	r3, #0
 800444a:	fb00 f303 	mul.w	r3, r0, r3
 800444e:	4413      	add	r3, r2
 8004450:	4a43      	ldr	r2, [pc, #268]	; (8004560 <HAL_RCC_GetSysClockFreq+0x188>)
 8004452:	fba0 1202 	umull	r1, r2, r0, r2
 8004456:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004458:	460a      	mov	r2, r1
 800445a:	62ba      	str	r2, [r7, #40]	; 0x28
 800445c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800445e:	4413      	add	r3, r2
 8004460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004462:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004464:	2200      	movs	r2, #0
 8004466:	61bb      	str	r3, [r7, #24]
 8004468:	61fa      	str	r2, [r7, #28]
 800446a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800446e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004472:	f7fb feaf 	bl	80001d4 <__aeabi_uldivmod>
 8004476:	4602      	mov	r2, r0
 8004478:	460b      	mov	r3, r1
 800447a:	4613      	mov	r3, r2
 800447c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800447e:	e053      	b.n	8004528 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004480:	4b35      	ldr	r3, [pc, #212]	; (8004558 <HAL_RCC_GetSysClockFreq+0x180>)
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	099b      	lsrs	r3, r3, #6
 8004486:	2200      	movs	r2, #0
 8004488:	613b      	str	r3, [r7, #16]
 800448a:	617a      	str	r2, [r7, #20]
 800448c:	693b      	ldr	r3, [r7, #16]
 800448e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004492:	f04f 0b00 	mov.w	fp, #0
 8004496:	4652      	mov	r2, sl
 8004498:	465b      	mov	r3, fp
 800449a:	f04f 0000 	mov.w	r0, #0
 800449e:	f04f 0100 	mov.w	r1, #0
 80044a2:	0159      	lsls	r1, r3, #5
 80044a4:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80044a8:	0150      	lsls	r0, r2, #5
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	ebb2 080a 	subs.w	r8, r2, sl
 80044b2:	eb63 090b 	sbc.w	r9, r3, fp
 80044b6:	f04f 0200 	mov.w	r2, #0
 80044ba:	f04f 0300 	mov.w	r3, #0
 80044be:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80044c2:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80044c6:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80044ca:	ebb2 0408 	subs.w	r4, r2, r8
 80044ce:	eb63 0509 	sbc.w	r5, r3, r9
 80044d2:	f04f 0200 	mov.w	r2, #0
 80044d6:	f04f 0300 	mov.w	r3, #0
 80044da:	00eb      	lsls	r3, r5, #3
 80044dc:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80044e0:	00e2      	lsls	r2, r4, #3
 80044e2:	4614      	mov	r4, r2
 80044e4:	461d      	mov	r5, r3
 80044e6:	eb14 030a 	adds.w	r3, r4, sl
 80044ea:	603b      	str	r3, [r7, #0]
 80044ec:	eb45 030b 	adc.w	r3, r5, fp
 80044f0:	607b      	str	r3, [r7, #4]
 80044f2:	f04f 0200 	mov.w	r2, #0
 80044f6:	f04f 0300 	mov.w	r3, #0
 80044fa:	e9d7 4500 	ldrd	r4, r5, [r7]
 80044fe:	4629      	mov	r1, r5
 8004500:	028b      	lsls	r3, r1, #10
 8004502:	4621      	mov	r1, r4
 8004504:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004508:	4621      	mov	r1, r4
 800450a:	028a      	lsls	r2, r1, #10
 800450c:	4610      	mov	r0, r2
 800450e:	4619      	mov	r1, r3
 8004510:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004512:	2200      	movs	r2, #0
 8004514:	60bb      	str	r3, [r7, #8]
 8004516:	60fa      	str	r2, [r7, #12]
 8004518:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800451c:	f7fb fe5a 	bl	80001d4 <__aeabi_uldivmod>
 8004520:	4602      	mov	r2, r0
 8004522:	460b      	mov	r3, r1
 8004524:	4613      	mov	r3, r2
 8004526:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004528:	4b0b      	ldr	r3, [pc, #44]	; (8004558 <HAL_RCC_GetSysClockFreq+0x180>)
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	0c1b      	lsrs	r3, r3, #16
 800452e:	f003 0303 	and.w	r3, r3, #3
 8004532:	3301      	adds	r3, #1
 8004534:	005b      	lsls	r3, r3, #1
 8004536:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004538:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800453a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800453c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004540:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004542:	e002      	b.n	800454a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004544:	4b05      	ldr	r3, [pc, #20]	; (800455c <HAL_RCC_GetSysClockFreq+0x184>)
 8004546:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004548:	bf00      	nop
    }
  }
  return sysclockfreq;
 800454a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 800454c:	4618      	mov	r0, r3
 800454e:	3740      	adds	r7, #64	; 0x40
 8004550:	46bd      	mov	sp, r7
 8004552:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004556:	bf00      	nop
 8004558:	40023800 	.word	0x40023800
 800455c:	00f42400 	.word	0x00f42400
 8004560:	017d7840 	.word	0x017d7840

08004564 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004564:	b480      	push	{r7}
 8004566:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004568:	4b03      	ldr	r3, [pc, #12]	; (8004578 <HAL_RCC_GetHCLKFreq+0x14>)
 800456a:	681b      	ldr	r3, [r3, #0]
}
 800456c:	4618      	mov	r0, r3
 800456e:	46bd      	mov	sp, r7
 8004570:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004574:	4770      	bx	lr
 8004576:	bf00      	nop
 8004578:	200003d4 	.word	0x200003d4

0800457c <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800457c:	b084      	sub	sp, #16
 800457e:	b580      	push	{r7, lr}
 8004580:	b084      	sub	sp, #16
 8004582:	af00      	add	r7, sp, #0
 8004584:	6078      	str	r0, [r7, #4]
 8004586:	f107 001c 	add.w	r0, r7, #28
 800458a:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;
  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 800458e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004590:	2b01      	cmp	r3, #1
 8004592:	d122      	bne.n	80045da <USB_CoreInit+0x5e>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004598:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	68db      	ldr	r3, [r3, #12]
 80045a4:	f423 0384 	bic.w	r3, r3, #4325376	; 0x420000
 80045a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80045ac:	687a      	ldr	r2, [r7, #4]
 80045ae:	60d3      	str	r3, [r2, #12]

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	68db      	ldr	r3, [r3, #12]
 80045b4:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80045bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045be:	2b01      	cmp	r3, #1
 80045c0:	d105      	bne.n	80045ce <USB_CoreInit+0x52>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	68db      	ldr	r3, [r3, #12]
 80045c6:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	60da      	str	r2, [r3, #12]
    }

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045ce:	6878      	ldr	r0, [r7, #4]
 80045d0:	f001 fbee 	bl	8005db0 <USB_CoreReset>
 80045d4:	4603      	mov	r3, r0
 80045d6:	73fb      	strb	r3, [r7, #15]
 80045d8:	e01a      	b.n	8004610 <USB_CoreInit+0x94>
  }
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	68db      	ldr	r3, [r3, #12]
 80045de:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f001 fbe2 	bl	8005db0 <USB_CoreReset>
 80045ec:	4603      	mov	r3, r0
 80045ee:	73fb      	strb	r3, [r7, #15]

    if (cfg.battery_charging_enable == 0U)
 80045f0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d106      	bne.n	8004604 <USB_CoreInit+0x88>
    {
      /* Activate the USB Transceiver */
      USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045fa:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	639a      	str	r2, [r3, #56]	; 0x38
 8004602:	e005      	b.n	8004610 <USB_CoreInit+0x94>
    }
    else
    {
      /* Deactivate the USB Transceiver */
      USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004608:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	639a      	str	r2, [r3, #56]	; 0x38
    }
  }

  if (cfg.dma_enable == 1U)
 8004610:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004612:	2b01      	cmp	r3, #1
 8004614:	d10b      	bne.n	800462e <USB_CoreInit+0xb2>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	689b      	ldr	r3, [r3, #8]
 800461a:	f043 0206 	orr.w	r2, r3, #6
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	689b      	ldr	r3, [r3, #8]
 8004626:	f043 0220 	orr.w	r2, r3, #32
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800462e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004630:	4618      	mov	r0, r3
 8004632:	3710      	adds	r7, #16
 8004634:	46bd      	mov	sp, r7
 8004636:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800463a:	b004      	add	sp, #16
 800463c:	4770      	bx	lr
	...

08004640 <USB_SetTurnaroundTime>:
  * @param  hclk: AHB clock frequency
  * @retval USB turnaround time In PHY Clocks number
  */
HAL_StatusTypeDef USB_SetTurnaroundTime(USB_OTG_GlobalTypeDef *USBx,
                                        uint32_t hclk, uint8_t speed)
{
 8004640:	b480      	push	{r7}
 8004642:	b087      	sub	sp, #28
 8004644:	af00      	add	r7, sp, #0
 8004646:	60f8      	str	r0, [r7, #12]
 8004648:	60b9      	str	r1, [r7, #8]
 800464a:	4613      	mov	r3, r2
 800464c:	71fb      	strb	r3, [r7, #7]

  /* The USBTRD is configured according to the tables below, depending on AHB frequency
  used by application. In the low AHB frequency range it is used to stretch enough the USB response
  time to IN tokens, the USB turnaround time, so to compensate for the longer AHB read access
  latency to the Data FIFO */
  if (speed == USBD_FS_SPEED)
 800464e:	79fb      	ldrb	r3, [r7, #7]
 8004650:	2b02      	cmp	r3, #2
 8004652:	d165      	bne.n	8004720 <USB_SetTurnaroundTime+0xe0>
  {
    if ((hclk >= 14200000U) && (hclk < 15000000U))
 8004654:	68bb      	ldr	r3, [r7, #8]
 8004656:	4a41      	ldr	r2, [pc, #260]	; (800475c <USB_SetTurnaroundTime+0x11c>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d906      	bls.n	800466a <USB_SetTurnaroundTime+0x2a>
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	4a40      	ldr	r2, [pc, #256]	; (8004760 <USB_SetTurnaroundTime+0x120>)
 8004660:	4293      	cmp	r3, r2
 8004662:	d202      	bcs.n	800466a <USB_SetTurnaroundTime+0x2a>
    {
      /* hclk Clock Range between 14.2-15 MHz */
      UsbTrd = 0xFU;
 8004664:	230f      	movs	r3, #15
 8004666:	617b      	str	r3, [r7, #20]
 8004668:	e062      	b.n	8004730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 15000000U) && (hclk < 16000000U))
 800466a:	68bb      	ldr	r3, [r7, #8]
 800466c:	4a3c      	ldr	r2, [pc, #240]	; (8004760 <USB_SetTurnaroundTime+0x120>)
 800466e:	4293      	cmp	r3, r2
 8004670:	d306      	bcc.n	8004680 <USB_SetTurnaroundTime+0x40>
 8004672:	68bb      	ldr	r3, [r7, #8]
 8004674:	4a3b      	ldr	r2, [pc, #236]	; (8004764 <USB_SetTurnaroundTime+0x124>)
 8004676:	4293      	cmp	r3, r2
 8004678:	d202      	bcs.n	8004680 <USB_SetTurnaroundTime+0x40>
    {
      /* hclk Clock Range between 15-16 MHz */
      UsbTrd = 0xEU;
 800467a:	230e      	movs	r3, #14
 800467c:	617b      	str	r3, [r7, #20]
 800467e:	e057      	b.n	8004730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 16000000U) && (hclk < 17200000U))
 8004680:	68bb      	ldr	r3, [r7, #8]
 8004682:	4a38      	ldr	r2, [pc, #224]	; (8004764 <USB_SetTurnaroundTime+0x124>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d306      	bcc.n	8004696 <USB_SetTurnaroundTime+0x56>
 8004688:	68bb      	ldr	r3, [r7, #8]
 800468a:	4a37      	ldr	r2, [pc, #220]	; (8004768 <USB_SetTurnaroundTime+0x128>)
 800468c:	4293      	cmp	r3, r2
 800468e:	d202      	bcs.n	8004696 <USB_SetTurnaroundTime+0x56>
    {
      /* hclk Clock Range between 16-17.2 MHz */
      UsbTrd = 0xDU;
 8004690:	230d      	movs	r3, #13
 8004692:	617b      	str	r3, [r7, #20]
 8004694:	e04c      	b.n	8004730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 17200000U) && (hclk < 18500000U))
 8004696:	68bb      	ldr	r3, [r7, #8]
 8004698:	4a33      	ldr	r2, [pc, #204]	; (8004768 <USB_SetTurnaroundTime+0x128>)
 800469a:	4293      	cmp	r3, r2
 800469c:	d306      	bcc.n	80046ac <USB_SetTurnaroundTime+0x6c>
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	4a32      	ldr	r2, [pc, #200]	; (800476c <USB_SetTurnaroundTime+0x12c>)
 80046a2:	4293      	cmp	r3, r2
 80046a4:	d802      	bhi.n	80046ac <USB_SetTurnaroundTime+0x6c>
    {
      /* hclk Clock Range between 17.2-18.5 MHz */
      UsbTrd = 0xCU;
 80046a6:	230c      	movs	r3, #12
 80046a8:	617b      	str	r3, [r7, #20]
 80046aa:	e041      	b.n	8004730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 18500000U) && (hclk < 20000000U))
 80046ac:	68bb      	ldr	r3, [r7, #8]
 80046ae:	4a2f      	ldr	r2, [pc, #188]	; (800476c <USB_SetTurnaroundTime+0x12c>)
 80046b0:	4293      	cmp	r3, r2
 80046b2:	d906      	bls.n	80046c2 <USB_SetTurnaroundTime+0x82>
 80046b4:	68bb      	ldr	r3, [r7, #8]
 80046b6:	4a2e      	ldr	r2, [pc, #184]	; (8004770 <USB_SetTurnaroundTime+0x130>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d802      	bhi.n	80046c2 <USB_SetTurnaroundTime+0x82>
    {
      /* hclk Clock Range between 18.5-20 MHz */
      UsbTrd = 0xBU;
 80046bc:	230b      	movs	r3, #11
 80046be:	617b      	str	r3, [r7, #20]
 80046c0:	e036      	b.n	8004730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 20000000U) && (hclk < 21800000U))
 80046c2:	68bb      	ldr	r3, [r7, #8]
 80046c4:	4a2a      	ldr	r2, [pc, #168]	; (8004770 <USB_SetTurnaroundTime+0x130>)
 80046c6:	4293      	cmp	r3, r2
 80046c8:	d906      	bls.n	80046d8 <USB_SetTurnaroundTime+0x98>
 80046ca:	68bb      	ldr	r3, [r7, #8]
 80046cc:	4a29      	ldr	r2, [pc, #164]	; (8004774 <USB_SetTurnaroundTime+0x134>)
 80046ce:	4293      	cmp	r3, r2
 80046d0:	d802      	bhi.n	80046d8 <USB_SetTurnaroundTime+0x98>
    {
      /* hclk Clock Range between 20-21.8 MHz */
      UsbTrd = 0xAU;
 80046d2:	230a      	movs	r3, #10
 80046d4:	617b      	str	r3, [r7, #20]
 80046d6:	e02b      	b.n	8004730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 21800000U) && (hclk < 24000000U))
 80046d8:	68bb      	ldr	r3, [r7, #8]
 80046da:	4a26      	ldr	r2, [pc, #152]	; (8004774 <USB_SetTurnaroundTime+0x134>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d906      	bls.n	80046ee <USB_SetTurnaroundTime+0xae>
 80046e0:	68bb      	ldr	r3, [r7, #8]
 80046e2:	4a25      	ldr	r2, [pc, #148]	; (8004778 <USB_SetTurnaroundTime+0x138>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d202      	bcs.n	80046ee <USB_SetTurnaroundTime+0xae>
    {
      /* hclk Clock Range between 21.8-24 MHz */
      UsbTrd = 0x9U;
 80046e8:	2309      	movs	r3, #9
 80046ea:	617b      	str	r3, [r7, #20]
 80046ec:	e020      	b.n	8004730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 24000000U) && (hclk < 27700000U))
 80046ee:	68bb      	ldr	r3, [r7, #8]
 80046f0:	4a21      	ldr	r2, [pc, #132]	; (8004778 <USB_SetTurnaroundTime+0x138>)
 80046f2:	4293      	cmp	r3, r2
 80046f4:	d306      	bcc.n	8004704 <USB_SetTurnaroundTime+0xc4>
 80046f6:	68bb      	ldr	r3, [r7, #8]
 80046f8:	4a20      	ldr	r2, [pc, #128]	; (800477c <USB_SetTurnaroundTime+0x13c>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d802      	bhi.n	8004704 <USB_SetTurnaroundTime+0xc4>
    {
      /* hclk Clock Range between 24-27.7 MHz */
      UsbTrd = 0x8U;
 80046fe:	2308      	movs	r3, #8
 8004700:	617b      	str	r3, [r7, #20]
 8004702:	e015      	b.n	8004730 <USB_SetTurnaroundTime+0xf0>
    }
    else if ((hclk >= 27700000U) && (hclk < 32000000U))
 8004704:	68bb      	ldr	r3, [r7, #8]
 8004706:	4a1d      	ldr	r2, [pc, #116]	; (800477c <USB_SetTurnaroundTime+0x13c>)
 8004708:	4293      	cmp	r3, r2
 800470a:	d906      	bls.n	800471a <USB_SetTurnaroundTime+0xda>
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	4a1c      	ldr	r2, [pc, #112]	; (8004780 <USB_SetTurnaroundTime+0x140>)
 8004710:	4293      	cmp	r3, r2
 8004712:	d202      	bcs.n	800471a <USB_SetTurnaroundTime+0xda>
    {
      /* hclk Clock Range between 27.7-32 MHz */
      UsbTrd = 0x7U;
 8004714:	2307      	movs	r3, #7
 8004716:	617b      	str	r3, [r7, #20]
 8004718:	e00a      	b.n	8004730 <USB_SetTurnaroundTime+0xf0>
    }
    else /* if(hclk >= 32000000) */
    {
      /* hclk Clock Range between 32-200 MHz */
      UsbTrd = 0x6U;
 800471a:	2306      	movs	r3, #6
 800471c:	617b      	str	r3, [r7, #20]
 800471e:	e007      	b.n	8004730 <USB_SetTurnaroundTime+0xf0>
    }
  }
  else if (speed == USBD_HS_SPEED)
 8004720:	79fb      	ldrb	r3, [r7, #7]
 8004722:	2b00      	cmp	r3, #0
 8004724:	d102      	bne.n	800472c <USB_SetTurnaroundTime+0xec>
  {
    UsbTrd = USBD_HS_TRDT_VALUE;
 8004726:	2309      	movs	r3, #9
 8004728:	617b      	str	r3, [r7, #20]
 800472a:	e001      	b.n	8004730 <USB_SetTurnaroundTime+0xf0>
  }
  else
  {
    UsbTrd = USBD_DEFAULT_TRDT_VALUE;
 800472c:	2309      	movs	r3, #9
 800472e:	617b      	str	r3, [r7, #20]
  }

  USBx->GUSBCFG &= ~USB_OTG_GUSBCFG_TRDT;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	68db      	ldr	r3, [r3, #12]
 8004734:	f423 5270 	bic.w	r2, r3, #15360	; 0x3c00
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	60da      	str	r2, [r3, #12]
  USBx->GUSBCFG |= (uint32_t)((UsbTrd << 10) & USB_OTG_GUSBCFG_TRDT);
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	68da      	ldr	r2, [r3, #12]
 8004740:	697b      	ldr	r3, [r7, #20]
 8004742:	029b      	lsls	r3, r3, #10
 8004744:	f403 5370 	and.w	r3, r3, #15360	; 0x3c00
 8004748:	431a      	orrs	r2, r3
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	371c      	adds	r7, #28
 8004754:	46bd      	mov	sp, r7
 8004756:	f85d 7b04 	ldr.w	r7, [sp], #4
 800475a:	4770      	bx	lr
 800475c:	00d8acbf 	.word	0x00d8acbf
 8004760:	00e4e1c0 	.word	0x00e4e1c0
 8004764:	00f42400 	.word	0x00f42400
 8004768:	01067380 	.word	0x01067380
 800476c:	011a499f 	.word	0x011a499f
 8004770:	01312cff 	.word	0x01312cff
 8004774:	014ca43f 	.word	0x014ca43f
 8004778:	016e3600 	.word	0x016e3600
 800477c:	01a6ab1f 	.word	0x01a6ab1f
 8004780:	01e84800 	.word	0x01e84800

08004784 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004784:	b480      	push	{r7}
 8004786:	b083      	sub	sp, #12
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	689b      	ldr	r3, [r3, #8]
 8004790:	f043 0201 	orr.w	r2, r3, #1
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004798:	2300      	movs	r3, #0
}
 800479a:	4618      	mov	r0, r3
 800479c:	370c      	adds	r7, #12
 800479e:	46bd      	mov	sp, r7
 80047a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a4:	4770      	bx	lr

080047a6 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80047a6:	b480      	push	{r7}
 80047a8:	b083      	sub	sp, #12
 80047aa:	af00      	add	r7, sp, #0
 80047ac:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	f023 0201 	bic.w	r2, r3, #1
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 80047ba:	2300      	movs	r3, #0
}
 80047bc:	4618      	mov	r0, r3
 80047be:	370c      	adds	r7, #12
 80047c0:	46bd      	mov	sp, r7
 80047c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047c6:	4770      	bx	lr

080047c8 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 80047c8:	b580      	push	{r7, lr}
 80047ca:	b084      	sub	sp, #16
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	460b      	mov	r3, r1
 80047d2:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 80047d4:	2300      	movs	r3, #0
 80047d6:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	68db      	ldr	r3, [r3, #12]
 80047dc:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 80047e4:	78fb      	ldrb	r3, [r7, #3]
 80047e6:	2b01      	cmp	r3, #1
 80047e8:	d115      	bne.n	8004816 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	68db      	ldr	r3, [r3, #12]
 80047ee:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 80047f6:	2001      	movs	r0, #1
 80047f8:	f7fc fdf6 	bl	80013e8 <HAL_Delay>
      ms++;
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	3301      	adds	r3, #1
 8004800:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 8004802:	6878      	ldr	r0, [r7, #4]
 8004804:	f001 fa45 	bl	8005c92 <USB_GetMode>
 8004808:	4603      	mov	r3, r0
 800480a:	2b01      	cmp	r3, #1
 800480c:	d01e      	beq.n	800484c <USB_SetCurrentMode+0x84>
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	2b31      	cmp	r3, #49	; 0x31
 8004812:	d9f0      	bls.n	80047f6 <USB_SetCurrentMode+0x2e>
 8004814:	e01a      	b.n	800484c <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8004816:	78fb      	ldrb	r3, [r7, #3]
 8004818:	2b00      	cmp	r3, #0
 800481a:	d115      	bne.n	8004848 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8004828:	2001      	movs	r0, #1
 800482a:	f7fc fddd 	bl	80013e8 <HAL_Delay>
      ms++;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	3301      	adds	r3, #1
 8004832:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 8004834:	6878      	ldr	r0, [r7, #4]
 8004836:	f001 fa2c 	bl	8005c92 <USB_GetMode>
 800483a:	4603      	mov	r3, r0
 800483c:	2b00      	cmp	r3, #0
 800483e:	d005      	beq.n	800484c <USB_SetCurrentMode+0x84>
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	2b31      	cmp	r3, #49	; 0x31
 8004844:	d9f0      	bls.n	8004828 <USB_SetCurrentMode+0x60>
 8004846:	e001      	b.n	800484c <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 8004848:	2301      	movs	r3, #1
 800484a:	e005      	b.n	8004858 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	2b32      	cmp	r3, #50	; 0x32
 8004850:	d101      	bne.n	8004856 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 8004852:	2301      	movs	r3, #1
 8004854:	e000      	b.n	8004858 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 8004856:	2300      	movs	r3, #0
}
 8004858:	4618      	mov	r0, r3
 800485a:	3710      	adds	r7, #16
 800485c:	46bd      	mov	sp, r7
 800485e:	bd80      	pop	{r7, pc}

08004860 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004860:	b084      	sub	sp, #16
 8004862:	b580      	push	{r7, lr}
 8004864:	b086      	sub	sp, #24
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
 800486a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 800486e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004872:	2300      	movs	r3, #0
 8004874:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 800487a:	2300      	movs	r3, #0
 800487c:	613b      	str	r3, [r7, #16]
 800487e:	e009      	b.n	8004894 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004880:	687a      	ldr	r2, [r7, #4]
 8004882:	693b      	ldr	r3, [r7, #16]
 8004884:	3340      	adds	r3, #64	; 0x40
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	4413      	add	r3, r2
 800488a:	2200      	movs	r2, #0
 800488c:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 800488e:	693b      	ldr	r3, [r7, #16]
 8004890:	3301      	adds	r3, #1
 8004892:	613b      	str	r3, [r7, #16]
 8004894:	693b      	ldr	r3, [r7, #16]
 8004896:	2b0e      	cmp	r3, #14
 8004898:	d9f2      	bls.n	8004880 <USB_DevInit+0x20>
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
  }
#else
  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 800489a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800489c:	2b00      	cmp	r3, #0
 800489e:	d11c      	bne.n	80048da <USB_DevInit+0x7a>
  {
    /*
     * Disable HW VBUS sensing. VBUS is internally considered to be always
     * at VBUS-Valid level (5V).
     */
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80048a6:	685b      	ldr	r3, [r3, #4]
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80048ae:	f043 0302 	orr.w	r3, r3, #2
 80048b2:	6053      	str	r3, [r2, #4]
    USBx->GCCFG |= USB_OTG_GCCFG_NOVBUSSENS;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048b8:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSBSEN;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048c4:	f423 2200 	bic.w	r2, r3, #524288	; 0x80000
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBUSASEN;
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048d0:	f423 2280 	bic.w	r2, r3, #262144	; 0x40000
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	639a      	str	r2, [r3, #56]	; 0x38
 80048d8:	e00b      	b.n	80048f2 <USB_DevInit+0x92>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG &= ~USB_OTG_GCCFG_NOVBUSSENS;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048de:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	639a      	str	r2, [r3, #56]	; 0x38
    USBx->GCCFG |= USB_OTG_GCCFG_VBUSBSEN;
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80048ea:	f443 2200 	orr.w	r2, r3, #524288	; 0x80000
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	639a      	str	r2, [r3, #56]	; 0x38
  }
#endif /* defined(STM32F446xx) || defined(STM32F469xx) || defined(STM32F479xx) || defined(STM32F412Zx) || defined(STM32F412Vx) || defined(STM32F412Rx) || defined(STM32F412Cx) || defined(STM32F413xx) || defined(STM32F423xx) */

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 80048f8:	461a      	mov	r2, r3
 80048fa:	2300      	movs	r3, #0
 80048fc:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004904:	4619      	mov	r1, r3
 8004906:	68fb      	ldr	r3, [r7, #12]
 8004908:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800490c:	461a      	mov	r2, r3
 800490e:	680b      	ldr	r3, [r1, #0]
 8004910:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004912:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004914:	2b01      	cmp	r3, #1
 8004916:	d10c      	bne.n	8004932 <USB_DevInit+0xd2>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004918:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800491a:	2b00      	cmp	r3, #0
 800491c:	d104      	bne.n	8004928 <USB_DevInit+0xc8>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800491e:	2100      	movs	r1, #0
 8004920:	6878      	ldr	r0, [r7, #4]
 8004922:	f000 f965 	bl	8004bf0 <USB_SetDevSpeed>
 8004926:	e008      	b.n	800493a <USB_DevInit+0xda>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004928:	2101      	movs	r1, #1
 800492a:	6878      	ldr	r0, [r7, #4]
 800492c:	f000 f960 	bl	8004bf0 <USB_SetDevSpeed>
 8004930:	e003      	b.n	800493a <USB_DevInit+0xda>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004932:	2103      	movs	r1, #3
 8004934:	6878      	ldr	r0, [r7, #4]
 8004936:	f000 f95b 	bl	8004bf0 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800493a:	2110      	movs	r1, #16
 800493c:	6878      	ldr	r0, [r7, #4]
 800493e:	f000 f8f3 	bl	8004b28 <USB_FlushTxFifo>
 8004942:	4603      	mov	r3, r0
 8004944:	2b00      	cmp	r3, #0
 8004946:	d001      	beq.n	800494c <USB_DevInit+0xec>
  {
    ret = HAL_ERROR;
 8004948:	2301      	movs	r3, #1
 800494a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 f91f 	bl	8004b90 <USB_FlushRxFifo>
 8004952:	4603      	mov	r3, r0
 8004954:	2b00      	cmp	r3, #0
 8004956:	d001      	beq.n	800495c <USB_DevInit+0xfc>
  {
    ret = HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004962:	461a      	mov	r2, r3
 8004964:	2300      	movs	r3, #0
 8004966:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800496e:	461a      	mov	r2, r3
 8004970:	2300      	movs	r3, #0
 8004972:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800497a:	461a      	mov	r2, r3
 800497c:	2300      	movs	r3, #0
 800497e:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004980:	2300      	movs	r3, #0
 8004982:	613b      	str	r3, [r7, #16]
 8004984:	e043      	b.n	8004a0e <USB_DevInit+0x1ae>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	015a      	lsls	r2, r3, #5
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4413      	add	r3, r2
 800498e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004998:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800499c:	d118      	bne.n	80049d0 <USB_DevInit+0x170>
    {
      if (i == 0U)
 800499e:	693b      	ldr	r3, [r7, #16]
 80049a0:	2b00      	cmp	r3, #0
 80049a2:	d10a      	bne.n	80049ba <USB_DevInit+0x15a>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80049a4:	693b      	ldr	r3, [r7, #16]
 80049a6:	015a      	lsls	r2, r3, #5
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	4413      	add	r3, r2
 80049ac:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049b0:	461a      	mov	r2, r3
 80049b2:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 80049b6:	6013      	str	r3, [r2, #0]
 80049b8:	e013      	b.n	80049e2 <USB_DevInit+0x182>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 80049ba:	693b      	ldr	r3, [r7, #16]
 80049bc:	015a      	lsls	r2, r3, #5
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	4413      	add	r3, r2
 80049c2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049c6:	461a      	mov	r2, r3
 80049c8:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80049cc:	6013      	str	r3, [r2, #0]
 80049ce:	e008      	b.n	80049e2 <USB_DevInit+0x182>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 80049d0:	693b      	ldr	r3, [r7, #16]
 80049d2:	015a      	lsls	r2, r3, #5
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	4413      	add	r3, r2
 80049d8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049dc:	461a      	mov	r2, r3
 80049de:	2300      	movs	r3, #0
 80049e0:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 80049e2:	693b      	ldr	r3, [r7, #16]
 80049e4:	015a      	lsls	r2, r3, #5
 80049e6:	68fb      	ldr	r3, [r7, #12]
 80049e8:	4413      	add	r3, r2
 80049ea:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80049ee:	461a      	mov	r2, r3
 80049f0:	2300      	movs	r3, #0
 80049f2:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 80049f4:	693b      	ldr	r3, [r7, #16]
 80049f6:	015a      	lsls	r2, r3, #5
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	4413      	add	r3, r2
 80049fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004a00:	461a      	mov	r2, r3
 8004a02:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a06:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	3301      	adds	r3, #1
 8004a0c:	613b      	str	r3, [r7, #16]
 8004a0e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a10:	693a      	ldr	r2, [r7, #16]
 8004a12:	429a      	cmp	r2, r3
 8004a14:	d3b7      	bcc.n	8004986 <USB_DevInit+0x126>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a16:	2300      	movs	r3, #0
 8004a18:	613b      	str	r3, [r7, #16]
 8004a1a:	e043      	b.n	8004aa4 <USB_DevInit+0x244>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004a1c:	693b      	ldr	r3, [r7, #16]
 8004a1e:	015a      	lsls	r2, r3, #5
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4413      	add	r3, r2
 8004a24:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004a2e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004a32:	d118      	bne.n	8004a66 <USB_DevInit+0x206>
    {
      if (i == 0U)
 8004a34:	693b      	ldr	r3, [r7, #16]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d10a      	bne.n	8004a50 <USB_DevInit+0x1f0>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004a3a:	693b      	ldr	r3, [r7, #16]
 8004a3c:	015a      	lsls	r2, r3, #5
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	4413      	add	r3, r2
 8004a42:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a46:	461a      	mov	r2, r3
 8004a48:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004a4c:	6013      	str	r3, [r2, #0]
 8004a4e:	e013      	b.n	8004a78 <USB_DevInit+0x218>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004a50:	693b      	ldr	r3, [r7, #16]
 8004a52:	015a      	lsls	r2, r3, #5
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	4413      	add	r3, r2
 8004a58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a5c:	461a      	mov	r2, r3
 8004a5e:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004a62:	6013      	str	r3, [r2, #0]
 8004a64:	e008      	b.n	8004a78 <USB_DevInit+0x218>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	015a      	lsls	r2, r3, #5
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	4413      	add	r3, r2
 8004a6e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a72:	461a      	mov	r2, r3
 8004a74:	2300      	movs	r3, #0
 8004a76:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	015a      	lsls	r2, r3, #5
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	4413      	add	r3, r2
 8004a80:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a84:	461a      	mov	r2, r3
 8004a86:	2300      	movs	r3, #0
 8004a88:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	015a      	lsls	r2, r3, #5
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	4413      	add	r3, r2
 8004a92:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004a96:	461a      	mov	r2, r3
 8004a98:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004a9c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004a9e:	693b      	ldr	r3, [r7, #16]
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	613b      	str	r3, [r7, #16]
 8004aa4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aa6:	693a      	ldr	r2, [r7, #16]
 8004aa8:	429a      	cmp	r2, r3
 8004aaa:	d3b7      	bcc.n	8004a1c <USB_DevInit+0x1bc>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ab2:	691b      	ldr	r3, [r3, #16]
 8004ab4:	68fa      	ldr	r2, [r7, #12]
 8004ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004aba:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004abe:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	2200      	movs	r2, #0
 8004ac4:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8004acc:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8004ace:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad0:	2b00      	cmp	r3, #0
 8004ad2:	d105      	bne.n	8004ae0 <USB_DevInit+0x280>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	699b      	ldr	r3, [r3, #24]
 8004ad8:	f043 0210 	orr.w	r2, r3, #16
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	699a      	ldr	r2, [r3, #24]
 8004ae4:	4b0f      	ldr	r3, [pc, #60]	; (8004b24 <USB_DevInit+0x2c4>)
 8004ae6:	4313      	orrs	r3, r2
 8004ae8:	687a      	ldr	r2, [r7, #4]
 8004aea:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8004aec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d005      	beq.n	8004afe <USB_DevInit+0x29e>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	699b      	ldr	r3, [r3, #24]
 8004af6:	f043 0208 	orr.w	r2, r3, #8
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8004afe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004b00:	2b01      	cmp	r3, #1
 8004b02:	d107      	bne.n	8004b14 <USB_DevInit+0x2b4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	699b      	ldr	r3, [r3, #24]
 8004b08:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004b0c:	f043 0304 	orr.w	r3, r3, #4
 8004b10:	687a      	ldr	r2, [r7, #4]
 8004b12:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004b14:	7dfb      	ldrb	r3, [r7, #23]
}
 8004b16:	4618      	mov	r0, r3
 8004b18:	3718      	adds	r7, #24
 8004b1a:	46bd      	mov	sp, r7
 8004b1c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004b20:	b004      	add	sp, #16
 8004b22:	4770      	bx	lr
 8004b24:	803c3800 	.word	0x803c3800

08004b28 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004b28:	b480      	push	{r7}
 8004b2a:	b085      	sub	sp, #20
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	6078      	str	r0, [r7, #4]
 8004b30:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 8004b32:	2300      	movs	r3, #0
 8004b34:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	3301      	adds	r3, #1
 8004b3a:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a13      	ldr	r2, [pc, #76]	; (8004b8c <USB_FlushTxFifo+0x64>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d901      	bls.n	8004b48 <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 8004b44:	2303      	movs	r3, #3
 8004b46:	e01b      	b.n	8004b80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	691b      	ldr	r3, [r3, #16]
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	daf2      	bge.n	8004b36 <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004b54:	683b      	ldr	r3, [r7, #0]
 8004b56:	019b      	lsls	r3, r3, #6
 8004b58:	f043 0220 	orr.w	r2, r3, #32
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004b60:	68fb      	ldr	r3, [r7, #12]
 8004b62:	3301      	adds	r3, #1
 8004b64:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004b66:	68fb      	ldr	r3, [r7, #12]
 8004b68:	4a08      	ldr	r2, [pc, #32]	; (8004b8c <USB_FlushTxFifo+0x64>)
 8004b6a:	4293      	cmp	r3, r2
 8004b6c:	d901      	bls.n	8004b72 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8004b6e:	2303      	movs	r3, #3
 8004b70:	e006      	b.n	8004b80 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	691b      	ldr	r3, [r3, #16]
 8004b76:	f003 0320 	and.w	r3, r3, #32
 8004b7a:	2b20      	cmp	r3, #32
 8004b7c:	d0f0      	beq.n	8004b60 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8004b7e:	2300      	movs	r3, #0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3714      	adds	r7, #20
 8004b84:	46bd      	mov	sp, r7
 8004b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b8a:	4770      	bx	lr
 8004b8c:	00030d40 	.word	0x00030d40

08004b90 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8004b90:	b480      	push	{r7}
 8004b92:	b085      	sub	sp, #20
 8004b94:	af00      	add	r7, sp, #0
 8004b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	3301      	adds	r3, #1
 8004ba0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004ba2:	68fb      	ldr	r3, [r7, #12]
 8004ba4:	4a11      	ldr	r2, [pc, #68]	; (8004bec <USB_FlushRxFifo+0x5c>)
 8004ba6:	4293      	cmp	r3, r2
 8004ba8:	d901      	bls.n	8004bae <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 8004baa:	2303      	movs	r3, #3
 8004bac:	e018      	b.n	8004be0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8004bae:	687b      	ldr	r3, [r7, #4]
 8004bb0:	691b      	ldr	r3, [r3, #16]
 8004bb2:	2b00      	cmp	r3, #0
 8004bb4:	daf2      	bge.n	8004b9c <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 8004bb6:	2300      	movs	r3, #0
 8004bb8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	2210      	movs	r2, #16
 8004bbe:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	3301      	adds	r3, #1
 8004bc4:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	4a08      	ldr	r2, [pc, #32]	; (8004bec <USB_FlushRxFifo+0x5c>)
 8004bca:	4293      	cmp	r3, r2
 8004bcc:	d901      	bls.n	8004bd2 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8004bce:	2303      	movs	r3, #3
 8004bd0:	e006      	b.n	8004be0 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	691b      	ldr	r3, [r3, #16]
 8004bd6:	f003 0310 	and.w	r3, r3, #16
 8004bda:	2b10      	cmp	r3, #16
 8004bdc:	d0f0      	beq.n	8004bc0 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8004bde:	2300      	movs	r3, #0
}
 8004be0:	4618      	mov	r0, r3
 8004be2:	3714      	adds	r7, #20
 8004be4:	46bd      	mov	sp, r7
 8004be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bea:	4770      	bx	lr
 8004bec:	00030d40 	.word	0x00030d40

08004bf0 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004bf0:	b480      	push	{r7}
 8004bf2:	b085      	sub	sp, #20
 8004bf4:	af00      	add	r7, sp, #0
 8004bf6:	6078      	str	r0, [r7, #4]
 8004bf8:	460b      	mov	r3, r1
 8004bfa:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c06:	681a      	ldr	r2, [r3, #0]
 8004c08:	78fb      	ldrb	r3, [r7, #3]
 8004c0a:	68f9      	ldr	r1, [r7, #12]
 8004c0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004c10:	4313      	orrs	r3, r2
 8004c12:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8004c14:	2300      	movs	r3, #0
}
 8004c16:	4618      	mov	r0, r3
 8004c18:	3714      	adds	r7, #20
 8004c1a:	46bd      	mov	sp, r7
 8004c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c20:	4770      	bx	lr

08004c22 <USB_GetDevSpeed>:
  *          This parameter can be one of these values:
  *            @arg USBD_HS_SPEED: High speed mode
  *            @arg USBD_FS_SPEED: Full speed mode
  */
uint8_t USB_GetDevSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8004c22:	b480      	push	{r7}
 8004c24:	b087      	sub	sp, #28
 8004c26:	af00      	add	r7, sp, #0
 8004c28:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	613b      	str	r3, [r7, #16]
  uint8_t speed;
  uint32_t DevEnumSpeed = USBx_DEVICE->DSTS & USB_OTG_DSTS_ENUMSPD;
 8004c2e:	693b      	ldr	r3, [r7, #16]
 8004c30:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c34:	689b      	ldr	r3, [r3, #8]
 8004c36:	f003 0306 	and.w	r3, r3, #6
 8004c3a:	60fb      	str	r3, [r7, #12]

  if (DevEnumSpeed == DSTS_ENUMSPD_HS_PHY_30MHZ_OR_60MHZ)
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d102      	bne.n	8004c48 <USB_GetDevSpeed+0x26>
  {
    speed = USBD_HS_SPEED;
 8004c42:	2300      	movs	r3, #0
 8004c44:	75fb      	strb	r3, [r7, #23]
 8004c46:	e00a      	b.n	8004c5e <USB_GetDevSpeed+0x3c>
  }
  else if ((DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_30MHZ_OR_60MHZ) ||
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d002      	beq.n	8004c54 <USB_GetDevSpeed+0x32>
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2b06      	cmp	r3, #6
 8004c52:	d102      	bne.n	8004c5a <USB_GetDevSpeed+0x38>
           (DevEnumSpeed == DSTS_ENUMSPD_FS_PHY_48MHZ))
  {
    speed = USBD_FS_SPEED;
 8004c54:	2302      	movs	r3, #2
 8004c56:	75fb      	strb	r3, [r7, #23]
 8004c58:	e001      	b.n	8004c5e <USB_GetDevSpeed+0x3c>
  }
  else
  {
    speed = 0xFU;
 8004c5a:	230f      	movs	r3, #15
 8004c5c:	75fb      	strb	r3, [r7, #23]
  }

  return speed;
 8004c5e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c60:	4618      	mov	r0, r3
 8004c62:	371c      	adds	r7, #28
 8004c64:	46bd      	mov	sp, r7
 8004c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6a:	4770      	bx	lr

08004c6c <USB_ActivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b085      	sub	sp, #20
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	6078      	str	r0, [r7, #4]
 8004c74:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004c7a:	683b      	ldr	r3, [r7, #0]
 8004c7c:	781b      	ldrb	r3, [r3, #0]
 8004c7e:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8004c80:	683b      	ldr	r3, [r7, #0]
 8004c82:	785b      	ldrb	r3, [r3, #1]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d13a      	bne.n	8004cfe <USB_ActivateEndpoint+0x92>
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK));
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004c8e:	69da      	ldr	r2, [r3, #28]
 8004c90:	683b      	ldr	r3, [r7, #0]
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	f003 030f 	and.w	r3, r3, #15
 8004c98:	2101      	movs	r1, #1
 8004c9a:	fa01 f303 	lsl.w	r3, r1, r3
 8004c9e:	b29b      	uxth	r3, r3
 8004ca0:	68f9      	ldr	r1, [r7, #12]
 8004ca2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ca6:	4313      	orrs	r3, r2
 8004ca8:	61cb      	str	r3, [r1, #28]

    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_USBAEP) == 0U)
 8004caa:	68bb      	ldr	r3, [r7, #8]
 8004cac:	015a      	lsls	r2, r3, #5
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	4413      	add	r3, r2
 8004cb2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004cb6:	681b      	ldr	r3, [r3, #0]
 8004cb8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d155      	bne.n	8004d6c <USB_ActivateEndpoint+0x100>
    {
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004cc0:	68bb      	ldr	r3, [r7, #8]
 8004cc2:	015a      	lsls	r2, r3, #5
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	4413      	add	r3, r2
 8004cc8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	683b      	ldr	r3, [r7, #0]
 8004cd0:	68db      	ldr	r3, [r3, #12]
 8004cd2:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004cd6:	683b      	ldr	r3, [r7, #0]
 8004cd8:	791b      	ldrb	r3, [r3, #4]
 8004cda:	049b      	lsls	r3, r3, #18
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004cdc:	4319      	orrs	r1, r3
                                   ((uint32_t)ep->type << 18) | (epnum << 22) |
 8004cde:	68bb      	ldr	r3, [r7, #8]
 8004ce0:	059b      	lsls	r3, r3, #22
 8004ce2:	430b      	orrs	r3, r1
      USBx_INEP(epnum)->DIEPCTL |= (ep->maxpacket & USB_OTG_DIEPCTL_MPSIZ) |
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	68ba      	ldr	r2, [r7, #8]
 8004ce8:	0151      	lsls	r1, r2, #5
 8004cea:	68fa      	ldr	r2, [r7, #12]
 8004cec:	440a      	add	r2, r1
 8004cee:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004cf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004cf6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004cfa:	6013      	str	r3, [r2, #0]
 8004cfc:	e036      	b.n	8004d6c <USB_ActivateEndpoint+0x100>
                                   USB_OTG_DIEPCTL_USBAEP;
    }
  }
  else
  {
    USBx_DEVICE->DAINTMSK |= USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16);
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004d04:	69da      	ldr	r2, [r3, #28]
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	781b      	ldrb	r3, [r3, #0]
 8004d0a:	f003 030f 	and.w	r3, r3, #15
 8004d0e:	2101      	movs	r1, #1
 8004d10:	fa01 f303 	lsl.w	r3, r1, r3
 8004d14:	041b      	lsls	r3, r3, #16
 8004d16:	68f9      	ldr	r1, [r7, #12]
 8004d18:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004d1c:	4313      	orrs	r3, r2
 8004d1e:	61cb      	str	r3, [r1, #28]

    if (((USBx_OUTEP(epnum)->DOEPCTL) & USB_OTG_DOEPCTL_USBAEP) == 0U)
 8004d20:	68bb      	ldr	r3, [r7, #8]
 8004d22:	015a      	lsls	r2, r3, #5
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	4413      	add	r3, r2
 8004d28:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d11a      	bne.n	8004d6c <USB_ActivateEndpoint+0x100>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d36:	68bb      	ldr	r3, [r7, #8]
 8004d38:	015a      	lsls	r2, r3, #5
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004d42:	681a      	ldr	r2, [r3, #0]
 8004d44:	683b      	ldr	r3, [r7, #0]
 8004d46:	68db      	ldr	r3, [r3, #12]
 8004d48:	f3c3 010a 	ubfx	r1, r3, #0, #11
                                    ((uint32_t)ep->type << 18) |
 8004d4c:	683b      	ldr	r3, [r7, #0]
 8004d4e:	791b      	ldrb	r3, [r3, #4]
 8004d50:	049b      	lsls	r3, r3, #18
      USBx_OUTEP(epnum)->DOEPCTL |= (ep->maxpacket & USB_OTG_DOEPCTL_MPSIZ) |
 8004d52:	430b      	orrs	r3, r1
 8004d54:	4313      	orrs	r3, r2
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	0151      	lsls	r1, r2, #5
 8004d5a:	68fa      	ldr	r2, [r7, #12]
 8004d5c:	440a      	add	r2, r1
 8004d5e:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004d62:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004d66:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d6a:	6013      	str	r3, [r2, #0]
                                    USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_USBAEP;
    }
  }
  return HAL_OK;
 8004d6c:	2300      	movs	r3, #0
}
 8004d6e:	4618      	mov	r0, r3
 8004d70:	3714      	adds	r7, #20
 8004d72:	46bd      	mov	sp, r7
 8004d74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d78:	4770      	bx	lr
	...

08004d7c <USB_DeactivateEndpoint>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8004d7c:	b480      	push	{r7}
 8004d7e:	b085      	sub	sp, #20
 8004d80:	af00      	add	r7, sp, #0
 8004d82:	6078      	str	r0, [r7, #4]
 8004d84:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8004d8a:	683b      	ldr	r3, [r7, #0]
 8004d8c:	781b      	ldrb	r3, [r3, #0]
 8004d8e:	60bb      	str	r3, [r7, #8]

  /* Read DEPCTLn register */
  if (ep->is_in == 1U)
 8004d90:	683b      	ldr	r3, [r7, #0]
 8004d92:	785b      	ldrb	r3, [r3, #1]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d161      	bne.n	8004e5c <USB_DeactivateEndpoint+0xe0>
  {
    if ((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004d98:	68bb      	ldr	r3, [r7, #8]
 8004d9a:	015a      	lsls	r2, r3, #5
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	4413      	add	r3, r2
 8004da0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004da4:	681b      	ldr	r3, [r3, #0]
 8004da6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004daa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004dae:	d11f      	bne.n	8004df0 <USB_DeactivateEndpoint+0x74>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SNAK;
 8004db0:	68bb      	ldr	r3, [r7, #8]
 8004db2:	015a      	lsls	r2, r3, #5
 8004db4:	68fb      	ldr	r3, [r7, #12]
 8004db6:	4413      	add	r3, r2
 8004db8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004dbc:	681b      	ldr	r3, [r3, #0]
 8004dbe:	68ba      	ldr	r2, [r7, #8]
 8004dc0:	0151      	lsls	r1, r2, #5
 8004dc2:	68fa      	ldr	r2, [r7, #12]
 8004dc4:	440a      	add	r2, r1
 8004dc6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004dce:	6013      	str	r3, [r2, #0]
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_EPDIS;
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	015a      	lsls	r2, r3, #5
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	4413      	add	r3, r2
 8004dd8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	68ba      	ldr	r2, [r7, #8]
 8004de0:	0151      	lsls	r1, r2, #5
 8004de2:	68fa      	ldr	r2, [r7, #12]
 8004de4:	440a      	add	r2, r1
 8004de6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004dea:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004dee:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004df6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	781b      	ldrb	r3, [r3, #0]
 8004dfc:	f003 030f 	and.w	r3, r3, #15
 8004e00:	2101      	movs	r1, #1
 8004e02:	fa01 f303 	lsl.w	r3, r1, r3
 8004e06:	b29b      	uxth	r3, r3
 8004e08:	43db      	mvns	r3, r3
 8004e0a:	68f9      	ldr	r1, [r7, #12]
 8004e0c:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e10:	4013      	ands	r3, r2
 8004e12:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_IEPM & (uint32_t)(1UL << (ep->num & EP_ADDR_MSK)));
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e1a:	69da      	ldr	r2, [r3, #28]
 8004e1c:	683b      	ldr	r3, [r7, #0]
 8004e1e:	781b      	ldrb	r3, [r3, #0]
 8004e20:	f003 030f 	and.w	r3, r3, #15
 8004e24:	2101      	movs	r1, #1
 8004e26:	fa01 f303 	lsl.w	r3, r1, r3
 8004e2a:	b29b      	uxth	r3, r3
 8004e2c:	43db      	mvns	r3, r3
 8004e2e:	68f9      	ldr	r1, [r7, #12]
 8004e30:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004e34:	4013      	ands	r3, r2
 8004e36:	61cb      	str	r3, [r1, #28]
    USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_USBAEP |
 8004e38:	68bb      	ldr	r3, [r7, #8]
 8004e3a:	015a      	lsls	r2, r3, #5
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	4413      	add	r3, r2
 8004e40:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e44:	681a      	ldr	r2, [r3, #0]
 8004e46:	68bb      	ldr	r3, [r7, #8]
 8004e48:	0159      	lsls	r1, r3, #5
 8004e4a:	68fb      	ldr	r3, [r7, #12]
 8004e4c:	440b      	add	r3, r1
 8004e4e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004e52:	4619      	mov	r1, r3
 8004e54:	4b35      	ldr	r3, [pc, #212]	; (8004f2c <USB_DeactivateEndpoint+0x1b0>)
 8004e56:	4013      	ands	r3, r2
 8004e58:	600b      	str	r3, [r1, #0]
 8004e5a:	e060      	b.n	8004f1e <USB_DeactivateEndpoint+0x1a2>
                                   USB_OTG_DIEPCTL_SD0PID_SEVNFRM |
                                   USB_OTG_DIEPCTL_EPTYP);
  }
  else
  {
    if ((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004e5c:	68bb      	ldr	r3, [r7, #8]
 8004e5e:	015a      	lsls	r2, r3, #5
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4413      	add	r3, r2
 8004e64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004e6e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004e72:	d11f      	bne.n	8004eb4 <USB_DeactivateEndpoint+0x138>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SNAK;
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	015a      	lsls	r2, r3, #5
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	4413      	add	r3, r2
 8004e7c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	68ba      	ldr	r2, [r7, #8]
 8004e84:	0151      	lsls	r1, r2, #5
 8004e86:	68fa      	ldr	r2, [r7, #12]
 8004e88:	440a      	add	r2, r1
 8004e8a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004e8e:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8004e92:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_EPDIS;
 8004e94:	68bb      	ldr	r3, [r7, #8]
 8004e96:	015a      	lsls	r2, r3, #5
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	4413      	add	r3, r2
 8004e9c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	68ba      	ldr	r2, [r7, #8]
 8004ea4:	0151      	lsls	r1, r2, #5
 8004ea6:	68fa      	ldr	r2, [r7, #12]
 8004ea8:	440a      	add	r2, r1
 8004eaa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8004eae:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8004eb2:	6013      	str	r3, [r2, #0]
    }

    USBx_DEVICE->DEACHMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eba:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	781b      	ldrb	r3, [r3, #0]
 8004ec0:	f003 030f 	and.w	r3, r3, #15
 8004ec4:	2101      	movs	r1, #1
 8004ec6:	fa01 f303 	lsl.w	r3, r1, r3
 8004eca:	041b      	lsls	r3, r3, #16
 8004ecc:	43db      	mvns	r3, r3
 8004ece:	68f9      	ldr	r1, [r7, #12]
 8004ed0:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ed4:	4013      	ands	r3, r2
 8004ed6:	63cb      	str	r3, [r1, #60]	; 0x3c
    USBx_DEVICE->DAINTMSK &= ~(USB_OTG_DAINTMSK_OEPM & ((uint32_t)(1UL << (ep->num & EP_ADDR_MSK)) << 16));
 8004ed8:	68fb      	ldr	r3, [r7, #12]
 8004eda:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ede:	69da      	ldr	r2, [r3, #28]
 8004ee0:	683b      	ldr	r3, [r7, #0]
 8004ee2:	781b      	ldrb	r3, [r3, #0]
 8004ee4:	f003 030f 	and.w	r3, r3, #15
 8004ee8:	2101      	movs	r1, #1
 8004eea:	fa01 f303 	lsl.w	r3, r1, r3
 8004eee:	041b      	lsls	r3, r3, #16
 8004ef0:	43db      	mvns	r3, r3
 8004ef2:	68f9      	ldr	r1, [r7, #12]
 8004ef4:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004ef8:	4013      	ands	r3, r2
 8004efa:	61cb      	str	r3, [r1, #28]
    USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_USBAEP |
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	015a      	lsls	r2, r3, #5
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4413      	add	r3, r2
 8004f04:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f08:	681a      	ldr	r2, [r3, #0]
 8004f0a:	68bb      	ldr	r3, [r7, #8]
 8004f0c:	0159      	lsls	r1, r3, #5
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	440b      	add	r3, r1
 8004f12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f16:	4619      	mov	r1, r3
 8004f18:	4b05      	ldr	r3, [pc, #20]	; (8004f30 <USB_DeactivateEndpoint+0x1b4>)
 8004f1a:	4013      	ands	r3, r2
 8004f1c:	600b      	str	r3, [r1, #0]
                                    USB_OTG_DOEPCTL_MPSIZ |
                                    USB_OTG_DOEPCTL_SD0PID_SEVNFRM |
                                    USB_OTG_DOEPCTL_EPTYP);
  }

  return HAL_OK;
 8004f1e:	2300      	movs	r3, #0
}
 8004f20:	4618      	mov	r0, r3
 8004f22:	3714      	adds	r7, #20
 8004f24:	46bd      	mov	sp, r7
 8004f26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f2a:	4770      	bx	lr
 8004f2c:	ec337800 	.word	0xec337800
 8004f30:	eff37800 	.word	0xeff37800

08004f34 <USB_EPStartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b08a      	sub	sp, #40	; 0x28
 8004f38:	af02      	add	r7, sp, #8
 8004f3a:	60f8      	str	r0, [r7, #12]
 8004f3c:	60b9      	str	r1, [r7, #8]
 8004f3e:	4613      	mov	r3, r2
 8004f40:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	61fb      	str	r3, [r7, #28]
  uint32_t epnum = (uint32_t)ep->num;
 8004f46:	68bb      	ldr	r3, [r7, #8]
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	61bb      	str	r3, [r7, #24]
  uint16_t pktcnt;

  /* IN endpoint */
  if (ep->is_in == 1U)
 8004f4c:	68bb      	ldr	r3, [r7, #8]
 8004f4e:	785b      	ldrb	r3, [r3, #1]
 8004f50:	2b01      	cmp	r3, #1
 8004f52:	f040 815c 	bne.w	800520e <USB_EPStartXfer+0x2da>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 8004f56:	68bb      	ldr	r3, [r7, #8]
 8004f58:	699b      	ldr	r3, [r3, #24]
 8004f5a:	2b00      	cmp	r3, #0
 8004f5c:	d132      	bne.n	8004fc4 <USB_EPStartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004f5e:	69bb      	ldr	r3, [r7, #24]
 8004f60:	015a      	lsls	r2, r3, #5
 8004f62:	69fb      	ldr	r3, [r7, #28]
 8004f64:	4413      	add	r3, r2
 8004f66:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f6a:	691b      	ldr	r3, [r3, #16]
 8004f6c:	69ba      	ldr	r2, [r7, #24]
 8004f6e:	0151      	lsls	r1, r2, #5
 8004f70:	69fa      	ldr	r2, [r7, #28]
 8004f72:	440a      	add	r2, r1
 8004f74:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f78:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8004f7c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8004f80:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8004f82:	69bb      	ldr	r3, [r7, #24]
 8004f84:	015a      	lsls	r2, r3, #5
 8004f86:	69fb      	ldr	r3, [r7, #28]
 8004f88:	4413      	add	r3, r2
 8004f8a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f8e:	691b      	ldr	r3, [r3, #16]
 8004f90:	69ba      	ldr	r2, [r7, #24]
 8004f92:	0151      	lsls	r1, r2, #5
 8004f94:	69fa      	ldr	r2, [r7, #28]
 8004f96:	440a      	add	r2, r1
 8004f98:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004f9c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8004fa0:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fa2:	69bb      	ldr	r3, [r7, #24]
 8004fa4:	015a      	lsls	r2, r3, #5
 8004fa6:	69fb      	ldr	r3, [r7, #28]
 8004fa8:	4413      	add	r3, r2
 8004faa:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fae:	691b      	ldr	r3, [r3, #16]
 8004fb0:	69ba      	ldr	r2, [r7, #24]
 8004fb2:	0151      	lsls	r1, r2, #5
 8004fb4:	69fa      	ldr	r2, [r7, #28]
 8004fb6:	440a      	add	r2, r1
 8004fb8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fbc:	0cdb      	lsrs	r3, r3, #19
 8004fbe:	04db      	lsls	r3, r3, #19
 8004fc0:	6113      	str	r3, [r2, #16]
 8004fc2:	e074      	b.n	80050ae <USB_EPStartXfer+0x17a>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8004fc4:	69bb      	ldr	r3, [r7, #24]
 8004fc6:	015a      	lsls	r2, r3, #5
 8004fc8:	69fb      	ldr	r3, [r7, #28]
 8004fca:	4413      	add	r3, r2
 8004fcc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004fd0:	691b      	ldr	r3, [r3, #16]
 8004fd2:	69ba      	ldr	r2, [r7, #24]
 8004fd4:	0151      	lsls	r1, r2, #5
 8004fd6:	69fa      	ldr	r2, [r7, #28]
 8004fd8:	440a      	add	r2, r1
 8004fda:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004fde:	0cdb      	lsrs	r3, r3, #19
 8004fe0:	04db      	lsls	r3, r3, #19
 8004fe2:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	015a      	lsls	r2, r3, #5
 8004fe8:	69fb      	ldr	r3, [r7, #28]
 8004fea:	4413      	add	r3, r2
 8004fec:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ff0:	691b      	ldr	r3, [r3, #16]
 8004ff2:	69ba      	ldr	r2, [r7, #24]
 8004ff4:	0151      	lsls	r1, r2, #5
 8004ff6:	69fa      	ldr	r2, [r7, #28]
 8004ff8:	440a      	add	r2, r1
 8004ffa:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8004ffe:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005002:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005006:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	015a      	lsls	r2, r3, #5
 800500c:	69fb      	ldr	r3, [r7, #28]
 800500e:	4413      	add	r3, r2
 8005010:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005014:	691a      	ldr	r2, [r3, #16]
                                     (((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket) << 19));
 8005016:	68bb      	ldr	r3, [r7, #8]
 8005018:	6999      	ldr	r1, [r3, #24]
 800501a:	68bb      	ldr	r3, [r7, #8]
 800501c:	68db      	ldr	r3, [r3, #12]
 800501e:	440b      	add	r3, r1
 8005020:	1e59      	subs	r1, r3, #1
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	68db      	ldr	r3, [r3, #12]
 8005026:	fbb1 f3f3 	udiv	r3, r1, r3
 800502a:	04d9      	lsls	r1, r3, #19
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT &
 800502c:	4b9d      	ldr	r3, [pc, #628]	; (80052a4 <USB_EPStartXfer+0x370>)
 800502e:	400b      	ands	r3, r1
 8005030:	69b9      	ldr	r1, [r7, #24]
 8005032:	0148      	lsls	r0, r1, #5
 8005034:	69f9      	ldr	r1, [r7, #28]
 8005036:	4401      	add	r1, r0
 8005038:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 800503c:	4313      	orrs	r3, r2
 800503e:	610b      	str	r3, [r1, #16]

      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	015a      	lsls	r2, r3, #5
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	4413      	add	r3, r2
 8005048:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800504c:	691a      	ldr	r2, [r3, #16]
 800504e:	68bb      	ldr	r3, [r7, #8]
 8005050:	699b      	ldr	r3, [r3, #24]
 8005052:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005056:	69b9      	ldr	r1, [r7, #24]
 8005058:	0148      	lsls	r0, r1, #5
 800505a:	69f9      	ldr	r1, [r7, #28]
 800505c:	4401      	add	r1, r0
 800505e:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 8005062:	4313      	orrs	r3, r2
 8005064:	610b      	str	r3, [r1, #16]

      if (ep->type == EP_TYPE_ISOC)
 8005066:	68bb      	ldr	r3, [r7, #8]
 8005068:	791b      	ldrb	r3, [r3, #4]
 800506a:	2b01      	cmp	r3, #1
 800506c:	d11f      	bne.n	80050ae <USB_EPStartXfer+0x17a>
      {
        USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_MULCNT);
 800506e:	69bb      	ldr	r3, [r7, #24]
 8005070:	015a      	lsls	r2, r3, #5
 8005072:	69fb      	ldr	r3, [r7, #28]
 8005074:	4413      	add	r3, r2
 8005076:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	69ba      	ldr	r2, [r7, #24]
 800507e:	0151      	lsls	r1, r2, #5
 8005080:	69fa      	ldr	r2, [r7, #28]
 8005082:	440a      	add	r2, r1
 8005084:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005088:	f023 43c0 	bic.w	r3, r3, #1610612736	; 0x60000000
 800508c:	6113      	str	r3, [r2, #16]
        USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_MULCNT & (1U << 29));
 800508e:	69bb      	ldr	r3, [r7, #24]
 8005090:	015a      	lsls	r2, r3, #5
 8005092:	69fb      	ldr	r3, [r7, #28]
 8005094:	4413      	add	r3, r2
 8005096:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800509a:	691b      	ldr	r3, [r3, #16]
 800509c:	69ba      	ldr	r2, [r7, #24]
 800509e:	0151      	lsls	r1, r2, #5
 80050a0:	69fa      	ldr	r2, [r7, #28]
 80050a2:	440a      	add	r2, r1
 80050a4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80050a8:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80050ac:	6113      	str	r3, [r2, #16]
      }
    }

    if (dma == 1U)
 80050ae:	79fb      	ldrb	r3, [r7, #7]
 80050b0:	2b01      	cmp	r3, #1
 80050b2:	d14b      	bne.n	800514c <USB_EPStartXfer+0x218>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80050b4:	68bb      	ldr	r3, [r7, #8]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d009      	beq.n	80050d0 <USB_EPStartXfer+0x19c>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 80050bc:	69bb      	ldr	r3, [r7, #24]
 80050be:	015a      	lsls	r2, r3, #5
 80050c0:	69fb      	ldr	r3, [r7, #28]
 80050c2:	4413      	add	r3, r2
 80050c4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050c8:	461a      	mov	r2, r3
 80050ca:	68bb      	ldr	r3, [r7, #8]
 80050cc:	695b      	ldr	r3, [r3, #20]
 80050ce:	6153      	str	r3, [r2, #20]
      }

      if (ep->type == EP_TYPE_ISOC)
 80050d0:	68bb      	ldr	r3, [r7, #8]
 80050d2:	791b      	ldrb	r3, [r3, #4]
 80050d4:	2b01      	cmp	r3, #1
 80050d6:	d128      	bne.n	800512a <USB_EPStartXfer+0x1f6>
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80050d8:	69fb      	ldr	r3, [r7, #28]
 80050da:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80050de:	689b      	ldr	r3, [r3, #8]
 80050e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d110      	bne.n	800510a <USB_EPStartXfer+0x1d6>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80050e8:	69bb      	ldr	r3, [r7, #24]
 80050ea:	015a      	lsls	r2, r3, #5
 80050ec:	69fb      	ldr	r3, [r7, #28]
 80050ee:	4413      	add	r3, r2
 80050f0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	69ba      	ldr	r2, [r7, #24]
 80050f8:	0151      	lsls	r1, r2, #5
 80050fa:	69fa      	ldr	r2, [r7, #28]
 80050fc:	440a      	add	r2, r1
 80050fe:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005102:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005106:	6013      	str	r3, [r2, #0]
 8005108:	e00f      	b.n	800512a <USB_EPStartXfer+0x1f6>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 800510a:	69bb      	ldr	r3, [r7, #24]
 800510c:	015a      	lsls	r2, r3, #5
 800510e:	69fb      	ldr	r3, [r7, #28]
 8005110:	4413      	add	r3, r2
 8005112:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	69ba      	ldr	r2, [r7, #24]
 800511a:	0151      	lsls	r1, r2, #5
 800511c:	69fa      	ldr	r2, [r7, #28]
 800511e:	440a      	add	r2, r1
 8005120:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005124:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005128:	6013      	str	r3, [r2, #0]
        }
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800512a:	69bb      	ldr	r3, [r7, #24]
 800512c:	015a      	lsls	r2, r3, #5
 800512e:	69fb      	ldr	r3, [r7, #28]
 8005130:	4413      	add	r3, r2
 8005132:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	69ba      	ldr	r2, [r7, #24]
 800513a:	0151      	lsls	r1, r2, #5
 800513c:	69fa      	ldr	r2, [r7, #28]
 800513e:	440a      	add	r2, r1
 8005140:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005144:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005148:	6013      	str	r3, [r2, #0]
 800514a:	e133      	b.n	80053b4 <USB_EPStartXfer+0x480>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 800514c:	69bb      	ldr	r3, [r7, #24]
 800514e:	015a      	lsls	r2, r3, #5
 8005150:	69fb      	ldr	r3, [r7, #28]
 8005152:	4413      	add	r3, r2
 8005154:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	69ba      	ldr	r2, [r7, #24]
 800515c:	0151      	lsls	r1, r2, #5
 800515e:	69fa      	ldr	r2, [r7, #28]
 8005160:	440a      	add	r2, r1
 8005162:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005166:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 800516a:	6013      	str	r3, [r2, #0]

      if (ep->type != EP_TYPE_ISOC)
 800516c:	68bb      	ldr	r3, [r7, #8]
 800516e:	791b      	ldrb	r3, [r3, #4]
 8005170:	2b01      	cmp	r3, #1
 8005172:	d015      	beq.n	80051a0 <USB_EPStartXfer+0x26c>
      {
        /* Enable the Tx FIFO Empty Interrupt for this EP */
        if (ep->xfer_len > 0U)
 8005174:	68bb      	ldr	r3, [r7, #8]
 8005176:	699b      	ldr	r3, [r3, #24]
 8005178:	2b00      	cmp	r3, #0
 800517a:	f000 811b 	beq.w	80053b4 <USB_EPStartXfer+0x480>
        {
          USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005184:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005186:	68bb      	ldr	r3, [r7, #8]
 8005188:	781b      	ldrb	r3, [r3, #0]
 800518a:	f003 030f 	and.w	r3, r3, #15
 800518e:	2101      	movs	r1, #1
 8005190:	fa01 f303 	lsl.w	r3, r1, r3
 8005194:	69f9      	ldr	r1, [r7, #28]
 8005196:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800519a:	4313      	orrs	r3, r2
 800519c:	634b      	str	r3, [r1, #52]	; 0x34
 800519e:	e109      	b.n	80053b4 <USB_EPStartXfer+0x480>
        }
      }
      else
      {
        if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 80051a0:	69fb      	ldr	r3, [r7, #28]
 80051a2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80051a6:	689b      	ldr	r3, [r3, #8]
 80051a8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d110      	bne.n	80051d2 <USB_EPStartXfer+0x29e>
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SODDFRM;
 80051b0:	69bb      	ldr	r3, [r7, #24]
 80051b2:	015a      	lsls	r2, r3, #5
 80051b4:	69fb      	ldr	r3, [r7, #28]
 80051b6:	4413      	add	r3, r2
 80051b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	69ba      	ldr	r2, [r7, #24]
 80051c0:	0151      	lsls	r1, r2, #5
 80051c2:	69fa      	ldr	r2, [r7, #28]
 80051c4:	440a      	add	r2, r1
 80051c6:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80051ce:	6013      	str	r3, [r2, #0]
 80051d0:	e00f      	b.n	80051f2 <USB_EPStartXfer+0x2be>
        }
        else
        {
          USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM;
 80051d2:	69bb      	ldr	r3, [r7, #24]
 80051d4:	015a      	lsls	r2, r3, #5
 80051d6:	69fb      	ldr	r3, [r7, #28]
 80051d8:	4413      	add	r3, r2
 80051da:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	69ba      	ldr	r2, [r7, #24]
 80051e2:	0151      	lsls	r1, r2, #5
 80051e4:	69fa      	ldr	r2, [r7, #28]
 80051e6:	440a      	add	r2, r1
 80051e8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80051ec:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80051f0:	6013      	str	r3, [r2, #0]
        }

        (void)USB_WritePacket(USBx, ep->xfer_buff, ep->num, (uint16_t)ep->xfer_len, dma);
 80051f2:	68bb      	ldr	r3, [r7, #8]
 80051f4:	6919      	ldr	r1, [r3, #16]
 80051f6:	68bb      	ldr	r3, [r7, #8]
 80051f8:	781a      	ldrb	r2, [r3, #0]
 80051fa:	68bb      	ldr	r3, [r7, #8]
 80051fc:	699b      	ldr	r3, [r3, #24]
 80051fe:	b298      	uxth	r0, r3
 8005200:	79fb      	ldrb	r3, [r7, #7]
 8005202:	9300      	str	r3, [sp, #0]
 8005204:	4603      	mov	r3, r0
 8005206:	68f8      	ldr	r0, [r7, #12]
 8005208:	f000 fade 	bl	80057c8 <USB_WritePacket>
 800520c:	e0d2      	b.n	80053b4 <USB_EPStartXfer+0x480>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 800520e:	69bb      	ldr	r3, [r7, #24]
 8005210:	015a      	lsls	r2, r3, #5
 8005212:	69fb      	ldr	r3, [r7, #28]
 8005214:	4413      	add	r3, r2
 8005216:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800521a:	691b      	ldr	r3, [r3, #16]
 800521c:	69ba      	ldr	r2, [r7, #24]
 800521e:	0151      	lsls	r1, r2, #5
 8005220:	69fa      	ldr	r2, [r7, #28]
 8005222:	440a      	add	r2, r1
 8005224:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005228:	0cdb      	lsrs	r3, r3, #19
 800522a:	04db      	lsls	r3, r3, #19
 800522c:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 800522e:	69bb      	ldr	r3, [r7, #24]
 8005230:	015a      	lsls	r2, r3, #5
 8005232:	69fb      	ldr	r3, [r7, #28]
 8005234:	4413      	add	r3, r2
 8005236:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800523a:	691b      	ldr	r3, [r3, #16]
 800523c:	69ba      	ldr	r2, [r7, #24]
 800523e:	0151      	lsls	r1, r2, #5
 8005240:	69fa      	ldr	r2, [r7, #28]
 8005242:	440a      	add	r2, r1
 8005244:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005248:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800524c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005250:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len == 0U)
 8005252:	68bb      	ldr	r3, [r7, #8]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	2b00      	cmp	r3, #0
 8005258:	d126      	bne.n	80052a8 <USB_EPStartXfer+0x374>
    {
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->maxpacket);
 800525a:	69bb      	ldr	r3, [r7, #24]
 800525c:	015a      	lsls	r2, r3, #5
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	4413      	add	r3, r2
 8005262:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005266:	691a      	ldr	r2, [r3, #16]
 8005268:	68bb      	ldr	r3, [r7, #8]
 800526a:	68db      	ldr	r3, [r3, #12]
 800526c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005270:	69b9      	ldr	r1, [r7, #24]
 8005272:	0148      	lsls	r0, r1, #5
 8005274:	69f9      	ldr	r1, [r7, #28]
 8005276:	4401      	add	r1, r0
 8005278:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 800527c:	4313      	orrs	r3, r2
 800527e:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	015a      	lsls	r2, r3, #5
 8005284:	69fb      	ldr	r3, [r7, #28]
 8005286:	4413      	add	r3, r2
 8005288:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800528c:	691b      	ldr	r3, [r3, #16]
 800528e:	69ba      	ldr	r2, [r7, #24]
 8005290:	0151      	lsls	r1, r2, #5
 8005292:	69fa      	ldr	r2, [r7, #28]
 8005294:	440a      	add	r2, r1
 8005296:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800529a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 800529e:	6113      	str	r3, [r2, #16]
 80052a0:	e03a      	b.n	8005318 <USB_EPStartXfer+0x3e4>
 80052a2:	bf00      	nop
 80052a4:	1ff80000 	.word	0x1ff80000
    }
    else
    {
      pktcnt = (uint16_t)((ep->xfer_len + ep->maxpacket - 1U) / ep->maxpacket);
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	699a      	ldr	r2, [r3, #24]
 80052ac:	68bb      	ldr	r3, [r7, #8]
 80052ae:	68db      	ldr	r3, [r3, #12]
 80052b0:	4413      	add	r3, r2
 80052b2:	1e5a      	subs	r2, r3, #1
 80052b4:	68bb      	ldr	r3, [r7, #8]
 80052b6:	68db      	ldr	r3, [r3, #12]
 80052b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80052bc:	82fb      	strh	r3, [r7, #22]
      ep->xfer_size = ep->maxpacket * pktcnt;
 80052be:	68bb      	ldr	r3, [r7, #8]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	8afa      	ldrh	r2, [r7, #22]
 80052c4:	fb03 f202 	mul.w	r2, r3, r2
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	61da      	str	r2, [r3, #28]

      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_PKTCNT & ((uint32_t)pktcnt << 19);
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	015a      	lsls	r2, r3, #5
 80052d0:	69fb      	ldr	r3, [r7, #28]
 80052d2:	4413      	add	r3, r2
 80052d4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052d8:	691a      	ldr	r2, [r3, #16]
 80052da:	8afb      	ldrh	r3, [r7, #22]
 80052dc:	04d9      	lsls	r1, r3, #19
 80052de:	4b38      	ldr	r3, [pc, #224]	; (80053c0 <USB_EPStartXfer+0x48c>)
 80052e0:	400b      	ands	r3, r1
 80052e2:	69b9      	ldr	r1, [r7, #24]
 80052e4:	0148      	lsls	r0, r1, #5
 80052e6:	69f9      	ldr	r1, [r7, #28]
 80052e8:	4401      	add	r1, r0
 80052ea:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 80052ee:	4313      	orrs	r3, r2
 80052f0:	610b      	str	r3, [r1, #16]
      USBx_OUTEP(epnum)->DOEPTSIZ |= USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size;
 80052f2:	69bb      	ldr	r3, [r7, #24]
 80052f4:	015a      	lsls	r2, r3, #5
 80052f6:	69fb      	ldr	r3, [r7, #28]
 80052f8:	4413      	add	r3, r2
 80052fa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80052fe:	691a      	ldr	r2, [r3, #16]
 8005300:	68bb      	ldr	r3, [r7, #8]
 8005302:	69db      	ldr	r3, [r3, #28]
 8005304:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005308:	69b9      	ldr	r1, [r7, #24]
 800530a:	0148      	lsls	r0, r1, #5
 800530c:	69f9      	ldr	r1, [r7, #28]
 800530e:	4401      	add	r1, r0
 8005310:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005314:	4313      	orrs	r3, r2
 8005316:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 8005318:	79fb      	ldrb	r3, [r7, #7]
 800531a:	2b01      	cmp	r3, #1
 800531c:	d10d      	bne.n	800533a <USB_EPStartXfer+0x406>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800531e:	68bb      	ldr	r3, [r7, #8]
 8005320:	691b      	ldr	r3, [r3, #16]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d009      	beq.n	800533a <USB_EPStartXfer+0x406>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005326:	68bb      	ldr	r3, [r7, #8]
 8005328:	6919      	ldr	r1, [r3, #16]
 800532a:	69bb      	ldr	r3, [r7, #24]
 800532c:	015a      	lsls	r2, r3, #5
 800532e:	69fb      	ldr	r3, [r7, #28]
 8005330:	4413      	add	r3, r2
 8005332:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005336:	460a      	mov	r2, r1
 8005338:	615a      	str	r2, [r3, #20]
      }
    }

    if (ep->type == EP_TYPE_ISOC)
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	791b      	ldrb	r3, [r3, #4]
 800533e:	2b01      	cmp	r3, #1
 8005340:	d128      	bne.n	8005394 <USB_EPStartXfer+0x460>
    {
      if ((USBx_DEVICE->DSTS & (1U << 8)) == 0U)
 8005342:	69fb      	ldr	r3, [r7, #28]
 8005344:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005348:	689b      	ldr	r3, [r3, #8]
 800534a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800534e:	2b00      	cmp	r3, #0
 8005350:	d110      	bne.n	8005374 <USB_EPStartXfer+0x440>
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SODDFRM;
 8005352:	69bb      	ldr	r3, [r7, #24]
 8005354:	015a      	lsls	r2, r3, #5
 8005356:	69fb      	ldr	r3, [r7, #28]
 8005358:	4413      	add	r3, r2
 800535a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	69ba      	ldr	r2, [r7, #24]
 8005362:	0151      	lsls	r1, r2, #5
 8005364:	69fa      	ldr	r2, [r7, #28]
 8005366:	440a      	add	r2, r1
 8005368:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800536c:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8005370:	6013      	str	r3, [r2, #0]
 8005372:	e00f      	b.n	8005394 <USB_EPStartXfer+0x460>
      }
      else
      {
        USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM;
 8005374:	69bb      	ldr	r3, [r7, #24]
 8005376:	015a      	lsls	r2, r3, #5
 8005378:	69fb      	ldr	r3, [r7, #28]
 800537a:	4413      	add	r3, r2
 800537c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	69ba      	ldr	r2, [r7, #24]
 8005384:	0151      	lsls	r1, r2, #5
 8005386:	69fa      	ldr	r2, [r7, #28]
 8005388:	440a      	add	r2, r1
 800538a:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800538e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005392:	6013      	str	r3, [r2, #0]
      }
    }
    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005394:	69bb      	ldr	r3, [r7, #24]
 8005396:	015a      	lsls	r2, r3, #5
 8005398:	69fb      	ldr	r3, [r7, #28]
 800539a:	4413      	add	r3, r2
 800539c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	69ba      	ldr	r2, [r7, #24]
 80053a4:	0151      	lsls	r1, r2, #5
 80053a6:	69fa      	ldr	r2, [r7, #28]
 80053a8:	440a      	add	r2, r1
 80053aa:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80053ae:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 80053b2:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80053b4:	2300      	movs	r3, #0
}
 80053b6:	4618      	mov	r0, r3
 80053b8:	3720      	adds	r7, #32
 80053ba:	46bd      	mov	sp, r7
 80053bc:	bd80      	pop	{r7, pc}
 80053be:	bf00      	nop
 80053c0:	1ff80000 	.word	0x1ff80000

080053c4 <USB_EP0StartXfer>:
  *           0 : DMA feature not used
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep, uint8_t dma)
{
 80053c4:	b480      	push	{r7}
 80053c6:	b087      	sub	sp, #28
 80053c8:	af00      	add	r7, sp, #0
 80053ca:	60f8      	str	r0, [r7, #12]
 80053cc:	60b9      	str	r1, [r7, #8]
 80053ce:	4613      	mov	r3, r2
 80053d0:	71fb      	strb	r3, [r7, #7]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	617b      	str	r3, [r7, #20]
  uint32_t epnum = (uint32_t)ep->num;
 80053d6:	68bb      	ldr	r3, [r7, #8]
 80053d8:	781b      	ldrb	r3, [r3, #0]
 80053da:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	785b      	ldrb	r3, [r3, #1]
 80053e0:	2b01      	cmp	r3, #1
 80053e2:	f040 80ce 	bne.w	8005582 <USB_EP0StartXfer+0x1be>
  {
    /* Zero Length Packet? */
    if (ep->xfer_len == 0U)
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	699b      	ldr	r3, [r3, #24]
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d132      	bne.n	8005454 <USB_EP0StartXfer+0x90>
    {
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 80053ee:	693b      	ldr	r3, [r7, #16]
 80053f0:	015a      	lsls	r2, r3, #5
 80053f2:	697b      	ldr	r3, [r7, #20]
 80053f4:	4413      	add	r3, r2
 80053f6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80053fa:	691b      	ldr	r3, [r3, #16]
 80053fc:	693a      	ldr	r2, [r7, #16]
 80053fe:	0151      	lsls	r1, r2, #5
 8005400:	697a      	ldr	r2, [r7, #20]
 8005402:	440a      	add	r2, r1
 8005404:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005408:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 800540c:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005410:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 8005412:	693b      	ldr	r3, [r7, #16]
 8005414:	015a      	lsls	r2, r3, #5
 8005416:	697b      	ldr	r3, [r7, #20]
 8005418:	4413      	add	r3, r2
 800541a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800541e:	691b      	ldr	r3, [r3, #16]
 8005420:	693a      	ldr	r2, [r7, #16]
 8005422:	0151      	lsls	r1, r2, #5
 8005424:	697a      	ldr	r2, [r7, #20]
 8005426:	440a      	add	r2, r1
 8005428:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800542c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005430:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005432:	693b      	ldr	r3, [r7, #16]
 8005434:	015a      	lsls	r2, r3, #5
 8005436:	697b      	ldr	r3, [r7, #20]
 8005438:	4413      	add	r3, r2
 800543a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800543e:	691b      	ldr	r3, [r3, #16]
 8005440:	693a      	ldr	r2, [r7, #16]
 8005442:	0151      	lsls	r1, r2, #5
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	440a      	add	r2, r1
 8005448:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800544c:	0cdb      	lsrs	r3, r3, #19
 800544e:	04db      	lsls	r3, r3, #19
 8005450:	6113      	str	r3, [r2, #16]
 8005452:	e04e      	b.n	80054f2 <USB_EP0StartXfer+0x12e>
      /* Program the transfer size and packet count
      * as follows: xfersize = N * maxpacket +
      * short_packet pktcnt = N + (short_packet
      * exist ? 1 : 0)
      */
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_XFRSIZ);
 8005454:	693b      	ldr	r3, [r7, #16]
 8005456:	015a      	lsls	r2, r3, #5
 8005458:	697b      	ldr	r3, [r7, #20]
 800545a:	4413      	add	r3, r2
 800545c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005460:	691b      	ldr	r3, [r3, #16]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	0151      	lsls	r1, r2, #5
 8005466:	697a      	ldr	r2, [r7, #20]
 8005468:	440a      	add	r2, r1
 800546a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800546e:	0cdb      	lsrs	r3, r3, #19
 8005470:	04db      	lsls	r3, r3, #19
 8005472:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ &= ~(USB_OTG_DIEPTSIZ_PKTCNT);
 8005474:	693b      	ldr	r3, [r7, #16]
 8005476:	015a      	lsls	r2, r3, #5
 8005478:	697b      	ldr	r3, [r7, #20]
 800547a:	4413      	add	r3, r2
 800547c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005480:	691b      	ldr	r3, [r3, #16]
 8005482:	693a      	ldr	r2, [r7, #16]
 8005484:	0151      	lsls	r1, r2, #5
 8005486:	697a      	ldr	r2, [r7, #20]
 8005488:	440a      	add	r2, r1
 800548a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800548e:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 8005492:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 8005496:	6113      	str	r3, [r2, #16]

      if (ep->xfer_len > ep->maxpacket)
 8005498:	68bb      	ldr	r3, [r7, #8]
 800549a:	699a      	ldr	r2, [r3, #24]
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	68db      	ldr	r3, [r3, #12]
 80054a0:	429a      	cmp	r2, r3
 80054a2:	d903      	bls.n	80054ac <USB_EP0StartXfer+0xe8>
      {
        ep->xfer_len = ep->maxpacket;
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	68da      	ldr	r2, [r3, #12]
 80054a8:	68bb      	ldr	r3, [r7, #8]
 80054aa:	619a      	str	r2, [r3, #24]
      }
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_PKTCNT & (1U << 19));
 80054ac:	693b      	ldr	r3, [r7, #16]
 80054ae:	015a      	lsls	r2, r3, #5
 80054b0:	697b      	ldr	r3, [r7, #20]
 80054b2:	4413      	add	r3, r2
 80054b4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054b8:	691b      	ldr	r3, [r3, #16]
 80054ba:	693a      	ldr	r2, [r7, #16]
 80054bc:	0151      	lsls	r1, r2, #5
 80054be:	697a      	ldr	r2, [r7, #20]
 80054c0:	440a      	add	r2, r1
 80054c2:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80054c6:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80054ca:	6113      	str	r3, [r2, #16]
      USBx_INEP(epnum)->DIEPTSIZ |= (USB_OTG_DIEPTSIZ_XFRSIZ & ep->xfer_len);
 80054cc:	693b      	ldr	r3, [r7, #16]
 80054ce:	015a      	lsls	r2, r3, #5
 80054d0:	697b      	ldr	r3, [r7, #20]
 80054d2:	4413      	add	r3, r2
 80054d4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80054d8:	691a      	ldr	r2, [r3, #16]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80054e2:	6939      	ldr	r1, [r7, #16]
 80054e4:	0148      	lsls	r0, r1, #5
 80054e6:	6979      	ldr	r1, [r7, #20]
 80054e8:	4401      	add	r1, r0
 80054ea:	f501 6110 	add.w	r1, r1, #2304	; 0x900
 80054ee:	4313      	orrs	r3, r2
 80054f0:	610b      	str	r3, [r1, #16]
    }

    if (dma == 1U)
 80054f2:	79fb      	ldrb	r3, [r7, #7]
 80054f4:	2b01      	cmp	r3, #1
 80054f6:	d11e      	bne.n	8005536 <USB_EP0StartXfer+0x172>
    {
      if ((uint32_t)ep->dma_addr != 0U)
 80054f8:	68bb      	ldr	r3, [r7, #8]
 80054fa:	695b      	ldr	r3, [r3, #20]
 80054fc:	2b00      	cmp	r3, #0
 80054fe:	d009      	beq.n	8005514 <USB_EP0StartXfer+0x150>
      {
        USBx_INEP(epnum)->DIEPDMA = (uint32_t)(ep->dma_addr);
 8005500:	693b      	ldr	r3, [r7, #16]
 8005502:	015a      	lsls	r2, r3, #5
 8005504:	697b      	ldr	r3, [r7, #20]
 8005506:	4413      	add	r3, r2
 8005508:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800550c:	461a      	mov	r2, r3
 800550e:	68bb      	ldr	r3, [r7, #8]
 8005510:	695b      	ldr	r3, [r3, #20]
 8005512:	6153      	str	r3, [r2, #20]
      }

      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005514:	693b      	ldr	r3, [r7, #16]
 8005516:	015a      	lsls	r2, r3, #5
 8005518:	697b      	ldr	r3, [r7, #20]
 800551a:	4413      	add	r3, r2
 800551c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005520:	681b      	ldr	r3, [r3, #0]
 8005522:	693a      	ldr	r2, [r7, #16]
 8005524:	0151      	lsls	r1, r2, #5
 8005526:	697a      	ldr	r2, [r7, #20]
 8005528:	440a      	add	r2, r1
 800552a:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 800552e:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005532:	6013      	str	r3, [r2, #0]
 8005534:	e097      	b.n	8005666 <USB_EP0StartXfer+0x2a2>
    }
    else
    {
      /* EP enable, IN data in FIFO */
      USBx_INEP(epnum)->DIEPCTL |= (USB_OTG_DIEPCTL_CNAK | USB_OTG_DIEPCTL_EPENA);
 8005536:	693b      	ldr	r3, [r7, #16]
 8005538:	015a      	lsls	r2, r3, #5
 800553a:	697b      	ldr	r3, [r7, #20]
 800553c:	4413      	add	r3, r2
 800553e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	693a      	ldr	r2, [r7, #16]
 8005546:	0151      	lsls	r1, r2, #5
 8005548:	697a      	ldr	r2, [r7, #20]
 800554a:	440a      	add	r2, r1
 800554c:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005550:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005554:	6013      	str	r3, [r2, #0]

      /* Enable the Tx FIFO Empty Interrupt for this EP */
      if (ep->xfer_len > 0U)
 8005556:	68bb      	ldr	r3, [r7, #8]
 8005558:	699b      	ldr	r3, [r3, #24]
 800555a:	2b00      	cmp	r3, #0
 800555c:	f000 8083 	beq.w	8005666 <USB_EP0StartXfer+0x2a2>
      {
        USBx_DEVICE->DIEPEMPMSK |= 1UL << (ep->num & EP_ADDR_MSK);
 8005560:	697b      	ldr	r3, [r7, #20]
 8005562:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005566:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8005568:	68bb      	ldr	r3, [r7, #8]
 800556a:	781b      	ldrb	r3, [r3, #0]
 800556c:	f003 030f 	and.w	r3, r3, #15
 8005570:	2101      	movs	r1, #1
 8005572:	fa01 f303 	lsl.w	r3, r1, r3
 8005576:	6979      	ldr	r1, [r7, #20]
 8005578:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800557c:	4313      	orrs	r3, r2
 800557e:	634b      	str	r3, [r1, #52]	; 0x34
 8005580:	e071      	b.n	8005666 <USB_EP0StartXfer+0x2a2>
  {
    /* Program the transfer size and packet count as follows:
    * pktcnt = N
    * xfersize = N * maxpacket
    */
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_XFRSIZ);
 8005582:	693b      	ldr	r3, [r7, #16]
 8005584:	015a      	lsls	r2, r3, #5
 8005586:	697b      	ldr	r3, [r7, #20]
 8005588:	4413      	add	r3, r2
 800558a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800558e:	691b      	ldr	r3, [r3, #16]
 8005590:	693a      	ldr	r2, [r7, #16]
 8005592:	0151      	lsls	r1, r2, #5
 8005594:	697a      	ldr	r2, [r7, #20]
 8005596:	440a      	add	r2, r1
 8005598:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800559c:	0cdb      	lsrs	r3, r3, #19
 800559e:	04db      	lsls	r3, r3, #19
 80055a0:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ &= ~(USB_OTG_DOEPTSIZ_PKTCNT);
 80055a2:	693b      	ldr	r3, [r7, #16]
 80055a4:	015a      	lsls	r2, r3, #5
 80055a6:	697b      	ldr	r3, [r7, #20]
 80055a8:	4413      	add	r3, r2
 80055aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ae:	691b      	ldr	r3, [r3, #16]
 80055b0:	693a      	ldr	r2, [r7, #16]
 80055b2:	0151      	lsls	r1, r2, #5
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	440a      	add	r2, r1
 80055b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055bc:	f023 53ff 	bic.w	r3, r3, #534773760	; 0x1fe00000
 80055c0:	f423 13c0 	bic.w	r3, r3, #1572864	; 0x180000
 80055c4:	6113      	str	r3, [r2, #16]

    if (ep->xfer_len > 0U)
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	699b      	ldr	r3, [r3, #24]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <USB_EP0StartXfer+0x212>
    {
      ep->xfer_len = ep->maxpacket;
 80055ce:	68bb      	ldr	r3, [r7, #8]
 80055d0:	68da      	ldr	r2, [r3, #12]
 80055d2:	68bb      	ldr	r3, [r7, #8]
 80055d4:	619a      	str	r2, [r3, #24]
    }

    /* Store transfer size, for EP0 this is equal to endpoint max packet size */
    ep->xfer_size = ep->maxpacket;
 80055d6:	68bb      	ldr	r3, [r7, #8]
 80055d8:	68da      	ldr	r2, [r3, #12]
 80055da:	68bb      	ldr	r3, [r7, #8]
 80055dc:	61da      	str	r2, [r3, #28]

    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 80055de:	693b      	ldr	r3, [r7, #16]
 80055e0:	015a      	lsls	r2, r3, #5
 80055e2:	697b      	ldr	r3, [r7, #20]
 80055e4:	4413      	add	r3, r2
 80055e6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80055ea:	691b      	ldr	r3, [r3, #16]
 80055ec:	693a      	ldr	r2, [r7, #16]
 80055ee:	0151      	lsls	r1, r2, #5
 80055f0:	697a      	ldr	r2, [r7, #20]
 80055f2:	440a      	add	r2, r1
 80055f4:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80055f8:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80055fc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(epnum)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_XFRSIZ & ep->xfer_size);
 80055fe:	693b      	ldr	r3, [r7, #16]
 8005600:	015a      	lsls	r2, r3, #5
 8005602:	697b      	ldr	r3, [r7, #20]
 8005604:	4413      	add	r3, r2
 8005606:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800560a:	691a      	ldr	r2, [r3, #16]
 800560c:	68bb      	ldr	r3, [r7, #8]
 800560e:	69db      	ldr	r3, [r3, #28]
 8005610:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8005614:	6939      	ldr	r1, [r7, #16]
 8005616:	0148      	lsls	r0, r1, #5
 8005618:	6979      	ldr	r1, [r7, #20]
 800561a:	4401      	add	r1, r0
 800561c:	f501 6130 	add.w	r1, r1, #2816	; 0xb00
 8005620:	4313      	orrs	r3, r2
 8005622:	610b      	str	r3, [r1, #16]

    if (dma == 1U)
 8005624:	79fb      	ldrb	r3, [r7, #7]
 8005626:	2b01      	cmp	r3, #1
 8005628:	d10d      	bne.n	8005646 <USB_EP0StartXfer+0x282>
    {
      if ((uint32_t)ep->xfer_buff != 0U)
 800562a:	68bb      	ldr	r3, [r7, #8]
 800562c:	691b      	ldr	r3, [r3, #16]
 800562e:	2b00      	cmp	r3, #0
 8005630:	d009      	beq.n	8005646 <USB_EP0StartXfer+0x282>
      {
        USBx_OUTEP(epnum)->DOEPDMA = (uint32_t)(ep->xfer_buff);
 8005632:	68bb      	ldr	r3, [r7, #8]
 8005634:	6919      	ldr	r1, [r3, #16]
 8005636:	693b      	ldr	r3, [r7, #16]
 8005638:	015a      	lsls	r2, r3, #5
 800563a:	697b      	ldr	r3, [r7, #20]
 800563c:	4413      	add	r3, r2
 800563e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005642:	460a      	mov	r2, r1
 8005644:	615a      	str	r2, [r3, #20]
      }
    }

    /* EP enable */
    USBx_OUTEP(epnum)->DOEPCTL |= (USB_OTG_DOEPCTL_CNAK | USB_OTG_DOEPCTL_EPENA);
 8005646:	693b      	ldr	r3, [r7, #16]
 8005648:	015a      	lsls	r2, r3, #5
 800564a:	697b      	ldr	r3, [r7, #20]
 800564c:	4413      	add	r3, r2
 800564e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	693a      	ldr	r2, [r7, #16]
 8005656:	0151      	lsls	r1, r2, #5
 8005658:	697a      	ldr	r2, [r7, #20]
 800565a:	440a      	add	r2, r1
 800565c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005660:	f043 4304 	orr.w	r3, r3, #2214592512	; 0x84000000
 8005664:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005666:	2300      	movs	r3, #0
}
 8005668:	4618      	mov	r0, r3
 800566a:	371c      	adds	r7, #28
 800566c:	46bd      	mov	sp, r7
 800566e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005672:	4770      	bx	lr

08005674 <USB_EPStopXfer>:
   * @param  USBx  usb device instance
   * @param  ep pointer to endpoint structure
   * @retval HAL status
   */
HAL_StatusTypeDef USB_EPStopXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 8005674:	b480      	push	{r7}
 8005676:	b087      	sub	sp, #28
 8005678:	af00      	add	r7, sp, #0
 800567a:	6078      	str	r0, [r7, #4]
 800567c:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 800567e:	2300      	movs	r3, #0
 8005680:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef ret = HAL_OK;
 8005682:	2300      	movs	r3, #0
 8005684:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	613b      	str	r3, [r7, #16]

  /* IN endpoint */
  if (ep->is_in == 1U)
 800568a:	683b      	ldr	r3, [r7, #0]
 800568c:	785b      	ldrb	r3, [r3, #1]
 800568e:	2b01      	cmp	r3, #1
 8005690:	d14a      	bne.n	8005728 <USB_EPStopXfer+0xb4>
  {
    /* EP enable, IN data in FIFO */
    if (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	015a      	lsls	r2, r3, #5
 8005698:	693b      	ldr	r3, [r7, #16]
 800569a:	4413      	add	r3, r2
 800569c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80056a6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80056aa:	f040 8086 	bne.w	80057ba <USB_EPStopXfer+0x146>
    {
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_SNAK);
 80056ae:	683b      	ldr	r3, [r7, #0]
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	015a      	lsls	r2, r3, #5
 80056b4:	693b      	ldr	r3, [r7, #16]
 80056b6:	4413      	add	r3, r2
 80056b8:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	683a      	ldr	r2, [r7, #0]
 80056c0:	7812      	ldrb	r2, [r2, #0]
 80056c2:	0151      	lsls	r1, r2, #5
 80056c4:	693a      	ldr	r2, [r7, #16]
 80056c6:	440a      	add	r2, r1
 80056c8:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056cc:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 80056d0:	6013      	str	r3, [r2, #0]
      USBx_INEP(ep->num)->DIEPCTL |= (USB_OTG_DIEPCTL_EPDIS);
 80056d2:	683b      	ldr	r3, [r7, #0]
 80056d4:	781b      	ldrb	r3, [r3, #0]
 80056d6:	015a      	lsls	r2, r3, #5
 80056d8:	693b      	ldr	r3, [r7, #16]
 80056da:	4413      	add	r3, r2
 80056dc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	683a      	ldr	r2, [r7, #0]
 80056e4:	7812      	ldrb	r2, [r2, #0]
 80056e6:	0151      	lsls	r1, r2, #5
 80056e8:	693a      	ldr	r2, [r7, #16]
 80056ea:	440a      	add	r2, r1
 80056ec:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 80056f0:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80056f4:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 80056f6:	68fb      	ldr	r3, [r7, #12]
 80056f8:	3301      	adds	r3, #1
 80056fa:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	f242 7210 	movw	r2, #10000	; 0x2710
 8005702:	4293      	cmp	r3, r2
 8005704:	d902      	bls.n	800570c <USB_EPStopXfer+0x98>
        {
          ret = HAL_ERROR;
 8005706:	2301      	movs	r3, #1
 8005708:	75fb      	strb	r3, [r7, #23]
          break;
 800570a:	e056      	b.n	80057ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_INEP(ep->num)->DIEPCTL) & USB_OTG_DIEPCTL_EPENA) ==  USB_OTG_DIEPCTL_EPENA);
 800570c:	683b      	ldr	r3, [r7, #0]
 800570e:	781b      	ldrb	r3, [r3, #0]
 8005710:	015a      	lsls	r2, r3, #5
 8005712:	693b      	ldr	r3, [r7, #16]
 8005714:	4413      	add	r3, r2
 8005716:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005720:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005724:	d0e7      	beq.n	80056f6 <USB_EPStopXfer+0x82>
 8005726:	e048      	b.n	80057ba <USB_EPStopXfer+0x146>
    }
  }
  else /* OUT endpoint */
  {
    if (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	781b      	ldrb	r3, [r3, #0]
 800572c:	015a      	lsls	r2, r3, #5
 800572e:	693b      	ldr	r3, [r7, #16]
 8005730:	4413      	add	r3, r2
 8005732:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800573c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005740:	d13b      	bne.n	80057ba <USB_EPStopXfer+0x146>
    {
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_SNAK);
 8005742:	683b      	ldr	r3, [r7, #0]
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	015a      	lsls	r2, r3, #5
 8005748:	693b      	ldr	r3, [r7, #16]
 800574a:	4413      	add	r3, r2
 800574c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005750:	681b      	ldr	r3, [r3, #0]
 8005752:	683a      	ldr	r2, [r7, #0]
 8005754:	7812      	ldrb	r2, [r2, #0]
 8005756:	0151      	lsls	r1, r2, #5
 8005758:	693a      	ldr	r2, [r7, #16]
 800575a:	440a      	add	r2, r1
 800575c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005760:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005764:	6013      	str	r3, [r2, #0]
      USBx_OUTEP(ep->num)->DOEPCTL |= (USB_OTG_DOEPCTL_EPDIS);
 8005766:	683b      	ldr	r3, [r7, #0]
 8005768:	781b      	ldrb	r3, [r3, #0]
 800576a:	015a      	lsls	r2, r3, #5
 800576c:	693b      	ldr	r3, [r7, #16]
 800576e:	4413      	add	r3, r2
 8005770:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005774:	681b      	ldr	r3, [r3, #0]
 8005776:	683a      	ldr	r2, [r7, #0]
 8005778:	7812      	ldrb	r2, [r2, #0]
 800577a:	0151      	lsls	r1, r2, #5
 800577c:	693a      	ldr	r2, [r7, #16]
 800577e:	440a      	add	r2, r1
 8005780:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005784:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8005788:	6013      	str	r3, [r2, #0]

      do
      {
        count++;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3301      	adds	r3, #1
 800578e:	60fb      	str	r3, [r7, #12]

        if (count > 10000U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	f242 7210 	movw	r2, #10000	; 0x2710
 8005796:	4293      	cmp	r3, r2
 8005798:	d902      	bls.n	80057a0 <USB_EPStopXfer+0x12c>
        {
          ret = HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	75fb      	strb	r3, [r7, #23]
          break;
 800579e:	e00c      	b.n	80057ba <USB_EPStopXfer+0x146>
        }
      } while (((USBx_OUTEP(ep->num)->DOEPCTL) & USB_OTG_DOEPCTL_EPENA) ==  USB_OTG_DOEPCTL_EPENA);
 80057a0:	683b      	ldr	r3, [r7, #0]
 80057a2:	781b      	ldrb	r3, [r3, #0]
 80057a4:	015a      	lsls	r2, r3, #5
 80057a6:	693b      	ldr	r3, [r7, #16]
 80057a8:	4413      	add	r3, r2
 80057aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057b4:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057b8:	d0e7      	beq.n	800578a <USB_EPStopXfer+0x116>
    }
  }

  return ret;
 80057ba:	7dfb      	ldrb	r3, [r7, #23]
}
 80057bc:	4618      	mov	r0, r3
 80057be:	371c      	adds	r7, #28
 80057c0:	46bd      	mov	sp, r7
 80057c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057c6:	4770      	bx	lr

080057c8 <USB_WritePacket>:
  *           1 : DMA feature used
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len, uint8_t dma)
{
 80057c8:	b480      	push	{r7}
 80057ca:	b089      	sub	sp, #36	; 0x24
 80057cc:	af00      	add	r7, sp, #0
 80057ce:	60f8      	str	r0, [r7, #12]
 80057d0:	60b9      	str	r1, [r7, #8]
 80057d2:	4611      	mov	r1, r2
 80057d4:	461a      	mov	r2, r3
 80057d6:	460b      	mov	r3, r1
 80057d8:	71fb      	strb	r3, [r7, #7]
 80057da:	4613      	mov	r3, r2
 80057dc:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80057de:	68fb      	ldr	r3, [r7, #12]
 80057e0:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80057e2:	68bb      	ldr	r3, [r7, #8]
 80057e4:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  if (dma == 0U)
 80057e6:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d123      	bne.n	8005836 <USB_WritePacket+0x6e>
  {
    count32b = ((uint32_t)len + 3U) / 4U;
 80057ee:	88bb      	ldrh	r3, [r7, #4]
 80057f0:	3303      	adds	r3, #3
 80057f2:	089b      	lsrs	r3, r3, #2
 80057f4:	613b      	str	r3, [r7, #16]
    for (i = 0U; i < count32b; i++)
 80057f6:	2300      	movs	r3, #0
 80057f8:	61bb      	str	r3, [r7, #24]
 80057fa:	e018      	b.n	800582e <USB_WritePacket+0x66>
    {
      USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80057fc:	79fb      	ldrb	r3, [r7, #7]
 80057fe:	031a      	lsls	r2, r3, #12
 8005800:	697b      	ldr	r3, [r7, #20]
 8005802:	4413      	add	r3, r2
 8005804:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005808:	461a      	mov	r2, r3
 800580a:	69fb      	ldr	r3, [r7, #28]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	6013      	str	r3, [r2, #0]
      pSrc++;
 8005810:	69fb      	ldr	r3, [r7, #28]
 8005812:	3301      	adds	r3, #1
 8005814:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005816:	69fb      	ldr	r3, [r7, #28]
 8005818:	3301      	adds	r3, #1
 800581a:	61fb      	str	r3, [r7, #28]
      pSrc++;
 800581c:	69fb      	ldr	r3, [r7, #28]
 800581e:	3301      	adds	r3, #1
 8005820:	61fb      	str	r3, [r7, #28]
      pSrc++;
 8005822:	69fb      	ldr	r3, [r7, #28]
 8005824:	3301      	adds	r3, #1
 8005826:	61fb      	str	r3, [r7, #28]
    for (i = 0U; i < count32b; i++)
 8005828:	69bb      	ldr	r3, [r7, #24]
 800582a:	3301      	adds	r3, #1
 800582c:	61bb      	str	r3, [r7, #24]
 800582e:	69ba      	ldr	r2, [r7, #24]
 8005830:	693b      	ldr	r3, [r7, #16]
 8005832:	429a      	cmp	r2, r3
 8005834:	d3e2      	bcc.n	80057fc <USB_WritePacket+0x34>
    }
  }

  return HAL_OK;
 8005836:	2300      	movs	r3, #0
}
 8005838:	4618      	mov	r0, r3
 800583a:	3724      	adds	r7, #36	; 0x24
 800583c:	46bd      	mov	sp, r7
 800583e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005842:	4770      	bx	lr

08005844 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8005844:	b480      	push	{r7}
 8005846:	b08b      	sub	sp, #44	; 0x2c
 8005848:	af00      	add	r7, sp, #0
 800584a:	60f8      	str	r0, [r7, #12]
 800584c:	60b9      	str	r1, [r7, #8]
 800584e:	4613      	mov	r3, r2
 8005850:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005852:	68fb      	ldr	r3, [r7, #12]
 8005854:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8005856:	68bb      	ldr	r3, [r7, #8]
 8005858:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 800585a:	88fb      	ldrh	r3, [r7, #6]
 800585c:	089b      	lsrs	r3, r3, #2
 800585e:	b29b      	uxth	r3, r3
 8005860:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8005862:	88fb      	ldrh	r3, [r7, #6]
 8005864:	f003 0303 	and.w	r3, r3, #3
 8005868:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 800586a:	2300      	movs	r3, #0
 800586c:	623b      	str	r3, [r7, #32]
 800586e:	e014      	b.n	800589a <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8005870:	69bb      	ldr	r3, [r7, #24]
 8005872:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005876:	681a      	ldr	r2, [r3, #0]
 8005878:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587a:	601a      	str	r2, [r3, #0]
    pDest++;
 800587c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800587e:	3301      	adds	r3, #1
 8005880:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005884:	3301      	adds	r3, #1
 8005886:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8005888:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800588a:	3301      	adds	r3, #1
 800588c:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 800588e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005890:	3301      	adds	r3, #1
 8005892:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8005894:	6a3b      	ldr	r3, [r7, #32]
 8005896:	3301      	adds	r3, #1
 8005898:	623b      	str	r3, [r7, #32]
 800589a:	6a3a      	ldr	r2, [r7, #32]
 800589c:	697b      	ldr	r3, [r7, #20]
 800589e:	429a      	cmp	r2, r3
 80058a0:	d3e6      	bcc.n	8005870 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 80058a2:	8bfb      	ldrh	r3, [r7, #30]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d01e      	beq.n	80058e6 <USB_ReadPacket+0xa2>
  {
    i = 0U;
 80058a8:	2300      	movs	r3, #0
 80058aa:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 80058ac:	69bb      	ldr	r3, [r7, #24]
 80058ae:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80058b2:	461a      	mov	r2, r3
 80058b4:	f107 0310 	add.w	r3, r7, #16
 80058b8:	6812      	ldr	r2, [r2, #0]
 80058ba:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 80058bc:	693a      	ldr	r2, [r7, #16]
 80058be:	6a3b      	ldr	r3, [r7, #32]
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	00db      	lsls	r3, r3, #3
 80058c4:	fa22 f303 	lsr.w	r3, r2, r3
 80058c8:	b2da      	uxtb	r2, r3
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	701a      	strb	r2, [r3, #0]
      i++;
 80058ce:	6a3b      	ldr	r3, [r7, #32]
 80058d0:	3301      	adds	r3, #1
 80058d2:	623b      	str	r3, [r7, #32]
      pDest++;
 80058d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058d6:	3301      	adds	r3, #1
 80058d8:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 80058da:	8bfb      	ldrh	r3, [r7, #30]
 80058dc:	3b01      	subs	r3, #1
 80058de:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 80058e0:	8bfb      	ldrh	r3, [r7, #30]
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d1ea      	bne.n	80058bc <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 80058e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	372c      	adds	r7, #44	; 0x2c
 80058ec:	46bd      	mov	sp, r7
 80058ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f2:	4770      	bx	lr

080058f4 <USB_EPSetStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80058f4:	b480      	push	{r7}
 80058f6:	b085      	sub	sp, #20
 80058f8:	af00      	add	r7, sp, #0
 80058fa:	6078      	str	r0, [r7, #4]
 80058fc:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 8005908:	683b      	ldr	r3, [r7, #0]
 800590a:	785b      	ldrb	r3, [r3, #1]
 800590c:	2b01      	cmp	r3, #1
 800590e:	d12c      	bne.n	800596a <USB_EPSetStall+0x76>
  {
    if (((USBx_INEP(epnum)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == 0U) && (epnum != 0U))
 8005910:	68bb      	ldr	r3, [r7, #8]
 8005912:	015a      	lsls	r2, r3, #5
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	4413      	add	r3, r2
 8005918:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	db12      	blt.n	8005948 <USB_EPSetStall+0x54>
 8005922:	68bb      	ldr	r3, [r7, #8]
 8005924:	2b00      	cmp	r3, #0
 8005926:	d00f      	beq.n	8005948 <USB_EPSetStall+0x54>
    {
      USBx_INEP(epnum)->DIEPCTL &= ~(USB_OTG_DIEPCTL_EPDIS);
 8005928:	68bb      	ldr	r3, [r7, #8]
 800592a:	015a      	lsls	r2, r3, #5
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	4413      	add	r3, r2
 8005930:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	68ba      	ldr	r2, [r7, #8]
 8005938:	0151      	lsls	r1, r2, #5
 800593a:	68fa      	ldr	r2, [r7, #12]
 800593c:	440a      	add	r2, r1
 800593e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005942:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8005946:	6013      	str	r3, [r2, #0]
    }
    USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_STALL;
 8005948:	68bb      	ldr	r3, [r7, #8]
 800594a:	015a      	lsls	r2, r3, #5
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	4413      	add	r3, r2
 8005950:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	68ba      	ldr	r2, [r7, #8]
 8005958:	0151      	lsls	r1, r2, #5
 800595a:	68fa      	ldr	r2, [r7, #12]
 800595c:	440a      	add	r2, r1
 800595e:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005962:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8005966:	6013      	str	r3, [r2, #0]
 8005968:	e02b      	b.n	80059c2 <USB_EPSetStall+0xce>
  }
  else
  {
    if (((USBx_OUTEP(epnum)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == 0U) && (epnum != 0U))
 800596a:	68bb      	ldr	r3, [r7, #8]
 800596c:	015a      	lsls	r2, r3, #5
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	4413      	add	r3, r2
 8005972:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005976:	681b      	ldr	r3, [r3, #0]
 8005978:	2b00      	cmp	r3, #0
 800597a:	db12      	blt.n	80059a2 <USB_EPSetStall+0xae>
 800597c:	68bb      	ldr	r3, [r7, #8]
 800597e:	2b00      	cmp	r3, #0
 8005980:	d00f      	beq.n	80059a2 <USB_EPSetStall+0xae>
    {
      USBx_OUTEP(epnum)->DOEPCTL &= ~(USB_OTG_DOEPCTL_EPDIS);
 8005982:	68bb      	ldr	r3, [r7, #8]
 8005984:	015a      	lsls	r2, r3, #5
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	4413      	add	r3, r2
 800598a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	68ba      	ldr	r2, [r7, #8]
 8005992:	0151      	lsls	r1, r2, #5
 8005994:	68fa      	ldr	r2, [r7, #12]
 8005996:	440a      	add	r2, r1
 8005998:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 800599c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80059a0:	6013      	str	r3, [r2, #0]
    }
    USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_STALL;
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	015a      	lsls	r2, r3, #5
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	4413      	add	r3, r2
 80059aa:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	68ba      	ldr	r2, [r7, #8]
 80059b2:	0151      	lsls	r1, r2, #5
 80059b4:	68fa      	ldr	r2, [r7, #12]
 80059b6:	440a      	add	r2, r1
 80059b8:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 80059bc:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80059c0:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 80059c2:	2300      	movs	r3, #0
}
 80059c4:	4618      	mov	r0, r3
 80059c6:	3714      	adds	r7, #20
 80059c8:	46bd      	mov	sp, r7
 80059ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ce:	4770      	bx	lr

080059d0 <USB_EPClearStall>:
  * @param  USBx  Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_OTG_GlobalTypeDef *USBx, USB_OTG_EPTypeDef *ep)
{
 80059d0:	b480      	push	{r7}
 80059d2:	b085      	sub	sp, #20
 80059d4:	af00      	add	r7, sp, #0
 80059d6:	6078      	str	r0, [r7, #4]
 80059d8:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	60fb      	str	r3, [r7, #12]
  uint32_t epnum = (uint32_t)ep->num;
 80059de:	683b      	ldr	r3, [r7, #0]
 80059e0:	781b      	ldrb	r3, [r3, #0]
 80059e2:	60bb      	str	r3, [r7, #8]

  if (ep->is_in == 1U)
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	785b      	ldrb	r3, [r3, #1]
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d128      	bne.n	8005a3e <USB_EPClearStall+0x6e>
  {
    USBx_INEP(epnum)->DIEPCTL &= ~USB_OTG_DIEPCTL_STALL;
 80059ec:	68bb      	ldr	r3, [r7, #8]
 80059ee:	015a      	lsls	r2, r3, #5
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	4413      	add	r3, r2
 80059f4:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	68ba      	ldr	r2, [r7, #8]
 80059fc:	0151      	lsls	r1, r2, #5
 80059fe:	68fa      	ldr	r2, [r7, #12]
 8005a00:	440a      	add	r2, r1
 8005a02:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a06:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a0a:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a0c:	683b      	ldr	r3, [r7, #0]
 8005a0e:	791b      	ldrb	r3, [r3, #4]
 8005a10:	2b03      	cmp	r3, #3
 8005a12:	d003      	beq.n	8005a1c <USB_EPClearStall+0x4c>
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	791b      	ldrb	r3, [r3, #4]
 8005a18:	2b02      	cmp	r3, #2
 8005a1a:	d138      	bne.n	8005a8e <USB_EPClearStall+0xbe>
    {
      USBx_INEP(epnum)->DIEPCTL |= USB_OTG_DIEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a1c:	68bb      	ldr	r3, [r7, #8]
 8005a1e:	015a      	lsls	r2, r3, #5
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	4413      	add	r3, r2
 8005a24:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	68ba      	ldr	r2, [r7, #8]
 8005a2c:	0151      	lsls	r1, r2, #5
 8005a2e:	68fa      	ldr	r2, [r7, #12]
 8005a30:	440a      	add	r2, r1
 8005a32:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005a36:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a3a:	6013      	str	r3, [r2, #0]
 8005a3c:	e027      	b.n	8005a8e <USB_EPClearStall+0xbe>
    }
  }
  else
  {
    USBx_OUTEP(epnum)->DOEPCTL &= ~USB_OTG_DOEPCTL_STALL;
 8005a3e:	68bb      	ldr	r3, [r7, #8]
 8005a40:	015a      	lsls	r2, r3, #5
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	4413      	add	r3, r2
 8005a46:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	68ba      	ldr	r2, [r7, #8]
 8005a4e:	0151      	lsls	r1, r2, #5
 8005a50:	68fa      	ldr	r2, [r7, #12]
 8005a52:	440a      	add	r2, r1
 8005a54:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a58:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8005a5c:	6013      	str	r3, [r2, #0]
    if ((ep->type == EP_TYPE_INTR) || (ep->type == EP_TYPE_BULK))
 8005a5e:	683b      	ldr	r3, [r7, #0]
 8005a60:	791b      	ldrb	r3, [r3, #4]
 8005a62:	2b03      	cmp	r3, #3
 8005a64:	d003      	beq.n	8005a6e <USB_EPClearStall+0x9e>
 8005a66:	683b      	ldr	r3, [r7, #0]
 8005a68:	791b      	ldrb	r3, [r3, #4]
 8005a6a:	2b02      	cmp	r3, #2
 8005a6c:	d10f      	bne.n	8005a8e <USB_EPClearStall+0xbe>
    {
      USBx_OUTEP(epnum)->DOEPCTL |= USB_OTG_DOEPCTL_SD0PID_SEVNFRM; /* DATA0 */
 8005a6e:	68bb      	ldr	r3, [r7, #8]
 8005a70:	015a      	lsls	r2, r3, #5
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	4413      	add	r3, r2
 8005a76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	68ba      	ldr	r2, [r7, #8]
 8005a7e:	0151      	lsls	r1, r2, #5
 8005a80:	68fa      	ldr	r2, [r7, #12]
 8005a82:	440a      	add	r2, r1
 8005a84:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005a88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005a8c:	6013      	str	r3, [r2, #0]
    }
  }
  return HAL_OK;
 8005a8e:	2300      	movs	r3, #0
}
 8005a90:	4618      	mov	r0, r3
 8005a92:	3714      	adds	r7, #20
 8005a94:	46bd      	mov	sp, r7
 8005a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a9a:	4770      	bx	lr

08005a9c <USB_SetDevAddress>:
  * @param  address  new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_OTG_GlobalTypeDef *USBx, uint8_t address)
{
 8005a9c:	b480      	push	{r7}
 8005a9e:	b085      	sub	sp, #20
 8005aa0:	af00      	add	r7, sp, #0
 8005aa2:	6078      	str	r0, [r7, #4]
 8005aa4:	460b      	mov	r3, r1
 8005aa6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG &= ~(USB_OTG_DCFG_DAD);
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	68fa      	ldr	r2, [r7, #12]
 8005ab6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005aba:	f423 63fe 	bic.w	r3, r3, #2032	; 0x7f0
 8005abe:	6013      	str	r3, [r2, #0]
  USBx_DEVICE->DCFG |= ((uint32_t)address << 4) & USB_OTG_DCFG_DAD;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ac6:	681a      	ldr	r2, [r3, #0]
 8005ac8:	78fb      	ldrb	r3, [r7, #3]
 8005aca:	011b      	lsls	r3, r3, #4
 8005acc:	f403 63fe 	and.w	r3, r3, #2032	; 0x7f0
 8005ad0:	68f9      	ldr	r1, [r7, #12]
 8005ad2:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	600b      	str	r3, [r1, #0]

  return HAL_OK;
 8005ada:	2300      	movs	r3, #0
}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3714      	adds	r7, #20
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae6:	4770      	bx	lr

08005ae8 <USB_DevConnect>:
  * @brief  USB_DevConnect : Connect the USB device by enabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005ae8:	b480      	push	{r7}
 8005aea:	b085      	sub	sp, #20
 8005aec:	af00      	add	r7, sp, #0
 8005aee:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005af4:	68fb      	ldr	r3, [r7, #12]
 8005af6:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	68fa      	ldr	r2, [r7, #12]
 8005afe:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b02:	f023 0303 	bic.w	r3, r3, #3
 8005b06:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL &= ~USB_OTG_DCTL_SDIS;
 8005b08:	68fb      	ldr	r3, [r7, #12]
 8005b0a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b0e:	685b      	ldr	r3, [r3, #4]
 8005b10:	68fa      	ldr	r2, [r7, #12]
 8005b12:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b16:	f023 0302 	bic.w	r3, r3, #2
 8005b1a:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b1c:	2300      	movs	r3, #0
}
 8005b1e:	4618      	mov	r0, r3
 8005b20:	3714      	adds	r7, #20
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr

08005b2a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8005b2a:	b480      	push	{r7}
 8005b2c:	b085      	sub	sp, #20
 8005b2e:	af00      	add	r7, sp, #0
 8005b30:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8005b36:	68fb      	ldr	r3, [r7, #12]
 8005b38:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005b3c:	681b      	ldr	r3, [r3, #0]
 8005b3e:	68fa      	ldr	r2, [r7, #12]
 8005b40:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005b44:	f023 0303 	bic.w	r3, r3, #3
 8005b48:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8005b4a:	68fb      	ldr	r3, [r7, #12]
 8005b4c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005b50:	685b      	ldr	r3, [r3, #4]
 8005b52:	68fa      	ldr	r2, [r7, #12]
 8005b54:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005b58:	f043 0302 	orr.w	r3, r3, #2
 8005b5c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005b5e:	2300      	movs	r3, #0
}
 8005b60:	4618      	mov	r0, r3
 8005b62:	3714      	adds	r7, #20
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b085      	sub	sp, #20
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	695b      	ldr	r3, [r3, #20]
 8005b78:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	699b      	ldr	r3, [r3, #24]
 8005b7e:	68fa      	ldr	r2, [r7, #12]
 8005b80:	4013      	ands	r3, r2
 8005b82:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8005b84:	68fb      	ldr	r3, [r7, #12]
}
 8005b86:	4618      	mov	r0, r3
 8005b88:	3714      	adds	r7, #20
 8005b8a:	46bd      	mov	sp, r7
 8005b8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b90:	4770      	bx	lr

08005b92 <USB_ReadDevAllOutEpInterrupt>:
  * @brief  USB_ReadDevAllOutEpInterrupt: return the USB device OUT endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllOutEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005b92:	b480      	push	{r7}
 8005b94:	b085      	sub	sp, #20
 8005b96:	af00      	add	r7, sp, #0
 8005b98:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005ba4:	699b      	ldr	r3, [r3, #24]
 8005ba6:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005ba8:	68fb      	ldr	r3, [r7, #12]
 8005baa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bae:	69db      	ldr	r3, [r3, #28]
 8005bb0:	68ba      	ldr	r2, [r7, #8]
 8005bb2:	4013      	ands	r3, r2
 8005bb4:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xffff0000U) >> 16);
 8005bb6:	68bb      	ldr	r3, [r7, #8]
 8005bb8:	0c1b      	lsrs	r3, r3, #16
}
 8005bba:	4618      	mov	r0, r3
 8005bbc:	3714      	adds	r7, #20
 8005bbe:	46bd      	mov	sp, r7
 8005bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bc4:	4770      	bx	lr

08005bc6 <USB_ReadDevAllInEpInterrupt>:
  * @brief  USB_ReadDevAllInEpInterrupt: return the USB device IN endpoints interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t USB_ReadDevAllInEpInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 8005bc6:	b480      	push	{r7}
 8005bc8:	b085      	sub	sp, #20
 8005bca:	af00      	add	r7, sp, #0
 8005bcc:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_DEVICE->DAINT;
 8005bd2:	68fb      	ldr	r3, [r7, #12]
 8005bd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005bd8:	699b      	ldr	r3, [r3, #24]
 8005bda:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DAINTMSK;
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005be2:	69db      	ldr	r3, [r3, #28]
 8005be4:	68ba      	ldr	r2, [r7, #8]
 8005be6:	4013      	ands	r3, r2
 8005be8:	60bb      	str	r3, [r7, #8]

  return ((tmpreg & 0xFFFFU));
 8005bea:	68bb      	ldr	r3, [r7, #8]
 8005bec:	b29b      	uxth	r3, r3
}
 8005bee:	4618      	mov	r0, r3
 8005bf0:	3714      	adds	r7, #20
 8005bf2:	46bd      	mov	sp, r7
 8005bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <USB_ReadDevOutEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device OUT EP Interrupt register
  */
uint32_t USB_ReadDevOutEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005bfa:	b480      	push	{r7}
 8005bfc:	b085      	sub	sp, #20
 8005bfe:	af00      	add	r7, sp, #0
 8005c00:	6078      	str	r0, [r7, #4]
 8005c02:	460b      	mov	r3, r1
 8005c04:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	60fb      	str	r3, [r7, #12]
  uint32_t tmpreg;

  tmpreg  = USBx_OUTEP((uint32_t)epnum)->DOEPINT;
 8005c0a:	78fb      	ldrb	r3, [r7, #3]
 8005c0c:	015a      	lsls	r2, r3, #5
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	4413      	add	r3, r2
 8005c12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005c16:	689b      	ldr	r3, [r3, #8]
 8005c18:	60bb      	str	r3, [r7, #8]
  tmpreg &= USBx_DEVICE->DOEPMSK;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c20:	695b      	ldr	r3, [r3, #20]
 8005c22:	68ba      	ldr	r2, [r7, #8]
 8005c24:	4013      	ands	r3, r2
 8005c26:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c28:	68bb      	ldr	r3, [r7, #8]
}
 8005c2a:	4618      	mov	r0, r3
 8005c2c:	3714      	adds	r7, #20
 8005c2e:	46bd      	mov	sp, r7
 8005c30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c34:	4770      	bx	lr

08005c36 <USB_ReadDevInEPInterrupt>:
  * @param  epnum  endpoint number
  *          This parameter can be a value from 0 to 15
  * @retval Device IN EP Interrupt register
  */
uint32_t USB_ReadDevInEPInterrupt(USB_OTG_GlobalTypeDef *USBx, uint8_t epnum)
{
 8005c36:	b480      	push	{r7}
 8005c38:	b087      	sub	sp, #28
 8005c3a:	af00      	add	r7, sp, #0
 8005c3c:	6078      	str	r0, [r7, #4]
 8005c3e:	460b      	mov	r3, r1
 8005c40:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t msk;
  uint32_t emp;

  msk = USBx_DEVICE->DIEPMSK;
 8005c46:	697b      	ldr	r3, [r7, #20]
 8005c48:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c4c:	691b      	ldr	r3, [r3, #16]
 8005c4e:	613b      	str	r3, [r7, #16]
  emp = USBx_DEVICE->DIEPEMPMSK;
 8005c50:	697b      	ldr	r3, [r7, #20]
 8005c52:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005c56:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c58:	60fb      	str	r3, [r7, #12]
  msk |= ((emp >> (epnum & EP_ADDR_MSK)) & 0x1U) << 7;
 8005c5a:	78fb      	ldrb	r3, [r7, #3]
 8005c5c:	f003 030f 	and.w	r3, r3, #15
 8005c60:	68fa      	ldr	r2, [r7, #12]
 8005c62:	fa22 f303 	lsr.w	r3, r2, r3
 8005c66:	01db      	lsls	r3, r3, #7
 8005c68:	b2db      	uxtb	r3, r3
 8005c6a:	693a      	ldr	r2, [r7, #16]
 8005c6c:	4313      	orrs	r3, r2
 8005c6e:	613b      	str	r3, [r7, #16]
  tmpreg = USBx_INEP((uint32_t)epnum)->DIEPINT & msk;
 8005c70:	78fb      	ldrb	r3, [r7, #3]
 8005c72:	015a      	lsls	r2, r3, #5
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	4413      	add	r3, r2
 8005c78:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005c7c:	689b      	ldr	r3, [r3, #8]
 8005c7e:	693a      	ldr	r2, [r7, #16]
 8005c80:	4013      	ands	r3, r2
 8005c82:	60bb      	str	r3, [r7, #8]

  return tmpreg;
 8005c84:	68bb      	ldr	r3, [r7, #8]
}
 8005c86:	4618      	mov	r0, r3
 8005c88:	371c      	adds	r7, #28
 8005c8a:	46bd      	mov	sp, r7
 8005c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c90:	4770      	bx	lr

08005c92 <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8005c92:	b480      	push	{r7}
 8005c94:	b083      	sub	sp, #12
 8005c96:	af00      	add	r7, sp, #0
 8005c98:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	695b      	ldr	r3, [r3, #20]
 8005c9e:	f003 0301 	and.w	r3, r3, #1
}
 8005ca2:	4618      	mov	r0, r3
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <USB_ActivateSetup>:
  * @brief  Activate EP0 for Setup transactions
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_ActivateSetup(USB_OTG_GlobalTypeDef *USBx)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b085      	sub	sp, #20
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	60fb      	str	r3, [r7, #12]

  /* Set the MPS of the IN EP0 to 64 bytes */
  USBx_INEP(0U)->DIEPCTL &= ~USB_OTG_DIEPCTL_MPSIZ;
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8005cc0:	681b      	ldr	r3, [r3, #0]
 8005cc2:	68fa      	ldr	r2, [r7, #12]
 8005cc4:	f502 6210 	add.w	r2, r2, #2304	; 0x900
 8005cc8:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8005ccc:	f023 0307 	bic.w	r3, r3, #7
 8005cd0:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_CGINAK;
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005cd8:	685b      	ldr	r3, [r3, #4]
 8005cda:	68fa      	ldr	r2, [r7, #12]
 8005cdc:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8005ce0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005ce4:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3714      	adds	r7, #20
 8005cec:	46bd      	mov	sp, r7
 8005cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf2:	4770      	bx	lr

08005cf4 <USB_EP0_OutStart>:
  *           1 : DMA feature used
  * @param  psetup  pointer to setup packet
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EP0_OutStart(USB_OTG_GlobalTypeDef *USBx, uint8_t dma, uint8_t *psetup)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b087      	sub	sp, #28
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	60f8      	str	r0, [r7, #12]
 8005cfc:	460b      	mov	r3, r1
 8005cfe:	607a      	str	r2, [r7, #4]
 8005d00:	72fb      	strb	r3, [r7, #11]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	617b      	str	r3, [r7, #20]
  uint32_t gSNPSiD = *(__IO uint32_t *)(&USBx->CID + 0x1U);
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	333c      	adds	r3, #60	; 0x3c
 8005d0a:	3304      	adds	r3, #4
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	613b      	str	r3, [r7, #16]

  if (gSNPSiD > USB_OTG_CORE_ID_300A)
 8005d10:	693b      	ldr	r3, [r7, #16]
 8005d12:	4a26      	ldr	r2, [pc, #152]	; (8005dac <USB_EP0_OutStart+0xb8>)
 8005d14:	4293      	cmp	r3, r2
 8005d16:	d90a      	bls.n	8005d2e <USB_EP0_OutStart+0x3a>
  {
    if ((USBx_OUTEP(0U)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005d24:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8005d28:	d101      	bne.n	8005d2e <USB_EP0_OutStart+0x3a>
    {
      return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
 8005d2c:	e037      	b.n	8005d9e <USB_EP0_OutStart+0xaa>
    }
  }

  USBx_OUTEP(0U)->DOEPTSIZ = 0U;
 8005d2e:	697b      	ldr	r3, [r7, #20]
 8005d30:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d34:	461a      	mov	r2, r3
 8005d36:	2300      	movs	r3, #0
 8005d38:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (USB_OTG_DOEPTSIZ_PKTCNT & (1U << 19));
 8005d3a:	697b      	ldr	r3, [r7, #20]
 8005d3c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	697a      	ldr	r2, [r7, #20]
 8005d44:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d48:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8005d4c:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |= (3U * 8U);
 8005d4e:	697b      	ldr	r3, [r7, #20]
 8005d50:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	697a      	ldr	r2, [r7, #20]
 8005d58:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d5c:	f043 0318 	orr.w	r3, r3, #24
 8005d60:	6113      	str	r3, [r2, #16]
  USBx_OUTEP(0U)->DOEPTSIZ |=  USB_OTG_DOEPTSIZ_STUPCNT;
 8005d62:	697b      	ldr	r3, [r7, #20]
 8005d64:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d68:	691b      	ldr	r3, [r3, #16]
 8005d6a:	697a      	ldr	r2, [r7, #20]
 8005d6c:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d70:	f043 43c0 	orr.w	r3, r3, #1610612736	; 0x60000000
 8005d74:	6113      	str	r3, [r2, #16]

  if (dma == 1U)
 8005d76:	7afb      	ldrb	r3, [r7, #11]
 8005d78:	2b01      	cmp	r3, #1
 8005d7a:	d10f      	bne.n	8005d9c <USB_EP0_OutStart+0xa8>
  {
    USBx_OUTEP(0U)->DOEPDMA = (uint32_t)psetup;
 8005d7c:	697b      	ldr	r3, [r7, #20]
 8005d7e:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d82:	461a      	mov	r2, r3
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	6153      	str	r3, [r2, #20]
    /* EP enable */
    USBx_OUTEP(0U)->DOEPCTL |= USB_OTG_DOEPCTL_EPENA | USB_OTG_DOEPCTL_USBAEP;
 8005d88:	697b      	ldr	r3, [r7, #20]
 8005d8a:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	697a      	ldr	r2, [r7, #20]
 8005d92:	f502 6230 	add.w	r2, r2, #2816	; 0xb00
 8005d96:	f043 2380 	orr.w	r3, r3, #2147516416	; 0x80008000
 8005d9a:	6013      	str	r3, [r2, #0]
  }

  return HAL_OK;
 8005d9c:	2300      	movs	r3, #0
}
 8005d9e:	4618      	mov	r0, r3
 8005da0:	371c      	adds	r7, #28
 8005da2:	46bd      	mov	sp, r7
 8005da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da8:	4770      	bx	lr
 8005daa:	bf00      	nop
 8005dac:	4f54300a 	.word	0x4f54300a

08005db0 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005db0:	b480      	push	{r7}
 8005db2:	b085      	sub	sp, #20
 8005db4:	af00      	add	r7, sp, #0
 8005db6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005db8:	2300      	movs	r3, #0
 8005dba:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	3301      	adds	r3, #1
 8005dc0:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dc2:	68fb      	ldr	r3, [r7, #12]
 8005dc4:	4a13      	ldr	r2, [pc, #76]	; (8005e14 <USB_CoreReset+0x64>)
 8005dc6:	4293      	cmp	r3, r2
 8005dc8:	d901      	bls.n	8005dce <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8005dca:	2303      	movs	r3, #3
 8005dcc:	e01b      	b.n	8005e06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	691b      	ldr	r3, [r3, #16]
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	daf2      	bge.n	8005dbc <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	691b      	ldr	r3, [r3, #16]
 8005dde:	f043 0201 	orr.w	r2, r3, #1
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8005de6:	68fb      	ldr	r3, [r7, #12]
 8005de8:	3301      	adds	r3, #1
 8005dea:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	4a09      	ldr	r2, [pc, #36]	; (8005e14 <USB_CoreReset+0x64>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d901      	bls.n	8005df8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8005df4:	2303      	movs	r3, #3
 8005df6:	e006      	b.n	8005e06 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	691b      	ldr	r3, [r3, #16]
 8005dfc:	f003 0301 	and.w	r3, r3, #1
 8005e00:	2b01      	cmp	r3, #1
 8005e02:	d0f0      	beq.n	8005de6 <USB_CoreReset+0x36>

  return HAL_OK;
 8005e04:	2300      	movs	r3, #0
}
 8005e06:	4618      	mov	r0, r3
 8005e08:	3714      	adds	r7, #20
 8005e0a:	46bd      	mov	sp, r7
 8005e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e10:	4770      	bx	lr
 8005e12:	bf00      	nop
 8005e14:	00030d40 	.word	0x00030d40

08005e18 <USBD_HID_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005e18:	b580      	push	{r7, lr}
 8005e1a:	b084      	sub	sp, #16
 8005e1c:	af00      	add	r7, sp, #0
 8005e1e:	6078      	str	r0, [r7, #4]
 8005e20:	460b      	mov	r3, r1
 8005e22:	70fb      	strb	r3, [r7, #3]
  UNUSED(cfgidx);

  USBD_HID_HandleTypeDef *hhid;

  hhid = (USBD_HID_HandleTypeDef *)USBD_malloc(sizeof(USBD_HID_HandleTypeDef));
 8005e24:	2010      	movs	r0, #16
 8005e26:	f002 f911 	bl	800804c <USBD_static_malloc>
 8005e2a:	60f8      	str	r0, [r7, #12]

  if (hhid == NULL)
 8005e2c:	68fb      	ldr	r3, [r7, #12]
 8005e2e:	2b00      	cmp	r3, #0
 8005e30:	d109      	bne.n	8005e46 <USBD_HID_Init+0x2e>
  {
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	32b0      	adds	r2, #176	; 0xb0
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    return (uint8_t)USBD_EMEM;
 8005e42:	2302      	movs	r3, #2
 8005e44:	e048      	b.n	8005ed8 <USBD_HID_Init+0xc0>
  }

  pdev->pClassDataCmsit[pdev->classId] = (void *)hhid;
 8005e46:	687b      	ldr	r3, [r7, #4]
 8005e48:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	32b0      	adds	r2, #176	; 0xb0
 8005e50:	68f9      	ldr	r1, [r7, #12]
 8005e52:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  pdev->pClassData = pdev->pClassDataCmsit[pdev->classId];
 8005e56:	687b      	ldr	r3, [r7, #4]
 8005e58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	32b0      	adds	r2, #176	; 0xb0
 8005e60:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8005e64:	687b      	ldr	r3, [r7, #4]
 8005e66:	f8c3 22bc 	str.w	r2, [r3, #700]	; 0x2bc
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	7c1b      	ldrb	r3, [r3, #16]
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d10d      	bne.n	8005e8e <USBD_HID_Init+0x76>
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_HS_BINTERVAL;
 8005e72:	4b1b      	ldr	r3, [pc, #108]	; (8005ee0 <USBD_HID_Init+0xc8>)
 8005e74:	781b      	ldrb	r3, [r3, #0]
 8005e76:	f003 020f 	and.w	r2, r3, #15
 8005e7a:	6879      	ldr	r1, [r7, #4]
 8005e7c:	4613      	mov	r3, r2
 8005e7e:	009b      	lsls	r3, r3, #2
 8005e80:	4413      	add	r3, r2
 8005e82:	009b      	lsls	r3, r3, #2
 8005e84:	440b      	add	r3, r1
 8005e86:	3326      	adds	r3, #38	; 0x26
 8005e88:	2207      	movs	r2, #7
 8005e8a:	801a      	strh	r2, [r3, #0]
 8005e8c:	e00c      	b.n	8005ea8 <USBD_HID_Init+0x90>
  }
  else   /* LOW and FULL-speed endpoints */
  {
    pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = HID_FS_BINTERVAL;
 8005e8e:	4b14      	ldr	r3, [pc, #80]	; (8005ee0 <USBD_HID_Init+0xc8>)
 8005e90:	781b      	ldrb	r3, [r3, #0]
 8005e92:	f003 020f 	and.w	r2, r3, #15
 8005e96:	6879      	ldr	r1, [r7, #4]
 8005e98:	4613      	mov	r3, r2
 8005e9a:	009b      	lsls	r3, r3, #2
 8005e9c:	4413      	add	r3, r2
 8005e9e:	009b      	lsls	r3, r3, #2
 8005ea0:	440b      	add	r3, r1
 8005ea2:	3326      	adds	r3, #38	; 0x26
 8005ea4:	220a      	movs	r2, #10
 8005ea6:	801a      	strh	r2, [r3, #0]
  }

  /* Open EP IN */
  (void)USBD_LL_OpenEP(pdev, HIDInEpAdd, USBD_EP_TYPE_INTR, HID_EPIN_SIZE);
 8005ea8:	4b0d      	ldr	r3, [pc, #52]	; (8005ee0 <USBD_HID_Init+0xc8>)
 8005eaa:	7819      	ldrb	r1, [r3, #0]
 8005eac:	2304      	movs	r3, #4
 8005eae:	2203      	movs	r2, #3
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f001 ffba 	bl	8007e2a <USBD_LL_OpenEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 1U;
 8005eb6:	4b0a      	ldr	r3, [pc, #40]	; (8005ee0 <USBD_HID_Init+0xc8>)
 8005eb8:	781b      	ldrb	r3, [r3, #0]
 8005eba:	f003 020f 	and.w	r2, r3, #15
 8005ebe:	6879      	ldr	r1, [r7, #4]
 8005ec0:	4613      	mov	r3, r2
 8005ec2:	009b      	lsls	r3, r3, #2
 8005ec4:	4413      	add	r3, r2
 8005ec6:	009b      	lsls	r3, r3, #2
 8005ec8:	440b      	add	r3, r1
 8005eca:	3324      	adds	r3, #36	; 0x24
 8005ecc:	2201      	movs	r2, #1
 8005ece:	801a      	strh	r2, [r3, #0]

  hhid->state = HID_IDLE;
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 8005ed6:	2300      	movs	r3, #0
}
 8005ed8:	4618      	mov	r0, r3
 8005eda:	3710      	adds	r7, #16
 8005edc:	46bd      	mov	sp, r7
 8005ede:	bd80      	pop	{r7, pc}
 8005ee0:	20000493 	.word	0x20000493

08005ee4 <USBD_HID_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t USBD_HID_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8005ee4:	b580      	push	{r7, lr}
 8005ee6:	b082      	sub	sp, #8
 8005ee8:	af00      	add	r7, sp, #0
 8005eea:	6078      	str	r0, [r7, #4]
 8005eec:	460b      	mov	r3, r1
 8005eee:	70fb      	strb	r3, [r7, #3]
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd  = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  /* Close HID EPs */
  (void)USBD_LL_CloseEP(pdev, HIDInEpAdd);
 8005ef0:	4b1f      	ldr	r3, [pc, #124]	; (8005f70 <USBD_HID_DeInit+0x8c>)
 8005ef2:	781b      	ldrb	r3, [r3, #0]
 8005ef4:	4619      	mov	r1, r3
 8005ef6:	6878      	ldr	r0, [r7, #4]
 8005ef8:	f001 ffbd 	bl	8007e76 <USBD_LL_CloseEP>
  pdev->ep_in[HIDInEpAdd & 0xFU].is_used = 0U;
 8005efc:	4b1c      	ldr	r3, [pc, #112]	; (8005f70 <USBD_HID_DeInit+0x8c>)
 8005efe:	781b      	ldrb	r3, [r3, #0]
 8005f00:	f003 020f 	and.w	r2, r3, #15
 8005f04:	6879      	ldr	r1, [r7, #4]
 8005f06:	4613      	mov	r3, r2
 8005f08:	009b      	lsls	r3, r3, #2
 8005f0a:	4413      	add	r3, r2
 8005f0c:	009b      	lsls	r3, r3, #2
 8005f0e:	440b      	add	r3, r1
 8005f10:	3324      	adds	r3, #36	; 0x24
 8005f12:	2200      	movs	r2, #0
 8005f14:	801a      	strh	r2, [r3, #0]
  pdev->ep_in[HIDInEpAdd & 0xFU].bInterval = 0U;
 8005f16:	4b16      	ldr	r3, [pc, #88]	; (8005f70 <USBD_HID_DeInit+0x8c>)
 8005f18:	781b      	ldrb	r3, [r3, #0]
 8005f1a:	f003 020f 	and.w	r2, r3, #15
 8005f1e:	6879      	ldr	r1, [r7, #4]
 8005f20:	4613      	mov	r3, r2
 8005f22:	009b      	lsls	r3, r3, #2
 8005f24:	4413      	add	r3, r2
 8005f26:	009b      	lsls	r3, r3, #2
 8005f28:	440b      	add	r3, r1
 8005f2a:	3326      	adds	r3, #38	; 0x26
 8005f2c:	2200      	movs	r2, #0
 8005f2e:	801a      	strh	r2, [r3, #0]

  /* Free allocated memory */
  if (pdev->pClassDataCmsit[pdev->classId] != NULL)
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	32b0      	adds	r2, #176	; 0xb0
 8005f3a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f3e:	2b00      	cmp	r3, #0
 8005f40:	d011      	beq.n	8005f66 <USBD_HID_DeInit+0x82>
  {
    (void)USBD_free(pdev->pClassDataCmsit[pdev->classId]);
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	32b0      	adds	r2, #176	; 0xb0
 8005f4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f50:	4618      	mov	r0, r3
 8005f52:	f002 f889 	bl	8008068 <USBD_static_free>
    pdev->pClassDataCmsit[pdev->classId] = NULL;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	32b0      	adds	r2, #176	; 0xb0
 8005f60:	2100      	movs	r1, #0
 8005f62:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return (uint8_t)USBD_OK;
 8005f66:	2300      	movs	r3, #0
}
 8005f68:	4618      	mov	r0, r3
 8005f6a:	3708      	adds	r7, #8
 8005f6c:	46bd      	mov	sp, r7
 8005f6e:	bd80      	pop	{r7, pc}
 8005f70:	20000493 	.word	0x20000493

08005f74 <USBD_HID_Setup>:
  * @param  pdev: instance
  * @param  req: usb requests
  * @retval status
  */
static uint8_t USBD_HID_Setup(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8005f74:	b580      	push	{r7, lr}
 8005f76:	b086      	sub	sp, #24
 8005f78:	af00      	add	r7, sp, #0
 8005f7a:	6078      	str	r0, [r7, #4]
 8005f7c:	6039      	str	r1, [r7, #0]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	32b0      	adds	r2, #176	; 0xb0
 8005f88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005f8c:	60fb      	str	r3, [r7, #12]
  USBD_StatusTypeDef ret = USBD_OK;
 8005f8e:	2300      	movs	r3, #0
 8005f90:	75fb      	strb	r3, [r7, #23]
  uint16_t len;
  uint8_t *pbuf;
  uint16_t status_info = 0U;
 8005f92:	2300      	movs	r3, #0
 8005f94:	817b      	strh	r3, [r7, #10]

  if (hhid == NULL)
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	2b00      	cmp	r3, #0
 8005f9a:	d101      	bne.n	8005fa0 <USBD_HID_Setup+0x2c>
  {
    return (uint8_t)USBD_FAIL;
 8005f9c:	2303      	movs	r3, #3
 8005f9e:	e0e8      	b.n	8006172 <USBD_HID_Setup+0x1fe>
  }

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d046      	beq.n	800603a <USBD_HID_Setup+0xc6>
 8005fac:	2b20      	cmp	r3, #32
 8005fae:	f040 80d8 	bne.w	8006162 <USBD_HID_Setup+0x1ee>
  {
    case USB_REQ_TYPE_CLASS :
      switch (req->bRequest)
 8005fb2:	683b      	ldr	r3, [r7, #0]
 8005fb4:	785b      	ldrb	r3, [r3, #1]
 8005fb6:	3b02      	subs	r3, #2
 8005fb8:	2b09      	cmp	r3, #9
 8005fba:	d836      	bhi.n	800602a <USBD_HID_Setup+0xb6>
 8005fbc:	a201      	add	r2, pc, #4	; (adr r2, 8005fc4 <USBD_HID_Setup+0x50>)
 8005fbe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fc2:	bf00      	nop
 8005fc4:	0800601b 	.word	0x0800601b
 8005fc8:	08005ffb 	.word	0x08005ffb
 8005fcc:	0800602b 	.word	0x0800602b
 8005fd0:	0800602b 	.word	0x0800602b
 8005fd4:	0800602b 	.word	0x0800602b
 8005fd8:	0800602b 	.word	0x0800602b
 8005fdc:	0800602b 	.word	0x0800602b
 8005fe0:	0800602b 	.word	0x0800602b
 8005fe4:	08006009 	.word	0x08006009
 8005fe8:	08005fed 	.word	0x08005fed
      {
        case HID_REQ_SET_PROTOCOL:
          hhid->Protocol = (uint8_t)(req->wValue);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	885b      	ldrh	r3, [r3, #2]
 8005ff0:	b2db      	uxtb	r3, r3
 8005ff2:	461a      	mov	r2, r3
 8005ff4:	68fb      	ldr	r3, [r7, #12]
 8005ff6:	601a      	str	r2, [r3, #0]
          break;
 8005ff8:	e01e      	b.n	8006038 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_PROTOCOL:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->Protocol, 1U);
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	4619      	mov	r1, r3
 8006000:	6878      	ldr	r0, [r7, #4]
 8006002:	f001 fbd5 	bl	80077b0 <USBD_CtlSendData>
          break;
 8006006:	e017      	b.n	8006038 <USBD_HID_Setup+0xc4>

        case HID_REQ_SET_IDLE:
          hhid->IdleState = (uint8_t)(req->wValue >> 8);
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	885b      	ldrh	r3, [r3, #2]
 800600c:	0a1b      	lsrs	r3, r3, #8
 800600e:	b29b      	uxth	r3, r3
 8006010:	b2db      	uxtb	r3, r3
 8006012:	461a      	mov	r2, r3
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	605a      	str	r2, [r3, #4]
          break;
 8006018:	e00e      	b.n	8006038 <USBD_HID_Setup+0xc4>

        case HID_REQ_GET_IDLE:
          (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->IdleState, 1U);
 800601a:	68fb      	ldr	r3, [r7, #12]
 800601c:	3304      	adds	r3, #4
 800601e:	2201      	movs	r2, #1
 8006020:	4619      	mov	r1, r3
 8006022:	6878      	ldr	r0, [r7, #4]
 8006024:	f001 fbc4 	bl	80077b0 <USBD_CtlSendData>
          break;
 8006028:	e006      	b.n	8006038 <USBD_HID_Setup+0xc4>

        default:
          USBD_CtlError(pdev, req);
 800602a:	6839      	ldr	r1, [r7, #0]
 800602c:	6878      	ldr	r0, [r7, #4]
 800602e:	f001 fb4e 	bl	80076ce <USBD_CtlError>
          ret = USBD_FAIL;
 8006032:	2303      	movs	r3, #3
 8006034:	75fb      	strb	r3, [r7, #23]
          break;
 8006036:	bf00      	nop
      }
      break;
 8006038:	e09a      	b.n	8006170 <USBD_HID_Setup+0x1fc>
    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 800603a:	683b      	ldr	r3, [r7, #0]
 800603c:	785b      	ldrb	r3, [r3, #1]
 800603e:	2b0b      	cmp	r3, #11
 8006040:	f200 8086 	bhi.w	8006150 <USBD_HID_Setup+0x1dc>
 8006044:	a201      	add	r2, pc, #4	; (adr r2, 800604c <USBD_HID_Setup+0xd8>)
 8006046:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800604a:	bf00      	nop
 800604c:	0800607d 	.word	0x0800607d
 8006050:	0800615f 	.word	0x0800615f
 8006054:	08006151 	.word	0x08006151
 8006058:	08006151 	.word	0x08006151
 800605c:	08006151 	.word	0x08006151
 8006060:	08006151 	.word	0x08006151
 8006064:	080060a7 	.word	0x080060a7
 8006068:	08006151 	.word	0x08006151
 800606c:	08006151 	.word	0x08006151
 8006070:	08006151 	.word	0x08006151
 8006074:	080060ff 	.word	0x080060ff
 8006078:	08006129 	.word	0x08006129
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006082:	b2db      	uxtb	r3, r3
 8006084:	2b03      	cmp	r3, #3
 8006086:	d107      	bne.n	8006098 <USBD_HID_Setup+0x124>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&status_info, 2U);
 8006088:	f107 030a 	add.w	r3, r7, #10
 800608c:	2202      	movs	r2, #2
 800608e:	4619      	mov	r1, r3
 8006090:	6878      	ldr	r0, [r7, #4]
 8006092:	f001 fb8d 	bl	80077b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006096:	e063      	b.n	8006160 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006098:	6839      	ldr	r1, [r7, #0]
 800609a:	6878      	ldr	r0, [r7, #4]
 800609c:	f001 fb17 	bl	80076ce <USBD_CtlError>
            ret = USBD_FAIL;
 80060a0:	2303      	movs	r3, #3
 80060a2:	75fb      	strb	r3, [r7, #23]
          break;
 80060a4:	e05c      	b.n	8006160 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_DESCRIPTOR:
          if ((req->wValue >> 8) == HID_REPORT_DESC)
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	885b      	ldrh	r3, [r3, #2]
 80060aa:	0a1b      	lsrs	r3, r3, #8
 80060ac:	b29b      	uxth	r3, r3
 80060ae:	2b22      	cmp	r3, #34	; 0x22
 80060b0:	d108      	bne.n	80060c4 <USBD_HID_Setup+0x150>
          {
            len = MIN(HID_MOUSE_REPORT_DESC_SIZE, req->wLength);
 80060b2:	683b      	ldr	r3, [r7, #0]
 80060b4:	88db      	ldrh	r3, [r3, #6]
 80060b6:	2b3f      	cmp	r3, #63	; 0x3f
 80060b8:	bf28      	it	cs
 80060ba:	233f      	movcs	r3, #63	; 0x3f
 80060bc:	82bb      	strh	r3, [r7, #20]
            pbuf = HID_MOUSE_ReportDesc;
 80060be:	4b2f      	ldr	r3, [pc, #188]	; (800617c <USBD_HID_Setup+0x208>)
 80060c0:	613b      	str	r3, [r7, #16]
 80060c2:	e015      	b.n	80060f0 <USBD_HID_Setup+0x17c>
          }
          else if ((req->wValue >> 8) == HID_DESCRIPTOR_TYPE)
 80060c4:	683b      	ldr	r3, [r7, #0]
 80060c6:	885b      	ldrh	r3, [r3, #2]
 80060c8:	0a1b      	lsrs	r3, r3, #8
 80060ca:	b29b      	uxth	r3, r3
 80060cc:	2b21      	cmp	r3, #33	; 0x21
 80060ce:	d108      	bne.n	80060e2 <USBD_HID_Setup+0x16e>
          {
            pbuf = USBD_HID_Desc;
 80060d0:	4b2b      	ldr	r3, [pc, #172]	; (8006180 <USBD_HID_Setup+0x20c>)
 80060d2:	613b      	str	r3, [r7, #16]
            len = MIN(USB_HID_DESC_SIZ, req->wLength);
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	88db      	ldrh	r3, [r3, #6]
 80060d8:	2b09      	cmp	r3, #9
 80060da:	bf28      	it	cs
 80060dc:	2309      	movcs	r3, #9
 80060de:	82bb      	strh	r3, [r7, #20]
 80060e0:	e006      	b.n	80060f0 <USBD_HID_Setup+0x17c>
          }
          else
          {
            USBD_CtlError(pdev, req);
 80060e2:	6839      	ldr	r1, [r7, #0]
 80060e4:	6878      	ldr	r0, [r7, #4]
 80060e6:	f001 faf2 	bl	80076ce <USBD_CtlError>
            ret = USBD_FAIL;
 80060ea:	2303      	movs	r3, #3
 80060ec:	75fb      	strb	r3, [r7, #23]
            break;
 80060ee:	e037      	b.n	8006160 <USBD_HID_Setup+0x1ec>
          }
          (void)USBD_CtlSendData(pdev, pbuf, len);
 80060f0:	8abb      	ldrh	r3, [r7, #20]
 80060f2:	461a      	mov	r2, r3
 80060f4:	6939      	ldr	r1, [r7, #16]
 80060f6:	6878      	ldr	r0, [r7, #4]
 80060f8:	f001 fb5a 	bl	80077b0 <USBD_CtlSendData>
          break;
 80060fc:	e030      	b.n	8006160 <USBD_HID_Setup+0x1ec>

        case USB_REQ_GET_INTERFACE :
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006104:	b2db      	uxtb	r3, r3
 8006106:	2b03      	cmp	r3, #3
 8006108:	d107      	bne.n	800611a <USBD_HID_Setup+0x1a6>
          {
            (void)USBD_CtlSendData(pdev, (uint8_t *)&hhid->AltSetting, 1U);
 800610a:	68fb      	ldr	r3, [r7, #12]
 800610c:	3308      	adds	r3, #8
 800610e:	2201      	movs	r2, #1
 8006110:	4619      	mov	r1, r3
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f001 fb4c 	bl	80077b0 <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006118:	e022      	b.n	8006160 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 800611a:	6839      	ldr	r1, [r7, #0]
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f001 fad6 	bl	80076ce <USBD_CtlError>
            ret = USBD_FAIL;
 8006122:	2303      	movs	r3, #3
 8006124:	75fb      	strb	r3, [r7, #23]
          break;
 8006126:	e01b      	b.n	8006160 <USBD_HID_Setup+0x1ec>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800612e:	b2db      	uxtb	r3, r3
 8006130:	2b03      	cmp	r3, #3
 8006132:	d106      	bne.n	8006142 <USBD_HID_Setup+0x1ce>
          {
            hhid->AltSetting = (uint8_t)(req->wValue);
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	885b      	ldrh	r3, [r3, #2]
 8006138:	b2db      	uxtb	r3, r3
 800613a:	461a      	mov	r2, r3
 800613c:	68fb      	ldr	r3, [r7, #12]
 800613e:	609a      	str	r2, [r3, #8]
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 8006140:	e00e      	b.n	8006160 <USBD_HID_Setup+0x1ec>
            USBD_CtlError(pdev, req);
 8006142:	6839      	ldr	r1, [r7, #0]
 8006144:	6878      	ldr	r0, [r7, #4]
 8006146:	f001 fac2 	bl	80076ce <USBD_CtlError>
            ret = USBD_FAIL;
 800614a:	2303      	movs	r3, #3
 800614c:	75fb      	strb	r3, [r7, #23]
          break;
 800614e:	e007      	b.n	8006160 <USBD_HID_Setup+0x1ec>

        case USB_REQ_CLEAR_FEATURE:
          break;

        default:
          USBD_CtlError(pdev, req);
 8006150:	6839      	ldr	r1, [r7, #0]
 8006152:	6878      	ldr	r0, [r7, #4]
 8006154:	f001 fabb 	bl	80076ce <USBD_CtlError>
          ret = USBD_FAIL;
 8006158:	2303      	movs	r3, #3
 800615a:	75fb      	strb	r3, [r7, #23]
          break;
 800615c:	e000      	b.n	8006160 <USBD_HID_Setup+0x1ec>
          break;
 800615e:	bf00      	nop
      }
      break;
 8006160:	e006      	b.n	8006170 <USBD_HID_Setup+0x1fc>

    default:
      USBD_CtlError(pdev, req);
 8006162:	6839      	ldr	r1, [r7, #0]
 8006164:	6878      	ldr	r0, [r7, #4]
 8006166:	f001 fab2 	bl	80076ce <USBD_CtlError>
      ret = USBD_FAIL;
 800616a:	2303      	movs	r3, #3
 800616c:	75fb      	strb	r3, [r7, #23]
      break;
 800616e:	bf00      	nop
  }

  return (uint8_t)ret;
 8006170:	7dfb      	ldrb	r3, [r7, #23]
}
 8006172:	4618      	mov	r0, r3
 8006174:	3718      	adds	r7, #24
 8006176:	46bd      	mov	sp, r7
 8006178:	bd80      	pop	{r7, pc}
 800617a:	bf00      	nop
 800617c:	20000454 	.word	0x20000454
 8006180:	2000043c 	.word	0x2000043c

08006184 <USBD_HID_SendReport>:
  * @param  pdev: device instance
  * @param  buff: pointer to report
  * @retval status
  */
uint8_t USBD_HID_SendReport(USBD_HandleTypeDef *pdev, uint8_t *report, uint16_t len)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	60f8      	str	r0, [r7, #12]
 800618c:	60b9      	str	r1, [r7, #8]
 800618e:	4613      	mov	r3, r2
 8006190:	80fb      	strh	r3, [r7, #6]
  USBD_HID_HandleTypeDef *hhid = (USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId];
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006198:	68fb      	ldr	r3, [r7, #12]
 800619a:	32b0      	adds	r2, #176	; 0xb0
 800619c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061a0:	617b      	str	r3, [r7, #20]

  if (hhid == NULL)
 80061a2:	697b      	ldr	r3, [r7, #20]
 80061a4:	2b00      	cmp	r3, #0
 80061a6:	d101      	bne.n	80061ac <USBD_HID_SendReport+0x28>
  {
    return (uint8_t)USBD_FAIL;
 80061a8:	2303      	movs	r3, #3
 80061aa:	e014      	b.n	80061d6 <USBD_HID_SendReport+0x52>
#ifdef USE_USBD_COMPOSITE
  /* Get the Endpoints addresses allocated for this class instance */
  HIDInEpAdd = USBD_CoreGetEPAdd(pdev, USBD_EP_IN, USBD_EP_TYPE_INTR);
#endif /* USE_USBD_COMPOSITE */

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80061b2:	b2db      	uxtb	r3, r3
 80061b4:	2b03      	cmp	r3, #3
 80061b6:	d10d      	bne.n	80061d4 <USBD_HID_SendReport+0x50>
  {
    if (hhid->state == HID_IDLE)
 80061b8:	697b      	ldr	r3, [r7, #20]
 80061ba:	7b1b      	ldrb	r3, [r3, #12]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d109      	bne.n	80061d4 <USBD_HID_SendReport+0x50>
    {
      hhid->state = HID_BUSY;
 80061c0:	697b      	ldr	r3, [r7, #20]
 80061c2:	2201      	movs	r2, #1
 80061c4:	731a      	strb	r2, [r3, #12]
      (void)USBD_LL_Transmit(pdev, HIDInEpAdd, report, len);
 80061c6:	4b06      	ldr	r3, [pc, #24]	; (80061e0 <USBD_HID_SendReport+0x5c>)
 80061c8:	7819      	ldrb	r1, [r3, #0]
 80061ca:	88fb      	ldrh	r3, [r7, #6]
 80061cc:	68ba      	ldr	r2, [r7, #8]
 80061ce:	68f8      	ldr	r0, [r7, #12]
 80061d0:	f001 fef9 	bl	8007fc6 <USBD_LL_Transmit>
    }
  }

  return (uint8_t)USBD_OK;
 80061d4:	2300      	movs	r3, #0
}
 80061d6:	4618      	mov	r0, r3
 80061d8:	3718      	adds	r7, #24
 80061da:	46bd      	mov	sp, r7
 80061dc:	bd80      	pop	{r7, pc}
 80061de:	bf00      	nop
 80061e0:	20000493 	.word	0x20000493

080061e4 <USBD_HID_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetFSCfgDesc(uint16_t *length)
{
 80061e4:	b580      	push	{r7, lr}
 80061e6:	b084      	sub	sp, #16
 80061e8:	af00      	add	r7, sp, #0
 80061ea:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 80061ec:	2181      	movs	r1, #129	; 0x81
 80061ee:	4809      	ldr	r0, [pc, #36]	; (8006214 <USBD_HID_GetFSCfgDesc+0x30>)
 80061f0:	f000 fc35 	bl	8006a5e <USBD_GetEpDesc>
 80061f4:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2b00      	cmp	r3, #0
 80061fa:	d002      	beq.n	8006202 <USBD_HID_GetFSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 80061fc:	68fb      	ldr	r3, [r7, #12]
 80061fe:	220a      	movs	r2, #10
 8006200:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	2222      	movs	r2, #34	; 0x22
 8006206:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006208:	4b02      	ldr	r3, [pc, #8]	; (8006214 <USBD_HID_GetFSCfgDesc+0x30>)
}
 800620a:	4618      	mov	r0, r3
 800620c:	3710      	adds	r7, #16
 800620e:	46bd      	mov	sp, r7
 8006210:	bd80      	pop	{r7, pc}
 8006212:	bf00      	nop
 8006214:	20000418 	.word	0x20000418

08006218 <USBD_HID_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetHSCfgDesc(uint16_t *length)
{
 8006218:	b580      	push	{r7, lr}
 800621a:	b084      	sub	sp, #16
 800621c:	af00      	add	r7, sp, #0
 800621e:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006220:	2181      	movs	r1, #129	; 0x81
 8006222:	4809      	ldr	r0, [pc, #36]	; (8006248 <USBD_HID_GetHSCfgDesc+0x30>)
 8006224:	f000 fc1b 	bl	8006a5e <USBD_GetEpDesc>
 8006228:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d002      	beq.n	8006236 <USBD_HID_GetHSCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_HS_BINTERVAL;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2207      	movs	r2, #7
 8006234:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2222      	movs	r2, #34	; 0x22
 800623a:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 800623c:	4b02      	ldr	r3, [pc, #8]	; (8006248 <USBD_HID_GetHSCfgDesc+0x30>)
}
 800623e:	4618      	mov	r0, r3
 8006240:	3710      	adds	r7, #16
 8006242:	46bd      	mov	sp, r7
 8006244:	bd80      	pop	{r7, pc}
 8006246:	bf00      	nop
 8006248:	20000418 	.word	0x20000418

0800624c <USBD_HID_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetOtherSpeedCfgDesc(uint16_t *length)
{
 800624c:	b580      	push	{r7, lr}
 800624e:	b084      	sub	sp, #16
 8006250:	af00      	add	r7, sp, #0
 8006252:	6078      	str	r0, [r7, #4]
  USBD_EpDescTypeDef *pEpDesc = USBD_GetEpDesc(USBD_HID_CfgDesc, HID_EPIN_ADDR);
 8006254:	2181      	movs	r1, #129	; 0x81
 8006256:	4809      	ldr	r0, [pc, #36]	; (800627c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
 8006258:	f000 fc01 	bl	8006a5e <USBD_GetEpDesc>
 800625c:	60f8      	str	r0, [r7, #12]

  if (pEpDesc != NULL)
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	2b00      	cmp	r3, #0
 8006262:	d002      	beq.n	800626a <USBD_HID_GetOtherSpeedCfgDesc+0x1e>
  {
    pEpDesc->bInterval = HID_FS_BINTERVAL;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	220a      	movs	r2, #10
 8006268:	719a      	strb	r2, [r3, #6]
  }

  *length = (uint16_t)sizeof(USBD_HID_CfgDesc);
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	2222      	movs	r2, #34	; 0x22
 800626e:	801a      	strh	r2, [r3, #0]
  return USBD_HID_CfgDesc;
 8006270:	4b02      	ldr	r3, [pc, #8]	; (800627c <USBD_HID_GetOtherSpeedCfgDesc+0x30>)
}
 8006272:	4618      	mov	r0, r3
 8006274:	3710      	adds	r7, #16
 8006276:	46bd      	mov	sp, r7
 8006278:	bd80      	pop	{r7, pc}
 800627a:	bf00      	nop
 800627c:	20000418 	.word	0x20000418

08006280 <USBD_HID_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint index
  * @retval status
  */
static uint8_t USBD_HID_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8006280:	b480      	push	{r7}
 8006282:	b083      	sub	sp, #12
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	460b      	mov	r3, r1
 800628a:	70fb      	strb	r3, [r7, #3]
  UNUSED(epnum);
  /* Ensure that the FIFO is empty before a new transfer, this condition could
  be caused by  a new transfer before the end of the previous transfer */
  ((USBD_HID_HandleTypeDef *)pdev->pClassDataCmsit[pdev->classId])->state = HID_IDLE;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	32b0      	adds	r2, #176	; 0xb0
 8006296:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800629a:	2200      	movs	r2, #0
 800629c:	731a      	strb	r2, [r3, #12]

  return (uint8_t)USBD_OK;
 800629e:	2300      	movs	r3, #0
}
 80062a0:	4618      	mov	r0, r3
 80062a2:	370c      	adds	r7, #12
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <USBD_HID_GetDeviceQualifierDesc>:
  *         return Device Qualifier descriptor
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t *USBD_HID_GetDeviceQualifierDesc(uint16_t *length)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b083      	sub	sp, #12
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  *length = (uint16_t)sizeof(USBD_HID_DeviceQualifierDesc);
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	220a      	movs	r2, #10
 80062b8:	801a      	strh	r2, [r3, #0]

  return USBD_HID_DeviceQualifierDesc;
 80062ba:	4b03      	ldr	r3, [pc, #12]	; (80062c8 <USBD_HID_GetDeviceQualifierDesc+0x1c>)
}
 80062bc:	4618      	mov	r0, r3
 80062be:	370c      	adds	r7, #12
 80062c0:	46bd      	mov	sp, r7
 80062c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c6:	4770      	bx	lr
 80062c8:	20000448 	.word	0x20000448

080062cc <USBD_Init>:
  * @param  id: Low level core index
  * @retval None
  */
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 80062cc:	b580      	push	{r7, lr}
 80062ce:	b086      	sub	sp, #24
 80062d0:	af00      	add	r7, sp, #0
 80062d2:	60f8      	str	r0, [r7, #12]
 80062d4:	60b9      	str	r1, [r7, #8]
 80062d6:	4613      	mov	r3, r2
 80062d8:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef ret;

  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 80062da:	68fb      	ldr	r3, [r7, #12]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	d101      	bne.n	80062e4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 80062e0:	2303      	movs	r3, #3
 80062e2:	e01f      	b.n	8006324 <USBD_Init+0x58>
    pdev->NumClasses = 0;
    pdev->classId = 0;
  }
#else
  /* Unlink previous class*/
  pdev->pClass[0] = NULL;
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	2200      	movs	r2, #0
 80062e8:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  pdev->pUserData[0] = NULL;
 80062ec:	68fb      	ldr	r3, [r7, #12]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f8c3 22c4 	str.w	r2, [r3, #708]	; 0x2c4
#endif /* USE_USBD_COMPOSITE */

  pdev->pConfDesc = NULL;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	2200      	movs	r2, #0
 80062f8:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d003      	beq.n	800630a <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	68ba      	ldr	r2, [r7, #8]
 8006306:	f8c3 22b4 	str.w	r2, [r3, #692]	; 0x2b4
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 800630a:	68fb      	ldr	r3, [r7, #12]
 800630c:	2201      	movs	r2, #1
 800630e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->id = id;
 8006312:	68fb      	ldr	r3, [r7, #12]
 8006314:	79fa      	ldrb	r2, [r7, #7]
 8006316:	701a      	strb	r2, [r3, #0]

  /* Initialize low level driver */
  ret = USBD_LL_Init(pdev);
 8006318:	68f8      	ldr	r0, [r7, #12]
 800631a:	f001 fd1f 	bl	8007d5c <USBD_LL_Init>
 800631e:	4603      	mov	r3, r0
 8006320:	75fb      	strb	r3, [r7, #23]

  return ret;
 8006322:	7dfb      	ldrb	r3, [r7, #23]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}

0800632c <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 800632c:	b580      	push	{r7, lr}
 800632e:	b084      	sub	sp, #16
 8006330:	af00      	add	r7, sp, #0
 8006332:	6078      	str	r0, [r7, #4]
 8006334:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8006336:	2300      	movs	r3, #0
 8006338:	81fb      	strh	r3, [r7, #14]

  if (pclass == NULL)
 800633a:	683b      	ldr	r3, [r7, #0]
 800633c:	2b00      	cmp	r3, #0
 800633e:	d101      	bne.n	8006344 <USBD_RegisterClass+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif /* (USBD_DEBUG_LEVEL > 1U) */
    return USBD_FAIL;
 8006340:	2303      	movs	r3, #3
 8006342:	e025      	b.n	8006390 <USBD_RegisterClass+0x64>
  }

  /* link the class to the USB Device handle */
  pdev->pClass[0] = pclass;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	683a      	ldr	r2, [r7, #0]
 8006348:	f8c3 22b8 	str.w	r2, [r3, #696]	; 0x2b8
  if (pdev->pClass[pdev->classId]->GetHSConfigDescriptor != NULL)
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetHSConfigDescriptor(&len);
  }
#else /* Default USE_USB_FS */
  if (pdev->pClass[pdev->classId]->GetFSConfigDescriptor != NULL)
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	32ae      	adds	r2, #174	; 0xae
 8006356:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800635a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800635c:	2b00      	cmp	r3, #0
 800635e:	d00f      	beq.n	8006380 <USBD_RegisterClass+0x54>
  {
    pdev->pConfDesc = (void *)pdev->pClass[pdev->classId]->GetFSConfigDescriptor(&len);
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	32ae      	adds	r2, #174	; 0xae
 800636a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800636e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006370:	f107 020e 	add.w	r2, r7, #14
 8006374:	4610      	mov	r0, r2
 8006376:	4798      	blx	r3
 8006378:	4602      	mov	r2, r0
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	f8c3 22d0 	str.w	r2, [r3, #720]	; 0x2d0
  }
#endif /* USE_USB_FS */

  /* Increment the NumClasses */
  pdev->NumClasses ++;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	f8d3 32d8 	ldr.w	r3, [r3, #728]	; 0x2d8
 8006386:	1c5a      	adds	r2, r3, #1
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	f8c3 22d8 	str.w	r2, [r3, #728]	; 0x2d8

  return USBD_OK;
 800638e:	2300      	movs	r3, #0
}
 8006390:	4618      	mov	r0, r3
 8006392:	3710      	adds	r7, #16
 8006394:	46bd      	mov	sp, r7
 8006396:	bd80      	pop	{r7, pc}

08006398 <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef USBD_Start(USBD_HandleTypeDef *pdev)
{
 8006398:	b580      	push	{r7, lr}
 800639a:	b082      	sub	sp, #8
 800639c:	af00      	add	r7, sp, #0
 800639e:	6078      	str	r0, [r7, #4]
#ifdef USE_USBD_COMPOSITE
  pdev->classId = 0U;
#endif /* USE_USBD_COMPOSITE */

  /* Start the low level driver  */
  return USBD_LL_Start(pdev);
 80063a0:	6878      	ldr	r0, [r7, #4]
 80063a2:	f001 fd27 	bl	8007df4 <USBD_LL_Start>
 80063a6:	4603      	mov	r3, r0
}
 80063a8:	4618      	mov	r0, r3
 80063aa:	3708      	adds	r7, #8
 80063ac:	46bd      	mov	sp, r7
 80063ae:	bd80      	pop	{r7, pc}

080063b0 <USBD_RunTestMode>:
  *         Launch test mode process
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_RunTestMode(USBD_HandleTypeDef *pdev)
{
 80063b0:	b480      	push	{r7}
 80063b2:	b083      	sub	sp, #12
 80063b4:	af00      	add	r7, sp, #0
 80063b6:	6078      	str	r0, [r7, #4]
  return ret;
#else
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80063b8:	2300      	movs	r3, #0
#endif /* USBD_HS_TESTMODE_ENABLE */
}
 80063ba:	4618      	mov	r0, r3
 80063bc:	370c      	adds	r7, #12
 80063be:	46bd      	mov	sp, r7
 80063c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063c4:	4770      	bx	lr

080063c6 <USBD_SetClassConfig>:
  * @param  cfgidx: configuration index
  * @retval status
  */

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063c6:	b580      	push	{r7, lr}
 80063c8:	b084      	sub	sp, #16
 80063ca:	af00      	add	r7, sp, #0
 80063cc:	6078      	str	r0, [r7, #4]
 80063ce:	460b      	mov	r3, r1
 80063d0:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 80063d2:	2300      	movs	r3, #0
 80063d4:	73fb      	strb	r3, [r7, #15]
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d009      	beq.n	80063f4 <USBD_SetClassConfig+0x2e>
  {
    /* Set configuration and Start the Class */
    ret = (USBD_StatusTypeDef)pdev->pClass[0]->Init(pdev, cfgidx);
 80063e0:	687b      	ldr	r3, [r7, #4]
 80063e2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80063e6:	681b      	ldr	r3, [r3, #0]
 80063e8:	78fa      	ldrb	r2, [r7, #3]
 80063ea:	4611      	mov	r1, r2
 80063ec:	6878      	ldr	r0, [r7, #4]
 80063ee:	4798      	blx	r3
 80063f0:	4603      	mov	r3, r0
 80063f2:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 80063f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80063f6:	4618      	mov	r0, r3
 80063f8:	3710      	adds	r7, #16
 80063fa:	46bd      	mov	sp, r7
 80063fc:	bd80      	pop	{r7, pc}

080063fe <USBD_ClrClassConfig>:
  * @param  pdev: device instance
  * @param  cfgidx: configuration index
  * @retval status: USBD_StatusTypeDef
  */
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 80063fe:	b580      	push	{r7, lr}
 8006400:	b084      	sub	sp, #16
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	460b      	mov	r3, r1
 8006408:	70fb      	strb	r3, [r7, #3]
  USBD_StatusTypeDef ret = USBD_OK;
 800640a:	2300      	movs	r3, #0
 800640c:	73fb      	strb	r3, [r7, #15]
      }
    }
  }
#else
  /* Clear configuration  and De-initialize the Class process */
  if (pdev->pClass[0]->DeInit(pdev, cfgidx) != 0U)
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006414:	685b      	ldr	r3, [r3, #4]
 8006416:	78fa      	ldrb	r2, [r7, #3]
 8006418:	4611      	mov	r1, r2
 800641a:	6878      	ldr	r0, [r7, #4]
 800641c:	4798      	blx	r3
 800641e:	4603      	mov	r3, r0
 8006420:	2b00      	cmp	r3, #0
 8006422:	d001      	beq.n	8006428 <USBD_ClrClassConfig+0x2a>
  {
    ret = USBD_FAIL;
 8006424:	2303      	movs	r3, #3
 8006426:	73fb      	strb	r3, [r7, #15]
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006428:	7bfb      	ldrb	r3, [r7, #15]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3710      	adds	r7, #16
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}

08006432 <USBD_LL_SetupStage>:
  *         Handle the setup stage
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8006432:	b580      	push	{r7, lr}
 8006434:	b084      	sub	sp, #16
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret;

  USBD_ParseSetupRequest(&pdev->request, psetup);
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006442:	6839      	ldr	r1, [r7, #0]
 8006444:	4618      	mov	r0, r3
 8006446:	f001 f908 	bl	800765a <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 800644a:	687b      	ldr	r3, [r7, #4]
 800644c:	2201      	movs	r2, #1
 800644e:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  pdev->ep0_data_len = pdev->request.wLength;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	f8b3 32b0 	ldrh.w	r3, [r3, #688]	; 0x2b0
 8006458:	461a      	mov	r2, r3
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

  switch (pdev->request.bmRequest & 0x1FU)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006466:	f003 031f 	and.w	r3, r3, #31
 800646a:	2b02      	cmp	r3, #2
 800646c:	d01a      	beq.n	80064a4 <USBD_LL_SetupStage+0x72>
 800646e:	2b02      	cmp	r3, #2
 8006470:	d822      	bhi.n	80064b8 <USBD_LL_SetupStage+0x86>
 8006472:	2b00      	cmp	r3, #0
 8006474:	d002      	beq.n	800647c <USBD_LL_SetupStage+0x4a>
 8006476:	2b01      	cmp	r3, #1
 8006478:	d00a      	beq.n	8006490 <USBD_LL_SetupStage+0x5e>
 800647a:	e01d      	b.n	80064b8 <USBD_LL_SetupStage+0x86>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      ret = USBD_StdDevReq(pdev, &pdev->request);
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006482:	4619      	mov	r1, r3
 8006484:	6878      	ldr	r0, [r7, #4]
 8006486:	f000 fb5f 	bl	8006b48 <USBD_StdDevReq>
 800648a:	4603      	mov	r3, r0
 800648c:	73fb      	strb	r3, [r7, #15]
      break;
 800648e:	e020      	b.n	80064d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_INTERFACE:
      ret = USBD_StdItfReq(pdev, &pdev->request);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 8006496:	4619      	mov	r1, r3
 8006498:	6878      	ldr	r0, [r7, #4]
 800649a:	f000 fbc7 	bl	8006c2c <USBD_StdItfReq>
 800649e:	4603      	mov	r3, r0
 80064a0:	73fb      	strb	r3, [r7, #15]
      break;
 80064a2:	e016      	b.n	80064d2 <USBD_LL_SetupStage+0xa0>

    case USB_REQ_RECIPIENT_ENDPOINT:
      ret = USBD_StdEPReq(pdev, &pdev->request);
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	f203 23aa 	addw	r3, r3, #682	; 0x2aa
 80064aa:	4619      	mov	r1, r3
 80064ac:	6878      	ldr	r0, [r7, #4]
 80064ae:	f000 fc29 	bl	8006d04 <USBD_StdEPReq>
 80064b2:	4603      	mov	r3, r0
 80064b4:	73fb      	strb	r3, [r7, #15]
      break;
 80064b6:	e00c      	b.n	80064d2 <USBD_LL_SetupStage+0xa0>

    default:
      ret = USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 80064be:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80064c2:	b2db      	uxtb	r3, r3
 80064c4:	4619      	mov	r1, r3
 80064c6:	6878      	ldr	r0, [r7, #4]
 80064c8:	f001 fcf4 	bl	8007eb4 <USBD_LL_StallEP>
 80064cc:	4603      	mov	r3, r0
 80064ce:	73fb      	strb	r3, [r7, #15]
      break;
 80064d0:	bf00      	nop
  }

  return ret;
 80064d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80064d4:	4618      	mov	r0, r3
 80064d6:	3710      	adds	r7, #16
 80064d8:	46bd      	mov	sp, r7
 80064da:	bd80      	pop	{r7, pc}

080064dc <USBD_LL_DataOutStage>:
  * @param  pdata: data pointer
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 80064dc:	b580      	push	{r7, lr}
 80064de:	b086      	sub	sp, #24
 80064e0:	af00      	add	r7, sp, #0
 80064e2:	60f8      	str	r0, [r7, #12]
 80064e4:	460b      	mov	r3, r1
 80064e6:	607a      	str	r2, [r7, #4]
 80064e8:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret = USBD_OK;
 80064ea:	2300      	movs	r3, #0
 80064ec:	75fb      	strb	r3, [r7, #23]
  uint8_t idx;

  if (epnum == 0U)
 80064ee:	7afb      	ldrb	r3, [r7, #11]
 80064f0:	2b00      	cmp	r3, #0
 80064f2:	d16e      	bne.n	80065d2 <USBD_LL_DataOutStage+0xf6>
  {
    pep = &pdev->ep_out[0];
 80064f4:	68fb      	ldr	r3, [r7, #12]
 80064f6:	f503 73aa 	add.w	r3, r3, #340	; 0x154
 80064fa:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006502:	2b03      	cmp	r3, #3
 8006504:	f040 8098 	bne.w	8006638 <USBD_LL_DataOutStage+0x15c>
    {
      if (pep->rem_length > pep->maxpacket)
 8006508:	693b      	ldr	r3, [r7, #16]
 800650a:	689a      	ldr	r2, [r3, #8]
 800650c:	693b      	ldr	r3, [r7, #16]
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	429a      	cmp	r2, r3
 8006512:	d913      	bls.n	800653c <USBD_LL_DataOutStage+0x60>
      {
        pep->rem_length -= pep->maxpacket;
 8006514:	693b      	ldr	r3, [r7, #16]
 8006516:	689a      	ldr	r2, [r3, #8]
 8006518:	693b      	ldr	r3, [r7, #16]
 800651a:	68db      	ldr	r3, [r3, #12]
 800651c:	1ad2      	subs	r2, r2, r3
 800651e:	693b      	ldr	r3, [r7, #16]
 8006520:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueRx(pdev, pdata, MIN(pep->rem_length, pep->maxpacket));
 8006522:	693b      	ldr	r3, [r7, #16]
 8006524:	68da      	ldr	r2, [r3, #12]
 8006526:	693b      	ldr	r3, [r7, #16]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	4293      	cmp	r3, r2
 800652c:	bf28      	it	cs
 800652e:	4613      	movcs	r3, r2
 8006530:	461a      	mov	r2, r3
 8006532:	6879      	ldr	r1, [r7, #4]
 8006534:	68f8      	ldr	r0, [r7, #12]
 8006536:	f001 f967 	bl	8007808 <USBD_CtlContinueRx>
 800653a:	e07d      	b.n	8006638 <USBD_LL_DataOutStage+0x15c>
      }
      else
      {
        /* Find the class ID relative to the current request */
        switch (pdev->request.bmRequest & 0x1FU)
 800653c:	68fb      	ldr	r3, [r7, #12]
 800653e:	f893 32aa 	ldrb.w	r3, [r3, #682]	; 0x2aa
 8006542:	f003 031f 	and.w	r3, r3, #31
 8006546:	2b02      	cmp	r3, #2
 8006548:	d014      	beq.n	8006574 <USBD_LL_DataOutStage+0x98>
 800654a:	2b02      	cmp	r3, #2
 800654c:	d81d      	bhi.n	800658a <USBD_LL_DataOutStage+0xae>
 800654e:	2b00      	cmp	r3, #0
 8006550:	d002      	beq.n	8006558 <USBD_LL_DataOutStage+0x7c>
 8006552:	2b01      	cmp	r3, #1
 8006554:	d003      	beq.n	800655e <USBD_LL_DataOutStage+0x82>
 8006556:	e018      	b.n	800658a <USBD_LL_DataOutStage+0xae>
        {
          case USB_REQ_RECIPIENT_DEVICE:
            /* Device requests must be managed by the first instantiated class
               (or duplicated by all classes for simplicity) */
            idx = 0U;
 8006558:	2300      	movs	r3, #0
 800655a:	75bb      	strb	r3, [r7, #22]
            break;
 800655c:	e018      	b.n	8006590 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_INTERFACE:
            idx = USBD_CoreFindIF(pdev, LOBYTE(pdev->request.wIndex));
 800655e:	68fb      	ldr	r3, [r7, #12]
 8006560:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 8006564:	b2db      	uxtb	r3, r3
 8006566:	4619      	mov	r1, r3
 8006568:	68f8      	ldr	r0, [r7, #12]
 800656a:	f000 fa5e 	bl	8006a2a <USBD_CoreFindIF>
 800656e:	4603      	mov	r3, r0
 8006570:	75bb      	strb	r3, [r7, #22]
            break;
 8006572:	e00d      	b.n	8006590 <USBD_LL_DataOutStage+0xb4>

          case USB_REQ_RECIPIENT_ENDPOINT:
            idx = USBD_CoreFindEP(pdev, LOBYTE(pdev->request.wIndex));
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	f8b3 32ae 	ldrh.w	r3, [r3, #686]	; 0x2ae
 800657a:	b2db      	uxtb	r3, r3
 800657c:	4619      	mov	r1, r3
 800657e:	68f8      	ldr	r0, [r7, #12]
 8006580:	f000 fa60 	bl	8006a44 <USBD_CoreFindEP>
 8006584:	4603      	mov	r3, r0
 8006586:	75bb      	strb	r3, [r7, #22]
            break;
 8006588:	e002      	b.n	8006590 <USBD_LL_DataOutStage+0xb4>

          default:
            /* Back to the first class in case of doubt */
            idx = 0U;
 800658a:	2300      	movs	r3, #0
 800658c:	75bb      	strb	r3, [r7, #22]
            break;
 800658e:	bf00      	nop
        }

        if (idx < USBD_MAX_SUPPORTED_CLASS)
 8006590:	7dbb      	ldrb	r3, [r7, #22]
 8006592:	2b00      	cmp	r3, #0
 8006594:	d119      	bne.n	80065ca <USBD_LL_DataOutStage+0xee>
        {
          /* Setup the class ID and route the request to the relative class function */
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006596:	68fb      	ldr	r3, [r7, #12]
 8006598:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800659c:	b2db      	uxtb	r3, r3
 800659e:	2b03      	cmp	r3, #3
 80065a0:	d113      	bne.n	80065ca <USBD_LL_DataOutStage+0xee>
          {
            if (pdev->pClass[idx]->EP0_RxReady != NULL)
 80065a2:	7dba      	ldrb	r2, [r7, #22]
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	32ae      	adds	r2, #174	; 0xae
 80065a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065ac:	691b      	ldr	r3, [r3, #16]
 80065ae:	2b00      	cmp	r3, #0
 80065b0:	d00b      	beq.n	80065ca <USBD_LL_DataOutStage+0xee>
            {
              pdev->classId = idx;
 80065b2:	7dba      	ldrb	r2, [r7, #22]
 80065b4:	68fb      	ldr	r3, [r7, #12]
 80065b6:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[idx]->EP0_RxReady(pdev);
 80065ba:	7dba      	ldrb	r2, [r7, #22]
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	32ae      	adds	r2, #174	; 0xae
 80065c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80065c4:	691b      	ldr	r3, [r3, #16]
 80065c6:	68f8      	ldr	r0, [r7, #12]
 80065c8:	4798      	blx	r3
            }
          }
        }

        (void)USBD_CtlSendStatus(pdev);
 80065ca:	68f8      	ldr	r0, [r7, #12]
 80065cc:	f001 f92d 	bl	800782a <USBD_CtlSendStatus>
 80065d0:	e032      	b.n	8006638 <USBD_LL_DataOutStage+0x15c>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, (epnum & 0x7FU));
 80065d2:	7afb      	ldrb	r3, [r7, #11]
 80065d4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065d8:	b2db      	uxtb	r3, r3
 80065da:	4619      	mov	r1, r3
 80065dc:	68f8      	ldr	r0, [r7, #12]
 80065de:	f000 fa31 	bl	8006a44 <USBD_CoreFindEP>
 80065e2:	4603      	mov	r3, r0
 80065e4:	75bb      	strb	r3, [r7, #22]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 80065e6:	7dbb      	ldrb	r3, [r7, #22]
 80065e8:	2bff      	cmp	r3, #255	; 0xff
 80065ea:	d025      	beq.n	8006638 <USBD_LL_DataOutStage+0x15c>
 80065ec:	7dbb      	ldrb	r3, [r7, #22]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d122      	bne.n	8006638 <USBD_LL_DataOutStage+0x15c>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80065f8:	b2db      	uxtb	r3, r3
 80065fa:	2b03      	cmp	r3, #3
 80065fc:	d117      	bne.n	800662e <USBD_LL_DataOutStage+0x152>
      {
        if (pdev->pClass[idx]->DataOut != NULL)
 80065fe:	7dba      	ldrb	r2, [r7, #22]
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	32ae      	adds	r2, #174	; 0xae
 8006604:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006608:	699b      	ldr	r3, [r3, #24]
 800660a:	2b00      	cmp	r3, #0
 800660c:	d00f      	beq.n	800662e <USBD_LL_DataOutStage+0x152>
        {
          pdev->classId = idx;
 800660e:	7dba      	ldrb	r2, [r7, #22]
 8006610:	68fb      	ldr	r3, [r7, #12]
 8006612:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataOut(pdev, epnum);
 8006616:	7dba      	ldrb	r2, [r7, #22]
 8006618:	68fb      	ldr	r3, [r7, #12]
 800661a:	32ae      	adds	r2, #174	; 0xae
 800661c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006620:	699b      	ldr	r3, [r3, #24]
 8006622:	7afa      	ldrb	r2, [r7, #11]
 8006624:	4611      	mov	r1, r2
 8006626:	68f8      	ldr	r0, [r7, #12]
 8006628:	4798      	blx	r3
 800662a:	4603      	mov	r3, r0
 800662c:	75fb      	strb	r3, [r7, #23]
        }
      }
      if (ret != USBD_OK)
 800662e:	7dfb      	ldrb	r3, [r7, #23]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d001      	beq.n	8006638 <USBD_LL_DataOutStage+0x15c>
      {
        return ret;
 8006634:	7dfb      	ldrb	r3, [r7, #23]
 8006636:	e000      	b.n	800663a <USBD_LL_DataOutStage+0x15e>
      }
    }
  }

  return USBD_OK;
 8006638:	2300      	movs	r3, #0
}
 800663a:	4618      	mov	r0, r3
 800663c:	3718      	adds	r7, #24
 800663e:	46bd      	mov	sp, r7
 8006640:	bd80      	pop	{r7, pc}

08006642 <USBD_LL_DataInStage>:
  * @param  epnum: endpoint index
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8006642:	b580      	push	{r7, lr}
 8006644:	b086      	sub	sp, #24
 8006646:	af00      	add	r7, sp, #0
 8006648:	60f8      	str	r0, [r7, #12]
 800664a:	460b      	mov	r3, r1
 800664c:	607a      	str	r2, [r7, #4]
 800664e:	72fb      	strb	r3, [r7, #11]
  USBD_EndpointTypeDef *pep;
  USBD_StatusTypeDef ret;
  uint8_t idx;

  if (epnum == 0U)
 8006650:	7afb      	ldrb	r3, [r7, #11]
 8006652:	2b00      	cmp	r3, #0
 8006654:	d16f      	bne.n	8006736 <USBD_LL_DataInStage+0xf4>
  {
    pep = &pdev->ep_in[0];
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	3314      	adds	r3, #20
 800665a:	613b      	str	r3, [r7, #16]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	f8d3 3294 	ldr.w	r3, [r3, #660]	; 0x294
 8006662:	2b02      	cmp	r3, #2
 8006664:	d15a      	bne.n	800671c <USBD_LL_DataInStage+0xda>
    {
      if (pep->rem_length > pep->maxpacket)
 8006666:	693b      	ldr	r3, [r7, #16]
 8006668:	689a      	ldr	r2, [r3, #8]
 800666a:	693b      	ldr	r3, [r7, #16]
 800666c:	68db      	ldr	r3, [r3, #12]
 800666e:	429a      	cmp	r2, r3
 8006670:	d914      	bls.n	800669c <USBD_LL_DataInStage+0x5a>
      {
        pep->rem_length -= pep->maxpacket;
 8006672:	693b      	ldr	r3, [r7, #16]
 8006674:	689a      	ldr	r2, [r3, #8]
 8006676:	693b      	ldr	r3, [r7, #16]
 8006678:	68db      	ldr	r3, [r3, #12]
 800667a:	1ad2      	subs	r2, r2, r3
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	609a      	str	r2, [r3, #8]

        (void)USBD_CtlContinueSendData(pdev, pdata, pep->rem_length);
 8006680:	693b      	ldr	r3, [r7, #16]
 8006682:	689b      	ldr	r3, [r3, #8]
 8006684:	461a      	mov	r2, r3
 8006686:	6879      	ldr	r1, [r7, #4]
 8006688:	68f8      	ldr	r0, [r7, #12]
 800668a:	f001 f8ac 	bl	80077e6 <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 800668e:	2300      	movs	r3, #0
 8006690:	2200      	movs	r2, #0
 8006692:	2100      	movs	r1, #0
 8006694:	68f8      	ldr	r0, [r7, #12]
 8006696:	f001 fcb7 	bl	8008008 <USBD_LL_PrepareReceive>
 800669a:	e03f      	b.n	800671c <USBD_LL_DataInStage+0xda>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->maxpacket == pep->rem_length) &&
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	68da      	ldr	r2, [r3, #12]
 80066a0:	693b      	ldr	r3, [r7, #16]
 80066a2:	689b      	ldr	r3, [r3, #8]
 80066a4:	429a      	cmp	r2, r3
 80066a6:	d11c      	bne.n	80066e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length >= pep->maxpacket) &&
 80066a8:	693b      	ldr	r3, [r7, #16]
 80066aa:	685a      	ldr	r2, [r3, #4]
 80066ac:	693b      	ldr	r3, [r7, #16]
 80066ae:	68db      	ldr	r3, [r3, #12]
        if ((pep->maxpacket == pep->rem_length) &&
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d316      	bcc.n	80066e2 <USBD_LL_DataInStage+0xa0>
            (pep->total_length < pdev->ep0_data_len))
 80066b4:	693b      	ldr	r3, [r7, #16]
 80066b6:	685a      	ldr	r2, [r3, #4]
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	f8d3 3298 	ldr.w	r3, [r3, #664]	; 0x298
            (pep->total_length >= pep->maxpacket) &&
 80066be:	429a      	cmp	r2, r3
 80066c0:	d20f      	bcs.n	80066e2 <USBD_LL_DataInStage+0xa0>
        {
          (void)USBD_CtlContinueSendData(pdev, NULL, 0U);
 80066c2:	2200      	movs	r2, #0
 80066c4:	2100      	movs	r1, #0
 80066c6:	68f8      	ldr	r0, [r7, #12]
 80066c8:	f001 f88d 	bl	80077e6 <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	2200      	movs	r2, #0
 80066d0:	f8c3 2298 	str.w	r2, [r3, #664]	; 0x298

          /* Prepare endpoint for premature end of transfer */
          (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80066d4:	2300      	movs	r3, #0
 80066d6:	2200      	movs	r2, #0
 80066d8:	2100      	movs	r1, #0
 80066da:	68f8      	ldr	r0, [r7, #12]
 80066dc:	f001 fc94 	bl	8008008 <USBD_LL_PrepareReceive>
 80066e0:	e01c      	b.n	800671c <USBD_LL_DataInStage+0xda>
        }
        else
        {
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80066e2:	68fb      	ldr	r3, [r7, #12]
 80066e4:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80066e8:	b2db      	uxtb	r3, r3
 80066ea:	2b03      	cmp	r3, #3
 80066ec:	d10f      	bne.n	800670e <USBD_LL_DataInStage+0xcc>
          {
            if (pdev->pClass[0]->EP0_TxSent != NULL)
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80066f4:	68db      	ldr	r3, [r3, #12]
 80066f6:	2b00      	cmp	r3, #0
 80066f8:	d009      	beq.n	800670e <USBD_LL_DataInStage+0xcc>
            {
              pdev->classId = 0U;
 80066fa:	68fb      	ldr	r3, [r7, #12]
 80066fc:	2200      	movs	r2, #0
 80066fe:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
              pdev->pClass[0]->EP0_TxSent(pdev);
 8006702:	68fb      	ldr	r3, [r7, #12]
 8006704:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006708:	68db      	ldr	r3, [r3, #12]
 800670a:	68f8      	ldr	r0, [r7, #12]
 800670c:	4798      	blx	r3
            }
          }
          (void)USBD_LL_StallEP(pdev, 0x80U);
 800670e:	2180      	movs	r1, #128	; 0x80
 8006710:	68f8      	ldr	r0, [r7, #12]
 8006712:	f001 fbcf 	bl	8007eb4 <USBD_LL_StallEP>
          (void)USBD_CtlReceiveStatus(pdev);
 8006716:	68f8      	ldr	r0, [r7, #12]
 8006718:	f001 f89a 	bl	8007850 <USBD_CtlReceiveStatus>
        (void)USBD_LL_StallEP(pdev, 0x80U);
      }
#endif
    }

    if (pdev->dev_test_mode != 0U)
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 32a0 	ldrb.w	r3, [r3, #672]	; 0x2a0
 8006722:	2b00      	cmp	r3, #0
 8006724:	d03a      	beq.n	800679c <USBD_LL_DataInStage+0x15a>
    {
      (void)USBD_RunTestMode(pdev);
 8006726:	68f8      	ldr	r0, [r7, #12]
 8006728:	f7ff fe42 	bl	80063b0 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	2200      	movs	r2, #0
 8006730:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
 8006734:	e032      	b.n	800679c <USBD_LL_DataInStage+0x15a>
    }
  }
  else
  {
    /* Get the class index relative to this interface */
    idx = USBD_CoreFindEP(pdev, ((uint8_t)epnum | 0x80U));
 8006736:	7afb      	ldrb	r3, [r7, #11]
 8006738:	f063 037f 	orn	r3, r3, #127	; 0x7f
 800673c:	b2db      	uxtb	r3, r3
 800673e:	4619      	mov	r1, r3
 8006740:	68f8      	ldr	r0, [r7, #12]
 8006742:	f000 f97f 	bl	8006a44 <USBD_CoreFindEP>
 8006746:	4603      	mov	r3, r0
 8006748:	75fb      	strb	r3, [r7, #23]

    if (((uint16_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 800674a:	7dfb      	ldrb	r3, [r7, #23]
 800674c:	2bff      	cmp	r3, #255	; 0xff
 800674e:	d025      	beq.n	800679c <USBD_LL_DataInStage+0x15a>
 8006750:	7dfb      	ldrb	r3, [r7, #23]
 8006752:	2b00      	cmp	r3, #0
 8006754:	d122      	bne.n	800679c <USBD_LL_DataInStage+0x15a>
    {
      /* Call the class data out function to manage the request */
      if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006756:	68fb      	ldr	r3, [r7, #12]
 8006758:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800675c:	b2db      	uxtb	r3, r3
 800675e:	2b03      	cmp	r3, #3
 8006760:	d11c      	bne.n	800679c <USBD_LL_DataInStage+0x15a>
      {
        if (pdev->pClass[idx]->DataIn != NULL)
 8006762:	7dfa      	ldrb	r2, [r7, #23]
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	32ae      	adds	r2, #174	; 0xae
 8006768:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800676c:	695b      	ldr	r3, [r3, #20]
 800676e:	2b00      	cmp	r3, #0
 8006770:	d014      	beq.n	800679c <USBD_LL_DataInStage+0x15a>
        {
          pdev->classId = idx;
 8006772:	7dfa      	ldrb	r2, [r7, #23]
 8006774:	68fb      	ldr	r3, [r7, #12]
 8006776:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->DataIn(pdev, epnum);
 800677a:	7dfa      	ldrb	r2, [r7, #23]
 800677c:	68fb      	ldr	r3, [r7, #12]
 800677e:	32ae      	adds	r2, #174	; 0xae
 8006780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006784:	695b      	ldr	r3, [r3, #20]
 8006786:	7afa      	ldrb	r2, [r7, #11]
 8006788:	4611      	mov	r1, r2
 800678a:	68f8      	ldr	r0, [r7, #12]
 800678c:	4798      	blx	r3
 800678e:	4603      	mov	r3, r0
 8006790:	75bb      	strb	r3, [r7, #22]

          if (ret != USBD_OK)
 8006792:	7dbb      	ldrb	r3, [r7, #22]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d001      	beq.n	800679c <USBD_LL_DataInStage+0x15a>
          {
            return ret;
 8006798:	7dbb      	ldrb	r3, [r7, #22]
 800679a:	e000      	b.n	800679e <USBD_LL_DataInStage+0x15c>
        }
      }
    }
  }

  return USBD_OK;
 800679c:	2300      	movs	r3, #0
}
 800679e:	4618      	mov	r0, r3
 80067a0:	3718      	adds	r7, #24
 80067a2:	46bd      	mov	sp, r7
 80067a4:	bd80      	pop	{r7, pc}

080067a6 <USBD_LL_Reset>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 80067a6:	b580      	push	{r7, lr}
 80067a8:	b084      	sub	sp, #16
 80067aa:	af00      	add	r7, sp, #0
 80067ac:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef ret = USBD_OK;
 80067ae:	2300      	movs	r3, #0
 80067b0:	73fb      	strb	r3, [r7, #15]

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	2201      	movs	r2, #1
 80067b6:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  pdev->ep0_state = USBD_EP0_IDLE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	2200      	movs	r2, #0
 80067be:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->dev_config = 0U;
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	2200      	movs	r2, #0
 80067c6:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	2200      	movs	r2, #0
 80067cc:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
  pdev->dev_test_mode = 0U;
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	2200      	movs	r2, #0
 80067d4:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
      }
    }
  }
#else

  if (pdev->pClass[0] != NULL)
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d014      	beq.n	800680c <USBD_LL_Reset+0x66>
  {
    if (pdev->pClass[0]->DeInit != NULL)
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067e8:	685b      	ldr	r3, [r3, #4]
 80067ea:	2b00      	cmp	r3, #0
 80067ec:	d00e      	beq.n	800680c <USBD_LL_Reset+0x66>
    {
      if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != USBD_OK)
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80067f4:	685b      	ldr	r3, [r3, #4]
 80067f6:	687a      	ldr	r2, [r7, #4]
 80067f8:	6852      	ldr	r2, [r2, #4]
 80067fa:	b2d2      	uxtb	r2, r2
 80067fc:	4611      	mov	r1, r2
 80067fe:	6878      	ldr	r0, [r7, #4]
 8006800:	4798      	blx	r3
 8006802:	4603      	mov	r3, r0
 8006804:	2b00      	cmp	r3, #0
 8006806:	d001      	beq.n	800680c <USBD_LL_Reset+0x66>
      {
        ret = USBD_FAIL;
 8006808:	2303      	movs	r3, #3
 800680a:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  /* Open EP0 OUT */
  (void)USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 800680c:	2340      	movs	r3, #64	; 0x40
 800680e:	2200      	movs	r2, #0
 8006810:	2100      	movs	r1, #0
 8006812:	6878      	ldr	r0, [r7, #4]
 8006814:	f001 fb09 	bl	8007e2a <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2201      	movs	r2, #1
 800681c:	f8a3 2164 	strh.w	r2, [r3, #356]	; 0x164

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2240      	movs	r2, #64	; 0x40
 8006824:	f8c3 2160 	str.w	r2, [r3, #352]	; 0x160

  /* Open EP0 IN */
  (void)USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8006828:	2340      	movs	r3, #64	; 0x40
 800682a:	2200      	movs	r2, #0
 800682c:	2180      	movs	r1, #128	; 0x80
 800682e:	6878      	ldr	r0, [r7, #4]
 8006830:	f001 fafb 	bl	8007e2a <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	849a      	strh	r2, [r3, #36]	; 0x24

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	2240      	movs	r2, #64	; 0x40
 800683e:	621a      	str	r2, [r3, #32]

  return ret;
 8006840:	7bfb      	ldrb	r3, [r7, #15]
}
 8006842:	4618      	mov	r0, r3
 8006844:	3710      	adds	r7, #16
 8006846:	46bd      	mov	sp, r7
 8006848:	bd80      	pop	{r7, pc}

0800684a <USBD_LL_SetSpeed>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 800684a:	b480      	push	{r7}
 800684c:	b083      	sub	sp, #12
 800684e:	af00      	add	r7, sp, #0
 8006850:	6078      	str	r0, [r7, #4]
 8006852:	460b      	mov	r3, r1
 8006854:	70fb      	strb	r3, [r7, #3]
  pdev->dev_speed = speed;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	78fa      	ldrb	r2, [r7, #3]
 800685a:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 800685c:	2300      	movs	r3, #0
}
 800685e:	4618      	mov	r0, r3
 8006860:	370c      	adds	r7, #12
 8006862:	46bd      	mov	sp, r7
 8006864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006868:	4770      	bx	lr

0800686a <USBD_LL_Suspend>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state = pdev->dev_state;
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006878:	b2da      	uxtb	r2, r3
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	f883 229d 	strb.w	r2, [r3, #669]	; 0x29d
  pdev->dev_state = USBD_STATE_SUSPENDED;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2204      	movs	r2, #4
 8006884:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c

  return USBD_OK;
 8006888:	2300      	movs	r3, #0
}
 800688a:	4618      	mov	r0, r3
 800688c:	370c      	adds	r7, #12
 800688e:	46bd      	mov	sp, r7
 8006890:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006894:	4770      	bx	lr

08006896 <USBD_LL_Resume>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8006896:	b480      	push	{r7}
 8006898:	b083      	sub	sp, #12
 800689a:	af00      	add	r7, sp, #0
 800689c:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 800689e:	687b      	ldr	r3, [r7, #4]
 80068a0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068a4:	b2db      	uxtb	r3, r3
 80068a6:	2b04      	cmp	r3, #4
 80068a8:	d106      	bne.n	80068b8 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	f893 329d 	ldrb.w	r3, [r3, #669]	; 0x29d
 80068b0:	b2da      	uxtb	r2, r3
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
  }

  return USBD_OK;
 80068b8:	2300      	movs	r3, #0
}
 80068ba:	4618      	mov	r0, r3
 80068bc:	370c      	adds	r7, #12
 80068be:	46bd      	mov	sp, r7
 80068c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068c4:	4770      	bx	lr

080068c6 <USBD_LL_SOF>:
  * @param  pdev: device instance
  * @retval status
  */

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 80068c6:	b580      	push	{r7, lr}
 80068c8:	b082      	sub	sp, #8
 80068ca:	af00      	add	r7, sp, #0
 80068cc:	6078      	str	r0, [r7, #4]
  /* The SOF event can be distributed for all classes that support it */
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80068d4:	b2db      	uxtb	r3, r3
 80068d6:	2b03      	cmp	r3, #3
 80068d8:	d110      	bne.n	80068fc <USBD_LL_SOF+0x36>
          }
        }
      }
    }
#else
    if (pdev->pClass[0] != NULL)
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	d00b      	beq.n	80068fc <USBD_LL_SOF+0x36>
    {
      if (pdev->pClass[0]->SOF != NULL)
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068ea:	69db      	ldr	r3, [r3, #28]
 80068ec:	2b00      	cmp	r3, #0
 80068ee:	d005      	beq.n	80068fc <USBD_LL_SOF+0x36>
      {
        (void)pdev->pClass[0]->SOF(pdev);
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80068f6:	69db      	ldr	r3, [r3, #28]
 80068f8:	6878      	ldr	r0, [r7, #4]
 80068fa:	4798      	blx	r3
      }
    }
#endif /* USE_USBD_COMPOSITE */
  }

  return USBD_OK;
 80068fc:	2300      	movs	r3, #0
}
 80068fe:	4618      	mov	r0, r3
 8006900:	3708      	adds	r7, #8
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}

08006906 <USBD_LL_IsoINIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoINIncomplete(USBD_HandleTypeDef *pdev,
                                           uint8_t epnum)
{
 8006906:	b580      	push	{r7, lr}
 8006908:	b082      	sub	sp, #8
 800690a:	af00      	add	r7, sp, #0
 800690c:	6078      	str	r0, [r7, #4]
 800690e:	460b      	mov	r3, r1
 8006910:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	32ae      	adds	r2, #174	; 0xae
 800691c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <USBD_LL_IsoINIncomplete+0x22>
  {
    return USBD_FAIL;
 8006924:	2303      	movs	r3, #3
 8006926:	e01c      	b.n	8006962 <USBD_LL_IsoINIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800692e:	b2db      	uxtb	r3, r3
 8006930:	2b03      	cmp	r3, #3
 8006932:	d115      	bne.n	8006960 <USBD_LL_IsoINIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoINIncomplete != NULL)
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	32ae      	adds	r2, #174	; 0xae
 800693e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006942:	6a1b      	ldr	r3, [r3, #32]
 8006944:	2b00      	cmp	r3, #0
 8006946:	d00b      	beq.n	8006960 <USBD_LL_IsoINIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoINIncomplete(pdev, epnum);
 8006948:	687b      	ldr	r3, [r7, #4]
 800694a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800694e:	687b      	ldr	r3, [r7, #4]
 8006950:	32ae      	adds	r2, #174	; 0xae
 8006952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	78fa      	ldrb	r2, [r7, #3]
 800695a:	4611      	mov	r1, r2
 800695c:	6878      	ldr	r0, [r7, #4]
 800695e:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8006960:	2300      	movs	r3, #0
}
 8006962:	4618      	mov	r0, r3
 8006964:	3708      	adds	r7, #8
 8006966:	46bd      	mov	sp, r7
 8006968:	bd80      	pop	{r7, pc}

0800696a <USBD_LL_IsoOUTIncomplete>:
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_IsoOUTIncomplete(USBD_HandleTypeDef *pdev,
                                            uint8_t epnum)
{
 800696a:	b580      	push	{r7, lr}
 800696c:	b082      	sub	sp, #8
 800696e:	af00      	add	r7, sp, #0
 8006970:	6078      	str	r0, [r7, #4]
 8006972:	460b      	mov	r3, r1
 8006974:	70fb      	strb	r3, [r7, #3]
  if (pdev->pClass[pdev->classId] == NULL)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	32ae      	adds	r2, #174	; 0xae
 8006980:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d101      	bne.n	800698c <USBD_LL_IsoOUTIncomplete+0x22>
  {
    return USBD_FAIL;
 8006988:	2303      	movs	r3, #3
 800698a:	e01c      	b.n	80069c6 <USBD_LL_IsoOUTIncomplete+0x5c>
  }

  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006992:	b2db      	uxtb	r3, r3
 8006994:	2b03      	cmp	r3, #3
 8006996:	d115      	bne.n	80069c4 <USBD_LL_IsoOUTIncomplete+0x5a>
  {
    if (pdev->pClass[pdev->classId]->IsoOUTIncomplete != NULL)
 8006998:	687b      	ldr	r3, [r7, #4]
 800699a:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	32ae      	adds	r2, #174	; 0xae
 80069a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a8:	2b00      	cmp	r3, #0
 80069aa:	d00b      	beq.n	80069c4 <USBD_LL_IsoOUTIncomplete+0x5a>
    {
      (void)pdev->pClass[pdev->classId]->IsoOUTIncomplete(pdev, epnum);
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 80069b2:	687b      	ldr	r3, [r7, #4]
 80069b4:	32ae      	adds	r2, #174	; 0xae
 80069b6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80069ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069bc:	78fa      	ldrb	r2, [r7, #3]
 80069be:	4611      	mov	r1, r2
 80069c0:	6878      	ldr	r0, [r7, #4]
 80069c2:	4798      	blx	r3
    }
  }

  return USBD_OK;
 80069c4:	2300      	movs	r3, #0
}
 80069c6:	4618      	mov	r0, r3
 80069c8:	3708      	adds	r7, #8
 80069ca:	46bd      	mov	sp, r7
 80069cc:	bd80      	pop	{r7, pc}

080069ce <USBD_LL_DevConnected>:
  *         Handle device connection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevConnected(USBD_HandleTypeDef *pdev)
{
 80069ce:	b480      	push	{r7}
 80069d0:	b083      	sub	sp, #12
 80069d2:	af00      	add	r7, sp, #0
 80069d4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 80069d6:	2300      	movs	r3, #0
}
 80069d8:	4618      	mov	r0, r3
 80069da:	370c      	adds	r7, #12
 80069dc:	46bd      	mov	sp, r7
 80069de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e2:	4770      	bx	lr

080069e4 <USBD_LL_DevDisconnected>:
  *         Handle device disconnection event
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_LL_DevDisconnected(USBD_HandleTypeDef *pdev)
{
 80069e4:	b580      	push	{r7, lr}
 80069e6:	b084      	sub	sp, #16
 80069e8:	af00      	add	r7, sp, #0
 80069ea:	6078      	str	r0, [r7, #4]
  USBD_StatusTypeDef   ret = USBD_OK;
 80069ec:	2300      	movs	r3, #0
 80069ee:	73fb      	strb	r3, [r7, #15]

  /* Free Class Resources */
  pdev->dev_state = USBD_STATE_DEFAULT;
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	2201      	movs	r2, #1
 80069f4:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        }
      }
    }
  }
#else
  if (pdev->pClass[0] != NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d00e      	beq.n	8006a20 <USBD_LL_DevDisconnected+0x3c>
  {
    if (pdev->pClass[0]->DeInit(pdev, (uint8_t)pdev->dev_config) != 0U)
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8006a08:	685b      	ldr	r3, [r3, #4]
 8006a0a:	687a      	ldr	r2, [r7, #4]
 8006a0c:	6852      	ldr	r2, [r2, #4]
 8006a0e:	b2d2      	uxtb	r2, r2
 8006a10:	4611      	mov	r1, r2
 8006a12:	6878      	ldr	r0, [r7, #4]
 8006a14:	4798      	blx	r3
 8006a16:	4603      	mov	r3, r0
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d001      	beq.n	8006a20 <USBD_LL_DevDisconnected+0x3c>
    {
      ret = USBD_FAIL;
 8006a1c:	2303      	movs	r3, #3
 8006a1e:	73fb      	strb	r3, [r7, #15]
    }
  }
#endif /* USE_USBD_COMPOSITE */

  return ret;
 8006a20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a22:	4618      	mov	r0, r3
 8006a24:	3710      	adds	r7, #16
 8006a26:	46bd      	mov	sp, r7
 8006a28:	bd80      	pop	{r7, pc}

08006a2a <USBD_CoreFindIF>:
  * @param  pdev: device instance
  * @param  index : selected interface number
  * @retval index of the class using the selected interface number. OxFF if no class found.
  */
uint8_t USBD_CoreFindIF(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a2a:	b480      	push	{r7}
 8006a2c:	b083      	sub	sp, #12
 8006a2e:	af00      	add	r7, sp, #0
 8006a30:	6078      	str	r0, [r7, #4]
 8006a32:	460b      	mov	r3, r1
 8006a34:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a36:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	370c      	adds	r7, #12
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a42:	4770      	bx	lr

08006a44 <USBD_CoreFindEP>:
  * @param  pdev: device instance
  * @param  index : selected endpoint number
  * @retval index of the class using the selected endpoint number. 0xFF if no class found.
  */
uint8_t USBD_CoreFindEP(USBD_HandleTypeDef *pdev, uint8_t index)
{
 8006a44:	b480      	push	{r7}
 8006a46:	b083      	sub	sp, #12
 8006a48:	af00      	add	r7, sp, #0
 8006a4a:	6078      	str	r0, [r7, #4]
 8006a4c:	460b      	mov	r3, r1
 8006a4e:	70fb      	strb	r3, [r7, #3]
  return 0xFFU;
#else
  UNUSED(pdev);
  UNUSED(index);

  return 0x00U;
 8006a50:	2300      	movs	r3, #0
#endif /* USE_USBD_COMPOSITE */
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	370c      	adds	r7, #12
 8006a56:	46bd      	mov	sp, r7
 8006a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a5c:	4770      	bx	lr

08006a5e <USBD_GetEpDesc>:
  * @param  pConfDesc:  pointer to Bos descriptor
  * @param  EpAddr:  endpoint address
  * @retval pointer to video endpoint descriptor
  */
void *USBD_GetEpDesc(uint8_t *pConfDesc, uint8_t EpAddr)
{
 8006a5e:	b580      	push	{r7, lr}
 8006a60:	b086      	sub	sp, #24
 8006a62:	af00      	add	r7, sp, #0
 8006a64:	6078      	str	r0, [r7, #4]
 8006a66:	460b      	mov	r3, r1
 8006a68:	70fb      	strb	r3, [r7, #3]
  USBD_DescHeaderTypeDef *pdesc = (USBD_DescHeaderTypeDef *)(void *)pConfDesc;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	617b      	str	r3, [r7, #20]
  USBD_ConfigDescTypeDef *desc = (USBD_ConfigDescTypeDef *)(void *)pConfDesc;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	60fb      	str	r3, [r7, #12]
  USBD_EpDescTypeDef *pEpDesc = NULL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	613b      	str	r3, [r7, #16]
  uint16_t ptr;

  if (desc->wTotalLength > desc->bLength)
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	885b      	ldrh	r3, [r3, #2]
 8006a7a:	b29a      	uxth	r2, r3
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	b29b      	uxth	r3, r3
 8006a82:	429a      	cmp	r2, r3
 8006a84:	d920      	bls.n	8006ac8 <USBD_GetEpDesc+0x6a>
  {
    ptr = desc->bLength;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	781b      	ldrb	r3, [r3, #0]
 8006a8a:	b29b      	uxth	r3, r3
 8006a8c:	817b      	strh	r3, [r7, #10]

    while (ptr < desc->wTotalLength)
 8006a8e:	e013      	b.n	8006ab8 <USBD_GetEpDesc+0x5a>
    {
      pdesc = USBD_GetNextDesc((uint8_t *)pdesc, &ptr);
 8006a90:	f107 030a 	add.w	r3, r7, #10
 8006a94:	4619      	mov	r1, r3
 8006a96:	6978      	ldr	r0, [r7, #20]
 8006a98:	f000 f81b 	bl	8006ad2 <USBD_GetNextDesc>
 8006a9c:	6178      	str	r0, [r7, #20]

      if (pdesc->bDescriptorType == USB_DESC_TYPE_ENDPOINT)
 8006a9e:	697b      	ldr	r3, [r7, #20]
 8006aa0:	785b      	ldrb	r3, [r3, #1]
 8006aa2:	2b05      	cmp	r3, #5
 8006aa4:	d108      	bne.n	8006ab8 <USBD_GetEpDesc+0x5a>
      {
        pEpDesc = (USBD_EpDescTypeDef *)(void *)pdesc;
 8006aa6:	697b      	ldr	r3, [r7, #20]
 8006aa8:	613b      	str	r3, [r7, #16]

        if (pEpDesc->bEndpointAddress == EpAddr)
 8006aaa:	693b      	ldr	r3, [r7, #16]
 8006aac:	789b      	ldrb	r3, [r3, #2]
 8006aae:	78fa      	ldrb	r2, [r7, #3]
 8006ab0:	429a      	cmp	r2, r3
 8006ab2:	d008      	beq.n	8006ac6 <USBD_GetEpDesc+0x68>
        {
          break;
        }
        else
        {
          pEpDesc = NULL;
 8006ab4:	2300      	movs	r3, #0
 8006ab6:	613b      	str	r3, [r7, #16]
    while (ptr < desc->wTotalLength)
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	885b      	ldrh	r3, [r3, #2]
 8006abc:	b29a      	uxth	r2, r3
 8006abe:	897b      	ldrh	r3, [r7, #10]
 8006ac0:	429a      	cmp	r2, r3
 8006ac2:	d8e5      	bhi.n	8006a90 <USBD_GetEpDesc+0x32>
 8006ac4:	e000      	b.n	8006ac8 <USBD_GetEpDesc+0x6a>
          break;
 8006ac6:	bf00      	nop
        }
      }
    }
  }

  return (void *)pEpDesc;
 8006ac8:	693b      	ldr	r3, [r7, #16]
}
 8006aca:	4618      	mov	r0, r3
 8006acc:	3718      	adds	r7, #24
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	bd80      	pop	{r7, pc}

08006ad2 <USBD_GetNextDesc>:
  * @param  buf: Buffer where the descriptor is available
  * @param  ptr: data pointer inside the descriptor
  * @retval next header
  */
USBD_DescHeaderTypeDef *USBD_GetNextDesc(uint8_t *pbuf, uint16_t *ptr)
{
 8006ad2:	b480      	push	{r7}
 8006ad4:	b085      	sub	sp, #20
 8006ad6:	af00      	add	r7, sp, #0
 8006ad8:	6078      	str	r0, [r7, #4]
 8006ada:	6039      	str	r1, [r7, #0]
  USBD_DescHeaderTypeDef *pnext = (USBD_DescHeaderTypeDef *)(void *)pbuf;
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	60fb      	str	r3, [r7, #12]

  *ptr += pnext->bLength;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	881a      	ldrh	r2, [r3, #0]
 8006ae4:	68fb      	ldr	r3, [r7, #12]
 8006ae6:	781b      	ldrb	r3, [r3, #0]
 8006ae8:	b29b      	uxth	r3, r3
 8006aea:	4413      	add	r3, r2
 8006aec:	b29a      	uxth	r2, r3
 8006aee:	683b      	ldr	r3, [r7, #0]
 8006af0:	801a      	strh	r2, [r3, #0]
  pnext = (USBD_DescHeaderTypeDef *)(void *)(pbuf + pnext->bLength);
 8006af2:	68fb      	ldr	r3, [r7, #12]
 8006af4:	781b      	ldrb	r3, [r3, #0]
 8006af6:	461a      	mov	r2, r3
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	4413      	add	r3, r2
 8006afc:	60fb      	str	r3, [r7, #12]

  return (pnext);
 8006afe:	68fb      	ldr	r3, [r7, #12]
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3714      	adds	r7, #20
 8006b04:	46bd      	mov	sp, r7
 8006b06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b0a:	4770      	bx	lr

08006b0c <SWAPBYTE>:

/** @defgroup USBD_DEF_Exported_Macros
  * @{
  */
__STATIC_INLINE uint16_t SWAPBYTE(uint8_t *addr)
{
 8006b0c:	b480      	push	{r7}
 8006b0e:	b087      	sub	sp, #28
 8006b10:	af00      	add	r7, sp, #0
 8006b12:	6078      	str	r0, [r7, #4]
  uint16_t _SwapVal, _Byte1, _Byte2;
  uint8_t *_pbuff = addr;
 8006b14:	687b      	ldr	r3, [r7, #4]
 8006b16:	617b      	str	r3, [r7, #20]

  _Byte1 = *(uint8_t *)_pbuff;
 8006b18:	697b      	ldr	r3, [r7, #20]
 8006b1a:	781b      	ldrb	r3, [r3, #0]
 8006b1c:	827b      	strh	r3, [r7, #18]
  _pbuff++;
 8006b1e:	697b      	ldr	r3, [r7, #20]
 8006b20:	3301      	adds	r3, #1
 8006b22:	617b      	str	r3, [r7, #20]
  _Byte2 = *(uint8_t *)_pbuff;
 8006b24:	697b      	ldr	r3, [r7, #20]
 8006b26:	781b      	ldrb	r3, [r3, #0]
 8006b28:	823b      	strh	r3, [r7, #16]

  _SwapVal = (_Byte2 << 8) | _Byte1;
 8006b2a:	8a3b      	ldrh	r3, [r7, #16]
 8006b2c:	021b      	lsls	r3, r3, #8
 8006b2e:	b21a      	sxth	r2, r3
 8006b30:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8006b34:	4313      	orrs	r3, r2
 8006b36:	b21b      	sxth	r3, r3
 8006b38:	81fb      	strh	r3, [r7, #14]

  return _SwapVal;
 8006b3a:	89fb      	ldrh	r3, [r7, #14]
}
 8006b3c:	4618      	mov	r0, r3
 8006b3e:	371c      	adds	r7, #28
 8006b40:	46bd      	mov	sp, r7
 8006b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b46:	4770      	bx	lr

08006b48 <USBD_StdDevReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdDevReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	73fb      	strb	r3, [r7, #15]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006b56:	683b      	ldr	r3, [r7, #0]
 8006b58:	781b      	ldrb	r3, [r3, #0]
 8006b5a:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006b5e:	2b40      	cmp	r3, #64	; 0x40
 8006b60:	d005      	beq.n	8006b6e <USBD_StdDevReq+0x26>
 8006b62:	2b40      	cmp	r3, #64	; 0x40
 8006b64:	d857      	bhi.n	8006c16 <USBD_StdDevReq+0xce>
 8006b66:	2b00      	cmp	r3, #0
 8006b68:	d00f      	beq.n	8006b8a <USBD_StdDevReq+0x42>
 8006b6a:	2b20      	cmp	r3, #32
 8006b6c:	d153      	bne.n	8006c16 <USBD_StdDevReq+0xce>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      ret = (USBD_StatusTypeDef)pdev->pClass[pdev->classId]->Setup(pdev, req);
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	f8d3 22d4 	ldr.w	r2, [r3, #724]	; 0x2d4
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	32ae      	adds	r2, #174	; 0xae
 8006b78:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006b7c:	689b      	ldr	r3, [r3, #8]
 8006b7e:	6839      	ldr	r1, [r7, #0]
 8006b80:	6878      	ldr	r0, [r7, #4]
 8006b82:	4798      	blx	r3
 8006b84:	4603      	mov	r3, r0
 8006b86:	73fb      	strb	r3, [r7, #15]
      break;
 8006b88:	e04a      	b.n	8006c20 <USBD_StdDevReq+0xd8>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006b8a:	683b      	ldr	r3, [r7, #0]
 8006b8c:	785b      	ldrb	r3, [r3, #1]
 8006b8e:	2b09      	cmp	r3, #9
 8006b90:	d83b      	bhi.n	8006c0a <USBD_StdDevReq+0xc2>
 8006b92:	a201      	add	r2, pc, #4	; (adr r2, 8006b98 <USBD_StdDevReq+0x50>)
 8006b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006b98:	08006bed 	.word	0x08006bed
 8006b9c:	08006c01 	.word	0x08006c01
 8006ba0:	08006c0b 	.word	0x08006c0b
 8006ba4:	08006bf7 	.word	0x08006bf7
 8006ba8:	08006c0b 	.word	0x08006c0b
 8006bac:	08006bcb 	.word	0x08006bcb
 8006bb0:	08006bc1 	.word	0x08006bc1
 8006bb4:	08006c0b 	.word	0x08006c0b
 8006bb8:	08006be3 	.word	0x08006be3
 8006bbc:	08006bd5 	.word	0x08006bd5
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 8006bc0:	6839      	ldr	r1, [r7, #0]
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fa3c 	bl	8007040 <USBD_GetDescriptor>
          break;
 8006bc8:	e024      	b.n	8006c14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 8006bca:	6839      	ldr	r1, [r7, #0]
 8006bcc:	6878      	ldr	r0, [r7, #4]
 8006bce:	f000 fba1 	bl	8007314 <USBD_SetAddress>
          break;
 8006bd2:	e01f      	b.n	8006c14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_CONFIGURATION:
          ret = USBD_SetConfig(pdev, req);
 8006bd4:	6839      	ldr	r1, [r7, #0]
 8006bd6:	6878      	ldr	r0, [r7, #4]
 8006bd8:	f000 fbe0 	bl	800739c <USBD_SetConfig>
 8006bdc:	4603      	mov	r3, r0
 8006bde:	73fb      	strb	r3, [r7, #15]
          break;
 8006be0:	e018      	b.n	8006c14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8006be2:	6839      	ldr	r1, [r7, #0]
 8006be4:	6878      	ldr	r0, [r7, #4]
 8006be6:	f000 fc83 	bl	80074f0 <USBD_GetConfig>
          break;
 8006bea:	e013      	b.n	8006c14 <USBD_StdDevReq+0xcc>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8006bec:	6839      	ldr	r1, [r7, #0]
 8006bee:	6878      	ldr	r0, [r7, #4]
 8006bf0:	f000 fcb4 	bl	800755c <USBD_GetStatus>
          break;
 8006bf4:	e00e      	b.n	8006c14 <USBD_StdDevReq+0xcc>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8006bf6:	6839      	ldr	r1, [r7, #0]
 8006bf8:	6878      	ldr	r0, [r7, #4]
 8006bfa:	f000 fce3 	bl	80075c4 <USBD_SetFeature>
          break;
 8006bfe:	e009      	b.n	8006c14 <USBD_StdDevReq+0xcc>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8006c00:	6839      	ldr	r1, [r7, #0]
 8006c02:	6878      	ldr	r0, [r7, #4]
 8006c04:	f000 fd07 	bl	8007616 <USBD_ClrFeature>
          break;
 8006c08:	e004      	b.n	8006c14 <USBD_StdDevReq+0xcc>

        default:
          USBD_CtlError(pdev, req);
 8006c0a:	6839      	ldr	r1, [r7, #0]
 8006c0c:	6878      	ldr	r0, [r7, #4]
 8006c0e:	f000 fd5e 	bl	80076ce <USBD_CtlError>
          break;
 8006c12:	bf00      	nop
      }
      break;
 8006c14:	e004      	b.n	8006c20 <USBD_StdDevReq+0xd8>

    default:
      USBD_CtlError(pdev, req);
 8006c16:	6839      	ldr	r1, [r7, #0]
 8006c18:	6878      	ldr	r0, [r7, #4]
 8006c1a:	f000 fd58 	bl	80076ce <USBD_CtlError>
      break;
 8006c1e:	bf00      	nop
  }

  return ret;
 8006c20:	7bfb      	ldrb	r3, [r7, #15]
}
 8006c22:	4618      	mov	r0, r3
 8006c24:	3710      	adds	r7, #16
 8006c26:	46bd      	mov	sp, r7
 8006c28:	bd80      	pop	{r7, pc}
 8006c2a:	bf00      	nop

08006c2c <USBD_StdItfReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdItfReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b084      	sub	sp, #16
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
 8006c34:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8006c36:	2300      	movs	r3, #0
 8006c38:	73fb      	strb	r3, [r7, #15]
  uint8_t idx;

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006c3a:	683b      	ldr	r3, [r7, #0]
 8006c3c:	781b      	ldrb	r3, [r3, #0]
 8006c3e:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006c42:	2b40      	cmp	r3, #64	; 0x40
 8006c44:	d005      	beq.n	8006c52 <USBD_StdItfReq+0x26>
 8006c46:	2b40      	cmp	r3, #64	; 0x40
 8006c48:	d852      	bhi.n	8006cf0 <USBD_StdItfReq+0xc4>
 8006c4a:	2b00      	cmp	r3, #0
 8006c4c:	d001      	beq.n	8006c52 <USBD_StdItfReq+0x26>
 8006c4e:	2b20      	cmp	r3, #32
 8006c50:	d14e      	bne.n	8006cf0 <USBD_StdItfReq+0xc4>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006c58:	b2db      	uxtb	r3, r3
 8006c5a:	3b01      	subs	r3, #1
 8006c5c:	2b02      	cmp	r3, #2
 8006c5e:	d840      	bhi.n	8006ce2 <USBD_StdItfReq+0xb6>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	889b      	ldrh	r3, [r3, #4]
 8006c64:	b2db      	uxtb	r3, r3
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d836      	bhi.n	8006cd8 <USBD_StdItfReq+0xac>
          {
            /* Get the class index relative to this interface */
            idx = USBD_CoreFindIF(pdev, LOBYTE(req->wIndex));
 8006c6a:	683b      	ldr	r3, [r7, #0]
 8006c6c:	889b      	ldrh	r3, [r3, #4]
 8006c6e:	b2db      	uxtb	r3, r3
 8006c70:	4619      	mov	r1, r3
 8006c72:	6878      	ldr	r0, [r7, #4]
 8006c74:	f7ff fed9 	bl	8006a2a <USBD_CoreFindIF>
 8006c78:	4603      	mov	r3, r0
 8006c7a:	73bb      	strb	r3, [r7, #14]
            if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006c7c:	7bbb      	ldrb	r3, [r7, #14]
 8006c7e:	2bff      	cmp	r3, #255	; 0xff
 8006c80:	d01d      	beq.n	8006cbe <USBD_StdItfReq+0x92>
 8006c82:	7bbb      	ldrb	r3, [r7, #14]
 8006c84:	2b00      	cmp	r3, #0
 8006c86:	d11a      	bne.n	8006cbe <USBD_StdItfReq+0x92>
            {
              /* Call the class data out function to manage the request */
              if (pdev->pClass[idx]->Setup != NULL)
 8006c88:	7bba      	ldrb	r2, [r7, #14]
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	32ae      	adds	r2, #174	; 0xae
 8006c8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006c92:	689b      	ldr	r3, [r3, #8]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d00f      	beq.n	8006cb8 <USBD_StdItfReq+0x8c>
              {
                pdev->classId = idx;
 8006c98:	7bba      	ldrb	r2, [r7, #14]
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006ca0:	7bba      	ldrb	r2, [r7, #14]
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	32ae      	adds	r2, #174	; 0xae
 8006ca6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006caa:	689b      	ldr	r3, [r3, #8]
 8006cac:	6839      	ldr	r1, [r7, #0]
 8006cae:	6878      	ldr	r0, [r7, #4]
 8006cb0:	4798      	blx	r3
 8006cb2:	4603      	mov	r3, r0
 8006cb4:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006cb6:	e004      	b.n	8006cc2 <USBD_StdItfReq+0x96>
              }
              else
              {
                /* should never reach this condition */
                ret = USBD_FAIL;
 8006cb8:	2303      	movs	r3, #3
 8006cba:	73fb      	strb	r3, [r7, #15]
              if (pdev->pClass[idx]->Setup != NULL)
 8006cbc:	e001      	b.n	8006cc2 <USBD_StdItfReq+0x96>
              }
            }
            else
            {
              /* No relative interface found */
              ret = USBD_FAIL;
 8006cbe:	2303      	movs	r3, #3
 8006cc0:	73fb      	strb	r3, [r7, #15]
            }

            if ((req->wLength == 0U) && (ret == USBD_OK))
 8006cc2:	683b      	ldr	r3, [r7, #0]
 8006cc4:	88db      	ldrh	r3, [r3, #6]
 8006cc6:	2b00      	cmp	r3, #0
 8006cc8:	d110      	bne.n	8006cec <USBD_StdItfReq+0xc0>
 8006cca:	7bfb      	ldrb	r3, [r7, #15]
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d10d      	bne.n	8006cec <USBD_StdItfReq+0xc0>
            {
              (void)USBD_CtlSendStatus(pdev);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fdaa 	bl	800782a <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 8006cd6:	e009      	b.n	8006cec <USBD_StdItfReq+0xc0>
            USBD_CtlError(pdev, req);
 8006cd8:	6839      	ldr	r1, [r7, #0]
 8006cda:	6878      	ldr	r0, [r7, #4]
 8006cdc:	f000 fcf7 	bl	80076ce <USBD_CtlError>
          break;
 8006ce0:	e004      	b.n	8006cec <USBD_StdItfReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 8006ce2:	6839      	ldr	r1, [r7, #0]
 8006ce4:	6878      	ldr	r0, [r7, #4]
 8006ce6:	f000 fcf2 	bl	80076ce <USBD_CtlError>
          break;
 8006cea:	e000      	b.n	8006cee <USBD_StdItfReq+0xc2>
          break;
 8006cec:	bf00      	nop
      }
      break;
 8006cee:	e004      	b.n	8006cfa <USBD_StdItfReq+0xce>

    default:
      USBD_CtlError(pdev, req);
 8006cf0:	6839      	ldr	r1, [r7, #0]
 8006cf2:	6878      	ldr	r0, [r7, #4]
 8006cf4:	f000 fceb 	bl	80076ce <USBD_CtlError>
      break;
 8006cf8:	bf00      	nop
  }

  return ret;
 8006cfa:	7bfb      	ldrb	r3, [r7, #15]
}
 8006cfc:	4618      	mov	r0, r3
 8006cfe:	3710      	adds	r7, #16
 8006d00:	46bd      	mov	sp, r7
 8006d02:	bd80      	pop	{r7, pc}

08006d04 <USBD_StdEPReq>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
USBD_StatusTypeDef USBD_StdEPReq(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8006d04:	b580      	push	{r7, lr}
 8006d06:	b084      	sub	sp, #16
 8006d08:	af00      	add	r7, sp, #0
 8006d0a:	6078      	str	r0, [r7, #4]
 8006d0c:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t ep_addr;
  uint8_t idx;
  USBD_StatusTypeDef ret = USBD_OK;
 8006d0e:	2300      	movs	r3, #0
 8006d10:	73fb      	strb	r3, [r7, #15]

  ep_addr = LOBYTE(req->wIndex);
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	889b      	ldrh	r3, [r3, #4]
 8006d16:	73bb      	strb	r3, [r7, #14]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	781b      	ldrb	r3, [r3, #0]
 8006d1c:	f003 0360 	and.w	r3, r3, #96	; 0x60
 8006d20:	2b40      	cmp	r3, #64	; 0x40
 8006d22:	d007      	beq.n	8006d34 <USBD_StdEPReq+0x30>
 8006d24:	2b40      	cmp	r3, #64	; 0x40
 8006d26:	f200 817f 	bhi.w	8007028 <USBD_StdEPReq+0x324>
 8006d2a:	2b00      	cmp	r3, #0
 8006d2c:	d02a      	beq.n	8006d84 <USBD_StdEPReq+0x80>
 8006d2e:	2b20      	cmp	r3, #32
 8006d30:	f040 817a 	bne.w	8007028 <USBD_StdEPReq+0x324>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      /* Get the class index relative to this endpoint */
      idx = USBD_CoreFindEP(pdev, ep_addr);
 8006d34:	7bbb      	ldrb	r3, [r7, #14]
 8006d36:	4619      	mov	r1, r3
 8006d38:	6878      	ldr	r0, [r7, #4]
 8006d3a:	f7ff fe83 	bl	8006a44 <USBD_CoreFindEP>
 8006d3e:	4603      	mov	r3, r0
 8006d40:	737b      	strb	r3, [r7, #13]
      if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006d42:	7b7b      	ldrb	r3, [r7, #13]
 8006d44:	2bff      	cmp	r3, #255	; 0xff
 8006d46:	f000 8174 	beq.w	8007032 <USBD_StdEPReq+0x32e>
 8006d4a:	7b7b      	ldrb	r3, [r7, #13]
 8006d4c:	2b00      	cmp	r3, #0
 8006d4e:	f040 8170 	bne.w	8007032 <USBD_StdEPReq+0x32e>
      {
        pdev->classId = idx;
 8006d52:	7b7a      	ldrb	r2, [r7, #13]
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
        /* Call the class data out function to manage the request */
        if (pdev->pClass[idx]->Setup != NULL)
 8006d5a:	7b7a      	ldrb	r2, [r7, #13]
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	32ae      	adds	r2, #174	; 0xae
 8006d60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	f000 8163 	beq.w	8007032 <USBD_StdEPReq+0x32e>
        {
          ret = (USBD_StatusTypeDef)pdev->pClass[idx]->Setup(pdev, req);
 8006d6c:	7b7a      	ldrb	r2, [r7, #13]
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	32ae      	adds	r2, #174	; 0xae
 8006d72:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d76:	689b      	ldr	r3, [r3, #8]
 8006d78:	6839      	ldr	r1, [r7, #0]
 8006d7a:	6878      	ldr	r0, [r7, #4]
 8006d7c:	4798      	blx	r3
 8006d7e:	4603      	mov	r3, r0
 8006d80:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8006d82:	e156      	b.n	8007032 <USBD_StdEPReq+0x32e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8006d84:	683b      	ldr	r3, [r7, #0]
 8006d86:	785b      	ldrb	r3, [r3, #1]
 8006d88:	2b03      	cmp	r3, #3
 8006d8a:	d008      	beq.n	8006d9e <USBD_StdEPReq+0x9a>
 8006d8c:	2b03      	cmp	r3, #3
 8006d8e:	f300 8145 	bgt.w	800701c <USBD_StdEPReq+0x318>
 8006d92:	2b00      	cmp	r3, #0
 8006d94:	f000 809b 	beq.w	8006ece <USBD_StdEPReq+0x1ca>
 8006d98:	2b01      	cmp	r3, #1
 8006d9a:	d03c      	beq.n	8006e16 <USBD_StdEPReq+0x112>
 8006d9c:	e13e      	b.n	800701c <USBD_StdEPReq+0x318>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 8006d9e:	687b      	ldr	r3, [r7, #4]
 8006da0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006da4:	b2db      	uxtb	r3, r3
 8006da6:	2b02      	cmp	r3, #2
 8006da8:	d002      	beq.n	8006db0 <USBD_StdEPReq+0xac>
 8006daa:	2b03      	cmp	r3, #3
 8006dac:	d016      	beq.n	8006ddc <USBD_StdEPReq+0xd8>
 8006dae:	e02c      	b.n	8006e0a <USBD_StdEPReq+0x106>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006db0:	7bbb      	ldrb	r3, [r7, #14]
 8006db2:	2b00      	cmp	r3, #0
 8006db4:	d00d      	beq.n	8006dd2 <USBD_StdEPReq+0xce>
 8006db6:	7bbb      	ldrb	r3, [r7, #14]
 8006db8:	2b80      	cmp	r3, #128	; 0x80
 8006dba:	d00a      	beq.n	8006dd2 <USBD_StdEPReq+0xce>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006dbc:	7bbb      	ldrb	r3, [r7, #14]
 8006dbe:	4619      	mov	r1, r3
 8006dc0:	6878      	ldr	r0, [r7, #4]
 8006dc2:	f001 f877 	bl	8007eb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006dc6:	2180      	movs	r1, #128	; 0x80
 8006dc8:	6878      	ldr	r0, [r7, #4]
 8006dca:	f001 f873 	bl	8007eb4 <USBD_LL_StallEP>
 8006dce:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006dd0:	e020      	b.n	8006e14 <USBD_StdEPReq+0x110>
                USBD_CtlError(pdev, req);
 8006dd2:	6839      	ldr	r1, [r7, #0]
 8006dd4:	6878      	ldr	r0, [r7, #4]
 8006dd6:	f000 fc7a 	bl	80076ce <USBD_CtlError>
              break;
 8006dda:	e01b      	b.n	8006e14 <USBD_StdEPReq+0x110>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006ddc:	683b      	ldr	r3, [r7, #0]
 8006dde:	885b      	ldrh	r3, [r3, #2]
 8006de0:	2b00      	cmp	r3, #0
 8006de2:	d10e      	bne.n	8006e02 <USBD_StdEPReq+0xfe>
              {
                if ((ep_addr != 0x00U) && (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8006de4:	7bbb      	ldrb	r3, [r7, #14]
 8006de6:	2b00      	cmp	r3, #0
 8006de8:	d00b      	beq.n	8006e02 <USBD_StdEPReq+0xfe>
 8006dea:	7bbb      	ldrb	r3, [r7, #14]
 8006dec:	2b80      	cmp	r3, #128	; 0x80
 8006dee:	d008      	beq.n	8006e02 <USBD_StdEPReq+0xfe>
 8006df0:	683b      	ldr	r3, [r7, #0]
 8006df2:	88db      	ldrh	r3, [r3, #6]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d104      	bne.n	8006e02 <USBD_StdEPReq+0xfe>
                {
                  (void)USBD_LL_StallEP(pdev, ep_addr);
 8006df8:	7bbb      	ldrb	r3, [r7, #14]
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	6878      	ldr	r0, [r7, #4]
 8006dfe:	f001 f859 	bl	8007eb4 <USBD_LL_StallEP>
                }
              }
              (void)USBD_CtlSendStatus(pdev);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 fd11 	bl	800782a <USBD_CtlSendStatus>

              break;
 8006e08:	e004      	b.n	8006e14 <USBD_StdEPReq+0x110>

            default:
              USBD_CtlError(pdev, req);
 8006e0a:	6839      	ldr	r1, [r7, #0]
 8006e0c:	6878      	ldr	r0, [r7, #4]
 8006e0e:	f000 fc5e 	bl	80076ce <USBD_CtlError>
              break;
 8006e12:	bf00      	nop
          }
          break;
 8006e14:	e107      	b.n	8007026 <USBD_StdEPReq+0x322>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006e1c:	b2db      	uxtb	r3, r3
 8006e1e:	2b02      	cmp	r3, #2
 8006e20:	d002      	beq.n	8006e28 <USBD_StdEPReq+0x124>
 8006e22:	2b03      	cmp	r3, #3
 8006e24:	d016      	beq.n	8006e54 <USBD_StdEPReq+0x150>
 8006e26:	e04b      	b.n	8006ec0 <USBD_StdEPReq+0x1bc>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006e28:	7bbb      	ldrb	r3, [r7, #14]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	d00d      	beq.n	8006e4a <USBD_StdEPReq+0x146>
 8006e2e:	7bbb      	ldrb	r3, [r7, #14]
 8006e30:	2b80      	cmp	r3, #128	; 0x80
 8006e32:	d00a      	beq.n	8006e4a <USBD_StdEPReq+0x146>
              {
                (void)USBD_LL_StallEP(pdev, ep_addr);
 8006e34:	7bbb      	ldrb	r3, [r7, #14]
 8006e36:	4619      	mov	r1, r3
 8006e38:	6878      	ldr	r0, [r7, #4]
 8006e3a:	f001 f83b 	bl	8007eb4 <USBD_LL_StallEP>
                (void)USBD_LL_StallEP(pdev, 0x80U);
 8006e3e:	2180      	movs	r1, #128	; 0x80
 8006e40:	6878      	ldr	r0, [r7, #4]
 8006e42:	f001 f837 	bl	8007eb4 <USBD_LL_StallEP>
 8006e46:	bf00      	nop
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8006e48:	e040      	b.n	8006ecc <USBD_StdEPReq+0x1c8>
                USBD_CtlError(pdev, req);
 8006e4a:	6839      	ldr	r1, [r7, #0]
 8006e4c:	6878      	ldr	r0, [r7, #4]
 8006e4e:	f000 fc3e 	bl	80076ce <USBD_CtlError>
              break;
 8006e52:	e03b      	b.n	8006ecc <USBD_StdEPReq+0x1c8>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8006e54:	683b      	ldr	r3, [r7, #0]
 8006e56:	885b      	ldrh	r3, [r3, #2]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d136      	bne.n	8006eca <USBD_StdEPReq+0x1c6>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 8006e5c:	7bbb      	ldrb	r3, [r7, #14]
 8006e5e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006e62:	2b00      	cmp	r3, #0
 8006e64:	d004      	beq.n	8006e70 <USBD_StdEPReq+0x16c>
                {
                  (void)USBD_LL_ClearStallEP(pdev, ep_addr);
 8006e66:	7bbb      	ldrb	r3, [r7, #14]
 8006e68:	4619      	mov	r1, r3
 8006e6a:	6878      	ldr	r0, [r7, #4]
 8006e6c:	f001 f841 	bl	8007ef2 <USBD_LL_ClearStallEP>
                }
                (void)USBD_CtlSendStatus(pdev);
 8006e70:	6878      	ldr	r0, [r7, #4]
 8006e72:	f000 fcda 	bl	800782a <USBD_CtlSendStatus>

                /* Get the class index relative to this interface */
                idx = USBD_CoreFindEP(pdev, ep_addr);
 8006e76:	7bbb      	ldrb	r3, [r7, #14]
 8006e78:	4619      	mov	r1, r3
 8006e7a:	6878      	ldr	r0, [r7, #4]
 8006e7c:	f7ff fde2 	bl	8006a44 <USBD_CoreFindEP>
 8006e80:	4603      	mov	r3, r0
 8006e82:	737b      	strb	r3, [r7, #13]
                if (((uint8_t)idx != 0xFFU) && (idx < USBD_MAX_SUPPORTED_CLASS))
 8006e84:	7b7b      	ldrb	r3, [r7, #13]
 8006e86:	2bff      	cmp	r3, #255	; 0xff
 8006e88:	d01f      	beq.n	8006eca <USBD_StdEPReq+0x1c6>
 8006e8a:	7b7b      	ldrb	r3, [r7, #13]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d11c      	bne.n	8006eca <USBD_StdEPReq+0x1c6>
                {
                  pdev->classId = idx;
 8006e90:	7b7a      	ldrb	r2, [r7, #13]
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	f8c3 22d4 	str.w	r2, [r3, #724]	; 0x2d4
                  /* Call the class data out function to manage the request */
                  if (pdev->pClass[idx]->Setup != NULL)
 8006e98:	7b7a      	ldrb	r2, [r7, #13]
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	32ae      	adds	r2, #174	; 0xae
 8006e9e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006ea2:	689b      	ldr	r3, [r3, #8]
 8006ea4:	2b00      	cmp	r3, #0
 8006ea6:	d010      	beq.n	8006eca <USBD_StdEPReq+0x1c6>
                  {
                    ret = (USBD_StatusTypeDef)(pdev->pClass[idx]->Setup(pdev, req));
 8006ea8:	7b7a      	ldrb	r2, [r7, #13]
 8006eaa:	687b      	ldr	r3, [r7, #4]
 8006eac:	32ae      	adds	r2, #174	; 0xae
 8006eae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006eb2:	689b      	ldr	r3, [r3, #8]
 8006eb4:	6839      	ldr	r1, [r7, #0]
 8006eb6:	6878      	ldr	r0, [r7, #4]
 8006eb8:	4798      	blx	r3
 8006eba:	4603      	mov	r3, r0
 8006ebc:	73fb      	strb	r3, [r7, #15]
                  }
                }
              }
              break;
 8006ebe:	e004      	b.n	8006eca <USBD_StdEPReq+0x1c6>

            default:
              USBD_CtlError(pdev, req);
 8006ec0:	6839      	ldr	r1, [r7, #0]
 8006ec2:	6878      	ldr	r0, [r7, #4]
 8006ec4:	f000 fc03 	bl	80076ce <USBD_CtlError>
              break;
 8006ec8:	e000      	b.n	8006ecc <USBD_StdEPReq+0x1c8>
              break;
 8006eca:	bf00      	nop
          }
          break;
 8006ecc:	e0ab      	b.n	8007026 <USBD_StdEPReq+0x322>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8006ed4:	b2db      	uxtb	r3, r3
 8006ed6:	2b02      	cmp	r3, #2
 8006ed8:	d002      	beq.n	8006ee0 <USBD_StdEPReq+0x1dc>
 8006eda:	2b03      	cmp	r3, #3
 8006edc:	d032      	beq.n	8006f44 <USBD_StdEPReq+0x240>
 8006ede:	e097      	b.n	8007010 <USBD_StdEPReq+0x30c>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8006ee0:	7bbb      	ldrb	r3, [r7, #14]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d007      	beq.n	8006ef6 <USBD_StdEPReq+0x1f2>
 8006ee6:	7bbb      	ldrb	r3, [r7, #14]
 8006ee8:	2b80      	cmp	r3, #128	; 0x80
 8006eea:	d004      	beq.n	8006ef6 <USBD_StdEPReq+0x1f2>
              {
                USBD_CtlError(pdev, req);
 8006eec:	6839      	ldr	r1, [r7, #0]
 8006eee:	6878      	ldr	r0, [r7, #4]
 8006ef0:	f000 fbed 	bl	80076ce <USBD_CtlError>
                break;
 8006ef4:	e091      	b.n	800701a <USBD_StdEPReq+0x316>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006ef6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006efa:	2b00      	cmp	r3, #0
 8006efc:	da0b      	bge.n	8006f16 <USBD_StdEPReq+0x212>
 8006efe:	7bbb      	ldrb	r3, [r7, #14]
 8006f00:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006f04:	4613      	mov	r3, r2
 8006f06:	009b      	lsls	r3, r3, #2
 8006f08:	4413      	add	r3, r2
 8006f0a:	009b      	lsls	r3, r3, #2
 8006f0c:	3310      	adds	r3, #16
 8006f0e:	687a      	ldr	r2, [r7, #4]
 8006f10:	4413      	add	r3, r2
 8006f12:	3304      	adds	r3, #4
 8006f14:	e00b      	b.n	8006f2e <USBD_StdEPReq+0x22a>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006f16:	7bbb      	ldrb	r3, [r7, #14]
 8006f18:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f1c:	4613      	mov	r3, r2
 8006f1e:	009b      	lsls	r3, r3, #2
 8006f20:	4413      	add	r3, r2
 8006f22:	009b      	lsls	r3, r3, #2
 8006f24:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006f28:	687a      	ldr	r2, [r7, #4]
 8006f2a:	4413      	add	r3, r2
 8006f2c:	3304      	adds	r3, #4
 8006f2e:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8006f30:	68bb      	ldr	r3, [r7, #8]
 8006f32:	2200      	movs	r2, #0
 8006f34:	601a      	str	r2, [r3, #0]

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8006f36:	68bb      	ldr	r3, [r7, #8]
 8006f38:	2202      	movs	r2, #2
 8006f3a:	4619      	mov	r1, r3
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 fc37 	bl	80077b0 <USBD_CtlSendData>
              break;
 8006f42:	e06a      	b.n	800701a <USBD_StdEPReq+0x316>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 8006f44:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	da11      	bge.n	8006f70 <USBD_StdEPReq+0x26c>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8006f4c:	7bbb      	ldrb	r3, [r7, #14]
 8006f4e:	f003 020f 	and.w	r2, r3, #15
 8006f52:	6879      	ldr	r1, [r7, #4]
 8006f54:	4613      	mov	r3, r2
 8006f56:	009b      	lsls	r3, r3, #2
 8006f58:	4413      	add	r3, r2
 8006f5a:	009b      	lsls	r3, r3, #2
 8006f5c:	440b      	add	r3, r1
 8006f5e:	3324      	adds	r3, #36	; 0x24
 8006f60:	881b      	ldrh	r3, [r3, #0]
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d117      	bne.n	8006f96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f66:	6839      	ldr	r1, [r7, #0]
 8006f68:	6878      	ldr	r0, [r7, #4]
 8006f6a:	f000 fbb0 	bl	80076ce <USBD_CtlError>
                  break;
 8006f6e:	e054      	b.n	800701a <USBD_StdEPReq+0x316>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8006f70:	7bbb      	ldrb	r3, [r7, #14]
 8006f72:	f003 020f 	and.w	r2, r3, #15
 8006f76:	6879      	ldr	r1, [r7, #4]
 8006f78:	4613      	mov	r3, r2
 8006f7a:	009b      	lsls	r3, r3, #2
 8006f7c:	4413      	add	r3, r2
 8006f7e:	009b      	lsls	r3, r3, #2
 8006f80:	440b      	add	r3, r1
 8006f82:	f503 73b2 	add.w	r3, r3, #356	; 0x164
 8006f86:	881b      	ldrh	r3, [r3, #0]
 8006f88:	2b00      	cmp	r3, #0
 8006f8a:	d104      	bne.n	8006f96 <USBD_StdEPReq+0x292>
                {
                  USBD_CtlError(pdev, req);
 8006f8c:	6839      	ldr	r1, [r7, #0]
 8006f8e:	6878      	ldr	r0, [r7, #4]
 8006f90:	f000 fb9d 	bl	80076ce <USBD_CtlError>
                  break;
 8006f94:	e041      	b.n	800701a <USBD_StdEPReq+0x316>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006f96:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	da0b      	bge.n	8006fb6 <USBD_StdEPReq+0x2b2>
 8006f9e:	7bbb      	ldrb	r3, [r7, #14]
 8006fa0:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	009b      	lsls	r3, r3, #2
 8006fa8:	4413      	add	r3, r2
 8006faa:	009b      	lsls	r3, r3, #2
 8006fac:	3310      	adds	r3, #16
 8006fae:	687a      	ldr	r2, [r7, #4]
 8006fb0:	4413      	add	r3, r2
 8006fb2:	3304      	adds	r3, #4
 8006fb4:	e00b      	b.n	8006fce <USBD_StdEPReq+0x2ca>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8006fb6:	7bbb      	ldrb	r3, [r7, #14]
 8006fb8:	f003 027f 	and.w	r2, r3, #127	; 0x7f
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8006fbc:	4613      	mov	r3, r2
 8006fbe:	009b      	lsls	r3, r3, #2
 8006fc0:	4413      	add	r3, r2
 8006fc2:	009b      	lsls	r3, r3, #2
 8006fc4:	f503 73a8 	add.w	r3, r3, #336	; 0x150
 8006fc8:	687a      	ldr	r2, [r7, #4]
 8006fca:	4413      	add	r3, r2
 8006fcc:	3304      	adds	r3, #4
 8006fce:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8006fd0:	7bbb      	ldrb	r3, [r7, #14]
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d002      	beq.n	8006fdc <USBD_StdEPReq+0x2d8>
 8006fd6:	7bbb      	ldrb	r3, [r7, #14]
 8006fd8:	2b80      	cmp	r3, #128	; 0x80
 8006fda:	d103      	bne.n	8006fe4 <USBD_StdEPReq+0x2e0>
              {
                pep->status = 0x0000U;
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	2200      	movs	r2, #0
 8006fe0:	601a      	str	r2, [r3, #0]
 8006fe2:	e00e      	b.n	8007002 <USBD_StdEPReq+0x2fe>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr) != 0U)
 8006fe4:	7bbb      	ldrb	r3, [r7, #14]
 8006fe6:	4619      	mov	r1, r3
 8006fe8:	6878      	ldr	r0, [r7, #4]
 8006fea:	f000 ffa1 	bl	8007f30 <USBD_LL_IsStallEP>
 8006fee:	4603      	mov	r3, r0
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d003      	beq.n	8006ffc <USBD_StdEPReq+0x2f8>
              {
                pep->status = 0x0001U;
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	2201      	movs	r2, #1
 8006ff8:	601a      	str	r2, [r3, #0]
 8006ffa:	e002      	b.n	8007002 <USBD_StdEPReq+0x2fe>
              }
              else
              {
                pep->status = 0x0000U;
 8006ffc:	68bb      	ldr	r3, [r7, #8]
 8006ffe:	2200      	movs	r2, #0
 8007000:	601a      	str	r2, [r3, #0]
              }

              (void)USBD_CtlSendData(pdev, (uint8_t *)&pep->status, 2U);
 8007002:	68bb      	ldr	r3, [r7, #8]
 8007004:	2202      	movs	r2, #2
 8007006:	4619      	mov	r1, r3
 8007008:	6878      	ldr	r0, [r7, #4]
 800700a:	f000 fbd1 	bl	80077b0 <USBD_CtlSendData>
              break;
 800700e:	e004      	b.n	800701a <USBD_StdEPReq+0x316>

            default:
              USBD_CtlError(pdev, req);
 8007010:	6839      	ldr	r1, [r7, #0]
 8007012:	6878      	ldr	r0, [r7, #4]
 8007014:	f000 fb5b 	bl	80076ce <USBD_CtlError>
              break;
 8007018:	bf00      	nop
          }
          break;
 800701a:	e004      	b.n	8007026 <USBD_StdEPReq+0x322>

        default:
          USBD_CtlError(pdev, req);
 800701c:	6839      	ldr	r1, [r7, #0]
 800701e:	6878      	ldr	r0, [r7, #4]
 8007020:	f000 fb55 	bl	80076ce <USBD_CtlError>
          break;
 8007024:	bf00      	nop
      }
      break;
 8007026:	e005      	b.n	8007034 <USBD_StdEPReq+0x330>

    default:
      USBD_CtlError(pdev, req);
 8007028:	6839      	ldr	r1, [r7, #0]
 800702a:	6878      	ldr	r0, [r7, #4]
 800702c:	f000 fb4f 	bl	80076ce <USBD_CtlError>
      break;
 8007030:	e000      	b.n	8007034 <USBD_StdEPReq+0x330>
      break;
 8007032:	bf00      	nop
  }

  return ret;
 8007034:	7bfb      	ldrb	r3, [r7, #15]
}
 8007036:	4618      	mov	r0, r3
 8007038:	3710      	adds	r7, #16
 800703a:	46bd      	mov	sp, r7
 800703c:	bd80      	pop	{r7, pc}
	...

08007040 <USBD_GetDescriptor>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007040:	b580      	push	{r7, lr}
 8007042:	b084      	sub	sp, #16
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 800704a:	2300      	movs	r3, #0
 800704c:	813b      	strh	r3, [r7, #8]
  uint8_t *pbuf = NULL;
 800704e:	2300      	movs	r3, #0
 8007050:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 8007052:	2300      	movs	r3, #0
 8007054:	72fb      	strb	r3, [r7, #11]

  switch (req->wValue >> 8)
 8007056:	683b      	ldr	r3, [r7, #0]
 8007058:	885b      	ldrh	r3, [r3, #2]
 800705a:	0a1b      	lsrs	r3, r3, #8
 800705c:	b29b      	uxth	r3, r3
 800705e:	3b01      	subs	r3, #1
 8007060:	2b06      	cmp	r3, #6
 8007062:	f200 8128 	bhi.w	80072b6 <USBD_GetDescriptor+0x276>
 8007066:	a201      	add	r2, pc, #4	; (adr r2, 800706c <USBD_GetDescriptor+0x2c>)
 8007068:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800706c:	08007089 	.word	0x08007089
 8007070:	080070a1 	.word	0x080070a1
 8007074:	080070e1 	.word	0x080070e1
 8007078:	080072b7 	.word	0x080072b7
 800707c:	080072b7 	.word	0x080072b7
 8007080:	08007257 	.word	0x08007257
 8007084:	08007283 	.word	0x08007283
        err++;
      }
      break;
#endif /* (USBD_LPM_ENABLED == 1U) || (USBD_CLASS_BOS_ENABLED == 1U) */
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	687a      	ldr	r2, [r7, #4]
 8007092:	7c12      	ldrb	r2, [r2, #16]
 8007094:	f107 0108 	add.w	r1, r7, #8
 8007098:	4610      	mov	r0, r2
 800709a:	4798      	blx	r3
 800709c:	60f8      	str	r0, [r7, #12]
      break;
 800709e:	e112      	b.n	80072c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	7c1b      	ldrb	r3, [r3, #16]
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d10d      	bne.n	80070c4 <USBD_GetDescriptor+0x84>
          pbuf   = (uint8_t *)USBD_CMPSIT.GetHSConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetHSConfigDescriptor(&len);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070b0:	f107 0208 	add.w	r2, r7, #8
 80070b4:	4610      	mov	r0, r2
 80070b6:	4798      	blx	r3
 80070b8:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	3301      	adds	r3, #1
 80070be:	2202      	movs	r2, #2
 80070c0:	701a      	strb	r2, [r3, #0]
        {
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
        }
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 80070c2:	e100      	b.n	80072c6 <USBD_GetDescriptor+0x286>
          pbuf   = (uint8_t *)pdev->pClass[0]->GetFSConfigDescriptor(&len);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 80070ca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80070cc:	f107 0208 	add.w	r2, r7, #8
 80070d0:	4610      	mov	r0, r2
 80070d2:	4798      	blx	r3
 80070d4:	60f8      	str	r0, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	3301      	adds	r3, #1
 80070da:	2202      	movs	r2, #2
 80070dc:	701a      	strb	r2, [r3, #0]
      break;
 80070de:	e0f2      	b.n	80072c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 80070e0:	683b      	ldr	r3, [r7, #0]
 80070e2:	885b      	ldrh	r3, [r3, #2]
 80070e4:	b2db      	uxtb	r3, r3
 80070e6:	2b05      	cmp	r3, #5
 80070e8:	f200 80ac 	bhi.w	8007244 <USBD_GetDescriptor+0x204>
 80070ec:	a201      	add	r2, pc, #4	; (adr r2, 80070f4 <USBD_GetDescriptor+0xb4>)
 80070ee:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80070f2:	bf00      	nop
 80070f4:	0800710d 	.word	0x0800710d
 80070f8:	08007141 	.word	0x08007141
 80070fc:	08007175 	.word	0x08007175
 8007100:	080071a9 	.word	0x080071a9
 8007104:	080071dd 	.word	0x080071dd
 8007108:	08007211 	.word	0x08007211
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007112:	685b      	ldr	r3, [r3, #4]
 8007114:	2b00      	cmp	r3, #0
 8007116:	d00b      	beq.n	8007130 <USBD_GetDescriptor+0xf0>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	687a      	ldr	r2, [r7, #4]
 8007122:	7c12      	ldrb	r2, [r2, #16]
 8007124:	f107 0108 	add.w	r1, r7, #8
 8007128:	4610      	mov	r0, r2
 800712a:	4798      	blx	r3
 800712c:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 800712e:	e091      	b.n	8007254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007130:	6839      	ldr	r1, [r7, #0]
 8007132:	6878      	ldr	r0, [r7, #4]
 8007134:	f000 facb 	bl	80076ce <USBD_CtlError>
            err++;
 8007138:	7afb      	ldrb	r3, [r7, #11]
 800713a:	3301      	adds	r3, #1
 800713c:	72fb      	strb	r3, [r7, #11]
          break;
 800713e:	e089      	b.n	8007254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007146:	689b      	ldr	r3, [r3, #8]
 8007148:	2b00      	cmp	r3, #0
 800714a:	d00b      	beq.n	8007164 <USBD_GetDescriptor+0x124>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007152:	689b      	ldr	r3, [r3, #8]
 8007154:	687a      	ldr	r2, [r7, #4]
 8007156:	7c12      	ldrb	r2, [r2, #16]
 8007158:	f107 0108 	add.w	r1, r7, #8
 800715c:	4610      	mov	r0, r2
 800715e:	4798      	blx	r3
 8007160:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007162:	e077      	b.n	8007254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007164:	6839      	ldr	r1, [r7, #0]
 8007166:	6878      	ldr	r0, [r7, #4]
 8007168:	f000 fab1 	bl	80076ce <USBD_CtlError>
            err++;
 800716c:	7afb      	ldrb	r3, [r7, #11]
 800716e:	3301      	adds	r3, #1
 8007170:	72fb      	strb	r3, [r7, #11]
          break;
 8007172:	e06f      	b.n	8007254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 800717a:	68db      	ldr	r3, [r3, #12]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d00b      	beq.n	8007198 <USBD_GetDescriptor+0x158>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007186:	68db      	ldr	r3, [r3, #12]
 8007188:	687a      	ldr	r2, [r7, #4]
 800718a:	7c12      	ldrb	r2, [r2, #16]
 800718c:	f107 0108 	add.w	r1, r7, #8
 8007190:	4610      	mov	r0, r2
 8007192:	4798      	blx	r3
 8007194:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007196:	e05d      	b.n	8007254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007198:	6839      	ldr	r1, [r7, #0]
 800719a:	6878      	ldr	r0, [r7, #4]
 800719c:	f000 fa97 	bl	80076ce <USBD_CtlError>
            err++;
 80071a0:	7afb      	ldrb	r3, [r7, #11]
 80071a2:	3301      	adds	r3, #1
 80071a4:	72fb      	strb	r3, [r7, #11]
          break;
 80071a6:	e055      	b.n	8007254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ae:	691b      	ldr	r3, [r3, #16]
 80071b0:	2b00      	cmp	r3, #0
 80071b2:	d00b      	beq.n	80071cc <USBD_GetDescriptor+0x18c>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ba:	691b      	ldr	r3, [r3, #16]
 80071bc:	687a      	ldr	r2, [r7, #4]
 80071be:	7c12      	ldrb	r2, [r2, #16]
 80071c0:	f107 0108 	add.w	r1, r7, #8
 80071c4:	4610      	mov	r0, r2
 80071c6:	4798      	blx	r3
 80071c8:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071ca:	e043      	b.n	8007254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 80071cc:	6839      	ldr	r1, [r7, #0]
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f000 fa7d 	bl	80076ce <USBD_CtlError>
            err++;
 80071d4:	7afb      	ldrb	r3, [r7, #11]
 80071d6:	3301      	adds	r3, #1
 80071d8:	72fb      	strb	r3, [r7, #11]
          break;
 80071da:	e03b      	b.n	8007254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071e2:	695b      	ldr	r3, [r3, #20]
 80071e4:	2b00      	cmp	r3, #0
 80071e6:	d00b      	beq.n	8007200 <USBD_GetDescriptor+0x1c0>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 80071ee:	695b      	ldr	r3, [r3, #20]
 80071f0:	687a      	ldr	r2, [r7, #4]
 80071f2:	7c12      	ldrb	r2, [r2, #16]
 80071f4:	f107 0108 	add.w	r1, r7, #8
 80071f8:	4610      	mov	r0, r2
 80071fa:	4798      	blx	r3
 80071fc:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80071fe:	e029      	b.n	8007254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007200:	6839      	ldr	r1, [r7, #0]
 8007202:	6878      	ldr	r0, [r7, #4]
 8007204:	f000 fa63 	bl	80076ce <USBD_CtlError>
            err++;
 8007208:	7afb      	ldrb	r3, [r7, #11]
 800720a:	3301      	adds	r3, #1
 800720c:	72fb      	strb	r3, [r7, #11]
          break;
 800720e:	e021      	b.n	8007254 <USBD_GetDescriptor+0x214>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007216:	699b      	ldr	r3, [r3, #24]
 8007218:	2b00      	cmp	r3, #0
 800721a:	d00b      	beq.n	8007234 <USBD_GetDescriptor+0x1f4>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	f8d3 32b4 	ldr.w	r3, [r3, #692]	; 0x2b4
 8007222:	699b      	ldr	r3, [r3, #24]
 8007224:	687a      	ldr	r2, [r7, #4]
 8007226:	7c12      	ldrb	r2, [r2, #16]
 8007228:	f107 0108 	add.w	r1, r7, #8
 800722c:	4610      	mov	r0, r2
 800722e:	4798      	blx	r3
 8007230:	60f8      	str	r0, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8007232:	e00f      	b.n	8007254 <USBD_GetDescriptor+0x214>
            USBD_CtlError(pdev, req);
 8007234:	6839      	ldr	r1, [r7, #0]
 8007236:	6878      	ldr	r0, [r7, #4]
 8007238:	f000 fa49 	bl	80076ce <USBD_CtlError>
            err++;
 800723c:	7afb      	ldrb	r3, [r7, #11]
 800723e:	3301      	adds	r3, #1
 8007240:	72fb      	strb	r3, [r7, #11]
          break;
 8007242:	e007      	b.n	8007254 <USBD_GetDescriptor+0x214>
            err++;
          }
#endif /* USBD_SUPPORT_USER_STRING_DESC  */

#if ((USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U))
          USBD_CtlError(pdev, req);
 8007244:	6839      	ldr	r1, [r7, #0]
 8007246:	6878      	ldr	r0, [r7, #4]
 8007248:	f000 fa41 	bl	80076ce <USBD_CtlError>
          err++;
 800724c:	7afb      	ldrb	r3, [r7, #11]
 800724e:	3301      	adds	r3, #1
 8007250:	72fb      	strb	r3, [r7, #11]
#endif /* (USBD_CLASS_USER_STRING_DESC == 0U) && (USBD_SUPPORT_USER_STRING_DESC == 0U) */
          break;
 8007252:	bf00      	nop
      }
      break;
 8007254:	e037      	b.n	80072c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	7c1b      	ldrb	r3, [r3, #16]
 800725a:	2b00      	cmp	r3, #0
 800725c:	d109      	bne.n	8007272 <USBD_GetDescriptor+0x232>
          pbuf = (uint8_t *)USBD_CMPSIT.GetDeviceQualifierDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetDeviceQualifierDescriptor(&len);
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007266:	f107 0208 	add.w	r2, r7, #8
 800726a:	4610      	mov	r0, r2
 800726c:	4798      	blx	r3
 800726e:	60f8      	str	r0, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8007270:	e029      	b.n	80072c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 8007272:	6839      	ldr	r1, [r7, #0]
 8007274:	6878      	ldr	r0, [r7, #4]
 8007276:	f000 fa2a 	bl	80076ce <USBD_CtlError>
        err++;
 800727a:	7afb      	ldrb	r3, [r7, #11]
 800727c:	3301      	adds	r3, #1
 800727e:	72fb      	strb	r3, [r7, #11]
      break;
 8007280:	e021      	b.n	80072c6 <USBD_GetDescriptor+0x286>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	7c1b      	ldrb	r3, [r3, #16]
 8007286:	2b00      	cmp	r3, #0
 8007288:	d10d      	bne.n	80072a6 <USBD_GetDescriptor+0x266>
          pbuf = (uint8_t *)USBD_CMPSIT.GetOtherSpeedConfigDescriptor(&len);
        }
        else
#endif /* USE_USBD_COMPOSITE */
        {
          pbuf = (uint8_t *)pdev->pClass[0]->GetOtherSpeedConfigDescriptor(&len);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	f8d3 32b8 	ldr.w	r3, [r3, #696]	; 0x2b8
 8007290:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007292:	f107 0208 	add.w	r2, r7, #8
 8007296:	4610      	mov	r0, r2
 8007298:	4798      	blx	r3
 800729a:	60f8      	str	r0, [r7, #12]
        }
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	3301      	adds	r3, #1
 80072a0:	2207      	movs	r2, #7
 80072a2:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 80072a4:	e00f      	b.n	80072c6 <USBD_GetDescriptor+0x286>
        USBD_CtlError(pdev, req);
 80072a6:	6839      	ldr	r1, [r7, #0]
 80072a8:	6878      	ldr	r0, [r7, #4]
 80072aa:	f000 fa10 	bl	80076ce <USBD_CtlError>
        err++;
 80072ae:	7afb      	ldrb	r3, [r7, #11]
 80072b0:	3301      	adds	r3, #1
 80072b2:	72fb      	strb	r3, [r7, #11]
      break;
 80072b4:	e007      	b.n	80072c6 <USBD_GetDescriptor+0x286>

    default:
      USBD_CtlError(pdev, req);
 80072b6:	6839      	ldr	r1, [r7, #0]
 80072b8:	6878      	ldr	r0, [r7, #4]
 80072ba:	f000 fa08 	bl	80076ce <USBD_CtlError>
      err++;
 80072be:	7afb      	ldrb	r3, [r7, #11]
 80072c0:	3301      	adds	r3, #1
 80072c2:	72fb      	strb	r3, [r7, #11]
      break;
 80072c4:	bf00      	nop
  }

  if (err != 0U)
 80072c6:	7afb      	ldrb	r3, [r7, #11]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d11e      	bne.n	800730a <USBD_GetDescriptor+0x2ca>
  {
    return;
  }

  if (req->wLength != 0U)
 80072cc:	683b      	ldr	r3, [r7, #0]
 80072ce:	88db      	ldrh	r3, [r3, #6]
 80072d0:	2b00      	cmp	r3, #0
 80072d2:	d016      	beq.n	8007302 <USBD_GetDescriptor+0x2c2>
  {
    if (len != 0U)
 80072d4:	893b      	ldrh	r3, [r7, #8]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d00e      	beq.n	80072f8 <USBD_GetDescriptor+0x2b8>
    {
      len = MIN(len, req->wLength);
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	88da      	ldrh	r2, [r3, #6]
 80072de:	893b      	ldrh	r3, [r7, #8]
 80072e0:	4293      	cmp	r3, r2
 80072e2:	bf28      	it	cs
 80072e4:	4613      	movcs	r3, r2
 80072e6:	b29b      	uxth	r3, r3
 80072e8:	813b      	strh	r3, [r7, #8]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 80072ea:	893b      	ldrh	r3, [r7, #8]
 80072ec:	461a      	mov	r2, r3
 80072ee:	68f9      	ldr	r1, [r7, #12]
 80072f0:	6878      	ldr	r0, [r7, #4]
 80072f2:	f000 fa5d 	bl	80077b0 <USBD_CtlSendData>
 80072f6:	e009      	b.n	800730c <USBD_GetDescriptor+0x2cc>
    }
    else
    {
      USBD_CtlError(pdev, req);
 80072f8:	6839      	ldr	r1, [r7, #0]
 80072fa:	6878      	ldr	r0, [r7, #4]
 80072fc:	f000 f9e7 	bl	80076ce <USBD_CtlError>
 8007300:	e004      	b.n	800730c <USBD_GetDescriptor+0x2cc>
    }
  }
  else
  {
    (void)USBD_CtlSendStatus(pdev);
 8007302:	6878      	ldr	r0, [r7, #4]
 8007304:	f000 fa91 	bl	800782a <USBD_CtlSendStatus>
 8007308:	e000      	b.n	800730c <USBD_GetDescriptor+0x2cc>
    return;
 800730a:	bf00      	nop
  }
}
 800730c:	3710      	adds	r7, #16
 800730e:	46bd      	mov	sp, r7
 8007310:	bd80      	pop	{r7, pc}
 8007312:	bf00      	nop

08007314 <USBD_SetAddress>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetAddress(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007314:	b580      	push	{r7, lr}
 8007316:	b084      	sub	sp, #16
 8007318:	af00      	add	r7, sp, #0
 800731a:	6078      	str	r0, [r7, #4]
 800731c:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	889b      	ldrh	r3, [r3, #4]
 8007322:	2b00      	cmp	r3, #0
 8007324:	d131      	bne.n	800738a <USBD_SetAddress+0x76>
 8007326:	683b      	ldr	r3, [r7, #0]
 8007328:	88db      	ldrh	r3, [r3, #6]
 800732a:	2b00      	cmp	r3, #0
 800732c:	d12d      	bne.n	800738a <USBD_SetAddress+0x76>
 800732e:	683b      	ldr	r3, [r7, #0]
 8007330:	885b      	ldrh	r3, [r3, #2]
 8007332:	2b7f      	cmp	r3, #127	; 0x7f
 8007334:	d829      	bhi.n	800738a <USBD_SetAddress+0x76>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8007336:	683b      	ldr	r3, [r7, #0]
 8007338:	885b      	ldrh	r3, [r3, #2]
 800733a:	b2db      	uxtb	r3, r3
 800733c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007340:	73fb      	strb	r3, [r7, #15]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007348:	b2db      	uxtb	r3, r3
 800734a:	2b03      	cmp	r3, #3
 800734c:	d104      	bne.n	8007358 <USBD_SetAddress+0x44>
    {
      USBD_CtlError(pdev, req);
 800734e:	6839      	ldr	r1, [r7, #0]
 8007350:	6878      	ldr	r0, [r7, #4]
 8007352:	f000 f9bc 	bl	80076ce <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007356:	e01d      	b.n	8007394 <USBD_SetAddress+0x80>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	7bfa      	ldrb	r2, [r7, #15]
 800735c:	f883 229e 	strb.w	r2, [r3, #670]	; 0x29e
      (void)USBD_LL_SetUSBAddress(pdev, dev_addr);
 8007360:	7bfb      	ldrb	r3, [r7, #15]
 8007362:	4619      	mov	r1, r3
 8007364:	6878      	ldr	r0, [r7, #4]
 8007366:	f000 fe0f 	bl	8007f88 <USBD_LL_SetUSBAddress>
      (void)USBD_CtlSendStatus(pdev);
 800736a:	6878      	ldr	r0, [r7, #4]
 800736c:	f000 fa5d 	bl	800782a <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8007370:	7bfb      	ldrb	r3, [r7, #15]
 8007372:	2b00      	cmp	r3, #0
 8007374:	d004      	beq.n	8007380 <USBD_SetAddress+0x6c>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	2202      	movs	r2, #2
 800737a:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 800737e:	e009      	b.n	8007394 <USBD_SetAddress+0x80>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	2201      	movs	r2, #1
 8007384:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8007388:	e004      	b.n	8007394 <USBD_SetAddress+0x80>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 800738a:	6839      	ldr	r1, [r7, #0]
 800738c:	6878      	ldr	r0, [r7, #4]
 800738e:	f000 f99e 	bl	80076ce <USBD_CtlError>
  }
}
 8007392:	bf00      	nop
 8007394:	bf00      	nop
 8007396:	3710      	adds	r7, #16
 8007398:	46bd      	mov	sp, r7
 800739a:	bd80      	pop	{r7, pc}

0800739c <USBD_SetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static USBD_StatusTypeDef USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800739c:	b580      	push	{r7, lr}
 800739e:	b084      	sub	sp, #16
 80073a0:	af00      	add	r7, sp, #0
 80073a2:	6078      	str	r0, [r7, #4]
 80073a4:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 80073a6:	2300      	movs	r3, #0
 80073a8:	73fb      	strb	r3, [r7, #15]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 80073aa:	683b      	ldr	r3, [r7, #0]
 80073ac:	885b      	ldrh	r3, [r3, #2]
 80073ae:	b2da      	uxtb	r2, r3
 80073b0:	4b4e      	ldr	r3, [pc, #312]	; (80074ec <USBD_SetConfig+0x150>)
 80073b2:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 80073b4:	4b4d      	ldr	r3, [pc, #308]	; (80074ec <USBD_SetConfig+0x150>)
 80073b6:	781b      	ldrb	r3, [r3, #0]
 80073b8:	2b01      	cmp	r3, #1
 80073ba:	d905      	bls.n	80073c8 <USBD_SetConfig+0x2c>
  {
    USBD_CtlError(pdev, req);
 80073bc:	6839      	ldr	r1, [r7, #0]
 80073be:	6878      	ldr	r0, [r7, #4]
 80073c0:	f000 f985 	bl	80076ce <USBD_CtlError>
    return USBD_FAIL;
 80073c4:	2303      	movs	r3, #3
 80073c6:	e08c      	b.n	80074e2 <USBD_SetConfig+0x146>
  }

  switch (pdev->dev_state)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 80073ce:	b2db      	uxtb	r3, r3
 80073d0:	2b02      	cmp	r3, #2
 80073d2:	d002      	beq.n	80073da <USBD_SetConfig+0x3e>
 80073d4:	2b03      	cmp	r3, #3
 80073d6:	d029      	beq.n	800742c <USBD_SetConfig+0x90>
 80073d8:	e075      	b.n	80074c6 <USBD_SetConfig+0x12a>
  {
    case USBD_STATE_ADDRESSED:
      if (cfgidx != 0U)
 80073da:	4b44      	ldr	r3, [pc, #272]	; (80074ec <USBD_SetConfig+0x150>)
 80073dc:	781b      	ldrb	r3, [r3, #0]
 80073de:	2b00      	cmp	r3, #0
 80073e0:	d020      	beq.n	8007424 <USBD_SetConfig+0x88>
      {
        pdev->dev_config = cfgidx;
 80073e2:	4b42      	ldr	r3, [pc, #264]	; (80074ec <USBD_SetConfig+0x150>)
 80073e4:	781b      	ldrb	r3, [r3, #0]
 80073e6:	461a      	mov	r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	605a      	str	r2, [r3, #4]

        ret = USBD_SetClassConfig(pdev, cfgidx);
 80073ec:	4b3f      	ldr	r3, [pc, #252]	; (80074ec <USBD_SetConfig+0x150>)
 80073ee:	781b      	ldrb	r3, [r3, #0]
 80073f0:	4619      	mov	r1, r3
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7fe ffe7 	bl	80063c6 <USBD_SetClassConfig>
 80073f8:	4603      	mov	r3, r0
 80073fa:	73fb      	strb	r3, [r7, #15]

        if (ret != USBD_OK)
 80073fc:	7bfb      	ldrb	r3, [r7, #15]
 80073fe:	2b00      	cmp	r3, #0
 8007400:	d008      	beq.n	8007414 <USBD_SetConfig+0x78>
        {
          USBD_CtlError(pdev, req);
 8007402:	6839      	ldr	r1, [r7, #0]
 8007404:	6878      	ldr	r0, [r7, #4]
 8007406:	f000 f962 	bl	80076ce <USBD_CtlError>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	2202      	movs	r2, #2
 800740e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007412:	e065      	b.n	80074e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 8007414:	6878      	ldr	r0, [r7, #4]
 8007416:	f000 fa08 	bl	800782a <USBD_CtlSendStatus>
          pdev->dev_state = USBD_STATE_CONFIGURED;
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	2203      	movs	r2, #3
 800741e:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 8007422:	e05d      	b.n	80074e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 8007424:	6878      	ldr	r0, [r7, #4]
 8007426:	f000 fa00 	bl	800782a <USBD_CtlSendStatus>
      break;
 800742a:	e059      	b.n	80074e0 <USBD_SetConfig+0x144>

    case USBD_STATE_CONFIGURED:
      if (cfgidx == 0U)
 800742c:	4b2f      	ldr	r3, [pc, #188]	; (80074ec <USBD_SetConfig+0x150>)
 800742e:	781b      	ldrb	r3, [r3, #0]
 8007430:	2b00      	cmp	r3, #0
 8007432:	d112      	bne.n	800745a <USBD_SetConfig+0xbe>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2202      	movs	r2, #2
 8007438:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
        pdev->dev_config = cfgidx;
 800743c:	4b2b      	ldr	r3, [pc, #172]	; (80074ec <USBD_SetConfig+0x150>)
 800743e:	781b      	ldrb	r3, [r3, #0]
 8007440:	461a      	mov	r2, r3
 8007442:	687b      	ldr	r3, [r7, #4]
 8007444:	605a      	str	r2, [r3, #4]
        (void)USBD_ClrClassConfig(pdev, cfgidx);
 8007446:	4b29      	ldr	r3, [pc, #164]	; (80074ec <USBD_SetConfig+0x150>)
 8007448:	781b      	ldrb	r3, [r3, #0]
 800744a:	4619      	mov	r1, r3
 800744c:	6878      	ldr	r0, [r7, #4]
 800744e:	f7fe ffd6 	bl	80063fe <USBD_ClrClassConfig>
        (void)USBD_CtlSendStatus(pdev);
 8007452:	6878      	ldr	r0, [r7, #4]
 8007454:	f000 f9e9 	bl	800782a <USBD_CtlSendStatus>
      }
      else
      {
        (void)USBD_CtlSendStatus(pdev);
      }
      break;
 8007458:	e042      	b.n	80074e0 <USBD_SetConfig+0x144>
      else if (cfgidx != pdev->dev_config)
 800745a:	4b24      	ldr	r3, [pc, #144]	; (80074ec <USBD_SetConfig+0x150>)
 800745c:	781b      	ldrb	r3, [r3, #0]
 800745e:	461a      	mov	r2, r3
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	685b      	ldr	r3, [r3, #4]
 8007464:	429a      	cmp	r2, r3
 8007466:	d02a      	beq.n	80074be <USBD_SetConfig+0x122>
        (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8007468:	687b      	ldr	r3, [r7, #4]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	b2db      	uxtb	r3, r3
 800746e:	4619      	mov	r1, r3
 8007470:	6878      	ldr	r0, [r7, #4]
 8007472:	f7fe ffc4 	bl	80063fe <USBD_ClrClassConfig>
        pdev->dev_config = cfgidx;
 8007476:	4b1d      	ldr	r3, [pc, #116]	; (80074ec <USBD_SetConfig+0x150>)
 8007478:	781b      	ldrb	r3, [r3, #0]
 800747a:	461a      	mov	r2, r3
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	605a      	str	r2, [r3, #4]
        ret = USBD_SetClassConfig(pdev, cfgidx);
 8007480:	4b1a      	ldr	r3, [pc, #104]	; (80074ec <USBD_SetConfig+0x150>)
 8007482:	781b      	ldrb	r3, [r3, #0]
 8007484:	4619      	mov	r1, r3
 8007486:	6878      	ldr	r0, [r7, #4]
 8007488:	f7fe ff9d 	bl	80063c6 <USBD_SetClassConfig>
 800748c:	4603      	mov	r3, r0
 800748e:	73fb      	strb	r3, [r7, #15]
        if (ret != USBD_OK)
 8007490:	7bfb      	ldrb	r3, [r7, #15]
 8007492:	2b00      	cmp	r3, #0
 8007494:	d00f      	beq.n	80074b6 <USBD_SetConfig+0x11a>
          USBD_CtlError(pdev, req);
 8007496:	6839      	ldr	r1, [r7, #0]
 8007498:	6878      	ldr	r0, [r7, #4]
 800749a:	f000 f918 	bl	80076ce <USBD_CtlError>
          (void)USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	685b      	ldr	r3, [r3, #4]
 80074a2:	b2db      	uxtb	r3, r3
 80074a4:	4619      	mov	r1, r3
 80074a6:	6878      	ldr	r0, [r7, #4]
 80074a8:	f7fe ffa9 	bl	80063fe <USBD_ClrClassConfig>
          pdev->dev_state = USBD_STATE_ADDRESSED;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	2202      	movs	r2, #2
 80074b0:	f883 229c 	strb.w	r2, [r3, #668]	; 0x29c
      break;
 80074b4:	e014      	b.n	80074e0 <USBD_SetConfig+0x144>
          (void)USBD_CtlSendStatus(pdev);
 80074b6:	6878      	ldr	r0, [r7, #4]
 80074b8:	f000 f9b7 	bl	800782a <USBD_CtlSendStatus>
      break;
 80074bc:	e010      	b.n	80074e0 <USBD_SetConfig+0x144>
        (void)USBD_CtlSendStatus(pdev);
 80074be:	6878      	ldr	r0, [r7, #4]
 80074c0:	f000 f9b3 	bl	800782a <USBD_CtlSendStatus>
      break;
 80074c4:	e00c      	b.n	80074e0 <USBD_SetConfig+0x144>

    default:
      USBD_CtlError(pdev, req);
 80074c6:	6839      	ldr	r1, [r7, #0]
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f000 f900 	bl	80076ce <USBD_CtlError>
      (void)USBD_ClrClassConfig(pdev, cfgidx);
 80074ce:	4b07      	ldr	r3, [pc, #28]	; (80074ec <USBD_SetConfig+0x150>)
 80074d0:	781b      	ldrb	r3, [r3, #0]
 80074d2:	4619      	mov	r1, r3
 80074d4:	6878      	ldr	r0, [r7, #4]
 80074d6:	f7fe ff92 	bl	80063fe <USBD_ClrClassConfig>
      ret = USBD_FAIL;
 80074da:	2303      	movs	r3, #3
 80074dc:	73fb      	strb	r3, [r7, #15]
      break;
 80074de:	bf00      	nop
  }

  return ret;
 80074e0:	7bfb      	ldrb	r3, [r7, #15]
}
 80074e2:	4618      	mov	r0, r3
 80074e4:	3710      	adds	r7, #16
 80074e6:	46bd      	mov	sp, r7
 80074e8:	bd80      	pop	{r7, pc}
 80074ea:	bf00      	nop
 80074ec:	2000079c 	.word	0x2000079c

080074f0 <USBD_GetConfig>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80074f0:	b580      	push	{r7, lr}
 80074f2:	b082      	sub	sp, #8
 80074f4:	af00      	add	r7, sp, #0
 80074f6:	6078      	str	r0, [r7, #4]
 80074f8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 80074fa:	683b      	ldr	r3, [r7, #0]
 80074fc:	88db      	ldrh	r3, [r3, #6]
 80074fe:	2b01      	cmp	r3, #1
 8007500:	d004      	beq.n	800750c <USBD_GetConfig+0x1c>
  {
    USBD_CtlError(pdev, req);
 8007502:	6839      	ldr	r1, [r7, #0]
 8007504:	6878      	ldr	r0, [r7, #4]
 8007506:	f000 f8e2 	bl	80076ce <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 800750a:	e023      	b.n	8007554 <USBD_GetConfig+0x64>
    switch (pdev->dev_state)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007512:	b2db      	uxtb	r3, r3
 8007514:	2b02      	cmp	r3, #2
 8007516:	dc02      	bgt.n	800751e <USBD_GetConfig+0x2e>
 8007518:	2b00      	cmp	r3, #0
 800751a:	dc03      	bgt.n	8007524 <USBD_GetConfig+0x34>
 800751c:	e015      	b.n	800754a <USBD_GetConfig+0x5a>
 800751e:	2b03      	cmp	r3, #3
 8007520:	d00b      	beq.n	800753a <USBD_GetConfig+0x4a>
 8007522:	e012      	b.n	800754a <USBD_GetConfig+0x5a>
        pdev->dev_default_config = 0U;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2200      	movs	r2, #0
 8007528:	609a      	str	r2, [r3, #8]
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_default_config, 1U);
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	3308      	adds	r3, #8
 800752e:	2201      	movs	r2, #1
 8007530:	4619      	mov	r1, r3
 8007532:	6878      	ldr	r0, [r7, #4]
 8007534:	f000 f93c 	bl	80077b0 <USBD_CtlSendData>
        break;
 8007538:	e00c      	b.n	8007554 <USBD_GetConfig+0x64>
        (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config, 1U);
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	3304      	adds	r3, #4
 800753e:	2201      	movs	r2, #1
 8007540:	4619      	mov	r1, r3
 8007542:	6878      	ldr	r0, [r7, #4]
 8007544:	f000 f934 	bl	80077b0 <USBD_CtlSendData>
        break;
 8007548:	e004      	b.n	8007554 <USBD_GetConfig+0x64>
        USBD_CtlError(pdev, req);
 800754a:	6839      	ldr	r1, [r7, #0]
 800754c:	6878      	ldr	r0, [r7, #4]
 800754e:	f000 f8be 	bl	80076ce <USBD_CtlError>
        break;
 8007552:	bf00      	nop
}
 8007554:	bf00      	nop
 8007556:	3708      	adds	r7, #8
 8007558:	46bd      	mov	sp, r7
 800755a:	bd80      	pop	{r7, pc}

0800755c <USBD_GetStatus>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b082      	sub	sp, #8
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
 8007564:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 800756c:	b2db      	uxtb	r3, r3
 800756e:	3b01      	subs	r3, #1
 8007570:	2b02      	cmp	r3, #2
 8007572:	d81e      	bhi.n	80075b2 <USBD_GetStatus+0x56>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8007574:	683b      	ldr	r3, [r7, #0]
 8007576:	88db      	ldrh	r3, [r3, #6]
 8007578:	2b02      	cmp	r3, #2
 800757a:	d004      	beq.n	8007586 <USBD_GetStatus+0x2a>
      {
        USBD_CtlError(pdev, req);
 800757c:	6839      	ldr	r1, [r7, #0]
 800757e:	6878      	ldr	r0, [r7, #4]
 8007580:	f000 f8a5 	bl	80076ce <USBD_CtlError>
        break;
 8007584:	e01a      	b.n	80075bc <USBD_GetStatus+0x60>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	2201      	movs	r2, #1
 800758a:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif /* USBD_SELF_POWERED */

      if (pdev->dev_remote_wakeup != 0U)
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	f8d3 32a4 	ldr.w	r3, [r3, #676]	; 0x2a4
 8007592:	2b00      	cmp	r3, #0
 8007594:	d005      	beq.n	80075a2 <USBD_GetStatus+0x46>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8007596:	687b      	ldr	r3, [r7, #4]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	f043 0202 	orr.w	r2, r3, #2
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	60da      	str	r2, [r3, #12]
      }

      (void)USBD_CtlSendData(pdev, (uint8_t *)&pdev->dev_config_status, 2U);
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	330c      	adds	r3, #12
 80075a6:	2202      	movs	r2, #2
 80075a8:	4619      	mov	r1, r3
 80075aa:	6878      	ldr	r0, [r7, #4]
 80075ac:	f000 f900 	bl	80077b0 <USBD_CtlSendData>
      break;
 80075b0:	e004      	b.n	80075bc <USBD_GetStatus+0x60>

    default:
      USBD_CtlError(pdev, req);
 80075b2:	6839      	ldr	r1, [r7, #0]
 80075b4:	6878      	ldr	r0, [r7, #4]
 80075b6:	f000 f88a 	bl	80076ce <USBD_CtlError>
      break;
 80075ba:	bf00      	nop
  }
}
 80075bc:	bf00      	nop
 80075be:	3708      	adds	r7, #8
 80075c0:	46bd      	mov	sp, r7
 80075c2:	bd80      	pop	{r7, pc}

080075c4 <USBD_SetFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_SetFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80075c4:	b580      	push	{r7, lr}
 80075c6:	b082      	sub	sp, #8
 80075c8:	af00      	add	r7, sp, #0
 80075ca:	6078      	str	r0, [r7, #4]
 80075cc:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	885b      	ldrh	r3, [r3, #2]
 80075d2:	2b01      	cmp	r3, #1
 80075d4:	d107      	bne.n	80075e6 <USBD_SetFeature+0x22>
  {
    pdev->dev_remote_wakeup = 1U;
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	2201      	movs	r2, #1
 80075da:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
    (void)USBD_CtlSendStatus(pdev);
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f000 f923 	bl	800782a <USBD_CtlSendStatus>
  }
  else
  {
    USBD_CtlError(pdev, req);
  }
}
 80075e4:	e013      	b.n	800760e <USBD_SetFeature+0x4a>
  else if (req->wValue == USB_FEATURE_TEST_MODE)
 80075e6:	683b      	ldr	r3, [r7, #0]
 80075e8:	885b      	ldrh	r3, [r3, #2]
 80075ea:	2b02      	cmp	r3, #2
 80075ec:	d10b      	bne.n	8007606 <USBD_SetFeature+0x42>
    pdev->dev_test_mode = req->wIndex >> 8;
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	889b      	ldrh	r3, [r3, #4]
 80075f2:	0a1b      	lsrs	r3, r3, #8
 80075f4:	b29b      	uxth	r3, r3
 80075f6:	b2da      	uxtb	r2, r3
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	f883 22a0 	strb.w	r2, [r3, #672]	; 0x2a0
    (void)USBD_CtlSendStatus(pdev);
 80075fe:	6878      	ldr	r0, [r7, #4]
 8007600:	f000 f913 	bl	800782a <USBD_CtlSendStatus>
}
 8007604:	e003      	b.n	800760e <USBD_SetFeature+0x4a>
    USBD_CtlError(pdev, req);
 8007606:	6839      	ldr	r1, [r7, #0]
 8007608:	6878      	ldr	r0, [r7, #4]
 800760a:	f000 f860 	bl	80076ce <USBD_CtlError>
}
 800760e:	bf00      	nop
 8007610:	3708      	adds	r7, #8
 8007612:	46bd      	mov	sp, r7
 8007614:	bd80      	pop	{r7, pc}

08007616 <USBD_ClrFeature>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval status
  */
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8007616:	b580      	push	{r7, lr}
 8007618:	b082      	sub	sp, #8
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	f893 329c 	ldrb.w	r3, [r3, #668]	; 0x29c
 8007626:	b2db      	uxtb	r3, r3
 8007628:	3b01      	subs	r3, #1
 800762a:	2b02      	cmp	r3, #2
 800762c:	d80b      	bhi.n	8007646 <USBD_ClrFeature+0x30>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 800762e:	683b      	ldr	r3, [r7, #0]
 8007630:	885b      	ldrh	r3, [r3, #2]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d10c      	bne.n	8007650 <USBD_ClrFeature+0x3a>
      {
        pdev->dev_remote_wakeup = 0U;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	2200      	movs	r2, #0
 800763a:	f8c3 22a4 	str.w	r2, [r3, #676]	; 0x2a4
        (void)USBD_CtlSendStatus(pdev);
 800763e:	6878      	ldr	r0, [r7, #4]
 8007640:	f000 f8f3 	bl	800782a <USBD_CtlSendStatus>
      }
      break;
 8007644:	e004      	b.n	8007650 <USBD_ClrFeature+0x3a>

    default:
      USBD_CtlError(pdev, req);
 8007646:	6839      	ldr	r1, [r7, #0]
 8007648:	6878      	ldr	r0, [r7, #4]
 800764a:	f000 f840 	bl	80076ce <USBD_CtlError>
      break;
 800764e:	e000      	b.n	8007652 <USBD_ClrFeature+0x3c>
      break;
 8007650:	bf00      	nop
  }
}
 8007652:	bf00      	nop
 8007654:	3708      	adds	r7, #8
 8007656:	46bd      	mov	sp, r7
 8007658:	bd80      	pop	{r7, pc}

0800765a <USBD_ParseSetupRequest>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 800765a:	b580      	push	{r7, lr}
 800765c:	b084      	sub	sp, #16
 800765e:	af00      	add	r7, sp, #0
 8007660:	6078      	str	r0, [r7, #4]
 8007662:	6039      	str	r1, [r7, #0]
  uint8_t *pbuff = pdata;
 8007664:	683b      	ldr	r3, [r7, #0]
 8007666:	60fb      	str	r3, [r7, #12]

  req->bmRequest = *(uint8_t *)(pbuff);
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	781a      	ldrb	r2, [r3, #0]
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	701a      	strb	r2, [r3, #0]

  pbuff++;
 8007670:	68fb      	ldr	r3, [r7, #12]
 8007672:	3301      	adds	r3, #1
 8007674:	60fb      	str	r3, [r7, #12]
  req->bRequest = *(uint8_t *)(pbuff);
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	781a      	ldrb	r2, [r3, #0]
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	705a      	strb	r2, [r3, #1]

  pbuff++;
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	3301      	adds	r3, #1
 8007682:	60fb      	str	r3, [r7, #12]
  req->wValue = SWAPBYTE(pbuff);
 8007684:	68f8      	ldr	r0, [r7, #12]
 8007686:	f7ff fa41 	bl	8006b0c <SWAPBYTE>
 800768a:	4603      	mov	r3, r0
 800768c:	461a      	mov	r2, r3
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	805a      	strh	r2, [r3, #2]

  pbuff++;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	3301      	adds	r3, #1
 8007696:	60fb      	str	r3, [r7, #12]
  pbuff++;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	3301      	adds	r3, #1
 800769c:	60fb      	str	r3, [r7, #12]
  req->wIndex = SWAPBYTE(pbuff);
 800769e:	68f8      	ldr	r0, [r7, #12]
 80076a0:	f7ff fa34 	bl	8006b0c <SWAPBYTE>
 80076a4:	4603      	mov	r3, r0
 80076a6:	461a      	mov	r2, r3
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	809a      	strh	r2, [r3, #4]

  pbuff++;
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	3301      	adds	r3, #1
 80076b0:	60fb      	str	r3, [r7, #12]
  pbuff++;
 80076b2:	68fb      	ldr	r3, [r7, #12]
 80076b4:	3301      	adds	r3, #1
 80076b6:	60fb      	str	r3, [r7, #12]
  req->wLength = SWAPBYTE(pbuff);
 80076b8:	68f8      	ldr	r0, [r7, #12]
 80076ba:	f7ff fa27 	bl	8006b0c <SWAPBYTE>
 80076be:	4603      	mov	r3, r0
 80076c0:	461a      	mov	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	80da      	strh	r2, [r3, #6]
}
 80076c6:	bf00      	nop
 80076c8:	3710      	adds	r7, #16
 80076ca:	46bd      	mov	sp, r7
 80076cc:	bd80      	pop	{r7, pc}

080076ce <USBD_CtlError>:
  * @param  pdev: device instance
  * @param  req: usb request
  * @retval None
  */
void USBD_CtlError(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 80076ce:	b580      	push	{r7, lr}
 80076d0:	b082      	sub	sp, #8
 80076d2:	af00      	add	r7, sp, #0
 80076d4:	6078      	str	r0, [r7, #4]
 80076d6:	6039      	str	r1, [r7, #0]
  UNUSED(req);

  (void)USBD_LL_StallEP(pdev, 0x80U);
 80076d8:	2180      	movs	r1, #128	; 0x80
 80076da:	6878      	ldr	r0, [r7, #4]
 80076dc:	f000 fbea 	bl	8007eb4 <USBD_LL_StallEP>
  (void)USBD_LL_StallEP(pdev, 0U);
 80076e0:	2100      	movs	r1, #0
 80076e2:	6878      	ldr	r0, [r7, #4]
 80076e4:	f000 fbe6 	bl	8007eb4 <USBD_LL_StallEP>
}
 80076e8:	bf00      	nop
 80076ea:	3708      	adds	r7, #8
 80076ec:	46bd      	mov	sp, r7
 80076ee:	bd80      	pop	{r7, pc}

080076f0 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	b086      	sub	sp, #24
 80076f4:	af00      	add	r7, sp, #0
 80076f6:	60f8      	str	r0, [r7, #12]
 80076f8:	60b9      	str	r1, [r7, #8]
 80076fa:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 80076fc:	2300      	movs	r3, #0
 80076fe:	75fb      	strb	r3, [r7, #23]
  uint8_t *pdesc;

  if (desc == NULL)
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	2b00      	cmp	r3, #0
 8007704:	d036      	beq.n	8007774 <USBD_GetString+0x84>
  {
    return;
  }

  pdesc = desc;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	613b      	str	r3, [r7, #16]
  *len = ((uint16_t)USBD_GetLen(pdesc) * 2U) + 2U;
 800770a:	6938      	ldr	r0, [r7, #16]
 800770c:	f000 f836 	bl	800777c <USBD_GetLen>
 8007710:	4603      	mov	r3, r0
 8007712:	3301      	adds	r3, #1
 8007714:	b29b      	uxth	r3, r3
 8007716:	005b      	lsls	r3, r3, #1
 8007718:	b29a      	uxth	r2, r3
 800771a:	687b      	ldr	r3, [r7, #4]
 800771c:	801a      	strh	r2, [r3, #0]

  unicode[idx] = *(uint8_t *)len;
 800771e:	7dfb      	ldrb	r3, [r7, #23]
 8007720:	68ba      	ldr	r2, [r7, #8]
 8007722:	4413      	add	r3, r2
 8007724:	687a      	ldr	r2, [r7, #4]
 8007726:	7812      	ldrb	r2, [r2, #0]
 8007728:	701a      	strb	r2, [r3, #0]
  idx++;
 800772a:	7dfb      	ldrb	r3, [r7, #23]
 800772c:	3301      	adds	r3, #1
 800772e:	75fb      	strb	r3, [r7, #23]
  unicode[idx] = USB_DESC_TYPE_STRING;
 8007730:	7dfb      	ldrb	r3, [r7, #23]
 8007732:	68ba      	ldr	r2, [r7, #8]
 8007734:	4413      	add	r3, r2
 8007736:	2203      	movs	r2, #3
 8007738:	701a      	strb	r2, [r3, #0]
  idx++;
 800773a:	7dfb      	ldrb	r3, [r7, #23]
 800773c:	3301      	adds	r3, #1
 800773e:	75fb      	strb	r3, [r7, #23]

  while (*pdesc != (uint8_t)'\0')
 8007740:	e013      	b.n	800776a <USBD_GetString+0x7a>
  {
    unicode[idx] = *pdesc;
 8007742:	7dfb      	ldrb	r3, [r7, #23]
 8007744:	68ba      	ldr	r2, [r7, #8]
 8007746:	4413      	add	r3, r2
 8007748:	693a      	ldr	r2, [r7, #16]
 800774a:	7812      	ldrb	r2, [r2, #0]
 800774c:	701a      	strb	r2, [r3, #0]
    pdesc++;
 800774e:	693b      	ldr	r3, [r7, #16]
 8007750:	3301      	adds	r3, #1
 8007752:	613b      	str	r3, [r7, #16]
    idx++;
 8007754:	7dfb      	ldrb	r3, [r7, #23]
 8007756:	3301      	adds	r3, #1
 8007758:	75fb      	strb	r3, [r7, #23]

    unicode[idx] = 0U;
 800775a:	7dfb      	ldrb	r3, [r7, #23]
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	4413      	add	r3, r2
 8007760:	2200      	movs	r2, #0
 8007762:	701a      	strb	r2, [r3, #0]
    idx++;
 8007764:	7dfb      	ldrb	r3, [r7, #23]
 8007766:	3301      	adds	r3, #1
 8007768:	75fb      	strb	r3, [r7, #23]
  while (*pdesc != (uint8_t)'\0')
 800776a:	693b      	ldr	r3, [r7, #16]
 800776c:	781b      	ldrb	r3, [r3, #0]
 800776e:	2b00      	cmp	r3, #0
 8007770:	d1e7      	bne.n	8007742 <USBD_GetString+0x52>
 8007772:	e000      	b.n	8007776 <USBD_GetString+0x86>
    return;
 8007774:	bf00      	nop
  }
}
 8007776:	3718      	adds	r7, #24
 8007778:	46bd      	mov	sp, r7
 800777a:	bd80      	pop	{r7, pc}

0800777c <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 800777c:	b480      	push	{r7}
 800777e:	b085      	sub	sp, #20
 8007780:	af00      	add	r7, sp, #0
 8007782:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8007784:	2300      	movs	r3, #0
 8007786:	73fb      	strb	r3, [r7, #15]
  uint8_t *pbuff = buf;
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	60bb      	str	r3, [r7, #8]

  while (*pbuff != (uint8_t)'\0')
 800778c:	e005      	b.n	800779a <USBD_GetLen+0x1e>
  {
    len++;
 800778e:	7bfb      	ldrb	r3, [r7, #15]
 8007790:	3301      	adds	r3, #1
 8007792:	73fb      	strb	r3, [r7, #15]
    pbuff++;
 8007794:	68bb      	ldr	r3, [r7, #8]
 8007796:	3301      	adds	r3, #1
 8007798:	60bb      	str	r3, [r7, #8]
  while (*pbuff != (uint8_t)'\0')
 800779a:	68bb      	ldr	r3, [r7, #8]
 800779c:	781b      	ldrb	r3, [r3, #0]
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d1f5      	bne.n	800778e <USBD_GetLen+0x12>
  }

  return len;
 80077a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80077a4:	4618      	mov	r0, r3
 80077a6:	3714      	adds	r7, #20
 80077a8:	46bd      	mov	sp, r7
 80077aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ae:	4770      	bx	lr

080077b0 <USBD_CtlSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint32_t len)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b084      	sub	sp, #16
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	60f8      	str	r0, [r7, #12]
 80077b8:	60b9      	str	r1, [r7, #8]
 80077ba:	607a      	str	r2, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 80077bc:	68fb      	ldr	r3, [r7, #12]
 80077be:	2202      	movs	r2, #2
 80077c0:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294
  pdev->ep_in[0].total_length = len;
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	619a      	str	r2, [r3, #24]

#ifdef USBD_AVOID_PACKET_SPLIT_MPS
  pdev->ep_in[0].rem_length = 0U;
#else
  pdev->ep_in[0].rem_length = len;
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	687a      	ldr	r2, [r7, #4]
 80077ce:	61da      	str	r2, [r3, #28]
#endif /* USBD_AVOID_PACKET_SPLIT_MPS */

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	68ba      	ldr	r2, [r7, #8]
 80077d4:	2100      	movs	r1, #0
 80077d6:	68f8      	ldr	r0, [r7, #12]
 80077d8:	f000 fbf5 	bl	8007fc6 <USBD_LL_Transmit>

  return USBD_OK;
 80077dc:	2300      	movs	r3, #0
}
 80077de:	4618      	mov	r0, r3
 80077e0:	3710      	adds	r7, #16
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}

080077e6 <USBD_CtlContinueSendData>:
  * @param  len: length of data to be sent
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint32_t len)
{
 80077e6:	b580      	push	{r7, lr}
 80077e8:	b084      	sub	sp, #16
 80077ea:	af00      	add	r7, sp, #0
 80077ec:	60f8      	str	r0, [r7, #12]
 80077ee:	60b9      	str	r1, [r7, #8]
 80077f0:	607a      	str	r2, [r7, #4]
  /* Start the next transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	2100      	movs	r1, #0
 80077f8:	68f8      	ldr	r0, [r7, #12]
 80077fa:	f000 fbe4 	bl	8007fc6 <USBD_LL_Transmit>

  return USBD_OK;
 80077fe:	2300      	movs	r3, #0
}
 8007800:	4618      	mov	r0, r3
 8007802:	3710      	adds	r7, #16
 8007804:	46bd      	mov	sp, r7
 8007806:	bd80      	pop	{r7, pc}

08007808 <USBD_CtlContinueRx>:
  * @param  len: length of data to be received
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint32_t len)
{
 8007808:	b580      	push	{r7, lr}
 800780a:	b084      	sub	sp, #16
 800780c:	af00      	add	r7, sp, #0
 800780e:	60f8      	str	r0, [r7, #12]
 8007810:	60b9      	str	r1, [r7, #8]
 8007812:	607a      	str	r2, [r7, #4]
  (void)USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	68ba      	ldr	r2, [r7, #8]
 8007818:	2100      	movs	r1, #0
 800781a:	68f8      	ldr	r0, [r7, #12]
 800781c:	f000 fbf4 	bl	8008008 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8007820:	2300      	movs	r3, #0
}
 8007822:	4618      	mov	r0, r3
 8007824:	3710      	adds	r7, #16
 8007826:	46bd      	mov	sp, r7
 8007828:	bd80      	pop	{r7, pc}

0800782a <USBD_CtlSendStatus>:
  *         send zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 800782a:	b580      	push	{r7, lr}
 800782c:	b082      	sub	sp, #8
 800782e:	af00      	add	r7, sp, #0
 8007830:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2204      	movs	r2, #4
 8007836:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 800783a:	2300      	movs	r3, #0
 800783c:	2200      	movs	r2, #0
 800783e:	2100      	movs	r1, #0
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fbc0 	bl	8007fc6 <USBD_LL_Transmit>

  return USBD_OK;
 8007846:	2300      	movs	r3, #0
}
 8007848:	4618      	mov	r0, r3
 800784a:	3708      	adds	r7, #8
 800784c:	46bd      	mov	sp, r7
 800784e:	bd80      	pop	{r7, pc}

08007850 <USBD_CtlReceiveStatus>:
  *         receive zero lzngth packet on the ctl pipe
  * @param  pdev: device instance
  * @retval status
  */
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 8007850:	b580      	push	{r7, lr}
 8007852:	b082      	sub	sp, #8
 8007854:	af00      	add	r7, sp, #0
 8007856:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2205      	movs	r2, #5
 800785c:	f8c3 2294 	str.w	r2, [r3, #660]	; 0x294

  /* Start the transfer */
  (void)USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8007860:	2300      	movs	r3, #0
 8007862:	2200      	movs	r2, #0
 8007864:	2100      	movs	r1, #0
 8007866:	6878      	ldr	r0, [r7, #4]
 8007868:	f000 fbce 	bl	8008008 <USBD_LL_PrepareReceive>

  return USBD_OK;
 800786c:	2300      	movs	r3, #0
}
 800786e:	4618      	mov	r0, r3
 8007870:	3708      	adds	r7, #8
 8007872:	46bd      	mov	sp, r7
 8007874:	bd80      	pop	{r7, pc}
	...

08007878 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 8007878:	b580      	push	{r7, lr}
 800787a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 800787c:	2200      	movs	r2, #0
 800787e:	490e      	ldr	r1, [pc, #56]	; (80078b8 <MX_USB_DEVICE_Init+0x40>)
 8007880:	480e      	ldr	r0, [pc, #56]	; (80078bc <MX_USB_DEVICE_Init+0x44>)
 8007882:	f7fe fd23 	bl	80062cc <USBD_Init>
 8007886:	4603      	mov	r3, r0
 8007888:	2b00      	cmp	r3, #0
 800788a:	d001      	beq.n	8007890 <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 800788c:	f7f9 fc1a 	bl	80010c4 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_HID) != USBD_OK)
 8007890:	490b      	ldr	r1, [pc, #44]	; (80078c0 <MX_USB_DEVICE_Init+0x48>)
 8007892:	480a      	ldr	r0, [pc, #40]	; (80078bc <MX_USB_DEVICE_Init+0x44>)
 8007894:	f7fe fd4a 	bl	800632c <USBD_RegisterClass>
 8007898:	4603      	mov	r3, r0
 800789a:	2b00      	cmp	r3, #0
 800789c:	d001      	beq.n	80078a2 <MX_USB_DEVICE_Init+0x2a>
  {
    Error_Handler();
 800789e:	f7f9 fc11 	bl	80010c4 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 80078a2:	4806      	ldr	r0, [pc, #24]	; (80078bc <MX_USB_DEVICE_Init+0x44>)
 80078a4:	f7fe fd78 	bl	8006398 <USBD_Start>
 80078a8:	4603      	mov	r3, r0
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d001      	beq.n	80078b2 <MX_USB_DEVICE_Init+0x3a>
  {
    Error_Handler();
 80078ae:	f7f9 fc09 	bl	80010c4 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 80078b2:	bf00      	nop
 80078b4:	bd80      	pop	{r7, pc}
 80078b6:	bf00      	nop
 80078b8:	20000494 	.word	0x20000494
 80078bc:	200007a0 	.word	0x200007a0
 80078c0:	200003e0 	.word	0x200003e0

080078c4 <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078c4:	b480      	push	{r7}
 80078c6:	b083      	sub	sp, #12
 80078c8:	af00      	add	r7, sp, #0
 80078ca:	4603      	mov	r3, r0
 80078cc:	6039      	str	r1, [r7, #0]
 80078ce:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 80078d0:	683b      	ldr	r3, [r7, #0]
 80078d2:	2212      	movs	r2, #18
 80078d4:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 80078d6:	4b03      	ldr	r3, [pc, #12]	; (80078e4 <USBD_FS_DeviceDescriptor+0x20>)
}
 80078d8:	4618      	mov	r0, r3
 80078da:	370c      	adds	r7, #12
 80078dc:	46bd      	mov	sp, r7
 80078de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078e2:	4770      	bx	lr
 80078e4:	200004b0 	.word	0x200004b0

080078e8 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80078e8:	b480      	push	{r7}
 80078ea:	b083      	sub	sp, #12
 80078ec:	af00      	add	r7, sp, #0
 80078ee:	4603      	mov	r3, r0
 80078f0:	6039      	str	r1, [r7, #0]
 80078f2:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 80078f4:	683b      	ldr	r3, [r7, #0]
 80078f6:	2204      	movs	r2, #4
 80078f8:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 80078fa:	4b03      	ldr	r3, [pc, #12]	; (8007908 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	370c      	adds	r7, #12
 8007900:	46bd      	mov	sp, r7
 8007902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007906:	4770      	bx	lr
 8007908:	200004c4 	.word	0x200004c4

0800790c <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 800790c:	b580      	push	{r7, lr}
 800790e:	b082      	sub	sp, #8
 8007910:	af00      	add	r7, sp, #0
 8007912:	4603      	mov	r3, r0
 8007914:	6039      	str	r1, [r7, #0]
 8007916:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 8007918:	79fb      	ldrb	r3, [r7, #7]
 800791a:	2b00      	cmp	r3, #0
 800791c:	d105      	bne.n	800792a <USBD_FS_ProductStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800791e:	683a      	ldr	r2, [r7, #0]
 8007920:	4907      	ldr	r1, [pc, #28]	; (8007940 <USBD_FS_ProductStrDescriptor+0x34>)
 8007922:	4808      	ldr	r0, [pc, #32]	; (8007944 <USBD_FS_ProductStrDescriptor+0x38>)
 8007924:	f7ff fee4 	bl	80076f0 <USBD_GetString>
 8007928:	e004      	b.n	8007934 <USBD_FS_ProductStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 800792a:	683a      	ldr	r2, [r7, #0]
 800792c:	4904      	ldr	r1, [pc, #16]	; (8007940 <USBD_FS_ProductStrDescriptor+0x34>)
 800792e:	4805      	ldr	r0, [pc, #20]	; (8007944 <USBD_FS_ProductStrDescriptor+0x38>)
 8007930:	f7ff fede 	bl	80076f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 8007934:	4b02      	ldr	r3, [pc, #8]	; (8007940 <USBD_FS_ProductStrDescriptor+0x34>)
}
 8007936:	4618      	mov	r0, r3
 8007938:	3708      	adds	r7, #8
 800793a:	46bd      	mov	sp, r7
 800793c:	bd80      	pop	{r7, pc}
 800793e:	bf00      	nop
 8007940:	20000a7c 	.word	0x20000a7c
 8007944:	08008154 	.word	0x08008154

08007948 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007948:	b580      	push	{r7, lr}
 800794a:	b082      	sub	sp, #8
 800794c:	af00      	add	r7, sp, #0
 800794e:	4603      	mov	r3, r0
 8007950:	6039      	str	r1, [r7, #0]
 8007952:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 8007954:	683a      	ldr	r2, [r7, #0]
 8007956:	4904      	ldr	r1, [pc, #16]	; (8007968 <USBD_FS_ManufacturerStrDescriptor+0x20>)
 8007958:	4804      	ldr	r0, [pc, #16]	; (800796c <USBD_FS_ManufacturerStrDescriptor+0x24>)
 800795a:	f7ff fec9 	bl	80076f0 <USBD_GetString>
  return USBD_StrDesc;
 800795e:	4b02      	ldr	r3, [pc, #8]	; (8007968 <USBD_FS_ManufacturerStrDescriptor+0x20>)
}
 8007960:	4618      	mov	r0, r3
 8007962:	3708      	adds	r7, #8
 8007964:	46bd      	mov	sp, r7
 8007966:	bd80      	pop	{r7, pc}
 8007968:	20000a7c 	.word	0x20000a7c
 800796c:	0800816c 	.word	0x0800816c

08007970 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007970:	b580      	push	{r7, lr}
 8007972:	b082      	sub	sp, #8
 8007974:	af00      	add	r7, sp, #0
 8007976:	4603      	mov	r3, r0
 8007978:	6039      	str	r1, [r7, #0]
 800797a:	71fb      	strb	r3, [r7, #7]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 800797c:	683b      	ldr	r3, [r7, #0]
 800797e:	221a      	movs	r2, #26
 8007980:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 8007982:	f000 f843 	bl	8007a0c <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 8007986:	4b02      	ldr	r3, [pc, #8]	; (8007990 <USBD_FS_SerialStrDescriptor+0x20>)
}
 8007988:	4618      	mov	r0, r3
 800798a:	3708      	adds	r7, #8
 800798c:	46bd      	mov	sp, r7
 800798e:	bd80      	pop	{r7, pc}
 8007990:	200004c8 	.word	0x200004c8

08007994 <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8007994:	b580      	push	{r7, lr}
 8007996:	b082      	sub	sp, #8
 8007998:	af00      	add	r7, sp, #0
 800799a:	4603      	mov	r3, r0
 800799c:	6039      	str	r1, [r7, #0]
 800799e:	71fb      	strb	r3, [r7, #7]
  if(speed == USBD_SPEED_HIGH)
 80079a0:	79fb      	ldrb	r3, [r7, #7]
 80079a2:	2b00      	cmp	r3, #0
 80079a4:	d105      	bne.n	80079b2 <USBD_FS_ConfigStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079a6:	683a      	ldr	r2, [r7, #0]
 80079a8:	4907      	ldr	r1, [pc, #28]	; (80079c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80079aa:	4808      	ldr	r0, [pc, #32]	; (80079cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80079ac:	f7ff fea0 	bl	80076f0 <USBD_GetString>
 80079b0:	e004      	b.n	80079bc <USBD_FS_ConfigStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 80079b2:	683a      	ldr	r2, [r7, #0]
 80079b4:	4904      	ldr	r1, [pc, #16]	; (80079c8 <USBD_FS_ConfigStrDescriptor+0x34>)
 80079b6:	4805      	ldr	r0, [pc, #20]	; (80079cc <USBD_FS_ConfigStrDescriptor+0x38>)
 80079b8:	f7ff fe9a 	bl	80076f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079bc:	4b02      	ldr	r3, [pc, #8]	; (80079c8 <USBD_FS_ConfigStrDescriptor+0x34>)
}
 80079be:	4618      	mov	r0, r3
 80079c0:	3708      	adds	r7, #8
 80079c2:	46bd      	mov	sp, r7
 80079c4:	bd80      	pop	{r7, pc}
 80079c6:	bf00      	nop
 80079c8:	20000a7c 	.word	0x20000a7c
 80079cc:	08008180 	.word	0x08008180

080079d0 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	4603      	mov	r3, r0
 80079d8:	6039      	str	r1, [r7, #0]
 80079da:	71fb      	strb	r3, [r7, #7]
  if(speed == 0)
 80079dc:	79fb      	ldrb	r3, [r7, #7]
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d105      	bne.n	80079ee <USBD_FS_InterfaceStrDescriptor+0x1e>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079e2:	683a      	ldr	r2, [r7, #0]
 80079e4:	4907      	ldr	r1, [pc, #28]	; (8007a04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079e6:	4808      	ldr	r0, [pc, #32]	; (8007a08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079e8:	f7ff fe82 	bl	80076f0 <USBD_GetString>
 80079ec:	e004      	b.n	80079f8 <USBD_FS_InterfaceStrDescriptor+0x28>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 80079ee:	683a      	ldr	r2, [r7, #0]
 80079f0:	4904      	ldr	r1, [pc, #16]	; (8007a04 <USBD_FS_InterfaceStrDescriptor+0x34>)
 80079f2:	4805      	ldr	r0, [pc, #20]	; (8007a08 <USBD_FS_InterfaceStrDescriptor+0x38>)
 80079f4:	f7ff fe7c 	bl	80076f0 <USBD_GetString>
  }
  return USBD_StrDesc;
 80079f8:	4b02      	ldr	r3, [pc, #8]	; (8007a04 <USBD_FS_InterfaceStrDescriptor+0x34>)
}
 80079fa:	4618      	mov	r0, r3
 80079fc:	3708      	adds	r7, #8
 80079fe:	46bd      	mov	sp, r7
 8007a00:	bd80      	pop	{r7, pc}
 8007a02:	bf00      	nop
 8007a04:	20000a7c 	.word	0x20000a7c
 8007a08:	0800818c 	.word	0x0800818c

08007a0c <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8007a0c:	b580      	push	{r7, lr}
 8007a0e:	b084      	sub	sp, #16
 8007a10:	af00      	add	r7, sp, #0
  uint32_t deviceserial0, deviceserial1, deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 8007a12:	4b0f      	ldr	r3, [pc, #60]	; (8007a50 <Get_SerialNum+0x44>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8007a18:	4b0e      	ldr	r3, [pc, #56]	; (8007a54 <Get_SerialNum+0x48>)
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8007a1e:	4b0e      	ldr	r3, [pc, #56]	; (8007a58 <Get_SerialNum+0x4c>)
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 8007a24:	68fa      	ldr	r2, [r7, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	4413      	add	r3, r2
 8007a2a:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	2b00      	cmp	r3, #0
 8007a30:	d009      	beq.n	8007a46 <Get_SerialNum+0x3a>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 8007a32:	2208      	movs	r2, #8
 8007a34:	4909      	ldr	r1, [pc, #36]	; (8007a5c <Get_SerialNum+0x50>)
 8007a36:	68f8      	ldr	r0, [r7, #12]
 8007a38:	f000 f814 	bl	8007a64 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 8007a3c:	2204      	movs	r2, #4
 8007a3e:	4908      	ldr	r1, [pc, #32]	; (8007a60 <Get_SerialNum+0x54>)
 8007a40:	68b8      	ldr	r0, [r7, #8]
 8007a42:	f000 f80f 	bl	8007a64 <IntToUnicode>
  }
}
 8007a46:	bf00      	nop
 8007a48:	3710      	adds	r7, #16
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	bd80      	pop	{r7, pc}
 8007a4e:	bf00      	nop
 8007a50:	1fff7a10 	.word	0x1fff7a10
 8007a54:	1fff7a14 	.word	0x1fff7a14
 8007a58:	1fff7a18 	.word	0x1fff7a18
 8007a5c:	200004ca 	.word	0x200004ca
 8007a60:	200004da 	.word	0x200004da

08007a64 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 8007a64:	b480      	push	{r7}
 8007a66:	b087      	sub	sp, #28
 8007a68:	af00      	add	r7, sp, #0
 8007a6a:	60f8      	str	r0, [r7, #12]
 8007a6c:	60b9      	str	r1, [r7, #8]
 8007a6e:	4613      	mov	r3, r2
 8007a70:	71fb      	strb	r3, [r7, #7]
  uint8_t idx = 0;
 8007a72:	2300      	movs	r3, #0
 8007a74:	75fb      	strb	r3, [r7, #23]

  for (idx = 0; idx < len; idx++)
 8007a76:	2300      	movs	r3, #0
 8007a78:	75fb      	strb	r3, [r7, #23]
 8007a7a:	e027      	b.n	8007acc <IntToUnicode+0x68>
  {
    if (((value >> 28)) < 0xA)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	0f1b      	lsrs	r3, r3, #28
 8007a80:	2b09      	cmp	r3, #9
 8007a82:	d80b      	bhi.n	8007a9c <IntToUnicode+0x38>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	0f1b      	lsrs	r3, r3, #28
 8007a88:	b2da      	uxtb	r2, r3
 8007a8a:	7dfb      	ldrb	r3, [r7, #23]
 8007a8c:	005b      	lsls	r3, r3, #1
 8007a8e:	4619      	mov	r1, r3
 8007a90:	68bb      	ldr	r3, [r7, #8]
 8007a92:	440b      	add	r3, r1
 8007a94:	3230      	adds	r2, #48	; 0x30
 8007a96:	b2d2      	uxtb	r2, r2
 8007a98:	701a      	strb	r2, [r3, #0]
 8007a9a:	e00a      	b.n	8007ab2 <IntToUnicode+0x4e>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	0f1b      	lsrs	r3, r3, #28
 8007aa0:	b2da      	uxtb	r2, r3
 8007aa2:	7dfb      	ldrb	r3, [r7, #23]
 8007aa4:	005b      	lsls	r3, r3, #1
 8007aa6:	4619      	mov	r1, r3
 8007aa8:	68bb      	ldr	r3, [r7, #8]
 8007aaa:	440b      	add	r3, r1
 8007aac:	3237      	adds	r2, #55	; 0x37
 8007aae:	b2d2      	uxtb	r2, r2
 8007ab0:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 8007ab2:	68fb      	ldr	r3, [r7, #12]
 8007ab4:	011b      	lsls	r3, r3, #4
 8007ab6:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8007ab8:	7dfb      	ldrb	r3, [r7, #23]
 8007aba:	005b      	lsls	r3, r3, #1
 8007abc:	3301      	adds	r3, #1
 8007abe:	68ba      	ldr	r2, [r7, #8]
 8007ac0:	4413      	add	r3, r2
 8007ac2:	2200      	movs	r2, #0
 8007ac4:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8007ac6:	7dfb      	ldrb	r3, [r7, #23]
 8007ac8:	3301      	adds	r3, #1
 8007aca:	75fb      	strb	r3, [r7, #23]
 8007acc:	7dfa      	ldrb	r2, [r7, #23]
 8007ace:	79fb      	ldrb	r3, [r7, #7]
 8007ad0:	429a      	cmp	r2, r3
 8007ad2:	d3d3      	bcc.n	8007a7c <IntToUnicode+0x18>
  }
}
 8007ad4:	bf00      	nop
 8007ad6:	bf00      	nop
 8007ad8:	371c      	adds	r7, #28
 8007ada:	46bd      	mov	sp, r7
 8007adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ae0:	4770      	bx	lr
	...

08007ae4 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8007ae4:	b580      	push	{r7, lr}
 8007ae6:	b08a      	sub	sp, #40	; 0x28
 8007ae8:	af00      	add	r7, sp, #0
 8007aea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007aec:	f107 0314 	add.w	r3, r7, #20
 8007af0:	2200      	movs	r2, #0
 8007af2:	601a      	str	r2, [r3, #0]
 8007af4:	605a      	str	r2, [r3, #4]
 8007af6:	609a      	str	r2, [r3, #8]
 8007af8:	60da      	str	r2, [r3, #12]
 8007afa:	611a      	str	r2, [r3, #16]
  if(pcdHandle->Instance==USB_OTG_FS)
 8007afc:	687b      	ldr	r3, [r7, #4]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8007b04:	d13a      	bne.n	8007b7c <HAL_PCD_MspInit+0x98>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007b06:	2300      	movs	r3, #0
 8007b08:	613b      	str	r3, [r7, #16]
 8007b0a:	4b1e      	ldr	r3, [pc, #120]	; (8007b84 <HAL_PCD_MspInit+0xa0>)
 8007b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b0e:	4a1d      	ldr	r2, [pc, #116]	; (8007b84 <HAL_PCD_MspInit+0xa0>)
 8007b10:	f043 0301 	orr.w	r3, r3, #1
 8007b14:	6313      	str	r3, [r2, #48]	; 0x30
 8007b16:	4b1b      	ldr	r3, [pc, #108]	; (8007b84 <HAL_PCD_MspInit+0xa0>)
 8007b18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b1a:	f003 0301 	and.w	r3, r3, #1
 8007b1e:	613b      	str	r3, [r7, #16]
 8007b20:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8007b22:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8007b26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007b28:	2302      	movs	r3, #2
 8007b2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007b2c:	2300      	movs	r3, #0
 8007b2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007b30:	2303      	movs	r3, #3
 8007b32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8007b34:	230a      	movs	r3, #10
 8007b36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007b38:	f107 0314 	add.w	r3, r7, #20
 8007b3c:	4619      	mov	r1, r3
 8007b3e:	4812      	ldr	r0, [pc, #72]	; (8007b88 <HAL_PCD_MspInit+0xa4>)
 8007b40:	f7fa fcea 	bl	8002518 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8007b44:	4b0f      	ldr	r3, [pc, #60]	; (8007b84 <HAL_PCD_MspInit+0xa0>)
 8007b46:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007b48:	4a0e      	ldr	r2, [pc, #56]	; (8007b84 <HAL_PCD_MspInit+0xa0>)
 8007b4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007b4e:	6353      	str	r3, [r2, #52]	; 0x34
 8007b50:	2300      	movs	r3, #0
 8007b52:	60fb      	str	r3, [r7, #12]
 8007b54:	4b0b      	ldr	r3, [pc, #44]	; (8007b84 <HAL_PCD_MspInit+0xa0>)
 8007b56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b58:	4a0a      	ldr	r2, [pc, #40]	; (8007b84 <HAL_PCD_MspInit+0xa0>)
 8007b5a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007b5e:	6453      	str	r3, [r2, #68]	; 0x44
 8007b60:	4b08      	ldr	r3, [pc, #32]	; (8007b84 <HAL_PCD_MspInit+0xa0>)
 8007b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b64:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007b68:	60fb      	str	r3, [r7, #12]
 8007b6a:	68fb      	ldr	r3, [r7, #12]

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 8007b6c:	2200      	movs	r2, #0
 8007b6e:	2100      	movs	r1, #0
 8007b70:	2043      	movs	r0, #67	; 0x43
 8007b72:	f7fa f92a 	bl	8001dca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8007b76:	2043      	movs	r0, #67	; 0x43
 8007b78:	f7fa f943 	bl	8001e02 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 8007b7c:	bf00      	nop
 8007b7e:	3728      	adds	r7, #40	; 0x28
 8007b80:	46bd      	mov	sp, r7
 8007b82:	bd80      	pop	{r7, pc}
 8007b84:	40023800 	.word	0x40023800
 8007b88:	40020000 	.word	0x40020000

08007b8c <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007b8c:	b580      	push	{r7, lr}
 8007b8e:	b082      	sub	sp, #8
 8007b90:	af00      	add	r7, sp, #0
 8007b92:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	f8d3 2508 	ldr.w	r2, [r3, #1288]	; 0x508
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	f203 43c4 	addw	r3, r3, #1220	; 0x4c4
 8007ba0:	4619      	mov	r1, r3
 8007ba2:	4610      	mov	r0, r2
 8007ba4:	f7fe fc45 	bl	8006432 <USBD_LL_SetupStage>
}
 8007ba8:	bf00      	nop
 8007baa:	3708      	adds	r7, #8
 8007bac:	46bd      	mov	sp, r7
 8007bae:	bd80      	pop	{r7, pc}

08007bb0 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007bb0:	b580      	push	{r7, lr}
 8007bb2:	b082      	sub	sp, #8
 8007bb4:	af00      	add	r7, sp, #0
 8007bb6:	6078      	str	r0, [r7, #4]
 8007bb8:	460b      	mov	r3, r1
 8007bba:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007bc2:	78fa      	ldrb	r2, [r7, #3]
 8007bc4:	6879      	ldr	r1, [r7, #4]
 8007bc6:	4613      	mov	r3, r2
 8007bc8:	00db      	lsls	r3, r3, #3
 8007bca:	4413      	add	r3, r2
 8007bcc:	009b      	lsls	r3, r3, #2
 8007bce:	440b      	add	r3, r1
 8007bd0:	f503 7323 	add.w	r3, r3, #652	; 0x28c
 8007bd4:	681a      	ldr	r2, [r3, #0]
 8007bd6:	78fb      	ldrb	r3, [r7, #3]
 8007bd8:	4619      	mov	r1, r3
 8007bda:	f7fe fc7f 	bl	80064dc <USBD_LL_DataOutStage>
}
 8007bde:	bf00      	nop
 8007be0:	3708      	adds	r7, #8
 8007be2:	46bd      	mov	sp, r7
 8007be4:	bd80      	pop	{r7, pc}

08007be6 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007be6:	b580      	push	{r7, lr}
 8007be8:	b082      	sub	sp, #8
 8007bea:	af00      	add	r7, sp, #0
 8007bec:	6078      	str	r0, [r7, #4]
 8007bee:	460b      	mov	r3, r1
 8007bf0:	70fb      	strb	r3, [r7, #3]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	f8d3 0508 	ldr.w	r0, [r3, #1288]	; 0x508
 8007bf8:	78fa      	ldrb	r2, [r7, #3]
 8007bfa:	6879      	ldr	r1, [r7, #4]
 8007bfc:	4613      	mov	r3, r2
 8007bfe:	00db      	lsls	r3, r3, #3
 8007c00:	4413      	add	r3, r2
 8007c02:	009b      	lsls	r3, r3, #2
 8007c04:	440b      	add	r3, r1
 8007c06:	334c      	adds	r3, #76	; 0x4c
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	78fb      	ldrb	r3, [r7, #3]
 8007c0c:	4619      	mov	r1, r3
 8007c0e:	f7fe fd18 	bl	8006642 <USBD_LL_DataInStage>
}
 8007c12:	bf00      	nop
 8007c14:	3708      	adds	r7, #8
 8007c16:	46bd      	mov	sp, r7
 8007c18:	bd80      	pop	{r7, pc}

08007c1a <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c1a:	b580      	push	{r7, lr}
 8007c1c:	b082      	sub	sp, #8
 8007c1e:	af00      	add	r7, sp, #0
 8007c20:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c28:	4618      	mov	r0, r3
 8007c2a:	f7fe fe4c 	bl	80068c6 <USBD_LL_SOF>
}
 8007c2e:	bf00      	nop
 8007c30:	3708      	adds	r7, #8
 8007c32:	46bd      	mov	sp, r7
 8007c34:	bd80      	pop	{r7, pc}

08007c36 <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c36:	b580      	push	{r7, lr}
 8007c38:	b084      	sub	sp, #16
 8007c3a:	af00      	add	r7, sp, #0
 8007c3c:	6078      	str	r0, [r7, #4]
   USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8007c3e:	2301      	movs	r3, #1
 8007c40:	73fb      	strb	r3, [r7, #15]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	68db      	ldr	r3, [r3, #12]
 8007c46:	2b02      	cmp	r3, #2
 8007c48:	d001      	beq.n	8007c4e <HAL_PCD_ResetCallback+0x18>
  {
    Error_Handler();
 8007c4a:	f7f9 fa3b 	bl	80010c4 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c54:	7bfa      	ldrb	r2, [r7, #15]
 8007c56:	4611      	mov	r1, r2
 8007c58:	4618      	mov	r0, r3
 8007c5a:	f7fe fdf6 	bl	800684a <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 8007c5e:	687b      	ldr	r3, [r7, #4]
 8007c60:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c64:	4618      	mov	r0, r3
 8007c66:	f7fe fd9e 	bl	80067a6 <USBD_LL_Reset>
}
 8007c6a:	bf00      	nop
 8007c6c:	3710      	adds	r7, #16
 8007c6e:	46bd      	mov	sp, r7
 8007c70:	bd80      	pop	{r7, pc}
	...

08007c74 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007c82:	4618      	mov	r0, r3
 8007c84:	f7fe fdf1 	bl	800686a <USBD_LL_Suspend>
  __HAL_PCD_GATE_PHYCLOCK(hpcd);
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	681b      	ldr	r3, [r3, #0]
 8007c8c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	687a      	ldr	r2, [r7, #4]
 8007c94:	6812      	ldr	r2, [r2, #0]
 8007c96:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8007c9a:	f043 0301 	orr.w	r3, r3, #1
 8007c9e:	6013      	str	r3, [r2, #0]
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 8007ca0:	687b      	ldr	r3, [r7, #4]
 8007ca2:	6a1b      	ldr	r3, [r3, #32]
 8007ca4:	2b00      	cmp	r3, #0
 8007ca6:	d005      	beq.n	8007cb4 <HAL_PCD_SuspendCallback+0x40>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8007ca8:	4b04      	ldr	r3, [pc, #16]	; (8007cbc <HAL_PCD_SuspendCallback+0x48>)
 8007caa:	691b      	ldr	r3, [r3, #16]
 8007cac:	4a03      	ldr	r2, [pc, #12]	; (8007cbc <HAL_PCD_SuspendCallback+0x48>)
 8007cae:	f043 0306 	orr.w	r3, r3, #6
 8007cb2:	6113      	str	r3, [r2, #16]
  }
  /* USER CODE END 2 */
}
 8007cb4:	bf00      	nop
 8007cb6:	3708      	adds	r7, #8
 8007cb8:	46bd      	mov	sp, r7
 8007cba:	bd80      	pop	{r7, pc}
 8007cbc:	e000ed00 	.word	0xe000ed00

08007cc0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b082      	sub	sp, #8
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */

  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cce:	4618      	mov	r0, r3
 8007cd0:	f7fe fde1 	bl	8006896 <USBD_LL_Resume>
}
 8007cd4:	bf00      	nop
 8007cd6:	3708      	adds	r7, #8
 8007cd8:	46bd      	mov	sp, r7
 8007cda:	bd80      	pop	{r7, pc}

08007cdc <HAL_PCD_ISOOUTIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOOUTIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007cdc:	b580      	push	{r7, lr}
 8007cde:	b082      	sub	sp, #8
 8007ce0:	af00      	add	r7, sp, #0
 8007ce2:	6078      	str	r0, [r7, #4]
 8007ce4:	460b      	mov	r3, r1
 8007ce6:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoOUTIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007cee:	78fa      	ldrb	r2, [r7, #3]
 8007cf0:	4611      	mov	r1, r2
 8007cf2:	4618      	mov	r0, r3
 8007cf4:	f7fe fe39 	bl	800696a <USBD_LL_IsoOUTIncomplete>
}
 8007cf8:	bf00      	nop
 8007cfa:	3708      	adds	r7, #8
 8007cfc:	46bd      	mov	sp, r7
 8007cfe:	bd80      	pop	{r7, pc}

08007d00 <HAL_PCD_ISOINIncompleteCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_ISOINIncompleteCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d00:	b580      	push	{r7, lr}
 8007d02:	b082      	sub	sp, #8
 8007d04:	af00      	add	r7, sp, #0
 8007d06:	6078      	str	r0, [r7, #4]
 8007d08:	460b      	mov	r3, r1
 8007d0a:	70fb      	strb	r3, [r7, #3]
  USBD_LL_IsoINIncomplete((USBD_HandleTypeDef*)hpcd->pData, epnum);
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d12:	78fa      	ldrb	r2, [r7, #3]
 8007d14:	4611      	mov	r1, r2
 8007d16:	4618      	mov	r0, r3
 8007d18:	f7fe fdf5 	bl	8006906 <USBD_LL_IsoINIncomplete>
}
 8007d1c:	bf00      	nop
 8007d1e:	3708      	adds	r7, #8
 8007d20:	46bd      	mov	sp, r7
 8007d22:	bd80      	pop	{r7, pc}

08007d24 <HAL_PCD_ConnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ConnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d24:	b580      	push	{r7, lr}
 8007d26:	b082      	sub	sp, #8
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	6078      	str	r0, [r7, #4]
  USBD_LL_DevConnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d32:	4618      	mov	r0, r3
 8007d34:	f7fe fe4b 	bl	80069ce <USBD_LL_DevConnected>
}
 8007d38:	bf00      	nop
 8007d3a:	3708      	adds	r7, #8
 8007d3c:	46bd      	mov	sp, r7
 8007d3e:	bd80      	pop	{r7, pc}

08007d40 <HAL_PCD_DisconnectCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_DisconnectCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8007d40:	b580      	push	{r7, lr}
 8007d42:	b082      	sub	sp, #8
 8007d44:	af00      	add	r7, sp, #0
 8007d46:	6078      	str	r0, [r7, #4]
  USBD_LL_DevDisconnected((USBD_HandleTypeDef*)hpcd->pData);
 8007d48:	687b      	ldr	r3, [r7, #4]
 8007d4a:	f8d3 3508 	ldr.w	r3, [r3, #1288]	; 0x508
 8007d4e:	4618      	mov	r0, r3
 8007d50:	f7fe fe48 	bl	80069e4 <USBD_LL_DevDisconnected>
}
 8007d54:	bf00      	nop
 8007d56:	3708      	adds	r7, #8
 8007d58:	46bd      	mov	sp, r7
 8007d5a:	bd80      	pop	{r7, pc}

08007d5c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 8007d5c:	b580      	push	{r7, lr}
 8007d5e:	b082      	sub	sp, #8
 8007d60:	af00      	add	r7, sp, #0
 8007d62:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  if (pdev->id == DEVICE_FS) {
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	781b      	ldrb	r3, [r3, #0]
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	d13c      	bne.n	8007de6 <USBD_LL_Init+0x8a>
  /* Link the driver to the stack. */
  hpcd_USB_OTG_FS.pData = pdev;
 8007d6c:	4a20      	ldr	r2, [pc, #128]	; (8007df0 <USBD_LL_Init+0x94>)
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	f8c2 3508 	str.w	r3, [r2, #1288]	; 0x508
  pdev->pData = &hpcd_USB_OTG_FS;
 8007d74:	687b      	ldr	r3, [r7, #4]
 8007d76:	4a1e      	ldr	r2, [pc, #120]	; (8007df0 <USBD_LL_Init+0x94>)
 8007d78:	f8c3 22c8 	str.w	r2, [r3, #712]	; 0x2c8

  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8007d7c:	4b1c      	ldr	r3, [pc, #112]	; (8007df0 <USBD_LL_Init+0x94>)
 8007d7e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8007d82:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 4;
 8007d84:	4b1a      	ldr	r3, [pc, #104]	; (8007df0 <USBD_LL_Init+0x94>)
 8007d86:	2204      	movs	r2, #4
 8007d88:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8007d8a:	4b19      	ldr	r3, [pc, #100]	; (8007df0 <USBD_LL_Init+0x94>)
 8007d8c:	2202      	movs	r2, #2
 8007d8e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8007d90:	4b17      	ldr	r3, [pc, #92]	; (8007df0 <USBD_LL_Init+0x94>)
 8007d92:	2200      	movs	r2, #0
 8007d94:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8007d96:	4b16      	ldr	r3, [pc, #88]	; (8007df0 <USBD_LL_Init+0x94>)
 8007d98:	2202      	movs	r2, #2
 8007d9a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8007d9c:	4b14      	ldr	r3, [pc, #80]	; (8007df0 <USBD_LL_Init+0x94>)
 8007d9e:	2200      	movs	r2, #0
 8007da0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8007da2:	4b13      	ldr	r3, [pc, #76]	; (8007df0 <USBD_LL_Init+0x94>)
 8007da4:	2200      	movs	r2, #0
 8007da6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8007da8:	4b11      	ldr	r3, [pc, #68]	; (8007df0 <USBD_LL_Init+0x94>)
 8007daa:	2200      	movs	r2, #0
 8007dac:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = DISABLE;
 8007dae:	4b10      	ldr	r3, [pc, #64]	; (8007df0 <USBD_LL_Init+0x94>)
 8007db0:	2200      	movs	r2, #0
 8007db2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8007db4:	4b0e      	ldr	r3, [pc, #56]	; (8007df0 <USBD_LL_Init+0x94>)
 8007db6:	2200      	movs	r2, #0
 8007db8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8007dba:	480d      	ldr	r0, [pc, #52]	; (8007df0 <USBD_LL_Init+0x94>)
 8007dbc:	f7fa fd48 	bl	8002850 <HAL_PCD_Init>
 8007dc0:	4603      	mov	r3, r0
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d001      	beq.n	8007dca <USBD_LL_Init+0x6e>
  {
    Error_Handler( );
 8007dc6:	f7f9 f97d 	bl	80010c4 <Error_Handler>
  HAL_PCD_RegisterDataOutStageCallback(&hpcd_USB_OTG_FS, PCD_DataOutStageCallback);
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_OTG_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_OTG_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  HAL_PCDEx_SetRxFiFo(&hpcd_USB_OTG_FS, 0x80);
 8007dca:	2180      	movs	r1, #128	; 0x80
 8007dcc:	4808      	ldr	r0, [pc, #32]	; (8007df0 <USBD_LL_Init+0x94>)
 8007dce:	f7fb ff88 	bl	8003ce2 <HAL_PCDEx_SetRxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 0, 0x40);
 8007dd2:	2240      	movs	r2, #64	; 0x40
 8007dd4:	2100      	movs	r1, #0
 8007dd6:	4806      	ldr	r0, [pc, #24]	; (8007df0 <USBD_LL_Init+0x94>)
 8007dd8:	f7fb ff3c 	bl	8003c54 <HAL_PCDEx_SetTxFiFo>
  HAL_PCDEx_SetTxFiFo(&hpcd_USB_OTG_FS, 1, 0x80);
 8007ddc:	2280      	movs	r2, #128	; 0x80
 8007dde:	2101      	movs	r1, #1
 8007de0:	4803      	ldr	r0, [pc, #12]	; (8007df0 <USBD_LL_Init+0x94>)
 8007de2:	f7fb ff37 	bl	8003c54 <HAL_PCDEx_SetTxFiFo>
  }
  return USBD_OK;
 8007de6:	2300      	movs	r3, #0
}
 8007de8:	4618      	mov	r0, r3
 8007dea:	3708      	adds	r7, #8
 8007dec:	46bd      	mov	sp, r7
 8007dee:	bd80      	pop	{r7, pc}
 8007df0:	20000c7c 	.word	0x20000c7c

08007df4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 8007df4:	b580      	push	{r7, lr}
 8007df6:	b084      	sub	sp, #16
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007dfc:	2300      	movs	r3, #0
 8007dfe:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e00:	2300      	movs	r3, #0
 8007e02:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_Start(pdev->pData);
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e0a:	4618      	mov	r0, r3
 8007e0c:	f7fa fe3d 	bl	8002a8a <HAL_PCD_Start>
 8007e10:	4603      	mov	r3, r0
 8007e12:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e14:	7bfb      	ldrb	r3, [r7, #15]
 8007e16:	4618      	mov	r0, r3
 8007e18:	f000 f930 	bl	800807c <USBD_Get_USB_Status>
 8007e1c:	4603      	mov	r3, r0
 8007e1e:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e20:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e22:	4618      	mov	r0, r3
 8007e24:	3710      	adds	r7, #16
 8007e26:	46bd      	mov	sp, r7
 8007e28:	bd80      	pop	{r7, pc}

08007e2a <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 8007e2a:	b580      	push	{r7, lr}
 8007e2c:	b084      	sub	sp, #16
 8007e2e:	af00      	add	r7, sp, #0
 8007e30:	6078      	str	r0, [r7, #4]
 8007e32:	4608      	mov	r0, r1
 8007e34:	4611      	mov	r1, r2
 8007e36:	461a      	mov	r2, r3
 8007e38:	4603      	mov	r3, r0
 8007e3a:	70fb      	strb	r3, [r7, #3]
 8007e3c:	460b      	mov	r3, r1
 8007e3e:	70bb      	strb	r3, [r7, #2]
 8007e40:	4613      	mov	r3, r2
 8007e42:	803b      	strh	r3, [r7, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e44:	2300      	movs	r3, #0
 8007e46:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007e52:	78bb      	ldrb	r3, [r7, #2]
 8007e54:	883a      	ldrh	r2, [r7, #0]
 8007e56:	78f9      	ldrb	r1, [r7, #3]
 8007e58:	f7fb fb0e 	bl	8003478 <HAL_PCD_EP_Open>
 8007e5c:	4603      	mov	r3, r0
 8007e5e:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e60:	7bfb      	ldrb	r3, [r7, #15]
 8007e62:	4618      	mov	r0, r3
 8007e64:	f000 f90a 	bl	800807c <USBD_Get_USB_Status>
 8007e68:	4603      	mov	r3, r0
 8007e6a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007e6c:	7bbb      	ldrb	r3, [r7, #14]
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}

08007e76 <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007e76:	b580      	push	{r7, lr}
 8007e78:	b084      	sub	sp, #16
 8007e7a:	af00      	add	r7, sp, #0
 8007e7c:	6078      	str	r0, [r7, #4]
 8007e7e:	460b      	mov	r3, r1
 8007e80:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007e82:	2300      	movs	r3, #0
 8007e84:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007e86:	2300      	movs	r3, #0
 8007e88:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 8007e8a:	687b      	ldr	r3, [r7, #4]
 8007e8c:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007e90:	78fa      	ldrb	r2, [r7, #3]
 8007e92:	4611      	mov	r1, r2
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fb fb57 	bl	8003548 <HAL_PCD_EP_Close>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	4618      	mov	r0, r3
 8007ea2:	f000 f8eb 	bl	800807c <USBD_Get_USB_Status>
 8007ea6:	4603      	mov	r3, r0
 8007ea8:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007eaa:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eac:	4618      	mov	r0, r3
 8007eae:	3710      	adds	r7, #16
 8007eb0:	46bd      	mov	sp, r7
 8007eb2:	bd80      	pop	{r7, pc}

08007eb4 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007eb4:	b580      	push	{r7, lr}
 8007eb6:	b084      	sub	sp, #16
 8007eb8:	af00      	add	r7, sp, #0
 8007eba:	6078      	str	r0, [r7, #4]
 8007ebc:	460b      	mov	r3, r1
 8007ebe:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007ec0:	2300      	movs	r3, #0
 8007ec2:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007ec4:	2300      	movs	r3, #0
 8007ec6:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007ece:	78fa      	ldrb	r2, [r7, #3]
 8007ed0:	4611      	mov	r1, r2
 8007ed2:	4618      	mov	r0, r3
 8007ed4:	f7fb fc17 	bl	8003706 <HAL_PCD_EP_SetStall>
 8007ed8:	4603      	mov	r3, r0
 8007eda:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007edc:	7bfb      	ldrb	r3, [r7, #15]
 8007ede:	4618      	mov	r0, r3
 8007ee0:	f000 f8cc 	bl	800807c <USBD_Get_USB_Status>
 8007ee4:	4603      	mov	r3, r0
 8007ee6:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007ee8:	7bbb      	ldrb	r3, [r7, #14]
}
 8007eea:	4618      	mov	r0, r3
 8007eec:	3710      	adds	r7, #16
 8007eee:	46bd      	mov	sp, r7
 8007ef0:	bd80      	pop	{r7, pc}

08007ef2 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007ef2:	b580      	push	{r7, lr}
 8007ef4:	b084      	sub	sp, #16
 8007ef6:	af00      	add	r7, sp, #0
 8007ef8:	6078      	str	r0, [r7, #4]
 8007efa:	460b      	mov	r3, r1
 8007efc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007efe:	2300      	movs	r3, #0
 8007f00:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f02:	2300      	movs	r3, #0
 8007f04:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8007f06:	687b      	ldr	r3, [r7, #4]
 8007f08:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f0c:	78fa      	ldrb	r2, [r7, #3]
 8007f0e:	4611      	mov	r1, r2
 8007f10:	4618      	mov	r0, r3
 8007f12:	f7fb fc5c 	bl	80037ce <HAL_PCD_EP_ClrStall>
 8007f16:	4603      	mov	r3, r0
 8007f18:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007f1a:	7bfb      	ldrb	r3, [r7, #15]
 8007f1c:	4618      	mov	r0, r3
 8007f1e:	f000 f8ad 	bl	800807c <USBD_Get_USB_Status>
 8007f22:	4603      	mov	r3, r0
 8007f24:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007f26:	7bbb      	ldrb	r3, [r7, #14]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3710      	adds	r7, #16
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8007f30:	b480      	push	{r7}
 8007f32:	b085      	sub	sp, #20
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	460b      	mov	r3, r1
 8007f3a:	70fb      	strb	r3, [r7, #3]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 8007f3c:	687b      	ldr	r3, [r7, #4]
 8007f3e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007f42:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 8007f44:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	da0b      	bge.n	8007f64 <USBD_LL_IsStallEP+0x34>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 8007f4c:	78fb      	ldrb	r3, [r7, #3]
 8007f4e:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f52:	68f9      	ldr	r1, [r7, #12]
 8007f54:	4613      	mov	r3, r2
 8007f56:	00db      	lsls	r3, r3, #3
 8007f58:	4413      	add	r3, r2
 8007f5a:	009b      	lsls	r3, r3, #2
 8007f5c:	440b      	add	r3, r1
 8007f5e:	333e      	adds	r3, #62	; 0x3e
 8007f60:	781b      	ldrb	r3, [r3, #0]
 8007f62:	e00b      	b.n	8007f7c <USBD_LL_IsStallEP+0x4c>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 8007f64:	78fb      	ldrb	r3, [r7, #3]
 8007f66:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 8007f6a:	68f9      	ldr	r1, [r7, #12]
 8007f6c:	4613      	mov	r3, r2
 8007f6e:	00db      	lsls	r3, r3, #3
 8007f70:	4413      	add	r3, r2
 8007f72:	009b      	lsls	r3, r3, #2
 8007f74:	440b      	add	r3, r1
 8007f76:	f203 237e 	addw	r3, r3, #638	; 0x27e
 8007f7a:	781b      	ldrb	r3, [r3, #0]
  }
}
 8007f7c:	4618      	mov	r0, r3
 8007f7e:	3714      	adds	r7, #20
 8007f80:	46bd      	mov	sp, r7
 8007f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f86:	4770      	bx	lr

08007f88 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8007f88:	b580      	push	{r7, lr}
 8007f8a:	b084      	sub	sp, #16
 8007f8c:	af00      	add	r7, sp, #0
 8007f8e:	6078      	str	r0, [r7, #4]
 8007f90:	460b      	mov	r3, r1
 8007f92:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007f94:	2300      	movs	r3, #0
 8007f96:	73fb      	strb	r3, [r7, #15]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007f98:	2300      	movs	r3, #0
 8007f9a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	f8d3 32c8 	ldr.w	r3, [r3, #712]	; 0x2c8
 8007fa2:	78fa      	ldrb	r2, [r7, #3]
 8007fa4:	4611      	mov	r1, r2
 8007fa6:	4618      	mov	r0, r3
 8007fa8:	f7fb fa41 	bl	800342e <HAL_PCD_SetAddress>
 8007fac:	4603      	mov	r3, r0
 8007fae:	73fb      	strb	r3, [r7, #15]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007fb0:	7bfb      	ldrb	r3, [r7, #15]
 8007fb2:	4618      	mov	r0, r3
 8007fb4:	f000 f862 	bl	800807c <USBD_Get_USB_Status>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8007fbc:	7bbb      	ldrb	r3, [r7, #14]
}
 8007fbe:	4618      	mov	r0, r3
 8007fc0:	3710      	adds	r7, #16
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	bd80      	pop	{r7, pc}

08007fc6 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8007fc6:	b580      	push	{r7, lr}
 8007fc8:	b086      	sub	sp, #24
 8007fca:	af00      	add	r7, sp, #0
 8007fcc:	60f8      	str	r0, [r7, #12]
 8007fce:	607a      	str	r2, [r7, #4]
 8007fd0:	603b      	str	r3, [r7, #0]
 8007fd2:	460b      	mov	r3, r1
 8007fd4:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8007fd6:	2300      	movs	r3, #0
 8007fd8:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8007fda:	2300      	movs	r3, #0
 8007fdc:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8007fe4:	7af9      	ldrb	r1, [r7, #11]
 8007fe6:	683b      	ldr	r3, [r7, #0]
 8007fe8:	687a      	ldr	r2, [r7, #4]
 8007fea:	f7fb fb42 	bl	8003672 <HAL_PCD_EP_Transmit>
 8007fee:	4603      	mov	r3, r0
 8007ff0:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8007ff2:	7dfb      	ldrb	r3, [r7, #23]
 8007ff4:	4618      	mov	r0, r3
 8007ff6:	f000 f841 	bl	800807c <USBD_Get_USB_Status>
 8007ffa:	4603      	mov	r3, r0
 8007ffc:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8007ffe:	7dbb      	ldrb	r3, [r7, #22]
}
 8008000:	4618      	mov	r0, r3
 8008002:	3718      	adds	r7, #24
 8008004:	46bd      	mov	sp, r7
 8008006:	bd80      	pop	{r7, pc}

08008008 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint32_t size)
{
 8008008:	b580      	push	{r7, lr}
 800800a:	b086      	sub	sp, #24
 800800c:	af00      	add	r7, sp, #0
 800800e:	60f8      	str	r0, [r7, #12]
 8008010:	607a      	str	r2, [r7, #4]
 8008012:	603b      	str	r3, [r7, #0]
 8008014:	460b      	mov	r3, r1
 8008016:	72fb      	strb	r3, [r7, #11]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008018:	2300      	movs	r3, #0
 800801a:	75fb      	strb	r3, [r7, #23]
  USBD_StatusTypeDef usb_status = USBD_OK;
 800801c:	2300      	movs	r3, #0
 800801e:	75bb      	strb	r3, [r7, #22]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8008020:	68fb      	ldr	r3, [r7, #12]
 8008022:	f8d3 02c8 	ldr.w	r0, [r3, #712]	; 0x2c8
 8008026:	7af9      	ldrb	r1, [r7, #11]
 8008028:	683b      	ldr	r3, [r7, #0]
 800802a:	687a      	ldr	r2, [r7, #4]
 800802c:	f7fb fad6 	bl	80035dc <HAL_PCD_EP_Receive>
 8008030:	4603      	mov	r3, r0
 8008032:	75fb      	strb	r3, [r7, #23]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8008034:	7dfb      	ldrb	r3, [r7, #23]
 8008036:	4618      	mov	r0, r3
 8008038:	f000 f820 	bl	800807c <USBD_Get_USB_Status>
 800803c:	4603      	mov	r3, r0
 800803e:	75bb      	strb	r3, [r7, #22]

  return usb_status;
 8008040:	7dbb      	ldrb	r3, [r7, #22]
}
 8008042:	4618      	mov	r0, r3
 8008044:	3718      	adds	r7, #24
 8008046:	46bd      	mov	sp, r7
 8008048:	bd80      	pop	{r7, pc}
	...

0800804c <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 800804c:	b480      	push	{r7}
 800804e:	b083      	sub	sp, #12
 8008050:	af00      	add	r7, sp, #0
 8008052:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_HID_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8008054:	4b03      	ldr	r3, [pc, #12]	; (8008064 <USBD_static_malloc+0x18>)
}
 8008056:	4618      	mov	r0, r3
 8008058:	370c      	adds	r7, #12
 800805a:	46bd      	mov	sp, r7
 800805c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008060:	4770      	bx	lr
 8008062:	bf00      	nop
 8008064:	20001188 	.word	0x20001188

08008068 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8008068:	b480      	push	{r7}
 800806a:	b083      	sub	sp, #12
 800806c:	af00      	add	r7, sp, #0
 800806e:	6078      	str	r0, [r7, #4]

}
 8008070:	bf00      	nop
 8008072:	370c      	adds	r7, #12
 8008074:	46bd      	mov	sp, r7
 8008076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807a:	4770      	bx	lr

0800807c <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 800807c:	b480      	push	{r7}
 800807e:	b085      	sub	sp, #20
 8008080:	af00      	add	r7, sp, #0
 8008082:	4603      	mov	r3, r0
 8008084:	71fb      	strb	r3, [r7, #7]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8008086:	2300      	movs	r3, #0
 8008088:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 800808a:	79fb      	ldrb	r3, [r7, #7]
 800808c:	2b03      	cmp	r3, #3
 800808e:	d817      	bhi.n	80080c0 <USBD_Get_USB_Status+0x44>
 8008090:	a201      	add	r2, pc, #4	; (adr r2, 8008098 <USBD_Get_USB_Status+0x1c>)
 8008092:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008096:	bf00      	nop
 8008098:	080080a9 	.word	0x080080a9
 800809c:	080080af 	.word	0x080080af
 80080a0:	080080b5 	.word	0x080080b5
 80080a4:	080080bb 	.word	0x080080bb
  {
    case HAL_OK :
      usb_status = USBD_OK;
 80080a8:	2300      	movs	r3, #0
 80080aa:	73fb      	strb	r3, [r7, #15]
    break;
 80080ac:	e00b      	b.n	80080c6 <USBD_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 80080ae:	2303      	movs	r3, #3
 80080b0:	73fb      	strb	r3, [r7, #15]
    break;
 80080b2:	e008      	b.n	80080c6 <USBD_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 80080b4:	2301      	movs	r3, #1
 80080b6:	73fb      	strb	r3, [r7, #15]
    break;
 80080b8:	e005      	b.n	80080c6 <USBD_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 80080ba:	2303      	movs	r3, #3
 80080bc:	73fb      	strb	r3, [r7, #15]
    break;
 80080be:	e002      	b.n	80080c6 <USBD_Get_USB_Status+0x4a>
    default :
      usb_status = USBD_FAIL;
 80080c0:	2303      	movs	r3, #3
 80080c2:	73fb      	strb	r3, [r7, #15]
    break;
 80080c4:	bf00      	nop
  }
  return usb_status;
 80080c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80080c8:	4618      	mov	r0, r3
 80080ca:	3714      	adds	r7, #20
 80080cc:	46bd      	mov	sp, r7
 80080ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d2:	4770      	bx	lr

080080d4 <__libc_init_array>:
 80080d4:	b570      	push	{r4, r5, r6, lr}
 80080d6:	4d0d      	ldr	r5, [pc, #52]	; (800810c <__libc_init_array+0x38>)
 80080d8:	4c0d      	ldr	r4, [pc, #52]	; (8008110 <__libc_init_array+0x3c>)
 80080da:	1b64      	subs	r4, r4, r5
 80080dc:	10a4      	asrs	r4, r4, #2
 80080de:	2600      	movs	r6, #0
 80080e0:	42a6      	cmp	r6, r4
 80080e2:	d109      	bne.n	80080f8 <__libc_init_array+0x24>
 80080e4:	4d0b      	ldr	r5, [pc, #44]	; (8008114 <__libc_init_array+0x40>)
 80080e6:	4c0c      	ldr	r4, [pc, #48]	; (8008118 <__libc_init_array+0x44>)
 80080e8:	f000 f820 	bl	800812c <_init>
 80080ec:	1b64      	subs	r4, r4, r5
 80080ee:	10a4      	asrs	r4, r4, #2
 80080f0:	2600      	movs	r6, #0
 80080f2:	42a6      	cmp	r6, r4
 80080f4:	d105      	bne.n	8008102 <__libc_init_array+0x2e>
 80080f6:	bd70      	pop	{r4, r5, r6, pc}
 80080f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80080fc:	4798      	blx	r3
 80080fe:	3601      	adds	r6, #1
 8008100:	e7ee      	b.n	80080e0 <__libc_init_array+0xc>
 8008102:	f855 3b04 	ldr.w	r3, [r5], #4
 8008106:	4798      	blx	r3
 8008108:	3601      	adds	r6, #1
 800810a:	e7f2      	b.n	80080f2 <__libc_init_array+0x1e>
 800810c:	080081bc 	.word	0x080081bc
 8008110:	080081bc 	.word	0x080081bc
 8008114:	080081bc 	.word	0x080081bc
 8008118:	080081c0 	.word	0x080081c0

0800811c <memset>:
 800811c:	4402      	add	r2, r0
 800811e:	4603      	mov	r3, r0
 8008120:	4293      	cmp	r3, r2
 8008122:	d100      	bne.n	8008126 <memset+0xa>
 8008124:	4770      	bx	lr
 8008126:	f803 1b01 	strb.w	r1, [r3], #1
 800812a:	e7f9      	b.n	8008120 <memset+0x4>

0800812c <_init>:
 800812c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800812e:	bf00      	nop
 8008130:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008132:	bc08      	pop	{r3}
 8008134:	469e      	mov	lr, r3
 8008136:	4770      	bx	lr

08008138 <_fini>:
 8008138:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800813a:	bf00      	nop
 800813c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800813e:	bc08      	pop	{r3}
 8008140:	469e      	mov	lr, r3
 8008142:	4770      	bx	lr
